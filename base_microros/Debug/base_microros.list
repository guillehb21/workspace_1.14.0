
base_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  08017c00  08017c00  00027c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b14  08018b14  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  08018b14  08018b14  00028b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b1c  08018b1c  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018b1c  08018b1c  00028b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018b24  08018b24  00028b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08018b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000110  08018c38  00030110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001b0  08018cd8  000301b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001356c  20000250  08018d78  00030250  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200137bc  08018d78  000337bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 14 .comment      00000076  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 15 .debug_info   00026324  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004da2  00000000  00000000  0005661a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001d80  00000000  00000000  0005b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000016da  00000000  00000000  0005d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00009a21  00000000  00000000  0005e81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00023995  00000000  00000000  0006823b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00110e24  00000000  00000000  0008bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008b5c  00000000  00000000  0019c9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001a5550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000250 	.word	0x20000250
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017be8 	.word	0x08017be8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000254 	.word	0x20000254
 800020c:	08017be8 	.word	0x08017be8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bb 	b.w	8000678 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000688:	f007 fd0e 	bl	80080a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800068c:	4b5b      	ldr	r3, [pc, #364]	; (80007fc <pvPortMallocMicroROS+0x180>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000694:	f000 f98a 	bl	80009ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <pvPortMallocMicroROS+0x184>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 8092 	bne.w	80007ca <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01f      	beq.n	80006ec <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80006ac:	2208      	movs	r2, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d016      	beq.n	80006ec <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	3308      	adds	r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00c      	beq.n	80006ec <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	b672      	cpsid	i
 80006d8:	f383 8811 	msr	BASEPRI, r3
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	b662      	cpsie	i
 80006e6:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e8:	bf00      	nop
 80006ea:	e7fe      	b.n	80006ea <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d06b      	beq.n	80007ca <pvPortMallocMicroROS+0x14e>
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d866      	bhi.n	80007ca <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <pvPortMallocMicroROS+0x18c>)
 80006fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000700:	4b41      	ldr	r3, [pc, #260]	; (8000808 <pvPortMallocMicroROS+0x18c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000706:	e004      	b.n	8000712 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	d903      	bls.n	8000724 <pvPortMallocMicroROS+0xa8>
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f1      	bne.n	8000708 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000724:	4b35      	ldr	r3, [pc, #212]	; (80007fc <pvPortMallocMicroROS+0x180>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072a:	429a      	cmp	r2, r3
 800072c:	d04d      	beq.n	80007ca <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2208      	movs	r2, #8
 8000734:	4413      	add	r3, r2
 8000736:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1ad2      	subs	r2, r2, r3
 8000748:	2308      	movs	r3, #8
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	429a      	cmp	r2, r3
 800074e:	d921      	bls.n	8000794 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00c      	beq.n	800077c <pvPortMallocMicroROS+0x100>
	__asm volatile
 8000762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000766:	b672      	cpsid	i
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	b662      	cpsie	i
 8000776:	613b      	str	r3, [r7, #16]
}
 8000778:	bf00      	nop
 800077a:	e7fe      	b.n	800077a <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1ad2      	subs	r2, r2, r3
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800078e:	69b8      	ldr	r0, [r7, #24]
 8000790:	f000 f96e 	bl	8000a70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <pvPortMallocMicroROS+0x188>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80007a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <pvPortMallocMicroROS+0x190>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d203      	bcs.n	80007b6 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <pvPortMallocMicroROS+0x190>)
 80007b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	431a      	orrs	r2, r3
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007ca:	f007 fc7b 	bl	80080c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00c      	beq.n	80007f2 <pvPortMallocMicroROS+0x176>
	__asm volatile
 80007d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007dc:	b672      	cpsid	i
 80007de:	f383 8811 	msr	BASEPRI, r3
 80007e2:	f3bf 8f6f 	isb	sy
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	b662      	cpsie	i
 80007ec:	60fb      	str	r3, [r7, #12]
}
 80007ee:	bf00      	nop
 80007f0:	e7fe      	b.n	80007f0 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 80007f2:	69fb      	ldr	r3, [r7, #28]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20003e74 	.word	0x20003e74
 8000800:	20003e80 	.word	0x20003e80
 8000804:	20003e78 	.word	0x20003e78
 8000808:	20003e6c 	.word	0x20003e6c
 800080c:	20003e7c 	.word	0x20003e7c

08000810 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d04c      	beq.n	80008bc <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000822:	2308      	movs	r3, #8
 8000824:	425b      	negs	r3, r3
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4413      	add	r3, r2
 800082a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <vPortFreeMicroROS+0xb4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4013      	ands	r3, r2
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10c      	bne.n	8000858 <vPortFreeMicroROS+0x48>
	__asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000842:	b672      	cpsid	i
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	b662      	cpsie	i
 8000852:	60fb      	str	r3, [r7, #12]
}
 8000854:	bf00      	nop
 8000856:	e7fe      	b.n	8000856 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00c      	beq.n	800087a <vPortFreeMicroROS+0x6a>
	__asm volatile
 8000860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000864:	b672      	cpsid	i
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	b662      	cpsie	i
 8000874:	60bb      	str	r3, [r7, #8]
}
 8000876:	bf00      	nop
 8000878:	e7fe      	b.n	8000878 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <vPortFreeMicroROS+0xb4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4013      	ands	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d019      	beq.n	80008bc <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d115      	bne.n	80008bc <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <vPortFreeMicroROS+0xb4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	43db      	mvns	r3, r3
 800089a:	401a      	ands	r2, r3
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008a0:	f007 fc02 	bl	80080a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <vPortFreeMicroROS+0xb8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <vPortFreeMicroROS+0xb8>)
 80008b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008b2:	6938      	ldr	r0, [r7, #16]
 80008b4:	f000 f8dc 	bl	8000a70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008b8:	f007 fc04 	bl	80080c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20003e80 	.word	0x20003e80
 80008c8:	20003e78 	.word	0x20003e78

080008cc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008d8:	2308      	movs	r3, #8
 80008da:	425b      	negs	r3, r3
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <getBlockSize+0x38>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	43db      	mvns	r3, r3
 80008f0:	4013      	ands	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]

	return count;
 80008f4:	68fb      	ldr	r3, [r7, #12]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20003e80 	.word	0x20003e80

08000908 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000912:	f007 fbc9 	bl	80080a8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000916:	6838      	ldr	r0, [r7, #0]
 8000918:	f7ff feb0 	bl	800067c <pvPortMallocMicroROS>
 800091c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d017      	beq.n	8000954 <pvPortReallocMicroROS+0x4c>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d014      	beq.n	8000954 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffce 	bl	80008cc <getBlockSize>
 8000930:	4603      	mov	r3, r0
 8000932:	2208      	movs	r2, #8
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d201      	bcs.n	8000944 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	68b8      	ldr	r0, [r7, #8]
 800094a:	f016 fa6e 	bl	8016e2a <memcpy>

		vPortFreeMicroROS(pv);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff5e 	bl	8000810 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000954:	f007 fbb6 	bl	80080c4 <xTaskResumeAll>

	return newmem;
 8000958:	68bb      	ldr	r3, [r7, #8]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096c:	f007 fb9c 	bl	80080a8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	fb02 f303 	mul.w	r3, r2, r3
 8000978:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff fe7e 	bl	800067c <pvPortMallocMicroROS>
 8000980:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000986:	e004      	b.n	8000992 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	613a      	str	r2, [r7, #16]
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	617a      	str	r2, [r7, #20]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f5      	bne.n	8000988 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800099c:	f007 fb92 	bl	80080c4 <xTaskResumeAll>
  	return mem;
 80009a0:	68fb      	ldr	r3, [r7, #12]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <prvHeapInit+0xac>)
 80009ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00c      	beq.n	80009e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3307      	adds	r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f023 0307 	bic.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <prvHeapInit+0xac>)
 80009dc:	4413      	add	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <prvHeapInit+0xb0>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <prvHeapInit+0xb0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009f8:	2208      	movs	r2, #8
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f023 0307 	bic.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <prvHeapInit+0xb4>)
 8000a0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <prvHeapInit+0xb4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	1ad2      	subs	r2, r2, r3
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <prvHeapInit+0xb4>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <prvHeapInit+0xb8>)
 8000a3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <prvHeapInit+0xbc>)
 8000a42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <prvHeapInit+0xc0>)
 8000a46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	2000026c 	.word	0x2000026c
 8000a5c:	20003e6c 	.word	0x20003e6c
 8000a60:	20003e74 	.word	0x20003e74
 8000a64:	20003e7c 	.word	0x20003e7c
 8000a68:	20003e78 	.word	0x20003e78
 8000a6c:	20003e80 	.word	0x20003e80

08000a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <prvInsertBlockIntoFreeList+0xac>)
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e002      	b.n	8000a84 <prvInsertBlockIntoFreeList+0x14>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d8f7      	bhi.n	8000a7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d108      	bne.n	8000ab2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	441a      	add	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d118      	bne.n	8000af8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <prvInsertBlockIntoFreeList+0xb0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d00d      	beq.n	8000aee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	441a      	add	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e008      	b.n	8000b00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <prvInsertBlockIntoFreeList+0xb0>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e003      	b.n	8000b00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d002      	beq.n	8000b0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20003e6c 	.word	0x20003e6c
 8000b20:	20003e74 	.word	0x20003e74

08000b24 <subscription_callback_ancle_left_reference>:
std_msgs__msg__Float32 msg_aux_id_reference ;
std_msgs__msg__Float32 msg_aux_value_reference;


void subscription_callback_ancle_left_reference(const void * msgin)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b30:	2120      	movs	r1, #32
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <subscription_callback_ancle_left_reference+0x1c>)
 8000b34:	f002 fdf3 	bl	800371e <HAL_GPIO_TogglePin>

}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020000 	.word	0x40020000

08000b44 <subscription_callback_ancle_right_reference>:
void subscription_callback_ancle_right_reference(const void * msgin)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	UNUSED(msg);

}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <subscription_callback_knee_left_reference>:
void subscription_callback_knee_left_reference(const void * msgin)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	UNUSED(msg);

}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <subscription_callback_knee_right_reference>:
void subscription_callback_knee_right_reference(const void * msgin)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	UNUSED(msg);

}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <subscription_callback_heap_left_reference>:
void subscription_callback_heap_left_reference(const void * msgin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	UNUSED(msg);

}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba8:	f001 fa61 	bl	800206e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bac:	f000 f820 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f000 f98c 	bl	8000ecc <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb4:	f000 f964 	bl	8000e80 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bb8:	f000 f904 	bl	8000dc4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bbc:	f000 f932 	bl	8000e24 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000bc0:	f000 f87e 	bl	8000cc0 <MX_CAN1_Init>
  MX_ETH_Init();
 8000bc4:	f000 f8b0 	bl	8000d28 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc8:	f006 f8f4 	bl	8006db4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <main+0x40>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <main+0x44>)
 8000bd2:	f006 f959 	bl	8006e88 <osThreadNew>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <main+0x48>)
 8000bda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bdc:	f006 f91e 	bl	8006e1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <main+0x3c>
 8000be2:	bf00      	nop
 8000be4:	08017db0 	.word	0x08017db0
 8000be8:	08001011 	.word	0x08001011
 8000bec:	200045f4 	.word	0x200045f4

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	; 0x50
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0320 	add.w	r3, r7, #32
 8000bfa:	2230      	movs	r2, #48	; 0x30
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f016 f84a 	bl	8016c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c14:	f002 fed8 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <SystemClock_Config+0xc8>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <SystemClock_Config+0xc8>)
 8000c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c22:	6413      	str	r3, [r2, #64]	; 0x40
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <SystemClock_Config+0xc8>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <SystemClock_Config+0xcc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c38:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <SystemClock_Config+0xcc>)
 8000c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <SystemClock_Config+0xcc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c60:	2304      	movs	r3, #4
 8000c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c64:	2348      	movs	r3, #72	; 0x48
 8000c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c70:	f107 0320 	add.w	r3, r7, #32
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 feb7 	bl	80039e8 <HAL_RCC_OscConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c80:	f000 fbc2 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c84:	230f      	movs	r3, #15
 8000c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 f945 	bl	8003f30 <HAL_RCC_ClockConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cac:	f000 fbac 	bl	8001408 <Error_Handler>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3750      	adds	r7, #80	; 0x50
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40007000 	.word	0x40007000

08000cc0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <MX_CAN1_Init+0x64>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000ccc:	2210      	movs	r2, #16
 8000cce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_CAN1_Init+0x60>)
 8000d0e:	f001 f9ff 	bl	8002110 <HAL_CAN_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 fb76 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20003ef4 	.word	0x20003ef4
 8000d24:	40006400 	.word	0x40006400

08000d28 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_ETH_Init+0x84>)
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <MX_ETH_Init+0x88>)
 8000d30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_ETH_Init+0x8c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_ETH_Init+0x8c>)
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ETH_Init+0x8c>)
 8000d40:	22e1      	movs	r2, #225	; 0xe1
 8000d42:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_ETH_Init+0x8c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ETH_Init+0x8c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_ETH_Init+0x8c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_ETH_Init+0x84>)
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <MX_ETH_Init+0x8c>)
 8000d5a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_ETH_Init+0x84>)
 8000d5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d62:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_ETH_Init+0x84>)
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <MX_ETH_Init+0x90>)
 8000d68:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_ETH_Init+0x84>)
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <MX_ETH_Init+0x94>)
 8000d6e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_ETH_Init+0x84>)
 8000d72:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d76:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <MX_ETH_Init+0x84>)
 8000d7a:	f001 ffbd 	bl	8002cf8 <HAL_ETH_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d84:	f000 fb40 	bl	8001408 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d88:	2238      	movs	r2, #56	; 0x38
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_ETH_Init+0x98>)
 8000d8e:	f015 ff83 	bl	8016c98 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_ETH_Init+0x98>)
 8000d94:	2221      	movs	r2, #33	; 0x21
 8000d96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_ETH_Init+0x98>)
 8000d9a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000d9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_ETH_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20003f1c 	.word	0x20003f1c
 8000db0:	40028000 	.word	0x40028000
 8000db4:	20009474 	.word	0x20009474
 8000db8:	200001b0 	.word	0x200001b0
 8000dbc:	20000110 	.word	0x20000110
 8000dc0:	20003ebc 	.word	0x20003ebc

08000dc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <MX_USART3_UART_Init+0x5c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USART3_UART_Init+0x58>)
 8000e08:	f004 f9ae 	bl	8005168 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e12:	f000 faf9 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20003fcc 	.word	0x20003fcc
 8000e20:	40004800 	.word	0x40004800

08000e24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e32:	2206      	movs	r2, #6
 8000e34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e68:	f002 fc73 	bl	8003752 <HAL_PCD_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e72:	f000 fac9 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20004114 	.word	0x20004114

08000e80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_DMA_Init+0x48>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_DMA_Init+0x48>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_DMA_Init+0x48>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f001 fae8 	bl	8002478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f001 fb01 	bl	80024b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	200e      	movs	r0, #14
 8000eb4:	f001 fae0 	bl	8002478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000eb8:	200e      	movs	r0, #14
 8000eba:	f001 faf9 	bl	80024b0 <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b47      	ldr	r3, [pc, #284]	; (8001000 <MX_GPIO_Init+0x134>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a46      	ldr	r2, [pc, #280]	; (8001000 <MX_GPIO_Init+0x134>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b44      	ldr	r3, [pc, #272]	; (8001000 <MX_GPIO_Init+0x134>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <MX_GPIO_Init+0x134>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a40      	ldr	r2, [pc, #256]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a3a      	ldr	r2, [pc, #232]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a34      	ldr	r2, [pc, #208]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a2e      	ldr	r2, [pc, #184]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <MX_GPIO_Init+0x134>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f78:	4822      	ldr	r0, [pc, #136]	; (8001004 <MX_GPIO_Init+0x138>)
 8000f7a:	f002 fbb7 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <MX_GPIO_Init+0x13c>)
 8000f84:	f002 fbb2 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	481b      	ldr	r0, [pc, #108]	; (800100c <MX_GPIO_Init+0x140>)
 8000fa0:	f002 f9f8 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fa4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_GPIO_Init+0x138>)
 8000fbe:	f002 f9e9 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fc2:	2340      	movs	r3, #64	; 0x40
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <MX_GPIO_Init+0x13c>)
 8000fda:	f002 f9db 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_GPIO_Init+0x13c>)
 8000ff2:	f002 f9cf 	bl	8003394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	; 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40020400 	.word	0x40020400
 8001008:	40021800 	.word	0x40021800
 800100c:	40020800 	.word	0x40020800

08001010 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b0d8      	sub	sp, #352	; 0x160
 8001014:	af02      	add	r7, sp, #8
 8001016:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800101a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800101e:	6018      	str	r0, [r3, #0]
	  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8001020:	4bc3      	ldr	r3, [pc, #780]	; (8001330 <StartDefaultTask+0x320>)
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	4bc3      	ldr	r3, [pc, #780]	; (8001334 <StartDefaultTask+0x324>)
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	4bc3      	ldr	r3, [pc, #780]	; (8001338 <StartDefaultTask+0x328>)
 800102a:	4ac4      	ldr	r2, [pc, #784]	; (800133c <StartDefaultTask+0x32c>)
 800102c:	49c4      	ldr	r1, [pc, #784]	; (8001340 <StartDefaultTask+0x330>)
 800102e:	2001      	movs	r0, #1
 8001030:	f009 fdce 	bl	800abd0 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001034:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001038:	4618      	mov	r0, r3
 800103a:	f009 fcfd 	bl	800aa38 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800103e:	4bc1      	ldr	r3, [pc, #772]	; (8001344 <StartDefaultTask+0x334>)
 8001040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001044:	4bc0      	ldr	r3, [pc, #768]	; (8001348 <StartDefaultTask+0x338>)
 8001046:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  freeRTOS_allocator.reallocate = microros_reallocate;
 800104a:	4bc0      	ldr	r3, [pc, #768]	; (800134c <StartDefaultTask+0x33c>)
 800104c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001050:	4bbf      	ldr	r3, [pc, #764]	; (8001350 <StartDefaultTask+0x340>)
 8001052:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001056:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800105a:	4618      	mov	r0, r3
 800105c:	f009 fcfa 	bl	800aa54 <rcutils_set_default_allocator>
 8001060:	4603      	mov	r3, r0
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800106c:	f240 2155 	movw	r1, #597	; 0x255
 8001070:	48b8      	ldr	r0, [pc, #736]	; (8001354 <StartDefaultTask+0x344>)
 8001072:	f015 fd25 	bl	8016ac0 <iprintf>



	  //mensajes subcriptor

	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor() ;
 8001076:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800107a:	4618      	mov	r0, r3
 800107c:	f009 f8ea 	bl	800a254 <rclc_executor_get_zero_initialized_executor>
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001080:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001084:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 8001088:	463b      	mov	r3, r7
 800108a:	4618      	mov	r0, r3
 800108c:	f009 fd00 	bl	800aa90 <rcutils_get_default_allocator>
 8001090:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001094:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001098:	461d      	mov	r5, r3
 800109a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	f009 fbbb 	bl	800a828 <rclc_support_init>
	  // create node
	   rclc_node_init_default(&node, "cubemx_node", "", &support);
 80010b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010b6:	f107 0020 	add.w	r0, r7, #32
 80010ba:	4aa7      	ldr	r2, [pc, #668]	; (8001358 <StartDefaultTask+0x348>)
 80010bc:	49a7      	ldr	r1, [pc, #668]	; (800135c <StartDefaultTask+0x34c>)
 80010be:	f009 fbfd 	bl	800a8bc <rclc_node_init_default>

	 // create publisher

	  rclc_publisher_init_default(
 80010c2:	f00a fac3 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010c6:	4602      	mov	r2, r0
 80010c8:	f107 0120 	add.w	r1, r7, #32
 80010cc:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80010d0:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <StartDefaultTask+0x350>)
 80010d2:	f009 fc35 	bl	800a940 <rclc_publisher_init_default>
	    &publisher_ancle_left_current,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	    "ancle_left_current");

	  rclc_publisher_init_default(
 80010d6:	f00a fab9 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010da:	4602      	mov	r2, r0
 80010dc:	f107 0120 	add.w	r1, r7, #32
 80010e0:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80010e4:	4b9f      	ldr	r3, [pc, #636]	; (8001364 <StartDefaultTask+0x354>)
 80010e6:	f009 fc2b 	bl	800a940 <rclc_publisher_init_default>
	    &publisher_ancle_right_current,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	    "ancle_right_current");

	  rclc_publisher_init_default(
 80010ea:	f00a faaf 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f107 0120 	add.w	r1, r7, #32
 80010f4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80010f8:	4b9b      	ldr	r3, [pc, #620]	; (8001368 <StartDefaultTask+0x358>)
 80010fa:	f009 fc21 	bl	800a940 <rclc_publisher_init_default>
	      &publisher_knee_left_current,
	      &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	      "knee_left_current");

	  rclc_publisher_init_default(
 80010fe:	f00a faa5 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001102:	4602      	mov	r2, r0
 8001104:	f107 0120 	add.w	r1, r7, #32
 8001108:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 800110c:	4b97      	ldr	r3, [pc, #604]	; (800136c <StartDefaultTask+0x35c>)
 800110e:	f009 fc17 	bl	800a940 <rclc_publisher_init_default>
	      &publisher_knee_right_current,
	      &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	      "knee_right_current");
	  rclc_publisher_init_default(
 8001112:	f00a fa9b 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001116:	4602      	mov	r2, r0
 8001118:	f107 0120 	add.w	r1, r7, #32
 800111c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001120:	4b93      	ldr	r3, [pc, #588]	; (8001370 <StartDefaultTask+0x360>)
 8001122:	f009 fc0d 	bl	800a940 <rclc_publisher_init_default>
	        &publisher_heap_left_current,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	        "heap_left_current");

	 rclc_publisher_init_default(
 8001126:	f00a fa91 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800112a:	4602      	mov	r2, r0
 800112c:	f107 0120 	add.w	r1, r7, #32
 8001130:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8001134:	4b8f      	ldr	r3, [pc, #572]	; (8001374 <StartDefaultTask+0x364>)
 8001136:	f009 fc03 	bl	800a940 <rclc_publisher_init_default>
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	        "heap_right_current");



	   msg_ancle_left_current.data = 0;
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	   msg_ancle_right_current.data = 0;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	   msg_knee_left_current.data=0;
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	   msg_knee_right_current.data=0;
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	   msg_heap_left_current.data=0;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	   msg_heap_right_current.data=0;
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	//subcriptor
	   rclc_subscription_init_default(
 800116a:	f00a fa6f 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800116e:	4602      	mov	r2, r0
 8001170:	f107 0120 	add.w	r1, r7, #32
 8001174:	4b80      	ldr	r3, [pc, #512]	; (8001378 <StartDefaultTask+0x368>)
 8001176:	4881      	ldr	r0, [pc, #516]	; (800137c <StartDefaultTask+0x36c>)
 8001178:	f009 fc1c 	bl	800a9b4 <rclc_subscription_init_default>
	   		&subscription_ancle_left_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/ancle_left_reference");

	   rclc_subscription_init_default(
 800117c:	f00a fa66 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001180:	4602      	mov	r2, r0
 8001182:	f107 0120 	add.w	r1, r7, #32
 8001186:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <StartDefaultTask+0x370>)
 8001188:	487e      	ldr	r0, [pc, #504]	; (8001384 <StartDefaultTask+0x374>)
 800118a:	f009 fc13 	bl	800a9b4 <rclc_subscription_init_default>
	   		&subscription_ancle_right_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/ancle_right_reference");

	   rclc_subscription_init_default(
 800118e:	f00a fa5d 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001192:	4602      	mov	r2, r0
 8001194:	f107 0120 	add.w	r1, r7, #32
 8001198:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <StartDefaultTask+0x378>)
 800119a:	487c      	ldr	r0, [pc, #496]	; (800138c <StartDefaultTask+0x37c>)
 800119c:	f009 fc0a 	bl	800a9b4 <rclc_subscription_init_default>
	   		&subscription_knee_left_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/knee_left_reference");

	   rclc_subscription_init_default(
 80011a0:	f00a fa54 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f107 0120 	add.w	r1, r7, #32
 80011aa:	4b79      	ldr	r3, [pc, #484]	; (8001390 <StartDefaultTask+0x380>)
 80011ac:	4879      	ldr	r0, [pc, #484]	; (8001394 <StartDefaultTask+0x384>)
 80011ae:	f009 fc01 	bl	800a9b4 <rclc_subscription_init_default>
	   		&subscription_knee_right_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/knee_right_reference");

	   rclc_subscription_init_default(
 80011b2:	f00a fa4b 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f107 0120 	add.w	r1, r7, #32
 80011bc:	4b76      	ldr	r3, [pc, #472]	; (8001398 <StartDefaultTask+0x388>)
 80011be:	4877      	ldr	r0, [pc, #476]	; (800139c <StartDefaultTask+0x38c>)
 80011c0:	f009 fbf8 	bl	800a9b4 <rclc_subscription_init_default>
		   		&subscription_heap_left_reference,
		   		&node,
				ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
		   		"/heap_left_reference");

	   rclc_subscription_init_default(
 80011c4:	f00a fa42 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f107 0120 	add.w	r1, r7, #32
 80011ce:	4b74      	ldr	r3, [pc, #464]	; (80013a0 <StartDefaultTask+0x390>)
 80011d0:	4874      	ldr	r0, [pc, #464]	; (80013a4 <StartDefaultTask+0x394>)
 80011d2:	f009 fbef 	bl	800a9b4 <rclc_subscription_init_default>
	   		&subscription_heap_right_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/heap_right_reference");

	   rclc_subscription_init_default(
 80011d6:	f00a fa39 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80011da:	4602      	mov	r2, r0
 80011dc:	f107 0120 	add.w	r1, r7, #32
 80011e0:	4b71      	ldr	r3, [pc, #452]	; (80013a8 <StartDefaultTask+0x398>)
 80011e2:	4872      	ldr	r0, [pc, #456]	; (80013ac <StartDefaultTask+0x39c>)
 80011e4:	f009 fbe6 	bl	800a9b4 <rclc_subscription_init_default>
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/aux_id_reference");


	   rclc_subscription_init_default(
 80011e8:	f00a fa30 	bl	800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f107 0120 	add.w	r1, r7, #32
 80011f2:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <StartDefaultTask+0x3a0>)
 80011f4:	486f      	ldr	r0, [pc, #444]	; (80013b4 <StartDefaultTask+0x3a4>)
 80011f6:	f009 fbdd 	bl	800a9b4 <rclc_subscription_init_default>



	   //create executor

	   rclc_executor_init(&executor, &support.context, 8, &allocator);
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001202:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001206:	2208      	movs	r2, #8
 8001208:	f009 f82e 	bl	800a268 <rclc_executor_init>


	   rclc_executor_add_subscription(&executor,
 800120c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <StartDefaultTask+0x3a8>)
 8001216:	4a69      	ldr	r2, [pc, #420]	; (80013bc <StartDefaultTask+0x3ac>)
 8001218:	4958      	ldr	r1, [pc, #352]	; (800137c <StartDefaultTask+0x36c>)
 800121a:	f009 f8a1 	bl	800a360 <rclc_executor_add_subscription>
			   	   	   	   	   	   	  &subscription_ancle_left_reference,
									  &msg_ancle_left_reference,
									  &subscription_callback_ancle_left_reference, ON_NEW_DATA);

	   rclc_executor_add_subscription(&executor,
 800121e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <StartDefaultTask+0x3b0>)
 8001228:	4a66      	ldr	r2, [pc, #408]	; (80013c4 <StartDefaultTask+0x3b4>)
 800122a:	4956      	ldr	r1, [pc, #344]	; (8001384 <StartDefaultTask+0x374>)
 800122c:	f009 f898 	bl	800a360 <rclc_executor_add_subscription>
			   	   	   	   	   	   	  &subscription_ancle_right_reference,
									  &msg_ancle_right_reference,
									  &subscription_callback_ancle_right_reference, ON_NEW_DATA);


	   rclc_executor_add_subscription(&executor,
 8001230:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <StartDefaultTask+0x3b8>)
 800123a:	4a64      	ldr	r2, [pc, #400]	; (80013cc <StartDefaultTask+0x3bc>)
 800123c:	4953      	ldr	r1, [pc, #332]	; (800138c <StartDefaultTask+0x37c>)
 800123e:	f009 f88f 	bl	800a360 <rclc_executor_add_subscription>
			   	   	   	   	   	   	  &subscription_knee_left_reference,
									  &msg_knee_left_reference,
									  &subscription_callback_knee_left_reference, ON_NEW_DATA);

	   rclc_executor_add_subscription(&executor,
 8001242:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <StartDefaultTask+0x3c0>)
 800124c:	4a61      	ldr	r2, [pc, #388]	; (80013d4 <StartDefaultTask+0x3c4>)
 800124e:	4951      	ldr	r1, [pc, #324]	; (8001394 <StartDefaultTask+0x384>)
 8001250:	f009 f886 	bl	800a360 <rclc_executor_add_subscription>
			   	   	   	   	   	   	  &subscription_knee_right_reference,
									  &msg_knee_right_reference,
									  &subscription_callback_knee_right_reference, ON_NEW_DATA);


	   rclc_executor_add_subscription(&executor,
 8001254:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <StartDefaultTask+0x3c8>)
 800125e:	4a5f      	ldr	r2, [pc, #380]	; (80013dc <StartDefaultTask+0x3cc>)
 8001260:	494e      	ldr	r1, [pc, #312]	; (800139c <StartDefaultTask+0x38c>)
 8001262:	f009 f87d 	bl	800a360 <rclc_executor_add_subscription>

	///
	  for(;;)
	  {

		  	rcl_ret_t ret1 = rcl_publish(&publisher_ancle_left_current, &msg_ancle_left_current, NULL);
 8001266:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800126a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800126e:	2200      	movs	r2, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fc61 	bl	8009b38 <rcl_publish>
 8001276:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154


		    rcl_ret_t ret2 = rcl_publish(&publisher_ancle_right_current, &msg_ancle_right_current, NULL);
 800127a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800127e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001282:	2200      	movs	r2, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f008 fc57 	bl	8009b38 <rcl_publish>
 800128a:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

		    rcl_ret_t ret3 = rcl_publish(&publisher_knee_left_current, &msg_knee_left_current, NULL);
 800128e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001292:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001296:	2200      	movs	r2, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fc4d 	bl	8009b38 <rcl_publish>
 800129e:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

		    rcl_ret_t ret4 = rcl_publish(&publisher_knee_right_current, &msg_knee_right_current, NULL);
 80012a2:	f507 7182 	add.w	r1, r7, #260	; 0x104
 80012a6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80012aa:	2200      	movs	r2, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f008 fc43 	bl	8009b38 <rcl_publish>
 80012b2:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148

		    rcl_ret_t ret5 = rcl_publish(&publisher_heap_left_current, &msg_heap_left_current, NULL);
 80012b6:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80012ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012be:	2200      	movs	r2, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f008 fc39 	bl	8009b38 <rcl_publish>
 80012c6:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144


		    rcl_ret_t ret6 = rcl_publish(&publisher_heap_right_current, &msg_heap_right_current, NULL);
 80012ca:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80012ce:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80012d2:	2200      	movs	r2, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 fc2f 	bl	8009b38 <rcl_publish>
 80012da:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140


		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		msg_ancle_left_current.data=msg_ancle_left_reference.data;
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <StartDefaultTask+0x3ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		msg_ancle_right_current.data=msg_ancle_right_reference.data;
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <StartDefaultTask+0x3b4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		msg_knee_left_current.data=msg_knee_left_reference.data;
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <StartDefaultTask+0x3bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		msg_knee_right_current.data=msg_knee_right_reference.data;
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <StartDefaultTask+0x3c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		msg_heap_left_current.data=msg_heap_left_reference.data;
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <StartDefaultTask+0x3cc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		msg_heap_right_current.data=msg_heap_right_reference.data;
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <StartDefaultTask+0x3d0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		//msg_heap_left_current.data=msg_aux_id_reference.data;
		//msg_heap_right_current.data=msg_aux_value_reference.data;
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	    osDelay(1000);
 800130e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001312:	f005 fe5f 	bl	8006fd4 <osDelay>
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001316:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800131a:	a303      	add	r3, pc, #12	; (adr r3, 8001328 <StartDefaultTask+0x318>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	4608      	mov	r0, r1
 8001322:	f009 fa47 	bl	800a7b4 <rclc_executor_spin_some>
	  {
 8001326:	e79e      	b.n	8001266 <StartDefaultTask+0x256>
 8001328:	05f5e100 	.word	0x05f5e100
 800132c:	00000000 	.word	0x00000000
 8001330:	08001f75 	.word	0x08001f75
 8001334:	08001f15 	.word	0x08001f15
 8001338:	08001ef5 	.word	0x08001ef5
 800133c:	08001ec9 	.word	0x08001ec9
 8001340:	20003fcc 	.word	0x20003fcc
 8001344:	08001415 	.word	0x08001415
 8001348:	08001459 	.word	0x08001459
 800134c:	08001491 	.word	0x08001491
 8001350:	080014fd 	.word	0x080014fd
 8001354:	08017c0c 	.word	0x08017c0c
 8001358:	08017c34 	.word	0x08017c34
 800135c:	08017c38 	.word	0x08017c38
 8001360:	08017c44 	.word	0x08017c44
 8001364:	08017c58 	.word	0x08017c58
 8001368:	08017c6c 	.word	0x08017c6c
 800136c:	08017c80 	.word	0x08017c80
 8001370:	08017c94 	.word	0x08017c94
 8001374:	08017ca8 	.word	0x08017ca8
 8001378:	08017cbc 	.word	0x08017cbc
 800137c:	20003e84 	.word	0x20003e84
 8001380:	08017cd4 	.word	0x08017cd4
 8001384:	20003e88 	.word	0x20003e88
 8001388:	08017cec 	.word	0x08017cec
 800138c:	20003e8c 	.word	0x20003e8c
 8001390:	08017d04 	.word	0x08017d04
 8001394:	20003e90 	.word	0x20003e90
 8001398:	08017d1c 	.word	0x08017d1c
 800139c:	20003e94 	.word	0x20003e94
 80013a0:	08017d34 	.word	0x08017d34
 80013a4:	20003e98 	.word	0x20003e98
 80013a8:	08017d4c 	.word	0x08017d4c
 80013ac:	20003e9c 	.word	0x20003e9c
 80013b0:	08017d60 	.word	0x08017d60
 80013b4:	20003ea0 	.word	0x20003ea0
 80013b8:	08000b25 	.word	0x08000b25
 80013bc:	20003ea4 	.word	0x20003ea4
 80013c0:	08000b45 	.word	0x08000b45
 80013c4:	20003ea8 	.word	0x20003ea8
 80013c8:	08000b5d 	.word	0x08000b5d
 80013cc:	20003eac 	.word	0x20003eac
 80013d0:	08000b75 	.word	0x08000b75
 80013d4:	20003eb0 	.word	0x20003eb0
 80013d8:	08000b8d 	.word	0x08000b8d
 80013dc:	20003eb4 	.word	0x20003eb4
 80013e0:	20003eb8 	.word	0x20003eb8

080013e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013f6:	f000 fe47 	bl	8002088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40010000 	.word	0x40010000

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <microros_allocate+0x3c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <microros_allocate+0x3c>)
 800142c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <microros_allocate+0x40>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <microros_allocate+0x40>)
 800143c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff f91c 	bl	800067c <pvPortMallocMicroROS>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000947c 	.word	0x2000947c
 8001454:	20009480 	.word	0x20009480

08001458 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fa2f 	bl	80008cc <getBlockSize>
 800146e:	4603      	mov	r3, r0
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <microros_deallocate+0x34>)
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	461a      	mov	r2, r3
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <microros_deallocate+0x34>)
 800147a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff f9c7 	bl	8000810 <vPortFreeMicroROS>
  }
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20009480 	.word	0x20009480

08001490 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <microros_reallocate+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <microros_reallocate+0x64>)
 80014aa:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <microros_reallocate+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	4413      	add	r3, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <microros_reallocate+0x68>)
 80014ba:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f7ff f8da 	bl	800067c <pvPortMallocMicroROS>
 80014c8:	4603      	mov	r3, r0
 80014ca:	e00e      	b.n	80014ea <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff f9fd 	bl	80008cc <getBlockSize>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <microros_reallocate+0x68>)
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <microros_reallocate+0x68>)
 80014de:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fa10 	bl	8000908 <pvPortReallocMicroROS>
 80014e8:	4603      	mov	r3, r0
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000947c 	.word	0x2000947c
 80014f8:	20009480 	.word	0x20009480

080014fc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <microros_zero_allocate+0x48>)
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	4413      	add	r3, r2
 8001516:	461a      	mov	r2, r3
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <microros_zero_allocate+0x48>)
 800151a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <microros_zero_allocate+0x4c>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	4413      	add	r3, r2
 800152a:	461a      	mov	r2, r3
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <microros_zero_allocate+0x4c>)
 800152e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff fa15 	bl	8000962 <pvPortCallocMicroROS>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000947c 	.word	0x2000947c
 8001548:	20009480 	.word	0x20009480
 800154c:	00000000 	.word	0x00000000

08001550 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001566:	a320      	add	r3, pc, #128	; (adr r3, 80015e8 <UTILS_NanosecondsToTimespec+0x98>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7fe feb8 	bl	80002e0 <__aeabi_ldivmod>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800157a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157e:	a31a      	add	r3, pc, #104	; (adr r3, 80015e8 <UTILS_NanosecondsToTimespec+0x98>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe feac 	bl	80002e0 <__aeabi_ldivmod>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da20      	bge.n	80015d6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <UTILS_NanosecondsToTimespec+0x90>)
 800159a:	fb82 1203 	smull	r1, r2, r2, r3
 800159e:	1712      	asrs	r2, r2, #28
 80015a0:	17db      	asrs	r3, r3, #31
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	6979      	ldr	r1, [r7, #20]
 80015b0:	17c8      	asrs	r0, r1, #31
 80015b2:	460c      	mov	r4, r1
 80015b4:	4605      	mov	r5, r0
 80015b6:	ebb2 0804 	subs.w	r8, r2, r4
 80015ba:	eb63 0905 	sbc.w	r9, r3, r5
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	4906      	ldr	r1, [pc, #24]	; (80015e4 <UTILS_NanosecondsToTimespec+0x94>)
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	441a      	add	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
    }
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015e0:	44b82fa1 	.word	0x44b82fa1
 80015e4:	3b9aca00 	.word	0x3b9aca00
 80015e8:	3b9aca00 	.word	0x3b9aca00
 80015ec:	00000000 	.word	0x00000000

080015f0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80015f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f4:	b08e      	sub	sp, #56	; 0x38
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6278      	str	r0, [r7, #36]	; 0x24
 80015fa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80015fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001600:	2300      	movs	r3, #0
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001616:	4618      	mov	r0, r3
 8001618:	f006 ffda 	bl	80085d0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	17da      	asrs	r2, r3, #31
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	61fa      	str	r2, [r7, #28]
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	69b9      	ldr	r1, [r7, #24]
 800162e:	000b      	movs	r3, r1
 8001630:	2200      	movs	r2, #0
 8001632:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	2200      	movs	r2, #0
 800163a:	461c      	mov	r4, r3
 800163c:	4615      	mov	r5, r2
 800163e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001642:	1911      	adds	r1, r2, r4
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	416b      	adcs	r3, r5
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800164e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001652:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	f04f 0400 	mov.w	r4, #0
 800165e:	f04f 0500 	mov.w	r5, #0
 8001662:	015d      	lsls	r5, r3, #5
 8001664:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001668:	0154      	lsls	r4, r2, #5
 800166a:	4622      	mov	r2, r4
 800166c:	462b      	mov	r3, r5
 800166e:	ebb2 0800 	subs.w	r8, r2, r0
 8001672:	eb63 0901 	sbc.w	r9, r3, r1
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001682:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001686:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800168a:	4690      	mov	r8, r2
 800168c:	4699      	mov	r9, r3
 800168e:	eb18 0a00 	adds.w	sl, r8, r0
 8001692:	eb49 0b01 	adc.w	fp, r9, r1
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016aa:	ebb2 040a 	subs.w	r4, r2, sl
 80016ae:	603c      	str	r4, [r7, #0]
 80016b0:	eb63 030b 	sbc.w	r3, r3, fp
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016ba:	4623      	mov	r3, r4
 80016bc:	181b      	adds	r3, r3, r0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	462b      	mov	r3, r5
 80016c2:	eb41 0303 	adc.w	r3, r1, r3
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	6a3a      	ldr	r2, [r7, #32]
 80016ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ce:	f7ff ff3f 	bl	8001550 <UTILS_NanosecondsToTimespec>

    return 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	3738      	adds	r7, #56	; 0x38
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_MspInit+0x4c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_MspInit+0x4c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	210f      	movs	r1, #15
 800171a:	f06f 0001 	mvn.w	r0, #1
 800171e:	f000 feab 	bl	8002478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_CAN_MspInit+0x7c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d127      	bne.n	80017a2 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_CAN_MspInit+0x80>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <HAL_CAN_MspInit+0x80>)
 8001758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_CAN_MspInit+0x80>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_CAN_MspInit+0x80>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_CAN_MspInit+0x80>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_CAN_MspInit+0x80>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001782:	2303      	movs	r3, #3
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001792:	2309      	movs	r3, #9
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_CAN_MspInit+0x84>)
 800179e:	f001 fdf9 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40006400 	.word	0x40006400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020c00 	.word	0x40020c00

080017b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_ETH_MspInit+0x158>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	f040 8096 	bne.w	8001908 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80017dc:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 80017e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e6:	6313      	str	r3, [r2, #48]	; 0x30
 80017e8:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a46      	ldr	r2, [pc, #280]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 80017fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b44      	ldr	r3, [pc, #272]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001816:	6313      	str	r3, [r2, #48]	; 0x30
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001824:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	4a3a      	ldr	r2, [pc, #232]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6313      	str	r3, [r2, #48]	; 0x30
 8001830:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a34      	ldr	r2, [pc, #208]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 8001872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001876:	6313      	str	r3, [r2, #48]	; 0x30
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_ETH_MspInit+0x15c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001884:	2332      	movs	r3, #50	; 0x32
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001894:	230b      	movs	r3, #11
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	481e      	ldr	r0, [pc, #120]	; (8001918 <HAL_ETH_MspInit+0x160>)
 80018a0:	f001 fd78 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018a4:	2386      	movs	r3, #134	; 0x86
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018b4:	230b      	movs	r3, #11
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_ETH_MspInit+0x164>)
 80018c0:	f001 fd68 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d6:	230b      	movs	r3, #11
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	480f      	ldr	r0, [pc, #60]	; (8001920 <HAL_ETH_MspInit+0x168>)
 80018e2:	f001 fd57 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f8:	230b      	movs	r3, #11
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <HAL_ETH_MspInit+0x16c>)
 8001904:	f001 fd46 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	; 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40028000 	.word	0x40028000
 8001914:	40023800 	.word	0x40023800
 8001918:	40020800 	.word	0x40020800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40021800 	.word	0x40021800

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0aa      	sub	sp, #168	; 0xa8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2284      	movs	r2, #132	; 0x84
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f015 f9a5 	bl	8016c98 <memset>
  if(huart->Instance==USART3)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a56      	ldr	r2, [pc, #344]	; (8001aac <HAL_UART_MspInit+0x184>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 80a4 	bne.w	8001aa2 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001960:	2300      	movs	r3, #0
 8001962:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fd39 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001974:	f7ff fd48 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001978:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <HAL_UART_MspInit+0x188>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_UART_MspInit+0x188>)
 800197e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_UART_MspInit+0x188>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_UART_MspInit+0x188>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	4a46      	ldr	r2, [pc, #280]	; (8001ab0 <HAL_UART_MspInit+0x188>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6313      	str	r3, [r2, #48]	; 0x30
 800199c:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <HAL_UART_MspInit+0x188>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c2:	2307      	movs	r3, #7
 80019c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019cc:	4619      	mov	r1, r3
 80019ce:	4839      	ldr	r0, [pc, #228]	; (8001ab4 <HAL_UART_MspInit+0x18c>)
 80019d0:	f001 fce0 	bl	8003394 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 80019d6:	4a39      	ldr	r2, [pc, #228]	; (8001abc <HAL_UART_MspInit+0x194>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 80019dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e2:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 80019f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 8001a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a08:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 8001a0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a10:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a18:	4827      	ldr	r0, [pc, #156]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 8001a1a:	f000 fd57 	bl	80024cc <HAL_DMA_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001a24:	f7ff fcf0 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 8001a2c:	675a      	str	r2, [r3, #116]	; 0x74
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <HAL_UART_MspInit+0x190>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <HAL_UART_MspInit+0x19c>)
 8001a38:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a40:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a44:	2240      	movs	r2, #64	; 0x40
 8001a46:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a6e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a76:	4812      	ldr	r0, [pc, #72]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a78:	f000 fd28 	bl	80024cc <HAL_DMA_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001a82:	f7ff fcc1 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a8a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_UART_MspInit+0x198>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2105      	movs	r1, #5
 8001a96:	2027      	movs	r0, #39	; 0x27
 8001a98:	f000 fcee 	bl	8002478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a9c:	2027      	movs	r0, #39	; 0x27
 8001a9e:	f000 fd07 	bl	80024b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	37a8      	adds	r7, #168	; 0xa8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40004800 	.word	0x40004800
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	20004054 	.word	0x20004054
 8001abc:	40026028 	.word	0x40026028
 8001ac0:	200040b4 	.word	0x200040b4
 8001ac4:	40026058 	.word	0x40026058

08001ac8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0ac      	sub	sp, #176	; 0xb0
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	2284      	movs	r2, #132	; 0x84
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f015 f8d5 	bl	8016c98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af6:	d159      	bne.n	8001bac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001afc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fc69 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b14:	f7ff fc78 	bl	8001408 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b30:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <HAL_PCD_MspInit+0xf0>)
 8001b58:	f001 fc1c 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <HAL_PCD_MspInit+0xf0>)
 8001b78:	f001 fc0c 	bl	8003394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b80:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b86:	6353      	str	r3, [r2, #52]	; 0x34
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <HAL_PCD_MspInit+0xec>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	37b0      	adds	r7, #176	; 0xb0
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_InitTick+0xcc>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <HAL_InitTick+0xcc>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_InitTick+0xcc>)
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be4:	f107 020c 	add.w	r2, r7, #12
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fbc4 	bl	800437c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bf4:	f002 fbae 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8001bf8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_InitTick+0xd0>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	3b01      	subs	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c0a:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <HAL_InitTick+0xd8>)
 8001c0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c16:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c2e:	4818      	ldr	r0, [pc, #96]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c30:	f002 ffc6 	bl	8004bc0 <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11b      	bne.n	8001c7a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c42:	4813      	ldr	r0, [pc, #76]	; (8001c90 <HAL_InitTick+0xd4>)
 8001c44:	f003 f81e 	bl	8004c84 <HAL_TIM_Base_Start_IT>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d111      	bne.n	8001c7a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c56:	2019      	movs	r0, #25
 8001c58:	f000 fc2a 	bl	80024b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	d808      	bhi.n	8001c74 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c62:	2200      	movs	r2, #0
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	2019      	movs	r0, #25
 8001c68:	f000 fc06 	bl	8002478 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_InitTick+0xdc>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e002      	b.n	8001c7a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3730      	adds	r7, #48	; 0x30
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	431bde83 	.word	0x431bde83
 8001c90:	20009484 	.word	0x20009484
 8001c94:	40010000 	.word	0x40010000
 8001c98:	20000008 	.word	0x20000008

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <DMA1_Stream1_IRQHandler+0x10>)
 8001cce:	f000 fd9d 	bl	800280c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20004054 	.word	0x20004054

08001cdc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <DMA1_Stream3_IRQHandler+0x10>)
 8001ce2:	f000 fd93 	bl	800280c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200040b4 	.word	0x200040b4

08001cf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cf6:	f003 f83d 	bl	8004d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20009484 	.word	0x20009484

08001d04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART3_IRQHandler+0x10>)
 8001d0a:	f003 fbcd 	bl	80054a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20003fcc 	.word	0x20003fcc

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d32:	f015 f845 	bl	8016dc0 <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	e7fe      	b.n	8001d5a <_exit+0x12>

08001d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
  }

  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf1      	blt.n	8001da8 <_write+0x12>
  }
  return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_close>:

int _close(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df6:	605a      	str	r2, [r3, #4]
  return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_isatty>:

int _isatty(int file)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f014 ffaa 	bl	8016dc0 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20050000 	.word	0x20050000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	200094d4 	.word	0x200094d4
 8001ea0:	200137c0 	.word	0x200137c0

08001ea4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ed6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <cubemx_transport_open+0x28>)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f003 fa0c 	bl	80052fc <HAL_UART_Receive_DMA>
    return true;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200094d8 	.word	0x200094d8

08001ef4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f02:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f003 fa3d 	bl	8005384 <HAL_UART_DMAStop>
    return true;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f28:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d11a      	bne.n	8001f68 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f003 f962 	bl	8005204 <HAL_UART_Transmit_DMA>
 8001f40:	4603      	mov	r3, r0
 8001f42:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001f44:	e002      	b.n	8001f4c <cubemx_transport_write+0x38>
            osDelay(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f005 f844 	bl	8006fd4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <cubemx_transport_write+0x46>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d1f5      	bne.n	8001f46 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <cubemx_transport_write+0x50>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	e002      	b.n	8001f6a <cubemx_transport_write+0x56>
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001f68:	2300      	movs	r3, #0
    }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f88:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8e:	b672      	cpsid	i
}
 8001f90:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <cubemx_transport_read+0x9c>)
 8001fa0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa2:	b662      	cpsie	i
}
 8001fa4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f005 f811 	bl	8006fd4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <cubemx_transport_read+0xa0>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <cubemx_transport_read+0x9c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d103      	bne.n	8001fc6 <cubemx_transport_read+0x52>
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dbe3      	blt.n	8001f8e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001fca:	e011      	b.n	8001ff0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <cubemx_transport_read+0xa0>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	4910      	ldr	r1, [pc, #64]	; (8002018 <cubemx_transport_read+0xa4>)
 8001fd8:	5c8a      	ldrb	r2, [r1, r2]
 8001fda:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <cubemx_transport_read+0xa0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <cubemx_transport_read+0xa0>)
 8001fe8:	6013      	str	r3, [r2, #0]
        wrote++;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <cubemx_transport_read+0xa0>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <cubemx_transport_read+0x9c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d003      	beq.n	8002004 <cubemx_transport_read+0x90>
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3e3      	bcc.n	8001fcc <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002004:	69bb      	ldr	r3, [r7, #24]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20009cdc 	.word	0x20009cdc
 8002014:	20009cd8 	.word	0x20009cd8
 8002018:	200094d8 	.word	0x200094d8

0800201c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002020:	f7ff ff40 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002024:	480c      	ldr	r0, [pc, #48]	; (8002058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002026:	490d      	ldr	r1, [pc, #52]	; (800205c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800203c:	4c0a      	ldr	r4, [pc, #40]	; (8002068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800204a:	f014 febf 	bl	8016dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204e:	f7fe fda9 	bl	8000ba4 <main>
  bx  lr    
 8002052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002054:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002060:	08018b28 	.word	0x08018b28
  ldr r2, =_sbss
 8002064:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002068:	200137bc 	.word	0x200137bc

0800206c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC_IRQHandler>

0800206e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002072:	2003      	movs	r0, #3
 8002074:	f000 f9f5 	bl	8002462 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002078:	200f      	movs	r0, #15
 800207a:	f7ff fd9f 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207e:	f7ff fb2f 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2000000c 	.word	0x2000000c
 80020ac:	20009ce0 	.word	0x20009ce0

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20009ce0 	.word	0x20009ce0

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000000c 	.word	0x2000000c

08002110 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0ed      	b.n	80022fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fafe 	bl	8001730 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002144:	f7ff ffb4 	bl	80020b0 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800214a:	e012      	b.n	8002172 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800214c:	f7ff ffb0 	bl	80020b0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b0a      	cmp	r3, #10
 8002158:	d90b      	bls.n	8002172 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2205      	movs	r2, #5
 800216a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0c5      	b.n	80022fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0e5      	beq.n	800214c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0202 	bic.w	r2, r2, #2
 800218e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002190:	f7ff ff8e 	bl	80020b0 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002196:	e012      	b.n	80021be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002198:	f7ff ff8a 	bl	80020b0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b0a      	cmp	r3, #10
 80021a4:	d90b      	bls.n	80021be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2205      	movs	r2, #5
 80021b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e09f      	b.n	80022fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e5      	bne.n	8002198 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7e1b      	ldrb	r3, [r3, #24]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d108      	bne.n	80021e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e007      	b.n	80021f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7e5b      	ldrb	r3, [r3, #25]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e007      	b.n	8002220 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e9b      	ldrb	r3, [r3, #26]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d108      	bne.n	800223a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0220 	orr.w	r2, r2, #32
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e007      	b.n	800224a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0220 	bic.w	r2, r2, #32
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7edb      	ldrb	r3, [r3, #27]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d108      	bne.n	8002264 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0210 	bic.w	r2, r2, #16
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e007      	b.n	8002274 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0210 	orr.w	r2, r2, #16
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7f1b      	ldrb	r3, [r3, #28]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0208 	orr.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e007      	b.n	800229e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7f5b      	ldrb	r3, [r3, #29]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d108      	bne.n	80022b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0204 	orr.w	r2, r2, #4
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e007      	b.n	80022c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0204 	bic.w	r2, r2, #4
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	1e5a      	subs	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <__NVIC_SetPriorityGrouping+0x40>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	4313      	orrs	r3, r2
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <__NVIC_SetPriorityGrouping+0x40>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	05fa0000 	.word	0x05fa0000

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff4c 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248a:	f7ff ff61 	bl	8002350 <__NVIC_GetPriorityGrouping>
 800248e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	6978      	ldr	r0, [r7, #20]
 8002496:	f7ff ffb1 	bl	80023fc <NVIC_EncodePriority>
 800249a:	4602      	mov	r2, r0
 800249c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff80 	bl	80023a8 <__NVIC_SetPriority>
}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff54 	bl	800236c <__NVIC_EnableIRQ>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff fdea 	bl	80020b0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e099      	b.n	800261c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002508:	e00f      	b.n	800252a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800250a:	f7ff fdd1 	bl	80020b0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b05      	cmp	r3, #5
 8002516:	d908      	bls.n	800252a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2203      	movs	r2, #3
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e078      	b.n	800261c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e8      	bne.n	800250a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_DMA_Init+0x158>)
 8002544:	4013      	ands	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002556:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2b04      	cmp	r3, #4
 8002582:	d107      	bne.n	8002594 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4313      	orrs	r3, r2
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f023 0307 	bic.w	r3, r3, #7
 80025aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d117      	bne.n	80025ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fb15 	bl	8002c00 <DMA_CheckFifoParam>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ea:	2301      	movs	r3, #1
 80025ec:	e016      	b.n	800261c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 facc 	bl	8002b94 <DMA_CalcBaseAndBitshift>
 80025fc:	4603      	mov	r3, r0
 80025fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	223f      	movs	r2, #63	; 0x3f
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	f010803f 	.word	0xf010803f

08002628 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_DMA_Start_IT+0x26>
 800264a:	2302      	movs	r3, #2
 800264c:	e048      	b.n	80026e0 <HAL_DMA_Start_IT+0xb8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d137      	bne.n	80026d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa5e 	bl	8002b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	223f      	movs	r2, #63	; 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0216 	orr.w	r2, r2, #22
 8002696:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e005      	b.n	80026de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026da:	2302      	movs	r3, #2
 80026dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026de:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026f6:	f7ff fcdb 	bl	80020b0 <HAL_GetTick>
 80026fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d008      	beq.n	800271a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e052      	b.n	80027c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0216 	bic.w	r2, r2, #22
 8002728:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002738:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_DMA_Abort+0x62>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0208 	bic.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276a:	e013      	b.n	8002794 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276c:	f7ff fca0 	bl	80020b0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b05      	cmp	r3, #5
 8002778:	d90c      	bls.n	8002794 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e015      	b.n	80027c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e4      	bne.n	800276c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	223f      	movs	r2, #63	; 0x3f
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00c      	b.n	8002800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002818:	4b8e      	ldr	r3, [pc, #568]	; (8002a54 <HAL_DMA_IRQHandler+0x248>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8e      	ldr	r2, [pc, #568]	; (8002a58 <HAL_DMA_IRQHandler+0x24c>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01a      	beq.n	8002878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0204 	bic.w	r2, r2, #4
 800285e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2208      	movs	r2, #8
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2201      	movs	r2, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d012      	beq.n	80028ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2201      	movs	r2, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2204      	movs	r2, #4
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d012      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2204      	movs	r2, #4
 80028d2:	409a      	lsls	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	2210      	movs	r2, #16
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d043      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d03c      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2210      	movs	r2, #16
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d018      	beq.n	800294e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d024      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e01f      	b.n	800297c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01b      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e016      	b.n	800297c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0208 	bic.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2220      	movs	r2, #32
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 808f 	beq.w	8002aac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8087 	beq.w	8002aac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2220      	movs	r2, #32
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d136      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0216 	bic.w	r2, r2, #22
 80029c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x1da>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	223f      	movs	r2, #63	; 0x3f
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d07e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
        }
        return;
 8002a22:	e079      	b.n	8002b18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d031      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e02c      	b.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
 8002a52:	bf00      	nop
 8002a54:	20000004 	.word	0x20000004
 8002a58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
 8002a6c:	e01e      	b.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0210 	bic.w	r2, r2, #16
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d307      	bcc.n	8002af4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f2      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x2cc>
 8002af2:	e000      	b.n	8002af6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
 8002b16:	e000      	b.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b18:	bf00      	nop
    }
  }
}
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d108      	bne.n	8002b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b76:	e007      	b.n	8002b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3b10      	subs	r3, #16
 8002ba4:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <DMA_CalcBaseAndBitshift+0x60>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d908      	bls.n	8002bd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <DMA_CalcBaseAndBitshift+0x68>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	1d1a      	adds	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58
 8002bd2:	e006      	b.n	8002be2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <DMA_CalcBaseAndBitshift+0x68>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	aaaaaaab 	.word	0xaaaaaaab
 8002bf8:	08017dec 	.word	0x08017dec
 8002bfc:	fffffc00 	.word	0xfffffc00

08002c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11f      	bne.n	8002c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d856      	bhi.n	8002cce <DMA_CheckFifoParam+0xce>
 8002c20:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <DMA_CheckFifoParam+0x28>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c4b 	.word	0x08002c4b
 8002c30:	08002c39 	.word	0x08002c39
 8002c34:	08002ccf 	.word	0x08002ccf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d046      	beq.n	8002cd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e043      	b.n	8002cd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c52:	d140      	bne.n	8002cd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c58:	e03d      	b.n	8002cd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c62:	d121      	bne.n	8002ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d837      	bhi.n	8002cda <DMA_CheckFifoParam+0xda>
 8002c6a:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <DMA_CheckFifoParam+0x70>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c87 	.word	0x08002c87
 8002c78:	08002c81 	.word	0x08002c81
 8002c7c:	08002c99 	.word	0x08002c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      break;
 8002c84:	e030      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d025      	beq.n	8002cde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c96:	e022      	b.n	8002cde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ca0:	d11f      	bne.n	8002ce2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ca6:	e01c      	b.n	8002ce2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d903      	bls.n	8002cb6 <DMA_CheckFifoParam+0xb6>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d003      	beq.n	8002cbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cb4:	e018      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cba:	e015      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00e      	beq.n	8002ce6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e00b      	b.n	8002ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e00a      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e008      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e006      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e004      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop

08002cf8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e086      	b.n	8002e18 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2223      	movs	r2, #35	; 0x23
 8002d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fe fd4b 	bl	80017b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d22:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <HAL_ETH_Init+0x128>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a3e      	ldr	r2, [pc, #248]	; (8002e20 <HAL_ETH_Init+0x128>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b3c      	ldr	r3, [pc, #240]	; (8002e20 <HAL_ETH_Init+0x128>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_ETH_Init+0x12c>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a39      	ldr	r2, [pc, #228]	; (8002e24 <HAL_ETH_Init+0x12c>)
 8002d40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d44:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_ETH_Init+0x12c>)
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_ETH_Init+0x12c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d54:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <HAL_ETH_Init+0x12c>)
 8002d56:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d70:	f7ff f99e 	bl	80020b0 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d76:	e011      	b.n	8002d9c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d78:	f7ff f99a 	bl	80020b0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d86:	d909      	bls.n	8002d9c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	22e0      	movs	r2, #224	; 0xe0
 8002d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e03d      	b.n	8002e18 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e4      	bne.n	8002d78 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f97a 	bl	80030a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa25 	bl	8003204 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa7b 	bl	80032b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f9e3 	bl	8003194 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_ETH_Init+0x130>)
 8002dec:	430b      	orrs	r3, r1
 8002dee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002e02:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2210      	movs	r2, #16
 8002e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40013800 	.word	0x40013800
 8002e28:	00020060 	.word	0x00020060

08002e2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <ETH_SetMACConfig+0x164>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	7b9b      	ldrb	r3, [r3, #14]
 8002e4a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	7c12      	ldrb	r2, [r2, #16]
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d102      	bne.n	8002e5a <ETH_SetMACConfig+0x2e>
 8002e54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e58:	e000      	b.n	8002e5c <ETH_SetMACConfig+0x30>
 8002e5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	7c52      	ldrb	r2, [r2, #17]
 8002e62:	2a00      	cmp	r2, #0
 8002e64:	d102      	bne.n	8002e6c <ETH_SetMACConfig+0x40>
 8002e66:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e6a:	e000      	b.n	8002e6e <ETH_SetMACConfig+0x42>
 8002e6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	7fdb      	ldrb	r3, [r3, #31]
 8002e7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	7f92      	ldrb	r2, [r2, #30]
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d102      	bne.n	8002e92 <ETH_SetMACConfig+0x66>
 8002e8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e90:	e000      	b.n	8002e94 <ETH_SetMACConfig+0x68>
 8002e92:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7f1b      	ldrb	r3, [r3, #28]
 8002e9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ea2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	791b      	ldrb	r3, [r3, #4]
 8002ea8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002eaa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d102      	bne.n	8002ebc <ETH_SetMACConfig+0x90>
 8002eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eba:	e000      	b.n	8002ebe <ETH_SetMACConfig+0x92>
 8002ebc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ebe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	7bdb      	ldrb	r3, [r3, #15]
 8002ec4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ec6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ecc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ed4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f7ff f8ea 	bl	80020c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	d101      	bne.n	8002f22 <ETH_SetMACConfig+0xf6>
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	e000      	b.n	8002f24 <ETH_SetMACConfig+0xf8>
 8002f22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f32:	2a01      	cmp	r2, #1
 8002f34:	d101      	bne.n	8002f3a <ETH_SetMACConfig+0x10e>
 8002f36:	2208      	movs	r2, #8
 8002f38:	e000      	b.n	8002f3c <ETH_SetMACConfig+0x110>
 8002f3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f44:	2a01      	cmp	r2, #1
 8002f46:	d101      	bne.n	8002f4c <ETH_SetMACConfig+0x120>
 8002f48:	2204      	movs	r2, #4
 8002f4a:	e000      	b.n	8002f4e <ETH_SetMACConfig+0x122>
 8002f4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f56:	2a01      	cmp	r2, #1
 8002f58:	d101      	bne.n	8002f5e <ETH_SetMACConfig+0x132>
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	e000      	b.n	8002f60 <ETH_SetMACConfig+0x134>
 8002f5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f60:	4313      	orrs	r3, r2
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f7ff f8a5 	bl	80020c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	fd20810f 	.word	0xfd20810f

08002f94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <ETH_SetDMAConfig+0x110>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	7b1b      	ldrb	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <ETH_SetDMAConfig+0x2c>
 8002fba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fbe:	e000      	b.n	8002fc2 <ETH_SetDMAConfig+0x2e>
 8002fc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	7b5b      	ldrb	r3, [r3, #13]
 8002fc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	7f52      	ldrb	r2, [r2, #29]
 8002fce:	2a00      	cmp	r2, #0
 8002fd0:	d102      	bne.n	8002fd8 <ETH_SetDMAConfig+0x44>
 8002fd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fd6:	e000      	b.n	8002fda <ETH_SetDMAConfig+0x46>
 8002fd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	7b9b      	ldrb	r3, [r3, #14]
 8002fe0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fe2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fe8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	7f1b      	ldrb	r3, [r3, #28]
 8002fee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ff0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	7f9b      	ldrb	r3, [r3, #30]
 8002ff6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ff8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ffe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003006:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003008:	4313      	orrs	r3, r2
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003018:	461a      	mov	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800302a:	2001      	movs	r0, #1
 800302c:	f7ff f84c 	bl	80020c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003038:	461a      	mov	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	791b      	ldrb	r3, [r3, #4]
 8003042:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003048:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800304e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003054:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800305c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800305e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003066:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800306c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003076:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800307a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003088:	2001      	movs	r0, #1
 800308a:	f7ff f81d 	bl	80020c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	f8de3f23 	.word	0xf8de3f23

080030a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b0a6      	sub	sp, #152	; 0x98
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030bc:	2300      	movs	r3, #0
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030ea:	2300      	movs	r3, #0
 80030ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003110:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003114:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003122:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fe7f 	bl	8002e2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800312e:	2301      	movs	r3, #1
 8003130:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003132:	2301      	movs	r3, #1
 8003134:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800313c:	2301      	movs	r3, #1
 800313e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800315a:	2301      	movs	r3, #1
 800315c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800315e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003162:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003164:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003168:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800316a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800316e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff05 	bl	8002f94 <ETH_SetDMAConfig>
}
 800318a:	bf00      	nop
 800318c:	3798      	adds	r7, #152	; 0x98
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3305      	adds	r3, #5
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	3204      	adds	r2, #4
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <ETH_MACAddressConfig+0x68>)
 80031b6:	4413      	add	r3, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3303      	adds	r3, #3
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	061a      	lsls	r2, r3, #24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3302      	adds	r3, #2
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3301      	adds	r3, #1
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	4313      	orrs	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <ETH_MACAddressConfig+0x6c>)
 80031e6:	4413      	add	r3, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	6013      	str	r3, [r2, #0]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40028040 	.word	0x40028040
 8003200:	40028044 	.word	0x40028044

08003204 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e03e      	b.n	8003290 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2200      	movs	r2, #0
 800323a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	3206      	adds	r2, #6
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d80c      	bhi.n	8003274 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	e004      	b.n	800327e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d9bd      	bls.n	8003212 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a8:	611a      	str	r2, [r3, #16]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e048      	b.n	8003356 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6919      	ldr	r1, [r3, #16]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	440b      	add	r3, r1
 80032d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003300:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	3212      	adds	r2, #18
 8003322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d80c      	bhi.n	8003346 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6919      	ldr	r1, [r3, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e004      	b.n	8003350 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3301      	adds	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d9b3      	bls.n	80032c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003386:	60da      	str	r2, [r3, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e175      	b.n	80036a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 8164 	bne.w	800369a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d005      	beq.n	80033ea <HAL_GPIO_Init+0x56>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d130      	bne.n	800344c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0201 	and.w	r2, r3, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b03      	cmp	r3, #3
 8003456:	d017      	beq.n	8003488 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d123      	bne.n	80034dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80be 	beq.w	800369a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	4b66      	ldr	r3, [pc, #408]	; (80036b8 <HAL_GPIO_Init+0x324>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a65      	ldr	r2, [pc, #404]	; (80036b8 <HAL_GPIO_Init+0x324>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <HAL_GPIO_Init+0x324>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003536:	4a61      	ldr	r2, [pc, #388]	; (80036bc <HAL_GPIO_Init+0x328>)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	3302      	adds	r3, #2
 800353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	220f      	movs	r2, #15
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a58      	ldr	r2, [pc, #352]	; (80036c0 <HAL_GPIO_Init+0x32c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d037      	beq.n	80035d2 <HAL_GPIO_Init+0x23e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a57      	ldr	r2, [pc, #348]	; (80036c4 <HAL_GPIO_Init+0x330>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d031      	beq.n	80035ce <HAL_GPIO_Init+0x23a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a56      	ldr	r2, [pc, #344]	; (80036c8 <HAL_GPIO_Init+0x334>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02b      	beq.n	80035ca <HAL_GPIO_Init+0x236>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a55      	ldr	r2, [pc, #340]	; (80036cc <HAL_GPIO_Init+0x338>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d025      	beq.n	80035c6 <HAL_GPIO_Init+0x232>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a54      	ldr	r2, [pc, #336]	; (80036d0 <HAL_GPIO_Init+0x33c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01f      	beq.n	80035c2 <HAL_GPIO_Init+0x22e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a53      	ldr	r2, [pc, #332]	; (80036d4 <HAL_GPIO_Init+0x340>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d019      	beq.n	80035be <HAL_GPIO_Init+0x22a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a52      	ldr	r2, [pc, #328]	; (80036d8 <HAL_GPIO_Init+0x344>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_GPIO_Init+0x226>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a51      	ldr	r2, [pc, #324]	; (80036dc <HAL_GPIO_Init+0x348>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00d      	beq.n	80035b6 <HAL_GPIO_Init+0x222>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a50      	ldr	r2, [pc, #320]	; (80036e0 <HAL_GPIO_Init+0x34c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <HAL_GPIO_Init+0x21e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4f      	ldr	r2, [pc, #316]	; (80036e4 <HAL_GPIO_Init+0x350>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_GPIO_Init+0x21a>
 80035aa:	2309      	movs	r3, #9
 80035ac:	e012      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035ae:	230a      	movs	r3, #10
 80035b0:	e010      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035b2:	2308      	movs	r3, #8
 80035b4:	e00e      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035b6:	2307      	movs	r3, #7
 80035b8:	e00c      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035ba:	2306      	movs	r3, #6
 80035bc:	e00a      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035be:	2305      	movs	r3, #5
 80035c0:	e008      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035c2:	2304      	movs	r3, #4
 80035c4:	e006      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035c6:	2303      	movs	r3, #3
 80035c8:	e004      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_GPIO_Init+0x240>
 80035d2:	2300      	movs	r3, #0
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f002 0203 	and.w	r2, r2, #3
 80035da:	0092      	lsls	r2, r2, #2
 80035dc:	4093      	lsls	r3, r2
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035e4:	4935      	ldr	r1, [pc, #212]	; (80036bc <HAL_GPIO_Init+0x328>)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	3302      	adds	r3, #2
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035f2:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <HAL_GPIO_Init+0x354>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003616:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <HAL_GPIO_Init+0x354>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_GPIO_Init+0x354>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003640:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <HAL_GPIO_Init+0x354>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_GPIO_Init+0x354>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800366a:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <HAL_GPIO_Init+0x354>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_GPIO_Init+0x354>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <HAL_GPIO_Init+0x354>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b0f      	cmp	r3, #15
 80036a4:	f67f ae86 	bls.w	80033b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40013800 	.word	0x40013800
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020400 	.word	0x40020400
 80036c8:	40020800 	.word	0x40020800
 80036cc:	40020c00 	.word	0x40020c00
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40021400 	.word	0x40021400
 80036d8:	40021800 	.word	0x40021800
 80036dc:	40021c00 	.word	0x40021c00
 80036e0:	40022000 	.word	0x40022000
 80036e4:	40022400 	.word	0x40022400
 80036e8:	40013c00 	.word	0x40013c00

080036ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
 80036f8:	4613      	mov	r3, r2
 80036fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036fc:	787b      	ldrb	r3, [r7, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003708:	e003      	b.n	8003712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800370a:	887b      	ldrh	r3, [r7, #2]
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	619a      	str	r2, [r3, #24]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003730:	887a      	ldrh	r2, [r7, #2]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	041a      	lsls	r2, r3, #16
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43d9      	mvns	r1, r3
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	400b      	ands	r3, r1
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	619a      	str	r2, [r3, #24]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af02      	add	r7, sp, #8
 8003758:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e108      	b.n	8003976 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f9a2 	bl	8001ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2203      	movs	r2, #3
 8003788:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003792:	d102      	bne.n	800379a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 f86c 	bl	800687c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7c1a      	ldrb	r2, [r3, #16]
 80037ac:	f88d 2000 	strb.w	r2, [sp]
 80037b0:	3304      	adds	r3, #4
 80037b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b4:	f003 f808 	bl	80067c8 <USB_CoreInit>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0d5      	b.n	8003976 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 f864 	bl	800689e <USB_SetCurrentMode>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0c6      	b.n	8003976 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e04a      	b.n	8003884 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3315      	adds	r3, #21
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3314      	adds	r3, #20
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	b298      	uxth	r0, r3
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	332e      	adds	r3, #46	; 0x2e
 800382a:	4602      	mov	r2, r0
 800382c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3318      	adds	r3, #24
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	331c      	adds	r3, #28
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3320      	adds	r3, #32
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3324      	adds	r3, #36	; 0x24
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3301      	adds	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	791b      	ldrb	r3, [r3, #4]
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3af      	bcc.n	80037ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e044      	b.n	800391e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3301      	adds	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	791b      	ldrb	r3, [r3, #4]
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3b5      	bcc.n	8003894 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7c1a      	ldrb	r2, [r3, #16]
 8003930:	f88d 2000 	strb.w	r2, [sp]
 8003934:	3304      	adds	r3, #4
 8003936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003938:	f002 fffe 	bl	8006938 <USB_DevInit>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e013      	b.n	8003976 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7b1b      	ldrb	r3, [r3, #12]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d102      	bne.n	800396a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f80b 	bl	8003980 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f003 f9b9 	bl	8006ce6 <USB_DevDisconnect>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	10000003 	.word	0x10000003

080039c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40007000 	.word	0x40007000

080039e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e291      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8087 	beq.w	8003b1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0c:	4b96      	ldr	r3, [pc, #600]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d00c      	beq.n	8003a32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a18:	4b93      	ldr	r3, [pc, #588]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d112      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62>
 8003a24:	4b90      	ldr	r3, [pc, #576]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a30:	d10b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a32:	4b8d      	ldr	r3, [pc, #564]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d06c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x130>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d168      	bne.n	8003b18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e26b      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x7a>
 8003a54:	4b84      	ldr	r3, [pc, #528]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a83      	ldr	r2, [pc, #524]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e02e      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x9c>
 8003a6a:	4b7f      	ldr	r3, [pc, #508]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7e      	ldr	r2, [pc, #504]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7b      	ldr	r2, [pc, #492]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xc0>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd8>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6b      	ldr	r2, [pc, #428]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe faf2 	bl	80020b0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe faee 	bl	80020b0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e21f      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xe8>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fade 	bl	80020b0 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe fada 	bl	80020b0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e20b      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x110>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d069      	beq.n	8003bfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b26:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x190>
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1df      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	493d      	ldr	r1, [pc, #244]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e040      	b.n	8003bfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d023      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fa90 	bl	80020b0 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fe fa8c 	bl	80020b0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1bd      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4929      	ldr	r1, [pc, #164]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]
 8003bc6:	e018      	b.n	8003bfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fa6c 	bl	80020b0 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7fe fa68 	bl	80020b0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e199      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d038      	beq.n	8003c78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d019      	beq.n	8003c42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fa49 	bl	80020b0 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c22:	f7fe fa45 	bl	80020b0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e176      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x23a>
 8003c40:	e01a      	b.n	8003c78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fa2f 	bl	80020b0 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fe fa2b 	bl	80020b0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d903      	bls.n	8003c6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e15c      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
 8003c68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b91      	ldr	r3, [pc, #580]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ee      	bne.n	8003c56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a4 	beq.w	8003dce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c86:	4b8b      	ldr	r3, [pc, #556]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10d      	bne.n	8003cae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a87      	ldr	r2, [pc, #540]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cae:	4b82      	ldr	r3, [pc, #520]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cba:	4b7f      	ldr	r3, [pc, #508]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7e      	ldr	r2, [pc, #504]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fe f9f3 	bl	80020b0 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fe f9ef 	bl	80020b0 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b64      	cmp	r3, #100	; 0x64
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e120      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	4b75      	ldr	r3, [pc, #468]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x31a>
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a6e      	ldr	r2, [pc, #440]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	e02d      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x33c>
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a69      	ldr	r2, [pc, #420]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b67      	ldr	r3, [pc, #412]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a66      	ldr	r2, [pc, #408]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	e01c      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x35e>
 8003d2c:	4b61      	ldr	r3, [pc, #388]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a60      	ldr	r2, [pc, #384]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	4b5e      	ldr	r3, [pc, #376]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	e00b      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
 8003d46:	4b5b      	ldr	r3, [pc, #364]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a5a      	ldr	r2, [pc, #360]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	4b58      	ldr	r3, [pc, #352]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a57      	ldr	r2, [pc, #348]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d015      	beq.n	8003d92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe f9a3 	bl	80020b0 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fe f99f 	bl	80020b0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0ce      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ee      	beq.n	8003d6e <HAL_RCC_OscConfig+0x386>
 8003d90:	e014      	b.n	8003dbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fe f98d 	bl	80020b0 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fe f989 	bl	80020b0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	4b40      	ldr	r3, [pc, #256]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ee      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b3c      	ldr	r3, [pc, #240]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a3b      	ldr	r2, [pc, #236]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80a4 	beq.w	8003f20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd8:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d06b      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d149      	bne.n	8003e80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dec:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe f95a 	bl	80020b0 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe f956 	bl	80020b0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e087      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	3b01      	subs	r3, #1
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	4313      	orrs	r3, r2
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe f92a 	bl	80020b0 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fe f926 	bl	80020b0 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e057      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x478>
 8003e7e:	e04f      	b.n	8003f20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0b      	ldr	r2, [pc, #44]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f910 	bl	80020b0 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fe f90c 	bl	80020b0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e03d      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4ac>
 8003eb2:	e035      	b.n	8003f20 <HAL_RCC_OscConfig+0x538>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x544>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d028      	beq.n	8003f1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d121      	bne.n	8003f1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d11a      	bne.n	8003f1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ef2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	3b01      	subs	r3, #1
 8003f06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0d0      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d910      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 020f 	bic.w	r2, r3, #15
 8003f5e:	4965      	ldr	r1, [pc, #404]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b63      	ldr	r3, [pc, #396]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0b8      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a52      	ldr	r2, [pc, #328]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	494d      	ldr	r1, [pc, #308]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d040      	beq.n	8004054 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d115      	bne.n	8004012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e07f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e073      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e06b      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4936      	ldr	r1, [pc, #216]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fe f844 	bl	80020b0 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fe f840 	bl	80020b0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e053      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d210      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 020f 	bic.w	r2, r3, #15
 800406a:	4922      	ldr	r1, [pc, #136]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e032      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4916      	ldr	r1, [pc, #88]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	490e      	ldr	r1, [pc, #56]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040c2:	f000 f821 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80040c6:	4602      	mov	r2, r0
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	490a      	ldr	r1, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x1cc>)
 80040d4:	5ccb      	ldrb	r3, [r1, r3]
 80040d6:	fa22 f303 	lsr.w	r3, r2, r3
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_RCC_ClockConfig+0x1d0>)
 80040dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x1d4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fd6a 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023c00 	.word	0x40023c00
 80040f8:	40023800 	.word	0x40023800
 80040fc:	08017dd4 	.word	0x08017dd4
 8004100:	20000004 	.word	0x20000004
 8004104:	20000008 	.word	0x20000008

08004108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b094      	sub	sp, #80	; 0x50
 800410e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	647b      	str	r3, [r7, #68]	; 0x44
 8004114:	2300      	movs	r3, #0
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	2300      	movs	r3, #0
 800411a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004120:	4b79      	ldr	r3, [pc, #484]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d00d      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x40>
 800412c:	2b08      	cmp	r3, #8
 800412e:	f200 80e1 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x34>
 8004136:	2b04      	cmp	r3, #4
 8004138:	d003      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x3a>
 800413a:	e0db      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b73      	ldr	r3, [pc, #460]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004140:	e0db      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004142:	4b73      	ldr	r3, [pc, #460]	; (8004310 <HAL_RCC_GetSysClockFreq+0x208>)
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004146:	e0d8      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004148:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004152:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d063      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	2200      	movs	r2, #0
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
 8004168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
 8004176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	f04f 0000 	mov.w	r0, #0
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	0159      	lsls	r1, r3, #5
 8004188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800418c:	0150      	lsls	r0, r2, #5
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4621      	mov	r1, r4
 8004194:	1a51      	subs	r1, r2, r1
 8004196:	6139      	str	r1, [r7, #16]
 8004198:	4629      	mov	r1, r5
 800419a:	eb63 0301 	sbc.w	r3, r3, r1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ac:	4659      	mov	r1, fp
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b6:	4651      	mov	r1, sl
 80041b8:	018a      	lsls	r2, r1, #6
 80041ba:	4651      	mov	r1, sl
 80041bc:	ebb2 0801 	subs.w	r8, r2, r1
 80041c0:	4659      	mov	r1, fp
 80041c2:	eb63 0901 	sbc.w	r9, r3, r1
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041da:	4690      	mov	r8, r2
 80041dc:	4699      	mov	r9, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	eb18 0303 	adds.w	r3, r8, r3
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	462b      	mov	r3, r5
 80041e8:	eb49 0303 	adc.w	r3, r9, r3
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041fa:	4629      	mov	r1, r5
 80041fc:	024b      	lsls	r3, r1, #9
 80041fe:	4621      	mov	r1, r4
 8004200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004204:	4621      	mov	r1, r4
 8004206:	024a      	lsls	r2, r1, #9
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420e:	2200      	movs	r2, #0
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
 8004212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004218:	f7fc f8b2 	bl	8000380 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4613      	mov	r3, r2
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004224:	e058      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	2200      	movs	r2, #0
 800422e:	4618      	mov	r0, r3
 8004230:	4611      	mov	r1, r2
 8004232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	0159      	lsls	r1, r3, #5
 800424e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004252:	0150      	lsls	r0, r2, #5
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4641      	mov	r1, r8
 800425a:	ebb2 0a01 	subs.w	sl, r2, r1
 800425e:	4649      	mov	r1, r9
 8004260:	eb63 0b01 	sbc.w	fp, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004278:	ebb2 040a 	subs.w	r4, r2, sl
 800427c:	eb63 050b 	sbc.w	r5, r3, fp
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	00eb      	lsls	r3, r5, #3
 800428a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428e:	00e2      	lsls	r2, r4, #3
 8004290:	4614      	mov	r4, r2
 8004292:	461d      	mov	r5, r3
 8004294:	4643      	mov	r3, r8
 8004296:	18e3      	adds	r3, r4, r3
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	464b      	mov	r3, r9
 800429c:	eb45 0303 	adc.w	r3, r5, r3
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ae:	4629      	mov	r1, r5
 80042b0:	028b      	lsls	r3, r1, #10
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b8:	4621      	mov	r1, r4
 80042ba:	028a      	lsls	r2, r1, #10
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	61fa      	str	r2, [r7, #28]
 80042c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042cc:	f7fc f858 	bl	8000380 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 80042f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3750      	adds	r7, #80	; 0x50
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000004 	.word	0x20000004

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	08017de4 	.word	0x08017de4

08004354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004358:	f7ff ffdc 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0b5b      	lsrs	r3, r3, #13
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4903      	ldr	r1, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	08017de4 	.word	0x08017de4

0800437c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	220f      	movs	r2, #15
 800438a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_RCC_GetClockConfig+0x60>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40023c00 	.word	0x40023c00

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004408:	4b69      	ldr	r3, [pc, #420]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a68      	ldr	r2, [pc, #416]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	4964      	ldr	r1, [pc, #400]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800443a:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	4959      	ldr	r1, [pc, #356]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d017      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004476:	4b4e      	ldr	r3, [pc, #312]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	494a      	ldr	r1, [pc, #296]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 808b 	beq.w	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b3a      	ldr	r3, [pc, #232]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	4a39      	ldr	r2, [pc, #228]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	; 0x40
 80044d0:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e8:	f7fd fde2 	bl	80020b0 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fd fdde 	bl	80020b0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e357      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004502:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d035      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d02e      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004536:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800454e:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d114      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fda6 	bl	80020b0 <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fd fda2 	bl	80020b0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e319      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ee      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004596:	d111      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045a6:	400b      	ands	r3, r1
 80045a8:	4901      	ldr	r1, [pc, #4]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40007000 	.word	0x40007000
 80045b8:	0ffffcff 	.word	0x0ffffcff
 80045bc:	4baa      	ldr	r3, [pc, #680]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4aa9      	ldr	r2, [pc, #676]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c6:	6093      	str	r3, [r2, #8]
 80045c8:	4ba7      	ldr	r3, [pc, #668]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d4:	49a4      	ldr	r1, [pc, #656]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e6:	4ba0      	ldr	r3, [pc, #640]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ec:	4a9e      	ldr	r2, [pc, #632]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045f6:	4b9c      	ldr	r3, [pc, #624]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	4999      	ldr	r1, [pc, #612]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004614:	4b94      	ldr	r3, [pc, #592]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004622:	4991      	ldr	r1, [pc, #580]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004636:	4b8c      	ldr	r3, [pc, #560]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004644:	4988      	ldr	r1, [pc, #544]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004658:	4b83      	ldr	r3, [pc, #524]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004666:	4980      	ldr	r1, [pc, #512]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800467a:	4b7b      	ldr	r3, [pc, #492]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4977      	ldr	r1, [pc, #476]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469c:	4b72      	ldr	r3, [pc, #456]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	496f      	ldr	r1, [pc, #444]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046be:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	f023 020c 	bic.w	r2, r3, #12
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	4966      	ldr	r1, [pc, #408]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046e0:	4b61      	ldr	r3, [pc, #388]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	495e      	ldr	r1, [pc, #376]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004702:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	4955      	ldr	r1, [pc, #340]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	494d      	ldr	r1, [pc, #308]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004746:	4b48      	ldr	r3, [pc, #288]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	4944      	ldr	r1, [pc, #272]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004768:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	493c      	ldr	r1, [pc, #240]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	4933      	ldr	r1, [pc, #204]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ba:	492b      	ldr	r1, [pc, #172]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047ce:	4b26      	ldr	r3, [pc, #152]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047dc:	4922      	ldr	r1, [pc, #136]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ec:	d101      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800480e:	4b16      	ldr	r3, [pc, #88]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481c:	4912      	ldr	r1, [pc, #72]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004840:	4909      	ldr	r1, [pc, #36]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d006      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80d9 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800485c:	4b02      	ldr	r3, [pc, #8]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a01      	ldr	r2, [pc, #4]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004868:	40023800 	.word	0x40023800
 800486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fd fc1f 	bl	80020b0 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004876:	f7fd fc1b 	bl	80020b0 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b64      	cmp	r3, #100	; 0x64
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e194      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004888:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d021      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11d      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048a8:	4b64      	ldr	r3, [pc, #400]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048b6:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	0e1b      	lsrs	r3, r3, #24
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	019a      	lsls	r2, r3, #6
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	071b      	lsls	r3, r3, #28
 80048dc:	4957      	ldr	r1, [pc, #348]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02e      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490e:	d129      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004910:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004924:	0f1b      	lsrs	r3, r3, #28
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	019a      	lsls	r2, r3, #6
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	431a      	orrs	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	071b      	lsls	r3, r3, #28
 8004944:	493d      	ldr	r1, [pc, #244]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004952:	f023 021f 	bic.w	r2, r3, #31
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	3b01      	subs	r3, #1
 800495c:	4937      	ldr	r1, [pc, #220]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01d      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004970:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004976:	0e1b      	lsrs	r3, r3, #24
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800497e:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004984:	0f1b      	lsrs	r3, r3, #28
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	071b      	lsls	r3, r3, #28
 80049a4:	4925      	ldr	r1, [pc, #148]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	019a      	lsls	r2, r3, #6
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	061b      	lsls	r3, r3, #24
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	4919      	ldr	r1, [pc, #100]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fb62 	bl	80020b0 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049f0:	f7fd fb5e 	bl	80020b0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0d7      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 80cd 	bne.w	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a22:	f7fd fb45 	bl	80020b0 <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a2a:	f7fd fb41 	bl	80020b0 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d903      	bls.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0ba      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a40:	4b5e      	ldr	r3, [pc, #376]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a4c:	d0ed      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02e      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d12a      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a76:	4b51      	ldr	r3, [pc, #324]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a84:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	0f1b      	lsrs	r3, r3, #28
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	019a      	lsls	r2, r3, #6
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	4944      	ldr	r1, [pc, #272]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ab2:	4b42      	ldr	r3, [pc, #264]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	493d      	ldr	r1, [pc, #244]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d022      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae0:	d11d      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	0e1b      	lsrs	r3, r3, #24
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	0f1b      	lsrs	r3, r3, #28
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	019a      	lsls	r2, r3, #6
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	4929      	ldr	r1, [pc, #164]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d028      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b38:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	4917      	ldr	r1, [pc, #92]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4911      	ldr	r1, [pc, #68]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd fa92 	bl	80020b0 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b90:	f7fd fa8e 	bl	80020b0 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e007      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bae:	d1ef      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800

08004bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e049      	b.n	8004c66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f841 	bl	8004c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f000 f9e8 	bl	8004fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e054      	b.n	8004d46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d022      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x80>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d01d      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x80>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d018      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x80>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x80>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <HAL_TIM_Base_Start_IT+0xe0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	; (8004d68 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <HAL_TIM_Base_Start_IT+0xe8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d115      	bne.n	8004d30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <HAL_TIM_Base_Start_IT+0xec>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d015      	beq.n	8004d42 <HAL_TIM_Base_Start_IT+0xbe>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1c:	d011      	beq.n	8004d42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	e008      	b.n	8004d42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e000      	b.n	8004d44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40010400 	.word	0x40010400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40001800 	.word	0x40001800
 8004d70:	00010007 	.word	0x00010007

08004d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0202 	mvn.w	r2, #2
 8004da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8e9 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8db 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f8ec 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d020      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0204 	mvn.w	r2, #4
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8c3 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8b5 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8c6 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d020      	beq.n	8004e70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0208 	mvn.w	r2, #8
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2204      	movs	r2, #4
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f89d 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f88f 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f8a0 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01b      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0210 	mvn.w	r2, #16
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2208      	movs	r2, #8
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f877 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f869 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f87a 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0201 	mvn.w	r2, #1
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fa82 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f919 	bl	8005140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f911 	bl	8005154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f834 	bl	8004fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00c      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f06f 0220 	mvn.w	r2, #32
 8004f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8d9 	bl	800512c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a46      	ldr	r2, [pc, #280]	; (8005100 <TIM_Base_SetConfig+0x12c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d00f      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a43      	ldr	r2, [pc, #268]	; (8005104 <TIM_Base_SetConfig+0x130>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00b      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a42      	ldr	r2, [pc, #264]	; (8005108 <TIM_Base_SetConfig+0x134>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a41      	ldr	r2, [pc, #260]	; (800510c <TIM_Base_SetConfig+0x138>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a40      	ldr	r2, [pc, #256]	; (8005110 <TIM_Base_SetConfig+0x13c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <TIM_Base_SetConfig+0x12c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d02b      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d027      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a32      	ldr	r2, [pc, #200]	; (8005104 <TIM_Base_SetConfig+0x130>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d023      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a31      	ldr	r2, [pc, #196]	; (8005108 <TIM_Base_SetConfig+0x134>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01f      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a30      	ldr	r2, [pc, #192]	; (800510c <TIM_Base_SetConfig+0x138>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01b      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2f      	ldr	r2, [pc, #188]	; (8005110 <TIM_Base_SetConfig+0x13c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d017      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2e      	ldr	r2, [pc, #184]	; (8005114 <TIM_Base_SetConfig+0x140>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2d      	ldr	r2, [pc, #180]	; (8005118 <TIM_Base_SetConfig+0x144>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00f      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2c      	ldr	r2, [pc, #176]	; (800511c <TIM_Base_SetConfig+0x148>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <TIM_Base_SetConfig+0x14c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <TIM_Base_SetConfig+0x150>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a29      	ldr	r2, [pc, #164]	; (8005128 <TIM_Base_SetConfig+0x154>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <TIM_Base_SetConfig+0x12c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_Base_SetConfig+0xf8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <TIM_Base_SetConfig+0x13c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d103      	bne.n	80050d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d105      	bne.n	80050f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f023 0201 	bic.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	611a      	str	r2, [r3, #16]
  }
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40010400 	.word	0x40010400
 8005114:	40014000 	.word	0x40014000
 8005118:	40014400 	.word	0x40014400
 800511c:	40014800 	.word	0x40014800
 8005120:	40001800 	.word	0x40001800
 8005124:	40001c00 	.word	0x40001c00
 8005128:	40002000 	.word	0x40002000

0800512c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e040      	b.n	80051fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc fbcc 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	; 0x24
 8005194:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 feee 	bl	8005f90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fc87 	bl	8005ac8 <UART_SetConfig>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e01b      	b.n	80051fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 ff6d 	bl	80060d4 <UART_CheckIdleState>
 80051fa:	4603      	mov	r3, r0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	; 0x28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005216:	2b20      	cmp	r3, #32
 8005218:	d165      	bne.n	80052e6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_UART_Transmit_DMA+0x22>
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e05e      	b.n	80052e8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	88fa      	ldrh	r2, [r7, #6]
 800523c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2221      	movs	r2, #33	; 0x21
 800524c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	2b00      	cmp	r3, #0
 8005254:	d027      	beq.n	80052a6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <HAL_UART_Transmit_DMA+0xec>)
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <HAL_UART_Transmit_DMA+0xf0>)
 8005264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	4a23      	ldr	r2, [pc, #140]	; (80052f8 <HAL_UART_Transmit_DMA+0xf4>)
 800526c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	2200      	movs	r2, #0
 8005274:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	4619      	mov	r1, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3328      	adds	r3, #40	; 0x28
 8005286:	461a      	mov	r2, r3
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	f7fd f9cd 	bl	8002628 <HAL_DMA_Start_IT>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2210      	movs	r2, #16
 8005298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e020      	b.n	80052e8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2240      	movs	r2, #64	; 0x40
 80052ac:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	613b      	str	r3, [r7, #16]
   return(result);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	623a      	str	r2, [r7, #32]
 80052d0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	69f9      	ldr	r1, [r7, #28]
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	61bb      	str	r3, [r7, #24]
   return(result);
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	; 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	080064b1 	.word	0x080064b1
 80052f4:	08006547 	.word	0x08006547
 80052f8:	080066c9 	.word	0x080066c9

080052fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005310:	2b20      	cmp	r3, #32
 8005312:	d132      	bne.n	800537a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_UART_Receive_DMA+0x24>
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e02b      	b.n	800537c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d018      	beq.n	800536a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	623b      	str	r3, [r7, #32]
 8005358:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	61bb      	str	r3, [r7, #24]
   return(result);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e6      	bne.n	8005338 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	461a      	mov	r2, r3
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 ff73 	bl	800625c <UART_Start_Receive_DMA>
 8005376:	4603      	mov	r3, r0
 8005378:	e000      	b.n	800537c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3728      	adds	r7, #40	; 0x28
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b090      	sub	sp, #64	; 0x40
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d139      	bne.n	800541c <HAL_UART_DMAStop+0x98>
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	2b21      	cmp	r3, #33	; 0x21
 80053ac:	d136      	bne.n	800541c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3308      	adds	r3, #8
 80053b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d015      	beq.n	8005416 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fd f97a 	bl	80026e8 <HAL_DMA_Abort>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00d      	beq.n	8005416 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fd fb8e 	bl	8002b20 <HAL_DMA_GetError>
 8005404:	4603      	mov	r3, r0
 8005406:	2b20      	cmp	r3, #32
 8005408:	d105      	bne.n	8005416 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2210      	movs	r2, #16
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e044      	b.n	80054a0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 ffc0 	bl	800639c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d139      	bne.n	800549e <HAL_UART_DMAStop+0x11a>
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b22      	cmp	r3, #34	; 0x22
 800542e:	d136      	bne.n	800549e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	61ba      	str	r2, [r7, #24]
 8005452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6979      	ldr	r1, [r7, #20]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	613b      	str	r3, [r7, #16]
   return(result);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005468:	2b00      	cmp	r3, #0
 800546a:	d015      	beq.n	8005498 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005470:	4618      	mov	r0, r3
 8005472:	f7fd f939 	bl	80026e8 <HAL_DMA_Abort>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00d      	beq.n	8005498 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005480:	4618      	mov	r0, r3
 8005482:	f7fd fb4d 	bl	8002b20 <HAL_DMA_GetError>
 8005486:	4603      	mov	r3, r0
 8005488:	2b20      	cmp	r3, #32
 800548a:	d105      	bne.n	8005498 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2210      	movs	r2, #16
 8005490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e003      	b.n	80054a0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 ffa5 	bl	80063e8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3740      	adds	r7, #64	; 0x40
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0ba      	sub	sp, #232	; 0xe8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80054d6:	4013      	ands	r3, r2
 80054d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d115      	bne.n	8005510 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00f      	beq.n	8005510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8297 	beq.w	8005a34 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
      }
      return;
 800550e:	e291      	b.n	8005a34 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8117 	beq.w	8005748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800551a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800552a:	4b85      	ldr	r3, [pc, #532]	; (8005740 <HAL_UART_IRQHandler+0x298>)
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 810a 	beq.w	8005748 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d011      	beq.n	8005564 <HAL_UART_IRQHandler+0xbc>
 8005540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2201      	movs	r2, #1
 8005552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d011      	beq.n	8005594 <HAL_UART_IRQHandler+0xec>
 8005570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2202      	movs	r2, #2
 8005582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d011      	beq.n	80055c4 <HAL_UART_IRQHandler+0x11c>
 80055a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2204      	movs	r2, #4
 80055b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ba:	f043 0202 	orr.w	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d017      	beq.n	8005600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2208      	movs	r2, #8
 80055ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f6:	f043 0208 	orr.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005608:	2b00      	cmp	r3, #0
 800560a:	d012      	beq.n	8005632 <HAL_UART_IRQHandler+0x18a>
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 81fd 	beq.w	8005a38 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04f      	beq.n	800572a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 feac 	bl	80063e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d141      	bne.n	8005722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3308      	adds	r3, #8
 80056a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1d9      	bne.n	800569e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <HAL_UART_IRQHandler+0x29c>)
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd f862 	bl	80027c8 <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00f      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9be 	bl	8005a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00b      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9ba 	bl	8005a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e007      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f9b6 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005738:	e17e      	b.n	8005a38 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573a:	bf00      	nop
    return;
 800573c:	e17c      	b.n	8005a38 <HAL_UART_IRQHandler+0x590>
 800573e:	bf00      	nop
 8005740:	04000120 	.word	0x04000120
 8005744:	08006747 	.word	0x08006747

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	2b01      	cmp	r3, #1
 800574e:	f040 814c 	bne.w	80059ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8145 	beq.w	80059ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 813e 	beq.w	80059ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2210      	movs	r2, #16
 8005774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	f040 80b6 	bne.w	80058f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8150 	beq.w	8005a3c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f080 8148 	bcs.w	8005a3c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c0:	f000 8086 	beq.w	80058d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1da      	bne.n	80057c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800581e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800583a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e1      	bne.n	800580e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800585a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800586e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800587c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e3      	bne.n	800584a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800589e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a0:	f023 0310 	bic.w	r3, r3, #16
 80058a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80058b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e4      	bne.n	8005890 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fc ff0c 	bl	80026e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f8e0 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058f0:	e0a4      	b.n	8005a3c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8096 	beq.w	8005a40 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8091 	beq.w	8005a40 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005940:	647b      	str	r3, [r7, #68]	; 0x44
 8005942:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e4      	bne.n	800591e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	623b      	str	r3, [r7, #32]
   return(result);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	f023 0301 	bic.w	r3, r3, #1
 800596a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005978:	633a      	str	r2, [r7, #48]	; 0x30
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800597e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e3      	bne.n	8005954 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0310 	bic.w	r3, r3, #16
 80059b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	69b9      	ldr	r1, [r7, #24]
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	617b      	str	r3, [r7, #20]
   return(result);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e4      	bne.n	80059a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f864 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059e8:	e02a      	b.n	8005a40 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01c      	beq.n	8005a44 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
    }
    return;
 8005a12:	e017      	b.n	8005a44 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <HAL_UART_IRQHandler+0x59e>
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00c      	beq.n	8005a46 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fea0 	bl	8006772 <UART_EndTransmit_IT>
    return;
 8005a32:	e008      	b.n	8005a46 <HAL_UART_IRQHandler+0x59e>
      return;
 8005a34:	bf00      	nop
 8005a36:	e006      	b.n	8005a46 <HAL_UART_IRQHandler+0x59e>
    return;
 8005a38:	bf00      	nop
 8005a3a:	e004      	b.n	8005a46 <HAL_UART_IRQHandler+0x59e>
      return;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <HAL_UART_IRQHandler+0x59e>
      return;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <HAL_UART_IRQHandler+0x59e>
    return;
 8005a44:	bf00      	nop
  }

}
 8005a46:	37e8      	adds	r7, #232	; 0xe8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4ba6      	ldr	r3, [pc, #664]	; (8005d8c <UART_SetConfig+0x2c4>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a94      	ldr	r2, [pc, #592]	; (8005d90 <UART_SetConfig+0x2c8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d120      	bne.n	8005b86 <UART_SetConfig+0xbe>
 8005b44:	4b93      	ldr	r3, [pc, #588]	; (8005d94 <UART_SetConfig+0x2cc>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d816      	bhi.n	8005b80 <UART_SetConfig+0xb8>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x90>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b75 	.word	0x08005b75
 8005b60:	08005b6f 	.word	0x08005b6f
 8005b64:	08005b7b 	.word	0x08005b7b
 8005b68:	2301      	movs	r3, #1
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e150      	b.n	8005e10 <UART_SetConfig+0x348>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e14d      	b.n	8005e10 <UART_SetConfig+0x348>
 8005b74:	2304      	movs	r3, #4
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e14a      	b.n	8005e10 <UART_SetConfig+0x348>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	77fb      	strb	r3, [r7, #31]
 8005b7e:	e147      	b.n	8005e10 <UART_SetConfig+0x348>
 8005b80:	2310      	movs	r3, #16
 8005b82:	77fb      	strb	r3, [r7, #31]
 8005b84:	e144      	b.n	8005e10 <UART_SetConfig+0x348>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a83      	ldr	r2, [pc, #524]	; (8005d98 <UART_SetConfig+0x2d0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d132      	bne.n	8005bf6 <UART_SetConfig+0x12e>
 8005b90:	4b80      	ldr	r3, [pc, #512]	; (8005d94 <UART_SetConfig+0x2cc>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d828      	bhi.n	8005bf0 <UART_SetConfig+0x128>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0xdc>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bd9 	.word	0x08005bd9
 8005ba8:	08005bf1 	.word	0x08005bf1
 8005bac:	08005bf1 	.word	0x08005bf1
 8005bb0:	08005bf1 	.word	0x08005bf1
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005bf1 	.word	0x08005bf1
 8005bc4:	08005bdf 	.word	0x08005bdf
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf1 	.word	0x08005bf1
 8005bd4:	08005beb 	.word	0x08005beb
 8005bd8:	2300      	movs	r3, #0
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e118      	b.n	8005e10 <UART_SetConfig+0x348>
 8005bde:	2302      	movs	r3, #2
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e115      	b.n	8005e10 <UART_SetConfig+0x348>
 8005be4:	2304      	movs	r3, #4
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e112      	b.n	8005e10 <UART_SetConfig+0x348>
 8005bea:	2308      	movs	r3, #8
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e10f      	b.n	8005e10 <UART_SetConfig+0x348>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e10c      	b.n	8005e10 <UART_SetConfig+0x348>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a68      	ldr	r2, [pc, #416]	; (8005d9c <UART_SetConfig+0x2d4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d120      	bne.n	8005c42 <UART_SetConfig+0x17a>
 8005c00:	4b64      	ldr	r3, [pc, #400]	; (8005d94 <UART_SetConfig+0x2cc>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c0a:	2b30      	cmp	r3, #48	; 0x30
 8005c0c:	d013      	beq.n	8005c36 <UART_SetConfig+0x16e>
 8005c0e:	2b30      	cmp	r3, #48	; 0x30
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x174>
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d009      	beq.n	8005c2a <UART_SetConfig+0x162>
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d810      	bhi.n	8005c3c <UART_SetConfig+0x174>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <UART_SetConfig+0x15c>
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d006      	beq.n	8005c30 <UART_SetConfig+0x168>
 8005c22:	e00b      	b.n	8005c3c <UART_SetConfig+0x174>
 8005c24:	2300      	movs	r3, #0
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e0f2      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e0ef      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c30:	2304      	movs	r3, #4
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e0ec      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c36:	2308      	movs	r3, #8
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e0e9      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e0e6      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a56      	ldr	r2, [pc, #344]	; (8005da0 <UART_SetConfig+0x2d8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d120      	bne.n	8005c8e <UART_SetConfig+0x1c6>
 8005c4c:	4b51      	ldr	r3, [pc, #324]	; (8005d94 <UART_SetConfig+0x2cc>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c56:	2bc0      	cmp	r3, #192	; 0xc0
 8005c58:	d013      	beq.n	8005c82 <UART_SetConfig+0x1ba>
 8005c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c5c:	d814      	bhi.n	8005c88 <UART_SetConfig+0x1c0>
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d009      	beq.n	8005c76 <UART_SetConfig+0x1ae>
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d810      	bhi.n	8005c88 <UART_SetConfig+0x1c0>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <UART_SetConfig+0x1a8>
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d006      	beq.n	8005c7c <UART_SetConfig+0x1b4>
 8005c6e:	e00b      	b.n	8005c88 <UART_SetConfig+0x1c0>
 8005c70:	2300      	movs	r3, #0
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e0cc      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c76:	2302      	movs	r3, #2
 8005c78:	77fb      	strb	r3, [r7, #31]
 8005c7a:	e0c9      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e0c6      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c82:	2308      	movs	r3, #8
 8005c84:	77fb      	strb	r3, [r7, #31]
 8005c86:	e0c3      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	77fb      	strb	r3, [r7, #31]
 8005c8c:	e0c0      	b.n	8005e10 <UART_SetConfig+0x348>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a44      	ldr	r2, [pc, #272]	; (8005da4 <UART_SetConfig+0x2dc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d125      	bne.n	8005ce4 <UART_SetConfig+0x21c>
 8005c98:	4b3e      	ldr	r3, [pc, #248]	; (8005d94 <UART_SetConfig+0x2cc>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca6:	d017      	beq.n	8005cd8 <UART_SetConfig+0x210>
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cac:	d817      	bhi.n	8005cde <UART_SetConfig+0x216>
 8005cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb2:	d00b      	beq.n	8005ccc <UART_SetConfig+0x204>
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d811      	bhi.n	8005cde <UART_SetConfig+0x216>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <UART_SetConfig+0x1fe>
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d006      	beq.n	8005cd2 <UART_SetConfig+0x20a>
 8005cc4:	e00b      	b.n	8005cde <UART_SetConfig+0x216>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e0a1      	b.n	8005e10 <UART_SetConfig+0x348>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e09e      	b.n	8005e10 <UART_SetConfig+0x348>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e09b      	b.n	8005e10 <UART_SetConfig+0x348>
 8005cd8:	2308      	movs	r3, #8
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e098      	b.n	8005e10 <UART_SetConfig+0x348>
 8005cde:	2310      	movs	r3, #16
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	e095      	b.n	8005e10 <UART_SetConfig+0x348>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2f      	ldr	r2, [pc, #188]	; (8005da8 <UART_SetConfig+0x2e0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d125      	bne.n	8005d3a <UART_SetConfig+0x272>
 8005cee:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <UART_SetConfig+0x2cc>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cfc:	d017      	beq.n	8005d2e <UART_SetConfig+0x266>
 8005cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d02:	d817      	bhi.n	8005d34 <UART_SetConfig+0x26c>
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d08:	d00b      	beq.n	8005d22 <UART_SetConfig+0x25a>
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0e:	d811      	bhi.n	8005d34 <UART_SetConfig+0x26c>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <UART_SetConfig+0x254>
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d18:	d006      	beq.n	8005d28 <UART_SetConfig+0x260>
 8005d1a:	e00b      	b.n	8005d34 <UART_SetConfig+0x26c>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e076      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d22:	2302      	movs	r3, #2
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e073      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e070      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d2e:	2308      	movs	r3, #8
 8005d30:	77fb      	strb	r3, [r7, #31]
 8005d32:	e06d      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d34:	2310      	movs	r3, #16
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e06a      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <UART_SetConfig+0x2e4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d138      	bne.n	8005db6 <UART_SetConfig+0x2ee>
 8005d44:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <UART_SetConfig+0x2cc>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d52:	d017      	beq.n	8005d84 <UART_SetConfig+0x2bc>
 8005d54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d58:	d82a      	bhi.n	8005db0 <UART_SetConfig+0x2e8>
 8005d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d5e:	d00b      	beq.n	8005d78 <UART_SetConfig+0x2b0>
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d824      	bhi.n	8005db0 <UART_SetConfig+0x2e8>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <UART_SetConfig+0x2aa>
 8005d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6e:	d006      	beq.n	8005d7e <UART_SetConfig+0x2b6>
 8005d70:	e01e      	b.n	8005db0 <UART_SetConfig+0x2e8>
 8005d72:	2300      	movs	r3, #0
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e04b      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e048      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d7e:	2304      	movs	r3, #4
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e045      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d84:	2308      	movs	r3, #8
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e042      	b.n	8005e10 <UART_SetConfig+0x348>
 8005d8a:	bf00      	nop
 8005d8c:	efff69f3 	.word	0xefff69f3
 8005d90:	40011000 	.word	0x40011000
 8005d94:	40023800 	.word	0x40023800
 8005d98:	40004400 	.word	0x40004400
 8005d9c:	40004800 	.word	0x40004800
 8005da0:	40004c00 	.word	0x40004c00
 8005da4:	40005000 	.word	0x40005000
 8005da8:	40011400 	.word	0x40011400
 8005dac:	40007800 	.word	0x40007800
 8005db0:	2310      	movs	r3, #16
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e02c      	b.n	8005e10 <UART_SetConfig+0x348>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a72      	ldr	r2, [pc, #456]	; (8005f84 <UART_SetConfig+0x4bc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d125      	bne.n	8005e0c <UART_SetConfig+0x344>
 8005dc0:	4b71      	ldr	r3, [pc, #452]	; (8005f88 <UART_SetConfig+0x4c0>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005dca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dce:	d017      	beq.n	8005e00 <UART_SetConfig+0x338>
 8005dd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dd4:	d817      	bhi.n	8005e06 <UART_SetConfig+0x33e>
 8005dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dda:	d00b      	beq.n	8005df4 <UART_SetConfig+0x32c>
 8005ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de0:	d811      	bhi.n	8005e06 <UART_SetConfig+0x33e>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <UART_SetConfig+0x326>
 8005de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dea:	d006      	beq.n	8005dfa <UART_SetConfig+0x332>
 8005dec:	e00b      	b.n	8005e06 <UART_SetConfig+0x33e>
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e00d      	b.n	8005e10 <UART_SetConfig+0x348>
 8005df4:	2302      	movs	r3, #2
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e00a      	b.n	8005e10 <UART_SetConfig+0x348>
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e007      	b.n	8005e10 <UART_SetConfig+0x348>
 8005e00:	2308      	movs	r3, #8
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e004      	b.n	8005e10 <UART_SetConfig+0x348>
 8005e06:	2310      	movs	r3, #16
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	e001      	b.n	8005e10 <UART_SetConfig+0x348>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e18:	d15b      	bne.n	8005ed2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005e1a:	7ffb      	ldrb	r3, [r7, #31]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d828      	bhi.n	8005e72 <UART_SetConfig+0x3aa>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0x360>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e4d 	.word	0x08005e4d
 8005e2c:	08005e55 	.word	0x08005e55
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	08005e73 	.word	0x08005e73
 8005e38:	08005e63 	.word	0x08005e63
 8005e3c:	08005e73 	.word	0x08005e73
 8005e40:	08005e73 	.word	0x08005e73
 8005e44:	08005e73 	.word	0x08005e73
 8005e48:	08005e6b 	.word	0x08005e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e4c:	f7fe fa6e 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005e50:	61b8      	str	r0, [r7, #24]
        break;
 8005e52:	e013      	b.n	8005e7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e54:	f7fe fa7e 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8005e58:	61b8      	str	r0, [r7, #24]
        break;
 8005e5a:	e00f      	b.n	8005e7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e5c:	4b4b      	ldr	r3, [pc, #300]	; (8005f8c <UART_SetConfig+0x4c4>)
 8005e5e:	61bb      	str	r3, [r7, #24]
        break;
 8005e60:	e00c      	b.n	8005e7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e62:	f7fe f951 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8005e66:	61b8      	str	r0, [r7, #24]
        break;
 8005e68:	e008      	b.n	8005e7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6e:	61bb      	str	r3, [r7, #24]
        break;
 8005e70:	e004      	b.n	8005e7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	77bb      	strb	r3, [r7, #30]
        break;
 8005e7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d074      	beq.n	8005f6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	005a      	lsls	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	085b      	lsrs	r3, r3, #1
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b0f      	cmp	r3, #15
 8005e9c:	d916      	bls.n	8005ecc <UART_SetConfig+0x404>
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea4:	d212      	bcs.n	8005ecc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f023 030f 	bic.w	r3, r3, #15
 8005eae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	89fa      	ldrh	r2, [r7, #14]
 8005ec8:	60da      	str	r2, [r3, #12]
 8005eca:	e04f      	b.n	8005f6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	77bb      	strb	r3, [r7, #30]
 8005ed0:	e04c      	b.n	8005f6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ed2:	7ffb      	ldrb	r3, [r7, #31]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d828      	bhi.n	8005f2a <UART_SetConfig+0x462>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <UART_SetConfig+0x418>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	08005f2b 	.word	0x08005f2b
 8005ef0:	08005f1b 	.word	0x08005f1b
 8005ef4:	08005f2b 	.word	0x08005f2b
 8005ef8:	08005f2b 	.word	0x08005f2b
 8005efc:	08005f2b 	.word	0x08005f2b
 8005f00:	08005f23 	.word	0x08005f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f04:	f7fe fa12 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005f08:	61b8      	str	r0, [r7, #24]
        break;
 8005f0a:	e013      	b.n	8005f34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f0c:	f7fe fa22 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8005f10:	61b8      	str	r0, [r7, #24]
        break;
 8005f12:	e00f      	b.n	8005f34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <UART_SetConfig+0x4c4>)
 8005f16:	61bb      	str	r3, [r7, #24]
        break;
 8005f18:	e00c      	b.n	8005f34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f1a:	f7fe f8f5 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8005f1e:	61b8      	str	r0, [r7, #24]
        break;
 8005f20:	e008      	b.n	8005f34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f26:	61bb      	str	r3, [r7, #24]
        break;
 8005f28:	e004      	b.n	8005f34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	77bb      	strb	r3, [r7, #30]
        break;
 8005f32:	bf00      	nop
    }

    if (pclk != 0U)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	085a      	lsrs	r2, r3, #1
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	441a      	add	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b0f      	cmp	r3, #15
 8005f52:	d909      	bls.n	8005f68 <UART_SetConfig+0x4a0>
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d205      	bcs.n	8005f68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	e001      	b.n	8005f6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005f78:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40007c00 	.word	0x40007c00
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	00f42400 	.word	0x00f42400

08005f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d10a      	bne.n	80060a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	; 0x30
 80060d8:	af02      	add	r7, sp, #8
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060e4:	f7fb ffe4 	bl	80020b0 <HAL_GetTick>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d12e      	bne.n	8006156 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	2200      	movs	r2, #0
 8006102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f83b 	bl	8006182 <UART_WaitOnFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d021      	beq.n	8006156 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006126:	623b      	str	r3, [r7, #32]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	617b      	str	r3, [r7, #20]
   return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e6      	bne.n	8006112 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e011      	b.n	800617a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3728      	adds	r7, #40	; 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006192:	e04f      	b.n	8006234 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619a:	d04b      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619c:	f7fb ff88 	bl	80020b0 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d302      	bcc.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e04e      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d037      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b80      	cmp	r3, #128	; 0x80
 80061c8:	d034      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d031      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d110      	bne.n	8006200 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2208      	movs	r2, #8
 80061e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f8fe 	bl	80063e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2208      	movs	r2, #8
 80061f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e029      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620e:	d111      	bne.n	8006234 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006218:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f8e4 	bl	80063e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e00f      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69da      	ldr	r2, [r3, #28]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4013      	ands	r3, r2
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	429a      	cmp	r2, r3
 8006250:	d0a0      	beq.n	8006194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b096      	sub	sp, #88	; 0x58
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2222      	movs	r2, #34	; 0x22
 8006284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628c:	2b00      	cmp	r3, #0
 800628e:	d028      	beq.n	80062e2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006294:	4a3e      	ldr	r2, [pc, #248]	; (8006390 <UART_Start_Receive_DMA+0x134>)
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629c:	4a3d      	ldr	r2, [pc, #244]	; (8006394 <UART_Start_Receive_DMA+0x138>)
 800629e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a4:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <UART_Start_Receive_DMA+0x13c>)
 80062a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ac:	2200      	movs	r2, #0
 80062ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3324      	adds	r3, #36	; 0x24
 80062ba:	4619      	mov	r1, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	461a      	mov	r2, r3
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	f7fc f9b0 	bl	8002628 <HAL_DMA_Start_IT>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2210      	movs	r2, #16
 80062d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e051      	b.n	8006386 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006308:	64bb      	str	r3, [r7, #72]	; 0x48
 800630a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800630e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3308      	adds	r3, #8
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800633c:	637a      	str	r2, [r7, #52]	; 0x34
 800633e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e5      	bne.n	800631c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	613b      	str	r3, [r7, #16]
   return(result);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006370:	623a      	str	r2, [r7, #32]
 8006372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	69f9      	ldr	r1, [r7, #28]
 8006376:	6a3a      	ldr	r2, [r7, #32]
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	61bb      	str	r3, [r7, #24]
   return(result);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e5      	bne.n	8006350 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3758      	adds	r7, #88	; 0x58
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	08006563 	.word	0x08006563
 8006394:	0800668b 	.word	0x0800668b
 8006398:	080066c9 	.word	0x080066c9

0800639c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	; 0x24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6979      	ldr	r1, [r7, #20]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	613b      	str	r3, [r7, #16]
   return(result);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e6      	bne.n	80063a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80063dc:	bf00      	nop
 80063de:	3724      	adds	r7, #36	; 0x24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b095      	sub	sp, #84	; 0x54
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640e:	643b      	str	r3, [r7, #64]	; 0x40
 8006410:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e6      	bne.n	80063f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	61fb      	str	r3, [r7, #28]
   return(result);
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	64bb      	str	r3, [r7, #72]	; 0x48
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645a:	2b01      	cmp	r3, #1
 800645c:	d118      	bne.n	8006490 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60bb      	str	r3, [r7, #8]
   return(result);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	647b      	str	r3, [r7, #68]	; 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	613b      	str	r3, [r7, #16]
   return(result);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064a4:	bf00      	nop
 80064a6:	3754      	adds	r7, #84	; 0x54
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b090      	sub	sp, #64	; 0x40
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	d037      	beq.n	8006538 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80064c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	623b      	str	r3, [r7, #32]
   return(result);
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f0:	633a      	str	r2, [r7, #48]	; 0x30
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e5      	bne.n	80064d0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	60fb      	str	r3, [r7, #12]
   return(result);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
 800651a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	69b9      	ldr	r1, [r7, #24]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	617b      	str	r3, [r7, #20]
   return(result);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e6      	bne.n	8006504 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006536:	e002      	b.n	800653e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006538:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800653a:	f7ff fa87 	bl	8005a4c <HAL_UART_TxCpltCallback>
}
 800653e:	bf00      	nop
 8006540:	3740      	adds	r7, #64	; 0x40
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff fa83 	bl	8005a60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b09c      	sub	sp, #112	; 0x70
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006578:	d071      	beq.n	800665e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800657a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657c:	2200      	movs	r2, #0
 800657e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006596:	66bb      	str	r3, [r7, #104]	; 0x68
 8006598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e6      	bne.n	8006582 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	667b      	str	r3, [r7, #100]	; 0x64
 80065cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3308      	adds	r3, #8
 80065d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065d4:	647a      	str	r2, [r7, #68]	; 0x44
 80065d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e5      	bne.n	80065b4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	623b      	str	r3, [r7, #32]
   return(result);
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006608:	633a      	str	r2, [r7, #48]	; 0x30
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800660e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e5      	bne.n	80065e8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800661c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661e:	2220      	movs	r2, #32
 8006620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006628:	2b01      	cmp	r3, #1
 800662a:	d118      	bne.n	800665e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	60fb      	str	r3, [r7, #12]
   return(result);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f023 0310 	bic.w	r3, r3, #16
 8006640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	69b9      	ldr	r1, [r7, #24]
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	617b      	str	r3, [r7, #20]
   return(result);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006660:	2200      	movs	r2, #0
 8006662:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	2b01      	cmp	r3, #1
 800666a:	d107      	bne.n	800667c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006672:	4619      	mov	r1, r3
 8006674:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006676:	f7ff fa1b 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800667a:	e002      	b.n	8006682 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800667c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800667e:	f7ff f9f9 	bl	8005a74 <HAL_UART_RxCpltCallback>
}
 8006682:	bf00      	nop
 8006684:	3770      	adds	r7, #112	; 0x70
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d109      	bne.n	80066ba <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4619      	mov	r1, r3
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff f9fc 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066b8:	e002      	b.n	80066c0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff f9e4 	bl	8005a88 <HAL_UART_RxHalfCpltCallback>
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b80      	cmp	r3, #128	; 0x80
 80066f0:	d109      	bne.n	8006706 <UART_DMAError+0x3e>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2b21      	cmp	r3, #33	; 0x21
 80066f6:	d106      	bne.n	8006706 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006700:	6978      	ldr	r0, [r7, #20]
 8006702:	f7ff fe4b 	bl	800639c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d109      	bne.n	8006728 <UART_DMAError+0x60>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b22      	cmp	r3, #34	; 0x22
 8006718:	d106      	bne.n	8006728 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2200      	movs	r2, #0
 800671e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006722:	6978      	ldr	r0, [r7, #20]
 8006724:	f7ff fe60 	bl	80063e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800672e:	f043 0210 	orr.w	r2, r3, #16
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006738:	6978      	ldr	r0, [r7, #20]
 800673a:	f7ff f9af 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800673e:	bf00      	nop
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff f999 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b088      	sub	sp, #32
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	60bb      	str	r3, [r7, #8]
   return(result);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	613b      	str	r3, [r7, #16]
   return(result);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e6      	bne.n	800677a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff f947 	bl	8005a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067be:	bf00      	nop
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067c8:	b084      	sub	sp, #16
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	f107 001c 	add.w	r0, r7, #28
 80067d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d121      	bne.n	8006826 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <USB_CoreInit+0xb0>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800680a:	2b01      	cmp	r3, #1
 800680c:	d105      	bne.n	800681a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa92 	bl	8006d44 <USB_CoreReset>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
 8006824:	e010      	b.n	8006848 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa86 	bl	8006d44 <USB_CoreReset>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006848:	7fbb      	ldrb	r3, [r7, #30]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d10b      	bne.n	8006866 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f043 0206 	orr.w	r2, r3, #6
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f043 0220 	orr.w	r2, r3, #32
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006872:	b004      	add	sp, #16
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	ffbdffbf 	.word	0xffbdffbf

0800687c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f023 0201 	bic.w	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d115      	bne.n	80068ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068cc:	200a      	movs	r0, #10
 80068ce:	f7fb fbfb 	bl	80020c8 <HAL_Delay>
      ms += 10U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	330a      	adds	r3, #10
 80068d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa25 	bl	8006d28 <USB_GetMode>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d01e      	beq.n	8006922 <USB_SetCurrentMode+0x84>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2bc7      	cmp	r3, #199	; 0xc7
 80068e8:	d9f0      	bls.n	80068cc <USB_SetCurrentMode+0x2e>
 80068ea:	e01a      	b.n	8006922 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d115      	bne.n	800691e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068fe:	200a      	movs	r0, #10
 8006900:	f7fb fbe2 	bl	80020c8 <HAL_Delay>
      ms += 10U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	330a      	adds	r3, #10
 8006908:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa0c 	bl	8006d28 <USB_GetMode>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <USB_SetCurrentMode+0x84>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2bc7      	cmp	r3, #199	; 0xc7
 800691a:	d9f0      	bls.n	80068fe <USB_SetCurrentMode+0x60>
 800691c:	e001      	b.n	8006922 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e005      	b.n	800692e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2bc8      	cmp	r3, #200	; 0xc8
 8006926:	d101      	bne.n	800692c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006938:	b084      	sub	sp, #16
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	e009      	b.n	800696c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3340      	adds	r3, #64	; 0x40
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	2200      	movs	r2, #0
 8006964:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3301      	adds	r3, #1
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b0e      	cmp	r3, #14
 8006970:	d9f2      	bls.n	8006958 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006972:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11c      	bne.n	80069b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006988:	f043 0302 	orr.w	r3, r3, #2
 800698c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	e005      	b.n	80069c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069c6:	461a      	mov	r2, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d10d      	bne.n	80069f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f968 	bl	8006cb4 <USB_SetDevSpeed>
 80069e4:	e008      	b.n	80069f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069e6:	2101      	movs	r1, #1
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f963 	bl	8006cb4 <USB_SetDevSpeed>
 80069ee:	e003      	b.n	80069f8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069f0:	2103      	movs	r1, #3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f95e 	bl	8006cb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069f8:	2110      	movs	r1, #16
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8fa 	bl	8006bf4 <USB_FlushTxFifo>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f924 	bl	8006c58 <USB_FlushRxFifo>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a20:	461a      	mov	r2, r3
 8006a22:	2300      	movs	r3, #0
 8006a24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	e043      	b.n	8006acc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5a:	d118      	bne.n	8006a8e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e013      	b.n	8006aa0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	461a      	mov	r2, r3
 8006a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e008      	b.n	8006aa0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aac:	461a      	mov	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d3b5      	bcc.n	8006a44 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	e043      	b.n	8006b66 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af4:	d118      	bne.n	8006b28 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	e013      	b.n	8006b3a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e008      	b.n	8006b3a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	461a      	mov	r2, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	461a      	mov	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	3301      	adds	r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d3b5      	bcc.n	8006ade <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f043 0210 	orr.w	r2, r3, #16
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <USB_DevInit+0x2b4>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f043 0208 	orr.w	r2, r3, #8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d105      	bne.n	8006bdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <USB_DevInit+0x2b8>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006be8:	b004      	add	sp, #16
 8006bea:	4770      	bx	lr
 8006bec:	803c3800 	.word	0x803c3800
 8006bf0:	40000004 	.word	0x40000004

08006bf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c0e:	d901      	bls.n	8006c14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e01b      	b.n	8006c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	daf2      	bge.n	8006c02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	019b      	lsls	r3, r3, #6
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c38:	d901      	bls.n	8006c3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e006      	b.n	8006c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d0f0      	beq.n	8006c2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c70:	d901      	bls.n	8006c76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e018      	b.n	8006ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	daf2      	bge.n	8006c64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2210      	movs	r2, #16
 8006c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c94:	d901      	bls.n	8006c9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e006      	b.n	8006ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d0f0      	beq.n	8006c88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d00:	f023 0303 	bic.w	r3, r3, #3
 8006d04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d14:	f043 0302 	orr.w	r3, r3, #2
 8006d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f003 0301 	and.w	r3, r3, #1
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d5c:	d901      	bls.n	8006d62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e01b      	b.n	8006d9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	daf2      	bge.n	8006d50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d86:	d901      	bls.n	8006d8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e006      	b.n	8006d9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d0f0      	beq.n	8006d7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006da6:	b480      	push	{r7}
 8006da8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006daa:	bf00      	nop
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dba:	f3ef 8305 	mrs	r3, IPSR
 8006dbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10f      	bne.n	8006de6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dca:	607b      	str	r3, [r7, #4]
  return(result);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d105      	bne.n	8006dde <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <osKernelInitialize+0x3a>
 8006dde:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <osKernelInitialize+0x64>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d103      	bne.n	8006dee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006de6:	f06f 0305 	mvn.w	r3, #5
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e00c      	b.n	8006e08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dee:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <osKernelInitialize+0x64>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d105      	bne.n	8006e02 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006df6:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <osKernelInitialize+0x64>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e002      	b.n	8006e08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e08:	68fb      	ldr	r3, [r7, #12]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20009ce4 	.word	0x20009ce4

08006e1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e22:	f3ef 8305 	mrs	r3, IPSR
 8006e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10f      	bne.n	8006e4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e32:	607b      	str	r3, [r7, #4]
  return(result);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <osKernelStart+0x3a>
 8006e46:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <osKernelStart+0x68>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d103      	bne.n	8006e56 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006e4e:	f06f 0305 	mvn.w	r3, #5
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e010      	b.n	8006e78 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e56:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <osKernelStart+0x68>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d109      	bne.n	8006e72 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e5e:	f7ff ffa2 	bl	8006da6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e62:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <osKernelStart+0x68>)
 8006e64:	2202      	movs	r2, #2
 8006e66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e68:	f001 f8b4 	bl	8007fd4 <vTaskStartScheduler>
      stat = osOK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e002      	b.n	8006e78 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e78:	68fb      	ldr	r3, [r7, #12]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20009ce4 	.word	0x20009ce4

08006e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b090      	sub	sp, #64	; 0x40
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e98:	f3ef 8305 	mrs	r3, IPSR
 8006e9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e9e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f040 808f 	bne.w	8006fc4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d105      	bne.n	8006ebe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb6:	617b      	str	r3, [r7, #20]
  return(result);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <osThreadNew+0x3e>
 8006ebe:	4b44      	ldr	r3, [pc, #272]	; (8006fd0 <osThreadNew+0x148>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d07e      	beq.n	8006fc4 <osThreadNew+0x13c>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d07b      	beq.n	8006fc4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006ed0:	2318      	movs	r3, #24
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d045      	beq.n	8006f70 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <osThreadNew+0x6a>
        name = attr->name;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <osThreadNew+0x90>
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	2b38      	cmp	r3, #56	; 0x38
 8006f0a:	d805      	bhi.n	8006f18 <osThreadNew+0x90>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <osThreadNew+0x94>
        return (NULL);
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e054      	b.n	8006fc6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	089b      	lsrs	r3, r3, #2
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00e      	beq.n	8006f52 <osThreadNew+0xca>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b5b      	cmp	r3, #91	; 0x5b
 8006f3a:	d90a      	bls.n	8006f52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d006      	beq.n	8006f52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <osThreadNew+0xca>
        mem = 1;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	623b      	str	r3, [r7, #32]
 8006f50:	e010      	b.n	8006f74 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <osThreadNew+0xec>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d108      	bne.n	8006f74 <osThreadNew+0xec>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d104      	bne.n	8006f74 <osThreadNew+0xec>
          mem = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	e001      	b.n	8006f74 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d110      	bne.n	8006f9c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f82:	9202      	str	r2, [sp, #8]
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fe3f 	bl	8007c14 <xTaskCreateStatic>
 8006f96:	4603      	mov	r3, r0
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	e013      	b.n	8006fc4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d110      	bne.n	8006fc4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	f107 0310 	add.w	r3, r7, #16
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 fe90 	bl	8007cda <xTaskCreate>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d001      	beq.n	8006fc4 <osThreadNew+0x13c>
          hTask = NULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fc4:	693b      	ldr	r3, [r7, #16]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3730      	adds	r7, #48	; 0x30
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20009ce4 	.word	0x20009ce4

08006fd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fdc:	f3ef 8305 	mrs	r3, IPSR
 8006fe0:	613b      	str	r3, [r7, #16]
  return(result);
 8006fe2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10f      	bne.n	8007008 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fec:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d105      	bne.n	8007000 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <osDelay+0x3c>
 8007000:	4b0a      	ldr	r3, [pc, #40]	; (800702c <osDelay+0x58>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d103      	bne.n	8007010 <osDelay+0x3c>
    stat = osErrorISR;
 8007008:	f06f 0305 	mvn.w	r3, #5
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e007      	b.n	8007020 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <osDelay+0x4c>
      vTaskDelay(ticks);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 ffa4 	bl	8007f68 <vTaskDelay>
    }
  }

  return (stat);
 8007020:	697b      	ldr	r3, [r7, #20]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20009ce4 	.word	0x20009ce4

08007030 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a07      	ldr	r2, [pc, #28]	; (800705c <vApplicationGetIdleTaskMemory+0x2c>)
 8007040:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4a06      	ldr	r2, [pc, #24]	; (8007060 <vApplicationGetIdleTaskMemory+0x30>)
 8007046:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2280      	movs	r2, #128	; 0x80
 800704c:	601a      	str	r2, [r3, #0]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20009ce8 	.word	0x20009ce8
 8007060:	20009d44 	.word	0x20009d44

08007064 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4a07      	ldr	r2, [pc, #28]	; (8007090 <vApplicationGetTimerTaskMemory+0x2c>)
 8007074:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4a06      	ldr	r2, [pc, #24]	; (8007094 <vApplicationGetTimerTaskMemory+0x30>)
 800707a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007082:	601a      	str	r2, [r3, #0]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20009f44 	.word	0x20009f44
 8007094:	20009fa0 	.word	0x20009fa0

08007098 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f103 0208 	add.w	r2, r3, #8
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f103 0208 	add.w	r2, r3, #8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f103 0208 	add.w	r2, r3, #8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007150:	d103      	bne.n	800715a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e00c      	b.n	8007174 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3308      	adds	r3, #8
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	e002      	b.n	8007168 <vListInsert+0x2e>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d2f6      	bcs.n	8007162 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	601a      	str	r2, [r3, #0]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6892      	ldr	r2, [r2, #8]
 80071c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6852      	ldr	r2, [r2, #4]
 80071cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d103      	bne.n	80071e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	1e5a      	subs	r2, r3, #1
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10c      	bne.n	800722e <xQueueGenericReset+0x2e>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	b672      	cpsid	i
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	b662      	cpsie	i
 8007228:	60bb      	str	r3, [r7, #8]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800722e:	f002 f8a5 	bl	800937c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	441a      	add	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	3b01      	subs	r3, #1
 8007260:	68f9      	ldr	r1, [r7, #12]
 8007262:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	441a      	add	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	22ff      	movs	r2, #255	; 0xff
 8007272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	22ff      	movs	r2, #255	; 0xff
 800727a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d114      	bne.n	80072ae <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3310      	adds	r3, #16
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f937 	bl	8008504 <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d012      	beq.n	80072c2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800729c:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <xQueueGenericReset+0xd0>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	e009      	b.n	80072c2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3310      	adds	r3, #16
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fef0 	bl	8007098 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3324      	adds	r3, #36	; 0x24
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff feeb 	bl	8007098 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072c2:	f002 f88f 	bl	80093e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072c6:	2301      	movs	r3, #1
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08e      	sub	sp, #56	; 0x38
 80072d8:	af02      	add	r7, sp, #8
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10c      	bne.n	8007302 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	b672      	cpsid	i
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	b662      	cpsie	i
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10c      	bne.n	8007322 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	b672      	cpsid	i
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	b662      	cpsie	i
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <xQueueGenericCreateStatic+0x5a>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <xQueueGenericCreateStatic+0x5e>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <xQueueGenericCreateStatic+0x60>
 8007332:	2300      	movs	r3, #0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10c      	bne.n	8007352 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	b672      	cpsid	i
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	b662      	cpsie	i
 800734c:	623b      	str	r3, [r7, #32]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <xQueueGenericCreateStatic+0x8a>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <xQueueGenericCreateStatic+0x8e>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <xQueueGenericCreateStatic+0x90>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10c      	bne.n	8007382 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	b672      	cpsid	i
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	b662      	cpsie	i
 800737c:	61fb      	str	r3, [r7, #28]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007382:	2350      	movs	r3, #80	; 0x50
 8007384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b50      	cmp	r3, #80	; 0x50
 800738a:	d00c      	beq.n	80073a6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	b672      	cpsid	i
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	b662      	cpsie	i
 80073a0:	61bb      	str	r3, [r7, #24]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	4613      	mov	r3, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f805 	bl	80073d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3730      	adds	r7, #48	; 0x30
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e002      	b.n	80073fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007406:	2101      	movs	r1, #1
 8007408:	69b8      	ldr	r0, [r7, #24]
 800740a:	f7ff fef9 	bl	8007200 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08e      	sub	sp, #56	; 0x38
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800742e:	2300      	movs	r3, #0
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10c      	bne.n	8007456 <xQueueGenericSend+0x36>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	b672      	cpsid	i
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	b662      	cpsie	i
 8007450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <xQueueGenericSend+0x44>
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <xQueueGenericSend+0x48>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <xQueueGenericSend+0x4a>
 8007468:	2300      	movs	r3, #0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <xQueueGenericSend+0x68>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	b672      	cpsid	i
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	b662      	cpsie	i
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d103      	bne.n	8007496 <xQueueGenericSend+0x76>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <xQueueGenericSend+0x7a>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueGenericSend+0x7c>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10c      	bne.n	80074ba <xQueueGenericSend+0x9a>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	623b      	str	r3, [r7, #32]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074ba:	f001 fa11 	bl	80088e0 <xTaskGetSchedulerState>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <xQueueGenericSend+0xaa>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <xQueueGenericSend+0xae>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e000      	b.n	80074d0 <xQueueGenericSend+0xb0>
 80074ce:	2300      	movs	r3, #0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10c      	bne.n	80074ee <xQueueGenericSend+0xce>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	b672      	cpsid	i
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	b662      	cpsie	i
 80074e8:	61fb      	str	r3, [r7, #28]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ee:	f001 ff45 	bl	800937c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d302      	bcc.n	8007504 <xQueueGenericSend+0xe4>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d129      	bne.n	8007558 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750a:	f000 fa15 	bl	8007938 <prvCopyDataToQueue>
 800750e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d010      	beq.n	800753a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	3324      	adds	r3, #36	; 0x24
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fff1 	bl	8008504 <xTaskRemoveFromEventList>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d013      	beq.n	8007550 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007528:	4b3f      	ldr	r3, [pc, #252]	; (8007628 <xQueueGenericSend+0x208>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	e00a      	b.n	8007550 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007540:	4b39      	ldr	r3, [pc, #228]	; (8007628 <xQueueGenericSend+0x208>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007550:	f001 ff48 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 8007554:	2301      	movs	r3, #1
 8007556:	e063      	b.n	8007620 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800755e:	f001 ff41 	bl	80093e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007562:	2300      	movs	r3, #0
 8007564:	e05c      	b.n	8007620 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800756c:	f107 0314 	add.w	r3, r7, #20
 8007570:	4618      	mov	r0, r3
 8007572:	f001 f855 	bl	8008620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800757a:	f001 ff33 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800757e:	f000 fd93 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007582:	f001 fefb 	bl	800937c <vPortEnterCritical>
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800758c:	b25b      	sxtb	r3, r3
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007592:	d103      	bne.n	800759c <xQueueGenericSend+0x17c>
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a8:	d103      	bne.n	80075b2 <xQueueGenericSend+0x192>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075b2:	f001 ff17 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075b6:	1d3a      	adds	r2, r7, #4
 80075b8:	f107 0314 	add.w	r3, r7, #20
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 f844 	bl	800864c <xTaskCheckForTimeOut>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d124      	bne.n	8007614 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075cc:	f000 faac 	bl	8007b28 <prvIsQueueFull>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d018      	beq.n	8007608 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	3310      	adds	r3, #16
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4611      	mov	r1, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 ff3c 	bl	800845c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e6:	f000 fa37 	bl	8007a58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075ea:	f000 fd6b 	bl	80080c4 <xTaskResumeAll>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f47f af7c 	bne.w	80074ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80075f6:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <xQueueGenericSend+0x208>)
 80075f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	e772      	b.n	80074ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800760a:	f000 fa25 	bl	8007a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800760e:	f000 fd59 	bl	80080c4 <xTaskResumeAll>
 8007612:	e76c      	b.n	80074ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007616:	f000 fa1f 	bl	8007a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800761a:	f000 fd53 	bl	80080c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800761e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007620:	4618      	mov	r0, r3
 8007622:	3738      	adds	r7, #56	; 0x38
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08e      	sub	sp, #56	; 0x38
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	b672      	cpsid	i
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	b662      	cpsie	i
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d103      	bne.n	800766c <xQueueGenericSendFromISR+0x40>
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <xQueueGenericSendFromISR+0x44>
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <xQueueGenericSendFromISR+0x46>
 8007670:	2300      	movs	r3, #0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10c      	bne.n	8007690 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	b672      	cpsid	i
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	b662      	cpsie	i
 800768a:	623b      	str	r3, [r7, #32]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d103      	bne.n	800769e <xQueueGenericSendFromISR+0x72>
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <xQueueGenericSendFromISR+0x76>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <xQueueGenericSendFromISR+0x78>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10c      	bne.n	80076c2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	b672      	cpsid	i
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	b662      	cpsie	i
 80076bc:	61fb      	str	r3, [r7, #28]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076c2:	f001 ff43 	bl	800954c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076c6:	f3ef 8211 	mrs	r2, BASEPRI
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	b672      	cpsid	i
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	b662      	cpsie	i
 80076de:	61ba      	str	r2, [r7, #24]
 80076e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d302      	bcc.n	80076f8 <xQueueGenericSendFromISR+0xcc>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d12c      	bne.n	8007752 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007708:	f000 f916 	bl	8007938 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800770c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007714:	d112      	bne.n	800773c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d016      	beq.n	800774c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	3324      	adds	r3, #36	; 0x24
 8007722:	4618      	mov	r0, r3
 8007724:	f000 feee 	bl	8008504 <xTaskRemoveFromEventList>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00e      	beq.n	800774c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e007      	b.n	800774c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800773c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007740:	3301      	adds	r3, #1
 8007742:	b2db      	uxtb	r3, r3
 8007744:	b25a      	sxtb	r2, r3
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800774c:	2301      	movs	r3, #1
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007750:	e001      	b.n	8007756 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007760:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007764:	4618      	mov	r0, r3
 8007766:	3738      	adds	r7, #56	; 0x38
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08c      	sub	sp, #48	; 0x30
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007778:	2300      	movs	r3, #0
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10c      	bne.n	80077a0 <xQueueReceive+0x34>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	b672      	cpsid	i
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	b662      	cpsie	i
 800779a:	623b      	str	r3, [r7, #32]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d103      	bne.n	80077ae <xQueueReceive+0x42>
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <xQueueReceive+0x46>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <xQueueReceive+0x48>
 80077b2:	2300      	movs	r3, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10c      	bne.n	80077d2 <xQueueReceive+0x66>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	b672      	cpsid	i
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	b662      	cpsie	i
 80077cc:	61fb      	str	r3, [r7, #28]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077d2:	f001 f885 	bl	80088e0 <xTaskGetSchedulerState>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <xQueueReceive+0x76>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <xQueueReceive+0x7a>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueReceive+0x7c>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10c      	bne.n	8007806 <xQueueReceive+0x9a>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	b672      	cpsid	i
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	b662      	cpsie	i
 8007800:	61bb      	str	r3, [r7, #24]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007806:	f001 fdb9 	bl	800937c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01f      	beq.n	8007856 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781a:	f000 f8f7 	bl	8007a0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	1e5a      	subs	r2, r3, #1
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00f      	beq.n	800784e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	3310      	adds	r3, #16
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fe66 	bl	8008504 <xTaskRemoveFromEventList>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800783e:	4b3d      	ldr	r3, [pc, #244]	; (8007934 <xQueueReceive+0x1c8>)
 8007840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800784e:	f001 fdc9 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 8007852:	2301      	movs	r3, #1
 8007854:	e069      	b.n	800792a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800785c:	f001 fdc2 	bl	80093e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007860:	2300      	movs	r3, #0
 8007862:	e062      	b.n	800792a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800786a:	f107 0310 	add.w	r3, r7, #16
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fed6 	bl	8008620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007878:	f001 fdb4 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800787c:	f000 fc14 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007880:	f001 fd7c 	bl	800937c <vPortEnterCritical>
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800788a:	b25b      	sxtb	r3, r3
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007890:	d103      	bne.n	800789a <xQueueReceive+0x12e>
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a6:	d103      	bne.n	80078b0 <xQueueReceive+0x144>
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078b0:	f001 fd98 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078b4:	1d3a      	adds	r2, r7, #4
 80078b6:	f107 0310 	add.w	r3, r7, #16
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fec5 	bl	800864c <xTaskCheckForTimeOut>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d123      	bne.n	8007910 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ca:	f000 f917 	bl	8007afc <prvIsQueueEmpty>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d017      	beq.n	8007904 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	3324      	adds	r3, #36	; 0x24
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fdbd 	bl	800845c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e4:	f000 f8b8 	bl	8007a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078e8:	f000 fbec 	bl	80080c4 <xTaskResumeAll>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d189      	bne.n	8007806 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <xQueueReceive+0x1c8>)
 80078f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	e780      	b.n	8007806 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f000 f8a7 	bl	8007a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800790a:	f000 fbdb 	bl	80080c4 <xTaskResumeAll>
 800790e:	e77a      	b.n	8007806 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007912:	f000 f8a1 	bl	8007a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007916:	f000 fbd5 	bl	80080c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800791a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791c:	f000 f8ee 	bl	8007afc <prvIsQueueEmpty>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	f43f af6f 	beq.w	8007806 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800792a:	4618      	mov	r0, r3
 800792c:	3730      	adds	r7, #48	; 0x30
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d14d      	bne.n	80079fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 ffda 	bl	800891c <xTaskPriorityDisinherit>
 8007968:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	609a      	str	r2, [r3, #8]
 8007970:	e043      	b.n	80079fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d119      	bne.n	80079ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6858      	ldr	r0, [r3, #4]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	461a      	mov	r2, r3
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	f00f fa51 	bl	8016e2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	441a      	add	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d32b      	bcc.n	80079fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	e026      	b.n	80079fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68d8      	ldr	r0, [r3, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	461a      	mov	r2, r3
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	f00f fa37 	bl	8016e2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	425b      	negs	r3, r3
 80079c6:	441a      	add	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d207      	bcs.n	80079e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	425b      	negs	r3, r3
 80079e2:	441a      	add	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d105      	bne.n	80079fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a02:	697b      	ldr	r3, [r7, #20]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d018      	beq.n	8007a50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	441a      	add	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d303      	bcc.n	8007a40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6838      	ldr	r0, [r7, #0]
 8007a4c:	f00f f9ed 	bl	8016e2a <memcpy>
	}
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a60:	f001 fc8c 	bl	800937c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a6c:	e011      	b.n	8007a92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d012      	beq.n	8007a9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3324      	adds	r3, #36	; 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fd42 	bl	8008504 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a86:	f000 fe47 	bl	8008718 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dce9      	bgt.n	8007a6e <prvUnlockQueue+0x16>
 8007a9a:	e000      	b.n	8007a9e <prvUnlockQueue+0x46>
					break;
 8007a9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007aa6:	f001 fc9d 	bl	80093e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007aaa:	f001 fc67 	bl	800937c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ab6:	e011      	b.n	8007adc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d012      	beq.n	8007ae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3310      	adds	r3, #16
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fd1d 	bl	8008504 <xTaskRemoveFromEventList>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ad0:	f000 fe22 	bl	8008718 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dce9      	bgt.n	8007ab8 <prvUnlockQueue+0x60>
 8007ae4:	e000      	b.n	8007ae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	22ff      	movs	r2, #255	; 0xff
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007af0:	f001 fc78 	bl	80093e4 <vPortExitCritical>
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b04:	f001 fc3a 	bl	800937c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	e001      	b.n	8007b1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b1a:	f001 fc63 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b30:	f001 fc24 	bl	800937c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d102      	bne.n	8007b46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b40:	2301      	movs	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e001      	b.n	8007b4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b4a:	f001 fc4b 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e014      	b.n	8007b92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b68:	4a0f      	ldr	r2, [pc, #60]	; (8007ba8 <vQueueAddToRegistry+0x50>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10b      	bne.n	8007b8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b74:	490c      	ldr	r1, [pc, #48]	; (8007ba8 <vQueueAddToRegistry+0x50>)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <vQueueAddToRegistry+0x50>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	4413      	add	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b8a:	e006      	b.n	8007b9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	d9e7      	bls.n	8007b68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	2000a3a0 	.word	0x2000a3a0

08007bac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007bbc:	f001 fbde 	bl	800937c <vPortEnterCritical>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bc6:	b25b      	sxtb	r3, r3
 8007bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bcc:	d103      	bne.n	8007bd6 <vQueueWaitForMessageRestricted+0x2a>
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bdc:	b25b      	sxtb	r3, r3
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be2:	d103      	bne.n	8007bec <vQueueWaitForMessageRestricted+0x40>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bec:	f001 fbfa 	bl	80093e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	3324      	adds	r3, #36	; 0x24
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fc51 	bl	80084a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7ff ff26 	bl	8007a58 <prvUnlockQueue>
	}
 8007c0c:	bf00      	nop
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	; 0x38
 8007c18:	af04      	add	r7, sp, #16
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10c      	bne.n	8007c42 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	b672      	cpsid	i
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	b662      	cpsie	i
 8007c3c:	623b      	str	r3, [r7, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10c      	bne.n	8007c62 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	b672      	cpsid	i
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	b662      	cpsie	i
 8007c5c:	61fb      	str	r3, [r7, #28]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c62:	235c      	movs	r3, #92	; 0x5c
 8007c64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b5c      	cmp	r3, #92	; 0x5c
 8007c6a:	d00c      	beq.n	8007c86 <xTaskCreateStatic+0x72>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	b672      	cpsid	i
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	b662      	cpsie	i
 8007c80:	61bb      	str	r3, [r7, #24]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d01e      	beq.n	8007ccc <xTaskCreateStatic+0xb8>
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01b      	beq.n	8007ccc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	9302      	str	r3, [sp, #8]
 8007cae:	f107 0314 	add.w	r3, r7, #20
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f850 	bl	8007d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cc6:	f000 f8df 	bl	8007e88 <prvAddNewTaskToReadyList>
 8007cca:	e001      	b.n	8007cd0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007cd0:	697b      	ldr	r3, [r7, #20]
	}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3728      	adds	r7, #40	; 0x28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b08c      	sub	sp, #48	; 0x30
 8007cde:	af04      	add	r7, sp, #16
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fc70 	bl	80095d4 <pvPortMalloc>
 8007cf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00e      	beq.n	8007d1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007cfc:	205c      	movs	r0, #92	; 0x5c
 8007cfe:	f001 fc69 	bl	80095d4 <pvPortMalloc>
 8007d02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8007d10:	e005      	b.n	8007d1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d12:	6978      	ldr	r0, [r7, #20]
 8007d14:	f001 fd28 	bl	8009768 <vPortFree>
 8007d18:	e001      	b.n	8007d1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d017      	beq.n	8007d54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d2c:	88fa      	ldrh	r2, [r7, #6]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9303      	str	r3, [sp, #12]
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f80e 	bl	8007d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d48:	69f8      	ldr	r0, [r7, #28]
 8007d4a:	f000 f89d 	bl	8007e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	e002      	b.n	8007d5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	21a5      	movs	r1, #165	; 0xa5
 8007d7e:	f00e ff8b 	bl	8016c98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007d8c:	440b      	add	r3, r1
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00c      	beq.n	8007dc0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	617b      	str	r3, [r7, #20]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01f      	beq.n	8007e06 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61fb      	str	r3, [r7, #28]
 8007dca:	e012      	b.n	8007df2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	7819      	ldrb	r1, [r3, #0]
 8007dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	3334      	adds	r3, #52	; 0x34
 8007ddc:	460a      	mov	r2, r1
 8007dde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4413      	add	r3, r2
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3301      	adds	r3, #1
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	2b0f      	cmp	r3, #15
 8007df6:	d9e9      	bls.n	8007dcc <prvInitialiseNewTask+0x68>
 8007df8:	e000      	b.n	8007dfc <prvInitialiseNewTask+0x98>
			{
				break;
 8007dfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e04:	e003      	b.n	8007e0e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	2b37      	cmp	r3, #55	; 0x37
 8007e12:	d901      	bls.n	8007e18 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e14:	2337      	movs	r3, #55	; 0x37
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	2200      	movs	r2, #0
 8007e28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff f952 	bl	80070d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	3318      	adds	r3, #24
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff f94d 	bl	80070d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	2200      	movs	r2, #0
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	68f9      	ldr	r1, [r7, #12]
 8007e66:	69b8      	ldr	r0, [r7, #24]
 8007e68:	f001 f97a 	bl	8009160 <pxPortInitialiseStack>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e7e:	bf00      	nop
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e90:	f001 fa74 	bl	800937c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e94:	4b2d      	ldr	r3, [pc, #180]	; (8007f4c <prvAddNewTaskToReadyList+0xc4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <prvAddNewTaskToReadyList+0xc4>)
 8007e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e9e:	4b2c      	ldr	r3, [pc, #176]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ea6:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007eac:	4b27      	ldr	r3, [pc, #156]	; (8007f4c <prvAddNewTaskToReadyList+0xc4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d110      	bne.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007eb4:	f000 fc54 	bl	8008760 <prvInitialiseTaskLists>
 8007eb8:	e00d      	b.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007eba:	4b26      	ldr	r3, [pc, #152]	; (8007f54 <prvAddNewTaskToReadyList+0xcc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ec2:	4b23      	ldr	r3, [pc, #140]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d802      	bhi.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ed6:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <prvAddNewTaskToReadyList+0xd0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <prvAddNewTaskToReadyList+0xd0>)
 8007ede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <prvAddNewTaskToReadyList+0xd0>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eec:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <prvAddNewTaskToReadyList+0xd4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d903      	bls.n	8007efc <prvAddNewTaskToReadyList+0x74>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <prvAddNewTaskToReadyList+0xd4>)
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <prvAddNewTaskToReadyList+0xd8>)
 8007f0a:	441a      	add	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7ff f8ed 	bl	80070f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f18:	f001 fa64 	bl	80093e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <prvAddNewTaskToReadyList+0xcc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00e      	beq.n	8007f42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d207      	bcs.n	8007f42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <prvAddNewTaskToReadyList+0xdc>)
 8007f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	2000a8b4 	.word	0x2000a8b4
 8007f50:	2000a3e0 	.word	0x2000a3e0
 8007f54:	2000a8c0 	.word	0x2000a8c0
 8007f58:	2000a8d0 	.word	0x2000a8d0
 8007f5c:	2000a8bc 	.word	0x2000a8bc
 8007f60:	2000a3e4 	.word	0x2000a3e4
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d019      	beq.n	8007fae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f7a:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <vTaskDelay+0x64>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00c      	beq.n	8007f9c <vTaskDelay+0x34>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	60bb      	str	r3, [r7, #8]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007f9c:	f000 f884 	bl	80080a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fd2c 	bl	8008a00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fa8:	f000 f88c 	bl	80080c4 <xTaskResumeAll>
 8007fac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d107      	bne.n	8007fc4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <vTaskDelay+0x68>)
 8007fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	2000a8dc 	.word	0x2000a8dc
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08a      	sub	sp, #40	; 0x28
 8007fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fe2:	463a      	mov	r2, r7
 8007fe4:	1d39      	adds	r1, r7, #4
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f820 	bl	8007030 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	9202      	str	r2, [sp, #8]
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2300      	movs	r3, #0
 8008000:	460a      	mov	r2, r1
 8008002:	4923      	ldr	r1, [pc, #140]	; (8008090 <vTaskStartScheduler+0xbc>)
 8008004:	4823      	ldr	r0, [pc, #140]	; (8008094 <vTaskStartScheduler+0xc0>)
 8008006:	f7ff fe05 	bl	8007c14 <xTaskCreateStatic>
 800800a:	4603      	mov	r3, r0
 800800c:	4a22      	ldr	r2, [pc, #136]	; (8008098 <vTaskStartScheduler+0xc4>)
 800800e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008010:	4b21      	ldr	r3, [pc, #132]	; (8008098 <vTaskStartScheduler+0xc4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008018:	2301      	movs	r3, #1
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e001      	b.n	8008022 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d102      	bne.n	800802e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008028:	f000 fd3e 	bl	8008aa8 <xTimerCreateTimerTask>
 800802c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d118      	bne.n	8008066 <vTaskStartScheduler+0x92>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	b672      	cpsid	i
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	b662      	cpsie	i
 8008048:	613b      	str	r3, [r7, #16]
}
 800804a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800804c:	4b13      	ldr	r3, [pc, #76]	; (800809c <vTaskStartScheduler+0xc8>)
 800804e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008052:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008054:	4b12      	ldr	r3, [pc, #72]	; (80080a0 <vTaskStartScheduler+0xcc>)
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800805a:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <vTaskStartScheduler+0xd0>)
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008060:	f001 f90e 	bl	8009280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008064:	e010      	b.n	8008088 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806c:	d10c      	bne.n	8008088 <vTaskStartScheduler+0xb4>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	b672      	cpsid	i
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	b662      	cpsie	i
 8008082:	60fb      	str	r3, [r7, #12]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vTaskStartScheduler+0xb2>
}
 8008088:	bf00      	nop
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	08017d78 	.word	0x08017d78
 8008094:	08008731 	.word	0x08008731
 8008098:	2000a8d8 	.word	0x2000a8d8
 800809c:	2000a8d4 	.word	0x2000a8d4
 80080a0:	2000a8c0 	.word	0x2000a8c0
 80080a4:	2000a8b8 	.word	0x2000a8b8

080080a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <vTaskSuspendAll+0x18>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a03      	ldr	r2, [pc, #12]	; (80080c0 <vTaskSuspendAll+0x18>)
 80080b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80080b6:	bf00      	nop
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	2000a8dc 	.word	0x2000a8dc

080080c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080d2:	4b43      	ldr	r3, [pc, #268]	; (80081e0 <xTaskResumeAll+0x11c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10c      	bne.n	80080f4 <xTaskResumeAll+0x30>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	b672      	cpsid	i
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	b662      	cpsie	i
 80080ee:	603b      	str	r3, [r7, #0]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080f4:	f001 f942 	bl	800937c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080f8:	4b39      	ldr	r3, [pc, #228]	; (80081e0 <xTaskResumeAll+0x11c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	4a38      	ldr	r2, [pc, #224]	; (80081e0 <xTaskResumeAll+0x11c>)
 8008100:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008102:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <xTaskResumeAll+0x11c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d162      	bne.n	80081d0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800810a:	4b36      	ldr	r3, [pc, #216]	; (80081e4 <xTaskResumeAll+0x120>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d05e      	beq.n	80081d0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008112:	e02f      	b.n	8008174 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008114:	4b34      	ldr	r3, [pc, #208]	; (80081e8 <xTaskResumeAll+0x124>)
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3318      	adds	r3, #24
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff f843 	bl	80071ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3304      	adds	r3, #4
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff f83e 	bl	80071ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008134:	4b2d      	ldr	r3, [pc, #180]	; (80081ec <xTaskResumeAll+0x128>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d903      	bls.n	8008144 <xTaskResumeAll+0x80>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4a2a      	ldr	r2, [pc, #168]	; (80081ec <xTaskResumeAll+0x128>)
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <xTaskResumeAll+0x12c>)
 8008152:	441a      	add	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3304      	adds	r3, #4
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f7fe ffc9 	bl	80070f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008164:	4b23      	ldr	r3, [pc, #140]	; (80081f4 <xTaskResumeAll+0x130>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	429a      	cmp	r2, r3
 800816c:	d302      	bcc.n	8008174 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800816e:	4b22      	ldr	r3, [pc, #136]	; (80081f8 <xTaskResumeAll+0x134>)
 8008170:	2201      	movs	r2, #1
 8008172:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008174:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <xTaskResumeAll+0x124>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1cb      	bne.n	8008114 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008182:	f000 fb8d 	bl	80088a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008186:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <xTaskResumeAll+0x138>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d010      	beq.n	80081b4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008192:	f000 f847 	bl	8008224 <xTaskIncrementTick>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <xTaskResumeAll+0x134>)
 800819e:	2201      	movs	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f1      	bne.n	8008192 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80081ae:	4b13      	ldr	r3, [pc, #76]	; (80081fc <xTaskResumeAll+0x138>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081b4:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <xTaskResumeAll+0x134>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081bc:	2301      	movs	r3, #1
 80081be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081c0:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <xTaskResumeAll+0x13c>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081d0:	f001 f908 	bl	80093e4 <vPortExitCritical>

	return xAlreadyYielded;
 80081d4:	68bb      	ldr	r3, [r7, #8]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	2000a8dc 	.word	0x2000a8dc
 80081e4:	2000a8b4 	.word	0x2000a8b4
 80081e8:	2000a874 	.word	0x2000a874
 80081ec:	2000a8bc 	.word	0x2000a8bc
 80081f0:	2000a3e4 	.word	0x2000a3e4
 80081f4:	2000a3e0 	.word	0x2000a3e0
 80081f8:	2000a8c8 	.word	0x2000a8c8
 80081fc:	2000a8c4 	.word	0x2000a8c4
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <xTaskGetTickCount+0x1c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008210:	687b      	ldr	r3, [r7, #4]
}
 8008212:	4618      	mov	r0, r3
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	2000a8b8 	.word	0x2000a8b8

08008224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800822e:	4b50      	ldr	r3, [pc, #320]	; (8008370 <xTaskIncrementTick+0x14c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 808b 	bne.w	800834e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008238:	4b4e      	ldr	r3, [pc, #312]	; (8008374 <xTaskIncrementTick+0x150>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008240:	4a4c      	ldr	r2, [pc, #304]	; (8008374 <xTaskIncrementTick+0x150>)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d122      	bne.n	8008292 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800824c:	4b4a      	ldr	r3, [pc, #296]	; (8008378 <xTaskIncrementTick+0x154>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00c      	beq.n	8008270 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xTaskIncrementTick+0x4a>
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <xTaskIncrementTick+0x154>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	4b41      	ldr	r3, [pc, #260]	; (800837c <xTaskIncrementTick+0x158>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a3f      	ldr	r2, [pc, #252]	; (8008378 <xTaskIncrementTick+0x154>)
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	4a3f      	ldr	r2, [pc, #252]	; (800837c <xTaskIncrementTick+0x158>)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <xTaskIncrementTick+0x15c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	4a3d      	ldr	r2, [pc, #244]	; (8008380 <xTaskIncrementTick+0x15c>)
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	f000 fb07 	bl	80088a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008292:	4b3c      	ldr	r3, [pc, #240]	; (8008384 <xTaskIncrementTick+0x160>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	429a      	cmp	r2, r3
 800829a:	d349      	bcc.n	8008330 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829c:	4b36      	ldr	r3, [pc, #216]	; (8008378 <xTaskIncrementTick+0x154>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a6:	4b37      	ldr	r3, [pc, #220]	; (8008384 <xTaskIncrementTick+0x160>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ac:	601a      	str	r2, [r3, #0]
					break;
 80082ae:	e03f      	b.n	8008330 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b0:	4b31      	ldr	r3, [pc, #196]	; (8008378 <xTaskIncrementTick+0x154>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d203      	bcs.n	80082d0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082c8:	4a2e      	ldr	r2, [pc, #184]	; (8008384 <xTaskIncrementTick+0x160>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082ce:	e02f      	b.n	8008330 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe ff69 	bl	80071ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	3318      	adds	r3, #24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe ff60 	bl	80071ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <xTaskIncrementTick+0x164>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d903      	bls.n	8008300 <xTaskIncrementTick+0xdc>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	4a22      	ldr	r2, [pc, #136]	; (8008388 <xTaskIncrementTick+0x164>)
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4a1f      	ldr	r2, [pc, #124]	; (800838c <xTaskIncrementTick+0x168>)
 800830e:	441a      	add	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f7fe feeb 	bl	80070f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <xTaskIncrementTick+0x16c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	429a      	cmp	r2, r3
 8008328:	d3b8      	bcc.n	800829c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800832a:	2301      	movs	r3, #1
 800832c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	e7b5      	b.n	800829c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008330:	4b17      	ldr	r3, [pc, #92]	; (8008390 <xTaskIncrementTick+0x16c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4915      	ldr	r1, [pc, #84]	; (800838c <xTaskIncrementTick+0x168>)
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d907      	bls.n	8008358 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	e004      	b.n	8008358 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800834e:	4b11      	ldr	r3, [pc, #68]	; (8008394 <xTaskIncrementTick+0x170>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	4a0f      	ldr	r2, [pc, #60]	; (8008394 <xTaskIncrementTick+0x170>)
 8008356:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <xTaskIncrementTick+0x174>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008364:	697b      	ldr	r3, [r7, #20]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	2000a8dc 	.word	0x2000a8dc
 8008374:	2000a8b8 	.word	0x2000a8b8
 8008378:	2000a86c 	.word	0x2000a86c
 800837c:	2000a870 	.word	0x2000a870
 8008380:	2000a8cc 	.word	0x2000a8cc
 8008384:	2000a8d4 	.word	0x2000a8d4
 8008388:	2000a8bc 	.word	0x2000a8bc
 800838c:	2000a3e4 	.word	0x2000a3e4
 8008390:	2000a3e0 	.word	0x2000a3e0
 8008394:	2000a8c4 	.word	0x2000a8c4
 8008398:	2000a8c8 	.word	0x2000a8c8

0800839c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083a2:	4b29      	ldr	r3, [pc, #164]	; (8008448 <vTaskSwitchContext+0xac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083aa:	4b28      	ldr	r3, [pc, #160]	; (800844c <vTaskSwitchContext+0xb0>)
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083b0:	e043      	b.n	800843a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80083b2:	4b26      	ldr	r3, [pc, #152]	; (800844c <vTaskSwitchContext+0xb0>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b8:	4b25      	ldr	r3, [pc, #148]	; (8008450 <vTaskSwitchContext+0xb4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e012      	b.n	80083e6 <vTaskSwitchContext+0x4a>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10c      	bne.n	80083e0 <vTaskSwitchContext+0x44>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	b672      	cpsid	i
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	b662      	cpsie	i
 80083da:	607b      	str	r3, [r7, #4]
}
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <vTaskSwitchContext+0x42>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	491b      	ldr	r1, [pc, #108]	; (8008454 <vTaskSwitchContext+0xb8>)
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	440b      	add	r3, r1
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0e2      	beq.n	80083c0 <vTaskSwitchContext+0x24>
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4a13      	ldr	r2, [pc, #76]	; (8008454 <vTaskSwitchContext+0xb8>)
 8008406:	4413      	add	r3, r2
 8008408:	60bb      	str	r3, [r7, #8]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	605a      	str	r2, [r3, #4]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	3308      	adds	r3, #8
 800841c:	429a      	cmp	r2, r3
 800841e:	d104      	bne.n	800842a <vTaskSwitchContext+0x8e>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	605a      	str	r2, [r3, #4]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	4a09      	ldr	r2, [pc, #36]	; (8008458 <vTaskSwitchContext+0xbc>)
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	4a06      	ldr	r2, [pc, #24]	; (8008450 <vTaskSwitchContext+0xb4>)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6013      	str	r3, [r2, #0]
}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	2000a8dc 	.word	0x2000a8dc
 800844c:	2000a8c8 	.word	0x2000a8c8
 8008450:	2000a8bc 	.word	0x2000a8bc
 8008454:	2000a3e4 	.word	0x2000a3e4
 8008458:	2000a3e0 	.word	0x2000a3e0

0800845c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10c      	bne.n	8008486 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	60fb      	str	r3, [r7, #12]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008486:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <vTaskPlaceOnEventList+0x48>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3318      	adds	r3, #24
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fe fe53 	bl	800713a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008494:	2101      	movs	r1, #1
 8008496:	6838      	ldr	r0, [r7, #0]
 8008498:	f000 fab2 	bl	8008a00 <prvAddCurrentTaskToDelayedList>
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	2000a3e0 	.word	0x2000a3e0

080084a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10c      	bne.n	80084d4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	b672      	cpsid	i
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	b662      	cpsie	i
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <vTaskPlaceOnEventListRestricted+0x58>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3318      	adds	r3, #24
 80084da:	4619      	mov	r1, r3
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7fe fe08 	bl	80070f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	68b8      	ldr	r0, [r7, #8]
 80084f2:	f000 fa85 	bl	8008a00 <prvAddCurrentTaskToDelayedList>
	}
 80084f6:	bf00      	nop
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	2000a3e0 	.word	0x2000a3e0

08008504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10c      	bne.n	8008534 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	b672      	cpsid	i
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	b662      	cpsie	i
 800852e:	60fb      	str	r3, [r7, #12]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	3318      	adds	r3, #24
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fe37 	bl	80071ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853e:	4b1e      	ldr	r3, [pc, #120]	; (80085b8 <xTaskRemoveFromEventList+0xb4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d11d      	bne.n	8008582 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	3304      	adds	r3, #4
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe fe2e 	bl	80071ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	4b19      	ldr	r3, [pc, #100]	; (80085bc <xTaskRemoveFromEventList+0xb8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d903      	bls.n	8008564 <xTaskRemoveFromEventList+0x60>
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a16      	ldr	r2, [pc, #88]	; (80085bc <xTaskRemoveFromEventList+0xb8>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <xTaskRemoveFromEventList+0xbc>)
 8008572:	441a      	add	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	3304      	adds	r3, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7fe fdb9 	bl	80070f2 <vListInsertEnd>
 8008580:	e005      	b.n	800858e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3318      	adds	r3, #24
 8008586:	4619      	mov	r1, r3
 8008588:	480e      	ldr	r0, [pc, #56]	; (80085c4 <xTaskRemoveFromEventList+0xc0>)
 800858a:	f7fe fdb2 	bl	80070f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008592:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <xTaskRemoveFromEventList+0xc4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	429a      	cmp	r2, r3
 800859a:	d905      	bls.n	80085a8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <xTaskRemoveFromEventList+0xc8>)
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e001      	b.n	80085ac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085ac:	697b      	ldr	r3, [r7, #20]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	2000a8dc 	.word	0x2000a8dc
 80085bc:	2000a8bc 	.word	0x2000a8bc
 80085c0:	2000a3e4 	.word	0x2000a3e4
 80085c4:	2000a874 	.word	0x2000a874
 80085c8:	2000a3e0 	.word	0x2000a3e0
 80085cc:	2000a8c8 	.word	0x2000a8c8

080085d0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10c      	bne.n	80085f8 <vTaskSetTimeOutState+0x28>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	b672      	cpsid	i
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	b662      	cpsie	i
 80085f2:	60fb      	str	r3, [r7, #12]
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 80085f8:	f000 fec0 	bl	800937c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085fc:	4b06      	ldr	r3, [pc, #24]	; (8008618 <vTaskSetTimeOutState+0x48>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <vTaskSetTimeOutState+0x4c>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800860c:	f000 feea 	bl	80093e4 <vPortExitCritical>
}
 8008610:	bf00      	nop
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	2000a8cc 	.word	0x2000a8cc
 800861c:	2000a8b8 	.word	0x2000a8b8

08008620 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <vTaskInternalSetTimeOutState+0x24>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008630:	4b05      	ldr	r3, [pc, #20]	; (8008648 <vTaskInternalSetTimeOutState+0x28>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	2000a8cc 	.word	0x2000a8cc
 8008648:	2000a8b8 	.word	0x2000a8b8

0800864c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10c      	bne.n	8008676 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	b672      	cpsid	i
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	b662      	cpsie	i
 8008670:	613b      	str	r3, [r7, #16]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10c      	bne.n	8008696 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	b672      	cpsid	i
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	b662      	cpsie	i
 8008690:	60fb      	str	r3, [r7, #12]
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008696:	f000 fe71 	bl	800937c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800869a:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <xTaskCheckForTimeOut+0xc4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b2:	d102      	bne.n	80086ba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	e023      	b.n	8008702 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <xTaskCheckForTimeOut+0xc8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d007      	beq.n	80086d6 <xTaskCheckForTimeOut+0x8a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d302      	bcc.n	80086d6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	61fb      	str	r3, [r7, #28]
 80086d4:	e015      	b.n	8008702 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d20b      	bcs.n	80086f8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ff97 	bl	8008620 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	e004      	b.n	8008702 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086fe:	2301      	movs	r3, #1
 8008700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008702:	f000 fe6f 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8008706:	69fb      	ldr	r3, [r7, #28]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	2000a8b8 	.word	0x2000a8b8
 8008714:	2000a8cc 	.word	0x2000a8cc

08008718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800871c:	4b03      	ldr	r3, [pc, #12]	; (800872c <vTaskMissedYield+0x14>)
 800871e:	2201      	movs	r2, #1
 8008720:	601a      	str	r2, [r3, #0]
}
 8008722:	bf00      	nop
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	2000a8c8 	.word	0x2000a8c8

08008730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008738:	f000 f852 	bl	80087e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <prvIdleTask+0x28>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d9f9      	bls.n	8008738 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <prvIdleTask+0x2c>)
 8008746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008754:	e7f0      	b.n	8008738 <prvIdleTask+0x8>
 8008756:	bf00      	nop
 8008758:	2000a3e4 	.word	0x2000a3e4
 800875c:	e000ed04 	.word	0xe000ed04

08008760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
 800876a:	e00c      	b.n	8008786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <prvInitialiseTaskLists+0x60>)
 8008778:	4413      	add	r3, r2
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fc8c 	bl	8007098 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3301      	adds	r3, #1
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b37      	cmp	r3, #55	; 0x37
 800878a:	d9ef      	bls.n	800876c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800878c:	480d      	ldr	r0, [pc, #52]	; (80087c4 <prvInitialiseTaskLists+0x64>)
 800878e:	f7fe fc83 	bl	8007098 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008792:	480d      	ldr	r0, [pc, #52]	; (80087c8 <prvInitialiseTaskLists+0x68>)
 8008794:	f7fe fc80 	bl	8007098 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008798:	480c      	ldr	r0, [pc, #48]	; (80087cc <prvInitialiseTaskLists+0x6c>)
 800879a:	f7fe fc7d 	bl	8007098 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800879e:	480c      	ldr	r0, [pc, #48]	; (80087d0 <prvInitialiseTaskLists+0x70>)
 80087a0:	f7fe fc7a 	bl	8007098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087a4:	480b      	ldr	r0, [pc, #44]	; (80087d4 <prvInitialiseTaskLists+0x74>)
 80087a6:	f7fe fc77 	bl	8007098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <prvInitialiseTaskLists+0x78>)
 80087ac:	4a05      	ldr	r2, [pc, #20]	; (80087c4 <prvInitialiseTaskLists+0x64>)
 80087ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087b0:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <prvInitialiseTaskLists+0x7c>)
 80087b2:	4a05      	ldr	r2, [pc, #20]	; (80087c8 <prvInitialiseTaskLists+0x68>)
 80087b4:	601a      	str	r2, [r3, #0]
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	2000a3e4 	.word	0x2000a3e4
 80087c4:	2000a844 	.word	0x2000a844
 80087c8:	2000a858 	.word	0x2000a858
 80087cc:	2000a874 	.word	0x2000a874
 80087d0:	2000a888 	.word	0x2000a888
 80087d4:	2000a8a0 	.word	0x2000a8a0
 80087d8:	2000a86c 	.word	0x2000a86c
 80087dc:	2000a870 	.word	0x2000a870

080087e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087e6:	e019      	b.n	800881c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087e8:	f000 fdc8 	bl	800937c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ec:	4b10      	ldr	r3, [pc, #64]	; (8008830 <prvCheckTasksWaitingTermination+0x50>)
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fcd7 	bl	80071ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087fe:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <prvCheckTasksWaitingTermination+0x54>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3b01      	subs	r3, #1
 8008804:	4a0b      	ldr	r2, [pc, #44]	; (8008834 <prvCheckTasksWaitingTermination+0x54>)
 8008806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008808:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <prvCheckTasksWaitingTermination+0x58>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3b01      	subs	r3, #1
 800880e:	4a0a      	ldr	r2, [pc, #40]	; (8008838 <prvCheckTasksWaitingTermination+0x58>)
 8008810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008812:	f000 fde7 	bl	80093e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f810 	bl	800883c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800881c:	4b06      	ldr	r3, [pc, #24]	; (8008838 <prvCheckTasksWaitingTermination+0x58>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e1      	bne.n	80087e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	2000a888 	.word	0x2000a888
 8008834:	2000a8b4 	.word	0x2000a8b4
 8008838:	2000a89c 	.word	0x2000a89c

0800883c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800884a:	2b00      	cmp	r3, #0
 800884c:	d108      	bne.n	8008860 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	4618      	mov	r0, r3
 8008854:	f000 ff88 	bl	8009768 <vPortFree>
				vPortFree( pxTCB );
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 ff85 	bl	8009768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800885e:	e01a      	b.n	8008896 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008866:	2b01      	cmp	r3, #1
 8008868:	d103      	bne.n	8008872 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 ff7c 	bl	8009768 <vPortFree>
	}
 8008870:	e011      	b.n	8008896 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008878:	2b02      	cmp	r3, #2
 800887a:	d00c      	beq.n	8008896 <prvDeleteTCB+0x5a>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	b672      	cpsid	i
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	b662      	cpsie	i
 8008890:	60fb      	str	r3, [r7, #12]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <prvDeleteTCB+0x58>
	}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <prvResetNextTaskUnblockTime+0x38>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <prvResetNextTaskUnblockTime+0x3c>)
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088b8:	e008      	b.n	80088cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ba:	4b07      	ldr	r3, [pc, #28]	; (80088d8 <prvResetNextTaskUnblockTime+0x38>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4a04      	ldr	r2, [pc, #16]	; (80088dc <prvResetNextTaskUnblockTime+0x3c>)
 80088ca:	6013      	str	r3, [r2, #0]
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	2000a86c 	.word	0x2000a86c
 80088dc:	2000a8d4 	.word	0x2000a8d4

080088e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <xTaskGetSchedulerState+0x34>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088ee:	2301      	movs	r3, #1
 80088f0:	607b      	str	r3, [r7, #4]
 80088f2:	e008      	b.n	8008906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f4:	4b08      	ldr	r3, [pc, #32]	; (8008918 <xTaskGetSchedulerState+0x38>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088fc:	2302      	movs	r3, #2
 80088fe:	607b      	str	r3, [r7, #4]
 8008900:	e001      	b.n	8008906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008902:	2300      	movs	r3, #0
 8008904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008906:	687b      	ldr	r3, [r7, #4]
	}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	2000a8c0 	.word	0x2000a8c0
 8008918:	2000a8dc 	.word	0x2000a8dc

0800891c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d05a      	beq.n	80089e8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008932:	4b30      	ldr	r3, [pc, #192]	; (80089f4 <xTaskPriorityDisinherit+0xd8>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	429a      	cmp	r2, r3
 800893a:	d00c      	beq.n	8008956 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	b672      	cpsid	i
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	b662      	cpsie	i
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10c      	bne.n	8008978 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	b672      	cpsid	i
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	b662      	cpsie	i
 8008972:	60bb      	str	r3, [r7, #8]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897c:	1e5a      	subs	r2, r3, #1
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	429a      	cmp	r2, r3
 800898c:	d02c      	beq.n	80089e8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008992:	2b00      	cmp	r3, #0
 8008994:	d128      	bne.n	80089e8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	3304      	adds	r3, #4
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fc06 	bl	80071ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b0f      	ldr	r3, [pc, #60]	; (80089f8 <xTaskPriorityDisinherit+0xdc>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d903      	bls.n	80089c8 <xTaskPriorityDisinherit+0xac>
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4a0c      	ldr	r2, [pc, #48]	; (80089f8 <xTaskPriorityDisinherit+0xdc>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4a09      	ldr	r2, [pc, #36]	; (80089fc <xTaskPriorityDisinherit+0xe0>)
 80089d6:	441a      	add	r2, r3
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe fb87 	bl	80070f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089e8:	697b      	ldr	r3, [r7, #20]
	}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	2000a3e0 	.word	0x2000a3e0
 80089f8:	2000a8bc 	.word	0x2000a8bc
 80089fc:	2000a3e4 	.word	0x2000a3e4

08008a00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a0a:	4b21      	ldr	r3, [pc, #132]	; (8008a90 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a10:	4b20      	ldr	r3, [pc, #128]	; (8008a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fbc8 	bl	80071ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a22:	d10a      	bne.n	8008a3a <prvAddCurrentTaskToDelayedList+0x3a>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4819      	ldr	r0, [pc, #100]	; (8008a98 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a34:	f7fe fb5d 	bl	80070f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a38:	e026      	b.n	8008a88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4413      	add	r3, r2
 8008a40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a42:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d209      	bcs.n	8008a66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a52:	4b12      	ldr	r3, [pc, #72]	; (8008a9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4b0f      	ldr	r3, [pc, #60]	; (8008a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	f7fe fb6b 	bl	800713a <vListInsert>
}
 8008a64:	e010      	b.n	8008a88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a66:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f7fe fb61 	bl	800713a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a78:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d202      	bcs.n	8008a88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a82:	4a08      	ldr	r2, [pc, #32]	; (8008aa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6013      	str	r3, [r2, #0]
}
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	2000a8b8 	.word	0x2000a8b8
 8008a94:	2000a3e0 	.word	0x2000a3e0
 8008a98:	2000a8a0 	.word	0x2000a8a0
 8008a9c:	2000a870 	.word	0x2000a870
 8008aa0:	2000a86c 	.word	0x2000a86c
 8008aa4:	2000a8d4 	.word	0x2000a8d4

08008aa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	; 0x28
 8008aac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ab2:	f000 fb15 	bl	80090e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ab6:	4b1d      	ldr	r3, [pc, #116]	; (8008b2c <xTimerCreateTimerTask+0x84>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d021      	beq.n	8008b02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ac6:	1d3a      	adds	r2, r7, #4
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	f107 030c 	add.w	r3, r7, #12
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe fac7 	bl	8007064 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	9202      	str	r2, [sp, #8]
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	460a      	mov	r2, r1
 8008ae8:	4911      	ldr	r1, [pc, #68]	; (8008b30 <xTimerCreateTimerTask+0x88>)
 8008aea:	4812      	ldr	r0, [pc, #72]	; (8008b34 <xTimerCreateTimerTask+0x8c>)
 8008aec:	f7ff f892 	bl	8007c14 <xTaskCreateStatic>
 8008af0:	4603      	mov	r3, r0
 8008af2:	4a11      	ldr	r2, [pc, #68]	; (8008b38 <xTimerCreateTimerTask+0x90>)
 8008af4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008af6:	4b10      	ldr	r3, [pc, #64]	; (8008b38 <xTimerCreateTimerTask+0x90>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008afe:	2301      	movs	r3, #1
 8008b00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10c      	bne.n	8008b22 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	b672      	cpsid	i
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	b662      	cpsie	i
 8008b1c:	613b      	str	r3, [r7, #16]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008b22:	697b      	ldr	r3, [r7, #20]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	2000a910 	.word	0x2000a910
 8008b30:	08017d80 	.word	0x08017d80
 8008b34:	08008c79 	.word	0x08008c79
 8008b38:	2000a914 	.word	0x2000a914

08008b3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	; 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10c      	bne.n	8008b6e <xTimerGenericCommand+0x32>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	b672      	cpsid	i
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	b662      	cpsie	i
 8008b68:	623b      	str	r3, [r7, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	; (8008bd8 <xTimerGenericCommand+0x9c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d02a      	beq.n	8008bcc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	dc18      	bgt.n	8008bba <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b88:	f7ff feaa 	bl	80088e0 <xTaskGetSchedulerState>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d109      	bne.n	8008ba6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b92:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <xTimerGenericCommand+0x9c>)
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	f107 0110 	add.w	r1, r7, #16
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9e:	f7fe fc3f 	bl	8007420 <xQueueGenericSend>
 8008ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ba4:	e012      	b.n	8008bcc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <xTimerGenericCommand+0x9c>)
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f107 0110 	add.w	r1, r7, #16
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f7fe fc35 	bl	8007420 <xQueueGenericSend>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24
 8008bb8:	e008      	b.n	8008bcc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <xTimerGenericCommand+0x9c>)
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	f107 0110 	add.w	r1, r7, #16
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	f7fe fd31 	bl	800762c <xQueueGenericSendFromISR>
 8008bca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	2000a910 	.word	0x2000a910

08008bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be6:	4b23      	ldr	r3, [pc, #140]	; (8008c74 <prvProcessExpiredTimer+0x98>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe fad9 	bl	80071ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d024      	beq.n	8008c52 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	699a      	ldr	r2, [r3, #24]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	18d1      	adds	r1, r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	6978      	ldr	r0, [r7, #20]
 8008c16:	f000 f8d3 	bl	8008dc0 <prvInsertTimerInActiveList>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d021      	beq.n	8008c64 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c20:	2300      	movs	r3, #0
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6978      	ldr	r0, [r7, #20]
 8008c2c:	f7ff ff86 	bl	8008b3c <xTimerGenericCommand>
 8008c30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d115      	bne.n	8008c64 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	b672      	cpsid	i
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	b662      	cpsie	i
 8008c4c:	60fb      	str	r3, [r7, #12]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	4798      	blx	r3
}
 8008c6c:	bf00      	nop
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	2000a908 	.word	0x2000a908

08008c78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f857 	bl	8008d38 <prvGetNextExpireTime>
 8008c8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f803 	bl	8008c9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c96:	f000 f8d5 	bl	8008e44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c9a:	e7f1      	b.n	8008c80 <prvTimerTask+0x8>

08008c9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ca6:	f7ff f9ff 	bl	80080a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f866 	bl	8008d80 <prvSampleTimeNow>
 8008cb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d130      	bne.n	8008d1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <prvProcessTimerOrBlockTask+0x3c>
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d806      	bhi.n	8008cd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008cca:	f7ff f9fb 	bl	80080c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff ff83 	bl	8008bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cd6:	e024      	b.n	8008d22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d008      	beq.n	8008cf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cde:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <prvProcessTimerOrBlockTask+0x90>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <prvProcessTimerOrBlockTask+0x50>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <prvProcessTimerOrBlockTask+0x52>
 8008cec:	2300      	movs	r3, #0
 8008cee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <prvProcessTimerOrBlockTask+0x94>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f7fe ff55 	bl	8007bac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d02:	f7ff f9df 	bl	80080c4 <xTaskResumeAll>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <prvProcessTimerOrBlockTask+0x98>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
}
 8008d1c:	e001      	b.n	8008d22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d1e:	f7ff f9d1 	bl	80080c4 <xTaskResumeAll>
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	2000a90c 	.word	0x2000a90c
 8008d30:	2000a910 	.word	0x2000a910
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d40:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <prvGetNextExpireTime+0x44>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <prvGetNextExpireTime+0x16>
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	e000      	b.n	8008d50 <prvGetNextExpireTime+0x18>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d105      	bne.n	8008d68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <prvGetNextExpireTime+0x44>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	e001      	b.n	8008d6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	2000a908 	.word	0x2000a908

08008d80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d88:	f7ff fa3c 	bl	8008204 <xTaskGetTickCount>
 8008d8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d8e:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <prvSampleTimeNow+0x3c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d205      	bcs.n	8008da4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d98:	f000 f93c 	bl	8009014 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e002      	b.n	8008daa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008daa:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <prvSampleTimeNow+0x3c>)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008db0:	68fb      	ldr	r3, [r7, #12]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	2000a918 	.word	0x2000a918

08008dc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d812      	bhi.n	8008e0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d302      	bcc.n	8008dfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008df4:	2301      	movs	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e01b      	b.n	8008e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008dfa:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <prvInsertTimerInActiveList+0x7c>)
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4619      	mov	r1, r3
 8008e04:	4610      	mov	r0, r2
 8008e06:	f7fe f998 	bl	800713a <vListInsert>
 8008e0a:	e012      	b.n	8008e32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d206      	bcs.n	8008e22 <prvInsertTimerInActiveList+0x62>
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d302      	bcc.n	8008e22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	e007      	b.n	8008e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e22:	4b07      	ldr	r3, [pc, #28]	; (8008e40 <prvInsertTimerInActiveList+0x80>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	f7fe f984 	bl	800713a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e32:	697b      	ldr	r3, [r7, #20]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	2000a90c 	.word	0x2000a90c
 8008e40:	2000a908 	.word	0x2000a908

08008e44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08e      	sub	sp, #56	; 0x38
 8008e48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e4a:	e0d0      	b.n	8008fee <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	da1a      	bge.n	8008e88 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e52:	1d3b      	adds	r3, r7, #4
 8008e54:	3304      	adds	r3, #4
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10c      	bne.n	8008e78 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	b672      	cpsid	i
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	b662      	cpsie	i
 8008e72:	61fb      	str	r3, [r7, #28]
}
 8008e74:	bf00      	nop
 8008e76:	e7fe      	b.n	8008e76 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7e:	6850      	ldr	r0, [r2, #4]
 8008e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e82:	6892      	ldr	r2, [r2, #8]
 8008e84:	4611      	mov	r1, r2
 8008e86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f2c0 80af 	blt.w	8008fee <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe f983 	bl	80071ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7ff ff69 	bl	8008d80 <prvSampleTimeNow>
 8008eae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b09      	cmp	r3, #9
 8008eb4:	f200 809a 	bhi.w	8008fec <prvProcessReceivedCommands+0x1a8>
 8008eb8:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <prvProcessReceivedCommands+0x7c>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	08008ee9 	.word	0x08008ee9
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008ee9 	.word	0x08008ee9
 8008ecc:	08008f61 	.word	0x08008f61
 8008ed0:	08008f75 	.word	0x08008f75
 8008ed4:	08008fc3 	.word	0x08008fc3
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008ee9 	.word	0x08008ee9
 8008ee0:	08008f61 	.word	0x08008f61
 8008ee4:	08008f75 	.word	0x08008f75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	18d1      	adds	r1, r2, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f08:	f7ff ff5a 	bl	8008dc0 <prvInsertTimerInActiveList>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d06d      	beq.n	8008fee <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d062      	beq.n	8008fee <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	441a      	add	r2, r3
 8008f30:	2300      	movs	r3, #0
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	2300      	movs	r3, #0
 8008f36:	2100      	movs	r1, #0
 8008f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f3a:	f7ff fdff 	bl	8008b3c <xTimerGenericCommand>
 8008f3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d153      	bne.n	8008fee <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	b672      	cpsid	i
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	b662      	cpsie	i
 8008f5a:	61bb      	str	r3, [r7, #24]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008f72:	e03c      	b.n	8008fee <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10c      	bne.n	8008fae <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	b672      	cpsid	i
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	b662      	cpsie	i
 8008fa8:	617b      	str	r3, [r7, #20]
}
 8008faa:	bf00      	nop
 8008fac:	e7fe      	b.n	8008fac <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	18d1      	adds	r1, r2, r3
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fbc:	f7ff ff00 	bl	8008dc0 <prvInsertTimerInActiveList>
					break;
 8008fc0:	e015      	b.n	8008fee <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd2:	f000 fbc9 	bl	8009768 <vPortFree>
 8008fd6:	e00a      	b.n	8008fee <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fde:	f023 0301 	bic.w	r3, r3, #1
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fea:	e000      	b.n	8008fee <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008fec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fee:	4b08      	ldr	r3, [pc, #32]	; (8009010 <prvProcessReceivedCommands+0x1cc>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	1d39      	adds	r1, r7, #4
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fbb8 	bl	800776c <xQueueReceive>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f47f af24 	bne.w	8008e4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	3730      	adds	r7, #48	; 0x30
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	2000a910 	.word	0x2000a910

08009014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b088      	sub	sp, #32
 8009018:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800901a:	e04a      	b.n	80090b2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800901c:	4b2e      	ldr	r3, [pc, #184]	; (80090d8 <prvSwitchTimerLists+0xc4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009026:	4b2c      	ldr	r3, [pc, #176]	; (80090d8 <prvSwitchTimerLists+0xc4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3304      	adds	r3, #4
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe f8b9 	bl	80071ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d030      	beq.n	80090b2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	429a      	cmp	r2, r3
 8009060:	d90e      	bls.n	8009080 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800906e:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <prvSwitchTimerLists+0xc4>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f7fe f85e 	bl	800713a <vListInsert>
 800907e:	e018      	b.n	80090b2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009080:	2300      	movs	r3, #0
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	2300      	movs	r3, #0
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	2100      	movs	r1, #0
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff fd56 	bl	8008b3c <xTimerGenericCommand>
 8009090:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10c      	bne.n	80090b2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	b672      	cpsid	i
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	b662      	cpsie	i
 80090ac:	603b      	str	r3, [r7, #0]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <prvSwitchTimerLists+0xc4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1af      	bne.n	800901c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <prvSwitchTimerLists+0xc4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80090c2:	4b06      	ldr	r3, [pc, #24]	; (80090dc <prvSwitchTimerLists+0xc8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a04      	ldr	r2, [pc, #16]	; (80090d8 <prvSwitchTimerLists+0xc4>)
 80090c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090ca:	4a04      	ldr	r2, [pc, #16]	; (80090dc <prvSwitchTimerLists+0xc8>)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	6013      	str	r3, [r2, #0]
}
 80090d0:	bf00      	nop
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	2000a908 	.word	0x2000a908
 80090dc:	2000a90c 	.word	0x2000a90c

080090e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090e6:	f000 f949 	bl	800937c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090ea:	4b15      	ldr	r3, [pc, #84]	; (8009140 <prvCheckForValidListAndQueue+0x60>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d120      	bne.n	8009134 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80090f2:	4814      	ldr	r0, [pc, #80]	; (8009144 <prvCheckForValidListAndQueue+0x64>)
 80090f4:	f7fd ffd0 	bl	8007098 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090f8:	4813      	ldr	r0, [pc, #76]	; (8009148 <prvCheckForValidListAndQueue+0x68>)
 80090fa:	f7fd ffcd 	bl	8007098 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090fe:	4b13      	ldr	r3, [pc, #76]	; (800914c <prvCheckForValidListAndQueue+0x6c>)
 8009100:	4a10      	ldr	r2, [pc, #64]	; (8009144 <prvCheckForValidListAndQueue+0x64>)
 8009102:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009104:	4b12      	ldr	r3, [pc, #72]	; (8009150 <prvCheckForValidListAndQueue+0x70>)
 8009106:	4a10      	ldr	r2, [pc, #64]	; (8009148 <prvCheckForValidListAndQueue+0x68>)
 8009108:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800910a:	2300      	movs	r3, #0
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4b11      	ldr	r3, [pc, #68]	; (8009154 <prvCheckForValidListAndQueue+0x74>)
 8009110:	4a11      	ldr	r2, [pc, #68]	; (8009158 <prvCheckForValidListAndQueue+0x78>)
 8009112:	2110      	movs	r1, #16
 8009114:	200a      	movs	r0, #10
 8009116:	f7fe f8dd 	bl	80072d4 <xQueueGenericCreateStatic>
 800911a:	4603      	mov	r3, r0
 800911c:	4a08      	ldr	r2, [pc, #32]	; (8009140 <prvCheckForValidListAndQueue+0x60>)
 800911e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <prvCheckForValidListAndQueue+0x60>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <prvCheckForValidListAndQueue+0x60>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	490b      	ldr	r1, [pc, #44]	; (800915c <prvCheckForValidListAndQueue+0x7c>)
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fd12 	bl	8007b58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009134:	f000 f956 	bl	80093e4 <vPortExitCritical>
}
 8009138:	bf00      	nop
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	2000a910 	.word	0x2000a910
 8009144:	2000a8e0 	.word	0x2000a8e0
 8009148:	2000a8f4 	.word	0x2000a8f4
 800914c:	2000a908 	.word	0x2000a908
 8009150:	2000a90c 	.word	0x2000a90c
 8009154:	2000a9bc 	.word	0x2000a9bc
 8009158:	2000a91c 	.word	0x2000a91c
 800915c:	08017d88 	.word	0x08017d88

08009160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3b04      	subs	r3, #4
 8009170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3b04      	subs	r3, #4
 800917e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f023 0201 	bic.w	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3b04      	subs	r3, #4
 800918e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009190:	4a0c      	ldr	r2, [pc, #48]	; (80091c4 <pxPortInitialiseStack+0x64>)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3b14      	subs	r3, #20
 800919a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3b04      	subs	r3, #4
 80091a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f06f 0202 	mvn.w	r2, #2
 80091ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3b20      	subs	r3, #32
 80091b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091b6:	68fb      	ldr	r3, [r7, #12]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	080091c9 	.word	0x080091c9

080091c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091d2:	4b14      	ldr	r3, [pc, #80]	; (8009224 <prvTaskExitError+0x5c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091da:	d00c      	beq.n	80091f6 <prvTaskExitError+0x2e>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	b672      	cpsid	i
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	b662      	cpsie	i
 80091f0:	60fb      	str	r3, [r7, #12]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <prvTaskExitError+0x2c>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	b672      	cpsid	i
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	b662      	cpsie	i
 800920a:	60bb      	str	r3, [r7, #8]
}
 800920c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800920e:	bf00      	nop
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0fc      	beq.n	8009210 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	20000010 	.word	0x20000010
	...

08009230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009230:	4b07      	ldr	r3, [pc, #28]	; (8009250 <pxCurrentTCBConst2>)
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	6808      	ldr	r0, [r1, #0]
 8009236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923a:	f380 8809 	msr	PSP, r0
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f04f 0000 	mov.w	r0, #0
 8009246:	f380 8811 	msr	BASEPRI, r0
 800924a:	4770      	bx	lr
 800924c:	f3af 8000 	nop.w

08009250 <pxCurrentTCBConst2>:
 8009250:	2000a3e0 	.word	0x2000a3e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop

08009258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009258:	4808      	ldr	r0, [pc, #32]	; (800927c <prvPortStartFirstTask+0x24>)
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	6800      	ldr	r0, [r0, #0]
 800925e:	f380 8808 	msr	MSP, r0
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8814 	msr	CONTROL, r0
 800926a:	b662      	cpsie	i
 800926c:	b661      	cpsie	f
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	df00      	svc	0
 8009278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800927a:	bf00      	nop
 800927c:	e000ed08 	.word	0xe000ed08

08009280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009286:	4b37      	ldr	r3, [pc, #220]	; (8009364 <xPortStartScheduler+0xe4>)
 8009288:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	22ff      	movs	r2, #255	; 0xff
 8009296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	4b2f      	ldr	r3, [pc, #188]	; (8009368 <xPortStartScheduler+0xe8>)
 80092ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ae:	4b2f      	ldr	r3, [pc, #188]	; (800936c <xPortStartScheduler+0xec>)
 80092b0:	2207      	movs	r2, #7
 80092b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092b4:	e009      	b.n	80092ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80092b6:	4b2d      	ldr	r3, [pc, #180]	; (800936c <xPortStartScheduler+0xec>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a2b      	ldr	r2, [pc, #172]	; (800936c <xPortStartScheduler+0xec>)
 80092be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b80      	cmp	r3, #128	; 0x80
 80092d4:	d0ef      	beq.n	80092b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092d6:	4b25      	ldr	r3, [pc, #148]	; (800936c <xPortStartScheduler+0xec>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1c3 0307 	rsb	r3, r3, #7
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d00c      	beq.n	80092fc <xPortStartScheduler+0x7c>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	b672      	cpsid	i
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	b662      	cpsie	i
 80092f6:	60bb      	str	r3, [r7, #8]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092fc:	4b1b      	ldr	r3, [pc, #108]	; (800936c <xPortStartScheduler+0xec>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	4a1a      	ldr	r2, [pc, #104]	; (800936c <xPortStartScheduler+0xec>)
 8009304:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009306:	4b19      	ldr	r3, [pc, #100]	; (800936c <xPortStartScheduler+0xec>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800930e:	4a17      	ldr	r2, [pc, #92]	; (800936c <xPortStartScheduler+0xec>)
 8009310:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	b2da      	uxtb	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800931a:	4b15      	ldr	r3, [pc, #84]	; (8009370 <xPortStartScheduler+0xf0>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a14      	ldr	r2, [pc, #80]	; (8009370 <xPortStartScheduler+0xf0>)
 8009320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009324:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009326:	4b12      	ldr	r3, [pc, #72]	; (8009370 <xPortStartScheduler+0xf0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a11      	ldr	r2, [pc, #68]	; (8009370 <xPortStartScheduler+0xf0>)
 800932c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009330:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009332:	f000 f8dd 	bl	80094f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009336:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <xPortStartScheduler+0xf4>)
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800933c:	f000 f8fc 	bl	8009538 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009340:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <xPortStartScheduler+0xf8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a0c      	ldr	r2, [pc, #48]	; (8009378 <xPortStartScheduler+0xf8>)
 8009346:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800934a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800934c:	f7ff ff84 	bl	8009258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009350:	f7ff f824 	bl	800839c <vTaskSwitchContext>
	prvTaskExitError();
 8009354:	f7ff ff38 	bl	80091c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	e000e400 	.word	0xe000e400
 8009368:	2000aa0c 	.word	0x2000aa0c
 800936c:	2000aa10 	.word	0x2000aa10
 8009370:	e000ed20 	.word	0xe000ed20
 8009374:	20000010 	.word	0x20000010
 8009378:	e000ef34 	.word	0xe000ef34

0800937c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	b672      	cpsid	i
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	b662      	cpsie	i
 8009396:	607b      	str	r3, [r7, #4]
}
 8009398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800939a:	4b10      	ldr	r3, [pc, #64]	; (80093dc <vPortEnterCritical+0x60>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3301      	adds	r3, #1
 80093a0:	4a0e      	ldr	r2, [pc, #56]	; (80093dc <vPortEnterCritical+0x60>)
 80093a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093a4:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <vPortEnterCritical+0x60>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d111      	bne.n	80093d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093ac:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <vPortEnterCritical+0x64>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00c      	beq.n	80093d0 <vPortEnterCritical+0x54>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	b672      	cpsid	i
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	b662      	cpsie	i
 80093ca:	603b      	str	r3, [r7, #0]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <vPortEnterCritical+0x52>
	}
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	20000010 	.word	0x20000010
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093ea:	4b13      	ldr	r3, [pc, #76]	; (8009438 <vPortExitCritical+0x54>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10c      	bne.n	800940c <vPortExitCritical+0x28>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	b672      	cpsid	i
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	b662      	cpsie	i
 8009406:	607b      	str	r3, [r7, #4]
}
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800940c:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <vPortExitCritical+0x54>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3b01      	subs	r3, #1
 8009412:	4a09      	ldr	r2, [pc, #36]	; (8009438 <vPortExitCritical+0x54>)
 8009414:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009416:	4b08      	ldr	r3, [pc, #32]	; (8009438 <vPortExitCritical+0x54>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d105      	bne.n	800942a <vPortExitCritical+0x46>
 800941e:	2300      	movs	r3, #0
 8009420:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	f383 8811 	msr	BASEPRI, r3
}
 8009428:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000010 	.word	0x20000010
 800943c:	00000000 	.word	0x00000000

08009440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009440:	f3ef 8009 	mrs	r0, PSP
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <pxCurrentTCBConst>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f01e 0f10 	tst.w	lr, #16
 8009450:	bf08      	it	eq
 8009452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945a:	6010      	str	r0, [r2, #0]
 800945c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009464:	b672      	cpsid	i
 8009466:	f380 8811 	msr	BASEPRI, r0
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	b662      	cpsie	i
 8009474:	f7fe ff92 	bl	800839c <vTaskSwitchContext>
 8009478:	f04f 0000 	mov.w	r0, #0
 800947c:	f380 8811 	msr	BASEPRI, r0
 8009480:	bc09      	pop	{r0, r3}
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	6808      	ldr	r0, [r1, #0]
 8009486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948a:	f01e 0f10 	tst.w	lr, #16
 800948e:	bf08      	it	eq
 8009490:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009494:	f380 8809 	msr	PSP, r0
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop

080094a0 <pxCurrentTCBConst>:
 80094a0:	2000a3e0 	.word	0x2000a3e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	b672      	cpsid	i
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	b662      	cpsie	i
 80094c2:	607b      	str	r3, [r7, #4]
}
 80094c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094c6:	f7fe fead 	bl	8008224 <xTaskIncrementTick>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094d0:	4b06      	ldr	r3, [pc, #24]	; (80094ec <SysTick_Handler+0x44>)
 80094d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	2300      	movs	r3, #0
 80094da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f383 8811 	msr	BASEPRI, r3
}
 80094e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094f4:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <vPortSetupTimerInterrupt+0x34>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094fa:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <vPortSetupTimerInterrupt+0x38>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <vPortSetupTimerInterrupt+0x3c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <vPortSetupTimerInterrupt+0x40>)
 8009506:	fba2 2303 	umull	r2, r3, r2, r3
 800950a:	099b      	lsrs	r3, r3, #6
 800950c:	4a09      	ldr	r2, [pc, #36]	; (8009534 <vPortSetupTimerInterrupt+0x44>)
 800950e:	3b01      	subs	r3, #1
 8009510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009512:	4b04      	ldr	r3, [pc, #16]	; (8009524 <vPortSetupTimerInterrupt+0x34>)
 8009514:	2207      	movs	r2, #7
 8009516:	601a      	str	r2, [r3, #0]
}
 8009518:	bf00      	nop
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	e000e010 	.word	0xe000e010
 8009528:	e000e018 	.word	0xe000e018
 800952c:	20000004 	.word	0x20000004
 8009530:	10624dd3 	.word	0x10624dd3
 8009534:	e000e014 	.word	0xe000e014

08009538 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009538:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009548 <vPortEnableVFP+0x10>
 800953c:	6801      	ldr	r1, [r0, #0]
 800953e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009542:	6001      	str	r1, [r0, #0]
 8009544:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009546:	bf00      	nop
 8009548:	e000ed88 	.word	0xe000ed88

0800954c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009552:	f3ef 8305 	mrs	r3, IPSR
 8009556:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b0f      	cmp	r3, #15
 800955c:	d916      	bls.n	800958c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800955e:	4a19      	ldr	r2, [pc, #100]	; (80095c4 <vPortValidateInterruptPriority+0x78>)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009568:	4b17      	ldr	r3, [pc, #92]	; (80095c8 <vPortValidateInterruptPriority+0x7c>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	7afa      	ldrb	r2, [r7, #11]
 800956e:	429a      	cmp	r2, r3
 8009570:	d20c      	bcs.n	800958c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	b672      	cpsid	i
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	b662      	cpsie	i
 8009586:	607b      	str	r3, [r7, #4]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800958c:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <vPortValidateInterruptPriority+0x80>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <vPortValidateInterruptPriority+0x84>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d90c      	bls.n	80095b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	b672      	cpsid	i
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	b662      	cpsie	i
 80095b0:	603b      	str	r3, [r7, #0]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <vPortValidateInterruptPriority+0x68>
	}
 80095b6:	bf00      	nop
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	e000e3f0 	.word	0xe000e3f0
 80095c8:	2000aa0c 	.word	0x2000aa0c
 80095cc:	e000ed0c 	.word	0xe000ed0c
 80095d0:	2000aa10 	.word	0x2000aa10

080095d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	; 0x28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095e0:	f7fe fd62 	bl	80080a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095e4:	4b5b      	ldr	r3, [pc, #364]	; (8009754 <pvPortMalloc+0x180>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095ec:	f000 f91a 	bl	8009824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095f0:	4b59      	ldr	r3, [pc, #356]	; (8009758 <pvPortMalloc+0x184>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4013      	ands	r3, r2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f040 8092 	bne.w	8009722 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d01f      	beq.n	8009644 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009604:	2208      	movs	r2, #8
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4413      	add	r3, r2
 800960a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	2b00      	cmp	r3, #0
 8009614:	d016      	beq.n	8009644 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f023 0307 	bic.w	r3, r3, #7
 800961c:	3308      	adds	r3, #8
 800961e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00c      	beq.n	8009644 <pvPortMalloc+0x70>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962e:	b672      	cpsid	i
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	b662      	cpsie	i
 800963e:	617b      	str	r3, [r7, #20]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d06b      	beq.n	8009722 <pvPortMalloc+0x14e>
 800964a:	4b44      	ldr	r3, [pc, #272]	; (800975c <pvPortMalloc+0x188>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d866      	bhi.n	8009722 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009654:	4b42      	ldr	r3, [pc, #264]	; (8009760 <pvPortMalloc+0x18c>)
 8009656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009658:	4b41      	ldr	r3, [pc, #260]	; (8009760 <pvPortMalloc+0x18c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800965e:	e004      	b.n	800966a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <pvPortMalloc+0xa8>
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1f1      	bne.n	8009660 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800967c:	4b35      	ldr	r3, [pc, #212]	; (8009754 <pvPortMalloc+0x180>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	429a      	cmp	r2, r3
 8009684:	d04d      	beq.n	8009722 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2208      	movs	r2, #8
 800968c:	4413      	add	r3, r2
 800968e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	2308      	movs	r3, #8
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d921      	bls.n	80096ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00c      	beq.n	80096d4 <pvPortMalloc+0x100>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	b672      	cpsid	i
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	b662      	cpsie	i
 80096ce:	613b      	str	r3, [r7, #16]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	1ad2      	subs	r2, r2, r3
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096e6:	69b8      	ldr	r0, [r7, #24]
 80096e8:	f000 f8fe 	bl	80098e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096ec:	4b1b      	ldr	r3, [pc, #108]	; (800975c <pvPortMalloc+0x188>)
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	4a19      	ldr	r2, [pc, #100]	; (800975c <pvPortMalloc+0x188>)
 80096f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096fa:	4b18      	ldr	r3, [pc, #96]	; (800975c <pvPortMalloc+0x188>)
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4b19      	ldr	r3, [pc, #100]	; (8009764 <pvPortMalloc+0x190>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d203      	bcs.n	800970e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009706:	4b15      	ldr	r3, [pc, #84]	; (800975c <pvPortMalloc+0x188>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a16      	ldr	r2, [pc, #88]	; (8009764 <pvPortMalloc+0x190>)
 800970c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	4b11      	ldr	r3, [pc, #68]	; (8009758 <pvPortMalloc+0x184>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	431a      	orrs	r2, r3
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009722:	f7fe fccf 	bl	80080c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00c      	beq.n	800974a <pvPortMalloc+0x176>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	b672      	cpsid	i
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	b662      	cpsie	i
 8009744:	60fb      	str	r3, [r7, #12]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <pvPortMalloc+0x174>
	return pvReturn;
 800974a:	69fb      	ldr	r3, [r7, #28]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3728      	adds	r7, #40	; 0x28
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	2000e61c 	.word	0x2000e61c
 8009758:	2000e628 	.word	0x2000e628
 800975c:	2000e620 	.word	0x2000e620
 8009760:	2000e614 	.word	0x2000e614
 8009764:	2000e624 	.word	0x2000e624

08009768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d04c      	beq.n	8009814 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800977a:	2308      	movs	r3, #8
 800977c:	425b      	negs	r3, r3
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	4413      	add	r3, r2
 8009782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	4b23      	ldr	r3, [pc, #140]	; (800981c <vPortFree+0xb4>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4013      	ands	r3, r2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10c      	bne.n	80097b0 <vPortFree+0x48>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	b672      	cpsid	i
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	b662      	cpsie	i
 80097aa:	60fb      	str	r3, [r7, #12]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00c      	beq.n	80097d2 <vPortFree+0x6a>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	b672      	cpsid	i
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	b662      	cpsie	i
 80097cc:	60bb      	str	r3, [r7, #8]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	4b11      	ldr	r3, [pc, #68]	; (800981c <vPortFree+0xb4>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d019      	beq.n	8009814 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d115      	bne.n	8009814 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	4b0b      	ldr	r3, [pc, #44]	; (800981c <vPortFree+0xb4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	43db      	mvns	r3, r3
 80097f2:	401a      	ands	r2, r3
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097f8:	f7fe fc56 	bl	80080a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <vPortFree+0xb8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4413      	add	r3, r2
 8009806:	4a06      	ldr	r2, [pc, #24]	; (8009820 <vPortFree+0xb8>)
 8009808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f000 f86c 	bl	80098e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009810:	f7fe fc58 	bl	80080c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009814:	bf00      	nop
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	2000e628 	.word	0x2000e628
 8009820:	2000e620 	.word	0x2000e620

08009824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800982a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800982e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009830:	4b27      	ldr	r3, [pc, #156]	; (80098d0 <prvHeapInit+0xac>)
 8009832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3307      	adds	r3, #7
 8009842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <prvHeapInit+0xac>)
 8009854:	4413      	add	r3, r2
 8009856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800985c:	4a1d      	ldr	r2, [pc, #116]	; (80098d4 <prvHeapInit+0xb0>)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009862:	4b1c      	ldr	r3, [pc, #112]	; (80098d4 <prvHeapInit+0xb0>)
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	4413      	add	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009870:	2208      	movs	r2, #8
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0307 	bic.w	r3, r3, #7
 800987e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a15      	ldr	r2, [pc, #84]	; (80098d8 <prvHeapInit+0xb4>)
 8009884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <prvHeapInit+0xb4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <prvHeapInit+0xb4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvHeapInit+0xb4>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <prvHeapInit+0xb8>)
 80098b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <prvHeapInit+0xbc>)
 80098ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098bc:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <prvHeapInit+0xc0>)
 80098be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098c2:	601a      	str	r2, [r3, #0]
}
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	2000aa14 	.word	0x2000aa14
 80098d4:	2000e614 	.word	0x2000e614
 80098d8:	2000e61c 	.word	0x2000e61c
 80098dc:	2000e624 	.word	0x2000e624
 80098e0:	2000e620 	.word	0x2000e620
 80098e4:	2000e628 	.word	0x2000e628

080098e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098f0:	4b28      	ldr	r3, [pc, #160]	; (8009994 <prvInsertBlockIntoFreeList+0xac>)
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e002      	b.n	80098fc <prvInsertBlockIntoFreeList+0x14>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	429a      	cmp	r2, r3
 8009904:	d8f7      	bhi.n	80098f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	4413      	add	r3, r2
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	d108      	bne.n	800992a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	441a      	add	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	441a      	add	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d118      	bne.n	8009970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	4b15      	ldr	r3, [pc, #84]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d00d      	beq.n	8009966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e008      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e003      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d002      	beq.n	8009986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	2000e614 	.word	0x2000e614
 8009998:	2000e61c 	.word	0x2000e61c

0800999c <rcl_get_zero_initialized_publisher>:
 800999c:	4b01      	ldr	r3, [pc, #4]	; (80099a4 <rcl_get_zero_initialized_publisher+0x8>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	08017df4 	.word	0x08017df4

080099a8 <rcl_publisher_init>:
 80099a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ac:	b088      	sub	sp, #32
 80099ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	d06b      	beq.n	8009a8c <rcl_publisher_init+0xe4>
 80099b4:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 80099b8:	4605      	mov	r5, r0
 80099ba:	460f      	mov	r7, r1
 80099bc:	4690      	mov	r8, r2
 80099be:	4650      	mov	r0, sl
 80099c0:	4699      	mov	r9, r3
 80099c2:	f001 f873 	bl	800aaac <rcutils_allocator_is_valid>
 80099c6:	f080 0401 	eor.w	r4, r0, #1
 80099ca:	b2e4      	uxtb	r4, r4
 80099cc:	2c00      	cmp	r4, #0
 80099ce:	d15d      	bne.n	8009a8c <rcl_publisher_init+0xe4>
 80099d0:	2d00      	cmp	r5, #0
 80099d2:	d05b      	beq.n	8009a8c <rcl_publisher_init+0xe4>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b123      	cbz	r3, 80099e2 <rcl_publisher_init+0x3a>
 80099d8:	2464      	movs	r4, #100	; 0x64
 80099da:	4620      	mov	r0, r4
 80099dc:	b008      	add	sp, #32
 80099de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e2:	4638      	mov	r0, r7
 80099e4:	f006 fb20 	bl	8010028 <rcl_node_is_valid>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d054      	beq.n	8009a96 <rcl_publisher_init+0xee>
 80099ec:	f1b8 0f00 	cmp.w	r8, #0
 80099f0:	d04c      	beq.n	8009a8c <rcl_publisher_init+0xe4>
 80099f2:	fab9 f389 	clz	r3, r9
 80099f6:	095b      	lsrs	r3, r3, #5
 80099f8:	f1b9 0f00 	cmp.w	r9, #0
 80099fc:	d046      	beq.n	8009a8c <rcl_publisher_init+0xe4>
 80099fe:	aa07      	add	r2, sp, #28
 8009a00:	9307      	str	r3, [sp, #28]
 8009a02:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009a06:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8009a0a:	9205      	str	r2, [sp, #20]
 8009a0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009a14:	4649      	mov	r1, r9
 8009a16:	4638      	mov	r0, r7
 8009a18:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8009a1c:	f006 fb5c 	bl	80100d8 <rcl_node_resolve_name>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d14f      	bne.n	8009ac4 <rcl_publisher_init+0x11c>
 8009a24:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009a26:	20c8      	movs	r0, #200	; 0xc8
 8009a28:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8009a2a:	4798      	blx	r3
 8009a2c:	6028      	str	r0, [r5, #0]
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d050      	beq.n	8009ad4 <rcl_publisher_init+0x12c>
 8009a32:	4638      	mov	r0, r7
 8009a34:	f006 fb1a 	bl	801006c <rcl_node_get_rmw_handle>
 8009a38:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8009a3c:	4641      	mov	r1, r8
 8009a3e:	9a07      	ldr	r2, [sp, #28]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4633      	mov	r3, r6
 8009a44:	682c      	ldr	r4, [r5, #0]
 8009a46:	f001 f93d 	bl	800acc4 <rmw_create_publisher>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8009a50:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009a54:	b370      	cbz	r0, 8009ab4 <rcl_publisher_init+0x10c>
 8009a56:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8009a5a:	f001 fa17 	bl	800ae8c <rmw_publisher_get_actual_qos>
 8009a5e:	682b      	ldr	r3, [r5, #0]
 8009a60:	4604      	mov	r4, r0
 8009a62:	b9d0      	cbnz	r0, 8009a9a <rcl_publisher_init+0xf2>
 8009a64:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009a70:	2270      	movs	r2, #112	; 0x70
 8009a72:	f00d f9da 	bl	8016e2a <memcpy>
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8009a7c:	9807      	ldr	r0, [sp, #28]
 8009a7e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009a80:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8009a82:	4798      	blx	r3
 8009a84:	4620      	mov	r0, r4
 8009a86:	b008      	add	sp, #32
 8009a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8c:	240b      	movs	r4, #11
 8009a8e:	4620      	mov	r0, r4
 8009a90:	b008      	add	sp, #32
 8009a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a96:	24c8      	movs	r4, #200	; 0xc8
 8009a98:	e79f      	b.n	80099da <rcl_publisher_init+0x32>
 8009a9a:	b1cb      	cbz	r3, 8009ad0 <rcl_publisher_init+0x128>
 8009a9c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009aa0:	b142      	cbz	r2, 8009ab4 <rcl_publisher_init+0x10c>
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f006 fae2 	bl	801006c <rcl_node_get_rmw_handle>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8009aae:	f001 fa01 	bl	800aeb4 <rmw_destroy_publisher>
 8009ab2:	682b      	ldr	r3, [r5, #0]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009ab8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8009aba:	2401      	movs	r4, #1
 8009abc:	4790      	blx	r2
 8009abe:	2300      	movs	r3, #0
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	e7db      	b.n	8009a7c <rcl_publisher_init+0xd4>
 8009ac4:	2867      	cmp	r0, #103	; 0x67
 8009ac6:	d007      	beq.n	8009ad8 <rcl_publisher_init+0x130>
 8009ac8:	2869      	cmp	r0, #105	; 0x69
 8009aca:	d005      	beq.n	8009ad8 <rcl_publisher_init+0x130>
 8009acc:	280a      	cmp	r0, #10
 8009ace:	d001      	beq.n	8009ad4 <rcl_publisher_init+0x12c>
 8009ad0:	2401      	movs	r4, #1
 8009ad2:	e7d3      	b.n	8009a7c <rcl_publisher_init+0xd4>
 8009ad4:	240a      	movs	r4, #10
 8009ad6:	e7d1      	b.n	8009a7c <rcl_publisher_init+0xd4>
 8009ad8:	2467      	movs	r4, #103	; 0x67
 8009ada:	e7cf      	b.n	8009a7c <rcl_publisher_init+0xd4>

08009adc <rcl_publisher_get_default_options>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4d14      	ldr	r5, [pc, #80]	; (8009b30 <rcl_publisher_get_default_options+0x54>)
 8009ae0:	b088      	sub	sp, #32
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	2250      	movs	r2, #80	; 0x50
 8009ae6:	4913      	ldr	r1, [pc, #76]	; (8009b34 <rcl_publisher_get_default_options+0x58>)
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f00d f99e 	bl	8016e2a <memcpy>
 8009aee:	a802      	add	r0, sp, #8
 8009af0:	f000 ffce 	bl	800aa90 <rcutils_get_default_allocator>
 8009af4:	f10d 0c08 	add.w	ip, sp, #8
 8009af8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8009afc:	466e      	mov	r6, sp
 8009afe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b06:	f8dc 3000 	ldr.w	r3, [ip]
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f8ce 3000 	str.w	r3, [lr]
 8009b10:	f001 f85a 	bl	800abc8 <rmw_get_default_publisher_options>
 8009b14:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8009b18:	2270      	movs	r2, #112	; 0x70
 8009b1a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009b1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b22:	4629      	mov	r1, r5
 8009b24:	4620      	mov	r0, r4
 8009b26:	f00d f980 	bl	8016e2a <memcpy>
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	b008      	add	sp, #32
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	2000e630 	.word	0x2000e630
 8009b34:	08017df8 	.word	0x08017df8

08009b38 <rcl_publish>:
 8009b38:	b1f8      	cbz	r0, 8009b7a <rcl_publish+0x42>
 8009b3a:	6803      	ldr	r3, [r0, #0]
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4604      	mov	r4, r0
 8009b40:	b1b3      	cbz	r3, 8009b70 <rcl_publish+0x38>
 8009b42:	4616      	mov	r6, r2
 8009b44:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009b48:	b192      	cbz	r2, 8009b70 <rcl_publish+0x38>
 8009b4a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	f005 fe8a 	bl	800f868 <rcl_context_is_valid>
 8009b54:	b160      	cbz	r0, 8009b70 <rcl_publish+0x38>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009b5c:	b140      	cbz	r0, 8009b70 <rcl_publish+0x38>
 8009b5e:	b155      	cbz	r5, 8009b76 <rcl_publish+0x3e>
 8009b60:	4632      	mov	r2, r6
 8009b62:	4629      	mov	r1, r5
 8009b64:	f001 f84e 	bl	800ac04 <rmw_publish>
 8009b68:	3800      	subs	r0, #0
 8009b6a:	bf18      	it	ne
 8009b6c:	2001      	movne	r0, #1
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	200b      	movs	r0, #11
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009b7e:	4770      	bx	lr

08009b80 <rcl_publisher_is_valid>:
 8009b80:	b1a0      	cbz	r0, 8009bac <rcl_publisher_is_valid+0x2c>
 8009b82:	6803      	ldr	r3, [r0, #0]
 8009b84:	b510      	push	{r4, lr}
 8009b86:	4604      	mov	r4, r0
 8009b88:	b173      	cbz	r3, 8009ba8 <rcl_publisher_is_valid+0x28>
 8009b8a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009b8e:	b15a      	cbz	r2, 8009ba8 <rcl_publisher_is_valid+0x28>
 8009b90:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8009b94:	f005 fe68 	bl	800f868 <rcl_context_is_valid>
 8009b98:	b130      	cbz	r0, 8009ba8 <rcl_publisher_is_valid+0x28>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009ba0:	3800      	subs	r0, #0
 8009ba2:	bf18      	it	ne
 8009ba4:	2001      	movne	r0, #1
 8009ba6:	bd10      	pop	{r4, pc}
 8009ba8:	2000      	movs	r0, #0
 8009baa:	bd10      	pop	{r4, pc}
 8009bac:	2000      	movs	r0, #0
 8009bae:	4770      	bx	lr

08009bb0 <rcl_publisher_is_valid_except_context>:
 8009bb0:	b130      	cbz	r0, 8009bc0 <rcl_publisher_is_valid_except_context+0x10>
 8009bb2:	6800      	ldr	r0, [r0, #0]
 8009bb4:	b120      	cbz	r0, 8009bc0 <rcl_publisher_is_valid_except_context+0x10>
 8009bb6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8009bba:	3800      	subs	r0, #0
 8009bbc:	bf18      	it	ne
 8009bbe:	2001      	movne	r0, #1
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop

08009bc4 <_rclc_check_for_new_data>:
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d046      	beq.n	8009c56 <_rclc_check_for_new_data+0x92>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	b530      	push	{r4, r5, lr}
 8009bcc:	7802      	ldrb	r2, [r0, #0]
 8009bce:	b085      	sub	sp, #20
 8009bd0:	2a0a      	cmp	r2, #10
 8009bd2:	d842      	bhi.n	8009c5a <_rclc_check_for_new_data+0x96>
 8009bd4:	e8df f002 	tbb	[pc, r2]
 8009bd8:	14181212 	.word	0x14181212
 8009bdc:	06060614 	.word	0x06060614
 8009be0:	2e1a      	.short	0x2e1a
 8009be2:	16          	.byte	0x16
 8009be3:	00          	.byte	0x00
 8009be4:	6a0a      	ldr	r2, [r1, #32]
 8009be6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009be8:	2000      	movs	r0, #0
 8009bea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009bee:	1a12      	subs	r2, r2, r0
 8009bf0:	bf18      	it	ne
 8009bf2:	2201      	movne	r2, #1
 8009bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009bf8:	b005      	add	sp, #20
 8009bfa:	bd30      	pop	{r4, r5, pc}
 8009bfc:	680a      	ldr	r2, [r1, #0]
 8009bfe:	e7f2      	b.n	8009be6 <_rclc_check_for_new_data+0x22>
 8009c00:	698a      	ldr	r2, [r1, #24]
 8009c02:	e7f0      	b.n	8009be6 <_rclc_check_for_new_data+0x22>
 8009c04:	688a      	ldr	r2, [r1, #8]
 8009c06:	e7ee      	b.n	8009be6 <_rclc_check_for_new_data+0x22>
 8009c08:	690a      	ldr	r2, [r1, #16]
 8009c0a:	e7ec      	b.n	8009be6 <_rclc_check_for_new_data+0x22>
 8009c0c:	685c      	ldr	r4, [r3, #4]
 8009c0e:	4608      	mov	r0, r1
 8009c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c1c:	f104 0110 	add.w	r1, r4, #16
 8009c20:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c24:	9500      	str	r5, [sp, #0]
 8009c26:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8009c2a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8009c2e:	f007 ff6f 	bl	8011b10 <rcl_action_client_wait_set_get_entities_ready>
 8009c32:	e7e1      	b.n	8009bf8 <_rclc_check_for_new_data+0x34>
 8009c34:	685c      	ldr	r4, [r3, #4]
 8009c36:	4608      	mov	r0, r1
 8009c38:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8009c3c:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8009c40:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8009c44:	e9cd 2100 	strd	r2, r1, [sp]
 8009c48:	f104 0220 	add.w	r2, r4, #32
 8009c4c:	f104 0110 	add.w	r1, r4, #16
 8009c50:	f008 f978 	bl	8011f44 <rcl_action_server_wait_set_get_entities_ready>
 8009c54:	e7d0      	b.n	8009bf8 <_rclc_check_for_new_data+0x34>
 8009c56:	200b      	movs	r0, #11
 8009c58:	4770      	bx	lr
 8009c5a:	2001      	movs	r0, #1
 8009c5c:	e7cc      	b.n	8009bf8 <_rclc_check_for_new_data+0x34>
 8009c5e:	bf00      	nop

08009c60 <_rclc_take_new_data>:
 8009c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c62:	b09b      	sub	sp, #108	; 0x6c
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f000 8088 	beq.w	8009d7a <_rclc_take_new_data+0x11a>
 8009c6a:	7803      	ldrb	r3, [r0, #0]
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	2b0a      	cmp	r3, #10
 8009c70:	f200 8167 	bhi.w	8009f42 <_rclc_take_new_data+0x2e2>
 8009c74:	e8df f003 	tbb	[pc, r3]
 8009c78:	44152d2d 	.word	0x44152d2d
 8009c7c:	19191944 	.word	0x19191944
 8009c80:	065a      	.short	0x065a
 8009c82:	15          	.byte	0x15
 8009c83:	00          	.byte	0x00
 8009c84:	6840      	ldr	r0, [r0, #4]
 8009c86:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 80b2 	bne.w	8009df4 <_rclc_take_new_data+0x194>
 8009c90:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 80e4 	bne.w	8009e62 <_rclc_take_new_data+0x202>
 8009c9a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d16f      	bne.n	8009d82 <_rclc_take_new_data+0x122>
 8009ca2:	2500      	movs	r5, #0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	b01b      	add	sp, #108	; 0x6c
 8009ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009caa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009cac:	6a0b      	ldr	r3, [r1, #32]
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0f5      	beq.n	8009ca2 <_rclc_take_new_data+0x42>
 8009cb6:	6882      	ldr	r2, [r0, #8]
 8009cb8:	f100 0110 	add.w	r1, r0, #16
 8009cbc:	6840      	ldr	r0, [r0, #4]
 8009cbe:	f006 fbe5 	bl	801048c <rcl_take_request>
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d0ec      	beq.n	8009ca2 <_rclc_take_new_data+0x42>
 8009cc8:	f240 2359 	movw	r3, #601	; 0x259
 8009ccc:	4298      	cmp	r0, r3
 8009cce:	d013      	beq.n	8009cf8 <_rclc_take_new_data+0x98>
 8009cd0:	e029      	b.n	8009d26 <_rclc_take_new_data+0xc6>
 8009cd2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009cd4:	680b      	ldr	r3, [r1, #0]
 8009cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0e1      	beq.n	8009ca2 <_rclc_take_new_data+0x42>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	aa0a      	add	r2, sp, #40	; 0x28
 8009ce2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009ce6:	f006 fd15 	bl	8010714 <rcl_take>
 8009cea:	4605      	mov	r5, r0
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d0d9      	beq.n	8009ca4 <_rclc_take_new_data+0x44>
 8009cf0:	f240 1391 	movw	r3, #401	; 0x191
 8009cf4:	4298      	cmp	r0, r3
 8009cf6:	d116      	bne.n	8009d26 <_rclc_take_new_data+0xc6>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009cfe:	e7d1      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009d00:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d02:	698b      	ldr	r3, [r1, #24]
 8009d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0ca      	beq.n	8009ca2 <_rclc_take_new_data+0x42>
 8009d0c:	6882      	ldr	r2, [r0, #8]
 8009d0e:	f100 0110 	add.w	r1, r0, #16
 8009d12:	6840      	ldr	r0, [r0, #4]
 8009d14:	f005 fd38 	bl	800f788 <rcl_take_response>
 8009d18:	4605      	mov	r5, r0
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d0c1      	beq.n	8009ca2 <_rclc_take_new_data+0x42>
 8009d1e:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009d22:	4298      	cmp	r0, r3
 8009d24:	d0be      	beq.n	8009ca4 <_rclc_take_new_data+0x44>
 8009d26:	f000 fee7 	bl	800aaf8 <rcutils_reset_error>
 8009d2a:	e7bb      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009d2c:	6840      	ldr	r0, [r0, #4]
 8009d2e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d17d      	bne.n	8009e32 <_rclc_take_new_data+0x1d2>
 8009d36:	69c3      	ldr	r3, [r0, #28]
 8009d38:	b11b      	cbz	r3, 8009d42 <_rclc_take_new_data+0xe2>
 8009d3a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d144      	bne.n	8009dcc <_rclc_take_new_data+0x16c>
 8009d42:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 80ac 	bne.w	8009ea4 <_rclc_take_new_data+0x244>
 8009d4c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d0a6      	beq.n	8009ca2 <_rclc_take_new_data+0x42>
 8009d54:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009d56:	a90a      	add	r1, sp, #40	; 0x28
 8009d58:	3010      	adds	r0, #16
 8009d5a:	f007 fdb1 	bl	80118c0 <rcl_action_take_result_response>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d1e0      	bne.n	8009d26 <_rclc_take_new_data+0xc6>
 8009d64:	6860      	ldr	r0, [r4, #4]
 8009d66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d6a:	f008 fa1b 	bl	80121a4 <rclc_action_find_handle_by_result_request_sequence_number>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d098      	beq.n	8009ca4 <_rclc_take_new_data+0x44>
 8009d72:	2301      	movs	r3, #1
 8009d74:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8009d78:	e794      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009d7a:	250b      	movs	r5, #11
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	b01b      	add	sp, #108	; 0x6c
 8009d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d82:	ae04      	add	r6, sp, #16
 8009d84:	3010      	adds	r0, #16
 8009d86:	aa0a      	add	r2, sp, #40	; 0x28
 8009d88:	4631      	mov	r1, r6
 8009d8a:	f008 f80f 	bl	8011dac <rcl_action_take_cancel_request>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d1c8      	bne.n	8009d26 <_rclc_take_new_data+0xc6>
 8009d94:	a90a      	add	r1, sp, #40	; 0x28
 8009d96:	6860      	ldr	r0, [r4, #4]
 8009d98:	f008 f9c4 	bl	8012124 <rclc_action_find_goal_handle_by_uuid>
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f000 80bb 	beq.w	8009f1a <_rclc_take_new_data+0x2ba>
 8009da4:	2101      	movs	r1, #1
 8009da6:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009daa:	f008 f945 	bl	8012038 <rcl_action_transition_goal_state>
 8009dae:	2803      	cmp	r0, #3
 8009db0:	4684      	mov	ip, r0
 8009db2:	f040 80a7 	bne.w	8009f04 <_rclc_take_new_data+0x2a4>
 8009db6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009dba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dbe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009dc2:	e884 0003 	stmia.w	r4, {r0, r1}
 8009dc6:	f887 c008 	strb.w	ip, [r7, #8]
 8009dca:	e76b      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009dcc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009dce:	3010      	adds	r0, #16
 8009dd0:	f007 fdf6 	bl	80119c0 <rcl_action_take_feedback>
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d1a5      	bne.n	8009d26 <_rclc_take_new_data+0xc6>
 8009dda:	6860      	ldr	r0, [r4, #4]
 8009ddc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009dde:	f008 f9a1 	bl	8012124 <rclc_action_find_goal_handle_by_uuid>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f000 80a3 	beq.w	8009f30 <_rclc_take_new_data+0x2d0>
 8009dea:	2201      	movs	r2, #1
 8009dec:	6860      	ldr	r0, [r4, #4]
 8009dee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8009df2:	e7a6      	b.n	8009d42 <_rclc_take_new_data+0xe2>
 8009df4:	f008 f970 	bl	80120d8 <rclc_action_take_goal_handle>
 8009df8:	4606      	mov	r6, r0
 8009dfa:	6860      	ldr	r0, [r4, #4]
 8009dfc:	2e00      	cmp	r6, #0
 8009dfe:	f43f af47 	beq.w	8009c90 <_rclc_take_new_data+0x30>
 8009e02:	6070      	str	r0, [r6, #4]
 8009e04:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009e08:	69f2      	ldr	r2, [r6, #28]
 8009e0a:	3010      	adds	r0, #16
 8009e0c:	f007 ff16 	bl	8011c3c <rcl_action_take_goal_request>
 8009e10:	4605      	mov	r5, r0
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f040 808e 	bne.w	8009f34 <_rclc_take_new_data+0x2d4>
 8009e18:	69f7      	ldr	r7, [r6, #28]
 8009e1a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e1c:	7235      	strb	r5, [r6, #8]
 8009e1e:	f8c6 0009 	str.w	r0, [r6, #9]
 8009e22:	f8c6 100d 	str.w	r1, [r6, #13]
 8009e26:	6860      	ldr	r0, [r4, #4]
 8009e28:	f8c6 2011 	str.w	r2, [r6, #17]
 8009e2c:	f8c6 3015 	str.w	r3, [r6, #21]
 8009e30:	e72e      	b.n	8009c90 <_rclc_take_new_data+0x30>
 8009e32:	aa04      	add	r2, sp, #16
 8009e34:	a90a      	add	r1, sp, #40	; 0x28
 8009e36:	3010      	adds	r0, #16
 8009e38:	f007 fcca 	bl	80117d0 <rcl_action_take_goal_response>
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f47f af71 	bne.w	8009d26 <_rclc_take_new_data+0xc6>
 8009e44:	6860      	ldr	r0, [r4, #4]
 8009e46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e4a:	f008 f999 	bl	8012180 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009e4e:	b130      	cbz	r0, 8009e5e <_rclc_take_new_data+0x1fe>
 8009e50:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009e5a:	f880 2020 	strb.w	r2, [r0, #32]
 8009e5e:	6860      	ldr	r0, [r4, #4]
 8009e60:	e769      	b.n	8009d36 <_rclc_take_new_data+0xd6>
 8009e62:	3010      	adds	r0, #16
 8009e64:	aa04      	add	r2, sp, #16
 8009e66:	a90a      	add	r1, sp, #40	; 0x28
 8009e68:	f007 ff60 	bl	8011d2c <rcl_action_take_result_request>
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f47f af59 	bne.w	8009d26 <_rclc_take_new_data+0xc6>
 8009e74:	a904      	add	r1, sp, #16
 8009e76:	6860      	ldr	r0, [r4, #4]
 8009e78:	f008 f954 	bl	8012124 <rclc_action_find_goal_handle_by_uuid>
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	b160      	cbz	r0, 8009e9a <_rclc_take_new_data+0x23a>
 8009e80:	ad0a      	add	r5, sp, #40	; 0x28
 8009e82:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8009e86:	f04f 0c02 	mov.w	ip, #2
 8009e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009e8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e92:	e886 0003 	stmia.w	r6, {r0, r1}
 8009e96:	f887 c008 	strb.w	ip, [r7, #8]
 8009e9a:	6860      	ldr	r0, [r4, #4]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8009ea2:	e6fa      	b.n	8009c9a <_rclc_take_new_data+0x3a>
 8009ea4:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8009ea8:	a90a      	add	r1, sp, #40	; 0x28
 8009eaa:	3010      	adds	r0, #16
 8009eac:	f007 fd48 	bl	8011940 <rcl_action_take_cancel_response>
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f47f af37 	bne.w	8009d26 <_rclc_take_new_data+0xc6>
 8009eb8:	6860      	ldr	r0, [r4, #4]
 8009eba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ebe:	f008 f983 	bl	80121c8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	6860      	ldr	r0, [r4, #4]
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	f43f af40 	beq.w	8009d4c <_rclc_take_new_data+0xec>
 8009ecc:	2701      	movs	r7, #1
 8009ece:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ed0:	84b7      	strh	r7, [r6, #36]	; 0x24
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f43f af3a 	beq.w	8009d4c <_rclc_take_new_data+0xec>
 8009ed8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009eda:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009ede:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009ee2:	f008 f91f 	bl	8012124 <rclc_action_find_goal_handle_by_uuid>
 8009ee6:	b138      	cbz	r0, 8009ef8 <_rclc_take_new_data+0x298>
 8009ee8:	6860      	ldr	r0, [r4, #4]
 8009eea:	3501      	adds	r5, #1
 8009eec:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8009ef0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ef2:	42ab      	cmp	r3, r5
 8009ef4:	d8f0      	bhi.n	8009ed8 <_rclc_take_new_data+0x278>
 8009ef6:	e729      	b.n	8009d4c <_rclc_take_new_data+0xec>
 8009ef8:	6860      	ldr	r0, [r4, #4]
 8009efa:	3501      	adds	r5, #1
 8009efc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009efe:	42ab      	cmp	r3, r5
 8009f00:	d8ea      	bhi.n	8009ed8 <_rclc_take_new_data+0x278>
 8009f02:	e723      	b.n	8009d4c <_rclc_take_new_data+0xec>
 8009f04:	ab06      	add	r3, sp, #24
 8009f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f08:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f0c:	2103      	movs	r1, #3
 8009f0e:	6860      	ldr	r0, [r4, #4]
 8009f10:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009f14:	f008 f9cc 	bl	80122b0 <rclc_action_server_goal_cancel_reject>
 8009f18:	e6c4      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009f1a:	ab06      	add	r3, sp, #24
 8009f1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f1e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f22:	2102      	movs	r1, #2
 8009f24:	6860      	ldr	r0, [r4, #4]
 8009f26:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009f2a:	f008 f9c1 	bl	80122b0 <rclc_action_server_goal_cancel_reject>
 8009f2e:	e6b9      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009f30:	6860      	ldr	r0, [r4, #4]
 8009f32:	e706      	b.n	8009d42 <_rclc_take_new_data+0xe2>
 8009f34:	4631      	mov	r1, r6
 8009f36:	6860      	ldr	r0, [r4, #4]
 8009f38:	f008 f8de 	bl	80120f8 <rclc_action_remove_used_goal_handle>
 8009f3c:	f000 fddc 	bl	800aaf8 <rcutils_reset_error>
 8009f40:	e6b0      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009f42:	2501      	movs	r5, #1
 8009f44:	e6ae      	b.n	8009ca4 <_rclc_take_new_data+0x44>
 8009f46:	bf00      	nop

08009f48 <_rclc_execute.part.0>:
 8009f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4a:	7803      	ldrb	r3, [r0, #0]
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	4604      	mov	r4, r0
 8009f50:	2b0a      	cmp	r3, #10
 8009f52:	f200 8139 	bhi.w	800a1c8 <_rclc_execute.part.0+0x280>
 8009f56:	e8df f003 	tbb	[pc, r3]
 8009f5a:	4268      	.short	0x4268
 8009f5c:	06a75b4d 	.word	0x06a75b4d
 8009f60:	721d0606 	.word	0x721d0606
 8009f64:	62          	.byte	0x62
 8009f65:	00          	.byte	0x00
 8009f66:	2b06      	cmp	r3, #6
 8009f68:	f000 8126 	beq.w	800a1b8 <_rclc_execute.part.0+0x270>
 8009f6c:	2b07      	cmp	r3, #7
 8009f6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009f70:	f040 811c 	bne.w	800a1ac <_rclc_execute.part.0+0x264>
 8009f74:	f104 0510 	add.w	r5, r4, #16
 8009f78:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8009f7c:	6880      	ldr	r0, [r0, #8]
 8009f7e:	4798      	blx	r3
 8009f80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009f82:	4629      	mov	r1, r5
 8009f84:	6860      	ldr	r0, [r4, #4]
 8009f86:	f006 fac1 	bl	801050c <rcl_send_response>
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	b378      	cbz	r0, 8009fee <_rclc_execute.part.0+0xa6>
 8009f8e:	f000 fdb3 	bl	800aaf8 <rcutils_reset_error>
 8009f92:	e02c      	b.n	8009fee <_rclc_execute.part.0+0xa6>
 8009f94:	6840      	ldr	r0, [r0, #4]
 8009f96:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 808e 	beq.w	800a0bc <_rclc_execute.part.0+0x174>
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	2701      	movs	r7, #1
 8009fa4:	e004      	b.n	8009fb0 <_rclc_execute.part.0+0x68>
 8009fa6:	f008 f871 	bl	801208c <rclc_action_send_result_request>
 8009faa:	b998      	cbnz	r0, 8009fd4 <_rclc_execute.part.0+0x8c>
 8009fac:	722f      	strb	r7, [r5, #8]
 8009fae:	6860      	ldr	r0, [r4, #4]
 8009fb0:	f008 f91c 	bl	80121ec <rclc_action_find_first_handle_with_goal_response>
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d07f      	beq.n	800a0ba <_rclc_execute.part.0+0x172>
 8009fba:	6863      	ldr	r3, [r4, #4]
 8009fbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009fc4:	f885 6020 	strb.w	r6, [r5, #32]
 8009fc8:	4798      	blx	r3
 8009fca:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009fce:	4628      	mov	r0, r5
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e8      	bne.n	8009fa6 <_rclc_execute.part.0+0x5e>
 8009fd4:	6860      	ldr	r0, [r4, #4]
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f008 f88e 	bl	80120f8 <rclc_action_remove_used_goal_handle>
 8009fdc:	e7e7      	b.n	8009fae <_rclc_execute.part.0+0x66>
 8009fde:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8009fe2:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8009fe6:	b100      	cbz	r0, 8009fea <_rclc_execute.part.0+0xa2>
 8009fe8:	68a0      	ldr	r0, [r4, #8]
 8009fea:	2400      	movs	r4, #0
 8009fec:	4798      	blx	r3
 8009fee:	4620      	mov	r0, r4
 8009ff0:	b005      	add	sp, #20
 8009ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff4:	6840      	ldr	r0, [r0, #4]
 8009ff6:	f006 fca1 	bl	801093c <rcl_timer_call>
 8009ffa:	f240 3321 	movw	r3, #801	; 0x321
 8009ffe:	4604      	mov	r4, r0
 800a000:	4298      	cmp	r0, r3
 800a002:	d001      	beq.n	800a008 <_rclc_execute.part.0+0xc0>
 800a004:	2800      	cmp	r0, #0
 800a006:	d1c2      	bne.n	8009f8e <_rclc_execute.part.0+0x46>
 800a008:	2400      	movs	r4, #0
 800a00a:	4620      	mov	r0, r4
 800a00c:	b005      	add	sp, #20
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a010:	2400      	movs	r4, #0
 800a012:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a014:	6880      	ldr	r0, [r0, #8]
 800a016:	4798      	blx	r3
 800a018:	4620      	mov	r0, r4
 800a01a:	b005      	add	sp, #20
 800a01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01e:	2400      	movs	r4, #0
 800a020:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a022:	4798      	blx	r3
 800a024:	4620      	mov	r0, r4
 800a026:	b005      	add	sp, #20
 800a028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a02a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800a02e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a030:	b100      	cbz	r0, 800a034 <_rclc_execute.part.0+0xec>
 800a032:	68a0      	ldr	r0, [r4, #8]
 800a034:	2400      	movs	r4, #0
 800a036:	4798      	blx	r3
 800a038:	4620      	mov	r0, r4
 800a03a:	b005      	add	sp, #20
 800a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a03e:	6840      	ldr	r0, [r0, #4]
 800a040:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a044:	bb3b      	cbnz	r3, 800a096 <_rclc_execute.part.0+0x14e>
 800a046:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d07d      	beq.n	800a14a <_rclc_execute.part.0+0x202>
 800a04e:	f640 0634 	movw	r6, #2100	; 0x834
 800a052:	2701      	movs	r7, #1
 800a054:	e007      	b.n	800a066 <_rclc_execute.part.0+0x11e>
 800a056:	4628      	mov	r0, r5
 800a058:	f008 f8e0 	bl	801221c <rclc_action_server_response_goal_request>
 800a05c:	4629      	mov	r1, r5
 800a05e:	6860      	ldr	r0, [r4, #4]
 800a060:	f008 f84a 	bl	80120f8 <rclc_action_remove_used_goal_handle>
 800a064:	6860      	ldr	r0, [r4, #4]
 800a066:	2100      	movs	r1, #0
 800a068:	f008 f872 	bl	8012150 <rclc_action_find_first_handle_by_status>
 800a06c:	4605      	mov	r5, r0
 800a06e:	2800      	cmp	r0, #0
 800a070:	d068      	beq.n	800a144 <_rclc_execute.part.0+0x1fc>
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	4798      	blx	r3
 800a07a:	42b0      	cmp	r0, r6
 800a07c:	f04f 0100 	mov.w	r1, #0
 800a080:	d1e9      	bne.n	800a056 <_rclc_execute.part.0+0x10e>
 800a082:	2101      	movs	r1, #1
 800a084:	4628      	mov	r0, r5
 800a086:	f008 f8c9 	bl	801221c <rclc_action_server_response_goal_request>
 800a08a:	722f      	strb	r7, [r5, #8]
 800a08c:	e7ea      	b.n	800a064 <_rclc_execute.part.0+0x11c>
 800a08e:	6848      	ldr	r0, [r1, #4]
 800a090:	f008 f832 	bl	80120f8 <rclc_action_remove_used_goal_handle>
 800a094:	6860      	ldr	r0, [r4, #4]
 800a096:	f008 f867 	bl	8012168 <rclc_action_find_first_terminated_handle>
 800a09a:	4601      	mov	r1, r0
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1f6      	bne.n	800a08e <_rclc_execute.part.0+0x146>
 800a0a0:	6860      	ldr	r0, [r4, #4]
 800a0a2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800a0a6:	e7ce      	b.n	800a046 <_rclc_execute.part.0+0xfe>
 800a0a8:	2400      	movs	r4, #0
 800a0aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a0ac:	f100 0110 	add.w	r1, r0, #16
 800a0b0:	6880      	ldr	r0, [r0, #8]
 800a0b2:	4798      	blx	r3
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	b005      	add	sp, #20
 800a0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ba:	6860      	ldr	r0, [r4, #4]
 800a0bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a0c0:	b18b      	cbz	r3, 800a0e6 <_rclc_execute.part.0+0x19e>
 800a0c2:	68c5      	ldr	r5, [r0, #12]
 800a0c4:	b32d      	cbz	r5, 800a112 <_rclc_execute.part.0+0x1ca>
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a0cc:	b143      	cbz	r3, 800a0e0 <_rclc_execute.part.0+0x198>
 800a0ce:	69c3      	ldr	r3, [r0, #28]
 800a0d0:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800a0d4:	b123      	cbz	r3, 800a0e0 <_rclc_execute.part.0+0x198>
 800a0d6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a0d8:	4628      	mov	r0, r5
 800a0da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a0dc:	4798      	blx	r3
 800a0de:	6860      	ldr	r0, [r4, #4]
 800a0e0:	682d      	ldr	r5, [r5, #0]
 800a0e2:	2d00      	cmp	r5, #0
 800a0e4:	d1f0      	bne.n	800a0c8 <_rclc_execute.part.0+0x180>
 800a0e6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a0ea:	b193      	cbz	r3, 800a112 <_rclc_execute.part.0+0x1ca>
 800a0ec:	68c5      	ldr	r5, [r0, #12]
 800a0ee:	b185      	cbz	r5, 800a112 <_rclc_execute.part.0+0x1ca>
 800a0f0:	2600      	movs	r6, #0
 800a0f2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a0f6:	b14b      	cbz	r3, 800a10c <_rclc_execute.part.0+0x1c4>
 800a0f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a0fa:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800a0fe:	b12b      	cbz	r3, 800a10c <_rclc_execute.part.0+0x1c4>
 800a100:	4628      	mov	r0, r5
 800a102:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800a106:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a108:	4798      	blx	r3
 800a10a:	6860      	ldr	r0, [r4, #4]
 800a10c:	682d      	ldr	r5, [r5, #0]
 800a10e:	2d00      	cmp	r5, #0
 800a110:	d1ef      	bne.n	800a0f2 <_rclc_execute.part.0+0x1aa>
 800a112:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a116:	2b00      	cmp	r3, #0
 800a118:	f43f af76 	beq.w	800a008 <_rclc_execute.part.0+0xc0>
 800a11c:	2700      	movs	r7, #0
 800a11e:	e00b      	b.n	800a138 <_rclc_execute.part.0+0x1f0>
 800a120:	6863      	ldr	r3, [r4, #4]
 800a122:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a126:	6a1e      	ldr	r6, [r3, #32]
 800a128:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800a12c:	47b0      	blx	r6
 800a12e:	6860      	ldr	r0, [r4, #4]
 800a130:	4629      	mov	r1, r5
 800a132:	f007 ffe1 	bl	80120f8 <rclc_action_remove_used_goal_handle>
 800a136:	6860      	ldr	r0, [r4, #4]
 800a138:	f008 f864 	bl	8012204 <rclc_action_find_first_handle_with_result_response>
 800a13c:	4605      	mov	r5, r0
 800a13e:	2800      	cmp	r0, #0
 800a140:	d1ee      	bne.n	800a120 <_rclc_execute.part.0+0x1d8>
 800a142:	e761      	b.n	800a008 <_rclc_execute.part.0+0xc0>
 800a144:	6860      	ldr	r0, [r4, #4]
 800a146:	f880 5020 	strb.w	r5, [r0, #32]
 800a14a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f43f af5a 	beq.w	800a008 <_rclc_execute.part.0+0xc0>
 800a154:	68c5      	ldr	r5, [r0, #12]
 800a156:	b1b5      	cbz	r5, 800a186 <_rclc_execute.part.0+0x23e>
 800a158:	2602      	movs	r6, #2
 800a15a:	e001      	b.n	800a160 <_rclc_execute.part.0+0x218>
 800a15c:	682d      	ldr	r5, [r5, #0]
 800a15e:	b195      	cbz	r5, 800a186 <_rclc_execute.part.0+0x23e>
 800a160:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d1f9      	bne.n	800a15c <_rclc_execute.part.0+0x214>
 800a168:	69c3      	ldr	r3, [r0, #28]
 800a16a:	4628      	mov	r0, r5
 800a16c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a16e:	4798      	blx	r3
 800a170:	4603      	mov	r3, r0
 800a172:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800a176:	4628      	mov	r0, r5
 800a178:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a17c:	b143      	cbz	r3, 800a190 <_rclc_execute.part.0+0x248>
 800a17e:	f008 f86b 	bl	8012258 <rclc_action_server_goal_cancel_accept>
 800a182:	6860      	ldr	r0, [r4, #4]
 800a184:	e7ea      	b.n	800a15c <_rclc_execute.part.0+0x214>
 800a186:	2300      	movs	r3, #0
 800a188:	461c      	mov	r4, r3
 800a18a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a18e:	e72e      	b.n	8009fee <_rclc_execute.part.0+0xa6>
 800a190:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a192:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800a196:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a19a:	2101      	movs	r1, #1
 800a19c:	6860      	ldr	r0, [r4, #4]
 800a19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1a2:	f008 f885 	bl	80122b0 <rclc_action_server_goal_cancel_reject>
 800a1a6:	722e      	strb	r6, [r5, #8]
 800a1a8:	6860      	ldr	r0, [r4, #4]
 800a1aa:	e7d7      	b.n	800a15c <_rclc_execute.part.0+0x214>
 800a1ac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a1ae:	f104 0510 	add.w	r5, r4, #16
 800a1b2:	6880      	ldr	r0, [r0, #8]
 800a1b4:	4798      	blx	r3
 800a1b6:	e6e3      	b.n	8009f80 <_rclc_execute.part.0+0x38>
 800a1b8:	f100 0510 	add.w	r5, r0, #16
 800a1bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a1be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	6880      	ldr	r0, [r0, #8]
 800a1c4:	4798      	blx	r3
 800a1c6:	e6db      	b.n	8009f80 <_rclc_execute.part.0+0x38>
 800a1c8:	2401      	movs	r4, #1
 800a1ca:	e710      	b.n	8009fee <_rclc_execute.part.0+0xa6>

0800a1cc <rclc_executor_trigger_any>:
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d03d      	beq.n	800a24c <rclc_executor_trigger_any+0x80>
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	d03c      	beq.n	800a24e <rclc_executor_trigger_any+0x82>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d035      	beq.n	800a24c <rclc_executor_trigger_any+0x80>
 800a1e0:	b430      	push	{r4, r5}
 800a1e2:	f893 c000 	ldrb.w	ip, [r3]
 800a1e6:	f1bc 0f08 	cmp.w	ip, #8
 800a1ea:	d11d      	bne.n	800a228 <rclc_executor_trigger_any+0x5c>
 800a1ec:	685c      	ldr	r4, [r3, #4]
 800a1ee:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800a1f0:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800a1f4:	d105      	bne.n	800a202 <rclc_executor_trigger_any+0x36>
 800a1f6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800a1fa:	b910      	cbnz	r0, 800a202 <rclc_executor_trigger_any+0x36>
 800a1fc:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800a200:	b128      	cbz	r0, 800a20e <rclc_executor_trigger_any+0x42>
 800a202:	bc30      	pop	{r4, r5}
 800a204:	4770      	bx	lr
 800a206:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d1f9      	bne.n	800a202 <rclc_executor_trigger_any+0x36>
 800a20e:	3201      	adds	r2, #1
 800a210:	3340      	adds	r3, #64	; 0x40
 800a212:	4291      	cmp	r1, r2
 800a214:	d017      	beq.n	800a246 <rclc_executor_trigger_any+0x7a>
 800a216:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d0f1      	beq.n	800a202 <rclc_executor_trigger_any+0x36>
 800a21e:	f893 c000 	ldrb.w	ip, [r3]
 800a222:	f1bc 0f08 	cmp.w	ip, #8
 800a226:	d0e1      	beq.n	800a1ec <rclc_executor_trigger_any+0x20>
 800a228:	f1bc 0f09 	cmp.w	ip, #9
 800a22c:	d1eb      	bne.n	800a206 <rclc_executor_trigger_any+0x3a>
 800a22e:	685c      	ldr	r4, [r3, #4]
 800a230:	6a25      	ldr	r5, [r4, #32]
 800a232:	2d00      	cmp	r5, #0
 800a234:	d1e5      	bne.n	800a202 <rclc_executor_trigger_any+0x36>
 800a236:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d1e1      	bne.n	800a202 <rclc_executor_trigger_any+0x36>
 800a23e:	3201      	adds	r2, #1
 800a240:	3340      	adds	r3, #64	; 0x40
 800a242:	4291      	cmp	r1, r2
 800a244:	d1e7      	bne.n	800a216 <rclc_executor_trigger_any+0x4a>
 800a246:	2000      	movs	r0, #0
 800a248:	bc30      	pop	{r4, r5}
 800a24a:	4770      	bx	lr
 800a24c:	4770      	bx	lr
 800a24e:	4608      	mov	r0, r1
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop

0800a254 <rclc_executor_get_zero_initialized_executor>:
 800a254:	b510      	push	{r4, lr}
 800a256:	4604      	mov	r4, r0
 800a258:	2288      	movs	r2, #136	; 0x88
 800a25a:	4902      	ldr	r1, [pc, #8]	; (800a264 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a25c:	f00c fde5 	bl	8016e2a <memcpy>
 800a260:	4620      	mov	r0, r4
 800a262:	bd10      	pop	{r4, pc}
 800a264:	08017e48 	.word	0x08017e48

0800a268 <rclc_executor_init>:
 800a268:	2900      	cmp	r1, #0
 800a26a:	d06a      	beq.n	800a342 <rclc_executor_init+0xda>
 800a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	4605      	mov	r5, r0
 800a272:	b0b0      	sub	sp, #192	; 0xc0
 800a274:	2800      	cmp	r0, #0
 800a276:	d05c      	beq.n	800a332 <rclc_executor_init+0xca>
 800a278:	4616      	mov	r6, r2
 800a27a:	4618      	mov	r0, r3
 800a27c:	4688      	mov	r8, r1
 800a27e:	461f      	mov	r7, r3
 800a280:	f000 fc14 	bl	800aaac <rcutils_allocator_is_valid>
 800a284:	2e00      	cmp	r6, #0
 800a286:	d054      	beq.n	800a332 <rclc_executor_init+0xca>
 800a288:	f080 0401 	eor.w	r4, r0, #1
 800a28c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800a290:	d14f      	bne.n	800a332 <rclc_executor_init+0xca>
 800a292:	2288      	movs	r2, #136	; 0x88
 800a294:	4930      	ldr	r1, [pc, #192]	; (800a358 <rclc_executor_init+0xf0>)
 800a296:	a80e      	add	r0, sp, #56	; 0x38
 800a298:	f00c fdc7 	bl	8016e2a <memcpy>
 800a29c:	a90e      	add	r1, sp, #56	; 0x38
 800a29e:	2288      	movs	r2, #136	; 0x88
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f00c fdc2 	bl	8016e2a <memcpy>
 800a2a6:	4668      	mov	r0, sp
 800a2a8:	f8c5 8000 	str.w	r8, [r5]
 800a2ac:	60ae      	str	r6, [r5, #8]
 800a2ae:	f006 fcbb 	bl	8010c28 <rcl_get_zero_initialized_wait_set>
 800a2b2:	46ec      	mov	ip, sp
 800a2b4:	f105 0e14 	add.w	lr, r5, #20
 800a2b8:	f8d7 8000 	ldr.w	r8, [r7]
 800a2bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a2c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a2c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a2c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a2cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a2d0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a350 <rclc_executor_init+0xe8>
 800a2d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a2d8:	f8dc 3000 	ldr.w	r3, [ip]
 800a2dc:	01b0      	lsls	r0, r6, #6
 800a2de:	6939      	ldr	r1, [r7, #16]
 800a2e0:	f8ce 3000 	str.w	r3, [lr]
 800a2e4:	612f      	str	r7, [r5, #16]
 800a2e6:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800a2ea:	47c0      	blx	r8
 800a2ec:	6068      	str	r0, [r5, #4]
 800a2ee:	b908      	cbnz	r0, 800a2f4 <rclc_executor_init+0x8c>
 800a2f0:	e029      	b.n	800a346 <rclc_executor_init+0xde>
 800a2f2:	6868      	ldr	r0, [r5, #4]
 800a2f4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a2f8:	3401      	adds	r4, #1
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	f000 fa7c 	bl	800a7f8 <rclc_executor_handle_init>
 800a300:	42a6      	cmp	r6, r4
 800a302:	d8f6      	bhi.n	800a2f2 <rclc_executor_init+0x8a>
 800a304:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a308:	f000 fa6a 	bl	800a7e0 <rclc_executor_handle_counters_zero_init>
 800a30c:	4a13      	ldr	r2, [pc, #76]	; (800a35c <rclc_executor_init+0xf4>)
 800a30e:	2300      	movs	r3, #0
 800a310:	6868      	ldr	r0, [r5, #4]
 800a312:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 800a316:	b168      	cbz	r0, 800a334 <rclc_executor_init+0xcc>
 800a318:	68ab      	ldr	r3, [r5, #8]
 800a31a:	b173      	cbz	r3, 800a33a <rclc_executor_init+0xd2>
 800a31c:	692a      	ldr	r2, [r5, #16]
 800a31e:	fab2 f382 	clz	r3, r2
 800a322:	095b      	lsrs	r3, r3, #5
 800a324:	b14a      	cbz	r2, 800a33a <rclc_executor_init+0xd2>
 800a326:	4618      	mov	r0, r3
 800a328:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 800a32c:	b030      	add	sp, #192	; 0xc0
 800a32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a332:	200b      	movs	r0, #11
 800a334:	b030      	add	sp, #192	; 0xc0
 800a336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33a:	2000      	movs	r0, #0
 800a33c:	b030      	add	sp, #192	; 0xc0
 800a33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a342:	200b      	movs	r0, #11
 800a344:	4770      	bx	lr
 800a346:	200a      	movs	r0, #10
 800a348:	e7f4      	b.n	800a334 <rclc_executor_init+0xcc>
 800a34a:	bf00      	nop
 800a34c:	f3af 8000 	nop.w
 800a350:	3b9aca00 	.word	0x3b9aca00
 800a354:	00000000 	.word	0x00000000
 800a358:	08017e48 	.word	0x08017e48
 800a35c:	0800a1cd 	.word	0x0800a1cd

0800a360 <rclc_executor_add_subscription>:
 800a360:	2b00      	cmp	r3, #0
 800a362:	bf18      	it	ne
 800a364:	2a00      	cmpne	r2, #0
 800a366:	b570      	push	{r4, r5, r6, lr}
 800a368:	4604      	mov	r4, r0
 800a36a:	bf0c      	ite	eq
 800a36c:	2001      	moveq	r0, #1
 800a36e:	2000      	movne	r0, #0
 800a370:	f89d c010 	ldrb.w	ip, [sp, #16]
 800a374:	2900      	cmp	r1, #0
 800a376:	bf08      	it	eq
 800a378:	f040 0001 	orreq.w	r0, r0, #1
 800a37c:	bb28      	cbnz	r0, 800a3ca <rclc_executor_add_subscription+0x6a>
 800a37e:	fab4 f584 	clz	r5, r4
 800a382:	096d      	lsrs	r5, r5, #5
 800a384:	b30c      	cbz	r4, 800a3ca <rclc_executor_add_subscription+0x6a>
 800a386:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 800a38a:	4286      	cmp	r6, r0
 800a38c:	d301      	bcc.n	800a392 <rclc_executor_add_subscription+0x32>
 800a38e:	2001      	movs	r0, #1
 800a390:	bd70      	pop	{r4, r5, r6, pc}
 800a392:	6860      	ldr	r0, [r4, #4]
 800a394:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800a398:	f800 500e 	strb.w	r5, [r0, lr]
 800a39c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800a3a0:	3601      	adds	r6, #1
 800a3a2:	6303      	str	r3, [r0, #48]	; 0x30
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	62c5      	str	r5, [r0, #44]	; 0x2c
 800a3a8:	f104 0514 	add.w	r5, r4, #20
 800a3ac:	f880 c001 	strb.w	ip, [r0, #1]
 800a3b0:	8703      	strh	r3, [r0, #56]	; 0x38
 800a3b2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	60e6      	str	r6, [r4, #12]
 800a3ba:	f006 fc49 	bl	8010c50 <rcl_wait_set_is_valid>
 800a3be:	b930      	cbnz	r0, 800a3ce <rclc_executor_add_subscription+0x6e>
 800a3c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	64a3      	str	r3, [r4, #72]	; 0x48
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ca:	200b      	movs	r0, #11
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f006 fc44 	bl	8010c5c <rcl_wait_set_fini>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d0f3      	beq.n	800a3c0 <rclc_executor_add_subscription+0x60>
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	bf00      	nop

0800a3dc <rclc_executor_prepare>:
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d044      	beq.n	800a46a <rclc_executor_prepare+0x8e>
 800a3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e2:	f100 0514 	add.w	r5, r0, #20
 800a3e6:	b09b      	sub	sp, #108	; 0x6c
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f006 fc30 	bl	8010c50 <rcl_wait_set_is_valid>
 800a3f0:	b110      	cbz	r0, 800a3f8 <rclc_executor_prepare+0x1c>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	b01b      	add	sp, #108	; 0x6c
 800a3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f006 fc2f 	bl	8010c5c <rcl_wait_set_fini>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d130      	bne.n	800a464 <rclc_executor_prepare+0x88>
 800a402:	a80c      	add	r0, sp, #48	; 0x30
 800a404:	ae04      	add	r6, sp, #16
 800a406:	f006 fc0f 	bl	8010c28 <rcl_get_zero_initialized_wait_set>
 800a40a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800a40e:	46ae      	mov	lr, r5
 800a410:	6927      	ldr	r7, [r4, #16]
 800a412:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a416:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a41a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a41e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a422:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a426:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a42a:	f8dc 3000 	ldr.w	r3, [ip]
 800a42e:	f8ce 3000 	str.w	r3, [lr]
 800a432:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a434:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	4628      	mov	r0, r5
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	6033      	str	r3, [r6, #0]
 800a43e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a440:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a442:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a446:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800a44a:	e9cd 2100 	strd	r2, r1, [sp]
 800a44e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a450:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a452:	f006 ff03 	bl	801125c <rcl_wait_set_init>
 800a456:	2800      	cmp	r0, #0
 800a458:	d0cc      	beq.n	800a3f4 <rclc_executor_prepare+0x18>
 800a45a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a45c:	f000 fb4c 	bl	800aaf8 <rcutils_reset_error>
 800a460:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a462:	e7c7      	b.n	800a3f4 <rclc_executor_prepare+0x18>
 800a464:	f000 fb48 	bl	800aaf8 <rcutils_reset_error>
 800a468:	e7cb      	b.n	800a402 <rclc_executor_prepare+0x26>
 800a46a:	200b      	movs	r0, #11
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop

0800a470 <rclc_executor_spin_some.part.0>:
 800a470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	4605      	mov	r5, r0
 800a476:	4691      	mov	r9, r2
 800a478:	4698      	mov	r8, r3
 800a47a:	f7ff ffaf 	bl	800a3dc <rclc_executor_prepare>
 800a47e:	f105 0614 	add.w	r6, r5, #20
 800a482:	4630      	mov	r0, r6
 800a484:	f006 fcb6 	bl	8010df4 <rcl_wait_set_clear>
 800a488:	4607      	mov	r7, r0
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f040 80a8 	bne.w	800a5e0 <rclc_executor_spin_some.part.0+0x170>
 800a490:	68ab      	ldr	r3, [r5, #8]
 800a492:	b30b      	cbz	r3, 800a4d8 <rclc_executor_spin_some.part.0+0x68>
 800a494:	4604      	mov	r4, r0
 800a496:	6869      	ldr	r1, [r5, #4]
 800a498:	01a2      	lsls	r2, r4, #6
 800a49a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a49e:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800a4a2:	b1cb      	cbz	r3, 800a4d8 <rclc_executor_spin_some.part.0+0x68>
 800a4a4:	5c8b      	ldrb	r3, [r1, r2]
 800a4a6:	2b0a      	cmp	r3, #10
 800a4a8:	f200 80de 	bhi.w	800a668 <rclc_executor_spin_some.part.0+0x1f8>
 800a4ac:	e8df f003 	tbb	[pc, r3]
 800a4b0:	8da99d9d 	.word	0x8da99d9d
 800a4b4:	0606068d 	.word	0x0606068d
 800a4b8:	c1ce      	.short	0xc1ce
 800a4ba:	b5          	.byte	0xb5
 800a4bb:	00          	.byte	0x00
 800a4bc:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a4c0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f006 ffe5 	bl	8011494 <rcl_wait_set_add_service>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	f040 8087 	bne.w	800a5de <rclc_executor_spin_some.part.0+0x16e>
 800a4d0:	3401      	adds	r4, #1
 800a4d2:	68ab      	ldr	r3, [r5, #8]
 800a4d4:	429c      	cmp	r4, r3
 800a4d6:	d3de      	bcc.n	800a496 <rclc_executor_spin_some.part.0+0x26>
 800a4d8:	4643      	mov	r3, r8
 800a4da:	464a      	mov	r2, r9
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f007 f807 	bl	80114f0 <rcl_wait>
 800a4e2:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 80c6 	beq.w	800a678 <rclc_executor_spin_some.part.0+0x208>
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	f040 80bb 	bne.w	800a668 <rclc_executor_spin_some.part.0+0x1f8>
 800a4f2:	68ab      	ldr	r3, [r5, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8159 	beq.w	800a7ac <rclc_executor_spin_some.part.0+0x33c>
 800a4fa:	2400      	movs	r4, #0
 800a4fc:	f240 1991 	movw	r9, #401	; 0x191
 800a500:	46a0      	mov	r8, r4
 800a502:	e00a      	b.n	800a51a <rclc_executor_spin_some.part.0+0xaa>
 800a504:	f7ff fb5e 	bl	8009bc4 <_rclc_check_for_new_data>
 800a508:	4604      	mov	r4, r0
 800a50a:	b110      	cbz	r0, 800a512 <rclc_executor_spin_some.part.0+0xa2>
 800a50c:	4548      	cmp	r0, r9
 800a50e:	f040 80b1 	bne.w	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a512:	68ab      	ldr	r3, [r5, #8]
 800a514:	4598      	cmp	r8, r3
 800a516:	f080 8126 	bcs.w	800a766 <rclc_executor_spin_some.part.0+0x2f6>
 800a51a:	686a      	ldr	r2, [r5, #4]
 800a51c:	4631      	mov	r1, r6
 800a51e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a522:	f108 0801 	add.w	r8, r8, #1
 800a526:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a52a:	f1bc 0f00 	cmp.w	ip, #0
 800a52e:	d1e9      	bne.n	800a504 <rclc_executor_spin_some.part.0+0x94>
 800a530:	4619      	mov	r1, r3
 800a532:	4610      	mov	r0, r2
 800a534:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a538:	4798      	blx	r3
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f000 809a 	beq.w	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a540:	68ab      	ldr	r3, [r5, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 8096 	beq.w	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a548:	f04f 0800 	mov.w	r8, #0
 800a54c:	f240 1991 	movw	r9, #401	; 0x191
 800a550:	e009      	b.n	800a566 <rclc_executor_spin_some.part.0+0xf6>
 800a552:	f7ff fb85 	bl	8009c60 <_rclc_take_new_data>
 800a556:	4604      	mov	r4, r0
 800a558:	b110      	cbz	r0, 800a560 <rclc_executor_spin_some.part.0+0xf0>
 800a55a:	4548      	cmp	r0, r9
 800a55c:	f040 808a 	bne.w	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a560:	68ab      	ldr	r3, [r5, #8]
 800a562:	4598      	cmp	r8, r3
 800a564:	d209      	bcs.n	800a57a <rclc_executor_spin_some.part.0+0x10a>
 800a566:	6868      	ldr	r0, [r5, #4]
 800a568:	4631      	mov	r1, r6
 800a56a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a56e:	f108 0801 	add.w	r8, r8, #1
 800a572:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a576:	2a00      	cmp	r2, #0
 800a578:	d1eb      	bne.n	800a552 <rclc_executor_spin_some.part.0+0xe2>
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d07a      	beq.n	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a57e:	2600      	movs	r6, #0
 800a580:	e00e      	b.n	800a5a0 <rclc_executor_spin_some.part.0+0x130>
 800a582:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a586:	2a08      	cmp	r2, #8
 800a588:	f000 80fc 	beq.w	800a784 <rclc_executor_spin_some.part.0+0x314>
 800a58c:	2a09      	cmp	r2, #9
 800a58e:	f000 80ee 	beq.w	800a76e <rclc_executor_spin_some.part.0+0x2fe>
 800a592:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800a596:	b98a      	cbnz	r2, 800a5bc <rclc_executor_spin_some.part.0+0x14c>
 800a598:	3601      	adds	r6, #1
 800a59a:	429e      	cmp	r6, r3
 800a59c:	d267      	bcs.n	800a66e <rclc_executor_spin_some.part.0+0x1fe>
 800a59e:	2400      	movs	r4, #0
 800a5a0:	686a      	ldr	r2, [r5, #4]
 800a5a2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a5a6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a5aa:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800a5ae:	2900      	cmp	r1, #0
 800a5b0:	d060      	beq.n	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a5b2:	7841      	ldrb	r1, [r0, #1]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	d0e4      	beq.n	800a582 <rclc_executor_spin_some.part.0+0x112>
 800a5b8:	2901      	cmp	r1, #1
 800a5ba:	d1ed      	bne.n	800a598 <rclc_executor_spin_some.part.0+0x128>
 800a5bc:	f7ff fcc4 	bl	8009f48 <_rclc_execute.part.0>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	f040 80b5 	bne.w	800a730 <rclc_executor_spin_some.part.0+0x2c0>
 800a5c6:	68ab      	ldr	r3, [r5, #8]
 800a5c8:	e7e6      	b.n	800a598 <rclc_executor_spin_some.part.0+0x128>
 800a5ca:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a5ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f006 ff32 	bl	801143c <rcl_wait_set_add_client>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	f43f af79 	beq.w	800a4d0 <rclc_executor_spin_some.part.0+0x60>
 800a5de:	4607      	mov	r7, r0
 800a5e0:	f000 fa8a 	bl	800aaf8 <rcutils_reset_error>
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ea:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a5ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f006 fbd2 	bl	8010d9c <rcl_wait_set_add_subscription>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f43f af69 	beq.w	800a4d0 <rclc_executor_spin_some.part.0+0x60>
 800a5fe:	4607      	mov	r7, r0
 800a600:	e7ee      	b.n	800a5e0 <rclc_executor_spin_some.part.0+0x170>
 800a602:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a606:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a60a:	4630      	mov	r0, r6
 800a60c:	f006 fee6 	bl	80113dc <rcl_wait_set_add_timer>
 800a610:	2800      	cmp	r0, #0
 800a612:	f43f af5d 	beq.w	800a4d0 <rclc_executor_spin_some.part.0+0x60>
 800a616:	4607      	mov	r7, r0
 800a618:	e7e2      	b.n	800a5e0 <rclc_executor_spin_some.part.0+0x170>
 800a61a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a61e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a622:	4630      	mov	r0, r6
 800a624:	f006 feae 	bl	8011384 <rcl_wait_set_add_guard_condition>
 800a628:	2800      	cmp	r0, #0
 800a62a:	f43f af51 	beq.w	800a4d0 <rclc_executor_spin_some.part.0+0x60>
 800a62e:	4607      	mov	r7, r0
 800a630:	e7d6      	b.n	800a5e0 <rclc_executor_spin_some.part.0+0x170>
 800a632:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a636:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a63a:	4630      	mov	r0, r6
 800a63c:	3110      	adds	r1, #16
 800a63e:	f007 fc2d 	bl	8011e9c <rcl_action_wait_set_add_action_server>
 800a642:	2800      	cmp	r0, #0
 800a644:	f43f af44 	beq.w	800a4d0 <rclc_executor_spin_some.part.0+0x60>
 800a648:	4607      	mov	r7, r0
 800a64a:	e7c9      	b.n	800a5e0 <rclc_executor_spin_some.part.0+0x170>
 800a64c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a650:	2300      	movs	r3, #0
 800a652:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a656:	4630      	mov	r0, r6
 800a658:	3110      	adds	r1, #16
 800a65a:	f007 f9f5 	bl	8011a48 <rcl_action_wait_set_add_action_client>
 800a65e:	2800      	cmp	r0, #0
 800a660:	f43f af36 	beq.w	800a4d0 <rclc_executor_spin_some.part.0+0x60>
 800a664:	4607      	mov	r7, r0
 800a666:	e7bb      	b.n	800a5e0 <rclc_executor_spin_some.part.0+0x170>
 800a668:	2701      	movs	r7, #1
 800a66a:	f000 fa45 	bl	800aaf8 <rcutils_reset_error>
 800a66e:	4638      	mov	r0, r7
 800a670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a674:	4627      	mov	r7, r4
 800a676:	e7fa      	b.n	800a66e <rclc_executor_spin_some.part.0+0x1fe>
 800a678:	68ab      	ldr	r3, [r5, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 8093 	beq.w	800a7a6 <rclc_executor_spin_some.part.0+0x336>
 800a680:	2400      	movs	r4, #0
 800a682:	f240 1991 	movw	r9, #401	; 0x191
 800a686:	46a0      	mov	r8, r4
 800a688:	e008      	b.n	800a69c <rclc_executor_spin_some.part.0+0x22c>
 800a68a:	f7ff fa9b 	bl	8009bc4 <_rclc_check_for_new_data>
 800a68e:	4604      	mov	r4, r0
 800a690:	b108      	cbz	r0, 800a696 <rclc_executor_spin_some.part.0+0x226>
 800a692:	4548      	cmp	r0, r9
 800a694:	d1ee      	bne.n	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a696:	68ab      	ldr	r3, [r5, #8]
 800a698:	4598      	cmp	r8, r3
 800a69a:	d266      	bcs.n	800a76a <rclc_executor_spin_some.part.0+0x2fa>
 800a69c:	686a      	ldr	r2, [r5, #4]
 800a69e:	4631      	mov	r1, r6
 800a6a0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a6a4:	f108 0801 	add.w	r8, r8, #1
 800a6a8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a6ac:	f1bc 0f00 	cmp.w	ip, #0
 800a6b0:	d1eb      	bne.n	800a68a <rclc_executor_spin_some.part.0+0x21a>
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a6ba:	4798      	blx	r3
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d0d9      	beq.n	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a6c0:	68ab      	ldr	r3, [r5, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0d6      	beq.n	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a6c6:	f04f 0a00 	mov.w	sl, #0
 800a6ca:	f240 1891 	movw	r8, #401	; 0x191
 800a6ce:	f240 2959 	movw	r9, #601	; 0x259
 800a6d2:	e00e      	b.n	800a6f2 <rclc_executor_spin_some.part.0+0x282>
 800a6d4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d034      	beq.n	800a746 <rclc_executor_spin_some.part.0+0x2d6>
 800a6dc:	2b09      	cmp	r3, #9
 800a6de:	d029      	beq.n	800a734 <rclc_executor_spin_some.part.0+0x2c4>
 800a6e0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a6e4:	bb03      	cbnz	r3, 800a728 <rclc_executor_spin_some.part.0+0x2b8>
 800a6e6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ea:	68ab      	ldr	r3, [r5, #8]
 800a6ec:	459a      	cmp	sl, r3
 800a6ee:	d2be      	bcs.n	800a66e <rclc_executor_spin_some.part.0+0x1fe>
 800a6f0:	2400      	movs	r4, #0
 800a6f2:	6868      	ldr	r0, [r5, #4]
 800a6f4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a6f8:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a6fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a700:	2b00      	cmp	r3, #0
 800a702:	d0b7      	beq.n	800a674 <rclc_executor_spin_some.part.0+0x204>
 800a704:	4631      	mov	r1, r6
 800a706:	f7ff faab 	bl	8009c60 <_rclc_take_new_data>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	bf18      	it	ne
 800a70e:	4540      	cmpne	r0, r8
 800a710:	d001      	beq.n	800a716 <rclc_executor_spin_some.part.0+0x2a6>
 800a712:	4548      	cmp	r0, r9
 800a714:	d10c      	bne.n	800a730 <rclc_executor_spin_some.part.0+0x2c0>
 800a716:	686b      	ldr	r3, [r5, #4]
 800a718:	eb13 000b 	adds.w	r0, r3, fp
 800a71c:	d021      	beq.n	800a762 <rclc_executor_spin_some.part.0+0x2f2>
 800a71e:	7842      	ldrb	r2, [r0, #1]
 800a720:	2a00      	cmp	r2, #0
 800a722:	d0d7      	beq.n	800a6d4 <rclc_executor_spin_some.part.0+0x264>
 800a724:	2a01      	cmp	r2, #1
 800a726:	d1de      	bne.n	800a6e6 <rclc_executor_spin_some.part.0+0x276>
 800a728:	f7ff fc0e 	bl	8009f48 <_rclc_execute.part.0>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d0da      	beq.n	800a6e6 <rclc_executor_spin_some.part.0+0x276>
 800a730:	4607      	mov	r7, r0
 800a732:	e79c      	b.n	800a66e <rclc_executor_spin_some.part.0+0x1fe>
 800a734:	6843      	ldr	r3, [r0, #4]
 800a736:	6a1a      	ldr	r2, [r3, #32]
 800a738:	2a00      	cmp	r2, #0
 800a73a:	d1f5      	bne.n	800a728 <rclc_executor_spin_some.part.0+0x2b8>
 800a73c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a740:	2b00      	cmp	r3, #0
 800a742:	d0d0      	beq.n	800a6e6 <rclc_executor_spin_some.part.0+0x276>
 800a744:	e7f0      	b.n	800a728 <rclc_executor_spin_some.part.0+0x2b8>
 800a746:	6843      	ldr	r3, [r0, #4]
 800a748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a74a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800a74e:	d1eb      	bne.n	800a728 <rclc_executor_spin_some.part.0+0x2b8>
 800a750:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a754:	2a00      	cmp	r2, #0
 800a756:	d1e7      	bne.n	800a728 <rclc_executor_spin_some.part.0+0x2b8>
 800a758:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0c2      	beq.n	800a6e6 <rclc_executor_spin_some.part.0+0x276>
 800a760:	e7e2      	b.n	800a728 <rclc_executor_spin_some.part.0+0x2b8>
 800a762:	270b      	movs	r7, #11
 800a764:	e783      	b.n	800a66e <rclc_executor_spin_some.part.0+0x1fe>
 800a766:	686a      	ldr	r2, [r5, #4]
 800a768:	e6e2      	b.n	800a530 <rclc_executor_spin_some.part.0+0xc0>
 800a76a:	686a      	ldr	r2, [r5, #4]
 800a76c:	e7a1      	b.n	800a6b2 <rclc_executor_spin_some.part.0+0x242>
 800a76e:	6842      	ldr	r2, [r0, #4]
 800a770:	6a11      	ldr	r1, [r2, #32]
 800a772:	2900      	cmp	r1, #0
 800a774:	f47f af22 	bne.w	800a5bc <rclc_executor_spin_some.part.0+0x14c>
 800a778:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	f43f af0b 	beq.w	800a598 <rclc_executor_spin_some.part.0+0x128>
 800a782:	e71b      	b.n	800a5bc <rclc_executor_spin_some.part.0+0x14c>
 800a784:	6842      	ldr	r2, [r0, #4]
 800a786:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a788:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800a78c:	f47f af16 	bne.w	800a5bc <rclc_executor_spin_some.part.0+0x14c>
 800a790:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800a794:	2900      	cmp	r1, #0
 800a796:	f47f af11 	bne.w	800a5bc <rclc_executor_spin_some.part.0+0x14c>
 800a79a:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	f43f aefa 	beq.w	800a598 <rclc_executor_spin_some.part.0+0x128>
 800a7a4:	e70a      	b.n	800a5bc <rclc_executor_spin_some.part.0+0x14c>
 800a7a6:	686a      	ldr	r2, [r5, #4]
 800a7a8:	461c      	mov	r4, r3
 800a7aa:	e782      	b.n	800a6b2 <rclc_executor_spin_some.part.0+0x242>
 800a7ac:	686a      	ldr	r2, [r5, #4]
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	e6be      	b.n	800a530 <rclc_executor_spin_some.part.0+0xc0>
 800a7b2:	bf00      	nop

0800a7b4 <rclc_executor_spin_some>:
 800a7b4:	b190      	cbz	r0, 800a7dc <rclc_executor_spin_some+0x28>
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	6800      	ldr	r0, [r0, #0]
 800a7bc:	4616      	mov	r6, r2
 800a7be:	461d      	mov	r5, r3
 800a7c0:	f005 f852 	bl	800f868 <rcl_context_is_valid>
 800a7c4:	b130      	cbz	r0, 800a7d4 <rclc_executor_spin_some+0x20>
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7d0:	f7ff be4e 	b.w	800a470 <rclc_executor_spin_some.part.0>
 800a7d4:	f000 f990 	bl	800aaf8 <rcutils_reset_error>
 800a7d8:	2001      	movs	r0, #1
 800a7da:	bd70      	pop	{r4, r5, r6, pc}
 800a7dc:	200b      	movs	r0, #11
 800a7de:	4770      	bx	lr

0800a7e0 <rclc_executor_handle_counters_zero_init>:
 800a7e0:	b130      	cbz	r0, 800a7f0 <rclc_executor_handle_counters_zero_init+0x10>
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	b508      	push	{r3, lr}
 800a7e8:	f00c fa56 	bl	8016c98 <memset>
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	bd08      	pop	{r3, pc}
 800a7f0:	200b      	movs	r0, #11
 800a7f2:	4770      	bx	lr
 800a7f4:	0000      	movs	r0, r0
	...

0800a7f8 <rclc_executor_handle_init>:
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	b178      	cbz	r0, 800a81c <rclc_executor_handle_init+0x24>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f04f 0c0b 	mov.w	ip, #11
 800a802:	6341      	str	r1, [r0, #52]	; 0x34
 800a804:	4610      	mov	r0, r2
 800a806:	f8a3 c000 	strh.w	ip, [r3]
 800a80a:	631a      	str	r2, [r3, #48]	; 0x30
 800a80c:	871a      	strh	r2, [r3, #56]	; 0x38
 800a80e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800a820 <rclc_executor_handle_init+0x28>
 800a812:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800a816:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800a81a:	4770      	bx	lr
 800a81c:	200b      	movs	r0, #11
 800a81e:	4770      	bx	lr
	...

0800a828 <rclc_support_init>:
 800a828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	b3bb      	cbz	r3, 800a8a0 <rclc_support_init+0x78>
 800a830:	4606      	mov	r6, r0
 800a832:	b3a8      	cbz	r0, 800a8a0 <rclc_support_init+0x78>
 800a834:	461c      	mov	r4, r3
 800a836:	460f      	mov	r7, r1
 800a838:	4690      	mov	r8, r2
 800a83a:	f005 f981 	bl	800fb40 <rcl_get_zero_initialized_init_options>
 800a83e:	f104 050c 	add.w	r5, r4, #12
 800a842:	9005      	str	r0, [sp, #20]
 800a844:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a848:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a84c:	a805      	add	r0, sp, #20
 800a84e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a852:	f005 f977 	bl	800fb44 <rcl_init_options_init>
 800a856:	4605      	mov	r5, r0
 800a858:	b9e0      	cbnz	r0, 800a894 <rclc_support_init+0x6c>
 800a85a:	ad02      	add	r5, sp, #8
 800a85c:	4628      	mov	r0, r5
 800a85e:	f004 fff9 	bl	800f854 <rcl_get_zero_initialized_context>
 800a862:	4633      	mov	r3, r6
 800a864:	aa05      	add	r2, sp, #20
 800a866:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a86a:	e886 0003 	stmia.w	r6, {r0, r1}
 800a86e:	4641      	mov	r1, r8
 800a870:	4638      	mov	r0, r7
 800a872:	f005 f85f 	bl	800f934 <rcl_init>
 800a876:	4605      	mov	r5, r0
 800a878:	b9b8      	cbnz	r0, 800a8aa <rclc_support_init+0x82>
 800a87a:	4622      	mov	r2, r4
 800a87c:	f106 010c 	add.w	r1, r6, #12
 800a880:	2003      	movs	r0, #3
 800a882:	60b4      	str	r4, [r6, #8]
 800a884:	f005 ffc6 	bl	8010814 <rcl_clock_init>
 800a888:	4605      	mov	r5, r0
 800a88a:	b970      	cbnz	r0, 800a8aa <rclc_support_init+0x82>
 800a88c:	a805      	add	r0, sp, #20
 800a88e:	f005 f9bf 	bl	800fc10 <rcl_init_options_fini>
 800a892:	b108      	cbz	r0, 800a898 <rclc_support_init+0x70>
 800a894:	f000 f930 	bl	800aaf8 <rcutils_reset_error>
 800a898:	4628      	mov	r0, r5
 800a89a:	b006      	add	sp, #24
 800a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a0:	250b      	movs	r5, #11
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	b006      	add	sp, #24
 800a8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8aa:	f000 f925 	bl	800aaf8 <rcutils_reset_error>
 800a8ae:	a805      	add	r0, sp, #20
 800a8b0:	f005 f9ae 	bl	800fc10 <rcl_init_options_fini>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d0ef      	beq.n	800a898 <rclc_support_init+0x70>
 800a8b8:	e7ec      	b.n	800a894 <rclc_support_init+0x6c>
 800a8ba:	bf00      	nop

0800a8bc <rclc_node_init_default>:
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bf18      	it	ne
 800a8c0:	2a00      	cmpne	r2, #0
 800a8c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8c6:	4616      	mov	r6, r2
 800a8c8:	bf0c      	ite	eq
 800a8ca:	2201      	moveq	r2, #1
 800a8cc:	2200      	movne	r2, #0
 800a8ce:	b0a1      	sub	sp, #132	; 0x84
 800a8d0:	2900      	cmp	r1, #0
 800a8d2:	bf08      	it	eq
 800a8d4:	f042 0201 	orreq.w	r2, r2, #1
 800a8d8:	bb22      	cbnz	r2, 800a924 <rclc_node_init_default+0x68>
 800a8da:	4604      	mov	r4, r0
 800a8dc:	b310      	cbz	r0, 800a924 <rclc_node_init_default+0x68>
 800a8de:	f10d 0810 	add.w	r8, sp, #16
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	460d      	mov	r5, r1
 800a8e6:	f10d 0918 	add.w	r9, sp, #24
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	f005 fa4a 	bl	800fd84 <rcl_get_zero_initialized_node>
 800a8f0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a8f4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8f8:	4648      	mov	r0, r9
 800a8fa:	f005 fbbd 	bl	8010078 <rcl_node_get_default_options>
 800a8fe:	4640      	mov	r0, r8
 800a900:	f005 fa40 	bl	800fd84 <rcl_get_zero_initialized_node>
 800a904:	f8cd 9000 	str.w	r9, [sp]
 800a908:	463b      	mov	r3, r7
 800a90a:	4632      	mov	r2, r6
 800a90c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a910:	e884 0003 	stmia.w	r4, {r0, r1}
 800a914:	4629      	mov	r1, r5
 800a916:	4620      	mov	r0, r4
 800a918:	f005 fa3e 	bl	800fd98 <rcl_node_init>
 800a91c:	b930      	cbnz	r0, 800a92c <rclc_node_init_default+0x70>
 800a91e:	b021      	add	sp, #132	; 0x84
 800a920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a924:	200b      	movs	r0, #11
 800a926:	b021      	add	sp, #132	; 0x84
 800a928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92c:	9003      	str	r0, [sp, #12]
 800a92e:	f000 f8e3 	bl	800aaf8 <rcutils_reset_error>
 800a932:	f000 f8e1 	bl	800aaf8 <rcutils_reset_error>
 800a936:	9803      	ldr	r0, [sp, #12]
 800a938:	b021      	add	sp, #132	; 0x84
 800a93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93e:	bf00      	nop

0800a940 <rclc_publisher_init_default>:
 800a940:	2b00      	cmp	r3, #0
 800a942:	bf18      	it	ne
 800a944:	2a00      	cmpne	r2, #0
 800a946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94a:	4616      	mov	r6, r2
 800a94c:	bf0c      	ite	eq
 800a94e:	2201      	moveq	r2, #1
 800a950:	2200      	movne	r2, #0
 800a952:	b0a0      	sub	sp, #128	; 0x80
 800a954:	2900      	cmp	r1, #0
 800a956:	bf08      	it	eq
 800a958:	f042 0201 	orreq.w	r2, r2, #1
 800a95c:	bb1a      	cbnz	r2, 800a9a6 <rclc_publisher_init_default+0x66>
 800a95e:	4604      	mov	r4, r0
 800a960:	b308      	cbz	r0, 800a9a6 <rclc_publisher_init_default+0x66>
 800a962:	f10d 0810 	add.w	r8, sp, #16
 800a966:	461f      	mov	r7, r3
 800a968:	460d      	mov	r5, r1
 800a96a:	f7ff f817 	bl	800999c <rcl_get_zero_initialized_publisher>
 800a96e:	6020      	str	r0, [r4, #0]
 800a970:	4640      	mov	r0, r8
 800a972:	f7ff f8b3 	bl	8009adc <rcl_publisher_get_default_options>
 800a976:	2250      	movs	r2, #80	; 0x50
 800a978:	490d      	ldr	r1, [pc, #52]	; (800a9b0 <rclc_publisher_init_default+0x70>)
 800a97a:	4640      	mov	r0, r8
 800a97c:	f00c fa55 	bl	8016e2a <memcpy>
 800a980:	463b      	mov	r3, r7
 800a982:	4632      	mov	r2, r6
 800a984:	4629      	mov	r1, r5
 800a986:	4620      	mov	r0, r4
 800a988:	f8cd 8000 	str.w	r8, [sp]
 800a98c:	f7ff f80c 	bl	80099a8 <rcl_publisher_init>
 800a990:	b910      	cbnz	r0, 800a998 <rclc_publisher_init_default+0x58>
 800a992:	b020      	add	sp, #128	; 0x80
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	9003      	str	r0, [sp, #12]
 800a99a:	f000 f8ad 	bl	800aaf8 <rcutils_reset_error>
 800a99e:	9803      	ldr	r0, [sp, #12]
 800a9a0:	b020      	add	sp, #128	; 0x80
 800a9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a6:	200b      	movs	r0, #11
 800a9a8:	b020      	add	sp, #128	; 0x80
 800a9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ae:	bf00      	nop
 800a9b0:	08017ed0 	.word	0x08017ed0

0800a9b4 <rclc_subscription_init_default>:
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf18      	it	ne
 800a9b8:	2a00      	cmpne	r2, #0
 800a9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	4616      	mov	r6, r2
 800a9c0:	bf0c      	ite	eq
 800a9c2:	2201      	moveq	r2, #1
 800a9c4:	2200      	movne	r2, #0
 800a9c6:	b0a0      	sub	sp, #128	; 0x80
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	bf08      	it	eq
 800a9cc:	f042 0201 	orreq.w	r2, r2, #1
 800a9d0:	bb1a      	cbnz	r2, 800aa1a <rclc_subscription_init_default+0x66>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	b308      	cbz	r0, 800aa1a <rclc_subscription_init_default+0x66>
 800a9d6:	f10d 0810 	add.w	r8, sp, #16
 800a9da:	461f      	mov	r7, r3
 800a9dc:	460d      	mov	r5, r1
 800a9de:	f005 fdb7 	bl	8010550 <rcl_get_zero_initialized_subscription>
 800a9e2:	6020      	str	r0, [r4, #0]
 800a9e4:	4640      	mov	r0, r8
 800a9e6:	f005 fe67 	bl	80106b8 <rcl_subscription_get_default_options>
 800a9ea:	2250      	movs	r2, #80	; 0x50
 800a9ec:	490d      	ldr	r1, [pc, #52]	; (800aa24 <rclc_subscription_init_default+0x70>)
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	f00c fa1b 	bl	8016e2a <memcpy>
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	4632      	mov	r2, r6
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f8cd 8000 	str.w	r8, [sp]
 800aa00:	f005 fdac 	bl	801055c <rcl_subscription_init>
 800aa04:	b910      	cbnz	r0, 800aa0c <rclc_subscription_init_default+0x58>
 800aa06:	b020      	add	sp, #128	; 0x80
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0c:	9003      	str	r0, [sp, #12]
 800aa0e:	f000 f873 	bl	800aaf8 <rcutils_reset_error>
 800aa12:	9803      	ldr	r0, [sp, #12]
 800aa14:	b020      	add	sp, #128	; 0x80
 800aa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1a:	200b      	movs	r0, #11
 800aa1c:	b020      	add	sp, #128	; 0x80
 800aa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa22:	bf00      	nop
 800aa24:	08017f20 	.word	0x08017f20

0800aa28 <__default_zero_allocate>:
 800aa28:	f00b bd46 	b.w	80164b8 <calloc>

0800aa2c <__default_reallocate>:
 800aa2c:	f00b bed2 	b.w	80167d4 <realloc>

0800aa30 <__default_deallocate>:
 800aa30:	f00b bdb0 	b.w	8016594 <free>

0800aa34 <__default_allocate>:
 800aa34:	f00b bda6 	b.w	8016584 <malloc>

0800aa38 <rcutils_get_zero_initialized_allocator>:
 800aa38:	b510      	push	{r4, lr}
 800aa3a:	4c05      	ldr	r4, [pc, #20]	; (800aa50 <rcutils_get_zero_initialized_allocator+0x18>)
 800aa3c:	4686      	mov	lr, r0
 800aa3e:	4684      	mov	ip, r0
 800aa40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	4670      	mov	r0, lr
 800aa4a:	f8cc 3000 	str.w	r3, [ip]
 800aa4e:	bd10      	pop	{r4, pc}
 800aa50:	08017f70 	.word	0x08017f70

0800aa54 <rcutils_set_default_allocator>:
 800aa54:	b1a8      	cbz	r0, 800aa82 <rcutils_set_default_allocator+0x2e>
 800aa56:	6802      	ldr	r2, [r0, #0]
 800aa58:	b1a2      	cbz	r2, 800aa84 <rcutils_set_default_allocator+0x30>
 800aa5a:	6841      	ldr	r1, [r0, #4]
 800aa5c:	b1a1      	cbz	r1, 800aa88 <rcutils_set_default_allocator+0x34>
 800aa5e:	b410      	push	{r4}
 800aa60:	68c4      	ldr	r4, [r0, #12]
 800aa62:	b164      	cbz	r4, 800aa7e <rcutils_set_default_allocator+0x2a>
 800aa64:	6880      	ldr	r0, [r0, #8]
 800aa66:	b138      	cbz	r0, 800aa78 <rcutils_set_default_allocator+0x24>
 800aa68:	4b08      	ldr	r3, [pc, #32]	; (800aa8c <rcutils_set_default_allocator+0x38>)
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800aa72:	2001      	movs	r0, #1
 800aa74:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800aa78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	4620      	mov	r0, r4
 800aa80:	e7fa      	b.n	800aa78 <rcutils_set_default_allocator+0x24>
 800aa82:	4770      	bx	lr
 800aa84:	4610      	mov	r0, r2
 800aa86:	4770      	bx	lr
 800aa88:	4608      	mov	r0, r1
 800aa8a:	4770      	bx	lr
 800aa8c:	20000014 	.word	0x20000014

0800aa90 <rcutils_get_default_allocator>:
 800aa90:	b510      	push	{r4, lr}
 800aa92:	4c05      	ldr	r4, [pc, #20]	; (800aaa8 <rcutils_get_default_allocator+0x18>)
 800aa94:	4686      	mov	lr, r0
 800aa96:	4684      	mov	ip, r0
 800aa98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	4670      	mov	r0, lr
 800aaa2:	f8cc 3000 	str.w	r3, [ip]
 800aaa6:	bd10      	pop	{r4, pc}
 800aaa8:	20000014 	.word	0x20000014

0800aaac <rcutils_allocator_is_valid>:
 800aaac:	b158      	cbz	r0, 800aac6 <rcutils_allocator_is_valid+0x1a>
 800aaae:	6803      	ldr	r3, [r0, #0]
 800aab0:	b143      	cbz	r3, 800aac4 <rcutils_allocator_is_valid+0x18>
 800aab2:	6843      	ldr	r3, [r0, #4]
 800aab4:	b133      	cbz	r3, 800aac4 <rcutils_allocator_is_valid+0x18>
 800aab6:	68c3      	ldr	r3, [r0, #12]
 800aab8:	b123      	cbz	r3, 800aac4 <rcutils_allocator_is_valid+0x18>
 800aaba:	6880      	ldr	r0, [r0, #8]
 800aabc:	3800      	subs	r0, #0
 800aabe:	bf18      	it	ne
 800aac0:	2001      	movne	r0, #1
 800aac2:	4770      	bx	lr
 800aac4:	4618      	mov	r0, r3
 800aac6:	4770      	bx	lr

0800aac8 <rcutils_get_error_string>:
 800aac8:	4b06      	ldr	r3, [pc, #24]	; (800aae4 <rcutils_get_error_string+0x1c>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	b13b      	cbz	r3, 800aade <rcutils_get_error_string+0x16>
 800aace:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <rcutils_get_error_string+0x20>)
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	b90a      	cbnz	r2, 800aad8 <rcutils_get_error_string+0x10>
 800aad4:	2201      	movs	r2, #1
 800aad6:	701a      	strb	r2, [r3, #0]
 800aad8:	4b04      	ldr	r3, [pc, #16]	; (800aaec <rcutils_get_error_string+0x24>)
 800aada:	7818      	ldrb	r0, [r3, #0]
 800aadc:	4770      	bx	lr
 800aade:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <rcutils_get_error_string+0x28>)
 800aae0:	7818      	ldrb	r0, [r3, #0]
 800aae2:	4770      	bx	lr
 800aae4:	2000e6a0 	.word	0x2000e6a0
 800aae8:	2000e6b9 	.word	0x2000e6b9
 800aaec:	2000e6b8 	.word	0x2000e6b8
 800aaf0:	08017f84 	.word	0x08017f84
 800aaf4:	00000000 	.word	0x00000000

0800aaf8 <rcutils_reset_error>:
 800aaf8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800ab18 <rcutils_reset_error+0x20>
 800aafc:	2300      	movs	r3, #0
 800aafe:	4a08      	ldr	r2, [pc, #32]	; (800ab20 <rcutils_reset_error+0x28>)
 800ab00:	4808      	ldr	r0, [pc, #32]	; (800ab24 <rcutils_reset_error+0x2c>)
 800ab02:	8013      	strh	r3, [r2, #0]
 800ab04:	4908      	ldr	r1, [pc, #32]	; (800ab28 <rcutils_reset_error+0x30>)
 800ab06:	7003      	strb	r3, [r0, #0]
 800ab08:	700b      	strb	r3, [r1, #0]
 800ab0a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ab0e:	4a07      	ldr	r2, [pc, #28]	; (800ab2c <rcutils_reset_error+0x34>)
 800ab10:	7013      	strb	r3, [r2, #0]
 800ab12:	4770      	bx	lr
 800ab14:	f3af 8000 	nop.w
	...
 800ab20:	2000e6a8 	.word	0x2000e6a8
 800ab24:	2000e6b9 	.word	0x2000e6b9
 800ab28:	2000e6b8 	.word	0x2000e6b8
 800ab2c:	2000e6a0 	.word	0x2000e6a0

0800ab30 <rcutils_system_time_now>:
 800ab30:	b300      	cbz	r0, 800ab74 <rcutils_system_time_now+0x44>
 800ab32:	b570      	push	{r4, r5, r6, lr}
 800ab34:	b084      	sub	sp, #16
 800ab36:	4604      	mov	r4, r0
 800ab38:	2001      	movs	r0, #1
 800ab3a:	4669      	mov	r1, sp
 800ab3c:	f7f6 fd58 	bl	80015f0 <clock_gettime>
 800ab40:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ab44:	2900      	cmp	r1, #0
 800ab46:	db12      	blt.n	800ab6e <rcutils_system_time_now+0x3e>
 800ab48:	ea53 0201 	orrs.w	r2, r3, r1
 800ab4c:	9d02      	ldr	r5, [sp, #8]
 800ab4e:	d101      	bne.n	800ab54 <rcutils_system_time_now+0x24>
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	db0c      	blt.n	800ab6e <rcutils_system_time_now+0x3e>
 800ab54:	4e08      	ldr	r6, [pc, #32]	; (800ab78 <rcutils_system_time_now+0x48>)
 800ab56:	2000      	movs	r0, #0
 800ab58:	fba3 3206 	umull	r3, r2, r3, r6
 800ab5c:	195b      	adds	r3, r3, r5
 800ab5e:	fb06 2201 	mla	r2, r6, r1, r2
 800ab62:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ab66:	e9c4 3200 	strd	r3, r2, [r4]
 800ab6a:	b004      	add	sp, #16
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	2002      	movs	r0, #2
 800ab70:	b004      	add	sp, #16
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	200b      	movs	r0, #11
 800ab76:	4770      	bx	lr
 800ab78:	3b9aca00 	.word	0x3b9aca00

0800ab7c <rcutils_steady_time_now>:
 800ab7c:	b300      	cbz	r0, 800abc0 <rcutils_steady_time_now+0x44>
 800ab7e:	b570      	push	{r4, r5, r6, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	4604      	mov	r4, r0
 800ab84:	2000      	movs	r0, #0
 800ab86:	4669      	mov	r1, sp
 800ab88:	f7f6 fd32 	bl	80015f0 <clock_gettime>
 800ab8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ab90:	2900      	cmp	r1, #0
 800ab92:	db12      	blt.n	800abba <rcutils_steady_time_now+0x3e>
 800ab94:	ea53 0201 	orrs.w	r2, r3, r1
 800ab98:	9d02      	ldr	r5, [sp, #8]
 800ab9a:	d101      	bne.n	800aba0 <rcutils_steady_time_now+0x24>
 800ab9c:	2d00      	cmp	r5, #0
 800ab9e:	db0c      	blt.n	800abba <rcutils_steady_time_now+0x3e>
 800aba0:	4e08      	ldr	r6, [pc, #32]	; (800abc4 <rcutils_steady_time_now+0x48>)
 800aba2:	2000      	movs	r0, #0
 800aba4:	fba3 3206 	umull	r3, r2, r3, r6
 800aba8:	195b      	adds	r3, r3, r5
 800abaa:	fb06 2201 	mla	r2, r6, r1, r2
 800abae:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800abb2:	e9c4 3200 	strd	r3, r2, [r4]
 800abb6:	b004      	add	sp, #16
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	2002      	movs	r0, #2
 800abbc:	b004      	add	sp, #16
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	200b      	movs	r0, #11
 800abc2:	4770      	bx	lr
 800abc4:	3b9aca00 	.word	0x3b9aca00

0800abc8 <rmw_get_default_publisher_options>:
 800abc8:	2200      	movs	r2, #0
 800abca:	6002      	str	r2, [r0, #0]
 800abcc:	7102      	strb	r2, [r0, #4]
 800abce:	4770      	bx	lr

0800abd0 <rmw_uros_set_custom_transport>:
 800abd0:	b470      	push	{r4, r5, r6}
 800abd2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800abd6:	b162      	cbz	r2, 800abf2 <rmw_uros_set_custom_transport+0x22>
 800abd8:	b15b      	cbz	r3, 800abf2 <rmw_uros_set_custom_transport+0x22>
 800abda:	b155      	cbz	r5, 800abf2 <rmw_uros_set_custom_transport+0x22>
 800abdc:	b14e      	cbz	r6, 800abf2 <rmw_uros_set_custom_transport+0x22>
 800abde:	4c06      	ldr	r4, [pc, #24]	; (800abf8 <rmw_uros_set_custom_transport+0x28>)
 800abe0:	7020      	strb	r0, [r4, #0]
 800abe2:	2000      	movs	r0, #0
 800abe4:	6166      	str	r6, [r4, #20]
 800abe6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800abea:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800abee:	bc70      	pop	{r4, r5, r6}
 800abf0:	4770      	bx	lr
 800abf2:	200b      	movs	r0, #11
 800abf4:	bc70      	pop	{r4, r5, r6}
 800abf6:	4770      	bx	lr
 800abf8:	2000e6bc 	.word	0x2000e6bc

0800abfc <flush_session>:
 800abfc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800abfe:	f002 bdff 	b.w	800d800 <uxr_run_session_until_confirm_delivery>
 800ac02:	bf00      	nop

0800ac04 <rmw_publish>:
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d053      	beq.n	800acb0 <rmw_publish+0xac>
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	460d      	mov	r5, r1
 800ac0c:	b08e      	sub	sp, #56	; 0x38
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	d04b      	beq.n	800acaa <rmw_publish+0xa6>
 800ac12:	4604      	mov	r4, r0
 800ac14:	6800      	ldr	r0, [r0, #0]
 800ac16:	f000 fcff 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d045      	beq.n	800acaa <rmw_publish+0xa6>
 800ac1e:	6866      	ldr	r6, [r4, #4]
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	d042      	beq.n	800acaa <rmw_publish+0xa6>
 800ac24:	69b4      	ldr	r4, [r6, #24]
 800ac26:	4628      	mov	r0, r5
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	4798      	blx	r3
 800ac2c:	69f3      	ldr	r3, [r6, #28]
 800ac2e:	9005      	str	r0, [sp, #20]
 800ac30:	b113      	cbz	r3, 800ac38 <rmw_publish+0x34>
 800ac32:	a805      	add	r0, sp, #20
 800ac34:	4798      	blx	r3
 800ac36:	9805      	ldr	r0, [sp, #20]
 800ac38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	9000      	str	r0, [sp, #0]
 800ac40:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ac44:	6972      	ldr	r2, [r6, #20]
 800ac46:	ab06      	add	r3, sp, #24
 800ac48:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ac4a:	f003 fbd7 	bl	800e3fc <uxr_prepare_output_stream>
 800ac4e:	b1d8      	cbz	r0, 800ac88 <rmw_publish+0x84>
 800ac50:	68a3      	ldr	r3, [r4, #8]
 800ac52:	a906      	add	r1, sp, #24
 800ac54:	4628      	mov	r0, r5
 800ac56:	4798      	blx	r3
 800ac58:	6a33      	ldr	r3, [r6, #32]
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	b10b      	cbz	r3, 800ac62 <rmw_publish+0x5e>
 800ac5e:	a806      	add	r0, sp, #24
 800ac60:	4798      	blx	r3
 800ac62:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ac6c:	d022      	beq.n	800acb4 <rmw_publish+0xb0>
 800ac6e:	6918      	ldr	r0, [r3, #16]
 800ac70:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ac72:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ac76:	f002 fdc3 	bl	800d800 <uxr_run_session_until_confirm_delivery>
 800ac7a:	4020      	ands	r0, r4
 800ac7c:	b2c4      	uxtb	r4, r0
 800ac7e:	f084 0001 	eor.w	r0, r4, #1
 800ac82:	b2c0      	uxtb	r0, r0
 800ac84:	b00e      	add	sp, #56	; 0x38
 800ac86:	bd70      	pop	{r4, r5, r6, pc}
 800ac88:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ac8c:	6918      	ldr	r0, [r3, #16]
 800ac8e:	9b05      	ldr	r3, [sp, #20]
 800ac90:	9602      	str	r6, [sp, #8]
 800ac92:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	4b09      	ldr	r3, [pc, #36]	; (800acc0 <rmw_publish+0xbc>)
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	ab06      	add	r3, sp, #24
 800ac9e:	6972      	ldr	r2, [r6, #20]
 800aca0:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800aca2:	f003 fbdb 	bl	800e45c <uxr_prepare_output_stream_fragmented>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d1d2      	bne.n	800ac50 <rmw_publish+0x4c>
 800acaa:	2001      	movs	r0, #1
 800acac:	b00e      	add	sp, #56	; 0x38
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	2001      	movs	r0, #1
 800acb2:	4770      	bx	lr
 800acb4:	6918      	ldr	r0, [r3, #16]
 800acb6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800acba:	f002 f9e7 	bl	800d08c <uxr_flash_output_streams>
 800acbe:	e7de      	b.n	800ac7e <rmw_publish+0x7a>
 800acc0:	0800abfd 	.word	0x0800abfd

0800acc4 <rmw_create_publisher>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	b087      	sub	sp, #28
 800acca:	2800      	cmp	r0, #0
 800accc:	f000 80d2 	beq.w	800ae74 <rmw_create_publisher+0x1b0>
 800acd0:	460e      	mov	r6, r1
 800acd2:	2900      	cmp	r1, #0
 800acd4:	f000 80ce 	beq.w	800ae74 <rmw_create_publisher+0x1b0>
 800acd8:	4604      	mov	r4, r0
 800acda:	6800      	ldr	r0, [r0, #0]
 800acdc:	4615      	mov	r5, r2
 800acde:	461f      	mov	r7, r3
 800ace0:	f000 fc9a 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 800ace4:	f080 0001 	eor.w	r0, r0, #1
 800ace8:	b2c0      	uxtb	r0, r0
 800acea:	2800      	cmp	r0, #0
 800acec:	f040 80c2 	bne.w	800ae74 <rmw_create_publisher+0x1b0>
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	f000 80bf 	beq.w	800ae74 <rmw_create_publisher+0x1b0>
 800acf6:	782b      	ldrb	r3, [r5, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80bb 	beq.w	800ae74 <rmw_create_publisher+0x1b0>
 800acfe:	2f00      	cmp	r7, #0
 800ad00:	f000 80b8 	beq.w	800ae74 <rmw_create_publisher+0x1b0>
 800ad04:	485e      	ldr	r0, [pc, #376]	; (800ae80 <rmw_create_publisher+0x1bc>)
 800ad06:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ad0a:	f008 f88b 	bl	8012e24 <get_memory>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f000 80b0 	beq.w	800ae74 <rmw_create_publisher+0x1b0>
 800ad14:	6884      	ldr	r4, [r0, #8]
 800ad16:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800ad1a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800ad1e:	f008 f8e9 	bl	8012ef4 <rmw_get_implementation_identifier>
 800ad22:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ad26:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f7f5 fa7a 	bl	8000224 <strlen>
 800ad30:	3001      	adds	r0, #1
 800ad32:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800ad36:	283c      	cmp	r0, #60	; 0x3c
 800ad38:	f200 808f 	bhi.w	800ae5a <rmw_create_publisher+0x196>
 800ad3c:	462b      	mov	r3, r5
 800ad3e:	4a51      	ldr	r2, [pc, #324]	; (800ae84 <rmw_create_publisher+0x1c0>)
 800ad40:	213c      	movs	r1, #60	; 0x3c
 800ad42:	4650      	mov	r0, sl
 800ad44:	f00b fece 	bl	8016ae4 <sniprintf>
 800ad48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	2250      	movs	r2, #80	; 0x50
 800ad50:	67e3      	str	r3, [r4, #124]	; 0x7c
 800ad52:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad56:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800ad5a:	f00c f866 	bl	8016e2a <memcpy>
 800ad5e:	7a3b      	ldrb	r3, [r7, #8]
 800ad60:	4630      	mov	r0, r6
 800ad62:	4949      	ldr	r1, [pc, #292]	; (800ae88 <rmw_create_publisher+0x1c4>)
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad6a:	bf0c      	ite	eq
 800ad6c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800ad70:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ad74:	67a3      	str	r3, [r4, #120]	; 0x78
 800ad76:	2300      	movs	r3, #0
 800ad78:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ad7c:	f000 fc5a 	bl	800b634 <get_message_typesupport_handle>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d06a      	beq.n	800ae5a <rmw_create_publisher+0x196>
 800ad84:	6842      	ldr	r2, [r0, #4]
 800ad86:	61a2      	str	r2, [r4, #24]
 800ad88:	2a00      	cmp	r2, #0
 800ad8a:	d066      	beq.n	800ae5a <rmw_create_publisher+0x196>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	463b      	mov	r3, r7
 800ad90:	4648      	mov	r0, r9
 800ad92:	f008 fb1b 	bl	80133cc <create_topic>
 800ad96:	6260      	str	r0, [r4, #36]	; 0x24
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d062      	beq.n	800ae62 <rmw_create_publisher+0x19e>
 800ad9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ada0:	2103      	movs	r1, #3
 800ada2:	2506      	movs	r5, #6
 800ada4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800adac:	1c42      	adds	r2, r0, #1
 800adae:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800adb2:	f002 f81b 	bl	800cdec <uxr_object_id>
 800adb6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800adba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adbe:	6120      	str	r0, [r4, #16]
 800adc0:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800adc4:	6910      	ldr	r0, [r2, #16]
 800adc6:	9500      	str	r5, [sp, #0]
 800adc8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	6922      	ldr	r2, [r4, #16]
 800add0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800add4:	f001 febc 	bl	800cb50 <uxr_buffer_create_publisher_bin>
 800add8:	4602      	mov	r2, r0
 800adda:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800adde:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ade2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ade6:	f000 fb9d 	bl	800b524 <run_xrce_session>
 800adea:	b3b0      	cbz	r0, 800ae5a <rmw_create_publisher+0x196>
 800adec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adf0:	2105      	movs	r1, #5
 800adf2:	f10d 0a10 	add.w	sl, sp, #16
 800adf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adfa:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800adfe:	1c42      	adds	r2, r0, #1
 800ae00:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800ae04:	f001 fff2 	bl	800cdec <uxr_object_id>
 800ae08:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	6160      	str	r0, [r4, #20]
 800ae10:	691e      	ldr	r6, [r3, #16]
 800ae12:	4650      	mov	r0, sl
 800ae14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae18:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ae1c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800ae20:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800ae24:	f000 fb9a 	bl	800b55c <convert_qos_profile>
 800ae28:	9503      	str	r5, [sp, #12]
 800ae2a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ae2e:	9001      	str	r0, [sp, #4]
 800ae30:	4630      	mov	r0, r6
 800ae32:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ae36:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ae42:	f001 fee5 	bl	800cc10 <uxr_buffer_create_datawriter_bin>
 800ae46:	4602      	mov	r2, r0
 800ae48:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ae4c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ae50:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ae54:	f000 fb66 	bl	800b524 <run_xrce_session>
 800ae58:	b970      	cbnz	r0, 800ae78 <rmw_create_publisher+0x1b4>
 800ae5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae5c:	b108      	cbz	r0, 800ae62 <rmw_create_publisher+0x19e>
 800ae5e:	f000 fa53 	bl	800b308 <rmw_uxrce_fini_topic_memory>
 800ae62:	4640      	mov	r0, r8
 800ae64:	f04f 0800 	mov.w	r8, #0
 800ae68:	f000 f9f6 	bl	800b258 <rmw_uxrce_fini_publisher_memory>
 800ae6c:	4640      	mov	r0, r8
 800ae6e:	b007      	add	sp, #28
 800ae70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae74:	f04f 0800 	mov.w	r8, #0
 800ae78:	4640      	mov	r0, r8
 800ae7a:	b007      	add	sp, #28
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	20013478 	.word	0x20013478
 800ae84:	08017fbc 	.word	0x08017fbc
 800ae88:	08017f88 	.word	0x08017f88

0800ae8c <rmw_publisher_get_actual_qos>:
 800ae8c:	b178      	cbz	r0, 800aeae <rmw_publisher_get_actual_qos+0x22>
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	fab1 f481 	clz	r4, r1
 800ae94:	0964      	lsrs	r4, r4, #5
 800ae96:	b141      	cbz	r1, 800aeaa <rmw_publisher_get_actual_qos+0x1e>
 800ae98:	6843      	ldr	r3, [r0, #4]
 800ae9a:	2250      	movs	r2, #80	; 0x50
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800aea2:	f00b ffc2 	bl	8016e2a <memcpy>
 800aea6:	4620      	mov	r0, r4
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	200b      	movs	r0, #11
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	200b      	movs	r0, #11
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <rmw_destroy_publisher>:
 800aeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb8:	b128      	cbz	r0, 800aec6 <rmw_destroy_publisher+0x12>
 800aeba:	4604      	mov	r4, r0
 800aebc:	6800      	ldr	r0, [r0, #0]
 800aebe:	460d      	mov	r5, r1
 800aec0:	f000 fbaa 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 800aec4:	b918      	cbnz	r0, 800aece <rmw_destroy_publisher+0x1a>
 800aec6:	2401      	movs	r4, #1
 800aec8:	4620      	mov	r0, r4
 800aeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aece:	6863      	ldr	r3, [r4, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0f8      	beq.n	800aec6 <rmw_destroy_publisher+0x12>
 800aed4:	fab5 f485 	clz	r4, r5
 800aed8:	0964      	lsrs	r4, r4, #5
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	d0f3      	beq.n	800aec6 <rmw_destroy_publisher+0x12>
 800aede:	6828      	ldr	r0, [r5, #0]
 800aee0:	f000 fb9a 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d0ee      	beq.n	800aec6 <rmw_destroy_publisher+0x12>
 800aee8:	686e      	ldr	r6, [r5, #4]
 800aeea:	2e00      	cmp	r6, #0
 800aeec:	d0eb      	beq.n	800aec6 <rmw_destroy_publisher+0x12>
 800aeee:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800aef0:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800aef4:	f008 faba 	bl	801346c <destroy_topic>
 800aef8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800aefc:	6972      	ldr	r2, [r6, #20]
 800aefe:	6918      	ldr	r0, [r3, #16]
 800af00:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800af04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800af08:	6819      	ldr	r1, [r3, #0]
 800af0a:	f001 fd6d 	bl	800c9e8 <uxr_buffer_delete_entity>
 800af0e:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800af12:	4680      	mov	r8, r0
 800af14:	6932      	ldr	r2, [r6, #16]
 800af16:	6918      	ldr	r0, [r3, #16]
 800af18:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800af1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800af20:	6819      	ldr	r1, [r3, #0]
 800af22:	f001 fd61 	bl	800c9e8 <uxr_buffer_delete_entity>
 800af26:	4606      	mov	r6, r0
 800af28:	6938      	ldr	r0, [r7, #16]
 800af2a:	4642      	mov	r2, r8
 800af2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800af30:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800af34:	f000 faf6 	bl	800b524 <run_xrce_session>
 800af38:	693f      	ldr	r7, [r7, #16]
 800af3a:	4632      	mov	r2, r6
 800af3c:	4606      	mov	r6, r0
 800af3e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800af42:	4638      	mov	r0, r7
 800af44:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800af48:	f000 faec 	bl	800b524 <run_xrce_session>
 800af4c:	b126      	cbz	r6, 800af58 <rmw_destroy_publisher+0xa4>
 800af4e:	b118      	cbz	r0, 800af58 <rmw_destroy_publisher+0xa4>
 800af50:	4628      	mov	r0, r5
 800af52:	f000 f981 	bl	800b258 <rmw_uxrce_fini_publisher_memory>
 800af56:	e7b7      	b.n	800aec8 <rmw_destroy_publisher+0x14>
 800af58:	2402      	movs	r4, #2
 800af5a:	e7f9      	b.n	800af50 <rmw_destroy_publisher+0x9c>

0800af5c <rmw_uxrce_init_service_memory>:
 800af5c:	b1e2      	cbz	r2, 800af98 <rmw_uxrce_init_service_memory+0x3c>
 800af5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	7b05      	ldrb	r5, [r0, #12]
 800af64:	4606      	mov	r6, r0
 800af66:	b9ad      	cbnz	r5, 800af94 <rmw_uxrce_init_service_memory+0x38>
 800af68:	23c8      	movs	r3, #200	; 0xc8
 800af6a:	4617      	mov	r7, r2
 800af6c:	460c      	mov	r4, r1
 800af6e:	46a8      	mov	r8, r5
 800af70:	6083      	str	r3, [r0, #8]
 800af72:	f240 1301 	movw	r3, #257	; 0x101
 800af76:	e9c0 5500 	strd	r5, r5, [r0]
 800af7a:	8183      	strh	r3, [r0, #12]
 800af7c:	3501      	adds	r5, #1
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	f007 ff5f 	bl	8012e44 <put_memory>
 800af86:	42af      	cmp	r7, r5
 800af88:	60a4      	str	r4, [r4, #8]
 800af8a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800af8e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800af92:	d1f3      	bne.n	800af7c <rmw_uxrce_init_service_memory+0x20>
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop

0800af9c <rmw_uxrce_init_client_memory>:
 800af9c:	b1e2      	cbz	r2, 800afd8 <rmw_uxrce_init_client_memory+0x3c>
 800af9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa2:	7b05      	ldrb	r5, [r0, #12]
 800afa4:	4606      	mov	r6, r0
 800afa6:	b9ad      	cbnz	r5, 800afd4 <rmw_uxrce_init_client_memory+0x38>
 800afa8:	23c8      	movs	r3, #200	; 0xc8
 800afaa:	4617      	mov	r7, r2
 800afac:	460c      	mov	r4, r1
 800afae:	46a8      	mov	r8, r5
 800afb0:	6083      	str	r3, [r0, #8]
 800afb2:	f240 1301 	movw	r3, #257	; 0x101
 800afb6:	e9c0 5500 	strd	r5, r5, [r0]
 800afba:	8183      	strh	r3, [r0, #12]
 800afbc:	3501      	adds	r5, #1
 800afbe:	4621      	mov	r1, r4
 800afc0:	4630      	mov	r0, r6
 800afc2:	f007 ff3f 	bl	8012e44 <put_memory>
 800afc6:	42af      	cmp	r7, r5
 800afc8:	60a4      	str	r4, [r4, #8]
 800afca:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800afce:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800afd2:	d1f3      	bne.n	800afbc <rmw_uxrce_init_client_memory+0x20>
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop

0800afdc <rmw_uxrce_init_publisher_memory>:
 800afdc:	b1e2      	cbz	r2, 800b018 <rmw_uxrce_init_publisher_memory+0x3c>
 800afde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe2:	7b05      	ldrb	r5, [r0, #12]
 800afe4:	4606      	mov	r6, r0
 800afe6:	b9ad      	cbnz	r5, 800b014 <rmw_uxrce_init_publisher_memory+0x38>
 800afe8:	23d8      	movs	r3, #216	; 0xd8
 800afea:	4617      	mov	r7, r2
 800afec:	460c      	mov	r4, r1
 800afee:	46a8      	mov	r8, r5
 800aff0:	6083      	str	r3, [r0, #8]
 800aff2:	f240 1301 	movw	r3, #257	; 0x101
 800aff6:	e9c0 5500 	strd	r5, r5, [r0]
 800affa:	8183      	strh	r3, [r0, #12]
 800affc:	3501      	adds	r5, #1
 800affe:	4621      	mov	r1, r4
 800b000:	4630      	mov	r0, r6
 800b002:	f007 ff1f 	bl	8012e44 <put_memory>
 800b006:	42af      	cmp	r7, r5
 800b008:	60a4      	str	r4, [r4, #8]
 800b00a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800b00e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800b012:	d1f3      	bne.n	800affc <rmw_uxrce_init_publisher_memory+0x20>
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop

0800b01c <rmw_uxrce_init_subscription_memory>:
 800b01c:	b1e2      	cbz	r2, 800b058 <rmw_uxrce_init_subscription_memory+0x3c>
 800b01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b022:	7b05      	ldrb	r5, [r0, #12]
 800b024:	4606      	mov	r6, r0
 800b026:	b9ad      	cbnz	r5, 800b054 <rmw_uxrce_init_subscription_memory+0x38>
 800b028:	23d8      	movs	r3, #216	; 0xd8
 800b02a:	4617      	mov	r7, r2
 800b02c:	460c      	mov	r4, r1
 800b02e:	46a8      	mov	r8, r5
 800b030:	6083      	str	r3, [r0, #8]
 800b032:	f240 1301 	movw	r3, #257	; 0x101
 800b036:	e9c0 5500 	strd	r5, r5, [r0]
 800b03a:	8183      	strh	r3, [r0, #12]
 800b03c:	3501      	adds	r5, #1
 800b03e:	4621      	mov	r1, r4
 800b040:	4630      	mov	r0, r6
 800b042:	f007 feff 	bl	8012e44 <put_memory>
 800b046:	42af      	cmp	r7, r5
 800b048:	60a4      	str	r4, [r4, #8]
 800b04a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800b04e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800b052:	d1f3      	bne.n	800b03c <rmw_uxrce_init_subscription_memory+0x20>
 800b054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop

0800b05c <rmw_uxrce_init_node_memory>:
 800b05c:	b1e2      	cbz	r2, 800b098 <rmw_uxrce_init_node_memory+0x3c>
 800b05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b062:	7b05      	ldrb	r5, [r0, #12]
 800b064:	4606      	mov	r6, r0
 800b066:	b9ad      	cbnz	r5, 800b094 <rmw_uxrce_init_node_memory+0x38>
 800b068:	23a4      	movs	r3, #164	; 0xa4
 800b06a:	4617      	mov	r7, r2
 800b06c:	460c      	mov	r4, r1
 800b06e:	46a8      	mov	r8, r5
 800b070:	6083      	str	r3, [r0, #8]
 800b072:	f240 1301 	movw	r3, #257	; 0x101
 800b076:	e9c0 5500 	strd	r5, r5, [r0]
 800b07a:	8183      	strh	r3, [r0, #12]
 800b07c:	3501      	adds	r5, #1
 800b07e:	4621      	mov	r1, r4
 800b080:	4630      	mov	r0, r6
 800b082:	f007 fedf 	bl	8012e44 <put_memory>
 800b086:	42af      	cmp	r7, r5
 800b088:	60a4      	str	r4, [r4, #8]
 800b08a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800b08e:	f804 8c98 	strb.w	r8, [r4, #-152]
 800b092:	d1f3      	bne.n	800b07c <rmw_uxrce_init_node_memory+0x20>
 800b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop

0800b09c <rmw_uxrce_init_session_memory>:
 800b09c:	b1ea      	cbz	r2, 800b0da <rmw_uxrce_init_session_memory+0x3e>
 800b09e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a2:	7b05      	ldrb	r5, [r0, #12]
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	b9b5      	cbnz	r5, 800b0d6 <rmw_uxrce_init_session_memory+0x3a>
 800b0a8:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800b0ac:	f240 1301 	movw	r3, #257	; 0x101
 800b0b0:	4617      	mov	r7, r2
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	46a9      	mov	r9, r5
 800b0b6:	f8c0 8008 	str.w	r8, [r0, #8]
 800b0ba:	8183      	strh	r3, [r0, #12]
 800b0bc:	e9c0 5500 	strd	r5, r5, [r0]
 800b0c0:	3501      	adds	r5, #1
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f007 febd 	bl	8012e44 <put_memory>
 800b0ca:	42af      	cmp	r7, r5
 800b0cc:	60a4      	str	r4, [r4, #8]
 800b0ce:	f884 900c 	strb.w	r9, [r4, #12]
 800b0d2:	4444      	add	r4, r8
 800b0d4:	d1f4      	bne.n	800b0c0 <rmw_uxrce_init_session_memory+0x24>
 800b0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0da:	4770      	bx	lr

0800b0dc <rmw_uxrce_init_topic_memory>:
 800b0dc:	b1e2      	cbz	r2, 800b118 <rmw_uxrce_init_topic_memory+0x3c>
 800b0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e2:	7b05      	ldrb	r5, [r0, #12]
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	b9ad      	cbnz	r5, 800b114 <rmw_uxrce_init_topic_memory+0x38>
 800b0e8:	231c      	movs	r3, #28
 800b0ea:	4617      	mov	r7, r2
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	46a8      	mov	r8, r5
 800b0f0:	6083      	str	r3, [r0, #8]
 800b0f2:	f240 1301 	movw	r3, #257	; 0x101
 800b0f6:	e9c0 5500 	strd	r5, r5, [r0]
 800b0fa:	8183      	strh	r3, [r0, #12]
 800b0fc:	3501      	adds	r5, #1
 800b0fe:	4621      	mov	r1, r4
 800b100:	4630      	mov	r0, r6
 800b102:	f007 fe9f 	bl	8012e44 <put_memory>
 800b106:	42af      	cmp	r7, r5
 800b108:	60a4      	str	r4, [r4, #8]
 800b10a:	f104 041c 	add.w	r4, r4, #28
 800b10e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800b112:	d1f3      	bne.n	800b0fc <rmw_uxrce_init_topic_memory+0x20>
 800b114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop

0800b11c <rmw_uxrce_init_static_input_buffer_memory>:
 800b11c:	b1ea      	cbz	r2, 800b15a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b122:	7b05      	ldrb	r5, [r0, #12]
 800b124:	4606      	mov	r6, r0
 800b126:	b9b5      	cbnz	r5, 800b156 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b128:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800b12c:	4617      	mov	r7, r2
 800b12e:	460c      	mov	r4, r1
 800b130:	46a8      	mov	r8, r5
 800b132:	6083      	str	r3, [r0, #8]
 800b134:	f240 1301 	movw	r3, #257	; 0x101
 800b138:	e9c0 5500 	strd	r5, r5, [r0]
 800b13c:	8183      	strh	r3, [r0, #12]
 800b13e:	3501      	adds	r5, #1
 800b140:	4621      	mov	r1, r4
 800b142:	4630      	mov	r0, r6
 800b144:	f007 fe7e 	bl	8012e44 <put_memory>
 800b148:	42af      	cmp	r7, r5
 800b14a:	60a4      	str	r4, [r4, #8]
 800b14c:	f884 800c 	strb.w	r8, [r4, #12]
 800b150:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800b154:	d1f3      	bne.n	800b13e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15a:	4770      	bx	lr

0800b15c <rmw_uxrce_init_init_options_impl_memory>:
 800b15c:	b1e2      	cbz	r2, 800b198 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b162:	7b05      	ldrb	r5, [r0, #12]
 800b164:	4606      	mov	r6, r0
 800b166:	b9ad      	cbnz	r5, 800b194 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b168:	232c      	movs	r3, #44	; 0x2c
 800b16a:	4617      	mov	r7, r2
 800b16c:	460c      	mov	r4, r1
 800b16e:	46a8      	mov	r8, r5
 800b170:	6083      	str	r3, [r0, #8]
 800b172:	f240 1301 	movw	r3, #257	; 0x101
 800b176:	e9c0 5500 	strd	r5, r5, [r0]
 800b17a:	8183      	strh	r3, [r0, #12]
 800b17c:	3501      	adds	r5, #1
 800b17e:	4621      	mov	r1, r4
 800b180:	4630      	mov	r0, r6
 800b182:	f007 fe5f 	bl	8012e44 <put_memory>
 800b186:	42af      	cmp	r7, r5
 800b188:	60a4      	str	r4, [r4, #8]
 800b18a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800b18e:	f804 8c20 	strb.w	r8, [r4, #-32]
 800b192:	d1f3      	bne.n	800b17c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop

0800b19c <rmw_uxrce_init_wait_set_memory>:
 800b19c:	b1e2      	cbz	r2, 800b1d8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a2:	7b05      	ldrb	r5, [r0, #12]
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	b9ad      	cbnz	r5, 800b1d4 <rmw_uxrce_init_wait_set_memory+0x38>
 800b1a8:	231c      	movs	r3, #28
 800b1aa:	4617      	mov	r7, r2
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	46a8      	mov	r8, r5
 800b1b0:	6083      	str	r3, [r0, #8]
 800b1b2:	f240 1301 	movw	r3, #257	; 0x101
 800b1b6:	e9c0 5500 	strd	r5, r5, [r0]
 800b1ba:	8183      	strh	r3, [r0, #12]
 800b1bc:	3501      	adds	r5, #1
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f007 fe3f 	bl	8012e44 <put_memory>
 800b1c6:	42af      	cmp	r7, r5
 800b1c8:	60a4      	str	r4, [r4, #8]
 800b1ca:	f104 041c 	add.w	r4, r4, #28
 800b1ce:	f804 8c10 	strb.w	r8, [r4, #-16]
 800b1d2:	d1f3      	bne.n	800b1bc <rmw_uxrce_init_wait_set_memory+0x20>
 800b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop

0800b1dc <rmw_uxrce_init_guard_condition_memory>:
 800b1dc:	b1e2      	cbz	r2, 800b218 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e2:	7b05      	ldrb	r5, [r0, #12]
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	b9ad      	cbnz	r5, 800b214 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	4617      	mov	r7, r2
 800b1ec:	460c      	mov	r4, r1
 800b1ee:	46a8      	mov	r8, r5
 800b1f0:	6083      	str	r3, [r0, #8]
 800b1f2:	f240 1301 	movw	r3, #257	; 0x101
 800b1f6:	e9c0 5500 	strd	r5, r5, [r0]
 800b1fa:	8183      	strh	r3, [r0, #12]
 800b1fc:	3501      	adds	r5, #1
 800b1fe:	4621      	mov	r1, r4
 800b200:	4630      	mov	r0, r6
 800b202:	f007 fe1f 	bl	8012e44 <put_memory>
 800b206:	42af      	cmp	r7, r5
 800b208:	60a4      	str	r4, [r4, #8]
 800b20a:	f104 0420 	add.w	r4, r4, #32
 800b20e:	f804 8c14 	strb.w	r8, [r4, #-20]
 800b212:	d1f3      	bne.n	800b1fc <rmw_uxrce_init_guard_condition_memory+0x20>
 800b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop

0800b21c <rmw_uxrce_fini_session_memory>:
 800b21c:	4601      	mov	r1, r0
 800b21e:	4801      	ldr	r0, [pc, #4]	; (800b224 <rmw_uxrce_fini_session_memory+0x8>)
 800b220:	f007 be10 	b.w	8012e44 <put_memory>
 800b224:	20013498 	.word	0x20013498

0800b228 <rmw_uxrce_fini_node_memory>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4604      	mov	r4, r0
 800b22c:	6800      	ldr	r0, [r0, #0]
 800b22e:	b128      	cbz	r0, 800b23c <rmw_uxrce_fini_node_memory+0x14>
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <rmw_uxrce_fini_node_memory+0x28>)
 800b232:	6819      	ldr	r1, [r3, #0]
 800b234:	f7f4 ffec 	bl	8000210 <strcmp>
 800b238:	b940      	cbnz	r0, 800b24c <rmw_uxrce_fini_node_memory+0x24>
 800b23a:	6020      	str	r0, [r4, #0]
 800b23c:	6861      	ldr	r1, [r4, #4]
 800b23e:	b129      	cbz	r1, 800b24c <rmw_uxrce_fini_node_memory+0x24>
 800b240:	2500      	movs	r5, #0
 800b242:	4804      	ldr	r0, [pc, #16]	; (800b254 <rmw_uxrce_fini_node_memory+0x2c>)
 800b244:	610d      	str	r5, [r1, #16]
 800b246:	f007 fdfd 	bl	8012e44 <put_memory>
 800b24a:	6065      	str	r5, [r4, #4]
 800b24c:	bd38      	pop	{r3, r4, r5, pc}
 800b24e:	bf00      	nop
 800b250:	080186dc 	.word	0x080186dc
 800b254:	20013468 	.word	0x20013468

0800b258 <rmw_uxrce_fini_publisher_memory>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	4604      	mov	r4, r0
 800b25c:	6800      	ldr	r0, [r0, #0]
 800b25e:	b128      	cbz	r0, 800b26c <rmw_uxrce_fini_publisher_memory+0x14>
 800b260:	4b06      	ldr	r3, [pc, #24]	; (800b27c <rmw_uxrce_fini_publisher_memory+0x24>)
 800b262:	6819      	ldr	r1, [r3, #0]
 800b264:	f7f4 ffd4 	bl	8000210 <strcmp>
 800b268:	b938      	cbnz	r0, 800b27a <rmw_uxrce_fini_publisher_memory+0x22>
 800b26a:	6020      	str	r0, [r4, #0]
 800b26c:	6861      	ldr	r1, [r4, #4]
 800b26e:	b121      	cbz	r1, 800b27a <rmw_uxrce_fini_publisher_memory+0x22>
 800b270:	4803      	ldr	r0, [pc, #12]	; (800b280 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b272:	f007 fde7 	bl	8012e44 <put_memory>
 800b276:	2300      	movs	r3, #0
 800b278:	6063      	str	r3, [r4, #4]
 800b27a:	bd10      	pop	{r4, pc}
 800b27c:	080186dc 	.word	0x080186dc
 800b280:	20013478 	.word	0x20013478

0800b284 <rmw_uxrce_fini_subscription_memory>:
 800b284:	b510      	push	{r4, lr}
 800b286:	4604      	mov	r4, r0
 800b288:	6800      	ldr	r0, [r0, #0]
 800b28a:	b128      	cbz	r0, 800b298 <rmw_uxrce_fini_subscription_memory+0x14>
 800b28c:	4b06      	ldr	r3, [pc, #24]	; (800b2a8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b28e:	6819      	ldr	r1, [r3, #0]
 800b290:	f7f4 ffbe 	bl	8000210 <strcmp>
 800b294:	b938      	cbnz	r0, 800b2a6 <rmw_uxrce_fini_subscription_memory+0x22>
 800b296:	6020      	str	r0, [r4, #0]
 800b298:	6861      	ldr	r1, [r4, #4]
 800b29a:	b121      	cbz	r1, 800b2a6 <rmw_uxrce_fini_subscription_memory+0x22>
 800b29c:	4803      	ldr	r0, [pc, #12]	; (800b2ac <rmw_uxrce_fini_subscription_memory+0x28>)
 800b29e:	f007 fdd1 	bl	8012e44 <put_memory>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6063      	str	r3, [r4, #4]
 800b2a6:	bd10      	pop	{r4, pc}
 800b2a8:	080186dc 	.word	0x080186dc
 800b2ac:	200134b8 	.word	0x200134b8

0800b2b0 <rmw_uxrce_fini_service_memory>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	6800      	ldr	r0, [r0, #0]
 800b2b6:	b128      	cbz	r0, 800b2c4 <rmw_uxrce_fini_service_memory+0x14>
 800b2b8:	4b06      	ldr	r3, [pc, #24]	; (800b2d4 <rmw_uxrce_fini_service_memory+0x24>)
 800b2ba:	6819      	ldr	r1, [r3, #0]
 800b2bc:	f7f4 ffa8 	bl	8000210 <strcmp>
 800b2c0:	b938      	cbnz	r0, 800b2d2 <rmw_uxrce_fini_service_memory+0x22>
 800b2c2:	6020      	str	r0, [r4, #0]
 800b2c4:	6861      	ldr	r1, [r4, #4]
 800b2c6:	b121      	cbz	r1, 800b2d2 <rmw_uxrce_fini_service_memory+0x22>
 800b2c8:	4803      	ldr	r0, [pc, #12]	; (800b2d8 <rmw_uxrce_fini_service_memory+0x28>)
 800b2ca:	f007 fdbb 	bl	8012e44 <put_memory>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	bd10      	pop	{r4, pc}
 800b2d4:	080186dc 	.word	0x080186dc
 800b2d8:	20013488 	.word	0x20013488

0800b2dc <rmw_uxrce_fini_client_memory>:
 800b2dc:	b510      	push	{r4, lr}
 800b2de:	4604      	mov	r4, r0
 800b2e0:	6800      	ldr	r0, [r0, #0]
 800b2e2:	b128      	cbz	r0, 800b2f0 <rmw_uxrce_fini_client_memory+0x14>
 800b2e4:	4b06      	ldr	r3, [pc, #24]	; (800b300 <rmw_uxrce_fini_client_memory+0x24>)
 800b2e6:	6819      	ldr	r1, [r3, #0]
 800b2e8:	f7f4 ff92 	bl	8000210 <strcmp>
 800b2ec:	b938      	cbnz	r0, 800b2fe <rmw_uxrce_fini_client_memory+0x22>
 800b2ee:	6020      	str	r0, [r4, #0]
 800b2f0:	6861      	ldr	r1, [r4, #4]
 800b2f2:	b121      	cbz	r1, 800b2fe <rmw_uxrce_fini_client_memory+0x22>
 800b2f4:	4803      	ldr	r0, [pc, #12]	; (800b304 <rmw_uxrce_fini_client_memory+0x28>)
 800b2f6:	f007 fda5 	bl	8012e44 <put_memory>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	6063      	str	r3, [r4, #4]
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	080186dc 	.word	0x080186dc
 800b304:	2000e6d8 	.word	0x2000e6d8

0800b308 <rmw_uxrce_fini_topic_memory>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4604      	mov	r4, r0
 800b30c:	4803      	ldr	r0, [pc, #12]	; (800b31c <rmw_uxrce_fini_topic_memory+0x14>)
 800b30e:	4621      	mov	r1, r4
 800b310:	f007 fd98 	bl	8012e44 <put_memory>
 800b314:	2300      	movs	r3, #0
 800b316:	61a3      	str	r3, [r4, #24]
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	200134c8 	.word	0x200134c8

0800b320 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b320:	b082      	sub	sp, #8
 800b322:	492b      	ldr	r1, [pc, #172]	; (800b3d0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800b324:	b530      	push	{r4, r5, lr}
 800b326:	680d      	ldr	r5, [r1, #0]
 800b328:	ac03      	add	r4, sp, #12
 800b32a:	e884 000c 	stmia.w	r4, {r2, r3}
 800b32e:	461c      	mov	r4, r3
 800b330:	2d00      	cmp	r5, #0
 800b332:	d04b      	beq.n	800b3cc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800b334:	462b      	mov	r3, r5
 800b336:	2100      	movs	r1, #0
 800b338:	689a      	ldr	r2, [r3, #8]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b340:	4290      	cmp	r0, r2
 800b342:	bf08      	it	eq
 800b344:	3101      	addeq	r1, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f6      	bne.n	800b338 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b34a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d029      	beq.n	800b3a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b352:	d820      	bhi.n	800b396 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800b354:	428c      	cmp	r4, r1
 800b356:	d828      	bhi.n	800b3aa <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800b358:	fab4 f284 	clz	r2, r4
 800b35c:	0952      	lsrs	r2, r2, #5
 800b35e:	b324      	cbz	r4, 800b3aa <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800b360:	b1dd      	cbz	r5, 800b39a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800b362:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b366:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800b36a:	e001      	b.n	800b370 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800b36c:	686d      	ldr	r5, [r5, #4]
 800b36e:	b1ad      	cbz	r5, 800b39c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800b370:	68ab      	ldr	r3, [r5, #8]
 800b372:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800b376:	4288      	cmp	r0, r1
 800b378:	d1f8      	bne.n	800b36c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800b37a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800b37e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b382:	4561      	cmp	r1, ip
 800b384:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b388:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b38c:	daee      	bge.n	800b36c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800b38e:	468c      	mov	ip, r1
 800b390:	461c      	mov	r4, r3
 800b392:	462a      	mov	r2, r5
 800b394:	e7ea      	b.n	800b36c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800b396:	2b03      	cmp	r3, #3
 800b398:	d0dc      	beq.n	800b354 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800b39a:	2200      	movs	r2, #0
 800b39c:	4610      	mov	r0, r2
 800b39e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3a2:	b002      	add	sp, #8
 800b3a4:	4770      	bx	lr
 800b3a6:	428c      	cmp	r4, r1
 800b3a8:	d905      	bls.n	800b3b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800b3aa:	4809      	ldr	r0, [pc, #36]	; (800b3d0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800b3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3b0:	b002      	add	sp, #8
 800b3b2:	f007 bd37 	b.w	8012e24 <get_memory>
 800b3b6:	fab4 f284 	clz	r2, r4
 800b3ba:	0952      	lsrs	r2, r2, #5
 800b3bc:	2c00      	cmp	r4, #0
 800b3be:	d1ed      	bne.n	800b39c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800b3c0:	4803      	ldr	r0, [pc, #12]	; (800b3d0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800b3c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3c6:	b002      	add	sp, #8
 800b3c8:	f007 bd2c 	b.w	8012e24 <get_memory>
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	e7bc      	b.n	800b34a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b3d0:	200134a8 	.word	0x200134a8

0800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b3d4:	4b12      	ldr	r3, [pc, #72]	; (800b420 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	b530      	push	{r4, r5, lr}
 800b3da:	b1f3      	cbz	r3, 800b41a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800b3dc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b3e0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800b3e4:	2400      	movs	r4, #0
 800b3e6:	e001      	b.n	800b3ec <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	b1a3      	cbz	r3, 800b416 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b3ec:	689a      	ldr	r2, [r3, #8]
 800b3ee:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b3f2:	4288      	cmp	r0, r1
 800b3f4:	d1f8      	bne.n	800b3e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b3f6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800b3fa:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800b3fe:	4571      	cmp	r1, lr
 800b400:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800b404:	eb72 050c 	sbcs.w	r5, r2, ip
 800b408:	daee      	bge.n	800b3e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b40a:	461c      	mov	r4, r3
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	468e      	mov	lr, r1
 800b410:	4694      	mov	ip, r2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1ea      	bne.n	800b3ec <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b416:	4620      	mov	r0, r4
 800b418:	bd30      	pop	{r4, r5, pc}
 800b41a:	461c      	mov	r4, r3
 800b41c:	4620      	mov	r0, r4
 800b41e:	bd30      	pop	{r4, r5, pc}
 800b420:	200134a8 	.word	0x200134a8
 800b424:	00000000 	.word	0x00000000

0800b428 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b428:	4b3d      	ldr	r3, [pc, #244]	; (800b520 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b42a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42e:	681f      	ldr	r7, [r3, #0]
 800b430:	ed2d 8b06 	vpush	{d8-d10}
 800b434:	b08d      	sub	sp, #52	; 0x34
 800b436:	f008 fe3f 	bl	80140b8 <rmw_uros_epoch_nanos>
 800b43a:	2f00      	cmp	r7, #0
 800b43c:	d05d      	beq.n	800b4fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b43e:	46b8      	mov	r8, r7
 800b440:	4681      	mov	r9, r0
 800b442:	468a      	mov	sl, r1
 800b444:	ac04      	add	r4, sp, #16
 800b446:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b44a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b44e:	2b04      	cmp	r3, #4
 800b450:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800b508 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b454:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800b510 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b458:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800b518 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b45c:	d03f      	beq.n	800b4de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b45e:	2b05      	cmp	r3, #5
 800b460:	d044      	beq.n	800b4ec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b462:	2b03      	cmp	r3, #3
 800b464:	d03b      	beq.n	800b4de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b466:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b46a:	ed8d ab06 	vstr	d10, [sp, #24]
 800b46e:	ab08      	add	r3, sp, #32
 800b470:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b474:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800b478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b47a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b47e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b482:	f007 faf1 	bl	8012a68 <rmw_time_equal>
 800b486:	b118      	cbz	r0, 800b490 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b488:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b48c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b490:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800b494:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800b498:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800b49c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b4a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b4a4:	f007 fb36 	bl	8012b14 <rmw_time_total_nsec>
 800b4a8:	1830      	adds	r0, r6, r0
 800b4aa:	eb47 0101 	adc.w	r1, r7, r1
 800b4ae:	4548      	cmp	r0, r9
 800b4b0:	eb71 030a 	sbcs.w	r3, r1, sl
 800b4b4:	db05      	blt.n	800b4c2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b4b6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b4ba:	4591      	cmp	r9, r2
 800b4bc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b4c0:	da03      	bge.n	800b4ca <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b4c2:	4641      	mov	r1, r8
 800b4c4:	4816      	ldr	r0, [pc, #88]	; (800b520 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b4c6:	f007 fcbd 	bl	8012e44 <put_memory>
 800b4ca:	f1bb 0f00 	cmp.w	fp, #0
 800b4ce:	d014      	beq.n	800b4fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b4d0:	46d8      	mov	r8, fp
 800b4d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b4d6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	d1bf      	bne.n	800b45e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b4de:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b4e2:	3340      	adds	r3, #64	; 0x40
 800b4e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b4ea:	e7c0      	b.n	800b46e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b4ec:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b4f0:	3348      	adds	r3, #72	; 0x48
 800b4f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b4f8:	e7b9      	b.n	800b46e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b4fa:	b00d      	add	sp, #52	; 0x34
 800b4fc:	ecbd 8b06 	vpop	{d8-d10}
 800b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b504:	f3af 8000 	nop.w
	...
 800b510:	00000001 	.word	0x00000001
 800b514:	00000000 	.word	0x00000000
 800b518:	0000001e 	.word	0x0000001e
 800b51c:	00000000 	.word	0x00000000
 800b520:	200134a8 	.word	0x200134a8

0800b524 <run_xrce_session>:
 800b524:	b510      	push	{r4, lr}
 800b526:	788c      	ldrb	r4, [r1, #2]
 800b528:	b086      	sub	sp, #24
 800b52a:	2c01      	cmp	r4, #1
 800b52c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b530:	d00c      	beq.n	800b54c <run_xrce_session+0x28>
 800b532:	2401      	movs	r4, #1
 800b534:	4619      	mov	r1, r3
 800b536:	f10d 020e 	add.w	r2, sp, #14
 800b53a:	f10d 0317 	add.w	r3, sp, #23
 800b53e:	9400      	str	r4, [sp, #0]
 800b540:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b544:	f002 f980 	bl	800d848 <uxr_run_session_until_all_status>
 800b548:	b006      	add	sp, #24
 800b54a:	bd10      	pop	{r4, pc}
 800b54c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b550:	f001 fd9c 	bl	800d08c <uxr_flash_output_streams>
 800b554:	4620      	mov	r0, r4
 800b556:	b006      	add	sp, #24
 800b558:	bd10      	pop	{r4, pc}
 800b55a:	bf00      	nop

0800b55c <convert_qos_profile>:
 800b55c:	7a4a      	ldrb	r2, [r1, #9]
 800b55e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b562:	2a02      	cmp	r2, #2
 800b564:	bf18      	it	ne
 800b566:	2200      	movne	r2, #0
 800b568:	7002      	strb	r2, [r0, #0]
 800b56a:	f1ac 0202 	sub.w	r2, ip, #2
 800b56e:	fab2 f282 	clz	r2, r2
 800b572:	0952      	lsrs	r2, r2, #5
 800b574:	7042      	strb	r2, [r0, #1]
 800b576:	780a      	ldrb	r2, [r1, #0]
 800b578:	8889      	ldrh	r1, [r1, #4]
 800b57a:	f1a2 0202 	sub.w	r2, r2, #2
 800b57e:	8081      	strh	r1, [r0, #4]
 800b580:	fab2 f282 	clz	r2, r2
 800b584:	0952      	lsrs	r2, r2, #5
 800b586:	7082      	strb	r2, [r0, #2]
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop

0800b58c <generate_type_name>:
 800b58c:	2300      	movs	r3, #0
 800b58e:	b530      	push	{r4, r5, lr}
 800b590:	700b      	strb	r3, [r1, #0]
 800b592:	b087      	sub	sp, #28
 800b594:	6803      	ldr	r3, [r0, #0]
 800b596:	4614      	mov	r4, r2
 800b598:	b1bb      	cbz	r3, 800b5ca <generate_type_name+0x3e>
 800b59a:	4a0e      	ldr	r2, [pc, #56]	; (800b5d4 <generate_type_name+0x48>)
 800b59c:	4615      	mov	r5, r2
 800b59e:	9500      	str	r5, [sp, #0]
 800b5a0:	9203      	str	r2, [sp, #12]
 800b5a2:	4d0d      	ldr	r5, [pc, #52]	; (800b5d8 <generate_type_name+0x4c>)
 800b5a4:	6842      	ldr	r2, [r0, #4]
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	490c      	ldr	r1, [pc, #48]	; (800b5dc <generate_type_name+0x50>)
 800b5aa:	9204      	str	r2, [sp, #16]
 800b5ac:	9105      	str	r1, [sp, #20]
 800b5ae:	9102      	str	r1, [sp, #8]
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	4a0b      	ldr	r2, [pc, #44]	; (800b5e0 <generate_type_name+0x54>)
 800b5b4:	9501      	str	r5, [sp, #4]
 800b5b6:	f00b fa95 	bl	8016ae4 <sniprintf>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	bfa8      	it	ge
 800b5be:	4284      	cmpge	r4, r0
 800b5c0:	bfcc      	ite	gt
 800b5c2:	2001      	movgt	r0, #1
 800b5c4:	2000      	movle	r0, #0
 800b5c6:	b007      	add	sp, #28
 800b5c8:	bd30      	pop	{r4, r5, pc}
 800b5ca:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <generate_type_name+0x58>)
 800b5cc:	4a01      	ldr	r2, [pc, #4]	; (800b5d4 <generate_type_name+0x48>)
 800b5ce:	461d      	mov	r5, r3
 800b5d0:	e7e5      	b.n	800b59e <generate_type_name+0x12>
 800b5d2:	bf00      	nop
 800b5d4:	08017fac 	.word	0x08017fac
 800b5d8:	08017fc4 	.word	0x08017fc4
 800b5dc:	08017fc0 	.word	0x08017fc0
 800b5e0:	08017fb0 	.word	0x08017fb0
 800b5e4:	080184b4 	.word	0x080184b4

0800b5e8 <generate_topic_name>:
 800b5e8:	b530      	push	{r4, r5, lr}
 800b5ea:	4614      	mov	r4, r2
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	4b07      	ldr	r3, [pc, #28]	; (800b610 <generate_topic_name+0x28>)
 800b5f2:	4a08      	ldr	r2, [pc, #32]	; (800b614 <generate_topic_name+0x2c>)
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	9500      	str	r5, [sp, #0]
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	f00b fa73 	bl	8016ae4 <sniprintf>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	bfa8      	it	ge
 800b602:	4284      	cmpge	r4, r0
 800b604:	bfcc      	ite	gt
 800b606:	2001      	movgt	r0, #1
 800b608:	2000      	movle	r0, #0
 800b60a:	b003      	add	sp, #12
 800b60c:	bd30      	pop	{r4, r5, pc}
 800b60e:	bf00      	nop
 800b610:	08017fd0 	.word	0x08017fd0
 800b614:	08017fc8 	.word	0x08017fc8

0800b618 <is_uxrce_rmw_identifier_valid>:
 800b618:	b510      	push	{r4, lr}
 800b61a:	4604      	mov	r4, r0
 800b61c:	b140      	cbz	r0, 800b630 <is_uxrce_rmw_identifier_valid+0x18>
 800b61e:	f007 fc69 	bl	8012ef4 <rmw_get_implementation_identifier>
 800b622:	4601      	mov	r1, r0
 800b624:	4620      	mov	r0, r4
 800b626:	f7f4 fdf3 	bl	8000210 <strcmp>
 800b62a:	fab0 f080 	clz	r0, r0
 800b62e:	0940      	lsrs	r0, r0, #5
 800b630:	bd10      	pop	{r4, pc}
 800b632:	bf00      	nop

0800b634 <get_message_typesupport_handle>:
 800b634:	6883      	ldr	r3, [r0, #8]
 800b636:	4718      	bx	r3

0800b638 <get_message_typesupport_handle_function>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	6800      	ldr	r0, [r0, #0]
 800b63e:	f7f4 fde7 	bl	8000210 <strcmp>
 800b642:	2800      	cmp	r0, #0
 800b644:	bf0c      	ite	eq
 800b646:	4620      	moveq	r0, r4
 800b648:	2000      	movne	r0, #0
 800b64a:	bd10      	pop	{r4, pc}

0800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	b10a      	cbz	r2, 800b656 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b652:	4803      	ldr	r0, [pc, #12]	; (800b660 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b654:	4770      	bx	lr
 800b656:	4a03      	ldr	r2, [pc, #12]	; (800b664 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b65a:	6812      	ldr	r2, [r2, #0]
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	4770      	bx	lr
 800b660:	20000030 	.word	0x20000030
 800b664:	200000ac 	.word	0x200000ac

0800b668 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b668:	4a02      	ldr	r2, [pc, #8]	; (800b674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 800b66a:	4b03      	ldr	r3, [pc, #12]	; (800b678 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 800b66c:	6812      	ldr	r2, [r2, #0]
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	200000ac 	.word	0x200000ac
 800b678:	20000030 	.word	0x20000030

0800b67c <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 800b67c:	f008 bd58 	b.w	8014130 <std_msgs__msg__Float32__init>

0800b680 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 800b680:	f008 bd5a 	b.w	8014138 <std_msgs__msg__Float32__fini>

0800b684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b684:	4b04      	ldr	r3, [pc, #16]	; (800b698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	b10a      	cbz	r2, 800b68e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b68a:	4803      	ldr	r0, [pc, #12]	; (800b698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b68c:	4770      	bx	lr
 800b68e:	4a03      	ldr	r2, [pc, #12]	; (800b69c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	4770      	bx	lr
 800b698:	20000078 	.word	0x20000078
 800b69c:	200000b0 	.word	0x200000b0

0800b6a0 <_Float32__max_serialized_size>:
 800b6a0:	2104      	movs	r1, #4
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	b508      	push	{r3, lr}
 800b6a6:	f001 f92f 	bl	800c908 <ucdr_alignment>
 800b6aa:	3004      	adds	r0, #4
 800b6ac:	bd08      	pop	{r3, pc}
 800b6ae:	bf00      	nop

0800b6b0 <_Float32__cdr_deserialize>:
 800b6b0:	b109      	cbz	r1, 800b6b6 <_Float32__cdr_deserialize+0x6>
 800b6b2:	f001 b841 	b.w	800c738 <ucdr_deserialize_float>
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop

0800b6bc <get_serialized_size_std_msgs__msg__Float32>:
 800b6bc:	b138      	cbz	r0, 800b6ce <get_serialized_size_std_msgs__msg__Float32+0x12>
 800b6be:	b508      	push	{r3, lr}
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	2104      	movs	r1, #4
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 f91f 	bl	800c908 <ucdr_alignment>
 800b6ca:	3004      	adds	r0, #4
 800b6cc:	bd08      	pop	{r3, pc}
 800b6ce:	4770      	bx	lr

0800b6d0 <_Float32__cdr_serialize>:
 800b6d0:	b120      	cbz	r0, 800b6dc <_Float32__cdr_serialize+0xc>
 800b6d2:	ed90 0a00 	vldr	s0, [r0]
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	f000 bf96 	b.w	800c608 <ucdr_serialize_float>
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop

0800b6e0 <_Float32__get_serialized_size>:
 800b6e0:	b130      	cbz	r0, 800b6f0 <_Float32__get_serialized_size+0x10>
 800b6e2:	2104      	movs	r1, #4
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	b508      	push	{r3, lr}
 800b6e8:	f001 f90e 	bl	800c908 <ucdr_alignment>
 800b6ec:	3004      	adds	r0, #4
 800b6ee:	bd08      	pop	{r3, pc}
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop

0800b6f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b6f4:	4800      	ldr	r0, [pc, #0]	; (800b6f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 800b6f6:	4770      	bx	lr
 800b6f8:	20000084 	.word	0x20000084

0800b6fc <ucdr_serialize_bool>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	460d      	mov	r5, r1
 800b700:	2101      	movs	r1, #1
 800b702:	4604      	mov	r4, r0
 800b704:	f001 f8b4 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b708:	b148      	cbz	r0, 800b71e <ucdr_serialize_bool+0x22>
 800b70a:	68a3      	ldr	r3, [r4, #8]
 800b70c:	2101      	movs	r1, #1
 800b70e:	701d      	strb	r5, [r3, #0]
 800b710:	68a2      	ldr	r2, [r4, #8]
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	440a      	add	r2, r1
 800b716:	7561      	strb	r1, [r4, #21]
 800b718:	440b      	add	r3, r1
 800b71a:	60a2      	str	r2, [r4, #8]
 800b71c:	6123      	str	r3, [r4, #16]
 800b71e:	7da0      	ldrb	r0, [r4, #22]
 800b720:	f080 0001 	eor.w	r0, r0, #1
 800b724:	bd38      	pop	{r3, r4, r5, pc}
 800b726:	bf00      	nop

0800b728 <ucdr_deserialize_bool>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	460d      	mov	r5, r1
 800b72c:	2101      	movs	r1, #1
 800b72e:	4604      	mov	r4, r0
 800b730:	f001 f89e 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b734:	b160      	cbz	r0, 800b750 <ucdr_deserialize_bool+0x28>
 800b736:	68a2      	ldr	r2, [r4, #8]
 800b738:	2101      	movs	r1, #1
 800b73a:	6923      	ldr	r3, [r4, #16]
 800b73c:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b740:	440b      	add	r3, r1
 800b742:	3800      	subs	r0, #0
 800b744:	bf18      	it	ne
 800b746:	2001      	movne	r0, #1
 800b748:	7028      	strb	r0, [r5, #0]
 800b74a:	60a2      	str	r2, [r4, #8]
 800b74c:	6123      	str	r3, [r4, #16]
 800b74e:	7561      	strb	r1, [r4, #21]
 800b750:	7da0      	ldrb	r0, [r4, #22]
 800b752:	f080 0001 	eor.w	r0, r0, #1
 800b756:	bd38      	pop	{r3, r4, r5, pc}

0800b758 <ucdr_serialize_uint8_t>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	460d      	mov	r5, r1
 800b75c:	2101      	movs	r1, #1
 800b75e:	4604      	mov	r4, r0
 800b760:	f001 f886 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b764:	b148      	cbz	r0, 800b77a <ucdr_serialize_uint8_t+0x22>
 800b766:	68a3      	ldr	r3, [r4, #8]
 800b768:	2101      	movs	r1, #1
 800b76a:	701d      	strb	r5, [r3, #0]
 800b76c:	68a2      	ldr	r2, [r4, #8]
 800b76e:	6923      	ldr	r3, [r4, #16]
 800b770:	440a      	add	r2, r1
 800b772:	7561      	strb	r1, [r4, #21]
 800b774:	440b      	add	r3, r1
 800b776:	60a2      	str	r2, [r4, #8]
 800b778:	6123      	str	r3, [r4, #16]
 800b77a:	7da0      	ldrb	r0, [r4, #22]
 800b77c:	f080 0001 	eor.w	r0, r0, #1
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	bf00      	nop

0800b784 <ucdr_deserialize_uint8_t>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	460d      	mov	r5, r1
 800b788:	2101      	movs	r1, #1
 800b78a:	4604      	mov	r4, r0
 800b78c:	f001 f870 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b790:	b150      	cbz	r0, 800b7a8 <ucdr_deserialize_uint8_t+0x24>
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	2101      	movs	r1, #1
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	702b      	strb	r3, [r5, #0]
 800b79a:	68a2      	ldr	r2, [r4, #8]
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	440a      	add	r2, r1
 800b7a0:	7561      	strb	r1, [r4, #21]
 800b7a2:	440b      	add	r3, r1
 800b7a4:	60a2      	str	r2, [r4, #8]
 800b7a6:	6123      	str	r3, [r4, #16]
 800b7a8:	7da0      	ldrb	r0, [r4, #22]
 800b7aa:	f080 0001 	eor.w	r0, r0, #1
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}

0800b7b0 <ucdr_serialize_uint16_t>:
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	2102      	movs	r1, #2
 800b7bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b7c0:	f001 f8aa 	bl	800c918 <ucdr_buffer_alignment>
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	7d67      	ldrb	r7, [r4, #21]
 800b7ca:	f001 f8ed 	bl	800c9a8 <ucdr_advance_buffer>
 800b7ce:	2102      	movs	r1, #2
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f001 f841 	bl	800c858 <ucdr_check_buffer_available_for>
 800b7d6:	bb78      	cbnz	r0, 800b838 <ucdr_serialize_uint16_t+0x88>
 800b7d8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7dc:	42ab      	cmp	r3, r5
 800b7de:	d926      	bls.n	800b82e <ucdr_serialize_uint16_t+0x7e>
 800b7e0:	1b5e      	subs	r6, r3, r5
 800b7e2:	60a3      	str	r3, [r4, #8]
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f1c6 0802 	rsb	r8, r6, #2
 800b7ec:	4433      	add	r3, r6
 800b7ee:	4641      	mov	r1, r8
 800b7f0:	6123      	str	r3, [r4, #16]
 800b7f2:	f001 f83d 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d03b      	beq.n	800b872 <ucdr_serialize_uint16_t+0xc2>
 800b7fa:	7d23      	ldrb	r3, [r4, #20]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d04a      	beq.n	800b896 <ucdr_serialize_uint16_t+0xe6>
 800b800:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b804:	702b      	strb	r3, [r5, #0]
 800b806:	2e00      	cmp	r6, #0
 800b808:	d040      	beq.n	800b88c <ucdr_serialize_uint16_t+0xdc>
 800b80a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b80e:	706b      	strb	r3, [r5, #1]
 800b810:	6923      	ldr	r3, [r4, #16]
 800b812:	2102      	movs	r1, #2
 800b814:	68a2      	ldr	r2, [r4, #8]
 800b816:	3302      	adds	r3, #2
 800b818:	7da0      	ldrb	r0, [r4, #22]
 800b81a:	4442      	add	r2, r8
 800b81c:	7561      	strb	r1, [r4, #21]
 800b81e:	1b9e      	subs	r6, r3, r6
 800b820:	f080 0001 	eor.w	r0, r0, #1
 800b824:	60a2      	str	r2, [r4, #8]
 800b826:	6126      	str	r6, [r4, #16]
 800b828:	b002      	add	sp, #8
 800b82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82e:	2102      	movs	r1, #2
 800b830:	4620      	mov	r0, r4
 800b832:	f001 f81d 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b836:	b190      	cbz	r0, 800b85e <ucdr_serialize_uint16_t+0xae>
 800b838:	7d23      	ldrb	r3, [r4, #20]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	d014      	beq.n	800b86a <ucdr_serialize_uint16_t+0xba>
 800b840:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b844:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b848:	7019      	strb	r1, [r3, #0]
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	705a      	strb	r2, [r3, #1]
 800b84e:	2102      	movs	r1, #2
 800b850:	68a2      	ldr	r2, [r4, #8]
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	440a      	add	r2, r1
 800b856:	7561      	strb	r1, [r4, #21]
 800b858:	440b      	add	r3, r1
 800b85a:	60a2      	str	r2, [r4, #8]
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	7da0      	ldrb	r0, [r4, #22]
 800b860:	f080 0001 	eor.w	r0, r0, #1
 800b864:	b002      	add	sp, #8
 800b866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b86e:	801a      	strh	r2, [r3, #0]
 800b870:	e7ed      	b.n	800b84e <ucdr_serialize_uint16_t+0x9e>
 800b872:	68a2      	ldr	r2, [r4, #8]
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	7da0      	ldrb	r0, [r4, #22]
 800b878:	1b92      	subs	r2, r2, r6
 800b87a:	1b9b      	subs	r3, r3, r6
 800b87c:	7567      	strb	r7, [r4, #21]
 800b87e:	f080 0001 	eor.w	r0, r0, #1
 800b882:	60a2      	str	r2, [r4, #8]
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	b002      	add	sp, #8
 800b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88c:	68a3      	ldr	r3, [r4, #8]
 800b88e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b892:	701a      	strb	r2, [r3, #0]
 800b894:	e7bc      	b.n	800b810 <ucdr_serialize_uint16_t+0x60>
 800b896:	4628      	mov	r0, r5
 800b898:	f10d 0506 	add.w	r5, sp, #6
 800b89c:	4632      	mov	r2, r6
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f00b fac3 	bl	8016e2a <memcpy>
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	19a9      	adds	r1, r5, r6
 800b8a8:	68a0      	ldr	r0, [r4, #8]
 800b8aa:	f00b fabe 	bl	8016e2a <memcpy>
 800b8ae:	e7af      	b.n	800b810 <ucdr_serialize_uint16_t+0x60>

0800b8b0 <ucdr_serialize_endian_uint16_t>:
 800b8b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	2102      	movs	r1, #2
 800b8bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b8c0:	f001 f82a 	bl	800c918 <ucdr_buffer_alignment>
 800b8c4:	4601      	mov	r1, r0
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b8cc:	f001 f86c 	bl	800c9a8 <ucdr_advance_buffer>
 800b8d0:	2102      	movs	r1, #2
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 ffc0 	bl	800c858 <ucdr_check_buffer_available_for>
 800b8d8:	bb70      	cbnz	r0, 800b938 <ucdr_serialize_endian_uint16_t+0x88>
 800b8da:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b8de:	42be      	cmp	r6, r7
 800b8e0:	d925      	bls.n	800b92e <ucdr_serialize_endian_uint16_t+0x7e>
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	60a6      	str	r6, [r4, #8]
 800b8e8:	1bf6      	subs	r6, r6, r7
 800b8ea:	4433      	add	r3, r6
 800b8ec:	f1c6 0902 	rsb	r9, r6, #2
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	f000 ffbc 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d039      	beq.n	800b970 <ucdr_serialize_endian_uint16_t+0xc0>
 800b8fc:	2d01      	cmp	r5, #1
 800b8fe:	d04a      	beq.n	800b996 <ucdr_serialize_endian_uint16_t+0xe6>
 800b900:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b904:	703b      	strb	r3, [r7, #0]
 800b906:	2e00      	cmp	r6, #0
 800b908:	d040      	beq.n	800b98c <ucdr_serialize_endian_uint16_t+0xdc>
 800b90a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b90e:	707b      	strb	r3, [r7, #1]
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	2102      	movs	r1, #2
 800b914:	68a2      	ldr	r2, [r4, #8]
 800b916:	7da0      	ldrb	r0, [r4, #22]
 800b918:	3302      	adds	r3, #2
 800b91a:	444a      	add	r2, r9
 800b91c:	7561      	strb	r1, [r4, #21]
 800b91e:	1b9b      	subs	r3, r3, r6
 800b920:	f080 0001 	eor.w	r0, r0, #1
 800b924:	60a2      	str	r2, [r4, #8]
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	b003      	add	sp, #12
 800b92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b92e:	2102      	movs	r1, #2
 800b930:	4620      	mov	r0, r4
 800b932:	f000 ff9d 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b936:	b188      	cbz	r0, 800b95c <ucdr_serialize_endian_uint16_t+0xac>
 800b938:	2d01      	cmp	r5, #1
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	d014      	beq.n	800b968 <ucdr_serialize_endian_uint16_t+0xb8>
 800b93e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b942:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b946:	7019      	strb	r1, [r3, #0]
 800b948:	68a3      	ldr	r3, [r4, #8]
 800b94a:	705a      	strb	r2, [r3, #1]
 800b94c:	2102      	movs	r1, #2
 800b94e:	68a2      	ldr	r2, [r4, #8]
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	440a      	add	r2, r1
 800b954:	7561      	strb	r1, [r4, #21]
 800b956:	440b      	add	r3, r1
 800b958:	60a2      	str	r2, [r4, #8]
 800b95a:	6123      	str	r3, [r4, #16]
 800b95c:	7da0      	ldrb	r0, [r4, #22]
 800b95e:	f080 0001 	eor.w	r0, r0, #1
 800b962:	b003      	add	sp, #12
 800b964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b968:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b96c:	801a      	strh	r2, [r3, #0]
 800b96e:	e7ed      	b.n	800b94c <ucdr_serialize_endian_uint16_t+0x9c>
 800b970:	68a2      	ldr	r2, [r4, #8]
 800b972:	6923      	ldr	r3, [r4, #16]
 800b974:	7da0      	ldrb	r0, [r4, #22]
 800b976:	1b92      	subs	r2, r2, r6
 800b978:	1b9b      	subs	r3, r3, r6
 800b97a:	f884 8015 	strb.w	r8, [r4, #21]
 800b97e:	f080 0001 	eor.w	r0, r0, #1
 800b982:	60a2      	str	r2, [r4, #8]
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	b003      	add	sp, #12
 800b988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b98c:	68a3      	ldr	r3, [r4, #8]
 800b98e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b992:	701a      	strb	r2, [r3, #0]
 800b994:	e7bc      	b.n	800b910 <ucdr_serialize_endian_uint16_t+0x60>
 800b996:	f10d 0506 	add.w	r5, sp, #6
 800b99a:	4632      	mov	r2, r6
 800b99c:	4638      	mov	r0, r7
 800b99e:	4629      	mov	r1, r5
 800b9a0:	f00b fa43 	bl	8016e2a <memcpy>
 800b9a4:	464a      	mov	r2, r9
 800b9a6:	19a9      	adds	r1, r5, r6
 800b9a8:	68a0      	ldr	r0, [r4, #8]
 800b9aa:	f00b fa3e 	bl	8016e2a <memcpy>
 800b9ae:	e7af      	b.n	800b910 <ucdr_serialize_endian_uint16_t+0x60>

0800b9b0 <ucdr_deserialize_uint16_t>:
 800b9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	2102      	movs	r1, #2
 800b9ba:	f000 ffad 	bl	800c918 <ucdr_buffer_alignment>
 800b9be:	4601      	mov	r1, r0
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b9c6:	f000 ffef 	bl	800c9a8 <ucdr_advance_buffer>
 800b9ca:	2102      	movs	r1, #2
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 ff43 	bl	800c858 <ucdr_check_buffer_available_for>
 800b9d2:	bb60      	cbnz	r0, 800ba2e <ucdr_deserialize_uint16_t+0x7e>
 800b9d4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b9d8:	42be      	cmp	r6, r7
 800b9da:	d923      	bls.n	800ba24 <ucdr_deserialize_uint16_t+0x74>
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	4620      	mov	r0, r4
 800b9e0:	60a6      	str	r6, [r4, #8]
 800b9e2:	1bf6      	subs	r6, r6, r7
 800b9e4:	4433      	add	r3, r6
 800b9e6:	f1c6 0902 	rsb	r9, r6, #2
 800b9ea:	6123      	str	r3, [r4, #16]
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	f000 ff3f 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d034      	beq.n	800ba60 <ucdr_deserialize_uint16_t+0xb0>
 800b9f6:	7d23      	ldrb	r3, [r4, #20]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d042      	beq.n	800ba82 <ucdr_deserialize_uint16_t+0xd2>
 800b9fc:	787b      	ldrb	r3, [r7, #1]
 800b9fe:	702b      	strb	r3, [r5, #0]
 800ba00:	2e00      	cmp	r6, #0
 800ba02:	d03a      	beq.n	800ba7a <ucdr_deserialize_uint16_t+0xca>
 800ba04:	783b      	ldrb	r3, [r7, #0]
 800ba06:	706b      	strb	r3, [r5, #1]
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	2102      	movs	r1, #2
 800ba0c:	68a2      	ldr	r2, [r4, #8]
 800ba0e:	3302      	adds	r3, #2
 800ba10:	7da0      	ldrb	r0, [r4, #22]
 800ba12:	444a      	add	r2, r9
 800ba14:	7561      	strb	r1, [r4, #21]
 800ba16:	1b9b      	subs	r3, r3, r6
 800ba18:	f080 0001 	eor.w	r0, r0, #1
 800ba1c:	60a2      	str	r2, [r4, #8]
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba24:	2102      	movs	r1, #2
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 ff22 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800ba2c:	b180      	cbz	r0, 800ba50 <ucdr_deserialize_uint16_t+0xa0>
 800ba2e:	7d23      	ldrb	r3, [r4, #20]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	d011      	beq.n	800ba5a <ucdr_deserialize_uint16_t+0xaa>
 800ba36:	785b      	ldrb	r3, [r3, #1]
 800ba38:	702b      	strb	r3, [r5, #0]
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	706b      	strb	r3, [r5, #1]
 800ba40:	2102      	movs	r1, #2
 800ba42:	68a2      	ldr	r2, [r4, #8]
 800ba44:	6923      	ldr	r3, [r4, #16]
 800ba46:	440a      	add	r2, r1
 800ba48:	7561      	strb	r1, [r4, #21]
 800ba4a:	440b      	add	r3, r1
 800ba4c:	60a2      	str	r2, [r4, #8]
 800ba4e:	6123      	str	r3, [r4, #16]
 800ba50:	7da0      	ldrb	r0, [r4, #22]
 800ba52:	f080 0001 	eor.w	r0, r0, #1
 800ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	802b      	strh	r3, [r5, #0]
 800ba5e:	e7ef      	b.n	800ba40 <ucdr_deserialize_uint16_t+0x90>
 800ba60:	68a2      	ldr	r2, [r4, #8]
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	1b92      	subs	r2, r2, r6
 800ba66:	7da0      	ldrb	r0, [r4, #22]
 800ba68:	1b9b      	subs	r3, r3, r6
 800ba6a:	f884 8015 	strb.w	r8, [r4, #21]
 800ba6e:	f080 0001 	eor.w	r0, r0, #1
 800ba72:	60a2      	str	r2, [r4, #8]
 800ba74:	6123      	str	r3, [r4, #16]
 800ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	68a3      	ldr	r3, [r4, #8]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	706b      	strb	r3, [r5, #1]
 800ba80:	e7c2      	b.n	800ba08 <ucdr_deserialize_uint16_t+0x58>
 800ba82:	4639      	mov	r1, r7
 800ba84:	4632      	mov	r2, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	f00b f9cf 	bl	8016e2a <memcpy>
 800ba8c:	464a      	mov	r2, r9
 800ba8e:	19a8      	adds	r0, r5, r6
 800ba90:	68a1      	ldr	r1, [r4, #8]
 800ba92:	f00b f9ca 	bl	8016e2a <memcpy>
 800ba96:	e7b7      	b.n	800ba08 <ucdr_deserialize_uint16_t+0x58>

0800ba98 <ucdr_deserialize_endian_uint16_t>:
 800ba98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	460e      	mov	r6, r1
 800baa0:	2102      	movs	r1, #2
 800baa2:	4615      	mov	r5, r2
 800baa4:	f000 ff38 	bl	800c918 <ucdr_buffer_alignment>
 800baa8:	4601      	mov	r1, r0
 800baaa:	4620      	mov	r0, r4
 800baac:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bab0:	f000 ff7a 	bl	800c9a8 <ucdr_advance_buffer>
 800bab4:	2102      	movs	r1, #2
 800bab6:	4620      	mov	r0, r4
 800bab8:	f000 fece 	bl	800c858 <ucdr_check_buffer_available_for>
 800babc:	bb70      	cbnz	r0, 800bb1c <ucdr_deserialize_endian_uint16_t+0x84>
 800babe:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800bac2:	454f      	cmp	r7, r9
 800bac4:	d925      	bls.n	800bb12 <ucdr_deserialize_endian_uint16_t+0x7a>
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	4620      	mov	r0, r4
 800baca:	60a7      	str	r7, [r4, #8]
 800bacc:	eba7 0709 	sub.w	r7, r7, r9
 800bad0:	443b      	add	r3, r7
 800bad2:	f1c7 0a02 	rsb	sl, r7, #2
 800bad6:	6123      	str	r3, [r4, #16]
 800bad8:	4651      	mov	r1, sl
 800bada:	f000 fec9 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d034      	beq.n	800bb4c <ucdr_deserialize_endian_uint16_t+0xb4>
 800bae2:	2e01      	cmp	r6, #1
 800bae4:	d043      	beq.n	800bb6e <ucdr_deserialize_endian_uint16_t+0xd6>
 800bae6:	f899 3001 	ldrb.w	r3, [r9, #1]
 800baea:	702b      	strb	r3, [r5, #0]
 800baec:	2f00      	cmp	r7, #0
 800baee:	d03a      	beq.n	800bb66 <ucdr_deserialize_endian_uint16_t+0xce>
 800baf0:	f899 3000 	ldrb.w	r3, [r9]
 800baf4:	706b      	strb	r3, [r5, #1]
 800baf6:	6923      	ldr	r3, [r4, #16]
 800baf8:	2102      	movs	r1, #2
 800bafa:	68a2      	ldr	r2, [r4, #8]
 800bafc:	3302      	adds	r3, #2
 800bafe:	7da0      	ldrb	r0, [r4, #22]
 800bb00:	4452      	add	r2, sl
 800bb02:	7561      	strb	r1, [r4, #21]
 800bb04:	1bdb      	subs	r3, r3, r7
 800bb06:	f080 0001 	eor.w	r0, r0, #1
 800bb0a:	60a2      	str	r2, [r4, #8]
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb12:	2102      	movs	r1, #2
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 feab 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bb1a:	b178      	cbz	r0, 800bb3c <ucdr_deserialize_endian_uint16_t+0xa4>
 800bb1c:	2e01      	cmp	r6, #1
 800bb1e:	68a3      	ldr	r3, [r4, #8]
 800bb20:	d011      	beq.n	800bb46 <ucdr_deserialize_endian_uint16_t+0xae>
 800bb22:	785b      	ldrb	r3, [r3, #1]
 800bb24:	702b      	strb	r3, [r5, #0]
 800bb26:	68a3      	ldr	r3, [r4, #8]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	706b      	strb	r3, [r5, #1]
 800bb2c:	2102      	movs	r1, #2
 800bb2e:	68a2      	ldr	r2, [r4, #8]
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	440a      	add	r2, r1
 800bb34:	7561      	strb	r1, [r4, #21]
 800bb36:	440b      	add	r3, r1
 800bb38:	60a2      	str	r2, [r4, #8]
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	7da0      	ldrb	r0, [r4, #22]
 800bb3e:	f080 0001 	eor.w	r0, r0, #1
 800bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	802b      	strh	r3, [r5, #0]
 800bb4a:	e7ef      	b.n	800bb2c <ucdr_deserialize_endian_uint16_t+0x94>
 800bb4c:	68a2      	ldr	r2, [r4, #8]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	1bd2      	subs	r2, r2, r7
 800bb52:	7da0      	ldrb	r0, [r4, #22]
 800bb54:	1bdb      	subs	r3, r3, r7
 800bb56:	f884 8015 	strb.w	r8, [r4, #21]
 800bb5a:	f080 0001 	eor.w	r0, r0, #1
 800bb5e:	60a2      	str	r2, [r4, #8]
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb66:	68a3      	ldr	r3, [r4, #8]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	706b      	strb	r3, [r5, #1]
 800bb6c:	e7c3      	b.n	800baf6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800bb6e:	4649      	mov	r1, r9
 800bb70:	463a      	mov	r2, r7
 800bb72:	4628      	mov	r0, r5
 800bb74:	f00b f959 	bl	8016e2a <memcpy>
 800bb78:	4652      	mov	r2, sl
 800bb7a:	19e8      	adds	r0, r5, r7
 800bb7c:	68a1      	ldr	r1, [r4, #8]
 800bb7e:	f00b f954 	bl	8016e2a <memcpy>
 800bb82:	e7b8      	b.n	800baf6 <ucdr_deserialize_endian_uint16_t+0x5e>

0800bb84 <ucdr_serialize_uint32_t>:
 800bb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb88:	b082      	sub	sp, #8
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	9101      	str	r1, [sp, #4]
 800bb8e:	2104      	movs	r1, #4
 800bb90:	f000 fec2 	bl	800c918 <ucdr_buffer_alignment>
 800bb94:	4601      	mov	r1, r0
 800bb96:	4620      	mov	r0, r4
 800bb98:	7d67      	ldrb	r7, [r4, #21]
 800bb9a:	f000 ff05 	bl	800c9a8 <ucdr_advance_buffer>
 800bb9e:	2104      	movs	r1, #4
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fe59 	bl	800c858 <ucdr_check_buffer_available_for>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d139      	bne.n	800bc1e <ucdr_serialize_uint32_t+0x9a>
 800bbaa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bbae:	42ab      	cmp	r3, r5
 800bbb0:	d930      	bls.n	800bc14 <ucdr_serialize_uint32_t+0x90>
 800bbb2:	1b5e      	subs	r6, r3, r5
 800bbb4:	60a3      	str	r3, [r4, #8]
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f1c6 0804 	rsb	r8, r6, #4
 800bbbe:	4433      	add	r3, r6
 800bbc0:	4641      	mov	r1, r8
 800bbc2:	6123      	str	r3, [r4, #16]
 800bbc4:	f000 fe54 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d04c      	beq.n	800bc66 <ucdr_serialize_uint32_t+0xe2>
 800bbcc:	7d23      	ldrb	r3, [r4, #20]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d063      	beq.n	800bc9a <ucdr_serialize_uint32_t+0x116>
 800bbd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bbd6:	702b      	strb	r3, [r5, #0]
 800bbd8:	2e00      	cmp	r6, #0
 800bbda:	d051      	beq.n	800bc80 <ucdr_serialize_uint32_t+0xfc>
 800bbdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbe0:	2e01      	cmp	r6, #1
 800bbe2:	706b      	strb	r3, [r5, #1]
 800bbe4:	d050      	beq.n	800bc88 <ucdr_serialize_uint32_t+0x104>
 800bbe6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bbea:	2e02      	cmp	r6, #2
 800bbec:	70ab      	strb	r3, [r5, #2]
 800bbee:	d04f      	beq.n	800bc90 <ucdr_serialize_uint32_t+0x10c>
 800bbf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bbf4:	70eb      	strb	r3, [r5, #3]
 800bbf6:	6923      	ldr	r3, [r4, #16]
 800bbf8:	2104      	movs	r1, #4
 800bbfa:	68a2      	ldr	r2, [r4, #8]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	7da0      	ldrb	r0, [r4, #22]
 800bc00:	4442      	add	r2, r8
 800bc02:	7561      	strb	r1, [r4, #21]
 800bc04:	1b9e      	subs	r6, r3, r6
 800bc06:	f080 0001 	eor.w	r0, r0, #1
 800bc0a:	60a2      	str	r2, [r4, #8]
 800bc0c:	6126      	str	r6, [r4, #16]
 800bc0e:	b002      	add	sp, #8
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	2104      	movs	r1, #4
 800bc16:	4620      	mov	r0, r4
 800bc18:	f000 fe2a 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bc1c:	b1d0      	cbz	r0, 800bc54 <ucdr_serialize_uint32_t+0xd0>
 800bc1e:	7d23      	ldrb	r3, [r4, #20]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	68a3      	ldr	r3, [r4, #8]
 800bc24:	d01c      	beq.n	800bc60 <ucdr_serialize_uint32_t+0xdc>
 800bc26:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800bc2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc2e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800bc32:	7018      	strb	r0, [r3, #0]
 800bc34:	68a3      	ldr	r3, [r4, #8]
 800bc36:	705a      	strb	r2, [r3, #1]
 800bc38:	68a3      	ldr	r3, [r4, #8]
 800bc3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc3e:	7099      	strb	r1, [r3, #2]
 800bc40:	68a3      	ldr	r3, [r4, #8]
 800bc42:	70da      	strb	r2, [r3, #3]
 800bc44:	2104      	movs	r1, #4
 800bc46:	68a2      	ldr	r2, [r4, #8]
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	440a      	add	r2, r1
 800bc4c:	7561      	strb	r1, [r4, #21]
 800bc4e:	440b      	add	r3, r1
 800bc50:	60a2      	str	r2, [r4, #8]
 800bc52:	6123      	str	r3, [r4, #16]
 800bc54:	7da0      	ldrb	r0, [r4, #22]
 800bc56:	f080 0001 	eor.w	r0, r0, #1
 800bc5a:	b002      	add	sp, #8
 800bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc60:	9a01      	ldr	r2, [sp, #4]
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	e7ee      	b.n	800bc44 <ucdr_serialize_uint32_t+0xc0>
 800bc66:	68a2      	ldr	r2, [r4, #8]
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	7da0      	ldrb	r0, [r4, #22]
 800bc6c:	1b92      	subs	r2, r2, r6
 800bc6e:	1b9b      	subs	r3, r3, r6
 800bc70:	7567      	strb	r7, [r4, #21]
 800bc72:	f080 0001 	eor.w	r0, r0, #1
 800bc76:	60a2      	str	r2, [r4, #8]
 800bc78:	6123      	str	r3, [r4, #16]
 800bc7a:	b002      	add	sp, #8
 800bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc80:	68a3      	ldr	r3, [r4, #8]
 800bc82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc86:	701a      	strb	r2, [r3, #0]
 800bc88:	68a3      	ldr	r3, [r4, #8]
 800bc8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc8e:	701a      	strb	r2, [r3, #0]
 800bc90:	68a3      	ldr	r3, [r4, #8]
 800bc92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e7ad      	b.n	800bbf6 <ucdr_serialize_uint32_t+0x72>
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	ad01      	add	r5, sp, #4
 800bc9e:	4632      	mov	r2, r6
 800bca0:	4629      	mov	r1, r5
 800bca2:	f00b f8c2 	bl	8016e2a <memcpy>
 800bca6:	4642      	mov	r2, r8
 800bca8:	19a9      	adds	r1, r5, r6
 800bcaa:	68a0      	ldr	r0, [r4, #8]
 800bcac:	f00b f8bd 	bl	8016e2a <memcpy>
 800bcb0:	e7a1      	b.n	800bbf6 <ucdr_serialize_uint32_t+0x72>
 800bcb2:	bf00      	nop

0800bcb4 <ucdr_serialize_endian_uint32_t>:
 800bcb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	b083      	sub	sp, #12
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	2104      	movs	r1, #4
 800bcc0:	9201      	str	r2, [sp, #4]
 800bcc2:	f000 fe29 	bl	800c918 <ucdr_buffer_alignment>
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bcce:	f000 fe6b 	bl	800c9a8 <ucdr_advance_buffer>
 800bcd2:	2104      	movs	r1, #4
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f000 fdbf 	bl	800c858 <ucdr_check_buffer_available_for>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d138      	bne.n	800bd50 <ucdr_serialize_endian_uint32_t+0x9c>
 800bcde:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bce2:	42b7      	cmp	r7, r6
 800bce4:	d92f      	bls.n	800bd46 <ucdr_serialize_endian_uint32_t+0x92>
 800bce6:	6923      	ldr	r3, [r4, #16]
 800bce8:	4620      	mov	r0, r4
 800bcea:	60a7      	str	r7, [r4, #8]
 800bcec:	1bbf      	subs	r7, r7, r6
 800bcee:	443b      	add	r3, r7
 800bcf0:	f1c7 0904 	rsb	r9, r7, #4
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	f000 fdba 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d04a      	beq.n	800bd96 <ucdr_serialize_endian_uint32_t+0xe2>
 800bd00:	2d01      	cmp	r5, #1
 800bd02:	d063      	beq.n	800bdcc <ucdr_serialize_endian_uint32_t+0x118>
 800bd04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd08:	7033      	strb	r3, [r6, #0]
 800bd0a:	2f00      	cmp	r7, #0
 800bd0c:	d051      	beq.n	800bdb2 <ucdr_serialize_endian_uint32_t+0xfe>
 800bd0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd12:	2f01      	cmp	r7, #1
 800bd14:	7073      	strb	r3, [r6, #1]
 800bd16:	d050      	beq.n	800bdba <ucdr_serialize_endian_uint32_t+0x106>
 800bd18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd1c:	2f02      	cmp	r7, #2
 800bd1e:	70b3      	strb	r3, [r6, #2]
 800bd20:	d04f      	beq.n	800bdc2 <ucdr_serialize_endian_uint32_t+0x10e>
 800bd22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd26:	70f3      	strb	r3, [r6, #3]
 800bd28:	6923      	ldr	r3, [r4, #16]
 800bd2a:	2104      	movs	r1, #4
 800bd2c:	68a2      	ldr	r2, [r4, #8]
 800bd2e:	7da0      	ldrb	r0, [r4, #22]
 800bd30:	3304      	adds	r3, #4
 800bd32:	444a      	add	r2, r9
 800bd34:	7561      	strb	r1, [r4, #21]
 800bd36:	1bdb      	subs	r3, r3, r7
 800bd38:	f080 0001 	eor.w	r0, r0, #1
 800bd3c:	60a2      	str	r2, [r4, #8]
 800bd3e:	6123      	str	r3, [r4, #16]
 800bd40:	b003      	add	sp, #12
 800bd42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd46:	2104      	movs	r1, #4
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f000 fd91 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bd4e:	b1c8      	cbz	r0, 800bd84 <ucdr_serialize_endian_uint32_t+0xd0>
 800bd50:	2d01      	cmp	r5, #1
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	d01c      	beq.n	800bd90 <ucdr_serialize_endian_uint32_t+0xdc>
 800bd56:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800bd5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd5e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800bd62:	7018      	strb	r0, [r3, #0]
 800bd64:	68a3      	ldr	r3, [r4, #8]
 800bd66:	705a      	strb	r2, [r3, #1]
 800bd68:	68a3      	ldr	r3, [r4, #8]
 800bd6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd6e:	7099      	strb	r1, [r3, #2]
 800bd70:	68a3      	ldr	r3, [r4, #8]
 800bd72:	70da      	strb	r2, [r3, #3]
 800bd74:	2104      	movs	r1, #4
 800bd76:	68a2      	ldr	r2, [r4, #8]
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	440a      	add	r2, r1
 800bd7c:	7561      	strb	r1, [r4, #21]
 800bd7e:	440b      	add	r3, r1
 800bd80:	60a2      	str	r2, [r4, #8]
 800bd82:	6123      	str	r3, [r4, #16]
 800bd84:	7da0      	ldrb	r0, [r4, #22]
 800bd86:	f080 0001 	eor.w	r0, r0, #1
 800bd8a:	b003      	add	sp, #12
 800bd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd90:	9a01      	ldr	r2, [sp, #4]
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	e7ee      	b.n	800bd74 <ucdr_serialize_endian_uint32_t+0xc0>
 800bd96:	68a2      	ldr	r2, [r4, #8]
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	7da0      	ldrb	r0, [r4, #22]
 800bd9c:	1bd2      	subs	r2, r2, r7
 800bd9e:	1bdb      	subs	r3, r3, r7
 800bda0:	f884 8015 	strb.w	r8, [r4, #21]
 800bda4:	f080 0001 	eor.w	r0, r0, #1
 800bda8:	60a2      	str	r2, [r4, #8]
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	b003      	add	sp, #12
 800bdae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb2:	68a3      	ldr	r3, [r4, #8]
 800bdb4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdc0:	701a      	strb	r2, [r3, #0]
 800bdc2:	68a3      	ldr	r3, [r4, #8]
 800bdc4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	e7ad      	b.n	800bd28 <ucdr_serialize_endian_uint32_t+0x74>
 800bdcc:	ad01      	add	r5, sp, #4
 800bdce:	463a      	mov	r2, r7
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	f00b f829 	bl	8016e2a <memcpy>
 800bdd8:	464a      	mov	r2, r9
 800bdda:	19e9      	adds	r1, r5, r7
 800bddc:	68a0      	ldr	r0, [r4, #8]
 800bdde:	f00b f824 	bl	8016e2a <memcpy>
 800bde2:	e7a1      	b.n	800bd28 <ucdr_serialize_endian_uint32_t+0x74>

0800bde4 <ucdr_deserialize_uint32_t>:
 800bde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde8:	4604      	mov	r4, r0
 800bdea:	460d      	mov	r5, r1
 800bdec:	2104      	movs	r1, #4
 800bdee:	f000 fd93 	bl	800c918 <ucdr_buffer_alignment>
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bdfa:	f000 fdd5 	bl	800c9a8 <ucdr_advance_buffer>
 800bdfe:	2104      	movs	r1, #4
 800be00:	4620      	mov	r0, r4
 800be02:	f000 fd29 	bl	800c858 <ucdr_check_buffer_available_for>
 800be06:	2800      	cmp	r0, #0
 800be08:	d138      	bne.n	800be7c <ucdr_deserialize_uint32_t+0x98>
 800be0a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800be0e:	42b7      	cmp	r7, r6
 800be10:	d92f      	bls.n	800be72 <ucdr_deserialize_uint32_t+0x8e>
 800be12:	6923      	ldr	r3, [r4, #16]
 800be14:	4620      	mov	r0, r4
 800be16:	60a7      	str	r7, [r4, #8]
 800be18:	1bbf      	subs	r7, r7, r6
 800be1a:	443b      	add	r3, r7
 800be1c:	f1c7 0904 	rsb	r9, r7, #4
 800be20:	6123      	str	r3, [r4, #16]
 800be22:	4649      	mov	r1, r9
 800be24:	f000 fd24 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d046      	beq.n	800beba <ucdr_deserialize_uint32_t+0xd6>
 800be2c:	7d23      	ldrb	r3, [r4, #20]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d05c      	beq.n	800beec <ucdr_deserialize_uint32_t+0x108>
 800be32:	78f3      	ldrb	r3, [r6, #3]
 800be34:	702b      	strb	r3, [r5, #0]
 800be36:	2f00      	cmp	r7, #0
 800be38:	d04c      	beq.n	800bed4 <ucdr_deserialize_uint32_t+0xf0>
 800be3a:	78b3      	ldrb	r3, [r6, #2]
 800be3c:	2f01      	cmp	r7, #1
 800be3e:	706b      	strb	r3, [r5, #1]
 800be40:	f105 0302 	add.w	r3, r5, #2
 800be44:	d04a      	beq.n	800bedc <ucdr_deserialize_uint32_t+0xf8>
 800be46:	7873      	ldrb	r3, [r6, #1]
 800be48:	2f02      	cmp	r7, #2
 800be4a:	70ab      	strb	r3, [r5, #2]
 800be4c:	f105 0303 	add.w	r3, r5, #3
 800be50:	d048      	beq.n	800bee4 <ucdr_deserialize_uint32_t+0x100>
 800be52:	7833      	ldrb	r3, [r6, #0]
 800be54:	70eb      	strb	r3, [r5, #3]
 800be56:	6923      	ldr	r3, [r4, #16]
 800be58:	2104      	movs	r1, #4
 800be5a:	68a2      	ldr	r2, [r4, #8]
 800be5c:	3304      	adds	r3, #4
 800be5e:	7da0      	ldrb	r0, [r4, #22]
 800be60:	444a      	add	r2, r9
 800be62:	7561      	strb	r1, [r4, #21]
 800be64:	1bdb      	subs	r3, r3, r7
 800be66:	f080 0001 	eor.w	r0, r0, #1
 800be6a:	60a2      	str	r2, [r4, #8]
 800be6c:	6123      	str	r3, [r4, #16]
 800be6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be72:	2104      	movs	r1, #4
 800be74:	4620      	mov	r0, r4
 800be76:	f000 fcfb 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800be7a:	b1b0      	cbz	r0, 800beaa <ucdr_deserialize_uint32_t+0xc6>
 800be7c:	7d23      	ldrb	r3, [r4, #20]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	d017      	beq.n	800beb4 <ucdr_deserialize_uint32_t+0xd0>
 800be84:	78db      	ldrb	r3, [r3, #3]
 800be86:	702b      	strb	r3, [r5, #0]
 800be88:	68a3      	ldr	r3, [r4, #8]
 800be8a:	789b      	ldrb	r3, [r3, #2]
 800be8c:	706b      	strb	r3, [r5, #1]
 800be8e:	68a3      	ldr	r3, [r4, #8]
 800be90:	785b      	ldrb	r3, [r3, #1]
 800be92:	70ab      	strb	r3, [r5, #2]
 800be94:	68a3      	ldr	r3, [r4, #8]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	70eb      	strb	r3, [r5, #3]
 800be9a:	2104      	movs	r1, #4
 800be9c:	68a2      	ldr	r2, [r4, #8]
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	440a      	add	r2, r1
 800bea2:	7561      	strb	r1, [r4, #21]
 800bea4:	440b      	add	r3, r1
 800bea6:	60a2      	str	r2, [r4, #8]
 800bea8:	6123      	str	r3, [r4, #16]
 800beaa:	7da0      	ldrb	r0, [r4, #22]
 800beac:	f080 0001 	eor.w	r0, r0, #1
 800beb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	602b      	str	r3, [r5, #0]
 800beb8:	e7ef      	b.n	800be9a <ucdr_deserialize_uint32_t+0xb6>
 800beba:	68a2      	ldr	r2, [r4, #8]
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	1bd2      	subs	r2, r2, r7
 800bec0:	7da0      	ldrb	r0, [r4, #22]
 800bec2:	1bdb      	subs	r3, r3, r7
 800bec4:	f884 8015 	strb.w	r8, [r4, #21]
 800bec8:	f080 0001 	eor.w	r0, r0, #1
 800becc:	60a2      	str	r2, [r4, #8]
 800bece:	6123      	str	r3, [r4, #16]
 800bed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	789b      	ldrb	r3, [r3, #2]
 800bed8:	706b      	strb	r3, [r5, #1]
 800beda:	1cab      	adds	r3, r5, #2
 800bedc:	68a2      	ldr	r2, [r4, #8]
 800bede:	7852      	ldrb	r2, [r2, #1]
 800bee0:	f803 2b01 	strb.w	r2, [r3], #1
 800bee4:	68a2      	ldr	r2, [r4, #8]
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	701a      	strb	r2, [r3, #0]
 800beea:	e7b4      	b.n	800be56 <ucdr_deserialize_uint32_t+0x72>
 800beec:	4631      	mov	r1, r6
 800beee:	463a      	mov	r2, r7
 800bef0:	4628      	mov	r0, r5
 800bef2:	f00a ff9a 	bl	8016e2a <memcpy>
 800bef6:	464a      	mov	r2, r9
 800bef8:	19e8      	adds	r0, r5, r7
 800befa:	68a1      	ldr	r1, [r4, #8]
 800befc:	f00a ff95 	bl	8016e2a <memcpy>
 800bf00:	e7a9      	b.n	800be56 <ucdr_deserialize_uint32_t+0x72>
 800bf02:	bf00      	nop

0800bf04 <ucdr_deserialize_endian_uint32_t>:
 800bf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460e      	mov	r6, r1
 800bf0c:	2104      	movs	r1, #4
 800bf0e:	4615      	mov	r5, r2
 800bf10:	f000 fd02 	bl	800c918 <ucdr_buffer_alignment>
 800bf14:	4601      	mov	r1, r0
 800bf16:	4620      	mov	r0, r4
 800bf18:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf1c:	f000 fd44 	bl	800c9a8 <ucdr_advance_buffer>
 800bf20:	2104      	movs	r1, #4
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 fc98 	bl	800c858 <ucdr_check_buffer_available_for>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d13c      	bne.n	800bfa6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bf2c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bf30:	42bb      	cmp	r3, r7
 800bf32:	d933      	bls.n	800bf9c <ucdr_deserialize_endian_uint32_t+0x98>
 800bf34:	eba3 0907 	sub.w	r9, r3, r7
 800bf38:	60a3      	str	r3, [r4, #8]
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f1c9 0a04 	rsb	sl, r9, #4
 800bf42:	444b      	add	r3, r9
 800bf44:	4651      	mov	r1, sl
 800bf46:	6123      	str	r3, [r4, #16]
 800bf48:	f000 fc92 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d048      	beq.n	800bfe2 <ucdr_deserialize_endian_uint32_t+0xde>
 800bf50:	2e01      	cmp	r6, #1
 800bf52:	d061      	beq.n	800c018 <ucdr_deserialize_endian_uint32_t+0x114>
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	702b      	strb	r3, [r5, #0]
 800bf58:	f1b9 0f00 	cmp.w	r9, #0
 800bf5c:	d050      	beq.n	800c000 <ucdr_deserialize_endian_uint32_t+0xfc>
 800bf5e:	78bb      	ldrb	r3, [r7, #2]
 800bf60:	f1b9 0f01 	cmp.w	r9, #1
 800bf64:	706b      	strb	r3, [r5, #1]
 800bf66:	f105 0302 	add.w	r3, r5, #2
 800bf6a:	d04d      	beq.n	800c008 <ucdr_deserialize_endian_uint32_t+0x104>
 800bf6c:	787b      	ldrb	r3, [r7, #1]
 800bf6e:	f1b9 0f02 	cmp.w	r9, #2
 800bf72:	70ab      	strb	r3, [r5, #2]
 800bf74:	f105 0303 	add.w	r3, r5, #3
 800bf78:	d04a      	beq.n	800c010 <ucdr_deserialize_endian_uint32_t+0x10c>
 800bf7a:	783b      	ldrb	r3, [r7, #0]
 800bf7c:	70eb      	strb	r3, [r5, #3]
 800bf7e:	6923      	ldr	r3, [r4, #16]
 800bf80:	2104      	movs	r1, #4
 800bf82:	68a2      	ldr	r2, [r4, #8]
 800bf84:	3304      	adds	r3, #4
 800bf86:	7da0      	ldrb	r0, [r4, #22]
 800bf88:	4452      	add	r2, sl
 800bf8a:	7561      	strb	r1, [r4, #21]
 800bf8c:	eba3 0309 	sub.w	r3, r3, r9
 800bf90:	f080 0001 	eor.w	r0, r0, #1
 800bf94:	60a2      	str	r2, [r4, #8]
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9c:	2104      	movs	r1, #4
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 fc66 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800bfa4:	b1a8      	cbz	r0, 800bfd2 <ucdr_deserialize_endian_uint32_t+0xce>
 800bfa6:	2e01      	cmp	r6, #1
 800bfa8:	68a3      	ldr	r3, [r4, #8]
 800bfaa:	d017      	beq.n	800bfdc <ucdr_deserialize_endian_uint32_t+0xd8>
 800bfac:	78db      	ldrb	r3, [r3, #3]
 800bfae:	702b      	strb	r3, [r5, #0]
 800bfb0:	68a3      	ldr	r3, [r4, #8]
 800bfb2:	789b      	ldrb	r3, [r3, #2]
 800bfb4:	706b      	strb	r3, [r5, #1]
 800bfb6:	68a3      	ldr	r3, [r4, #8]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	70ab      	strb	r3, [r5, #2]
 800bfbc:	68a3      	ldr	r3, [r4, #8]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	70eb      	strb	r3, [r5, #3]
 800bfc2:	2104      	movs	r1, #4
 800bfc4:	68a2      	ldr	r2, [r4, #8]
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	440a      	add	r2, r1
 800bfca:	7561      	strb	r1, [r4, #21]
 800bfcc:	440b      	add	r3, r1
 800bfce:	60a2      	str	r2, [r4, #8]
 800bfd0:	6123      	str	r3, [r4, #16]
 800bfd2:	7da0      	ldrb	r0, [r4, #22]
 800bfd4:	f080 0001 	eor.w	r0, r0, #1
 800bfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	602b      	str	r3, [r5, #0]
 800bfe0:	e7ef      	b.n	800bfc2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800bfe2:	68a2      	ldr	r2, [r4, #8]
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	eba2 0209 	sub.w	r2, r2, r9
 800bfea:	7da0      	ldrb	r0, [r4, #22]
 800bfec:	eba3 0309 	sub.w	r3, r3, r9
 800bff0:	f884 8015 	strb.w	r8, [r4, #21]
 800bff4:	f080 0001 	eor.w	r0, r0, #1
 800bff8:	60a2      	str	r2, [r4, #8]
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c000:	68a3      	ldr	r3, [r4, #8]
 800c002:	789b      	ldrb	r3, [r3, #2]
 800c004:	706b      	strb	r3, [r5, #1]
 800c006:	1cab      	adds	r3, r5, #2
 800c008:	68a2      	ldr	r2, [r4, #8]
 800c00a:	7852      	ldrb	r2, [r2, #1]
 800c00c:	f803 2b01 	strb.w	r2, [r3], #1
 800c010:	68a2      	ldr	r2, [r4, #8]
 800c012:	7812      	ldrb	r2, [r2, #0]
 800c014:	701a      	strb	r2, [r3, #0]
 800c016:	e7b2      	b.n	800bf7e <ucdr_deserialize_endian_uint32_t+0x7a>
 800c018:	4639      	mov	r1, r7
 800c01a:	464a      	mov	r2, r9
 800c01c:	4628      	mov	r0, r5
 800c01e:	f00a ff04 	bl	8016e2a <memcpy>
 800c022:	4652      	mov	r2, sl
 800c024:	eb05 0009 	add.w	r0, r5, r9
 800c028:	68a1      	ldr	r1, [r4, #8]
 800c02a:	f00a fefe 	bl	8016e2a <memcpy>
 800c02e:	e7a6      	b.n	800bf7e <ucdr_deserialize_endian_uint32_t+0x7a>

0800c030 <ucdr_serialize_uint64_t>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	4604      	mov	r4, r0
 800c036:	b082      	sub	sp, #8
 800c038:	2108      	movs	r1, #8
 800c03a:	e9cd 2300 	strd	r2, r3, [sp]
 800c03e:	f000 fc6b 	bl	800c918 <ucdr_buffer_alignment>
 800c042:	4601      	mov	r1, r0
 800c044:	4620      	mov	r0, r4
 800c046:	7d67      	ldrb	r7, [r4, #21]
 800c048:	f000 fcae 	bl	800c9a8 <ucdr_advance_buffer>
 800c04c:	2108      	movs	r1, #8
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 fc02 	bl	800c858 <ucdr_check_buffer_available_for>
 800c054:	2800      	cmp	r0, #0
 800c056:	d14e      	bne.n	800c0f6 <ucdr_serialize_uint64_t+0xc6>
 800c058:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c05c:	42ab      	cmp	r3, r5
 800c05e:	d945      	bls.n	800c0ec <ucdr_serialize_uint64_t+0xbc>
 800c060:	1b5e      	subs	r6, r3, r5
 800c062:	60a3      	str	r3, [r4, #8]
 800c064:	6923      	ldr	r3, [r4, #16]
 800c066:	4620      	mov	r0, r4
 800c068:	f1c6 0808 	rsb	r8, r6, #8
 800c06c:	4433      	add	r3, r6
 800c06e:	4641      	mov	r1, r8
 800c070:	6123      	str	r3, [r4, #16]
 800c072:	f000 fbfd 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c076:	2800      	cmp	r0, #0
 800c078:	d074      	beq.n	800c164 <ucdr_serialize_uint64_t+0x134>
 800c07a:	7d23      	ldrb	r3, [r4, #20]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	f000 809b 	beq.w	800c1b8 <ucdr_serialize_uint64_t+0x188>
 800c082:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c086:	702b      	strb	r3, [r5, #0]
 800c088:	2e00      	cmp	r6, #0
 800c08a:	d078      	beq.n	800c17e <ucdr_serialize_uint64_t+0x14e>
 800c08c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c090:	2e01      	cmp	r6, #1
 800c092:	706b      	strb	r3, [r5, #1]
 800c094:	d077      	beq.n	800c186 <ucdr_serialize_uint64_t+0x156>
 800c096:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c09a:	2e02      	cmp	r6, #2
 800c09c:	70ab      	strb	r3, [r5, #2]
 800c09e:	d076      	beq.n	800c18e <ucdr_serialize_uint64_t+0x15e>
 800c0a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0a4:	2e03      	cmp	r6, #3
 800c0a6:	70eb      	strb	r3, [r5, #3]
 800c0a8:	d075      	beq.n	800c196 <ucdr_serialize_uint64_t+0x166>
 800c0aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c0ae:	2e04      	cmp	r6, #4
 800c0b0:	712b      	strb	r3, [r5, #4]
 800c0b2:	d074      	beq.n	800c19e <ucdr_serialize_uint64_t+0x16e>
 800c0b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c0b8:	2e05      	cmp	r6, #5
 800c0ba:	716b      	strb	r3, [r5, #5]
 800c0bc:	d073      	beq.n	800c1a6 <ucdr_serialize_uint64_t+0x176>
 800c0be:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c0c2:	2e06      	cmp	r6, #6
 800c0c4:	71ab      	strb	r3, [r5, #6]
 800c0c6:	d072      	beq.n	800c1ae <ucdr_serialize_uint64_t+0x17e>
 800c0c8:	f89d 3000 	ldrb.w	r3, [sp]
 800c0cc:	71eb      	strb	r3, [r5, #7]
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	2108      	movs	r1, #8
 800c0d2:	68a2      	ldr	r2, [r4, #8]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	7da0      	ldrb	r0, [r4, #22]
 800c0d8:	4442      	add	r2, r8
 800c0da:	7561      	strb	r1, [r4, #21]
 800c0dc:	1b9e      	subs	r6, r3, r6
 800c0de:	f080 0001 	eor.w	r0, r0, #1
 800c0e2:	60a2      	str	r2, [r4, #8]
 800c0e4:	6126      	str	r6, [r4, #16]
 800c0e6:	b002      	add	sp, #8
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ec:	2108      	movs	r1, #8
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 fbbe 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c0f4:	b350      	cbz	r0, 800c14c <ucdr_serialize_uint64_t+0x11c>
 800c0f6:	7d23      	ldrb	r3, [r4, #20]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d02d      	beq.n	800c158 <ucdr_serialize_uint64_t+0x128>
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c102:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c106:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800c10a:	7018      	strb	r0, [r3, #0]
 800c10c:	68a3      	ldr	r3, [r4, #8]
 800c10e:	705a      	strb	r2, [r3, #1]
 800c110:	68a3      	ldr	r3, [r4, #8]
 800c112:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c116:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800c11a:	7099      	strb	r1, [r3, #2]
 800c11c:	68a3      	ldr	r3, [r4, #8]
 800c11e:	70da      	strb	r2, [r3, #3]
 800c120:	68a3      	ldr	r3, [r4, #8]
 800c122:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c126:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800c12a:	7118      	strb	r0, [r3, #4]
 800c12c:	68a3      	ldr	r3, [r4, #8]
 800c12e:	715a      	strb	r2, [r3, #5]
 800c130:	68a3      	ldr	r3, [r4, #8]
 800c132:	f89d 2000 	ldrb.w	r2, [sp]
 800c136:	7199      	strb	r1, [r3, #6]
 800c138:	68a3      	ldr	r3, [r4, #8]
 800c13a:	71da      	strb	r2, [r3, #7]
 800c13c:	2108      	movs	r1, #8
 800c13e:	68a2      	ldr	r2, [r4, #8]
 800c140:	6923      	ldr	r3, [r4, #16]
 800c142:	440a      	add	r2, r1
 800c144:	7561      	strb	r1, [r4, #21]
 800c146:	440b      	add	r3, r1
 800c148:	60a2      	str	r2, [r4, #8]
 800c14a:	6123      	str	r3, [r4, #16]
 800c14c:	7da0      	ldrb	r0, [r4, #22]
 800c14e:	f080 0001 	eor.w	r0, r0, #1
 800c152:	b002      	add	sp, #8
 800c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c158:	466b      	mov	r3, sp
 800c15a:	68a2      	ldr	r2, [r4, #8]
 800c15c:	cb03      	ldmia	r3!, {r0, r1}
 800c15e:	6010      	str	r0, [r2, #0]
 800c160:	6051      	str	r1, [r2, #4]
 800c162:	e7eb      	b.n	800c13c <ucdr_serialize_uint64_t+0x10c>
 800c164:	68a2      	ldr	r2, [r4, #8]
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	7da0      	ldrb	r0, [r4, #22]
 800c16a:	1b92      	subs	r2, r2, r6
 800c16c:	1b9b      	subs	r3, r3, r6
 800c16e:	7567      	strb	r7, [r4, #21]
 800c170:	f080 0001 	eor.w	r0, r0, #1
 800c174:	60a2      	str	r2, [r4, #8]
 800c176:	6123      	str	r3, [r4, #16]
 800c178:	b002      	add	sp, #8
 800c17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17e:	68a3      	ldr	r3, [r4, #8]
 800c180:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c184:	701a      	strb	r2, [r3, #0]
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c194:	701a      	strb	r2, [r3, #0]
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	68a3      	ldr	r3, [r4, #8]
 800c1a0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	68a3      	ldr	r3, [r4, #8]
 800c1a8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c1ac:	701a      	strb	r2, [r3, #0]
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	f89d 2000 	ldrb.w	r2, [sp]
 800c1b4:	701a      	strb	r2, [r3, #0]
 800c1b6:	e78a      	b.n	800c0ce <ucdr_serialize_uint64_t+0x9e>
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	466d      	mov	r5, sp
 800c1bc:	4632      	mov	r2, r6
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f00a fe33 	bl	8016e2a <memcpy>
 800c1c4:	4642      	mov	r2, r8
 800c1c6:	19a9      	adds	r1, r5, r6
 800c1c8:	68a0      	ldr	r0, [r4, #8]
 800c1ca:	f00a fe2e 	bl	8016e2a <memcpy>
 800c1ce:	e77e      	b.n	800c0ce <ucdr_serialize_uint64_t+0x9e>

0800c1d0 <ucdr_serialize_int16_t>:
 800c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	4604      	mov	r4, r0
 800c1da:	2102      	movs	r1, #2
 800c1dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c1e0:	f000 fb9a 	bl	800c918 <ucdr_buffer_alignment>
 800c1e4:	4601      	mov	r1, r0
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	7d67      	ldrb	r7, [r4, #21]
 800c1ea:	f000 fbdd 	bl	800c9a8 <ucdr_advance_buffer>
 800c1ee:	2102      	movs	r1, #2
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f000 fb31 	bl	800c858 <ucdr_check_buffer_available_for>
 800c1f6:	bb78      	cbnz	r0, 800c258 <ucdr_serialize_int16_t+0x88>
 800c1f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c1fc:	42ab      	cmp	r3, r5
 800c1fe:	d926      	bls.n	800c24e <ucdr_serialize_int16_t+0x7e>
 800c200:	1b5e      	subs	r6, r3, r5
 800c202:	60a3      	str	r3, [r4, #8]
 800c204:	6923      	ldr	r3, [r4, #16]
 800c206:	4620      	mov	r0, r4
 800c208:	f1c6 0802 	rsb	r8, r6, #2
 800c20c:	4433      	add	r3, r6
 800c20e:	4641      	mov	r1, r8
 800c210:	6123      	str	r3, [r4, #16]
 800c212:	f000 fb2d 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c216:	2800      	cmp	r0, #0
 800c218:	d03b      	beq.n	800c292 <ucdr_serialize_int16_t+0xc2>
 800c21a:	7d23      	ldrb	r3, [r4, #20]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d04a      	beq.n	800c2b6 <ucdr_serialize_int16_t+0xe6>
 800c220:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c224:	702b      	strb	r3, [r5, #0]
 800c226:	2e00      	cmp	r6, #0
 800c228:	d040      	beq.n	800c2ac <ucdr_serialize_int16_t+0xdc>
 800c22a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c22e:	706b      	strb	r3, [r5, #1]
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	2102      	movs	r1, #2
 800c234:	68a2      	ldr	r2, [r4, #8]
 800c236:	3302      	adds	r3, #2
 800c238:	7da0      	ldrb	r0, [r4, #22]
 800c23a:	4442      	add	r2, r8
 800c23c:	7561      	strb	r1, [r4, #21]
 800c23e:	1b9e      	subs	r6, r3, r6
 800c240:	f080 0001 	eor.w	r0, r0, #1
 800c244:	60a2      	str	r2, [r4, #8]
 800c246:	6126      	str	r6, [r4, #16]
 800c248:	b002      	add	sp, #8
 800c24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c24e:	2102      	movs	r1, #2
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fb0d 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c256:	b190      	cbz	r0, 800c27e <ucdr_serialize_int16_t+0xae>
 800c258:	7d23      	ldrb	r3, [r4, #20]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	68a3      	ldr	r3, [r4, #8]
 800c25e:	d014      	beq.n	800c28a <ucdr_serialize_int16_t+0xba>
 800c260:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c264:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c268:	7019      	strb	r1, [r3, #0]
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	705a      	strb	r2, [r3, #1]
 800c26e:	2102      	movs	r1, #2
 800c270:	68a2      	ldr	r2, [r4, #8]
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	440a      	add	r2, r1
 800c276:	7561      	strb	r1, [r4, #21]
 800c278:	440b      	add	r3, r1
 800c27a:	60a2      	str	r2, [r4, #8]
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	7da0      	ldrb	r0, [r4, #22]
 800c280:	f080 0001 	eor.w	r0, r0, #1
 800c284:	b002      	add	sp, #8
 800c286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c28a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c28e:	801a      	strh	r2, [r3, #0]
 800c290:	e7ed      	b.n	800c26e <ucdr_serialize_int16_t+0x9e>
 800c292:	68a2      	ldr	r2, [r4, #8]
 800c294:	6923      	ldr	r3, [r4, #16]
 800c296:	7da0      	ldrb	r0, [r4, #22]
 800c298:	1b92      	subs	r2, r2, r6
 800c29a:	1b9b      	subs	r3, r3, r6
 800c29c:	7567      	strb	r7, [r4, #21]
 800c29e:	f080 0001 	eor.w	r0, r0, #1
 800c2a2:	60a2      	str	r2, [r4, #8]
 800c2a4:	6123      	str	r3, [r4, #16]
 800c2a6:	b002      	add	sp, #8
 800c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ac:	68a3      	ldr	r3, [r4, #8]
 800c2ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e7bc      	b.n	800c230 <ucdr_serialize_int16_t+0x60>
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	f10d 0506 	add.w	r5, sp, #6
 800c2bc:	4632      	mov	r2, r6
 800c2be:	4629      	mov	r1, r5
 800c2c0:	f00a fdb3 	bl	8016e2a <memcpy>
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	19a9      	adds	r1, r5, r6
 800c2c8:	68a0      	ldr	r0, [r4, #8]
 800c2ca:	f00a fdae 	bl	8016e2a <memcpy>
 800c2ce:	e7af      	b.n	800c230 <ucdr_serialize_int16_t+0x60>

0800c2d0 <ucdr_deserialize_int16_t>:
 800c2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	2102      	movs	r1, #2
 800c2da:	f000 fb1d 	bl	800c918 <ucdr_buffer_alignment>
 800c2de:	4601      	mov	r1, r0
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c2e6:	f000 fb5f 	bl	800c9a8 <ucdr_advance_buffer>
 800c2ea:	2102      	movs	r1, #2
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f000 fab3 	bl	800c858 <ucdr_check_buffer_available_for>
 800c2f2:	bb60      	cbnz	r0, 800c34e <ucdr_deserialize_int16_t+0x7e>
 800c2f4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c2f8:	42be      	cmp	r6, r7
 800c2fa:	d923      	bls.n	800c344 <ucdr_deserialize_int16_t+0x74>
 800c2fc:	6923      	ldr	r3, [r4, #16]
 800c2fe:	4620      	mov	r0, r4
 800c300:	60a6      	str	r6, [r4, #8]
 800c302:	1bf6      	subs	r6, r6, r7
 800c304:	4433      	add	r3, r6
 800c306:	f1c6 0902 	rsb	r9, r6, #2
 800c30a:	6123      	str	r3, [r4, #16]
 800c30c:	4649      	mov	r1, r9
 800c30e:	f000 faaf 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c312:	2800      	cmp	r0, #0
 800c314:	d034      	beq.n	800c380 <ucdr_deserialize_int16_t+0xb0>
 800c316:	7d23      	ldrb	r3, [r4, #20]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d042      	beq.n	800c3a2 <ucdr_deserialize_int16_t+0xd2>
 800c31c:	787b      	ldrb	r3, [r7, #1]
 800c31e:	702b      	strb	r3, [r5, #0]
 800c320:	2e00      	cmp	r6, #0
 800c322:	d03a      	beq.n	800c39a <ucdr_deserialize_int16_t+0xca>
 800c324:	783b      	ldrb	r3, [r7, #0]
 800c326:	706b      	strb	r3, [r5, #1]
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	2102      	movs	r1, #2
 800c32c:	68a2      	ldr	r2, [r4, #8]
 800c32e:	3302      	adds	r3, #2
 800c330:	7da0      	ldrb	r0, [r4, #22]
 800c332:	444a      	add	r2, r9
 800c334:	7561      	strb	r1, [r4, #21]
 800c336:	1b9b      	subs	r3, r3, r6
 800c338:	f080 0001 	eor.w	r0, r0, #1
 800c33c:	60a2      	str	r2, [r4, #8]
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c344:	2102      	movs	r1, #2
 800c346:	4620      	mov	r0, r4
 800c348:	f000 fa92 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c34c:	b180      	cbz	r0, 800c370 <ucdr_deserialize_int16_t+0xa0>
 800c34e:	7d23      	ldrb	r3, [r4, #20]
 800c350:	2b01      	cmp	r3, #1
 800c352:	68a3      	ldr	r3, [r4, #8]
 800c354:	d011      	beq.n	800c37a <ucdr_deserialize_int16_t+0xaa>
 800c356:	785b      	ldrb	r3, [r3, #1]
 800c358:	702b      	strb	r3, [r5, #0]
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	706b      	strb	r3, [r5, #1]
 800c360:	2102      	movs	r1, #2
 800c362:	68a2      	ldr	r2, [r4, #8]
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	440a      	add	r2, r1
 800c368:	7561      	strb	r1, [r4, #21]
 800c36a:	440b      	add	r3, r1
 800c36c:	60a2      	str	r2, [r4, #8]
 800c36e:	6123      	str	r3, [r4, #16]
 800c370:	7da0      	ldrb	r0, [r4, #22]
 800c372:	f080 0001 	eor.w	r0, r0, #1
 800c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	802b      	strh	r3, [r5, #0]
 800c37e:	e7ef      	b.n	800c360 <ucdr_deserialize_int16_t+0x90>
 800c380:	68a2      	ldr	r2, [r4, #8]
 800c382:	6923      	ldr	r3, [r4, #16]
 800c384:	1b92      	subs	r2, r2, r6
 800c386:	7da0      	ldrb	r0, [r4, #22]
 800c388:	1b9b      	subs	r3, r3, r6
 800c38a:	f884 8015 	strb.w	r8, [r4, #21]
 800c38e:	f080 0001 	eor.w	r0, r0, #1
 800c392:	60a2      	str	r2, [r4, #8]
 800c394:	6123      	str	r3, [r4, #16]
 800c396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	706b      	strb	r3, [r5, #1]
 800c3a0:	e7c2      	b.n	800c328 <ucdr_deserialize_int16_t+0x58>
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f00a fd3f 	bl	8016e2a <memcpy>
 800c3ac:	464a      	mov	r2, r9
 800c3ae:	19a8      	adds	r0, r5, r6
 800c3b0:	68a1      	ldr	r1, [r4, #8]
 800c3b2:	f00a fd3a 	bl	8016e2a <memcpy>
 800c3b6:	e7b7      	b.n	800c328 <ucdr_deserialize_int16_t+0x58>

0800c3b8 <ucdr_serialize_int32_t>:
 800c3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	4604      	mov	r4, r0
 800c3c0:	9101      	str	r1, [sp, #4]
 800c3c2:	2104      	movs	r1, #4
 800c3c4:	f000 faa8 	bl	800c918 <ucdr_buffer_alignment>
 800c3c8:	4601      	mov	r1, r0
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	7d67      	ldrb	r7, [r4, #21]
 800c3ce:	f000 faeb 	bl	800c9a8 <ucdr_advance_buffer>
 800c3d2:	2104      	movs	r1, #4
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f000 fa3f 	bl	800c858 <ucdr_check_buffer_available_for>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d139      	bne.n	800c452 <ucdr_serialize_int32_t+0x9a>
 800c3de:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3e2:	42ab      	cmp	r3, r5
 800c3e4:	d930      	bls.n	800c448 <ucdr_serialize_int32_t+0x90>
 800c3e6:	1b5e      	subs	r6, r3, r5
 800c3e8:	60a3      	str	r3, [r4, #8]
 800c3ea:	6923      	ldr	r3, [r4, #16]
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f1c6 0804 	rsb	r8, r6, #4
 800c3f2:	4433      	add	r3, r6
 800c3f4:	4641      	mov	r1, r8
 800c3f6:	6123      	str	r3, [r4, #16]
 800c3f8:	f000 fa3a 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d04c      	beq.n	800c49a <ucdr_serialize_int32_t+0xe2>
 800c400:	7d23      	ldrb	r3, [r4, #20]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d063      	beq.n	800c4ce <ucdr_serialize_int32_t+0x116>
 800c406:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c40a:	702b      	strb	r3, [r5, #0]
 800c40c:	2e00      	cmp	r6, #0
 800c40e:	d051      	beq.n	800c4b4 <ucdr_serialize_int32_t+0xfc>
 800c410:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c414:	2e01      	cmp	r6, #1
 800c416:	706b      	strb	r3, [r5, #1]
 800c418:	d050      	beq.n	800c4bc <ucdr_serialize_int32_t+0x104>
 800c41a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c41e:	2e02      	cmp	r6, #2
 800c420:	70ab      	strb	r3, [r5, #2]
 800c422:	d04f      	beq.n	800c4c4 <ucdr_serialize_int32_t+0x10c>
 800c424:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c428:	70eb      	strb	r3, [r5, #3]
 800c42a:	6923      	ldr	r3, [r4, #16]
 800c42c:	2104      	movs	r1, #4
 800c42e:	68a2      	ldr	r2, [r4, #8]
 800c430:	3304      	adds	r3, #4
 800c432:	7da0      	ldrb	r0, [r4, #22]
 800c434:	4442      	add	r2, r8
 800c436:	7561      	strb	r1, [r4, #21]
 800c438:	1b9e      	subs	r6, r3, r6
 800c43a:	f080 0001 	eor.w	r0, r0, #1
 800c43e:	60a2      	str	r2, [r4, #8]
 800c440:	6126      	str	r6, [r4, #16]
 800c442:	b002      	add	sp, #8
 800c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c448:	2104      	movs	r1, #4
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 fa10 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c450:	b1d0      	cbz	r0, 800c488 <ucdr_serialize_int32_t+0xd0>
 800c452:	7d23      	ldrb	r3, [r4, #20]
 800c454:	2b01      	cmp	r3, #1
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	d01c      	beq.n	800c494 <ucdr_serialize_int32_t+0xdc>
 800c45a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c45e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c462:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800c466:	7018      	strb	r0, [r3, #0]
 800c468:	68a3      	ldr	r3, [r4, #8]
 800c46a:	705a      	strb	r2, [r3, #1]
 800c46c:	68a3      	ldr	r3, [r4, #8]
 800c46e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c472:	7099      	strb	r1, [r3, #2]
 800c474:	68a3      	ldr	r3, [r4, #8]
 800c476:	70da      	strb	r2, [r3, #3]
 800c478:	2104      	movs	r1, #4
 800c47a:	68a2      	ldr	r2, [r4, #8]
 800c47c:	6923      	ldr	r3, [r4, #16]
 800c47e:	440a      	add	r2, r1
 800c480:	7561      	strb	r1, [r4, #21]
 800c482:	440b      	add	r3, r1
 800c484:	60a2      	str	r2, [r4, #8]
 800c486:	6123      	str	r3, [r4, #16]
 800c488:	7da0      	ldrb	r0, [r4, #22]
 800c48a:	f080 0001 	eor.w	r0, r0, #1
 800c48e:	b002      	add	sp, #8
 800c490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c494:	9a01      	ldr	r2, [sp, #4]
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	e7ee      	b.n	800c478 <ucdr_serialize_int32_t+0xc0>
 800c49a:	68a2      	ldr	r2, [r4, #8]
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	7da0      	ldrb	r0, [r4, #22]
 800c4a0:	1b92      	subs	r2, r2, r6
 800c4a2:	1b9b      	subs	r3, r3, r6
 800c4a4:	7567      	strb	r7, [r4, #21]
 800c4a6:	f080 0001 	eor.w	r0, r0, #1
 800c4aa:	60a2      	str	r2, [r4, #8]
 800c4ac:	6123      	str	r3, [r4, #16]
 800c4ae:	b002      	add	sp, #8
 800c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b4:	68a3      	ldr	r3, [r4, #8]
 800c4b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	68a3      	ldr	r3, [r4, #8]
 800c4be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	68a3      	ldr	r3, [r4, #8]
 800c4c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	e7ad      	b.n	800c42a <ucdr_serialize_int32_t+0x72>
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	ad01      	add	r5, sp, #4
 800c4d2:	4632      	mov	r2, r6
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f00a fca8 	bl	8016e2a <memcpy>
 800c4da:	4642      	mov	r2, r8
 800c4dc:	19a9      	adds	r1, r5, r6
 800c4de:	68a0      	ldr	r0, [r4, #8]
 800c4e0:	f00a fca3 	bl	8016e2a <memcpy>
 800c4e4:	e7a1      	b.n	800c42a <ucdr_serialize_int32_t+0x72>
 800c4e6:	bf00      	nop

0800c4e8 <ucdr_deserialize_int32_t>:
 800c4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	460d      	mov	r5, r1
 800c4f0:	2104      	movs	r1, #4
 800c4f2:	f000 fa11 	bl	800c918 <ucdr_buffer_alignment>
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c4fe:	f000 fa53 	bl	800c9a8 <ucdr_advance_buffer>
 800c502:	2104      	movs	r1, #4
 800c504:	4620      	mov	r0, r4
 800c506:	f000 f9a7 	bl	800c858 <ucdr_check_buffer_available_for>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d138      	bne.n	800c580 <ucdr_deserialize_int32_t+0x98>
 800c50e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c512:	42b7      	cmp	r7, r6
 800c514:	d92f      	bls.n	800c576 <ucdr_deserialize_int32_t+0x8e>
 800c516:	6923      	ldr	r3, [r4, #16]
 800c518:	4620      	mov	r0, r4
 800c51a:	60a7      	str	r7, [r4, #8]
 800c51c:	1bbf      	subs	r7, r7, r6
 800c51e:	443b      	add	r3, r7
 800c520:	f1c7 0904 	rsb	r9, r7, #4
 800c524:	6123      	str	r3, [r4, #16]
 800c526:	4649      	mov	r1, r9
 800c528:	f000 f9a2 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d046      	beq.n	800c5be <ucdr_deserialize_int32_t+0xd6>
 800c530:	7d23      	ldrb	r3, [r4, #20]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d05c      	beq.n	800c5f0 <ucdr_deserialize_int32_t+0x108>
 800c536:	78f3      	ldrb	r3, [r6, #3]
 800c538:	702b      	strb	r3, [r5, #0]
 800c53a:	2f00      	cmp	r7, #0
 800c53c:	d04c      	beq.n	800c5d8 <ucdr_deserialize_int32_t+0xf0>
 800c53e:	78b3      	ldrb	r3, [r6, #2]
 800c540:	2f01      	cmp	r7, #1
 800c542:	706b      	strb	r3, [r5, #1]
 800c544:	f105 0302 	add.w	r3, r5, #2
 800c548:	d04a      	beq.n	800c5e0 <ucdr_deserialize_int32_t+0xf8>
 800c54a:	7873      	ldrb	r3, [r6, #1]
 800c54c:	2f02      	cmp	r7, #2
 800c54e:	70ab      	strb	r3, [r5, #2]
 800c550:	f105 0303 	add.w	r3, r5, #3
 800c554:	d048      	beq.n	800c5e8 <ucdr_deserialize_int32_t+0x100>
 800c556:	7833      	ldrb	r3, [r6, #0]
 800c558:	70eb      	strb	r3, [r5, #3]
 800c55a:	6923      	ldr	r3, [r4, #16]
 800c55c:	2104      	movs	r1, #4
 800c55e:	68a2      	ldr	r2, [r4, #8]
 800c560:	3304      	adds	r3, #4
 800c562:	7da0      	ldrb	r0, [r4, #22]
 800c564:	444a      	add	r2, r9
 800c566:	7561      	strb	r1, [r4, #21]
 800c568:	1bdb      	subs	r3, r3, r7
 800c56a:	f080 0001 	eor.w	r0, r0, #1
 800c56e:	60a2      	str	r2, [r4, #8]
 800c570:	6123      	str	r3, [r4, #16]
 800c572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c576:	2104      	movs	r1, #4
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 f979 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c57e:	b1b0      	cbz	r0, 800c5ae <ucdr_deserialize_int32_t+0xc6>
 800c580:	7d23      	ldrb	r3, [r4, #20]
 800c582:	2b01      	cmp	r3, #1
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	d017      	beq.n	800c5b8 <ucdr_deserialize_int32_t+0xd0>
 800c588:	78db      	ldrb	r3, [r3, #3]
 800c58a:	702b      	strb	r3, [r5, #0]
 800c58c:	68a3      	ldr	r3, [r4, #8]
 800c58e:	789b      	ldrb	r3, [r3, #2]
 800c590:	706b      	strb	r3, [r5, #1]
 800c592:	68a3      	ldr	r3, [r4, #8]
 800c594:	785b      	ldrb	r3, [r3, #1]
 800c596:	70ab      	strb	r3, [r5, #2]
 800c598:	68a3      	ldr	r3, [r4, #8]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	70eb      	strb	r3, [r5, #3]
 800c59e:	2104      	movs	r1, #4
 800c5a0:	68a2      	ldr	r2, [r4, #8]
 800c5a2:	6923      	ldr	r3, [r4, #16]
 800c5a4:	440a      	add	r2, r1
 800c5a6:	7561      	strb	r1, [r4, #21]
 800c5a8:	440b      	add	r3, r1
 800c5aa:	60a2      	str	r2, [r4, #8]
 800c5ac:	6123      	str	r3, [r4, #16]
 800c5ae:	7da0      	ldrb	r0, [r4, #22]
 800c5b0:	f080 0001 	eor.w	r0, r0, #1
 800c5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	e7ef      	b.n	800c59e <ucdr_deserialize_int32_t+0xb6>
 800c5be:	68a2      	ldr	r2, [r4, #8]
 800c5c0:	6923      	ldr	r3, [r4, #16]
 800c5c2:	1bd2      	subs	r2, r2, r7
 800c5c4:	7da0      	ldrb	r0, [r4, #22]
 800c5c6:	1bdb      	subs	r3, r3, r7
 800c5c8:	f884 8015 	strb.w	r8, [r4, #21]
 800c5cc:	f080 0001 	eor.w	r0, r0, #1
 800c5d0:	60a2      	str	r2, [r4, #8]
 800c5d2:	6123      	str	r3, [r4, #16]
 800c5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d8:	68a3      	ldr	r3, [r4, #8]
 800c5da:	789b      	ldrb	r3, [r3, #2]
 800c5dc:	706b      	strb	r3, [r5, #1]
 800c5de:	1cab      	adds	r3, r5, #2
 800c5e0:	68a2      	ldr	r2, [r4, #8]
 800c5e2:	7852      	ldrb	r2, [r2, #1]
 800c5e4:	f803 2b01 	strb.w	r2, [r3], #1
 800c5e8:	68a2      	ldr	r2, [r4, #8]
 800c5ea:	7812      	ldrb	r2, [r2, #0]
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	e7b4      	b.n	800c55a <ucdr_deserialize_int32_t+0x72>
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	463a      	mov	r2, r7
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f00a fc18 	bl	8016e2a <memcpy>
 800c5fa:	464a      	mov	r2, r9
 800c5fc:	19e8      	adds	r0, r5, r7
 800c5fe:	68a1      	ldr	r1, [r4, #8]
 800c600:	f00a fc13 	bl	8016e2a <memcpy>
 800c604:	e7a9      	b.n	800c55a <ucdr_deserialize_int32_t+0x72>
 800c606:	bf00      	nop

0800c608 <ucdr_serialize_float>:
 800c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60c:	4604      	mov	r4, r0
 800c60e:	b082      	sub	sp, #8
 800c610:	2104      	movs	r1, #4
 800c612:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c616:	f000 f97f 	bl	800c918 <ucdr_buffer_alignment>
 800c61a:	4601      	mov	r1, r0
 800c61c:	4620      	mov	r0, r4
 800c61e:	7d67      	ldrb	r7, [r4, #21]
 800c620:	f000 f9c2 	bl	800c9a8 <ucdr_advance_buffer>
 800c624:	2104      	movs	r1, #4
 800c626:	4620      	mov	r0, r4
 800c628:	f000 f916 	bl	800c858 <ucdr_check_buffer_available_for>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d139      	bne.n	800c6a4 <ucdr_serialize_float+0x9c>
 800c630:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c634:	42ab      	cmp	r3, r5
 800c636:	d930      	bls.n	800c69a <ucdr_serialize_float+0x92>
 800c638:	1b5e      	subs	r6, r3, r5
 800c63a:	60a3      	str	r3, [r4, #8]
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	4620      	mov	r0, r4
 800c640:	f1c6 0804 	rsb	r8, r6, #4
 800c644:	4433      	add	r3, r6
 800c646:	4641      	mov	r1, r8
 800c648:	6123      	str	r3, [r4, #16]
 800c64a:	f000 f911 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d04c      	beq.n	800c6ec <ucdr_serialize_float+0xe4>
 800c652:	7d23      	ldrb	r3, [r4, #20]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d063      	beq.n	800c720 <ucdr_serialize_float+0x118>
 800c658:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c65c:	702b      	strb	r3, [r5, #0]
 800c65e:	2e00      	cmp	r6, #0
 800c660:	d051      	beq.n	800c706 <ucdr_serialize_float+0xfe>
 800c662:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c666:	2e01      	cmp	r6, #1
 800c668:	706b      	strb	r3, [r5, #1]
 800c66a:	d050      	beq.n	800c70e <ucdr_serialize_float+0x106>
 800c66c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c670:	2e02      	cmp	r6, #2
 800c672:	70ab      	strb	r3, [r5, #2]
 800c674:	d04f      	beq.n	800c716 <ucdr_serialize_float+0x10e>
 800c676:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c67a:	70eb      	strb	r3, [r5, #3]
 800c67c:	6923      	ldr	r3, [r4, #16]
 800c67e:	2104      	movs	r1, #4
 800c680:	68a2      	ldr	r2, [r4, #8]
 800c682:	3304      	adds	r3, #4
 800c684:	7da0      	ldrb	r0, [r4, #22]
 800c686:	4442      	add	r2, r8
 800c688:	7561      	strb	r1, [r4, #21]
 800c68a:	1b9e      	subs	r6, r3, r6
 800c68c:	f080 0001 	eor.w	r0, r0, #1
 800c690:	60a2      	str	r2, [r4, #8]
 800c692:	6126      	str	r6, [r4, #16]
 800c694:	b002      	add	sp, #8
 800c696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c69a:	2104      	movs	r1, #4
 800c69c:	4620      	mov	r0, r4
 800c69e:	f000 f8e7 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c6a2:	b1d0      	cbz	r0, 800c6da <ucdr_serialize_float+0xd2>
 800c6a4:	7d23      	ldrb	r3, [r4, #20]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	68a3      	ldr	r3, [r4, #8]
 800c6aa:	d01c      	beq.n	800c6e6 <ucdr_serialize_float+0xde>
 800c6ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c6b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c6b4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800c6b8:	7018      	strb	r0, [r3, #0]
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	705a      	strb	r2, [r3, #1]
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c6c4:	7099      	strb	r1, [r3, #2]
 800c6c6:	68a3      	ldr	r3, [r4, #8]
 800c6c8:	70da      	strb	r2, [r3, #3]
 800c6ca:	2104      	movs	r1, #4
 800c6cc:	68a2      	ldr	r2, [r4, #8]
 800c6ce:	6923      	ldr	r3, [r4, #16]
 800c6d0:	440a      	add	r2, r1
 800c6d2:	7561      	strb	r1, [r4, #21]
 800c6d4:	440b      	add	r3, r1
 800c6d6:	60a2      	str	r2, [r4, #8]
 800c6d8:	6123      	str	r3, [r4, #16]
 800c6da:	7da0      	ldrb	r0, [r4, #22]
 800c6dc:	f080 0001 	eor.w	r0, r0, #1
 800c6e0:	b002      	add	sp, #8
 800c6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e6:	9a01      	ldr	r2, [sp, #4]
 800c6e8:	601a      	str	r2, [r3, #0]
 800c6ea:	e7ee      	b.n	800c6ca <ucdr_serialize_float+0xc2>
 800c6ec:	68a2      	ldr	r2, [r4, #8]
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	7da0      	ldrb	r0, [r4, #22]
 800c6f2:	1b92      	subs	r2, r2, r6
 800c6f4:	1b9b      	subs	r3, r3, r6
 800c6f6:	7567      	strb	r7, [r4, #21]
 800c6f8:	f080 0001 	eor.w	r0, r0, #1
 800c6fc:	60a2      	str	r2, [r4, #8]
 800c6fe:	6123      	str	r3, [r4, #16]
 800c700:	b002      	add	sp, #8
 800c702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c706:	68a3      	ldr	r3, [r4, #8]
 800c708:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c70c:	701a      	strb	r2, [r3, #0]
 800c70e:	68a3      	ldr	r3, [r4, #8]
 800c710:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	68a3      	ldr	r3, [r4, #8]
 800c718:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	e7ad      	b.n	800c67c <ucdr_serialize_float+0x74>
 800c720:	4628      	mov	r0, r5
 800c722:	ad01      	add	r5, sp, #4
 800c724:	4632      	mov	r2, r6
 800c726:	4629      	mov	r1, r5
 800c728:	f00a fb7f 	bl	8016e2a <memcpy>
 800c72c:	4642      	mov	r2, r8
 800c72e:	19a9      	adds	r1, r5, r6
 800c730:	68a0      	ldr	r0, [r4, #8]
 800c732:	f00a fb7a 	bl	8016e2a <memcpy>
 800c736:	e7a1      	b.n	800c67c <ucdr_serialize_float+0x74>

0800c738 <ucdr_deserialize_float>:
 800c738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c73c:	4604      	mov	r4, r0
 800c73e:	460d      	mov	r5, r1
 800c740:	2104      	movs	r1, #4
 800c742:	f000 f8e9 	bl	800c918 <ucdr_buffer_alignment>
 800c746:	4601      	mov	r1, r0
 800c748:	4620      	mov	r0, r4
 800c74a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c74e:	f000 f92b 	bl	800c9a8 <ucdr_advance_buffer>
 800c752:	2104      	movs	r1, #4
 800c754:	4620      	mov	r0, r4
 800c756:	f000 f87f 	bl	800c858 <ucdr_check_buffer_available_for>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d138      	bne.n	800c7d0 <ucdr_deserialize_float+0x98>
 800c75e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c762:	42b7      	cmp	r7, r6
 800c764:	d92f      	bls.n	800c7c6 <ucdr_deserialize_float+0x8e>
 800c766:	6923      	ldr	r3, [r4, #16]
 800c768:	4620      	mov	r0, r4
 800c76a:	60a7      	str	r7, [r4, #8]
 800c76c:	1bbf      	subs	r7, r7, r6
 800c76e:	443b      	add	r3, r7
 800c770:	f1c7 0904 	rsb	r9, r7, #4
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	4649      	mov	r1, r9
 800c778:	f000 f87a 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	d046      	beq.n	800c80e <ucdr_deserialize_float+0xd6>
 800c780:	7d23      	ldrb	r3, [r4, #20]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d05c      	beq.n	800c840 <ucdr_deserialize_float+0x108>
 800c786:	78f3      	ldrb	r3, [r6, #3]
 800c788:	702b      	strb	r3, [r5, #0]
 800c78a:	2f00      	cmp	r7, #0
 800c78c:	d04c      	beq.n	800c828 <ucdr_deserialize_float+0xf0>
 800c78e:	78b3      	ldrb	r3, [r6, #2]
 800c790:	2f01      	cmp	r7, #1
 800c792:	706b      	strb	r3, [r5, #1]
 800c794:	f105 0302 	add.w	r3, r5, #2
 800c798:	d04a      	beq.n	800c830 <ucdr_deserialize_float+0xf8>
 800c79a:	7873      	ldrb	r3, [r6, #1]
 800c79c:	2f02      	cmp	r7, #2
 800c79e:	70ab      	strb	r3, [r5, #2]
 800c7a0:	f105 0303 	add.w	r3, r5, #3
 800c7a4:	d048      	beq.n	800c838 <ucdr_deserialize_float+0x100>
 800c7a6:	7833      	ldrb	r3, [r6, #0]
 800c7a8:	70eb      	strb	r3, [r5, #3]
 800c7aa:	6923      	ldr	r3, [r4, #16]
 800c7ac:	2104      	movs	r1, #4
 800c7ae:	68a2      	ldr	r2, [r4, #8]
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	7da0      	ldrb	r0, [r4, #22]
 800c7b4:	444a      	add	r2, r9
 800c7b6:	7561      	strb	r1, [r4, #21]
 800c7b8:	1bdb      	subs	r3, r3, r7
 800c7ba:	f080 0001 	eor.w	r0, r0, #1
 800c7be:	60a2      	str	r2, [r4, #8]
 800c7c0:	6123      	str	r3, [r4, #16]
 800c7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c6:	2104      	movs	r1, #4
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f000 f851 	bl	800c870 <ucdr_check_final_buffer_behavior>
 800c7ce:	b1b0      	cbz	r0, 800c7fe <ucdr_deserialize_float+0xc6>
 800c7d0:	7d23      	ldrb	r3, [r4, #20]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	68a3      	ldr	r3, [r4, #8]
 800c7d6:	d017      	beq.n	800c808 <ucdr_deserialize_float+0xd0>
 800c7d8:	78db      	ldrb	r3, [r3, #3]
 800c7da:	702b      	strb	r3, [r5, #0]
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	789b      	ldrb	r3, [r3, #2]
 800c7e0:	706b      	strb	r3, [r5, #1]
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	785b      	ldrb	r3, [r3, #1]
 800c7e6:	70ab      	strb	r3, [r5, #2]
 800c7e8:	68a3      	ldr	r3, [r4, #8]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	70eb      	strb	r3, [r5, #3]
 800c7ee:	2104      	movs	r1, #4
 800c7f0:	68a2      	ldr	r2, [r4, #8]
 800c7f2:	6923      	ldr	r3, [r4, #16]
 800c7f4:	440a      	add	r2, r1
 800c7f6:	7561      	strb	r1, [r4, #21]
 800c7f8:	440b      	add	r3, r1
 800c7fa:	60a2      	str	r2, [r4, #8]
 800c7fc:	6123      	str	r3, [r4, #16]
 800c7fe:	7da0      	ldrb	r0, [r4, #22]
 800c800:	f080 0001 	eor.w	r0, r0, #1
 800c804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	602b      	str	r3, [r5, #0]
 800c80c:	e7ef      	b.n	800c7ee <ucdr_deserialize_float+0xb6>
 800c80e:	68a2      	ldr	r2, [r4, #8]
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	1bd2      	subs	r2, r2, r7
 800c814:	7da0      	ldrb	r0, [r4, #22]
 800c816:	1bdb      	subs	r3, r3, r7
 800c818:	f884 8015 	strb.w	r8, [r4, #21]
 800c81c:	f080 0001 	eor.w	r0, r0, #1
 800c820:	60a2      	str	r2, [r4, #8]
 800c822:	6123      	str	r3, [r4, #16]
 800c824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c828:	68a3      	ldr	r3, [r4, #8]
 800c82a:	789b      	ldrb	r3, [r3, #2]
 800c82c:	706b      	strb	r3, [r5, #1]
 800c82e:	1cab      	adds	r3, r5, #2
 800c830:	68a2      	ldr	r2, [r4, #8]
 800c832:	7852      	ldrb	r2, [r2, #1]
 800c834:	f803 2b01 	strb.w	r2, [r3], #1
 800c838:	68a2      	ldr	r2, [r4, #8]
 800c83a:	7812      	ldrb	r2, [r2, #0]
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	e7b4      	b.n	800c7aa <ucdr_deserialize_float+0x72>
 800c840:	4631      	mov	r1, r6
 800c842:	463a      	mov	r2, r7
 800c844:	4628      	mov	r0, r5
 800c846:	f00a faf0 	bl	8016e2a <memcpy>
 800c84a:	464a      	mov	r2, r9
 800c84c:	19e8      	adds	r0, r5, r7
 800c84e:	68a1      	ldr	r1, [r4, #8]
 800c850:	f00a faeb 	bl	8016e2a <memcpy>
 800c854:	e7a9      	b.n	800c7aa <ucdr_deserialize_float+0x72>
 800c856:	bf00      	nop

0800c858 <ucdr_check_buffer_available_for>:
 800c858:	7d83      	ldrb	r3, [r0, #22]
 800c85a:	b93b      	cbnz	r3, 800c86c <ucdr_check_buffer_available_for+0x14>
 800c85c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c860:	4419      	add	r1, r3
 800c862:	4288      	cmp	r0, r1
 800c864:	bf34      	ite	cc
 800c866:	2000      	movcc	r0, #0
 800c868:	2001      	movcs	r0, #1
 800c86a:	4770      	bx	lr
 800c86c:	2000      	movs	r0, #0
 800c86e:	4770      	bx	lr

0800c870 <ucdr_check_final_buffer_behavior>:
 800c870:	7d83      	ldrb	r3, [r0, #22]
 800c872:	b943      	cbnz	r3, 800c886 <ucdr_check_final_buffer_behavior+0x16>
 800c874:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c878:	b510      	push	{r4, lr}
 800c87a:	4291      	cmp	r1, r2
 800c87c:	4604      	mov	r4, r0
 800c87e:	d205      	bcs.n	800c88c <ucdr_check_final_buffer_behavior+0x1c>
 800c880:	2301      	movs	r3, #1
 800c882:	4618      	mov	r0, r3
 800c884:	bd10      	pop	{r4, pc}
 800c886:	2300      	movs	r3, #0
 800c888:	4618      	mov	r0, r3
 800c88a:	4770      	bx	lr
 800c88c:	6982      	ldr	r2, [r0, #24]
 800c88e:	b13a      	cbz	r2, 800c8a0 <ucdr_check_final_buffer_behavior+0x30>
 800c890:	69c1      	ldr	r1, [r0, #28]
 800c892:	4790      	blx	r2
 800c894:	f080 0301 	eor.w	r3, r0, #1
 800c898:	75a0      	strb	r0, [r4, #22]
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	4618      	mov	r0, r3
 800c89e:	bd10      	pop	{r4, pc}
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	75a0      	strb	r0, [r4, #22]
 800c8a4:	e7fa      	b.n	800c89c <ucdr_check_final_buffer_behavior+0x2c>
 800c8a6:	bf00      	nop

0800c8a8 <ucdr_set_on_full_buffer_callback>:
 800c8a8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop

0800c8b0 <ucdr_init_buffer_origin_offset_endian>:
 800c8b0:	b410      	push	{r4}
 800c8b2:	9c01      	ldr	r4, [sp, #4]
 800c8b4:	440a      	add	r2, r1
 800c8b6:	6001      	str	r1, [r0, #0]
 800c8b8:	6042      	str	r2, [r0, #4]
 800c8ba:	190a      	adds	r2, r1, r4
 800c8bc:	441c      	add	r4, r3
 800c8be:	6082      	str	r2, [r0, #8]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c8c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c8ca:	7542      	strb	r2, [r0, #21]
 800c8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8d0:	7582      	strb	r2, [r0, #22]
 800c8d2:	7503      	strb	r3, [r0, #20]
 800c8d4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop

0800c8dc <ucdr_init_buffer_origin_offset>:
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	9c04      	ldr	r4, [sp, #16]
 800c8e2:	9400      	str	r4, [sp, #0]
 800c8e4:	2401      	movs	r4, #1
 800c8e6:	9401      	str	r4, [sp, #4]
 800c8e8:	f7ff ffe2 	bl	800c8b0 <ucdr_init_buffer_origin_offset_endian>
 800c8ec:	b002      	add	sp, #8
 800c8ee:	bd10      	pop	{r4, pc}

0800c8f0 <ucdr_init_buffer_origin>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	2400      	movs	r4, #0
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	9400      	str	r4, [sp, #0]
 800c8f8:	f7ff fff0 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800c8fc:	b002      	add	sp, #8
 800c8fe:	bd10      	pop	{r4, pc}

0800c900 <ucdr_init_buffer>:
 800c900:	2300      	movs	r3, #0
 800c902:	f7ff bff5 	b.w	800c8f0 <ucdr_init_buffer_origin>
 800c906:	bf00      	nop

0800c908 <ucdr_alignment>:
 800c908:	fbb0 f2f1 	udiv	r2, r0, r1
 800c90c:	fb02 0011 	mls	r0, r2, r1, r0
 800c910:	1e4b      	subs	r3, r1, #1
 800c912:	1a08      	subs	r0, r1, r0
 800c914:	4018      	ands	r0, r3
 800c916:	4770      	bx	lr

0800c918 <ucdr_buffer_alignment>:
 800c918:	7d43      	ldrb	r3, [r0, #21]
 800c91a:	428b      	cmp	r3, r1
 800c91c:	d209      	bcs.n	800c932 <ucdr_buffer_alignment+0x1a>
 800c91e:	6903      	ldr	r3, [r0, #16]
 800c920:	1e4a      	subs	r2, r1, #1
 800c922:	fbb3 f0f1 	udiv	r0, r3, r1
 800c926:	fb01 3010 	mls	r0, r1, r0, r3
 800c92a:	1a09      	subs	r1, r1, r0
 800c92c:	ea01 0002 	and.w	r0, r1, r2
 800c930:	4770      	bx	lr
 800c932:	2000      	movs	r0, #0
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop

0800c938 <ucdr_align_to>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4604      	mov	r4, r0
 800c93c:	460d      	mov	r5, r1
 800c93e:	f7ff ffeb 	bl	800c918 <ucdr_buffer_alignment>
 800c942:	68a3      	ldr	r3, [r4, #8]
 800c944:	7565      	strb	r5, [r4, #21]
 800c946:	181a      	adds	r2, r3, r0
 800c948:	6923      	ldr	r3, [r4, #16]
 800c94a:	4418      	add	r0, r3
 800c94c:	6863      	ldr	r3, [r4, #4]
 800c94e:	4293      	cmp	r3, r2
 800c950:	6120      	str	r0, [r4, #16]
 800c952:	bf28      	it	cs
 800c954:	4613      	movcs	r3, r2
 800c956:	60a3      	str	r3, [r4, #8]
 800c958:	bd38      	pop	{r3, r4, r5, pc}
 800c95a:	bf00      	nop

0800c95c <ucdr_buffer_length>:
 800c95c:	6882      	ldr	r2, [r0, #8]
 800c95e:	6800      	ldr	r0, [r0, #0]
 800c960:	1a10      	subs	r0, r2, r0
 800c962:	4770      	bx	lr

0800c964 <ucdr_buffer_remaining>:
 800c964:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c968:	1a10      	subs	r0, r2, r0
 800c96a:	4770      	bx	lr

0800c96c <ucdr_check_final_buffer_behavior_array>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	7d83      	ldrb	r3, [r0, #22]
 800c970:	b9a3      	cbnz	r3, 800c99c <ucdr_check_final_buffer_behavior_array+0x30>
 800c972:	4604      	mov	r4, r0
 800c974:	460d      	mov	r5, r1
 800c976:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d300      	bcc.n	800c980 <ucdr_check_final_buffer_behavior_array+0x14>
 800c97e:	b931      	cbnz	r1, 800c98e <ucdr_check_final_buffer_behavior_array+0x22>
 800c980:	4620      	mov	r0, r4
 800c982:	f7ff ffef 	bl	800c964 <ucdr_buffer_remaining>
 800c986:	42a8      	cmp	r0, r5
 800c988:	bf28      	it	cs
 800c98a:	4628      	movcs	r0, r5
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	6983      	ldr	r3, [r0, #24]
 800c990:	b133      	cbz	r3, 800c9a0 <ucdr_check_final_buffer_behavior_array+0x34>
 800c992:	69c1      	ldr	r1, [r0, #28]
 800c994:	4798      	blx	r3
 800c996:	75a0      	strb	r0, [r4, #22]
 800c998:	2800      	cmp	r0, #0
 800c99a:	d0f1      	beq.n	800c980 <ucdr_check_final_buffer_behavior_array+0x14>
 800c99c:	2000      	movs	r0, #0
 800c99e:	bd38      	pop	{r3, r4, r5, pc}
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	7583      	strb	r3, [r0, #22]
 800c9a4:	e7fa      	b.n	800c99c <ucdr_check_final_buffer_behavior_array+0x30>
 800c9a6:	bf00      	nop

0800c9a8 <ucdr_advance_buffer>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	f7ff ff53 	bl	800c858 <ucdr_check_buffer_available_for>
 800c9b2:	b178      	cbz	r0, 800c9d4 <ucdr_advance_buffer+0x2c>
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	68a2      	ldr	r2, [r4, #8]
 800c9b8:	442b      	add	r3, r5
 800c9ba:	442a      	add	r2, r5
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	2301      	movs	r3, #1
 800c9c0:	60a2      	str	r2, [r4, #8]
 800c9c2:	7563      	strb	r3, [r4, #21]
 800c9c4:	bd38      	pop	{r3, r4, r5, pc}
 800c9c6:	68a2      	ldr	r2, [r4, #8]
 800c9c8:	1a2d      	subs	r5, r5, r0
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	4402      	add	r2, r0
 800c9ce:	4418      	add	r0, r3
 800c9d0:	60a2      	str	r2, [r4, #8]
 800c9d2:	6120      	str	r0, [r4, #16]
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f7ff ffc7 	bl	800c96c <ucdr_check_final_buffer_behavior_array>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d1f1      	bne.n	800c9c6 <ucdr_advance_buffer+0x1e>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	7563      	strb	r3, [r4, #21]
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}

0800c9e8 <uxr_buffer_delete_entity>:
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	b08e      	sub	sp, #56	; 0x38
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	9103      	str	r1, [sp, #12]
 800c9f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	ab06      	add	r3, sp, #24
 800c9fe:	f001 f94f 	bl	800dca0 <uxr_prepare_stream_to_write_submessage>
 800ca02:	b918      	cbnz	r0, 800ca0c <uxr_buffer_delete_entity+0x24>
 800ca04:	4604      	mov	r4, r0
 800ca06:	4620      	mov	r0, r4
 800ca08:	b00e      	add	sp, #56	; 0x38
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	9902      	ldr	r1, [sp, #8]
 800ca0e:	aa05      	add	r2, sp, #20
 800ca10:	4620      	mov	r0, r4
 800ca12:	f001 fa81 	bl	800df18 <uxr_init_base_object_request>
 800ca16:	4604      	mov	r4, r0
 800ca18:	a905      	add	r1, sp, #20
 800ca1a:	a806      	add	r0, sp, #24
 800ca1c:	f002 fcd6 	bl	800f3cc <uxr_serialize_DELETE_Payload>
 800ca20:	4620      	mov	r0, r4
 800ca22:	b00e      	add	sp, #56	; 0x38
 800ca24:	bd10      	pop	{r4, pc}
 800ca26:	bf00      	nop

0800ca28 <uxr_common_create_entity>:
 800ca28:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	f1bc 0f01 	cmp.w	ip, #1
 800ca32:	b08c      	sub	sp, #48	; 0x30
 800ca34:	4604      	mov	r4, r0
 800ca36:	9202      	str	r2, [sp, #8]
 800ca38:	bf0c      	ite	eq
 800ca3a:	f003 0201 	andeq.w	r2, r3, #1
 800ca3e:	2200      	movne	r2, #0
 800ca40:	330e      	adds	r3, #14
 800ca42:	9103      	str	r1, [sp, #12]
 800ca44:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800ca48:	441a      	add	r2, r3
 800ca4a:	ab04      	add	r3, sp, #16
 800ca4c:	9101      	str	r1, [sp, #4]
 800ca4e:	2101      	movs	r1, #1
 800ca50:	b292      	uxth	r2, r2
 800ca52:	9100      	str	r1, [sp, #0]
 800ca54:	9903      	ldr	r1, [sp, #12]
 800ca56:	f001 f923 	bl	800dca0 <uxr_prepare_stream_to_write_submessage>
 800ca5a:	b918      	cbnz	r0, 800ca64 <uxr_common_create_entity+0x3c>
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	4620      	mov	r0, r4
 800ca60:	b00c      	add	sp, #48	; 0x30
 800ca62:	bd10      	pop	{r4, pc}
 800ca64:	9902      	ldr	r1, [sp, #8]
 800ca66:	4620      	mov	r0, r4
 800ca68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca6a:	f001 fa55 	bl	800df18 <uxr_init_base_object_request>
 800ca6e:	4604      	mov	r4, r0
 800ca70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca72:	a804      	add	r0, sp, #16
 800ca74:	f002 fc04 	bl	800f280 <uxr_serialize_CREATE_Payload>
 800ca78:	4620      	mov	r0, r4
 800ca7a:	b00c      	add	sp, #48	; 0x30
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	bf00      	nop

0800ca80 <uxr_buffer_create_participant_bin>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800ca86:	4605      	mov	r5, r0
 800ca88:	ac11      	add	r4, sp, #68	; 0x44
 800ca8a:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800ca8e:	2303      	movs	r3, #3
 800ca90:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800ca94:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ca98:	7223      	strb	r3, [r4, #8]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f88d 3014 	strb.w	r3, [sp, #20]
 800caa2:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800caa4:	7122      	strb	r2, [r4, #4]
 800caa6:	b1cb      	cbz	r3, 800cadc <uxr_buffer_create_participant_bin+0x5c>
 800caa8:	f88d 201c 	strb.w	r2, [sp, #28]
 800caac:	9308      	str	r3, [sp, #32]
 800caae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cab2:	a915      	add	r1, sp, #84	; 0x54
 800cab4:	a809      	add	r0, sp, #36	; 0x24
 800cab6:	f7ff ff23 	bl	800c900 <ucdr_init_buffer>
 800caba:	a905      	add	r1, sp, #20
 800cabc:	a809      	add	r0, sp, #36	; 0x24
 800cabe:	f001 ffc9 	bl	800ea54 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800cac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cac4:	9600      	str	r6, [sp, #0]
 800cac6:	4628      	mov	r0, r5
 800cac8:	9401      	str	r4, [sp, #4]
 800caca:	60e3      	str	r3, [r4, #12]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cad2:	f7ff ffa9 	bl	800ca28 <uxr_common_create_entity>
 800cad6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800cada:	bd70      	pop	{r4, r5, r6, pc}
 800cadc:	f88d 301c 	strb.w	r3, [sp, #28]
 800cae0:	e7e5      	b.n	800caae <uxr_buffer_create_participant_bin+0x2e>
 800cae2:	bf00      	nop

0800cae4 <uxr_buffer_create_topic_bin>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800caea:	4605      	mov	r5, r0
 800caec:	4618      	mov	r0, r3
 800caee:	9105      	str	r1, [sp, #20]
 800caf0:	a997      	add	r1, sp, #604	; 0x25c
 800caf2:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800caf6:	ac13      	add	r4, sp, #76	; 0x4c
 800caf8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cafc:	2302      	movs	r3, #2
 800cafe:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800cb02:	f000 f995 	bl	800ce30 <uxr_object_id_to_raw>
 800cb06:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800cb08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb0c:	a917      	add	r1, sp, #92	; 0x5c
 800cb0e:	a80b      	add	r0, sp, #44	; 0x2c
 800cb10:	9306      	str	r3, [sp, #24]
 800cb12:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800cb14:	930a      	str	r3, [sp, #40]	; 0x28
 800cb16:	2303      	movs	r3, #3
 800cb18:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cb22:	2300      	movs	r3, #0
 800cb24:	f88d 301c 	strb.w	r3, [sp, #28]
 800cb28:	f7ff feea 	bl	800c900 <ucdr_init_buffer>
 800cb2c:	a906      	add	r1, sp, #24
 800cb2e:	a80b      	add	r0, sp, #44	; 0x2c
 800cb30:	f001 ffb2 	bl	800ea98 <uxr_serialize_OBJK_Topic_Binary>
 800cb34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb36:	4628      	mov	r0, r5
 800cb38:	9600      	str	r6, [sp, #0]
 800cb3a:	9316      	str	r3, [sp, #88]	; 0x58
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	9401      	str	r4, [sp, #4]
 800cb40:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cb44:	f7ff ff70 	bl	800ca28 <uxr_common_create_entity>
 800cb48:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
 800cb4e:	bf00      	nop

0800cb50 <uxr_buffer_create_publisher_bin>:
 800cb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb52:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800cb56:	2603      	movs	r6, #3
 800cb58:	4605      	mov	r5, r0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	9105      	str	r1, [sp, #20]
 800cb5e:	a992      	add	r1, sp, #584	; 0x248
 800cb60:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800cb64:	ac0e      	add	r4, sp, #56	; 0x38
 800cb66:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800cb6a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cb6e:	f000 f95f 	bl	800ce30 <uxr_object_id_to_raw>
 800cb72:	2300      	movs	r3, #0
 800cb74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb78:	a912      	add	r1, sp, #72	; 0x48
 800cb7a:	a806      	add	r0, sp, #24
 800cb7c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800cb80:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800cb84:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800cb88:	f7ff feba 	bl	800c900 <ucdr_init_buffer>
 800cb8c:	a993      	add	r1, sp, #588	; 0x24c
 800cb8e:	a806      	add	r0, sp, #24
 800cb90:	f002 f836 	bl	800ec00 <uxr_serialize_OBJK_Publisher_Binary>
 800cb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb96:	4628      	mov	r0, r5
 800cb98:	9700      	str	r7, [sp, #0]
 800cb9a:	9311      	str	r3, [sp, #68]	; 0x44
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	9401      	str	r4, [sp, #4]
 800cba0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cba4:	f7ff ff40 	bl	800ca28 <uxr_common_create_entity>
 800cba8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800cbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbae:	bf00      	nop

0800cbb0 <uxr_buffer_create_subscriber_bin>:
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	4618      	mov	r0, r3
 800cbba:	9105      	str	r1, [sp, #20]
 800cbbc:	a992      	add	r1, sp, #584	; 0x248
 800cbbe:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800cbc2:	ac0e      	add	r4, sp, #56	; 0x38
 800cbc4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cbc8:	2304      	movs	r3, #4
 800cbca:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800cbce:	f000 f92f 	bl	800ce30 <uxr_object_id_to_raw>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbd8:	a912      	add	r1, sp, #72	; 0x48
 800cbda:	a806      	add	r0, sp, #24
 800cbdc:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800cbe0:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800cbea:	f7ff fe89 	bl	800c900 <ucdr_init_buffer>
 800cbee:	a993      	add	r1, sp, #588	; 0x24c
 800cbf0:	a806      	add	r0, sp, #24
 800cbf2:	f002 f8b5 	bl	800ed60 <uxr_serialize_OBJK_Subscriber_Binary>
 800cbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	9600      	str	r6, [sp, #0]
 800cbfc:	9311      	str	r3, [sp, #68]	; 0x44
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	9401      	str	r4, [sp, #4]
 800cc02:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cc06:	f7ff ff0f 	bl	800ca28 <uxr_common_create_entity>
 800cc0a:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}

0800cc10 <uxr_buffer_create_datawriter_bin>:
 800cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc14:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cc18:	4606      	mov	r6, r0
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	2703      	movs	r7, #3
 800cc1e:	ac1d      	add	r4, sp, #116	; 0x74
 800cc20:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	a9a1      	add	r1, sp, #644	; 0x284
 800cc28:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800cc2c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cc30:	2305      	movs	r3, #5
 800cc32:	7123      	strb	r3, [r4, #4]
 800cc34:	f000 f8fc 	bl	800ce30 <uxr_object_id_to_raw>
 800cc38:	a90e      	add	r1, sp, #56	; 0x38
 800cc3a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800cc3c:	7227      	strb	r7, [r4, #8]
 800cc3e:	f000 f8f7 	bl	800ce30 <uxr_object_id_to_raw>
 800cc42:	2300      	movs	r3, #0
 800cc44:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800cc48:	3d00      	subs	r5, #0
 800cc4a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800cc4e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800cc52:	bf18      	it	ne
 800cc54:	2501      	movne	r5, #1
 800cc56:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800cc5a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800cc5e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800cc62:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cc66:	2301      	movs	r3, #1
 800cc68:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800cc6c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800cc70:	bb8a      	cbnz	r2, 800ccd6 <uxr_buffer_create_datawriter_bin+0xc6>
 800cc72:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800cc76:	f04f 0c13 	mov.w	ip, #19
 800cc7a:	250b      	movs	r5, #11
 800cc7c:	2221      	movs	r2, #33	; 0x21
 800cc7e:	2111      	movs	r1, #17
 800cc80:	2009      	movs	r0, #9
 800cc82:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cc86:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800cc8a:	b923      	cbnz	r3, 800cc96 <uxr_buffer_create_datawriter_bin+0x86>
 800cc8c:	4672      	mov	r2, lr
 800cc8e:	4661      	mov	r1, ip
 800cc90:	4628      	mov	r0, r5
 800cc92:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800cc96:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d025      	beq.n	800ccea <uxr_buffer_create_datawriter_bin+0xda>
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d029      	beq.n	800ccf6 <uxr_buffer_create_datawriter_bin+0xe6>
 800cca2:	b32b      	cbz	r3, 800ccf0 <uxr_buffer_create_datawriter_bin+0xe0>
 800cca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cca8:	a921      	add	r1, sp, #132	; 0x84
 800ccaa:	a806      	add	r0, sp, #24
 800ccac:	f7ff fe28 	bl	800c900 <ucdr_init_buffer>
 800ccb0:	a90e      	add	r1, sp, #56	; 0x38
 800ccb2:	a806      	add	r0, sp, #24
 800ccb4:	f002 f906 	bl	800eec4 <uxr_serialize_OBJK_DataWriter_Binary>
 800ccb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccba:	f8cd 8000 	str.w	r8, [sp]
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	9401      	str	r4, [sp, #4]
 800ccc2:	60e3      	str	r3, [r4, #12]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ccca:	f7ff fead 	bl	800ca28 <uxr_common_create_entity>
 800ccce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ccd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800ccda:	f04f 0c12 	mov.w	ip, #18
 800ccde:	250a      	movs	r5, #10
 800cce0:	2220      	movs	r2, #32
 800cce2:	2110      	movs	r1, #16
 800cce4:	2008      	movs	r0, #8
 800cce6:	2702      	movs	r7, #2
 800cce8:	e7cd      	b.n	800cc86 <uxr_buffer_create_datawriter_bin+0x76>
 800ccea:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800ccee:	e7d9      	b.n	800cca4 <uxr_buffer_create_datawriter_bin+0x94>
 800ccf0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ccf4:	e7d6      	b.n	800cca4 <uxr_buffer_create_datawriter_bin+0x94>
 800ccf6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ccfa:	e7d3      	b.n	800cca4 <uxr_buffer_create_datawriter_bin+0x94>

0800ccfc <uxr_buffer_create_datareader_bin>:
 800ccfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd00:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800cd04:	4606      	mov	r6, r0
 800cd06:	4618      	mov	r0, r3
 800cd08:	2703      	movs	r7, #3
 800cd0a:	ac1f      	add	r4, sp, #124	; 0x7c
 800cd0c:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800cd10:	9105      	str	r1, [sp, #20]
 800cd12:	a9a3      	add	r1, sp, #652	; 0x28c
 800cd14:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800cd18:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd1c:	2306      	movs	r3, #6
 800cd1e:	7123      	strb	r3, [r4, #4]
 800cd20:	f000 f886 	bl	800ce30 <uxr_object_id_to_raw>
 800cd24:	a90e      	add	r1, sp, #56	; 0x38
 800cd26:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800cd28:	7227      	strb	r7, [r4, #8]
 800cd2a:	f000 f881 	bl	800ce30 <uxr_object_id_to_raw>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800cd34:	3d00      	subs	r5, #0
 800cd36:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800cd3a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800cd3e:	bf18      	it	ne
 800cd40:	2501      	movne	r5, #1
 800cd42:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800cd46:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800cd4a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800cd4e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800cd52:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cd56:	2301      	movs	r3, #1
 800cd58:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800cd5c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800cd60:	bb8a      	cbnz	r2, 800cdc6 <uxr_buffer_create_datareader_bin+0xca>
 800cd62:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800cd66:	f04f 0c13 	mov.w	ip, #19
 800cd6a:	250b      	movs	r5, #11
 800cd6c:	2221      	movs	r2, #33	; 0x21
 800cd6e:	2111      	movs	r1, #17
 800cd70:	2009      	movs	r0, #9
 800cd72:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cd76:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800cd7a:	b923      	cbnz	r3, 800cd86 <uxr_buffer_create_datareader_bin+0x8a>
 800cd7c:	4672      	mov	r2, lr
 800cd7e:	4661      	mov	r1, ip
 800cd80:	4628      	mov	r0, r5
 800cd82:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800cd86:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d025      	beq.n	800cdda <uxr_buffer_create_datareader_bin+0xde>
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d029      	beq.n	800cde6 <uxr_buffer_create_datareader_bin+0xea>
 800cd92:	b32b      	cbz	r3, 800cde0 <uxr_buffer_create_datareader_bin+0xe4>
 800cd94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd98:	a923      	add	r1, sp, #140	; 0x8c
 800cd9a:	a806      	add	r0, sp, #24
 800cd9c:	f7ff fdb0 	bl	800c900 <ucdr_init_buffer>
 800cda0:	a90e      	add	r1, sp, #56	; 0x38
 800cda2:	a806      	add	r0, sp, #24
 800cda4:	f002 f852 	bl	800ee4c <uxr_serialize_OBJK_DataReader_Binary>
 800cda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdaa:	f8cd 8000 	str.w	r8, [sp]
 800cdae:	4630      	mov	r0, r6
 800cdb0:	9401      	str	r4, [sp, #4]
 800cdb2:	60e3      	str	r3, [r4, #12]
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cdba:	f7ff fe35 	bl	800ca28 <uxr_common_create_entity>
 800cdbe:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800cdc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800cdca:	f04f 0c12 	mov.w	ip, #18
 800cdce:	250a      	movs	r5, #10
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	2110      	movs	r1, #16
 800cdd4:	2008      	movs	r0, #8
 800cdd6:	2702      	movs	r7, #2
 800cdd8:	e7cd      	b.n	800cd76 <uxr_buffer_create_datareader_bin+0x7a>
 800cdda:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800cdde:	e7d9      	b.n	800cd94 <uxr_buffer_create_datareader_bin+0x98>
 800cde0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800cde4:	e7d6      	b.n	800cd94 <uxr_buffer_create_datareader_bin+0x98>
 800cde6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800cdea:	e7d3      	b.n	800cd94 <uxr_buffer_create_datareader_bin+0x98>

0800cdec <uxr_object_id>:
 800cdec:	b082      	sub	sp, #8
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f88d 1006 	strb.w	r1, [sp, #6]
 800cdf4:	f360 030f 	bfi	r3, r0, #0, #16
 800cdf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cdfc:	f362 431f 	bfi	r3, r2, #16, #16
 800ce00:	4618      	mov	r0, r3
 800ce02:	b002      	add	sp, #8
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop

0800ce08 <uxr_object_id_from_raw>:
 800ce08:	7843      	ldrb	r3, [r0, #1]
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	7801      	ldrb	r1, [r0, #0]
 800ce0e:	2000      	movs	r0, #0
 800ce10:	091a      	lsrs	r2, r3, #4
 800ce12:	f003 030f 	and.w	r3, r3, #15
 800ce16:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ce1a:	f88d 3006 	strb.w	r3, [sp, #6]
 800ce1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ce22:	f362 000f 	bfi	r0, r2, #0, #16
 800ce26:	f363 401f 	bfi	r0, r3, #16, #16
 800ce2a:	b002      	add	sp, #8
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop

0800ce30 <uxr_object_id_to_raw>:
 800ce30:	4602      	mov	r2, r0
 800ce32:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ce36:	b082      	sub	sp, #8
 800ce38:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ce3c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ce40:	f881 c000 	strb.w	ip, [r1]
 800ce44:	7048      	strb	r0, [r1, #1]
 800ce46:	b002      	add	sp, #8
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop

0800ce4c <on_get_fragmentation_info>:
 800ce4c:	b500      	push	{lr}
 800ce4e:	b08b      	sub	sp, #44	; 0x2c
 800ce50:	4601      	mov	r1, r0
 800ce52:	2204      	movs	r2, #4
 800ce54:	a802      	add	r0, sp, #8
 800ce56:	f7ff fd53 	bl	800c900 <ucdr_init_buffer>
 800ce5a:	f10d 0305 	add.w	r3, sp, #5
 800ce5e:	f10d 0206 	add.w	r2, sp, #6
 800ce62:	a901      	add	r1, sp, #4
 800ce64:	a802      	add	r0, sp, #8
 800ce66:	f001 f9e1 	bl	800e22c <uxr_read_submessage_header>
 800ce6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce6e:	2b0d      	cmp	r3, #13
 800ce70:	d003      	beq.n	800ce7a <on_get_fragmentation_info+0x2e>
 800ce72:	2000      	movs	r0, #0
 800ce74:	b00b      	add	sp, #44	; 0x2c
 800ce76:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce7e:	f013 0f02 	tst.w	r3, #2
 800ce82:	bf14      	ite	ne
 800ce84:	2002      	movne	r0, #2
 800ce86:	2001      	moveq	r0, #1
 800ce88:	b00b      	add	sp, #44	; 0x2c
 800ce8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce8e:	bf00      	nop

0800ce90 <read_submessage_get_info>:
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	2500      	movs	r5, #0
 800ce94:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800ce98:	460e      	mov	r6, r1
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	f44f 7224 	mov.w	r2, #656	; 0x290
 800cea0:	4629      	mov	r1, r5
 800cea2:	a810      	add	r0, sp, #64	; 0x40
 800cea4:	9503      	str	r5, [sp, #12]
 800cea6:	9504      	str	r5, [sp, #16]
 800cea8:	f009 fef6 	bl	8016c98 <memset>
 800ceac:	a903      	add	r1, sp, #12
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f002 fa76 	bl	800f3a0 <uxr_deserialize_GET_INFO_Payload>
 800ceb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cebe:	f001 f823 	bl	800df08 <uxr_session_header_offset>
 800cec2:	462b      	mov	r3, r5
 800cec4:	220c      	movs	r2, #12
 800cec6:	a905      	add	r1, sp, #20
 800cec8:	9000      	str	r0, [sp, #0]
 800ceca:	a808      	add	r0, sp, #32
 800cecc:	f7ff fd06 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800ced0:	a910      	add	r1, sp, #64	; 0x40
 800ced2:	a808      	add	r0, sp, #32
 800ced4:	f002 fad8 	bl	800f488 <uxr_serialize_INFO_Payload>
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	462a      	mov	r2, r5
 800cedc:	4629      	mov	r1, r5
 800cede:	4620      	mov	r0, r4
 800cee0:	f000 ffbe 	bl	800de60 <uxr_stamp_session_header>
 800cee4:	a808      	add	r0, sp, #32
 800cee6:	f7ff fd39 	bl	800c95c <ucdr_buffer_length>
 800ceea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ceec:	4602      	mov	r2, r0
 800ceee:	a905      	add	r1, sp, #20
 800cef0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cef4:	47a0      	blx	r4
 800cef6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800cefa:	bd70      	pop	{r4, r5, r6, pc}

0800cefc <write_submessage_acknack.isra.0>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	b092      	sub	sp, #72	; 0x48
 800cf00:	4605      	mov	r5, r0
 800cf02:	460e      	mov	r6, r1
 800cf04:	4614      	mov	r4, r2
 800cf06:	f000 ffff 	bl	800df08 <uxr_session_header_offset>
 800cf0a:	a905      	add	r1, sp, #20
 800cf0c:	9000      	str	r0, [sp, #0]
 800cf0e:	2300      	movs	r3, #0
 800cf10:	a80a      	add	r0, sp, #40	; 0x28
 800cf12:	2211      	movs	r2, #17
 800cf14:	f7ff fce2 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800cf18:	2218      	movs	r2, #24
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	210a      	movs	r1, #10
 800cf1e:	fb02 5404 	mla	r4, r2, r4, r5
 800cf22:	a80a      	add	r0, sp, #40	; 0x28
 800cf24:	2205      	movs	r2, #5
 800cf26:	3450      	adds	r4, #80	; 0x50
 800cf28:	f001 f966 	bl	800e1f8 <uxr_buffer_submessage_header>
 800cf2c:	a903      	add	r1, sp, #12
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f007 fcfe 	bl	8014930 <uxr_compute_acknack>
 800cf34:	ba40      	rev16	r0, r0
 800cf36:	a903      	add	r1, sp, #12
 800cf38:	f88d 6010 	strb.w	r6, [sp, #16]
 800cf3c:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cf40:	a80a      	add	r0, sp, #40	; 0x28
 800cf42:	f002 fb13 	bl	800f56c <uxr_serialize_ACKNACK_Payload>
 800cf46:	2200      	movs	r2, #0
 800cf48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	f000 ff87 	bl	800de60 <uxr_stamp_session_header>
 800cf52:	a80a      	add	r0, sp, #40	; 0x28
 800cf54:	f7ff fd02 	bl	800c95c <ucdr_buffer_length>
 800cf58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	a905      	add	r1, sp, #20
 800cf5e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cf62:	47a0      	blx	r4
 800cf64:	b012      	add	sp, #72	; 0x48
 800cf66:	bd70      	pop	{r4, r5, r6, pc}

0800cf68 <uxr_init_session>:
 800cf68:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800cfa0 <uxr_init_session+0x38>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	b510      	push	{r4, lr}
 800cf70:	4604      	mov	r4, r0
 800cf72:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800cf76:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800cf7a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800cf7e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800cf82:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800cf86:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800cf8a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800cf8e:	2181      	movs	r1, #129	; 0x81
 800cf90:	f000 feca 	bl	800dd28 <uxr_init_session_info>
 800cf94:	f104 0008 	add.w	r0, r4, #8
 800cf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf9c:	f001 b848 	b.w	800e030 <uxr_init_stream_storage>
	...

0800cfa8 <uxr_set_status_callback>:
 800cfa8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop

0800cfb0 <uxr_set_topic_callback>:
 800cfb0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop

0800cfb8 <uxr_set_request_callback>:
 800cfb8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop

0800cfc0 <uxr_set_reply_callback>:
 800cfc0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop

0800cfc8 <uxr_create_output_best_effort_stream>:
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	4604      	mov	r4, r0
 800cfcc:	b084      	sub	sp, #16
 800cfce:	e9cd 2100 	strd	r2, r1, [sp]
 800cfd2:	f000 ff99 	bl	800df08 <uxr_session_header_offset>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	f104 0008 	add.w	r0, r4, #8
 800cfdc:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cfe0:	b004      	add	sp, #16
 800cfe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe6:	f001 b869 	b.w	800e0bc <uxr_add_output_best_effort_buffer>
 800cfea:	bf00      	nop

0800cfec <uxr_create_output_reliable_stream>:
 800cfec:	b530      	push	{r4, r5, lr}
 800cfee:	b089      	sub	sp, #36	; 0x24
 800cff0:	4604      	mov	r4, r0
 800cff2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cff6:	9303      	str	r3, [sp, #12]
 800cff8:	f000 ff86 	bl	800df08 <uxr_session_header_offset>
 800cffc:	4605      	mov	r5, r0
 800cffe:	9905      	ldr	r1, [sp, #20]
 800d000:	f104 0008 	add.w	r0, r4, #8
 800d004:	9500      	str	r5, [sp, #0]
 800d006:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d00a:	f001 f86b 	bl	800e0e4 <uxr_add_output_reliable_buffer>
 800d00e:	2200      	movs	r2, #0
 800d010:	fa5f fc80 	uxtb.w	ip, r0
 800d014:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800d018:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800d01c:	0e03      	lsrs	r3, r0, #24
 800d01e:	f36c 0207 	bfi	r2, ip, #0, #8
 800d022:	f364 220f 	bfi	r2, r4, #8, #8
 800d026:	f361 4217 	bfi	r2, r1, #16, #8
 800d02a:	f363 621f 	bfi	r2, r3, #24, #8
 800d02e:	4610      	mov	r0, r2
 800d030:	b009      	add	sp, #36	; 0x24
 800d032:	bd30      	pop	{r4, r5, pc}

0800d034 <uxr_create_input_best_effort_stream>:
 800d034:	b082      	sub	sp, #8
 800d036:	3008      	adds	r0, #8
 800d038:	b002      	add	sp, #8
 800d03a:	f001 b86d 	b.w	800e118 <uxr_add_input_best_effort_buffer>
 800d03e:	bf00      	nop

0800d040 <uxr_create_input_reliable_stream>:
 800d040:	b510      	push	{r4, lr}
 800d042:	4c0c      	ldr	r4, [pc, #48]	; (800d074 <uxr_create_input_reliable_stream+0x34>)
 800d044:	b084      	sub	sp, #16
 800d046:	3008      	adds	r0, #8
 800d048:	9400      	str	r4, [sp, #0]
 800d04a:	f001 f87b 	bl	800e144 <uxr_add_input_reliable_buffer>
 800d04e:	2200      	movs	r2, #0
 800d050:	fa5f fe80 	uxtb.w	lr, r0
 800d054:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800d058:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800d05c:	0e03      	lsrs	r3, r0, #24
 800d05e:	f36e 0207 	bfi	r2, lr, #0, #8
 800d062:	f36c 220f 	bfi	r2, ip, #8, #8
 800d066:	f361 4217 	bfi	r2, r1, #16, #8
 800d06a:	f363 621f 	bfi	r2, r3, #24, #8
 800d06e:	4610      	mov	r0, r2
 800d070:	b004      	add	sp, #16
 800d072:	bd10      	pop	{r4, pc}
 800d074:	0800ce4d 	.word	0x0800ce4d

0800d078 <uxr_epoch_nanos>:
 800d078:	b510      	push	{r4, lr}
 800d07a:	4604      	mov	r4, r0
 800d07c:	f001 f91e 	bl	800e2bc <uxr_nanos>
 800d080:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800d084:	1ac0      	subs	r0, r0, r3
 800d086:	eb61 0102 	sbc.w	r1, r1, r2
 800d08a:	bd10      	pop	{r4, pc}

0800d08c <uxr_flash_output_streams>:
 800d08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d090:	7e03      	ldrb	r3, [r0, #24]
 800d092:	b084      	sub	sp, #16
 800d094:	4604      	mov	r4, r0
 800d096:	b1fb      	cbz	r3, 800d0d8 <uxr_flash_output_streams+0x4c>
 800d098:	f04f 0900 	mov.w	r9, #0
 800d09c:	f10d 0802 	add.w	r8, sp, #2
 800d0a0:	af03      	add	r7, sp, #12
 800d0a2:	ae02      	add	r6, sp, #8
 800d0a4:	4648      	mov	r0, r9
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d0ac:	4611      	mov	r1, r2
 800d0ae:	3508      	adds	r5, #8
 800d0b0:	f000 ff64 	bl	800df7c <uxr_stream_id>
 800d0b4:	4684      	mov	ip, r0
 800d0b6:	4643      	mov	r3, r8
 800d0b8:	463a      	mov	r2, r7
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f8cd c004 	str.w	ip, [sp, #4]
 800d0c2:	f007 fcbf 	bl	8014a44 <uxr_prepare_best_effort_buffer_to_send>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d13d      	bne.n	800d146 <uxr_flash_output_streams+0xba>
 800d0ca:	f109 0901 	add.w	r9, r9, #1
 800d0ce:	7e23      	ldrb	r3, [r4, #24]
 800d0d0:	fa5f f089 	uxtb.w	r0, r9
 800d0d4:	4283      	cmp	r3, r0
 800d0d6:	d8e6      	bhi.n	800d0a6 <uxr_flash_output_streams+0x1a>
 800d0d8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d0dc:	b383      	cbz	r3, 800d140 <uxr_flash_output_streams+0xb4>
 800d0de:	f04f 0900 	mov.w	r9, #0
 800d0e2:	f10d 0802 	add.w	r8, sp, #2
 800d0e6:	af03      	add	r7, sp, #12
 800d0e8:	ae02      	add	r6, sp, #8
 800d0ea:	4648      	mov	r0, r9
 800d0ec:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	2102      	movs	r1, #2
 800d0f4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d0f8:	f000 ff40 	bl	800df7c <uxr_stream_id>
 800d0fc:	9001      	str	r0, [sp, #4]
 800d0fe:	3520      	adds	r5, #32
 800d100:	e00c      	b.n	800d11c <uxr_flash_output_streams+0x90>
 800d102:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d106:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d10a:	9b02      	ldr	r3, [sp, #8]
 800d10c:	f000 fea8 	bl	800de60 <uxr_stamp_session_header>
 800d110:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d112:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d116:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800d11a:	47d0      	blx	sl
 800d11c:	4643      	mov	r3, r8
 800d11e:	463a      	mov	r2, r7
 800d120:	4631      	mov	r1, r6
 800d122:	4628      	mov	r0, r5
 800d124:	f007 feb0 	bl	8014e88 <uxr_prepare_next_reliable_buffer_to_send>
 800d128:	4603      	mov	r3, r0
 800d12a:	4620      	mov	r0, r4
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e8      	bne.n	800d102 <uxr_flash_output_streams+0x76>
 800d130:	f109 0901 	add.w	r9, r9, #1
 800d134:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d138:	fa5f f089 	uxtb.w	r0, r9
 800d13c:	4283      	cmp	r3, r0
 800d13e:	d8d5      	bhi.n	800d0ec <uxr_flash_output_streams+0x60>
 800d140:	b004      	add	sp, #16
 800d142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	4620      	mov	r0, r4
 800d14a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d14e:	f109 0901 	add.w	r9, r9, #1
 800d152:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d156:	f000 fe83 	bl	800de60 <uxr_stamp_session_header>
 800d15a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d15c:	9a03      	ldr	r2, [sp, #12]
 800d15e:	685d      	ldr	r5, [r3, #4]
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	9902      	ldr	r1, [sp, #8]
 800d164:	47a8      	blx	r5
 800d166:	7e23      	ldrb	r3, [r4, #24]
 800d168:	fa5f f089 	uxtb.w	r0, r9
 800d16c:	4283      	cmp	r3, r0
 800d16e:	d89a      	bhi.n	800d0a6 <uxr_flash_output_streams+0x1a>
 800d170:	e7b2      	b.n	800d0d8 <uxr_flash_output_streams+0x4c>
 800d172:	bf00      	nop

0800d174 <read_submessage_info>:
 800d174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d178:	460d      	mov	r5, r1
 800d17a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800d17e:	4606      	mov	r6, r0
 800d180:	4669      	mov	r1, sp
 800d182:	4628      	mov	r0, r5
 800d184:	f002 f81e 	bl	800f1c4 <uxr_deserialize_BaseObjectReply>
 800d188:	4604      	mov	r4, r0
 800d18a:	a902      	add	r1, sp, #8
 800d18c:	4628      	mov	r0, r5
 800d18e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800d192:	f7fe fac9 	bl	800b728 <ucdr_deserialize_bool>
 800d196:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d19a:	4004      	ands	r4, r0
 800d19c:	b2e4      	uxtb	r4, r4
 800d19e:	b95b      	cbnz	r3, 800d1b8 <read_submessage_info+0x44>
 800d1a0:	a987      	add	r1, sp, #540	; 0x21c
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f7fe fac0 	bl	800b728 <ucdr_deserialize_bool>
 800d1a8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	b94b      	cbnz	r3, 800d1c4 <read_submessage_info+0x50>
 800d1b0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800d1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b8:	a903      	add	r1, sp, #12
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f001 feae 	bl	800ef1c <uxr_deserialize_ObjectVariant>
 800d1c0:	4004      	ands	r4, r0
 800d1c2:	e7ed      	b.n	800d1a0 <read_submessage_info+0x2c>
 800d1c4:	a988      	add	r1, sp, #544	; 0x220
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f7fe fadc 	bl	800b784 <ucdr_deserialize_uint8_t>
 800d1cc:	ea14 0f08 	tst.w	r4, r8
 800d1d0:	d0ee      	beq.n	800d1b0 <read_submessage_info+0x3c>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0ec      	beq.n	800d1b0 <read_submessage_info+0x3c>
 800d1d6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800d1da:	2b0d      	cmp	r3, #13
 800d1dc:	d1e8      	bne.n	800d1b0 <read_submessage_info+0x3c>
 800d1de:	a98a      	add	r1, sp, #552	; 0x228
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f7ff f875 	bl	800c2d0 <ucdr_deserialize_int16_t>
 800d1e6:	b138      	cbz	r0, 800d1f8 <read_submessage_info+0x84>
 800d1e8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	dd06      	ble.n	800d1fe <read_submessage_info+0x8a>
 800d1f0:	2f00      	cmp	r7, #0
 800d1f2:	bf14      	ite	ne
 800d1f4:	2001      	movne	r0, #1
 800d1f6:	2002      	moveq	r0, #2
 800d1f8:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 800d1fc:	e7d8      	b.n	800d1b0 <read_submessage_info+0x3c>
 800d1fe:	2000      	movs	r0, #0
 800d200:	e7fa      	b.n	800d1f8 <read_submessage_info+0x84>
 800d202:	bf00      	nop

0800d204 <read_submessage_list>:
 800d204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d208:	4604      	mov	r4, r0
 800d20a:	b097      	sub	sp, #92	; 0x5c
 800d20c:	460d      	mov	r5, r1
 800d20e:	4ec1      	ldr	r6, [pc, #772]	; (800d514 <read_submessage_list+0x310>)
 800d210:	9209      	str	r2, [sp, #36]	; 0x24
 800d212:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800d216:	aa0c      	add	r2, sp, #48	; 0x30
 800d218:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800d21c:	4628      	mov	r0, r5
 800d21e:	f001 f805 	bl	800e22c <uxr_read_submessage_header>
 800d222:	2800      	cmp	r0, #0
 800d224:	f000 8142 	beq.w	800d4ac <read_submessage_list+0x2a8>
 800d228:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d22c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800d230:	3b02      	subs	r3, #2
 800d232:	2b0d      	cmp	r3, #13
 800d234:	d8ed      	bhi.n	800d212 <read_submessage_list+0xe>
 800d236:	a101      	add	r1, pc, #4	; (adr r1, 800d23c <read_submessage_list+0x38>)
 800d238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d23c:	0800d4a3 	.word	0x0800d4a3
 800d240:	0800d213 	.word	0x0800d213
 800d244:	0800d493 	.word	0x0800d493
 800d248:	0800d431 	.word	0x0800d431
 800d24c:	0800d427 	.word	0x0800d427
 800d250:	0800d213 	.word	0x0800d213
 800d254:	0800d213 	.word	0x0800d213
 800d258:	0800d37d 	.word	0x0800d37d
 800d25c:	0800d30f 	.word	0x0800d30f
 800d260:	0800d2cf 	.word	0x0800d2cf
 800d264:	0800d213 	.word	0x0800d213
 800d268:	0800d213 	.word	0x0800d213
 800d26c:	0800d213 	.word	0x0800d213
 800d270:	0800d275 	.word	0x0800d275
 800d274:	a910      	add	r1, sp, #64	; 0x40
 800d276:	4628      	mov	r0, r5
 800d278:	f002 f9cc 	bl	800f614 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d27c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800d280:	f1b8 0f00 	cmp.w	r8, #0
 800d284:	f000 811a 	beq.w	800d4bc <read_submessage_list+0x2b8>
 800d288:	f001 f818 	bl	800e2bc <uxr_nanos>
 800d28c:	4602      	mov	r2, r0
 800d28e:	460b      	mov	r3, r1
 800d290:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800d294:	2100      	movs	r1, #0
 800d296:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d298:	9006      	str	r0, [sp, #24]
 800d29a:	468c      	mov	ip, r1
 800d29c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d29e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800d2a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d2a4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800d2a8:	468c      	mov	ip, r1
 800d2aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d2ac:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800d2b0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800d2b4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 800d2b8:	fbc7 0106 	smlal	r0, r1, r7, r6
 800d2bc:	e9cd 0100 	strd	r0, r1, [sp]
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	47c0      	blx	r8
 800d2c4:	f04f 0301 	mov.w	r3, #1
 800d2c8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800d2cc:	e7a1      	b.n	800d212 <read_submessage_list+0xe>
 800d2ce:	a910      	add	r1, sp, #64	; 0x40
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	f002 f98b 	bl	800f5ec <uxr_deserialize_HEARTBEAT_Payload>
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d2dc:	f000 fe7c 	bl	800dfd8 <uxr_stream_id_from_raw>
 800d2e0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800d2e4:	900f      	str	r0, [sp, #60]	; 0x3c
 800d2e6:	f104 0008 	add.w	r0, r4, #8
 800d2ea:	4641      	mov	r1, r8
 800d2ec:	f000 ff62 	bl	800e1b4 <uxr_get_input_reliable_stream>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d08e      	beq.n	800d212 <read_submessage_list+0xe>
 800d2f4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800d2f8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d2fc:	f007 fb0c 	bl	8014918 <uxr_process_heartbeat>
 800d300:	4642      	mov	r2, r8
 800d302:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800d306:	4620      	mov	r0, r4
 800d308:	f7ff fdf8 	bl	800cefc <write_submessage_acknack.isra.0>
 800d30c:	e781      	b.n	800d212 <read_submessage_list+0xe>
 800d30e:	a910      	add	r1, sp, #64	; 0x40
 800d310:	4628      	mov	r0, r5
 800d312:	f002 f943 	bl	800f59c <uxr_deserialize_ACKNACK_Payload>
 800d316:	2100      	movs	r1, #0
 800d318:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d31c:	f000 fe5c 	bl	800dfd8 <uxr_stream_id_from_raw>
 800d320:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d324:	900d      	str	r0, [sp, #52]	; 0x34
 800d326:	f104 0008 	add.w	r0, r4, #8
 800d32a:	f000 ff2d 	bl	800e188 <uxr_get_output_reliable_stream>
 800d32e:	4680      	mov	r8, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	f43f af6e 	beq.w	800d212 <read_submessage_list+0xe>
 800d336:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d33a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d33e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800d342:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d346:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d34a:	b289      	uxth	r1, r1
 800d34c:	f007 fe44 	bl	8014fd8 <uxr_process_acknack>
 800d350:	4640      	mov	r0, r8
 800d352:	f007 fe05 	bl	8014f60 <uxr_begin_output_nack_buffer_it>
 800d356:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800d35a:	e005      	b.n	800d368 <read_submessage_list+0x164>
 800d35c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d35e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800d362:	e9d3 0900 	ldrd	r0, r9, [r3]
 800d366:	47c8      	blx	r9
 800d368:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800d36c:	aa0f      	add	r2, sp, #60	; 0x3c
 800d36e:	4651      	mov	r1, sl
 800d370:	4640      	mov	r0, r8
 800d372:	f007 fdf7 	bl	8014f64 <uxr_next_reliable_nack_buffer_to_send>
 800d376:	2800      	cmp	r0, #0
 800d378:	d1f0      	bne.n	800d35c <read_submessage_list+0x158>
 800d37a:	e74a      	b.n	800d212 <read_submessage_list+0xe>
 800d37c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d380:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d384:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800d388:	4628      	mov	r0, r5
 800d38a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800d38e:	4651      	mov	r1, sl
 800d390:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800d394:	f1a8 0804 	sub.w	r8, r8, #4
 800d398:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800d39c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800d3a0:	fa1f f888 	uxth.w	r8, r8
 800d3a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d3a8:	f009 090e 	and.w	r9, r9, #14
 800d3ac:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800d3b0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800d3b4:	f001 fe54 	bl	800f060 <uxr_deserialize_BaseObjectRequest>
 800d3b8:	4650      	mov	r0, sl
 800d3ba:	a90f      	add	r1, sp, #60	; 0x3c
 800d3bc:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d3c0:	f000 fdca 	bl	800df58 <uxr_parse_base_object_request>
 800d3c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d3c6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800d3ca:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800d3ce:	9110      	str	r1, [sp, #64]	; 0x40
 800d3d0:	f1bb 0f00 	cmp.w	fp, #0
 800d3d4:	d006      	beq.n	800d3e4 <read_submessage_list+0x1e0>
 800d3d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d3da:	4652      	mov	r2, sl
 800d3dc:	4620      	mov	r0, r4
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	47d8      	blx	fp
 800d3e4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d3e6:	b182      	cbz	r2, 800d40a <read_submessage_list+0x206>
 800d3e8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800d3ea:	f04f 0c00 	mov.w	ip, #0
 800d3ee:	3902      	subs	r1, #2
 800d3f0:	e003      	b.n	800d3fa <read_submessage_list+0x1f6>
 800d3f2:	f10c 0c01 	add.w	ip, ip, #1
 800d3f6:	4594      	cmp	ip, r2
 800d3f8:	d007      	beq.n	800d40a <read_submessage_list+0x206>
 800d3fa:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800d3fe:	4553      	cmp	r3, sl
 800d400:	d1f7      	bne.n	800d3f2 <read_submessage_list+0x1ee>
 800d402:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d404:	2200      	movs	r2, #0
 800d406:	f803 200c 	strb.w	r2, [r3, ip]
 800d40a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800d40e:	464b      	mov	r3, r9
 800d410:	4642      	mov	r2, r8
 800d412:	4620      	mov	r0, r4
 800d414:	9102      	str	r1, [sp, #8]
 800d416:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d418:	9101      	str	r1, [sp, #4]
 800d41a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d41c:	9100      	str	r1, [sp, #0]
 800d41e:	4629      	mov	r1, r5
 800d420:	f007 fe9c 	bl	801515c <read_submessage_format>
 800d424:	e6f5      	b.n	800d212 <read_submessage_list+0xe>
 800d426:	4629      	mov	r1, r5
 800d428:	4620      	mov	r0, r4
 800d42a:	f7ff fea3 	bl	800d174 <read_submessage_info>
 800d42e:	e6f0      	b.n	800d212 <read_submessage_list+0xe>
 800d430:	2a00      	cmp	r2, #0
 800d432:	d03e      	beq.n	800d4b2 <read_submessage_list+0x2ae>
 800d434:	a910      	add	r1, sp, #64	; 0x40
 800d436:	4628      	mov	r0, r5
 800d438:	f002 f808 	bl	800f44c <uxr_deserialize_STATUS_Payload>
 800d43c:	a90e      	add	r1, sp, #56	; 0x38
 800d43e:	aa0d      	add	r2, sp, #52	; 0x34
 800d440:	a810      	add	r0, sp, #64	; 0x40
 800d442:	f000 fd89 	bl	800df58 <uxr_parse_base_object_request>
 800d446:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d448:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800d44c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800d450:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800d454:	910f      	str	r1, [sp, #60]	; 0x3c
 800d456:	f1ba 0f00 	cmp.w	sl, #0
 800d45a:	d006      	beq.n	800d46a <read_submessage_list+0x266>
 800d45c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d460:	4642      	mov	r2, r8
 800d462:	4620      	mov	r0, r4
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	464b      	mov	r3, r9
 800d468:	47d0      	blx	sl
 800d46a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	f43f aed0 	beq.w	800d212 <read_submessage_list+0xe>
 800d472:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d474:	2100      	movs	r1, #0
 800d476:	3802      	subs	r0, #2
 800d478:	e003      	b.n	800d482 <read_submessage_list+0x27e>
 800d47a:	3101      	adds	r1, #1
 800d47c:	4291      	cmp	r1, r2
 800d47e:	f43f aec8 	beq.w	800d212 <read_submessage_list+0xe>
 800d482:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d486:	4543      	cmp	r3, r8
 800d488:	d1f7      	bne.n	800d47a <read_submessage_list+0x276>
 800d48a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d48c:	f803 9001 	strb.w	r9, [r3, r1]
 800d490:	e6bf      	b.n	800d212 <read_submessage_list+0xe>
 800d492:	2a00      	cmp	r2, #0
 800d494:	f47f aebd 	bne.w	800d212 <read_submessage_list+0xe>
 800d498:	4629      	mov	r1, r5
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 fca0 	bl	800dde0 <uxr_read_create_session_status>
 800d4a0:	e6b7      	b.n	800d212 <read_submessage_list+0xe>
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f7ff fcf3 	bl	800ce90 <read_submessage_get_info>
 800d4aa:	e6b2      	b.n	800d212 <read_submessage_list+0xe>
 800d4ac:	b017      	add	sp, #92	; 0x5c
 800d4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f000 fca1 	bl	800ddfc <uxr_read_delete_session_status>
 800d4ba:	e6aa      	b.n	800d212 <read_submessage_list+0xe>
 800d4bc:	f000 fefe 	bl	800e2bc <uxr_nanos>
 800d4c0:	4642      	mov	r2, r8
 800d4c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d4c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4c6:	fbc7 3206 	smlal	r3, r2, r7, r6
 800d4ca:	1818      	adds	r0, r3, r0
 800d4cc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d4ce:	eb42 0101 	adc.w	r1, r2, r1
 800d4d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4d4:	4642      	mov	r2, r8
 800d4d6:	fbc7 3206 	smlal	r3, r2, r7, r6
 800d4da:	469c      	mov	ip, r3
 800d4dc:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 800d4e0:	fbc3 7806 	smlal	r7, r8, r3, r6
 800d4e4:	4643      	mov	r3, r8
 800d4e6:	eb1c 0c07 	adds.w	ip, ip, r7
 800d4ea:	eb42 0203 	adc.w	r2, r2, r3
 800d4ee:	ebb0 030c 	subs.w	r3, r0, ip
 800d4f2:	eb61 0202 	sbc.w	r2, r1, r2
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	db08      	blt.n	800d50c <read_submessage_list+0x308>
 800d4fa:	085b      	lsrs	r3, r3, #1
 800d4fc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800d500:	1052      	asrs	r2, r2, #1
 800d502:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800d506:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 800d50a:	e6db      	b.n	800d2c4 <read_submessage_list+0xc0>
 800d50c:	3301      	adds	r3, #1
 800d50e:	f142 0200 	adc.w	r2, r2, #0
 800d512:	e7f2      	b.n	800d4fa <read_submessage_list+0x2f6>
 800d514:	3b9aca00 	.word	0x3b9aca00

0800d518 <listen_message_reliably>:
 800d518:	1e0b      	subs	r3, r1, #0
 800d51a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51e:	bfb8      	it	lt
 800d520:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d524:	b09d      	sub	sp, #116	; 0x74
 800d526:	4680      	mov	r8, r0
 800d528:	9305      	str	r3, [sp, #20]
 800d52a:	f000 feab 	bl	800e284 <uxr_millis>
 800d52e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800d532:	4681      	mov	r9, r0
 800d534:	2a00      	cmp	r2, #0
 800d536:	f000 809a 	beq.w	800d66e <listen_message_reliably+0x156>
 800d53a:	2600      	movs	r6, #0
 800d53c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d540:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d544:	460f      	mov	r7, r1
 800d546:	4630      	mov	r0, r6
 800d548:	9303      	str	r3, [sp, #12]
 800d54a:	e00e      	b.n	800d56a <listen_message_reliably+0x52>
 800d54c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d54e:	3601      	adds	r6, #1
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	455a      	cmp	r2, fp
 800d554:	9903      	ldr	r1, [sp, #12]
 800d556:	b2f0      	uxtb	r0, r6
 800d558:	eb73 0101 	sbcs.w	r1, r3, r1
 800d55c:	da01      	bge.n	800d562 <listen_message_reliably+0x4a>
 800d55e:	4693      	mov	fp, r2
 800d560:	9303      	str	r3, [sp, #12]
 800d562:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d566:	4283      	cmp	r3, r0
 800d568:	d95f      	bls.n	800d62a <listen_message_reliably+0x112>
 800d56a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d56e:	2102      	movs	r1, #2
 800d570:	2201      	movs	r2, #1
 800d572:	00e4      	lsls	r4, r4, #3
 800d574:	f000 fd02 	bl	800df7c <uxr_stream_id>
 800d578:	4601      	mov	r1, r0
 800d57a:	f104 0520 	add.w	r5, r4, #32
 800d57e:	463b      	mov	r3, r7
 800d580:	464a      	mov	r2, r9
 800d582:	9109      	str	r1, [sp, #36]	; 0x24
 800d584:	4445      	add	r5, r8
 800d586:	4628      	mov	r0, r5
 800d588:	f007 fcbe 	bl	8014f08 <uxr_update_output_stream_heartbeat_timestamp>
 800d58c:	eb08 0304 	add.w	r3, r8, r4
 800d590:	2800      	cmp	r0, #0
 800d592:	d0db      	beq.n	800d54c <listen_message_reliably+0x34>
 800d594:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800d598:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d59c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	3501      	adds	r5, #1
 800d5a4:	4444      	add	r4, r8
 800d5a6:	9304      	str	r3, [sp, #16]
 800d5a8:	f000 fcae 	bl	800df08 <uxr_session_header_offset>
 800d5ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	2211      	movs	r2, #17
 800d5b4:	a90c      	add	r1, sp, #48	; 0x30
 800d5b6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d5ba:	9000      	str	r0, [sp, #0]
 800d5bc:	4650      	mov	r0, sl
 800d5be:	3601      	adds	r6, #1
 800d5c0:	f7ff f98c 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	2205      	movs	r2, #5
 800d5c8:	210b      	movs	r1, #11
 800d5ca:	4650      	mov	r0, sl
 800d5cc:	f000 fe14 	bl	800e1f8 <uxr_buffer_submessage_header>
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	8968      	ldrh	r0, [r5, #10]
 800d5d4:	f007 fe8c 	bl	80152f0 <uxr_seq_num_add>
 800d5d8:	892b      	ldrh	r3, [r5, #8]
 800d5da:	4602      	mov	r2, r0
 800d5dc:	a90a      	add	r1, sp, #40	; 0x28
 800d5de:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d5e2:	4650      	mov	r0, sl
 800d5e4:	9b04      	ldr	r3, [sp, #16]
 800d5e6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d5ea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d5ee:	f001 ffe9 	bl	800f5c4 <uxr_serialize_HEARTBEAT_Payload>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	f000 fc31 	bl	800de60 <uxr_stamp_session_header>
 800d5fe:	4650      	mov	r0, sl
 800d600:	f7ff f9ac 	bl	800c95c <ucdr_buffer_length>
 800d604:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d608:	4602      	mov	r2, r0
 800d60a:	a90c      	add	r1, sp, #48	; 0x30
 800d60c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d610:	47a8      	blx	r5
 800d612:	9903      	ldr	r1, [sp, #12]
 800d614:	b2f0      	uxtb	r0, r6
 800d616:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800d61a:	455a      	cmp	r2, fp
 800d61c:	eb73 0101 	sbcs.w	r1, r3, r1
 800d620:	db9d      	blt.n	800d55e <listen_message_reliably+0x46>
 800d622:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d626:	4283      	cmp	r3, r0
 800d628:	d89f      	bhi.n	800d56a <listen_message_reliably+0x52>
 800d62a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d62e:	9a03      	ldr	r2, [sp, #12]
 800d630:	429a      	cmp	r2, r3
 800d632:	bf08      	it	eq
 800d634:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800d638:	d019      	beq.n	800d66e <listen_message_reliably+0x156>
 800d63a:	ebab 0309 	sub.w	r3, fp, r9
 800d63e:	2b00      	cmp	r3, #0
 800d640:	9d05      	ldr	r5, [sp, #20]
 800d642:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 800d646:	aa08      	add	r2, sp, #32
 800d648:	bf08      	it	eq
 800d64a:	2301      	moveq	r3, #1
 800d64c:	a907      	add	r1, sp, #28
 800d64e:	6884      	ldr	r4, [r0, #8]
 800d650:	429d      	cmp	r5, r3
 800d652:	6800      	ldr	r0, [r0, #0]
 800d654:	bfa8      	it	ge
 800d656:	461d      	movge	r5, r3
 800d658:	462b      	mov	r3, r5
 800d65a:	47a0      	blx	r4
 800d65c:	b948      	cbnz	r0, 800d672 <listen_message_reliably+0x15a>
 800d65e:	9b05      	ldr	r3, [sp, #20]
 800d660:	1b5b      	subs	r3, r3, r5
 800d662:	2b00      	cmp	r3, #0
 800d664:	9305      	str	r3, [sp, #20]
 800d666:	f73f af60 	bgt.w	800d52a <listen_message_reliably+0x12>
 800d66a:	4604      	mov	r4, r0
 800d66c:	e012      	b.n	800d694 <listen_message_reliably+0x17c>
 800d66e:	9b05      	ldr	r3, [sp, #20]
 800d670:	e7e5      	b.n	800d63e <listen_message_reliably+0x126>
 800d672:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d676:	4604      	mov	r4, r0
 800d678:	2500      	movs	r5, #0
 800d67a:	a80c      	add	r0, sp, #48	; 0x30
 800d67c:	f7ff f940 	bl	800c900 <ucdr_init_buffer>
 800d680:	f10d 031a 	add.w	r3, sp, #26
 800d684:	aa06      	add	r2, sp, #24
 800d686:	a90c      	add	r1, sp, #48	; 0x30
 800d688:	4640      	mov	r0, r8
 800d68a:	f88d 5018 	strb.w	r5, [sp, #24]
 800d68e:	f000 fbfb 	bl	800de88 <uxr_read_session_header>
 800d692:	b918      	cbnz	r0, 800d69c <listen_message_reliably+0x184>
 800d694:	4620      	mov	r0, r4
 800d696:	b01d      	add	sp, #116	; 0x74
 800d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69c:	4629      	mov	r1, r5
 800d69e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d6a2:	f000 fc99 	bl	800dfd8 <uxr_stream_id_from_raw>
 800d6a6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d6aa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d6ae:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800d6b2:	2e01      	cmp	r6, #1
 800d6b4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d6b8:	d04b      	beq.n	800d752 <listen_message_reliably+0x23a>
 800d6ba:	2e02      	cmp	r6, #2
 800d6bc:	d00f      	beq.n	800d6de <listen_message_reliably+0x1c6>
 800d6be:	2e00      	cmp	r6, #0
 800d6c0:	d1e8      	bne.n	800d694 <listen_message_reliably+0x17c>
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 fc87 	bl	800dfd8 <uxr_stream_id_from_raw>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	a90c      	add	r1, sp, #48	; 0x30
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	920a      	str	r2, [sp, #40]	; 0x28
 800d6d2:	f7ff fd97 	bl	800d204 <read_submessage_list>
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	b01d      	add	sp, #116	; 0x74
 800d6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f108 0008 	add.w	r0, r8, #8
 800d6e4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d6e8:	f000 fd64 	bl	800e1b4 <uxr_get_input_reliable_stream>
 800d6ec:	4607      	mov	r7, r0
 800d6ee:	b338      	cbz	r0, 800d740 <listen_message_reliably+0x228>
 800d6f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6f2:	a80c      	add	r0, sp, #48	; 0x30
 800d6f4:	9203      	str	r2, [sp, #12]
 800d6f6:	f7ff f935 	bl	800c964 <ucdr_buffer_remaining>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f10d 0019 	add.w	r0, sp, #25
 800d700:	9a03      	ldr	r2, [sp, #12]
 800d702:	4651      	mov	r1, sl
 800d704:	9000      	str	r0, [sp, #0]
 800d706:	4638      	mov	r0, r7
 800d708:	f007 f80a 	bl	8014720 <uxr_receive_reliable_message>
 800d70c:	b1c0      	cbz	r0, 800d740 <listen_message_reliably+0x228>
 800d70e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d712:	b393      	cbz	r3, 800d77a <listen_message_reliably+0x262>
 800d714:	ae14      	add	r6, sp, #80	; 0x50
 800d716:	f04f 0a02 	mov.w	sl, #2
 800d71a:	e00a      	b.n	800d732 <listen_message_reliably+0x21a>
 800d71c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800d720:	4631      	mov	r1, r6
 800d722:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800d726:	4640      	mov	r0, r8
 800d728:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800d72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d72e:	f7ff fd69 	bl	800d204 <read_submessage_list>
 800d732:	2204      	movs	r2, #4
 800d734:	4631      	mov	r1, r6
 800d736:	4638      	mov	r0, r7
 800d738:	f007 f874 	bl	8014824 <uxr_next_input_reliable_buffer_available>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d1ed      	bne.n	800d71c <listen_message_reliably+0x204>
 800d740:	4640      	mov	r0, r8
 800d742:	462a      	mov	r2, r5
 800d744:	4649      	mov	r1, r9
 800d746:	f7ff fbd9 	bl	800cefc <write_submessage_acknack.isra.0>
 800d74a:	4620      	mov	r0, r4
 800d74c:	b01d      	add	sp, #116	; 0x74
 800d74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d752:	4629      	mov	r1, r5
 800d754:	f108 0008 	add.w	r0, r8, #8
 800d758:	f000 fd22 	bl	800e1a0 <uxr_get_input_best_effort_stream>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d099      	beq.n	800d694 <listen_message_reliably+0x17c>
 800d760:	4651      	mov	r1, sl
 800d762:	f006 ff53 	bl	801460c <uxr_receive_best_effort_message>
 800d766:	2800      	cmp	r0, #0
 800d768:	d094      	beq.n	800d694 <listen_message_reliably+0x17c>
 800d76a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d76e:	a90c      	add	r1, sp, #48	; 0x30
 800d770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d772:	4640      	mov	r0, r8
 800d774:	f7ff fd46 	bl	800d204 <read_submessage_list>
 800d778:	e78c      	b.n	800d694 <listen_message_reliably+0x17c>
 800d77a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d77e:	a90c      	add	r1, sp, #48	; 0x30
 800d780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d782:	4640      	mov	r0, r8
 800d784:	f7ff fd3e 	bl	800d204 <read_submessage_list>
 800d788:	e7c4      	b.n	800d714 <listen_message_reliably+0x1fc>
 800d78a:	bf00      	nop

0800d78c <uxr_run_session_timeout>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	4604      	mov	r4, r0
 800d790:	460d      	mov	r5, r1
 800d792:	f000 fd77 	bl	800e284 <uxr_millis>
 800d796:	4606      	mov	r6, r0
 800d798:	4620      	mov	r0, r4
 800d79a:	f7ff fc77 	bl	800d08c <uxr_flash_output_streams>
 800d79e:	4629      	mov	r1, r5
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f7ff feb9 	bl	800d518 <listen_message_reliably>
 800d7a6:	f000 fd6d 	bl	800e284 <uxr_millis>
 800d7aa:	1b83      	subs	r3, r0, r6
 800d7ac:	1ae9      	subs	r1, r5, r3
 800d7ae:	2900      	cmp	r1, #0
 800d7b0:	dcf6      	bgt.n	800d7a0 <uxr_run_session_timeout+0x14>
 800d7b2:	f104 0008 	add.w	r0, r4, #8
 800d7b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7ba:	f000 bd07 	b.w	800e1cc <uxr_output_streams_confirmed>
 800d7be:	bf00      	nop

0800d7c0 <uxr_run_session_until_data>:
 800d7c0:	b570      	push	{r4, r5, r6, lr}
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	460d      	mov	r5, r1
 800d7c6:	f000 fd5d 	bl	800e284 <uxr_millis>
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f7ff fc5d 	bl	800d08c <uxr_flash_output_streams>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800d7da:	e005      	b.n	800d7e8 <uxr_run_session_until_data+0x28>
 800d7dc:	f000 fd52 	bl	800e284 <uxr_millis>
 800d7e0:	1b83      	subs	r3, r0, r6
 800d7e2:	1ae9      	subs	r1, r5, r3
 800d7e4:	2900      	cmp	r1, #0
 800d7e6:	dd07      	ble.n	800d7f8 <uxr_run_session_until_data+0x38>
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7ff fe95 	bl	800d518 <listen_message_reliably>
 800d7ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d0f2      	beq.n	800d7dc <uxr_run_session_until_data+0x1c>
 800d7f6:	bd70      	pop	{r4, r5, r6, pc}
 800d7f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d7fc:	bd70      	pop	{r4, r5, r6, pc}
 800d7fe:	bf00      	nop

0800d800 <uxr_run_session_until_confirm_delivery>:
 800d800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d804:	4606      	mov	r6, r0
 800d806:	460d      	mov	r5, r1
 800d808:	f000 fd3c 	bl	800e284 <uxr_millis>
 800d80c:	4607      	mov	r7, r0
 800d80e:	4630      	mov	r0, r6
 800d810:	f106 0808 	add.w	r8, r6, #8
 800d814:	f7ff fc3a 	bl	800d08c <uxr_flash_output_streams>
 800d818:	2d00      	cmp	r5, #0
 800d81a:	db10      	blt.n	800d83e <uxr_run_session_until_confirm_delivery+0x3e>
 800d81c:	462c      	mov	r4, r5
 800d81e:	e006      	b.n	800d82e <uxr_run_session_until_confirm_delivery+0x2e>
 800d820:	f7ff fe7a 	bl	800d518 <listen_message_reliably>
 800d824:	f000 fd2e 	bl	800e284 <uxr_millis>
 800d828:	1bc3      	subs	r3, r0, r7
 800d82a:	1aec      	subs	r4, r5, r3
 800d82c:	d407      	bmi.n	800d83e <uxr_run_session_until_confirm_delivery+0x3e>
 800d82e:	4640      	mov	r0, r8
 800d830:	f000 fccc 	bl	800e1cc <uxr_output_streams_confirmed>
 800d834:	4603      	mov	r3, r0
 800d836:	4621      	mov	r1, r4
 800d838:	4630      	mov	r0, r6
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d0f0      	beq.n	800d820 <uxr_run_session_until_confirm_delivery+0x20>
 800d83e:	4640      	mov	r0, r8
 800d840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d844:	f000 bcc2 	b.w	800e1cc <uxr_output_streams_confirmed>

0800d848 <uxr_run_session_until_all_status>:
 800d848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d850:	4606      	mov	r6, r0
 800d852:	4688      	mov	r8, r1
 800d854:	4692      	mov	sl, r2
 800d856:	461f      	mov	r7, r3
 800d858:	f7ff fc18 	bl	800d08c <uxr_flash_output_streams>
 800d85c:	f1bb 0f00 	cmp.w	fp, #0
 800d860:	d004      	beq.n	800d86c <uxr_run_session_until_all_status+0x24>
 800d862:	465a      	mov	r2, fp
 800d864:	21ff      	movs	r1, #255	; 0xff
 800d866:	4638      	mov	r0, r7
 800d868:	f009 fa16 	bl	8016c98 <memset>
 800d86c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800d870:	1e7d      	subs	r5, r7, #1
 800d872:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 800d876:	f000 fd05 	bl	800e284 <uxr_millis>
 800d87a:	4641      	mov	r1, r8
 800d87c:	4681      	mov	r9, r0
 800d87e:	4630      	mov	r0, r6
 800d880:	f7ff fe4a 	bl	800d518 <listen_message_reliably>
 800d884:	f000 fcfe 	bl	800e284 <uxr_millis>
 800d888:	eba0 0009 	sub.w	r0, r0, r9
 800d88c:	eba8 0100 	sub.w	r1, r8, r0
 800d890:	f1bb 0f00 	cmp.w	fp, #0
 800d894:	d029      	beq.n	800d8ea <uxr_run_session_until_all_status+0xa2>
 800d896:	46ae      	mov	lr, r5
 800d898:	f04f 0c00 	mov.w	ip, #0
 800d89c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800d8a0:	2cff      	cmp	r4, #255	; 0xff
 800d8a2:	d015      	beq.n	800d8d0 <uxr_run_session_until_all_status+0x88>
 800d8a4:	f10c 0c01 	add.w	ip, ip, #1
 800d8a8:	45e3      	cmp	fp, ip
 800d8aa:	d8f7      	bhi.n	800d89c <uxr_run_session_until_all_status+0x54>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	67f3      	str	r3, [r6, #124]	; 0x7c
 800d8b0:	e000      	b.n	800d8b4 <uxr_run_session_until_all_status+0x6c>
 800d8b2:	b158      	cbz	r0, 800d8cc <uxr_run_session_until_all_status+0x84>
 800d8b4:	462b      	mov	r3, r5
 800d8b6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800d8ba:	3302      	adds	r3, #2
 800d8bc:	2801      	cmp	r0, #1
 800d8be:	eba3 0307 	sub.w	r3, r3, r7
 800d8c2:	bf8c      	ite	hi
 800d8c4:	2000      	movhi	r0, #0
 800d8c6:	2001      	movls	r0, #1
 800d8c8:	459b      	cmp	fp, r3
 800d8ca:	d8f2      	bhi.n	800d8b2 <uxr_run_session_until_all_status+0x6a>
 800d8cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800d8d4:	f10c 0c01 	add.w	ip, ip, #1
 800d8d8:	45dc      	cmp	ip, fp
 800d8da:	d201      	bcs.n	800d8e0 <uxr_run_session_until_all_status+0x98>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0dd      	beq.n	800d89c <uxr_run_session_until_all_status+0x54>
 800d8e0:	2900      	cmp	r1, #0
 800d8e2:	dde3      	ble.n	800d8ac <uxr_run_session_until_all_status+0x64>
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1ca      	bne.n	800d87e <uxr_run_session_until_all_status+0x36>
 800d8e8:	e7e0      	b.n	800d8ac <uxr_run_session_until_all_status+0x64>
 800d8ea:	2001      	movs	r0, #1
 800d8ec:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800d8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8f4 <wait_session_status>:
 800d8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	b09d      	sub	sp, #116	; 0x74
 800d8fc:	20ff      	movs	r0, #255	; 0xff
 800d8fe:	9303      	str	r3, [sp, #12]
 800d900:	7160      	strb	r0, [r4, #5]
 800d902:	2b00      	cmp	r3, #0
 800d904:	f000 80b6 	beq.w	800da74 <wait_session_status+0x180>
 800d908:	4689      	mov	r9, r1
 800d90a:	4692      	mov	sl, r2
 800d90c:	f04f 0b00 	mov.w	fp, #0
 800d910:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d912:	4652      	mov	r2, sl
 800d914:	4649      	mov	r1, r9
 800d916:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d91a:	47a8      	blx	r5
 800d91c:	f000 fcb2 	bl	800e284 <uxr_millis>
 800d920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d924:	4605      	mov	r5, r0
 800d926:	e009      	b.n	800d93c <wait_session_status+0x48>
 800d928:	f000 fcac 	bl	800e284 <uxr_millis>
 800d92c:	1b40      	subs	r0, r0, r5
 800d92e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d932:	2b00      	cmp	r3, #0
 800d934:	dd40      	ble.n	800d9b8 <wait_session_status+0xc4>
 800d936:	7960      	ldrb	r0, [r4, #5]
 800d938:	28ff      	cmp	r0, #255	; 0xff
 800d93a:	d145      	bne.n	800d9c8 <wait_session_status+0xd4>
 800d93c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d93e:	a908      	add	r1, sp, #32
 800d940:	6896      	ldr	r6, [r2, #8]
 800d942:	6810      	ldr	r0, [r2, #0]
 800d944:	aa09      	add	r2, sp, #36	; 0x24
 800d946:	47b0      	blx	r6
 800d948:	2800      	cmp	r0, #0
 800d94a:	d0ed      	beq.n	800d928 <wait_session_status+0x34>
 800d94c:	a80c      	add	r0, sp, #48	; 0x30
 800d94e:	2600      	movs	r6, #0
 800d950:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d954:	f7fe ffd4 	bl	800c900 <ucdr_init_buffer>
 800d958:	f10d 031e 	add.w	r3, sp, #30
 800d95c:	aa07      	add	r2, sp, #28
 800d95e:	a90c      	add	r1, sp, #48	; 0x30
 800d960:	4620      	mov	r0, r4
 800d962:	f88d 601c 	strb.w	r6, [sp, #28]
 800d966:	f000 fa8f 	bl	800de88 <uxr_read_session_header>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	d0dc      	beq.n	800d928 <wait_session_status+0x34>
 800d96e:	4631      	mov	r1, r6
 800d970:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d974:	f000 fb30 	bl	800dfd8 <uxr_stream_id_from_raw>
 800d978:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d97c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d980:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d984:	2f01      	cmp	r7, #1
 800d986:	9302      	str	r3, [sp, #8]
 800d988:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800d98c:	d05c      	beq.n	800da48 <wait_session_status+0x154>
 800d98e:	2f02      	cmp	r7, #2
 800d990:	d020      	beq.n	800d9d4 <wait_session_status+0xe0>
 800d992:	2f00      	cmp	r7, #0
 800d994:	d1c8      	bne.n	800d928 <wait_session_status+0x34>
 800d996:	4639      	mov	r1, r7
 800d998:	4638      	mov	r0, r7
 800d99a:	f000 fb1d 	bl	800dfd8 <uxr_stream_id_from_raw>
 800d99e:	a90c      	add	r1, sp, #48	; 0x30
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f7ff fc2d 	bl	800d204 <read_submessage_list>
 800d9aa:	f000 fc6b 	bl	800e284 <uxr_millis>
 800d9ae:	1b40      	subs	r0, r0, r5
 800d9b0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	dcbe      	bgt.n	800d936 <wait_session_status+0x42>
 800d9b8:	f10b 0b01 	add.w	fp, fp, #1
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	7960      	ldrb	r0, [r4, #5]
 800d9c0:	455b      	cmp	r3, fp
 800d9c2:	d001      	beq.n	800d9c8 <wait_session_status+0xd4>
 800d9c4:	28ff      	cmp	r0, #255	; 0xff
 800d9c6:	d0a3      	beq.n	800d910 <wait_session_status+0x1c>
 800d9c8:	38ff      	subs	r0, #255	; 0xff
 800d9ca:	bf18      	it	ne
 800d9cc:	2001      	movne	r0, #1
 800d9ce:	b01d      	add	sp, #116	; 0x74
 800d9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d9d8:	4631      	mov	r1, r6
 800d9da:	f104 0008 	add.w	r0, r4, #8
 800d9de:	9304      	str	r3, [sp, #16]
 800d9e0:	f000 fbe8 	bl	800e1b4 <uxr_get_input_reliable_stream>
 800d9e4:	4680      	mov	r8, r0
 800d9e6:	b348      	cbz	r0, 800da3c <wait_session_status+0x148>
 800d9e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9ea:	a80c      	add	r0, sp, #48	; 0x30
 800d9ec:	9205      	str	r2, [sp, #20]
 800d9ee:	f7fe ffb9 	bl	800c964 <ucdr_buffer_remaining>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	f10d 001d 	add.w	r0, sp, #29
 800d9f8:	9a05      	ldr	r2, [sp, #20]
 800d9fa:	9000      	str	r0, [sp, #0]
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	9902      	ldr	r1, [sp, #8]
 800da00:	f006 fe8e 	bl	8014720 <uxr_receive_reliable_message>
 800da04:	b1d0      	cbz	r0, 800da3c <wait_session_status+0x148>
 800da06:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d03a      	beq.n	800da84 <wait_session_status+0x190>
 800da0e:	9f04      	ldr	r7, [sp, #16]
 800da10:	e00a      	b.n	800da28 <wait_session_status+0x134>
 800da12:	f04f 0302 	mov.w	r3, #2
 800da16:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800da1a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800da1e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800da22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da24:	f7ff fbee 	bl	800d204 <read_submessage_list>
 800da28:	a914      	add	r1, sp, #80	; 0x50
 800da2a:	2204      	movs	r2, #4
 800da2c:	4640      	mov	r0, r8
 800da2e:	f006 fef9 	bl	8014824 <uxr_next_input_reliable_buffer_available>
 800da32:	4603      	mov	r3, r0
 800da34:	a914      	add	r1, sp, #80	; 0x50
 800da36:	4620      	mov	r0, r4
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1ea      	bne.n	800da12 <wait_session_status+0x11e>
 800da3c:	4632      	mov	r2, r6
 800da3e:	9904      	ldr	r1, [sp, #16]
 800da40:	4620      	mov	r0, r4
 800da42:	f7ff fa5b 	bl	800cefc <write_submessage_acknack.isra.0>
 800da46:	e76f      	b.n	800d928 <wait_session_status+0x34>
 800da48:	4631      	mov	r1, r6
 800da4a:	f104 0008 	add.w	r0, r4, #8
 800da4e:	f000 fba7 	bl	800e1a0 <uxr_get_input_best_effort_stream>
 800da52:	2800      	cmp	r0, #0
 800da54:	f43f af68 	beq.w	800d928 <wait_session_status+0x34>
 800da58:	9902      	ldr	r1, [sp, #8]
 800da5a:	f006 fdd7 	bl	801460c <uxr_receive_best_effort_message>
 800da5e:	2800      	cmp	r0, #0
 800da60:	f43f af62 	beq.w	800d928 <wait_session_status+0x34>
 800da64:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800da68:	a90c      	add	r1, sp, #48	; 0x30
 800da6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da6c:	4620      	mov	r0, r4
 800da6e:	f7ff fbc9 	bl	800d204 <read_submessage_list>
 800da72:	e759      	b.n	800d928 <wait_session_status+0x34>
 800da74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800da76:	e9d3 0400 	ldrd	r0, r4, [r3]
 800da7a:	47a0      	blx	r4
 800da7c:	2001      	movs	r0, #1
 800da7e:	b01d      	add	sp, #116	; 0x74
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800da88:	a90c      	add	r1, sp, #48	; 0x30
 800da8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da8c:	4620      	mov	r0, r4
 800da8e:	f7ff fbb9 	bl	800d204 <read_submessage_list>
 800da92:	e7bc      	b.n	800da0e <wait_session_status+0x11a>

0800da94 <uxr_delete_session_retries>:
 800da94:	b530      	push	{r4, r5, lr}
 800da96:	b08f      	sub	sp, #60	; 0x3c
 800da98:	4604      	mov	r4, r0
 800da9a:	460d      	mov	r5, r1
 800da9c:	f000 fa34 	bl	800df08 <uxr_session_header_offset>
 800daa0:	2300      	movs	r3, #0
 800daa2:	2210      	movs	r2, #16
 800daa4:	a902      	add	r1, sp, #8
 800daa6:	9000      	str	r0, [sp, #0]
 800daa8:	a806      	add	r0, sp, #24
 800daaa:	f7fe ff17 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800daae:	a906      	add	r1, sp, #24
 800dab0:	4620      	mov	r0, r4
 800dab2:	f000 f979 	bl	800dda8 <uxr_buffer_delete_session>
 800dab6:	2200      	movs	r2, #0
 800dab8:	9b06      	ldr	r3, [sp, #24]
 800daba:	4620      	mov	r0, r4
 800dabc:	4611      	mov	r1, r2
 800dabe:	f000 f9cf 	bl	800de60 <uxr_stamp_session_header>
 800dac2:	a806      	add	r0, sp, #24
 800dac4:	f7fe ff4a 	bl	800c95c <ucdr_buffer_length>
 800dac8:	462b      	mov	r3, r5
 800daca:	4602      	mov	r2, r0
 800dacc:	a902      	add	r1, sp, #8
 800dace:	4620      	mov	r0, r4
 800dad0:	f7ff ff10 	bl	800d8f4 <wait_session_status>
 800dad4:	b118      	cbz	r0, 800dade <uxr_delete_session_retries+0x4a>
 800dad6:	7960      	ldrb	r0, [r4, #5]
 800dad8:	fab0 f080 	clz	r0, r0
 800dadc:	0940      	lsrs	r0, r0, #5
 800dade:	b00f      	add	sp, #60	; 0x3c
 800dae0:	bd30      	pop	{r4, r5, pc}
 800dae2:	bf00      	nop

0800dae4 <uxr_create_session>:
 800dae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae8:	f100 0b08 	add.w	fp, r0, #8
 800daec:	4604      	mov	r4, r0
 800daee:	b0ab      	sub	sp, #172	; 0xac
 800daf0:	4658      	mov	r0, fp
 800daf2:	465e      	mov	r6, fp
 800daf4:	f000 faa6 	bl	800e044 <uxr_reset_stream_storage>
 800daf8:	4620      	mov	r0, r4
 800dafa:	f000 fa05 	bl	800df08 <uxr_session_header_offset>
 800dafe:	2300      	movs	r3, #0
 800db00:	221c      	movs	r2, #28
 800db02:	a90b      	add	r1, sp, #44	; 0x2c
 800db04:	9000      	str	r0, [sp, #0]
 800db06:	a812      	add	r0, sp, #72	; 0x48
 800db08:	f7fe fee8 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800db0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800db0e:	a912      	add	r1, sp, #72	; 0x48
 800db10:	4620      	mov	r0, r4
 800db12:	8a1a      	ldrh	r2, [r3, #16]
 800db14:	3a04      	subs	r2, #4
 800db16:	b292      	uxth	r2, r2
 800db18:	f000 f91c 	bl	800dd54 <uxr_buffer_create_session>
 800db1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800db1e:	4620      	mov	r0, r4
 800db20:	f000 f98a 	bl	800de38 <uxr_stamp_create_session_header>
 800db24:	a812      	add	r0, sp, #72	; 0x48
 800db26:	f7fe ff19 	bl	800c95c <ucdr_buffer_length>
 800db2a:	23ff      	movs	r3, #255	; 0xff
 800db2c:	4681      	mov	r9, r0
 800db2e:	7163      	strb	r3, [r4, #5]
 800db30:	230a      	movs	r3, #10
 800db32:	9303      	str	r3, [sp, #12]
 800db34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800db36:	464a      	mov	r2, r9
 800db38:	a90b      	add	r1, sp, #44	; 0x2c
 800db3a:	e9d3 0500 	ldrd	r0, r5, [r3]
 800db3e:	47a8      	blx	r5
 800db40:	f000 fba0 	bl	800e284 <uxr_millis>
 800db44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db48:	4605      	mov	r5, r0
 800db4a:	e009      	b.n	800db60 <uxr_create_session+0x7c>
 800db4c:	f000 fb9a 	bl	800e284 <uxr_millis>
 800db50:	1b40      	subs	r0, r0, r5
 800db52:	7962      	ldrb	r2, [r4, #5]
 800db54:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800db58:	2b00      	cmp	r3, #0
 800db5a:	dd38      	ble.n	800dbce <uxr_create_session+0xea>
 800db5c:	2aff      	cmp	r2, #255	; 0xff
 800db5e:	d13c      	bne.n	800dbda <uxr_create_session+0xf6>
 800db60:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800db62:	a907      	add	r1, sp, #28
 800db64:	6897      	ldr	r7, [r2, #8]
 800db66:	6810      	ldr	r0, [r2, #0]
 800db68:	aa08      	add	r2, sp, #32
 800db6a:	47b8      	blx	r7
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d0ed      	beq.n	800db4c <uxr_create_session+0x68>
 800db70:	a81a      	add	r0, sp, #104	; 0x68
 800db72:	2700      	movs	r7, #0
 800db74:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800db78:	f7fe fec2 	bl	800c900 <ucdr_init_buffer>
 800db7c:	f10d 031a 	add.w	r3, sp, #26
 800db80:	aa06      	add	r2, sp, #24
 800db82:	a91a      	add	r1, sp, #104	; 0x68
 800db84:	4620      	mov	r0, r4
 800db86:	f88d 7018 	strb.w	r7, [sp, #24]
 800db8a:	f000 f97d 	bl	800de88 <uxr_read_session_header>
 800db8e:	2800      	cmp	r0, #0
 800db90:	d0dc      	beq.n	800db4c <uxr_create_session+0x68>
 800db92:	4639      	mov	r1, r7
 800db94:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800db98:	f000 fa1e 	bl	800dfd8 <uxr_stream_id_from_raw>
 800db9c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800dba0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800dba4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800dba8:	2f01      	cmp	r7, #1
 800dbaa:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800dbae:	d053      	beq.n	800dc58 <uxr_create_session+0x174>
 800dbb0:	2f02      	cmp	r7, #2
 800dbb2:	d018      	beq.n	800dbe6 <uxr_create_session+0x102>
 800dbb4:	2f00      	cmp	r7, #0
 800dbb6:	d1c9      	bne.n	800db4c <uxr_create_session+0x68>
 800dbb8:	4639      	mov	r1, r7
 800dbba:	4638      	mov	r0, r7
 800dbbc:	f000 fa0c 	bl	800dfd8 <uxr_stream_id_from_raw>
 800dbc0:	a91a      	add	r1, sp, #104	; 0x68
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	900a      	str	r0, [sp, #40]	; 0x28
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f7ff fb1c 	bl	800d204 <read_submessage_list>
 800dbcc:	e7be      	b.n	800db4c <uxr_create_session+0x68>
 800dbce:	9b03      	ldr	r3, [sp, #12]
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	9303      	str	r3, [sp, #12]
 800dbd4:	d001      	beq.n	800dbda <uxr_create_session+0xf6>
 800dbd6:	2aff      	cmp	r2, #255	; 0xff
 800dbd8:	d0ac      	beq.n	800db34 <uxr_create_session+0x50>
 800dbda:	2a00      	cmp	r2, #0
 800dbdc:	d051      	beq.n	800dc82 <uxr_create_session+0x19e>
 800dbde:	2000      	movs	r0, #0
 800dbe0:	b02b      	add	sp, #172	; 0xac
 800dbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800dbea:	4641      	mov	r1, r8
 800dbec:	4630      	mov	r0, r6
 800dbee:	9304      	str	r3, [sp, #16]
 800dbf0:	f000 fae0 	bl	800e1b4 <uxr_get_input_reliable_stream>
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	b348      	cbz	r0, 800dc4c <uxr_create_session+0x168>
 800dbf8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dbfa:	a81a      	add	r0, sp, #104	; 0x68
 800dbfc:	9205      	str	r2, [sp, #20]
 800dbfe:	f7fe feb1 	bl	800c964 <ucdr_buffer_remaining>
 800dc02:	4603      	mov	r3, r0
 800dc04:	f10d 0019 	add.w	r0, sp, #25
 800dc08:	9a05      	ldr	r2, [sp, #20]
 800dc0a:	4659      	mov	r1, fp
 800dc0c:	9000      	str	r0, [sp, #0]
 800dc0e:	4650      	mov	r0, sl
 800dc10:	f006 fd86 	bl	8014720 <uxr_receive_reliable_message>
 800dc14:	b1d0      	cbz	r0, 800dc4c <uxr_create_session+0x168>
 800dc16:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d038      	beq.n	800dc90 <uxr_create_session+0x1ac>
 800dc1e:	9f04      	ldr	r7, [sp, #16]
 800dc20:	e00a      	b.n	800dc38 <uxr_create_session+0x154>
 800dc22:	f04f 0302 	mov.w	r3, #2
 800dc26:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800dc2a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800dc2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc34:	f7ff fae6 	bl	800d204 <read_submessage_list>
 800dc38:	a922      	add	r1, sp, #136	; 0x88
 800dc3a:	2204      	movs	r2, #4
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	f006 fdf1 	bl	8014824 <uxr_next_input_reliable_buffer_available>
 800dc42:	4603      	mov	r3, r0
 800dc44:	a922      	add	r1, sp, #136	; 0x88
 800dc46:	4620      	mov	r0, r4
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1ea      	bne.n	800dc22 <uxr_create_session+0x13e>
 800dc4c:	4642      	mov	r2, r8
 800dc4e:	9904      	ldr	r1, [sp, #16]
 800dc50:	4620      	mov	r0, r4
 800dc52:	f7ff f953 	bl	800cefc <write_submessage_acknack.isra.0>
 800dc56:	e779      	b.n	800db4c <uxr_create_session+0x68>
 800dc58:	4641      	mov	r1, r8
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f000 faa0 	bl	800e1a0 <uxr_get_input_best_effort_stream>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	f43f af73 	beq.w	800db4c <uxr_create_session+0x68>
 800dc66:	4659      	mov	r1, fp
 800dc68:	f006 fcd0 	bl	801460c <uxr_receive_best_effort_message>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f43f af6d 	beq.w	800db4c <uxr_create_session+0x68>
 800dc72:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800dc76:	a91a      	add	r1, sp, #104	; 0x68
 800dc78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f7ff fac2 	bl	800d204 <read_submessage_list>
 800dc80:	e764      	b.n	800db4c <uxr_create_session+0x68>
 800dc82:	4630      	mov	r0, r6
 800dc84:	f000 f9de 	bl	800e044 <uxr_reset_stream_storage>
 800dc88:	2001      	movs	r0, #1
 800dc8a:	b02b      	add	sp, #172	; 0xac
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800dc94:	a91a      	add	r1, sp, #104	; 0x68
 800dc96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f7ff fab3 	bl	800d204 <read_submessage_list>
 800dc9e:	e7be      	b.n	800dc1e <uxr_create_session+0x13a>

0800dca0 <uxr_prepare_stream_to_write_submessage>:
 800dca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca4:	b082      	sub	sp, #8
 800dca6:	4604      	mov	r4, r0
 800dca8:	4610      	mov	r0, r2
 800dcaa:	4615      	mov	r5, r2
 800dcac:	461e      	mov	r6, r3
 800dcae:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800dcb2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800dcb6:	f105 0904 	add.w	r9, r5, #4
 800dcba:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800dcbe:	9101      	str	r1, [sp, #4]
 800dcc0:	f000 fada 	bl	800e278 <uxr_submessage_padding>
 800dcc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcc8:	4481      	add	r9, r0
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d01d      	beq.n	800dd0a <uxr_prepare_stream_to_write_submessage+0x6a>
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d116      	bne.n	800dd00 <uxr_prepare_stream_to_write_submessage+0x60>
 800dcd2:	f104 0008 	add.w	r0, r4, #8
 800dcd6:	4651      	mov	r1, sl
 800dcd8:	f000 fa56 	bl	800e188 <uxr_get_output_reliable_stream>
 800dcdc:	4604      	mov	r4, r0
 800dcde:	b158      	cbz	r0, 800dcf8 <uxr_prepare_stream_to_write_submessage+0x58>
 800dce0:	4649      	mov	r1, r9
 800dce2:	4632      	mov	r2, r6
 800dce4:	f006 ff62 	bl	8014bac <uxr_prepare_reliable_buffer_to_write>
 800dce8:	4604      	mov	r4, r0
 800dcea:	b12c      	cbz	r4, 800dcf8 <uxr_prepare_stream_to_write_submessage+0x58>
 800dcec:	4643      	mov	r3, r8
 800dcee:	b2aa      	uxth	r2, r5
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f000 fa80 	bl	800e1f8 <uxr_buffer_submessage_header>
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	b002      	add	sp, #8
 800dcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd00:	2400      	movs	r4, #0
 800dd02:	4620      	mov	r0, r4
 800dd04:	b002      	add	sp, #8
 800dd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd0a:	f104 0008 	add.w	r0, r4, #8
 800dd0e:	4651      	mov	r1, sl
 800dd10:	f000 fa32 	bl	800e178 <uxr_get_output_best_effort_stream>
 800dd14:	4604      	mov	r4, r0
 800dd16:	2800      	cmp	r0, #0
 800dd18:	d0ee      	beq.n	800dcf8 <uxr_prepare_stream_to_write_submessage+0x58>
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	f006 fe71 	bl	8014a04 <uxr_prepare_best_effort_buffer_to_write>
 800dd22:	4604      	mov	r4, r0
 800dd24:	e7e1      	b.n	800dcea <uxr_prepare_stream_to_write_submessage+0x4a>
 800dd26:	bf00      	nop

0800dd28 <uxr_init_session_info>:
 800dd28:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800dd2c:	23ff      	movs	r3, #255	; 0xff
 800dd2e:	7102      	strb	r2, [r0, #4]
 800dd30:	f880 c001 	strb.w	ip, [r0, #1]
 800dd34:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800dd38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800dd3c:	7001      	strb	r1, [r0, #0]
 800dd3e:	f880 c002 	strb.w	ip, [r0, #2]
 800dd42:	7143      	strb	r3, [r0, #5]
 800dd44:	70c2      	strb	r2, [r0, #3]
 800dd46:	b500      	push	{lr}
 800dd48:	f04f 0e09 	mov.w	lr, #9
 800dd4c:	f8a0 e006 	strh.w	lr, [r0, #6]
 800dd50:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd54 <uxr_buffer_create_session>:
 800dd54:	b530      	push	{r4, r5, lr}
 800dd56:	2300      	movs	r3, #0
 800dd58:	b089      	sub	sp, #36	; 0x24
 800dd5a:	4d12      	ldr	r5, [pc, #72]	; (800dda4 <uxr_buffer_create_session+0x50>)
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	9307      	str	r3, [sp, #28]
 800dd60:	4619      	mov	r1, r3
 800dd62:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dd66:	2201      	movs	r2, #1
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	80c2      	strh	r2, [r0, #6]
 800dd6c:	f88d 2004 	strb.w	r2, [sp, #4]
 800dd70:	682a      	ldr	r2, [r5, #0]
 800dd72:	9303      	str	r3, [sp, #12]
 800dd74:	9200      	str	r2, [sp, #0]
 800dd76:	88aa      	ldrh	r2, [r5, #4]
 800dd78:	9306      	str	r3, [sp, #24]
 800dd7a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dd7e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800dd82:	9202      	str	r2, [sp, #8]
 800dd84:	7802      	ldrb	r2, [r0, #0]
 800dd86:	4620      	mov	r0, r4
 800dd88:	f88d 200c 	strb.w	r2, [sp, #12]
 800dd8c:	2210      	movs	r2, #16
 800dd8e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800dd92:	f000 fa31 	bl	800e1f8 <uxr_buffer_submessage_header>
 800dd96:	4669      	mov	r1, sp
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f001 fa6f 	bl	800f27c <uxr_serialize_CREATE_CLIENT_Payload>
 800dd9e:	b009      	add	sp, #36	; 0x24
 800dda0:	bd30      	pop	{r4, r5, pc}
 800dda2:	bf00      	nop
 800dda4:	08017d90 	.word	0x08017d90

0800dda8 <uxr_buffer_delete_session>:
 800dda8:	4a0c      	ldr	r2, [pc, #48]	; (800dddc <uxr_buffer_delete_session+0x34>)
 800ddaa:	2302      	movs	r3, #2
 800ddac:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800ddb0:	b510      	push	{r4, lr}
 800ddb2:	460c      	mov	r4, r1
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	8911      	ldrh	r1, [r2, #8]
 800ddb8:	2204      	movs	r2, #4
 800ddba:	80c3      	strh	r3, [r0, #6]
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f8ad 1006 	strh.w	r1, [sp, #6]
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	2103      	movs	r1, #3
 800ddc6:	f8ad c004 	strh.w	ip, [sp, #4]
 800ddca:	f000 fa15 	bl	800e1f8 <uxr_buffer_submessage_header>
 800ddce:	a901      	add	r1, sp, #4
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f001 fafb 	bl	800f3cc <uxr_serialize_DELETE_Payload>
 800ddd6:	b002      	add	sp, #8
 800ddd8:	bd10      	pop	{r4, pc}
 800ddda:	bf00      	nop
 800dddc:	08017d90 	.word	0x08017d90

0800dde0 <uxr_read_create_session_status>:
 800dde0:	b510      	push	{r4, lr}
 800dde2:	460b      	mov	r3, r1
 800dde4:	b088      	sub	sp, #32
 800dde6:	4604      	mov	r4, r0
 800dde8:	a901      	add	r1, sp, #4
 800ddea:	4618      	mov	r0, r3
 800ddec:	f001 fafe 	bl	800f3ec <uxr_deserialize_STATUS_AGENT_Payload>
 800ddf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ddf4:	7163      	strb	r3, [r4, #5]
 800ddf6:	b008      	add	sp, #32
 800ddf8:	bd10      	pop	{r4, pc}
 800ddfa:	bf00      	nop

0800ddfc <uxr_read_delete_session_status>:
 800ddfc:	b510      	push	{r4, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	4604      	mov	r4, r0
 800de02:	4608      	mov	r0, r1
 800de04:	a902      	add	r1, sp, #8
 800de06:	f001 fb21 	bl	800f44c <uxr_deserialize_STATUS_Payload>
 800de0a:	88e3      	ldrh	r3, [r4, #6]
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	d001      	beq.n	800de14 <uxr_read_delete_session_status+0x18>
 800de10:	b004      	add	sp, #16
 800de12:	bd10      	pop	{r4, pc}
 800de14:	f10d 000a 	add.w	r0, sp, #10
 800de18:	f7fe fff6 	bl	800ce08 <uxr_object_id_from_raw>
 800de1c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800de20:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800de24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800de28:	b29b      	uxth	r3, r3
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d1f0      	bne.n	800de10 <uxr_read_delete_session_status+0x14>
 800de2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800de32:	7163      	strb	r3, [r4, #5]
 800de34:	e7ec      	b.n	800de10 <uxr_read_delete_session_status+0x14>
 800de36:	bf00      	nop

0800de38 <uxr_stamp_create_session_header>:
 800de38:	b510      	push	{r4, lr}
 800de3a:	2208      	movs	r2, #8
 800de3c:	b08a      	sub	sp, #40	; 0x28
 800de3e:	4604      	mov	r4, r0
 800de40:	eb0d 0002 	add.w	r0, sp, r2
 800de44:	f7fe fd5c 	bl	800c900 <ucdr_init_buffer>
 800de48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4c:	2300      	movs	r3, #0
 800de4e:	a802      	add	r0, sp, #8
 800de50:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800de54:	9400      	str	r4, [sp, #0]
 800de56:	461a      	mov	r2, r3
 800de58:	f000 fbca 	bl	800e5f0 <uxr_serialize_message_header>
 800de5c:	b00a      	add	sp, #40	; 0x28
 800de5e:	bd10      	pop	{r4, pc}

0800de60 <uxr_stamp_session_header>:
 800de60:	b530      	push	{r4, r5, lr}
 800de62:	b08d      	sub	sp, #52	; 0x34
 800de64:	4604      	mov	r4, r0
 800de66:	460d      	mov	r5, r1
 800de68:	4619      	mov	r1, r3
 800de6a:	a804      	add	r0, sp, #16
 800de6c:	9203      	str	r2, [sp, #12]
 800de6e:	2208      	movs	r2, #8
 800de70:	f7fe fd46 	bl	800c900 <ucdr_init_buffer>
 800de74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de78:	9b03      	ldr	r3, [sp, #12]
 800de7a:	462a      	mov	r2, r5
 800de7c:	a804      	add	r0, sp, #16
 800de7e:	9400      	str	r4, [sp, #0]
 800de80:	f000 fbb6 	bl	800e5f0 <uxr_serialize_message_header>
 800de84:	b00d      	add	sp, #52	; 0x34
 800de86:	bd30      	pop	{r4, r5, pc}

0800de88 <uxr_read_session_header>:
 800de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	4607      	mov	r7, r0
 800de8e:	b084      	sub	sp, #16
 800de90:	4608      	mov	r0, r1
 800de92:	460c      	mov	r4, r1
 800de94:	4615      	mov	r5, r2
 800de96:	461e      	mov	r6, r3
 800de98:	f7fe fd64 	bl	800c964 <ucdr_buffer_remaining>
 800de9c:	2808      	cmp	r0, #8
 800de9e:	d803      	bhi.n	800dea8 <uxr_read_session_header+0x20>
 800dea0:	2000      	movs	r0, #0
 800dea2:	b004      	add	sp, #16
 800dea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea8:	f10d 080c 	add.w	r8, sp, #12
 800deac:	4633      	mov	r3, r6
 800deae:	462a      	mov	r2, r5
 800deb0:	4620      	mov	r0, r4
 800deb2:	f10d 010b 	add.w	r1, sp, #11
 800deb6:	f8cd 8000 	str.w	r8, [sp]
 800deba:	f000 fbb7 	bl	800e62c <uxr_deserialize_message_header>
 800debe:	783a      	ldrb	r2, [r7, #0]
 800dec0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d1eb      	bne.n	800dea0 <uxr_read_session_header+0x18>
 800dec8:	061b      	lsls	r3, r3, #24
 800deca:	d41b      	bmi.n	800df04 <uxr_read_session_header+0x7c>
 800decc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ded0:	787b      	ldrb	r3, [r7, #1]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d003      	beq.n	800dede <uxr_read_session_header+0x56>
 800ded6:	2001      	movs	r0, #1
 800ded8:	f080 0001 	eor.w	r0, r0, #1
 800dedc:	e7e1      	b.n	800dea2 <uxr_read_session_header+0x1a>
 800dede:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800dee2:	1cb8      	adds	r0, r7, #2
 800dee4:	78bb      	ldrb	r3, [r7, #2]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d1f5      	bne.n	800ded6 <uxr_read_session_header+0x4e>
 800deea:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800deee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800def2:	429a      	cmp	r2, r3
 800def4:	d1ef      	bne.n	800ded6 <uxr_read_session_header+0x4e>
 800def6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800defa:	7843      	ldrb	r3, [r0, #1]
 800defc:	429a      	cmp	r2, r3
 800defe:	d1ea      	bne.n	800ded6 <uxr_read_session_header+0x4e>
 800df00:	2000      	movs	r0, #0
 800df02:	e7e9      	b.n	800ded8 <uxr_read_session_header+0x50>
 800df04:	2001      	movs	r0, #1
 800df06:	e7cc      	b.n	800dea2 <uxr_read_session_header+0x1a>

0800df08 <uxr_session_header_offset>:
 800df08:	f990 3000 	ldrsb.w	r3, [r0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	bfac      	ite	ge
 800df10:	2008      	movge	r0, #8
 800df12:	2004      	movlt	r0, #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop

0800df18 <uxr_init_base_object_request>:
 800df18:	b510      	push	{r4, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800df20:	9101      	str	r1, [sp, #4]
 800df22:	88c3      	ldrh	r3, [r0, #6]
 800df24:	f1a3 010a 	sub.w	r1, r3, #10
 800df28:	b289      	uxth	r1, r1
 800df2a:	42a1      	cmp	r1, r4
 800df2c:	d80f      	bhi.n	800df4e <uxr_init_base_object_request+0x36>
 800df2e:	3301      	adds	r3, #1
 800df30:	b29c      	uxth	r4, r3
 800df32:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800df36:	b2db      	uxtb	r3, r3
 800df38:	80c4      	strh	r4, [r0, #6]
 800df3a:	1c91      	adds	r1, r2, #2
 800df3c:	9801      	ldr	r0, [sp, #4]
 800df3e:	f882 c000 	strb.w	ip, [r2]
 800df42:	7053      	strb	r3, [r2, #1]
 800df44:	f7fe ff74 	bl	800ce30 <uxr_object_id_to_raw>
 800df48:	4620      	mov	r0, r4
 800df4a:	b002      	add	sp, #8
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	230a      	movs	r3, #10
 800df50:	f04f 0c00 	mov.w	ip, #0
 800df54:	461c      	mov	r4, r3
 800df56:	e7ef      	b.n	800df38 <uxr_init_base_object_request+0x20>

0800df58 <uxr_parse_base_object_request>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	4604      	mov	r4, r0
 800df5c:	3002      	adds	r0, #2
 800df5e:	460d      	mov	r5, r1
 800df60:	4616      	mov	r6, r2
 800df62:	f7fe ff51 	bl	800ce08 <uxr_object_id_from_raw>
 800df66:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800df6a:	8028      	strh	r0, [r5, #0]
 800df6c:	806b      	strh	r3, [r5, #2]
 800df6e:	7822      	ldrb	r2, [r4, #0]
 800df70:	7863      	ldrb	r3, [r4, #1]
 800df72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800df76:	8033      	strh	r3, [r6, #0]
 800df78:	bd70      	pop	{r4, r5, r6, pc}
 800df7a:	bf00      	nop

0800df7c <uxr_stream_id>:
 800df7c:	2901      	cmp	r1, #1
 800df7e:	4684      	mov	ip, r0
 800df80:	b500      	push	{lr}
 800df82:	b083      	sub	sp, #12
 800df84:	d01f      	beq.n	800dfc6 <uxr_stream_id+0x4a>
 800df86:	2902      	cmp	r1, #2
 800df88:	f04f 0e00 	mov.w	lr, #0
 800df8c:	d020      	beq.n	800dfd0 <uxr_stream_id+0x54>
 800df8e:	2300      	movs	r3, #0
 800df90:	2000      	movs	r0, #0
 800df92:	f36e 0307 	bfi	r3, lr, #0, #8
 800df96:	f36c 230f 	bfi	r3, ip, #8, #8
 800df9a:	f361 4317 	bfi	r3, r1, #16, #8
 800df9e:	f362 631f 	bfi	r3, r2, #24, #8
 800dfa2:	fa5f fc83 	uxtb.w	ip, r3
 800dfa6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dfaa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dfae:	0e1b      	lsrs	r3, r3, #24
 800dfb0:	f36c 0007 	bfi	r0, ip, #0, #8
 800dfb4:	f361 200f 	bfi	r0, r1, #8, #8
 800dfb8:	f362 4017 	bfi	r0, r2, #16, #8
 800dfbc:	f363 601f 	bfi	r0, r3, #24, #8
 800dfc0:	b003      	add	sp, #12
 800dfc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfc6:	f100 0e01 	add.w	lr, r0, #1
 800dfca:	fa5f fe8e 	uxtb.w	lr, lr
 800dfce:	e7de      	b.n	800df8e <uxr_stream_id+0x12>
 800dfd0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 800dfd4:	e7db      	b.n	800df8e <uxr_stream_id+0x12>
 800dfd6:	bf00      	nop

0800dfd8 <uxr_stream_id_from_raw>:
 800dfd8:	b082      	sub	sp, #8
 800dfda:	b130      	cbz	r0, 800dfea <uxr_stream_id_from_raw+0x12>
 800dfdc:	0603      	lsls	r3, r0, #24
 800dfde:	d421      	bmi.n	800e024 <uxr_stream_id_from_raw+0x4c>
 800dfe0:	1e42      	subs	r2, r0, #1
 800dfe2:	f04f 0c01 	mov.w	ip, #1
 800dfe6:	b2d2      	uxtb	r2, r2
 800dfe8:	e001      	b.n	800dfee <uxr_stream_id_from_raw+0x16>
 800dfea:	4684      	mov	ip, r0
 800dfec:	4602      	mov	r2, r0
 800dfee:	2300      	movs	r3, #0
 800dff0:	f360 0307 	bfi	r3, r0, #0, #8
 800dff4:	2000      	movs	r0, #0
 800dff6:	f362 230f 	bfi	r3, r2, #8, #8
 800dffa:	f36c 4317 	bfi	r3, ip, #16, #8
 800dffe:	f361 631f 	bfi	r3, r1, #24, #8
 800e002:	fa5f fc83 	uxtb.w	ip, r3
 800e006:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e00a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e00e:	0e1b      	lsrs	r3, r3, #24
 800e010:	f36c 0007 	bfi	r0, ip, #0, #8
 800e014:	f361 200f 	bfi	r0, r1, #8, #8
 800e018:	f362 4017 	bfi	r0, r2, #16, #8
 800e01c:	f363 601f 	bfi	r0, r3, #24, #8
 800e020:	b002      	add	sp, #8
 800e022:	4770      	bx	lr
 800e024:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800e028:	f04f 0c02 	mov.w	ip, #2
 800e02c:	e7df      	b.n	800dfee <uxr_stream_id_from_raw+0x16>
 800e02e:	bf00      	nop

0800e030 <uxr_init_stream_storage>:
 800e030:	2300      	movs	r3, #0
 800e032:	7403      	strb	r3, [r0, #16]
 800e034:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800e038:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800e03c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop

0800e044 <uxr_reset_stream_storage>:
 800e044:	b570      	push	{r4, r5, r6, lr}
 800e046:	7c03      	ldrb	r3, [r0, #16]
 800e048:	4604      	mov	r4, r0
 800e04a:	b14b      	cbz	r3, 800e060 <uxr_reset_stream_storage+0x1c>
 800e04c:	4606      	mov	r6, r0
 800e04e:	2500      	movs	r5, #0
 800e050:	4630      	mov	r0, r6
 800e052:	3501      	adds	r5, #1
 800e054:	f006 fcd0 	bl	80149f8 <uxr_reset_output_best_effort_stream>
 800e058:	7c23      	ldrb	r3, [r4, #16]
 800e05a:	3610      	adds	r6, #16
 800e05c:	42ab      	cmp	r3, r5
 800e05e:	d8f7      	bhi.n	800e050 <uxr_reset_stream_storage+0xc>
 800e060:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e064:	b15b      	cbz	r3, 800e07e <uxr_reset_stream_storage+0x3a>
 800e066:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e06a:	2500      	movs	r5, #0
 800e06c:	4630      	mov	r0, r6
 800e06e:	3501      	adds	r5, #1
 800e070:	f006 fac8 	bl	8014604 <uxr_reset_input_best_effort_stream>
 800e074:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e078:	3602      	adds	r6, #2
 800e07a:	42ab      	cmp	r3, r5
 800e07c:	d8f6      	bhi.n	800e06c <uxr_reset_stream_storage+0x28>
 800e07e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e082:	b15b      	cbz	r3, 800e09c <uxr_reset_stream_storage+0x58>
 800e084:	f104 0618 	add.w	r6, r4, #24
 800e088:	2500      	movs	r5, #0
 800e08a:	4630      	mov	r0, r6
 800e08c:	3501      	adds	r5, #1
 800e08e:	f006 fd5f 	bl	8014b50 <uxr_reset_output_reliable_stream>
 800e092:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e096:	3628      	adds	r6, #40	; 0x28
 800e098:	42ab      	cmp	r3, r5
 800e09a:	d8f6      	bhi.n	800e08a <uxr_reset_stream_storage+0x46>
 800e09c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800e0a0:	b15b      	cbz	r3, 800e0ba <uxr_reset_stream_storage+0x76>
 800e0a2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	3501      	adds	r5, #1
 800e0ac:	f006 fb16 	bl	80146dc <uxr_reset_input_reliable_stream>
 800e0b0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800e0b4:	3618      	adds	r6, #24
 800e0b6:	42ab      	cmp	r3, r5
 800e0b8:	d8f6      	bhi.n	800e0a8 <uxr_reset_stream_storage+0x64>
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}

0800e0bc <uxr_add_output_best_effort_buffer>:
 800e0bc:	b510      	push	{r4, lr}
 800e0be:	7c04      	ldrb	r4, [r0, #16]
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	f104 0c01 	add.w	ip, r4, #1
 800e0c6:	f880 c010 	strb.w	ip, [r0, #16]
 800e0ca:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e0ce:	f006 fc89 	bl	80149e4 <uxr_init_output_best_effort_stream>
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	b002      	add	sp, #8
 800e0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0de:	f7ff bf4d 	b.w	800df7c <uxr_stream_id>
 800e0e2:	bf00      	nop

0800e0e4 <uxr_add_output_reliable_buffer>:
 800e0e4:	b510      	push	{r4, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	4684      	mov	ip, r0
 800e0ea:	2028      	movs	r0, #40	; 0x28
 800e0ec:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e0f0:	9400      	str	r4, [sp, #0]
 800e0f2:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800e0f6:	fb00 c004 	mla	r0, r0, r4, ip
 800e0fa:	f104 0e01 	add.w	lr, r4, #1
 800e0fe:	3018      	adds	r0, #24
 800e100:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800e104:	f006 fcee 	bl	8014ae4 <uxr_init_output_reliable_stream>
 800e108:	2201      	movs	r2, #1
 800e10a:	2102      	movs	r1, #2
 800e10c:	4620      	mov	r0, r4
 800e10e:	b004      	add	sp, #16
 800e110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e114:	f7ff bf32 	b.w	800df7c <uxr_stream_id>

0800e118 <uxr_add_input_best_effort_buffer>:
 800e118:	b510      	push	{r4, lr}
 800e11a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800e11e:	b082      	sub	sp, #8
 800e120:	1c62      	adds	r2, r4, #1
 800e122:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800e126:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800e12a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e12e:	f006 fa65 	bl	80145fc <uxr_init_input_best_effort_stream>
 800e132:	2200      	movs	r2, #0
 800e134:	2101      	movs	r1, #1
 800e136:	4620      	mov	r0, r4
 800e138:	b002      	add	sp, #8
 800e13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e13e:	f7ff bf1d 	b.w	800df7c <uxr_stream_id>
 800e142:	bf00      	nop

0800e144 <uxr_add_input_reliable_buffer>:
 800e144:	b510      	push	{r4, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	4684      	mov	ip, r0
 800e14a:	2018      	movs	r0, #24
 800e14c:	9c06      	ldr	r4, [sp, #24]
 800e14e:	9400      	str	r4, [sp, #0]
 800e150:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800e154:	fb00 c004 	mla	r0, r0, r4, ip
 800e158:	f104 0e01 	add.w	lr, r4, #1
 800e15c:	3048      	adds	r0, #72	; 0x48
 800e15e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800e162:	f006 fa95 	bl	8014690 <uxr_init_input_reliable_stream>
 800e166:	2200      	movs	r2, #0
 800e168:	2102      	movs	r1, #2
 800e16a:	4620      	mov	r0, r4
 800e16c:	b004      	add	sp, #16
 800e16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e172:	f7ff bf03 	b.w	800df7c <uxr_stream_id>
 800e176:	bf00      	nop

0800e178 <uxr_get_output_best_effort_stream>:
 800e178:	7c03      	ldrb	r3, [r0, #16]
 800e17a:	428b      	cmp	r3, r1
 800e17c:	bf8c      	ite	hi
 800e17e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e182:	2000      	movls	r0, #0
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop

0800e188 <uxr_get_output_reliable_stream>:
 800e188:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e18c:	428b      	cmp	r3, r1
 800e18e:	d904      	bls.n	800e19a <uxr_get_output_reliable_stream+0x12>
 800e190:	2328      	movs	r3, #40	; 0x28
 800e192:	fb03 0001 	mla	r0, r3, r1, r0
 800e196:	3018      	adds	r0, #24
 800e198:	4770      	bx	lr
 800e19a:	2000      	movs	r0, #0
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop

0800e1a0 <uxr_get_input_best_effort_stream>:
 800e1a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e1a4:	428b      	cmp	r3, r1
 800e1a6:	d903      	bls.n	800e1b0 <uxr_get_input_best_effort_stream+0x10>
 800e1a8:	3121      	adds	r1, #33	; 0x21
 800e1aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800e1ae:	4770      	bx	lr
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	4770      	bx	lr

0800e1b4 <uxr_get_input_reliable_stream>:
 800e1b4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800e1b8:	428b      	cmp	r3, r1
 800e1ba:	d904      	bls.n	800e1c6 <uxr_get_input_reliable_stream+0x12>
 800e1bc:	2318      	movs	r3, #24
 800e1be:	fb03 0001 	mla	r0, r3, r1, r0
 800e1c2:	3048      	adds	r0, #72	; 0x48
 800e1c4:	4770      	bx	lr
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop

0800e1cc <uxr_output_streams_confirmed>:
 800e1cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e1d0:	b183      	cbz	r3, 800e1f4 <uxr_output_streams_confirmed+0x28>
 800e1d2:	b570      	push	{r4, r5, r6, lr}
 800e1d4:	4606      	mov	r6, r0
 800e1d6:	f100 0518 	add.w	r5, r0, #24
 800e1da:	2400      	movs	r4, #0
 800e1dc:	e000      	b.n	800e1e0 <uxr_output_streams_confirmed+0x14>
 800e1de:	b140      	cbz	r0, 800e1f2 <uxr_output_streams_confirmed+0x26>
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	3401      	adds	r4, #1
 800e1e4:	f006 ff28 	bl	8015038 <uxr_is_output_up_to_date>
 800e1e8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800e1ec:	3528      	adds	r5, #40	; 0x28
 800e1ee:	42a3      	cmp	r3, r4
 800e1f0:	d8f5      	bhi.n	800e1de <uxr_output_streams_confirmed+0x12>
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	2001      	movs	r0, #1
 800e1f6:	4770      	bx	lr

0800e1f8 <uxr_buffer_submessage_header>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	460e      	mov	r6, r1
 800e1fc:	2104      	movs	r1, #4
 800e1fe:	4604      	mov	r4, r0
 800e200:	4615      	mov	r5, r2
 800e202:	461f      	mov	r7, r3
 800e204:	f7fe fb98 	bl	800c938 <ucdr_align_to>
 800e208:	2301      	movs	r3, #1
 800e20a:	4631      	mov	r1, r6
 800e20c:	4620      	mov	r0, r4
 800e20e:	ea47 0203 	orr.w	r2, r7, r3
 800e212:	7523      	strb	r3, [r4, #20]
 800e214:	462b      	mov	r3, r5
 800e216:	f000 fa29 	bl	800e66c <uxr_serialize_submessage_header>
 800e21a:	4620      	mov	r0, r4
 800e21c:	f7fe fba2 	bl	800c964 <ucdr_buffer_remaining>
 800e220:	42a8      	cmp	r0, r5
 800e222:	bf34      	ite	cc
 800e224:	2000      	movcc	r0, #0
 800e226:	2001      	movcs	r0, #1
 800e228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e22a:	bf00      	nop

0800e22c <uxr_read_submessage_header>:
 800e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e230:	4604      	mov	r4, r0
 800e232:	460d      	mov	r5, r1
 800e234:	2104      	movs	r1, #4
 800e236:	4616      	mov	r6, r2
 800e238:	4698      	mov	r8, r3
 800e23a:	f7fe fb7d 	bl	800c938 <ucdr_align_to>
 800e23e:	4620      	mov	r0, r4
 800e240:	f7fe fb90 	bl	800c964 <ucdr_buffer_remaining>
 800e244:	2803      	cmp	r0, #3
 800e246:	bf8c      	ite	hi
 800e248:	2701      	movhi	r7, #1
 800e24a:	2700      	movls	r7, #0
 800e24c:	d802      	bhi.n	800e254 <uxr_read_submessage_header+0x28>
 800e24e:	4638      	mov	r0, r7
 800e250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e254:	4633      	mov	r3, r6
 800e256:	4642      	mov	r2, r8
 800e258:	4620      	mov	r0, r4
 800e25a:	4629      	mov	r1, r5
 800e25c:	f000 fa1a 	bl	800e694 <uxr_deserialize_submessage_header>
 800e260:	f898 3000 	ldrb.w	r3, [r8]
 800e264:	4638      	mov	r0, r7
 800e266:	f003 0201 	and.w	r2, r3, #1
 800e26a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e26e:	f888 3000 	strb.w	r3, [r8]
 800e272:	7522      	strb	r2, [r4, #20]
 800e274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e278 <uxr_submessage_padding>:
 800e278:	f010 0003 	ands.w	r0, r0, #3
 800e27c:	bf18      	it	ne
 800e27e:	f1c0 0004 	rsbne	r0, r0, #4
 800e282:	4770      	bx	lr

0800e284 <uxr_millis>:
 800e284:	b510      	push	{r4, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	2001      	movs	r0, #1
 800e28a:	4669      	mov	r1, sp
 800e28c:	f7f3 f9b0 	bl	80015f0 <clock_gettime>
 800e290:	4908      	ldr	r1, [pc, #32]	; (800e2b4 <uxr_millis+0x30>)
 800e292:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e296:	fba0 0301 	umull	r0, r3, r0, r1
 800e29a:	1900      	adds	r0, r0, r4
 800e29c:	fb01 3102 	mla	r1, r1, r2, r3
 800e2a0:	4a05      	ldr	r2, [pc, #20]	; (800e2b8 <uxr_millis+0x34>)
 800e2a2:	f04f 0300 	mov.w	r3, #0
 800e2a6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e2aa:	f7f2 f819 	bl	80002e0 <__aeabi_ldivmod>
 800e2ae:	b004      	add	sp, #16
 800e2b0:	bd10      	pop	{r4, pc}
 800e2b2:	bf00      	nop
 800e2b4:	3b9aca00 	.word	0x3b9aca00
 800e2b8:	000f4240 	.word	0x000f4240

0800e2bc <uxr_nanos>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	4669      	mov	r1, sp
 800e2c4:	f7f3 f994 	bl	80015f0 <clock_gettime>
 800e2c8:	4a06      	ldr	r2, [pc, #24]	; (800e2e4 <uxr_nanos+0x28>)
 800e2ca:	9800      	ldr	r0, [sp, #0]
 800e2cc:	9902      	ldr	r1, [sp, #8]
 800e2ce:	fba0 0302 	umull	r0, r3, r0, r2
 800e2d2:	9c01      	ldr	r4, [sp, #4]
 800e2d4:	1840      	adds	r0, r0, r1
 800e2d6:	fb02 3304 	mla	r3, r2, r4, r3
 800e2da:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e2de:	b004      	add	sp, #16
 800e2e0:	bd10      	pop	{r4, pc}
 800e2e2:	bf00      	nop
 800e2e4:	3b9aca00 	.word	0x3b9aca00

0800e2e8 <on_full_output_buffer_fragmented>:
 800e2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ec:	460c      	mov	r4, r1
 800e2ee:	b08a      	sub	sp, #40	; 0x28
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800e2f6:	f104 0008 	add.w	r0, r4, #8
 800e2fa:	f7ff ff45 	bl	800e188 <uxr_get_output_reliable_stream>
 800e2fe:	4605      	mov	r5, r0
 800e300:	f006 fea4 	bl	801504c <get_available_free_slots>
 800e304:	b968      	cbnz	r0, 800e322 <on_full_output_buffer_fragmented+0x3a>
 800e306:	4620      	mov	r0, r4
 800e308:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800e30c:	4798      	blx	r3
 800e30e:	b918      	cbnz	r0, 800e318 <on_full_output_buffer_fragmented+0x30>
 800e310:	2001      	movs	r0, #1
 800e312:	b00a      	add	sp, #40	; 0x28
 800e314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e318:	4628      	mov	r0, r5
 800e31a:	f006 fe97 	bl	801504c <get_available_free_slots>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d0f6      	beq.n	800e310 <on_full_output_buffer_fragmented+0x28>
 800e322:	8929      	ldrh	r1, [r5, #8]
 800e324:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e328:	89eb      	ldrh	r3, [r5, #14]
 800e32a:	7b28      	ldrb	r0, [r5, #12]
 800e32c:	686f      	ldr	r7, [r5, #4]
 800e32e:	1a12      	subs	r2, r2, r0
 800e330:	fbb3 f0f1 	udiv	r0, r3, r1
 800e334:	fbb7 f7f1 	udiv	r7, r7, r1
 800e338:	fb01 3110 	mls	r1, r1, r0, r3
 800e33c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800e340:	b289      	uxth	r1, r1
 800e342:	fb07 f101 	mul.w	r1, r7, r1
 800e346:	3f04      	subs	r7, #4
 800e348:	443a      	add	r2, r7
 800e34a:	3104      	adds	r1, #4
 800e34c:	fa1f f882 	uxth.w	r8, r2
 800e350:	463a      	mov	r2, r7
 800e352:	eba3 0308 	sub.w	r3, r3, r8
 800e356:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800e35a:	682b      	ldr	r3, [r5, #0]
 800e35c:	4419      	add	r1, r3
 800e35e:	2300      	movs	r3, #0
 800e360:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800e364:	9000      	str	r0, [sp, #0]
 800e366:	a802      	add	r0, sp, #8
 800e368:	f7fe fab8 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800e36c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800e370:	f102 0308 	add.w	r3, r2, #8
 800e374:	42bb      	cmp	r3, r7
 800e376:	d927      	bls.n	800e3c8 <on_full_output_buffer_fragmented+0xe0>
 800e378:	4642      	mov	r2, r8
 800e37a:	2300      	movs	r3, #0
 800e37c:	210d      	movs	r1, #13
 800e37e:	a802      	add	r0, sp, #8
 800e380:	f7ff ff3a 	bl	800e1f8 <uxr_buffer_submessage_header>
 800e384:	8929      	ldrh	r1, [r5, #8]
 800e386:	89eb      	ldrh	r3, [r5, #14]
 800e388:	686a      	ldr	r2, [r5, #4]
 800e38a:	fbb3 f0f1 	udiv	r0, r3, r1
 800e38e:	fbb2 f2f1 	udiv	r2, r2, r1
 800e392:	fb01 3310 	mls	r3, r1, r0, r3
 800e396:	b29b      	uxth	r3, r3
 800e398:	fb02 f303 	mul.w	r3, r2, r3
 800e39c:	682a      	ldr	r2, [r5, #0]
 800e39e:	50d7      	str	r7, [r2, r3]
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	89e8      	ldrh	r0, [r5, #14]
 800e3a4:	f006 ffa4 	bl	80152f0 <uxr_seq_num_add>
 800e3a8:	9904      	ldr	r1, [sp, #16]
 800e3aa:	9a03      	ldr	r2, [sp, #12]
 800e3ac:	81e8      	strh	r0, [r5, #14]
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	1a52      	subs	r2, r2, r1
 800e3b2:	f7fe faa5 	bl	800c900 <ucdr_init_buffer>
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	490f      	ldr	r1, [pc, #60]	; (800e3f8 <on_full_output_buffer_fragmented+0x110>)
 800e3bc:	f7fe fa74 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	b00a      	add	sp, #40	; 0x28
 800e3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c8:	b292      	uxth	r2, r2
 800e3ca:	2302      	movs	r3, #2
 800e3cc:	210d      	movs	r1, #13
 800e3ce:	a802      	add	r0, sp, #8
 800e3d0:	f7ff ff12 	bl	800e1f8 <uxr_buffer_submessage_header>
 800e3d4:	8928      	ldrh	r0, [r5, #8]
 800e3d6:	89eb      	ldrh	r3, [r5, #14]
 800e3d8:	6869      	ldr	r1, [r5, #4]
 800e3da:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800e3de:	fbb3 f7f0 	udiv	r7, r3, r0
 800e3e2:	fbb1 f1f0 	udiv	r1, r1, r0
 800e3e6:	fb00 3317 	mls	r3, r0, r7, r3
 800e3ea:	3208      	adds	r2, #8
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	fb01 f303 	mul.w	r3, r1, r3
 800e3f2:	6829      	ldr	r1, [r5, #0]
 800e3f4:	50ca      	str	r2, [r1, r3]
 800e3f6:	e7d3      	b.n	800e3a0 <on_full_output_buffer_fragmented+0xb8>
 800e3f8:	0800e2e9 	.word	0x0800e2e9

0800e3fc <uxr_prepare_output_stream>:
 800e3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3fe:	b087      	sub	sp, #28
 800e400:	2707      	movs	r7, #7
 800e402:	2500      	movs	r5, #0
 800e404:	461c      	mov	r4, r3
 800e406:	4606      	mov	r6, r0
 800e408:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e40e:	e9cd 7500 	strd	r7, r5, [sp]
 800e412:	3204      	adds	r2, #4
 800e414:	f7ff fc44 	bl	800dca0 <uxr_prepare_stream_to_write_submessage>
 800e418:	f080 0201 	eor.w	r2, r0, #1
 800e41c:	b2d2      	uxtb	r2, r2
 800e41e:	75a2      	strb	r2, [r4, #22]
 800e420:	b112      	cbz	r2, 800e428 <uxr_prepare_output_stream+0x2c>
 800e422:	4628      	mov	r0, r5
 800e424:	b007      	add	sp, #28
 800e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e428:	aa05      	add	r2, sp, #20
 800e42a:	9902      	ldr	r1, [sp, #8]
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff fd73 	bl	800df18 <uxr_init_base_object_request>
 800e432:	a905      	add	r1, sp, #20
 800e434:	4605      	mov	r5, r0
 800e436:	4620      	mov	r0, r4
 800e438:	f001 f888 	bl	800f54c <uxr_serialize_WRITE_DATA_Payload_Data>
 800e43c:	69a6      	ldr	r6, [r4, #24]
 800e43e:	69e7      	ldr	r7, [r4, #28]
 800e440:	4620      	mov	r0, r4
 800e442:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e446:	1a52      	subs	r2, r2, r1
 800e448:	f7fe fa5a 	bl	800c900 <ucdr_init_buffer>
 800e44c:	4620      	mov	r0, r4
 800e44e:	463a      	mov	r2, r7
 800e450:	4631      	mov	r1, r6
 800e452:	f7fe fa29 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 800e456:	4628      	mov	r0, r5
 800e458:	b007      	add	sp, #28
 800e45a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e45c <uxr_prepare_output_stream_fragmented>:
 800e45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e460:	b091      	sub	sp, #68	; 0x44
 800e462:	4605      	mov	r5, r0
 800e464:	3008      	adds	r0, #8
 800e466:	461e      	mov	r6, r3
 800e468:	9105      	str	r1, [sp, #20]
 800e46a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e46e:	9204      	str	r2, [sp, #16]
 800e470:	f7ff fe8a 	bl	800e188 <uxr_get_output_reliable_stream>
 800e474:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	f000 8093 	beq.w	800e5a4 <uxr_prepare_output_stream_fragmented+0x148>
 800e47e:	4604      	mov	r4, r0
 800e480:	2800      	cmp	r0, #0
 800e482:	f000 808f 	beq.w	800e5a4 <uxr_prepare_output_stream_fragmented+0x148>
 800e486:	f006 fde1 	bl	801504c <get_available_free_slots>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	f000 8085 	beq.w	800e59a <uxr_prepare_output_stream_fragmented+0x13e>
 800e490:	8923      	ldrh	r3, [r4, #8]
 800e492:	89e7      	ldrh	r7, [r4, #14]
 800e494:	6862      	ldr	r2, [r4, #4]
 800e496:	fbb7 f9f3 	udiv	r9, r7, r3
 800e49a:	fbb2 f2f3 	udiv	r2, r2, r3
 800e49e:	fb03 7919 	mls	r9, r3, r9, r7
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	f1a2 0b04 	sub.w	fp, r2, #4
 800e4a8:	9203      	str	r2, [sp, #12]
 800e4aa:	fa1f f989 	uxth.w	r9, r9
 800e4ae:	fb02 f909 	mul.w	r9, r2, r9
 800e4b2:	f109 0904 	add.w	r9, r9, #4
 800e4b6:	4499      	add	r9, r3
 800e4b8:	7b23      	ldrb	r3, [r4, #12]
 800e4ba:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e4be:	4543      	cmp	r3, r8
 800e4c0:	d37c      	bcc.n	800e5bc <uxr_prepare_output_stream_fragmented+0x160>
 800e4c2:	f1ab 0a04 	sub.w	sl, fp, #4
 800e4c6:	465a      	mov	r2, fp
 800e4c8:	4649      	mov	r1, r9
 800e4ca:	a808      	add	r0, sp, #32
 800e4cc:	ebaa 0a03 	sub.w	sl, sl, r3
 800e4d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e4d2:	f8cd 8000 	str.w	r8, [sp]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	fa1f fa8a 	uxth.w	sl, sl
 800e4dc:	9302      	str	r3, [sp, #8]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f7fe f9fc 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 800e4e4:	9b02      	ldr	r3, [sp, #8]
 800e4e6:	4652      	mov	r2, sl
 800e4e8:	210d      	movs	r1, #13
 800e4ea:	455b      	cmp	r3, fp
 800e4ec:	bf34      	ite	cc
 800e4ee:	2302      	movcc	r3, #2
 800e4f0:	2300      	movcs	r3, #0
 800e4f2:	a808      	add	r0, sp, #32
 800e4f4:	f7ff fe80 	bl	800e1f8 <uxr_buffer_submessage_header>
 800e4f8:	8921      	ldrh	r1, [r4, #8]
 800e4fa:	6863      	ldr	r3, [r4, #4]
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	fbb7 f2f1 	udiv	r2, r7, r1
 800e502:	fbb3 f3f1 	udiv	r3, r3, r1
 800e506:	fb01 7212 	mls	r2, r1, r2, r7
 800e50a:	2101      	movs	r1, #1
 800e50c:	b292      	uxth	r2, r2
 800e50e:	fb02 f303 	mul.w	r3, r2, r3
 800e512:	6822      	ldr	r2, [r4, #0]
 800e514:	f842 b003 	str.w	fp, [r2, r3]
 800e518:	f006 feea 	bl	80152f0 <uxr_seq_num_add>
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	f108 0104 	add.w	r1, r8, #4
 800e522:	4607      	mov	r7, r0
 800e524:	f1a3 0208 	sub.w	r2, r3, #8
 800e528:	4630      	mov	r0, r6
 800e52a:	4449      	add	r1, r9
 800e52c:	eba2 0208 	sub.w	r2, r2, r8
 800e530:	f7fe f9e6 	bl	800c900 <ucdr_init_buffer>
 800e534:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e536:	2107      	movs	r1, #7
 800e538:	81e7      	strh	r7, [r4, #14]
 800e53a:	1d1a      	adds	r2, r3, #4
 800e53c:	2300      	movs	r3, #0
 800e53e:	4630      	mov	r0, r6
 800e540:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e544:	bf28      	it	cs
 800e546:	461a      	movcs	r2, r3
 800e548:	b292      	uxth	r2, r2
 800e54a:	f7ff fe55 	bl	800e1f8 <uxr_buffer_submessage_header>
 800e54e:	aa07      	add	r2, sp, #28
 800e550:	9904      	ldr	r1, [sp, #16]
 800e552:	4628      	mov	r0, r5
 800e554:	f7ff fce0 	bl	800df18 <uxr_init_base_object_request>
 800e558:	4604      	mov	r4, r0
 800e55a:	b320      	cbz	r0, 800e5a6 <uxr_prepare_output_stream_fragmented+0x14a>
 800e55c:	a907      	add	r1, sp, #28
 800e55e:	4630      	mov	r0, r6
 800e560:	f000 fff4 	bl	800f54c <uxr_serialize_WRITE_DATA_Payload_Data>
 800e564:	4630      	mov	r0, r6
 800e566:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e56a:	1a52      	subs	r2, r2, r1
 800e56c:	f7fe f9c8 	bl	800c900 <ucdr_init_buffer>
 800e570:	9b05      	ldr	r3, [sp, #20]
 800e572:	9a02      	ldr	r2, [sp, #8]
 800e574:	4630      	mov	r0, r6
 800e576:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800e57a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e57c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800e580:	462a      	mov	r2, r5
 800e582:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800e586:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e588:	4918      	ldr	r1, [pc, #96]	; (800e5ec <uxr_prepare_output_stream_fragmented+0x190>)
 800e58a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800e58e:	f7fe f98b 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 800e592:	4620      	mov	r0, r4
 800e594:	b011      	add	sp, #68	; 0x44
 800e596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e59c:	4628      	mov	r0, r5
 800e59e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5a0:	4798      	blx	r3
 800e5a2:	b920      	cbnz	r0, 800e5ae <uxr_prepare_output_stream_fragmented+0x152>
 800e5a4:	2400      	movs	r4, #0
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	b011      	add	sp, #68	; 0x44
 800e5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f006 fd4c 	bl	801504c <get_available_free_slots>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f47f af6b 	bne.w	800e490 <uxr_prepare_output_stream_fragmented+0x34>
 800e5ba:	e7f3      	b.n	800e5a4 <uxr_prepare_output_stream_fragmented+0x148>
 800e5bc:	4638      	mov	r0, r7
 800e5be:	2101      	movs	r1, #1
 800e5c0:	f006 fe96 	bl	80152f0 <uxr_seq_num_add>
 800e5c4:	8922      	ldrh	r2, [r4, #8]
 800e5c6:	6863      	ldr	r3, [r4, #4]
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	fbb3 f9f2 	udiv	r9, r3, r2
 800e5ce:	fbb0 f3f2 	udiv	r3, r0, r2
 800e5d2:	fb02 0313 	mls	r3, r2, r3, r0
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	fb03 f909 	mul.w	r9, r3, r9
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	f109 0904 	add.w	r9, r9, #4
 800e5e2:	4499      	add	r9, r3
 800e5e4:	7b23      	ldrb	r3, [r4, #12]
 800e5e6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e5ea:	e76a      	b.n	800e4c2 <uxr_prepare_output_stream_fragmented+0x66>
 800e5ec:	0800e2e9 	.word	0x0800e2e9

0800e5f0 <uxr_serialize_message_header>:
 800e5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5f2:	4616      	mov	r6, r2
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	460d      	mov	r5, r1
 800e5fa:	9301      	str	r3, [sp, #4]
 800e5fc:	9f08      	ldr	r7, [sp, #32]
 800e5fe:	f7fd f8ab 	bl	800b758 <ucdr_serialize_uint8_t>
 800e602:	4631      	mov	r1, r6
 800e604:	4620      	mov	r0, r4
 800e606:	f7fd f8a7 	bl	800b758 <ucdr_serialize_uint8_t>
 800e60a:	9a01      	ldr	r2, [sp, #4]
 800e60c:	2101      	movs	r1, #1
 800e60e:	4620      	mov	r0, r4
 800e610:	f7fd f94e 	bl	800b8b0 <ucdr_serialize_endian_uint16_t>
 800e614:	062b      	lsls	r3, r5, #24
 800e616:	d501      	bpl.n	800e61c <uxr_serialize_message_header+0x2c>
 800e618:	b003      	add	sp, #12
 800e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e61c:	2204      	movs	r2, #4
 800e61e:	4639      	mov	r1, r7
 800e620:	4620      	mov	r0, r4
 800e622:	b003      	add	sp, #12
 800e624:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e628:	f005 bdee 	b.w	8014208 <ucdr_serialize_array_uint8_t>

0800e62c <uxr_deserialize_message_header>:
 800e62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e62e:	4616      	mov	r6, r2
 800e630:	b083      	sub	sp, #12
 800e632:	4604      	mov	r4, r0
 800e634:	460d      	mov	r5, r1
 800e636:	9301      	str	r3, [sp, #4]
 800e638:	9f08      	ldr	r7, [sp, #32]
 800e63a:	f7fd f8a3 	bl	800b784 <ucdr_deserialize_uint8_t>
 800e63e:	4631      	mov	r1, r6
 800e640:	4620      	mov	r0, r4
 800e642:	f7fd f89f 	bl	800b784 <ucdr_deserialize_uint8_t>
 800e646:	9a01      	ldr	r2, [sp, #4]
 800e648:	2101      	movs	r1, #1
 800e64a:	4620      	mov	r0, r4
 800e64c:	f7fd fa24 	bl	800ba98 <ucdr_deserialize_endian_uint16_t>
 800e650:	f995 3000 	ldrsb.w	r3, [r5]
 800e654:	2b00      	cmp	r3, #0
 800e656:	da01      	bge.n	800e65c <uxr_deserialize_message_header+0x30>
 800e658:	b003      	add	sp, #12
 800e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e65c:	2204      	movs	r2, #4
 800e65e:	4639      	mov	r1, r7
 800e660:	4620      	mov	r0, r4
 800e662:	b003      	add	sp, #12
 800e664:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e668:	f005 be32 	b.w	80142d0 <ucdr_deserialize_array_uint8_t>

0800e66c <uxr_serialize_submessage_header>:
 800e66c:	b530      	push	{r4, r5, lr}
 800e66e:	4615      	mov	r5, r2
 800e670:	b083      	sub	sp, #12
 800e672:	4604      	mov	r4, r0
 800e674:	9301      	str	r3, [sp, #4]
 800e676:	f7fd f86f 	bl	800b758 <ucdr_serialize_uint8_t>
 800e67a:	4629      	mov	r1, r5
 800e67c:	4620      	mov	r0, r4
 800e67e:	f7fd f86b 	bl	800b758 <ucdr_serialize_uint8_t>
 800e682:	9a01      	ldr	r2, [sp, #4]
 800e684:	2101      	movs	r1, #1
 800e686:	4620      	mov	r0, r4
 800e688:	b003      	add	sp, #12
 800e68a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e68e:	f7fd b90f 	b.w	800b8b0 <ucdr_serialize_endian_uint16_t>
 800e692:	bf00      	nop

0800e694 <uxr_deserialize_submessage_header>:
 800e694:	b530      	push	{r4, r5, lr}
 800e696:	4615      	mov	r5, r2
 800e698:	b083      	sub	sp, #12
 800e69a:	4604      	mov	r4, r0
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	f7fd f871 	bl	800b784 <ucdr_deserialize_uint8_t>
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f7fd f86d 	bl	800b784 <ucdr_deserialize_uint8_t>
 800e6aa:	9a01      	ldr	r2, [sp, #4]
 800e6ac:	2101      	movs	r1, #1
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	b003      	add	sp, #12
 800e6b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6b6:	f7fd b9ef 	b.w	800ba98 <ucdr_deserialize_endian_uint16_t>
 800e6ba:	bf00      	nop

0800e6bc <uxr_serialize_CLIENT_Representation>:
 800e6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c0:	2204      	movs	r2, #4
 800e6c2:	460e      	mov	r6, r1
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	f005 fd9f 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e6ca:	4607      	mov	r7, r0
 800e6cc:	2202      	movs	r2, #2
 800e6ce:	1d31      	adds	r1, r6, #4
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f005 fd99 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e6d6:	4038      	ands	r0, r7
 800e6d8:	2202      	movs	r2, #2
 800e6da:	1db1      	adds	r1, r6, #6
 800e6dc:	b2c7      	uxtb	r7, r0
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f005 fd92 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e6e4:	2204      	movs	r2, #4
 800e6e6:	4007      	ands	r7, r0
 800e6e8:	f106 0108 	add.w	r1, r6, #8
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f005 fd8b 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e6f2:	4007      	ands	r7, r0
 800e6f4:	7b31      	ldrb	r1, [r6, #12]
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f7fd f82e 	bl	800b758 <ucdr_serialize_uint8_t>
 800e6fc:	7b71      	ldrb	r1, [r6, #13]
 800e6fe:	4007      	ands	r7, r0
 800e700:	4628      	mov	r0, r5
 800e702:	f7fc fffb 	bl	800b6fc <ucdr_serialize_bool>
 800e706:	7b73      	ldrb	r3, [r6, #13]
 800e708:	ea07 0800 	and.w	r8, r7, r0
 800e70c:	b93b      	cbnz	r3, 800e71e <uxr_serialize_CLIENT_Representation+0x62>
 800e70e:	8bb1      	ldrh	r1, [r6, #28]
 800e710:	4628      	mov	r0, r5
 800e712:	f7fd f84d 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800e716:	ea08 0000 	and.w	r0, r8, r0
 800e71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e71e:	6931      	ldr	r1, [r6, #16]
 800e720:	4628      	mov	r0, r5
 800e722:	f7fd fa2f 	bl	800bb84 <ucdr_serialize_uint32_t>
 800e726:	6933      	ldr	r3, [r6, #16]
 800e728:	b1e3      	cbz	r3, 800e764 <uxr_serialize_CLIENT_Representation+0xa8>
 800e72a:	b1c0      	cbz	r0, 800e75e <uxr_serialize_CLIENT_Representation+0xa2>
 800e72c:	4637      	mov	r7, r6
 800e72e:	f04f 0900 	mov.w	r9, #0
 800e732:	e000      	b.n	800e736 <uxr_serialize_CLIENT_Representation+0x7a>
 800e734:	b19c      	cbz	r4, 800e75e <uxr_serialize_CLIENT_Representation+0xa2>
 800e736:	6979      	ldr	r1, [r7, #20]
 800e738:	4628      	mov	r0, r5
 800e73a:	f005 fe89 	bl	8014450 <ucdr_serialize_string>
 800e73e:	69b9      	ldr	r1, [r7, #24]
 800e740:	4604      	mov	r4, r0
 800e742:	4628      	mov	r0, r5
 800e744:	f005 fe84 	bl	8014450 <ucdr_serialize_string>
 800e748:	f109 0901 	add.w	r9, r9, #1
 800e74c:	6933      	ldr	r3, [r6, #16]
 800e74e:	4004      	ands	r4, r0
 800e750:	3708      	adds	r7, #8
 800e752:	4599      	cmp	r9, r3
 800e754:	b2e4      	uxtb	r4, r4
 800e756:	d3ed      	bcc.n	800e734 <uxr_serialize_CLIENT_Representation+0x78>
 800e758:	ea08 0804 	and.w	r8, r8, r4
 800e75c:	e7d7      	b.n	800e70e <uxr_serialize_CLIENT_Representation+0x52>
 800e75e:	f04f 0800 	mov.w	r8, #0
 800e762:	e7d4      	b.n	800e70e <uxr_serialize_CLIENT_Representation+0x52>
 800e764:	ea08 0800 	and.w	r8, r8, r0
 800e768:	e7d1      	b.n	800e70e <uxr_serialize_CLIENT_Representation+0x52>
 800e76a:	bf00      	nop

0800e76c <uxr_deserialize_CLIENT_Representation>:
 800e76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e770:	2204      	movs	r2, #4
 800e772:	460c      	mov	r4, r1
 800e774:	4605      	mov	r5, r0
 800e776:	f005 fdab 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800e77a:	4607      	mov	r7, r0
 800e77c:	2202      	movs	r2, #2
 800e77e:	1d21      	adds	r1, r4, #4
 800e780:	4628      	mov	r0, r5
 800e782:	f005 fda5 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800e786:	4038      	ands	r0, r7
 800e788:	2202      	movs	r2, #2
 800e78a:	1da1      	adds	r1, r4, #6
 800e78c:	b2c6      	uxtb	r6, r0
 800e78e:	4628      	mov	r0, r5
 800e790:	f005 fd9e 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800e794:	2204      	movs	r2, #4
 800e796:	4006      	ands	r6, r0
 800e798:	f104 0108 	add.w	r1, r4, #8
 800e79c:	4628      	mov	r0, r5
 800e79e:	f005 fd97 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800e7a2:	4006      	ands	r6, r0
 800e7a4:	f104 010c 	add.w	r1, r4, #12
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f7fc ffeb 	bl	800b784 <ucdr_deserialize_uint8_t>
 800e7ae:	f104 010d 	add.w	r1, r4, #13
 800e7b2:	ea06 0700 	and.w	r7, r6, r0
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7fc ffb6 	bl	800b728 <ucdr_deserialize_bool>
 800e7bc:	7b63      	ldrb	r3, [r4, #13]
 800e7be:	4007      	ands	r7, r0
 800e7c0:	b93b      	cbnz	r3, 800e7d2 <uxr_deserialize_CLIENT_Representation+0x66>
 800e7c2:	f104 011c 	add.w	r1, r4, #28
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f7fd f8f2 	bl	800b9b0 <ucdr_deserialize_uint16_t>
 800e7cc:	4038      	ands	r0, r7
 800e7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7d2:	f104 0110 	add.w	r1, r4, #16
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	f7fd fb04 	bl	800bde4 <ucdr_deserialize_uint32_t>
 800e7dc:	6923      	ldr	r3, [r4, #16]
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d903      	bls.n	800e7ea <uxr_deserialize_CLIENT_Representation+0x7e>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	2700      	movs	r7, #0
 800e7e6:	75ab      	strb	r3, [r5, #22]
 800e7e8:	e7eb      	b.n	800e7c2 <uxr_deserialize_CLIENT_Representation+0x56>
 800e7ea:	b30b      	cbz	r3, 800e830 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e7ec:	b1f0      	cbz	r0, 800e82c <uxr_deserialize_CLIENT_Representation+0xc0>
 800e7ee:	46a0      	mov	r8, r4
 800e7f0:	f04f 0900 	mov.w	r9, #0
 800e7f4:	e000      	b.n	800e7f8 <uxr_deserialize_CLIENT_Representation+0x8c>
 800e7f6:	b1ce      	cbz	r6, 800e82c <uxr_deserialize_CLIENT_Representation+0xc0>
 800e7f8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e7fc:	f108 0808 	add.w	r8, r8, #8
 800e800:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e804:	4628      	mov	r0, r5
 800e806:	f005 fe33 	bl	8014470 <ucdr_deserialize_string>
 800e80a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e80e:	4606      	mov	r6, r0
 800e810:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e814:	4628      	mov	r0, r5
 800e816:	f109 0901 	add.w	r9, r9, #1
 800e81a:	f005 fe29 	bl	8014470 <ucdr_deserialize_string>
 800e81e:	6923      	ldr	r3, [r4, #16]
 800e820:	4006      	ands	r6, r0
 800e822:	4599      	cmp	r9, r3
 800e824:	b2f6      	uxtb	r6, r6
 800e826:	d3e6      	bcc.n	800e7f6 <uxr_deserialize_CLIENT_Representation+0x8a>
 800e828:	4037      	ands	r7, r6
 800e82a:	e7ca      	b.n	800e7c2 <uxr_deserialize_CLIENT_Representation+0x56>
 800e82c:	2700      	movs	r7, #0
 800e82e:	e7c8      	b.n	800e7c2 <uxr_deserialize_CLIENT_Representation+0x56>
 800e830:	4007      	ands	r7, r0
 800e832:	e7c6      	b.n	800e7c2 <uxr_deserialize_CLIENT_Representation+0x56>

0800e834 <uxr_serialize_AGENT_Representation>:
 800e834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e838:	2204      	movs	r2, #4
 800e83a:	460f      	mov	r7, r1
 800e83c:	4605      	mov	r5, r0
 800e83e:	f005 fce3 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e842:	4604      	mov	r4, r0
 800e844:	2202      	movs	r2, #2
 800e846:	1d39      	adds	r1, r7, #4
 800e848:	4628      	mov	r0, r5
 800e84a:	f005 fcdd 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e84e:	4020      	ands	r0, r4
 800e850:	2202      	movs	r2, #2
 800e852:	1db9      	adds	r1, r7, #6
 800e854:	b2c4      	uxtb	r4, r0
 800e856:	4628      	mov	r0, r5
 800e858:	f005 fcd6 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e85c:	7a39      	ldrb	r1, [r7, #8]
 800e85e:	4004      	ands	r4, r0
 800e860:	4628      	mov	r0, r5
 800e862:	f7fc ff4b 	bl	800b6fc <ucdr_serialize_bool>
 800e866:	7a3b      	ldrb	r3, [r7, #8]
 800e868:	ea00 0804 	and.w	r8, r0, r4
 800e86c:	b913      	cbnz	r3, 800e874 <uxr_serialize_AGENT_Representation+0x40>
 800e86e:	4640      	mov	r0, r8
 800e870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	4628      	mov	r0, r5
 800e878:	f7fd f984 	bl	800bb84 <ucdr_serialize_uint32_t>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	b303      	cbz	r3, 800e8c2 <uxr_serialize_AGENT_Representation+0x8e>
 800e880:	b1d0      	cbz	r0, 800e8b8 <uxr_serialize_AGENT_Representation+0x84>
 800e882:	463e      	mov	r6, r7
 800e884:	f04f 0900 	mov.w	r9, #0
 800e888:	e000      	b.n	800e88c <uxr_serialize_AGENT_Representation+0x58>
 800e88a:	b1ac      	cbz	r4, 800e8b8 <uxr_serialize_AGENT_Representation+0x84>
 800e88c:	6931      	ldr	r1, [r6, #16]
 800e88e:	4628      	mov	r0, r5
 800e890:	f005 fdde 	bl	8014450 <ucdr_serialize_string>
 800e894:	6971      	ldr	r1, [r6, #20]
 800e896:	4604      	mov	r4, r0
 800e898:	4628      	mov	r0, r5
 800e89a:	f005 fdd9 	bl	8014450 <ucdr_serialize_string>
 800e89e:	f109 0901 	add.w	r9, r9, #1
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	4004      	ands	r4, r0
 800e8a6:	3608      	adds	r6, #8
 800e8a8:	4599      	cmp	r9, r3
 800e8aa:	b2e4      	uxtb	r4, r4
 800e8ac:	d3ed      	bcc.n	800e88a <uxr_serialize_AGENT_Representation+0x56>
 800e8ae:	ea08 0804 	and.w	r8, r8, r4
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b8:	f04f 0800 	mov.w	r8, #0
 800e8bc:	4640      	mov	r0, r8
 800e8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8c2:	ea08 0800 	and.w	r8, r8, r0
 800e8c6:	e7d2      	b.n	800e86e <uxr_serialize_AGENT_Representation+0x3a>

0800e8c8 <uxr_serialize_DATAWRITER_Representation>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	7809      	ldrb	r1, [r1, #0]
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	f7fc ff42 	bl	800b758 <ucdr_serialize_uint8_t>
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	b130      	cbz	r0, 800e8e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e8d8:	782b      	ldrb	r3, [r5, #0]
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	d00c      	beq.n	800e8f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e8de:	2b03      	cmp	r3, #3
 800e8e0:	d010      	beq.n	800e904 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d008      	beq.n	800e8f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e8e6:	2202      	movs	r2, #2
 800e8e8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	f005 fc8b 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e8f2:	4020      	ands	r0, r4
 800e8f4:	b2c0      	uxtb	r0, r0
 800e8f6:	bd70      	pop	{r4, r5, r6, pc}
 800e8f8:	6869      	ldr	r1, [r5, #4]
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	f005 fda8 	bl	8014450 <ucdr_serialize_string>
 800e900:	4604      	mov	r4, r0
 800e902:	e7f0      	b.n	800e8e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e904:	4629      	mov	r1, r5
 800e906:	4630      	mov	r0, r6
 800e908:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e90c:	3104      	adds	r1, #4
 800e90e:	f005 fd73 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800e912:	4604      	mov	r4, r0
 800e914:	e7e7      	b.n	800e8e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e916:	bf00      	nop

0800e918 <uxr_serialize_ObjectVariant.part.0>:
 800e918:	b570      	push	{r4, r5, r6, lr}
 800e91a:	780b      	ldrb	r3, [r1, #0]
 800e91c:	460c      	mov	r4, r1
 800e91e:	4605      	mov	r5, r0
 800e920:	3b01      	subs	r3, #1
 800e922:	2b0d      	cmp	r3, #13
 800e924:	d854      	bhi.n	800e9d0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e926:	e8df f003 	tbb	[pc, r3]
 800e92a:	0730      	.short	0x0730
 800e92c:	07071b1b 	.word	0x07071b1b
 800e930:	0c530707 	.word	0x0c530707
 800e934:	494e0c0c 	.word	0x494e0c0c
 800e938:	3104      	adds	r1, #4
 800e93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e93e:	f7ff bfc3 	b.w	800e8c8 <uxr_serialize_DATAWRITER_Representation>
 800e942:	7909      	ldrb	r1, [r1, #4]
 800e944:	f7fc ff08 	bl	800b758 <ucdr_serialize_uint8_t>
 800e948:	b1e8      	cbz	r0, 800e986 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e94a:	7923      	ldrb	r3, [r4, #4]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d001      	beq.n	800e954 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e950:	2b02      	cmp	r3, #2
 800e952:	d13d      	bne.n	800e9d0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e954:	68a1      	ldr	r1, [r4, #8]
 800e956:	4628      	mov	r0, r5
 800e958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e95c:	f005 bd78 	b.w	8014450 <ucdr_serialize_string>
 800e960:	7909      	ldrb	r1, [r1, #4]
 800e962:	f7fc fef9 	bl	800b758 <ucdr_serialize_uint8_t>
 800e966:	4606      	mov	r6, r0
 800e968:	b120      	cbz	r0, 800e974 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e96a:	7923      	ldrb	r3, [r4, #4]
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d039      	beq.n	800e9e4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e970:	2b03      	cmp	r3, #3
 800e972:	d02f      	beq.n	800e9d4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e974:	2202      	movs	r2, #2
 800e976:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800e97a:	4628      	mov	r0, r5
 800e97c:	f005 fc44 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800e980:	4030      	ands	r0, r6
 800e982:	b2c0      	uxtb	r0, r0
 800e984:	bd70      	pop	{r4, r5, r6, pc}
 800e986:	2000      	movs	r0, #0
 800e988:	bd70      	pop	{r4, r5, r6, pc}
 800e98a:	7909      	ldrb	r1, [r1, #4]
 800e98c:	f7fc fee4 	bl	800b758 <ucdr_serialize_uint8_t>
 800e990:	4606      	mov	r6, r0
 800e992:	b158      	cbz	r0, 800e9ac <uxr_serialize_ObjectVariant.part.0+0x94>
 800e994:	7923      	ldrb	r3, [r4, #4]
 800e996:	2b02      	cmp	r3, #2
 800e998:	d003      	beq.n	800e9a2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e99a:	2b03      	cmp	r3, #3
 800e99c:	d028      	beq.n	800e9f0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d104      	bne.n	800e9ac <uxr_serialize_ObjectVariant.part.0+0x94>
 800e9a2:	68a1      	ldr	r1, [r4, #8]
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	f005 fd53 	bl	8014450 <ucdr_serialize_string>
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	f7fd fc0d 	bl	800c1d0 <ucdr_serialize_int16_t>
 800e9b6:	4030      	ands	r0, r6
 800e9b8:	b2c0      	uxtb	r0, r0
 800e9ba:	bd70      	pop	{r4, r5, r6, pc}
 800e9bc:	3104      	adds	r1, #4
 800e9be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9c2:	f7ff be7b 	b.w	800e6bc <uxr_serialize_CLIENT_Representation>
 800e9c6:	3104      	adds	r1, #4
 800e9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9cc:	f7ff bf32 	b.w	800e834 <uxr_serialize_AGENT_Representation>
 800e9d0:	2001      	movs	r0, #1
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	68a2      	ldr	r2, [r4, #8]
 800e9d6:	f104 010c 	add.w	r1, r4, #12
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f005 fd0c 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	e7c7      	b.n	800e974 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e9e4:	68a1      	ldr	r1, [r4, #8]
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f005 fd32 	bl	8014450 <ucdr_serialize_string>
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	e7c1      	b.n	800e974 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e9f0:	68a2      	ldr	r2, [r4, #8]
 800e9f2:	f104 010c 	add.w	r1, r4, #12
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f005 fcfe 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	e7d5      	b.n	800e9ac <uxr_serialize_ObjectVariant.part.0+0x94>

0800ea00 <uxr_deserialize_DATAWRITER_Representation>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	4606      	mov	r6, r0
 800ea04:	460d      	mov	r5, r1
 800ea06:	f7fc febd 	bl	800b784 <ucdr_deserialize_uint8_t>
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	b130      	cbz	r0, 800ea1c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ea0e:	782b      	ldrb	r3, [r5, #0]
 800ea10:	2b02      	cmp	r3, #2
 800ea12:	d00c      	beq.n	800ea2e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d012      	beq.n	800ea3e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d008      	beq.n	800ea2e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ea1c:	2202      	movs	r2, #2
 800ea1e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800ea22:	4630      	mov	r0, r6
 800ea24:	f005 fc54 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800ea28:	4020      	ands	r0, r4
 800ea2a:	b2c0      	uxtb	r0, r0
 800ea2c:	bd70      	pop	{r4, r5, r6, pc}
 800ea2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea32:	6869      	ldr	r1, [r5, #4]
 800ea34:	4630      	mov	r0, r6
 800ea36:	f005 fd1b 	bl	8014470 <ucdr_deserialize_string>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	e7ee      	b.n	800ea1c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ea3e:	1d2b      	adds	r3, r5, #4
 800ea40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea44:	f105 0108 	add.w	r1, r5, #8
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f005 fce7 	bl	801441c <ucdr_deserialize_sequence_uint8_t>
 800ea4e:	4604      	mov	r4, r0
 800ea50:	e7e4      	b.n	800ea1c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ea52:	bf00      	nop

0800ea54 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ea54:	b570      	push	{r4, r5, r6, lr}
 800ea56:	460d      	mov	r5, r1
 800ea58:	7809      	ldrb	r1, [r1, #0]
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	f7fc fe4e 	bl	800b6fc <ucdr_serialize_bool>
 800ea60:	782b      	ldrb	r3, [r5, #0]
 800ea62:	4604      	mov	r4, r0
 800ea64:	b94b      	cbnz	r3, 800ea7a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ea66:	7a29      	ldrb	r1, [r5, #8]
 800ea68:	4630      	mov	r0, r6
 800ea6a:	f7fc fe47 	bl	800b6fc <ucdr_serialize_bool>
 800ea6e:	7a2b      	ldrb	r3, [r5, #8]
 800ea70:	4004      	ands	r4, r0
 800ea72:	b2e4      	uxtb	r4, r4
 800ea74:	b943      	cbnz	r3, 800ea88 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ea76:	4620      	mov	r0, r4
 800ea78:	bd70      	pop	{r4, r5, r6, pc}
 800ea7a:	6869      	ldr	r1, [r5, #4]
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f005 fce7 	bl	8014450 <ucdr_serialize_string>
 800ea82:	4004      	ands	r4, r0
 800ea84:	b2e4      	uxtb	r4, r4
 800ea86:	e7ee      	b.n	800ea66 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ea88:	68e9      	ldr	r1, [r5, #12]
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f005 fce0 	bl	8014450 <ucdr_serialize_string>
 800ea90:	4004      	ands	r4, r0
 800ea92:	4620      	mov	r0, r4
 800ea94:	bd70      	pop	{r4, r5, r6, pc}
 800ea96:	bf00      	nop

0800ea98 <uxr_serialize_OBJK_Topic_Binary>:
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	6809      	ldr	r1, [r1, #0]
 800eaa0:	f005 fcd6 	bl	8014450 <ucdr_serialize_string>
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	7929      	ldrb	r1, [r5, #4]
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7fc fe27 	bl	800b6fc <ucdr_serialize_bool>
 800eaae:	792b      	ldrb	r3, [r5, #4]
 800eab0:	4004      	ands	r4, r0
 800eab2:	b2e4      	uxtb	r4, r4
 800eab4:	b943      	cbnz	r3, 800eac8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800eab6:	7b29      	ldrb	r1, [r5, #12]
 800eab8:	4630      	mov	r0, r6
 800eaba:	f7fc fe1f 	bl	800b6fc <ucdr_serialize_bool>
 800eabe:	7b2b      	ldrb	r3, [r5, #12]
 800eac0:	4004      	ands	r4, r0
 800eac2:	b93b      	cbnz	r3, 800ead4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800eac4:	4620      	mov	r0, r4
 800eac6:	bd70      	pop	{r4, r5, r6, pc}
 800eac8:	68a9      	ldr	r1, [r5, #8]
 800eaca:	4630      	mov	r0, r6
 800eacc:	f005 fcc0 	bl	8014450 <ucdr_serialize_string>
 800ead0:	4004      	ands	r4, r0
 800ead2:	e7f0      	b.n	800eab6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ead4:	6929      	ldr	r1, [r5, #16]
 800ead6:	4630      	mov	r0, r6
 800ead8:	f005 fcba 	bl	8014450 <ucdr_serialize_string>
 800eadc:	4004      	ands	r4, r0
 800eade:	b2e4      	uxtb	r4, r4
 800eae0:	4620      	mov	r0, r4
 800eae2:	bd70      	pop	{r4, r5, r6, pc}

0800eae4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	460c      	mov	r4, r1
 800eaea:	7809      	ldrb	r1, [r1, #0]
 800eaec:	4606      	mov	r6, r0
 800eaee:	f7fc fe05 	bl	800b6fc <ucdr_serialize_bool>
 800eaf2:	7823      	ldrb	r3, [r4, #0]
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	b96b      	cbnz	r3, 800eb14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800eaf8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800eafc:	4630      	mov	r0, r6
 800eafe:	f7fc fdfd 	bl	800b6fc <ucdr_serialize_bool>
 800eb02:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eb06:	4005      	ands	r5, r0
 800eb08:	b2ed      	uxtb	r5, r5
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d169      	bne.n	800ebe2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800eb0e:	4628      	mov	r0, r5
 800eb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb14:	6861      	ldr	r1, [r4, #4]
 800eb16:	4630      	mov	r0, r6
 800eb18:	f7fd f834 	bl	800bb84 <ucdr_serialize_uint32_t>
 800eb1c:	6863      	ldr	r3, [r4, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d06b      	beq.n	800ebfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d067      	beq.n	800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb26:	68a1      	ldr	r1, [r4, #8]
 800eb28:	4630      	mov	r0, r6
 800eb2a:	f005 fc91 	bl	8014450 <ucdr_serialize_string>
 800eb2e:	6863      	ldr	r3, [r4, #4]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d953      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d05e      	beq.n	800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb38:	68e1      	ldr	r1, [r4, #12]
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	f005 fc88 	bl	8014450 <ucdr_serialize_string>
 800eb40:	6863      	ldr	r3, [r4, #4]
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d94a      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d055      	beq.n	800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb4a:	6921      	ldr	r1, [r4, #16]
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f005 fc7f 	bl	8014450 <ucdr_serialize_string>
 800eb52:	6863      	ldr	r3, [r4, #4]
 800eb54:	2b03      	cmp	r3, #3
 800eb56:	d941      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d04c      	beq.n	800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb5c:	6961      	ldr	r1, [r4, #20]
 800eb5e:	4630      	mov	r0, r6
 800eb60:	f005 fc76 	bl	8014450 <ucdr_serialize_string>
 800eb64:	6863      	ldr	r3, [r4, #4]
 800eb66:	2b04      	cmp	r3, #4
 800eb68:	d938      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d043      	beq.n	800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb6e:	69a1      	ldr	r1, [r4, #24]
 800eb70:	4630      	mov	r0, r6
 800eb72:	f005 fc6d 	bl	8014450 <ucdr_serialize_string>
 800eb76:	6863      	ldr	r3, [r4, #4]
 800eb78:	2b05      	cmp	r3, #5
 800eb7a:	d92f      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d03a      	beq.n	800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb80:	69e1      	ldr	r1, [r4, #28]
 800eb82:	4630      	mov	r0, r6
 800eb84:	f005 fc64 	bl	8014450 <ucdr_serialize_string>
 800eb88:	6863      	ldr	r3, [r4, #4]
 800eb8a:	2b06      	cmp	r3, #6
 800eb8c:	d926      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb8e:	b390      	cbz	r0, 800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb90:	6a21      	ldr	r1, [r4, #32]
 800eb92:	4630      	mov	r0, r6
 800eb94:	f005 fc5c 	bl	8014450 <ucdr_serialize_string>
 800eb98:	6863      	ldr	r3, [r4, #4]
 800eb9a:	2b07      	cmp	r3, #7
 800eb9c:	d91e      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb9e:	b350      	cbz	r0, 800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eba0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eba2:	4630      	mov	r0, r6
 800eba4:	f005 fc54 	bl	8014450 <ucdr_serialize_string>
 800eba8:	6863      	ldr	r3, [r4, #4]
 800ebaa:	2b08      	cmp	r3, #8
 800ebac:	d916      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ebae:	b310      	cbz	r0, 800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ebb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f005 fc4c 	bl	8014450 <ucdr_serialize_string>
 800ebb8:	6863      	ldr	r3, [r4, #4]
 800ebba:	2b09      	cmp	r3, #9
 800ebbc:	d90e      	bls.n	800ebdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ebbe:	b1d0      	cbz	r0, 800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ebc0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800ebc4:	2709      	movs	r7, #9
 800ebc6:	e000      	b.n	800ebca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800ebc8:	b1a8      	cbz	r0, 800ebf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ebca:	f858 1b04 	ldr.w	r1, [r8], #4
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f005 fc3e 	bl	8014450 <ucdr_serialize_string>
 800ebd4:	3701      	adds	r7, #1
 800ebd6:	6862      	ldr	r2, [r4, #4]
 800ebd8:	4297      	cmp	r7, r2
 800ebda:	d3f5      	bcc.n	800ebc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800ebdc:	4005      	ands	r5, r0
 800ebde:	b2ed      	uxtb	r5, r5
 800ebe0:	e78a      	b.n	800eaf8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ebe2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ebe4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ebe8:	4630      	mov	r0, r6
 800ebea:	f005 fc05 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800ebee:	4005      	ands	r5, r0
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf6:	2500      	movs	r5, #0
 800ebf8:	e77e      	b.n	800eaf8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ebfa:	4028      	ands	r0, r5
 800ebfc:	b2c5      	uxtb	r5, r0
 800ebfe:	e77b      	b.n	800eaf8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800ec00 <uxr_serialize_OBJK_Publisher_Binary>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	460d      	mov	r5, r1
 800ec04:	7809      	ldrb	r1, [r1, #0]
 800ec06:	4606      	mov	r6, r0
 800ec08:	f7fc fd78 	bl	800b6fc <ucdr_serialize_bool>
 800ec0c:	782b      	ldrb	r3, [r5, #0]
 800ec0e:	4604      	mov	r4, r0
 800ec10:	b94b      	cbnz	r3, 800ec26 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ec12:	7a29      	ldrb	r1, [r5, #8]
 800ec14:	4630      	mov	r0, r6
 800ec16:	f7fc fd71 	bl	800b6fc <ucdr_serialize_bool>
 800ec1a:	7a2b      	ldrb	r3, [r5, #8]
 800ec1c:	4004      	ands	r4, r0
 800ec1e:	b2e4      	uxtb	r4, r4
 800ec20:	b943      	cbnz	r3, 800ec34 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ec22:	4620      	mov	r0, r4
 800ec24:	bd70      	pop	{r4, r5, r6, pc}
 800ec26:	6869      	ldr	r1, [r5, #4]
 800ec28:	4630      	mov	r0, r6
 800ec2a:	f005 fc11 	bl	8014450 <ucdr_serialize_string>
 800ec2e:	4004      	ands	r4, r0
 800ec30:	b2e4      	uxtb	r4, r4
 800ec32:	e7ee      	b.n	800ec12 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ec34:	f105 010c 	add.w	r1, r5, #12
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f7ff ff53 	bl	800eae4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ec3e:	4004      	ands	r4, r0
 800ec40:	4620      	mov	r0, r4
 800ec42:	bd70      	pop	{r4, r5, r6, pc}

0800ec44 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec48:	460c      	mov	r4, r1
 800ec4a:	7809      	ldrb	r1, [r1, #0]
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	f7fc fd55 	bl	800b6fc <ucdr_serialize_bool>
 800ec52:	7823      	ldrb	r3, [r4, #0]
 800ec54:	4605      	mov	r5, r0
 800ec56:	b96b      	cbnz	r3, 800ec74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800ec58:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f7fc fd4d 	bl	800b6fc <ucdr_serialize_bool>
 800ec62:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ec66:	4005      	ands	r5, r0
 800ec68:	b2ed      	uxtb	r5, r5
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d169      	bne.n	800ed42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800ec6e:	4628      	mov	r0, r5
 800ec70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec74:	6861      	ldr	r1, [r4, #4]
 800ec76:	4630      	mov	r0, r6
 800ec78:	f7fc ff84 	bl	800bb84 <ucdr_serialize_uint32_t>
 800ec7c:	6863      	ldr	r3, [r4, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d06b      	beq.n	800ed5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d067      	beq.n	800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec86:	68a1      	ldr	r1, [r4, #8]
 800ec88:	4630      	mov	r0, r6
 800ec8a:	f005 fbe1 	bl	8014450 <ucdr_serialize_string>
 800ec8e:	6863      	ldr	r3, [r4, #4]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d953      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d05e      	beq.n	800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec98:	68e1      	ldr	r1, [r4, #12]
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f005 fbd8 	bl	8014450 <ucdr_serialize_string>
 800eca0:	6863      	ldr	r3, [r4, #4]
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d94a      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d055      	beq.n	800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ecaa:	6921      	ldr	r1, [r4, #16]
 800ecac:	4630      	mov	r0, r6
 800ecae:	f005 fbcf 	bl	8014450 <ucdr_serialize_string>
 800ecb2:	6863      	ldr	r3, [r4, #4]
 800ecb4:	2b03      	cmp	r3, #3
 800ecb6:	d941      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d04c      	beq.n	800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ecbc:	6961      	ldr	r1, [r4, #20]
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f005 fbc6 	bl	8014450 <ucdr_serialize_string>
 800ecc4:	6863      	ldr	r3, [r4, #4]
 800ecc6:	2b04      	cmp	r3, #4
 800ecc8:	d938      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d043      	beq.n	800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ecce:	69a1      	ldr	r1, [r4, #24]
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f005 fbbd 	bl	8014450 <ucdr_serialize_string>
 800ecd6:	6863      	ldr	r3, [r4, #4]
 800ecd8:	2b05      	cmp	r3, #5
 800ecda:	d92f      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d03a      	beq.n	800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ece0:	69e1      	ldr	r1, [r4, #28]
 800ece2:	4630      	mov	r0, r6
 800ece4:	f005 fbb4 	bl	8014450 <ucdr_serialize_string>
 800ece8:	6863      	ldr	r3, [r4, #4]
 800ecea:	2b06      	cmp	r3, #6
 800ecec:	d926      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ecee:	b390      	cbz	r0, 800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ecf0:	6a21      	ldr	r1, [r4, #32]
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f005 fbac 	bl	8014450 <ucdr_serialize_string>
 800ecf8:	6863      	ldr	r3, [r4, #4]
 800ecfa:	2b07      	cmp	r3, #7
 800ecfc:	d91e      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ecfe:	b350      	cbz	r0, 800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ed00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed02:	4630      	mov	r0, r6
 800ed04:	f005 fba4 	bl	8014450 <ucdr_serialize_string>
 800ed08:	6863      	ldr	r3, [r4, #4]
 800ed0a:	2b08      	cmp	r3, #8
 800ed0c:	d916      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ed0e:	b310      	cbz	r0, 800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ed10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ed12:	4630      	mov	r0, r6
 800ed14:	f005 fb9c 	bl	8014450 <ucdr_serialize_string>
 800ed18:	6863      	ldr	r3, [r4, #4]
 800ed1a:	2b09      	cmp	r3, #9
 800ed1c:	d90e      	bls.n	800ed3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ed1e:	b1d0      	cbz	r0, 800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ed20:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800ed24:	2709      	movs	r7, #9
 800ed26:	e000      	b.n	800ed2a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800ed28:	b1a8      	cbz	r0, 800ed56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ed2a:	f858 1b04 	ldr.w	r1, [r8], #4
 800ed2e:	4630      	mov	r0, r6
 800ed30:	f005 fb8e 	bl	8014450 <ucdr_serialize_string>
 800ed34:	3701      	adds	r7, #1
 800ed36:	6862      	ldr	r2, [r4, #4]
 800ed38:	4297      	cmp	r7, r2
 800ed3a:	d3f5      	bcc.n	800ed28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800ed3c:	4005      	ands	r5, r0
 800ed3e:	b2ed      	uxtb	r5, r5
 800ed40:	e78a      	b.n	800ec58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ed42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ed44:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f005 fb55 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800ed4e:	4005      	ands	r5, r0
 800ed50:	4628      	mov	r0, r5
 800ed52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed56:	2500      	movs	r5, #0
 800ed58:	e77e      	b.n	800ec58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ed5a:	4028      	ands	r0, r5
 800ed5c:	b2c5      	uxtb	r5, r0
 800ed5e:	e77b      	b.n	800ec58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800ed60 <uxr_serialize_OBJK_Subscriber_Binary>:
 800ed60:	b570      	push	{r4, r5, r6, lr}
 800ed62:	460d      	mov	r5, r1
 800ed64:	7809      	ldrb	r1, [r1, #0]
 800ed66:	4606      	mov	r6, r0
 800ed68:	f7fc fcc8 	bl	800b6fc <ucdr_serialize_bool>
 800ed6c:	782b      	ldrb	r3, [r5, #0]
 800ed6e:	4604      	mov	r4, r0
 800ed70:	b94b      	cbnz	r3, 800ed86 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800ed72:	7a29      	ldrb	r1, [r5, #8]
 800ed74:	4630      	mov	r0, r6
 800ed76:	f7fc fcc1 	bl	800b6fc <ucdr_serialize_bool>
 800ed7a:	7a2b      	ldrb	r3, [r5, #8]
 800ed7c:	4004      	ands	r4, r0
 800ed7e:	b2e4      	uxtb	r4, r4
 800ed80:	b943      	cbnz	r3, 800ed94 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800ed82:	4620      	mov	r0, r4
 800ed84:	bd70      	pop	{r4, r5, r6, pc}
 800ed86:	6869      	ldr	r1, [r5, #4]
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f005 fb61 	bl	8014450 <ucdr_serialize_string>
 800ed8e:	4004      	ands	r4, r0
 800ed90:	b2e4      	uxtb	r4, r4
 800ed92:	e7ee      	b.n	800ed72 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800ed94:	f105 010c 	add.w	r1, r5, #12
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f7ff ff53 	bl	800ec44 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800ed9e:	4004      	ands	r4, r0
 800eda0:	4620      	mov	r0, r4
 800eda2:	bd70      	pop	{r4, r5, r6, pc}

0800eda4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800eda4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800eda8:	4688      	mov	r8, r1
 800edaa:	4681      	mov	r9, r0
 800edac:	8809      	ldrh	r1, [r1, #0]
 800edae:	f7fc fcff 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800edb2:	4606      	mov	r6, r0
 800edb4:	f898 1002 	ldrb.w	r1, [r8, #2]
 800edb8:	4648      	mov	r0, r9
 800edba:	f7fc fc9f 	bl	800b6fc <ucdr_serialize_bool>
 800edbe:	f898 3002 	ldrb.w	r3, [r8, #2]
 800edc2:	4006      	ands	r6, r0
 800edc4:	b2f5      	uxtb	r5, r6
 800edc6:	b9eb      	cbnz	r3, 800ee04 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800edc8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800edcc:	4648      	mov	r0, r9
 800edce:	f7fc fc95 	bl	800b6fc <ucdr_serialize_bool>
 800edd2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800edd6:	4005      	ands	r5, r0
 800edd8:	bb7b      	cbnz	r3, 800ee3a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800edda:	f898 100c 	ldrb.w	r1, [r8, #12]
 800edde:	4648      	mov	r0, r9
 800ede0:	f7fc fc8c 	bl	800b6fc <ucdr_serialize_bool>
 800ede4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800ede8:	4005      	ands	r5, r0
 800edea:	b9f3      	cbnz	r3, 800ee2a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800edec:	f898 1014 	ldrb.w	r1, [r8, #20]
 800edf0:	4648      	mov	r0, r9
 800edf2:	f7fc fc83 	bl	800b6fc <ucdr_serialize_bool>
 800edf6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800edfa:	4005      	ands	r5, r0
 800edfc:	b94b      	cbnz	r3, 800ee12 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800edfe:	4628      	mov	r0, r5
 800ee00:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ee04:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800ee08:	4648      	mov	r0, r9
 800ee0a:	f7fc fcd1 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800ee0e:	4005      	ands	r5, r0
 800ee10:	e7da      	b.n	800edc8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800ee12:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ee16:	f108 011c 	add.w	r1, r8, #28
 800ee1a:	4648      	mov	r0, r9
 800ee1c:	f005 faec 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800ee20:	4028      	ands	r0, r5
 800ee22:	b2c5      	uxtb	r5, r0
 800ee24:	4628      	mov	r0, r5
 800ee26:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ee2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ee2e:	4648      	mov	r0, r9
 800ee30:	f7fc fea8 	bl	800bb84 <ucdr_serialize_uint32_t>
 800ee34:	4028      	ands	r0, r5
 800ee36:	b2c5      	uxtb	r5, r0
 800ee38:	e7d8      	b.n	800edec <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800ee3a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ee3e:	4648      	mov	r0, r9
 800ee40:	f7fc fea0 	bl	800bb84 <ucdr_serialize_uint32_t>
 800ee44:	4028      	ands	r0, r5
 800ee46:	b2c5      	uxtb	r5, r0
 800ee48:	e7c7      	b.n	800edda <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800ee4a:	bf00      	nop

0800ee4c <uxr_serialize_OBJK_DataReader_Binary>:
 800ee4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4e:	2202      	movs	r2, #2
 800ee50:	460c      	mov	r4, r1
 800ee52:	4606      	mov	r6, r0
 800ee54:	f005 f9d8 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800ee58:	4605      	mov	r5, r0
 800ee5a:	78a1      	ldrb	r1, [r4, #2]
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	f7fc fc4d 	bl	800b6fc <ucdr_serialize_bool>
 800ee62:	78a3      	ldrb	r3, [r4, #2]
 800ee64:	4005      	ands	r5, r0
 800ee66:	b2ed      	uxtb	r5, r5
 800ee68:	b90b      	cbnz	r3, 800ee6e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee6e:	f104 0108 	add.w	r1, r4, #8
 800ee72:	4630      	mov	r0, r6
 800ee74:	f7ff ff96 	bl	800eda4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ee78:	4607      	mov	r7, r0
 800ee7a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f7fc fc3c 	bl	800b6fc <ucdr_serialize_bool>
 800ee84:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ee88:	4038      	ands	r0, r7
 800ee8a:	b2c7      	uxtb	r7, r0
 800ee8c:	b95b      	cbnz	r3, 800eea6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800ee8e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800ee92:	4630      	mov	r0, r6
 800ee94:	f7fc fc32 	bl	800b6fc <ucdr_serialize_bool>
 800ee98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ee9c:	4007      	ands	r7, r0
 800ee9e:	b94b      	cbnz	r3, 800eeb4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800eea0:	403d      	ands	r5, r7
 800eea2:	4628      	mov	r0, r5
 800eea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f7fd f8c0 	bl	800c030 <ucdr_serialize_uint64_t>
 800eeb0:	4007      	ands	r7, r0
 800eeb2:	e7ec      	b.n	800ee8e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800eeb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f005 faca 	bl	8014450 <ucdr_serialize_string>
 800eebc:	4007      	ands	r7, r0
 800eebe:	b2ff      	uxtb	r7, r7
 800eec0:	e7ee      	b.n	800eea0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800eec2:	bf00      	nop

0800eec4 <uxr_serialize_OBJK_DataWriter_Binary>:
 800eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec6:	2202      	movs	r2, #2
 800eec8:	460d      	mov	r5, r1
 800eeca:	4606      	mov	r6, r0
 800eecc:	f005 f99c 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800eed0:	4604      	mov	r4, r0
 800eed2:	78a9      	ldrb	r1, [r5, #2]
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7fc fc11 	bl	800b6fc <ucdr_serialize_bool>
 800eeda:	78ab      	ldrb	r3, [r5, #2]
 800eedc:	4004      	ands	r4, r0
 800eede:	b2e4      	uxtb	r4, r4
 800eee0:	b90b      	cbnz	r3, 800eee6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800eee2:	4620      	mov	r0, r4
 800eee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee6:	f105 0108 	add.w	r1, r5, #8
 800eeea:	4630      	mov	r0, r6
 800eeec:	f7ff ff5a 	bl	800eda4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800eef0:	4607      	mov	r7, r0
 800eef2:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800eef6:	4630      	mov	r0, r6
 800eef8:	f7fc fc00 	bl	800b6fc <ucdr_serialize_bool>
 800eefc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ef00:	4038      	ands	r0, r7
 800ef02:	b2c7      	uxtb	r7, r0
 800ef04:	b913      	cbnz	r3, 800ef0c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ef06:	403c      	ands	r4, r7
 800ef08:	4620      	mov	r0, r4
 800ef0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef0c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800ef10:	4630      	mov	r0, r6
 800ef12:	f7fd f88d 	bl	800c030 <ucdr_serialize_uint64_t>
 800ef16:	4007      	ands	r7, r0
 800ef18:	e7f5      	b.n	800ef06 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ef1a:	bf00      	nop

0800ef1c <uxr_deserialize_ObjectVariant>:
 800ef1c:	b570      	push	{r4, r5, r6, lr}
 800ef1e:	4605      	mov	r5, r0
 800ef20:	460e      	mov	r6, r1
 800ef22:	f7fc fc2f 	bl	800b784 <ucdr_deserialize_uint8_t>
 800ef26:	b168      	cbz	r0, 800ef44 <uxr_deserialize_ObjectVariant+0x28>
 800ef28:	7833      	ldrb	r3, [r6, #0]
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	2b0d      	cmp	r3, #13
 800ef30:	d809      	bhi.n	800ef46 <uxr_deserialize_ObjectVariant+0x2a>
 800ef32:	e8df f003 	tbb	[pc, r3]
 800ef36:	0a41      	.short	0x0a41
 800ef38:	0a0a2323 	.word	0x0a0a2323
 800ef3c:	10080a0a 	.word	0x10080a0a
 800ef40:	565c1010 	.word	0x565c1010
 800ef44:	2400      	movs	r4, #0
 800ef46:	4620      	mov	r0, r4
 800ef48:	bd70      	pop	{r4, r5, r6, pc}
 800ef4a:	1d31      	adds	r1, r6, #4
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef52:	f7ff bd55 	b.w	800ea00 <uxr_deserialize_DATAWRITER_Representation>
 800ef56:	1d31      	adds	r1, r6, #4
 800ef58:	4628      	mov	r0, r5
 800ef5a:	f7fc fc13 	bl	800b784 <ucdr_deserialize_uint8_t>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d0f0      	beq.n	800ef44 <uxr_deserialize_ObjectVariant+0x28>
 800ef62:	7933      	ldrb	r3, [r6, #4]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d001      	beq.n	800ef6c <uxr_deserialize_ObjectVariant+0x50>
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d1ec      	bne.n	800ef46 <uxr_deserialize_ObjectVariant+0x2a>
 800ef6c:	68b1      	ldr	r1, [r6, #8]
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef78:	f005 ba7a 	b.w	8014470 <ucdr_deserialize_string>
 800ef7c:	1d31      	adds	r1, r6, #4
 800ef7e:	4628      	mov	r0, r5
 800ef80:	f7fc fc00 	bl	800b784 <ucdr_deserialize_uint8_t>
 800ef84:	4604      	mov	r4, r0
 800ef86:	b170      	cbz	r0, 800efa6 <uxr_deserialize_ObjectVariant+0x8a>
 800ef88:	7933      	ldrb	r3, [r6, #4]
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d04c      	beq.n	800f028 <uxr_deserialize_ObjectVariant+0x10c>
 800ef8e:	2b03      	cmp	r3, #3
 800ef90:	d109      	bne.n	800efa6 <uxr_deserialize_ObjectVariant+0x8a>
 800ef92:	f106 0308 	add.w	r3, r6, #8
 800ef96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef9a:	f106 010c 	add.w	r1, r6, #12
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f005 fa3c 	bl	801441c <ucdr_deserialize_sequence_uint8_t>
 800efa4:	4604      	mov	r4, r0
 800efa6:	2202      	movs	r2, #2
 800efa8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800efac:	4628      	mov	r0, r5
 800efae:	f005 f98f 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800efb2:	4020      	ands	r0, r4
 800efb4:	b2c4      	uxtb	r4, r0
 800efb6:	e7c6      	b.n	800ef46 <uxr_deserialize_ObjectVariant+0x2a>
 800efb8:	1d31      	adds	r1, r6, #4
 800efba:	4628      	mov	r0, r5
 800efbc:	f7fc fbe2 	bl	800b784 <ucdr_deserialize_uint8_t>
 800efc0:	4604      	mov	r4, r0
 800efc2:	b130      	cbz	r0, 800efd2 <uxr_deserialize_ObjectVariant+0xb6>
 800efc4:	7933      	ldrb	r3, [r6, #4]
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d036      	beq.n	800f038 <uxr_deserialize_ObjectVariant+0x11c>
 800efca:	2b03      	cmp	r3, #3
 800efcc:	d03c      	beq.n	800f048 <uxr_deserialize_ObjectVariant+0x12c>
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d032      	beq.n	800f038 <uxr_deserialize_ObjectVariant+0x11c>
 800efd2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800efd6:	4628      	mov	r0, r5
 800efd8:	f7fd f97a 	bl	800c2d0 <ucdr_deserialize_int16_t>
 800efdc:	4020      	ands	r0, r4
 800efde:	b2c4      	uxtb	r4, r0
 800efe0:	e7b1      	b.n	800ef46 <uxr_deserialize_ObjectVariant+0x2a>
 800efe2:	1d31      	adds	r1, r6, #4
 800efe4:	4628      	mov	r0, r5
 800efe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efea:	f7ff bbbf 	b.w	800e76c <uxr_deserialize_CLIENT_Representation>
 800efee:	2204      	movs	r2, #4
 800eff0:	4628      	mov	r0, r5
 800eff2:	18b1      	adds	r1, r6, r2
 800eff4:	f005 f96c 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800eff8:	4604      	mov	r4, r0
 800effa:	2202      	movs	r2, #2
 800effc:	f106 0108 	add.w	r1, r6, #8
 800f000:	4628      	mov	r0, r5
 800f002:	f005 f965 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f006:	4004      	ands	r4, r0
 800f008:	2202      	movs	r2, #2
 800f00a:	f106 010a 	add.w	r1, r6, #10
 800f00e:	4628      	mov	r0, r5
 800f010:	b2e4      	uxtb	r4, r4
 800f012:	f005 f95d 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f016:	4603      	mov	r3, r0
 800f018:	f106 010c 	add.w	r1, r6, #12
 800f01c:	4628      	mov	r0, r5
 800f01e:	401c      	ands	r4, r3
 800f020:	f7fc fb82 	bl	800b728 <ucdr_deserialize_bool>
 800f024:	4004      	ands	r4, r0
 800f026:	e78e      	b.n	800ef46 <uxr_deserialize_ObjectVariant+0x2a>
 800f028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f02c:	68b1      	ldr	r1, [r6, #8]
 800f02e:	4628      	mov	r0, r5
 800f030:	f005 fa1e 	bl	8014470 <ucdr_deserialize_string>
 800f034:	4604      	mov	r4, r0
 800f036:	e7b6      	b.n	800efa6 <uxr_deserialize_ObjectVariant+0x8a>
 800f038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f03c:	68b1      	ldr	r1, [r6, #8]
 800f03e:	4628      	mov	r0, r5
 800f040:	f005 fa16 	bl	8014470 <ucdr_deserialize_string>
 800f044:	4604      	mov	r4, r0
 800f046:	e7c4      	b.n	800efd2 <uxr_deserialize_ObjectVariant+0xb6>
 800f048:	f106 0308 	add.w	r3, r6, #8
 800f04c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f050:	f106 010c 	add.w	r1, r6, #12
 800f054:	4628      	mov	r0, r5
 800f056:	f005 f9e1 	bl	801441c <ucdr_deserialize_sequence_uint8_t>
 800f05a:	4604      	mov	r4, r0
 800f05c:	e7b9      	b.n	800efd2 <uxr_deserialize_ObjectVariant+0xb6>
 800f05e:	bf00      	nop

0800f060 <uxr_deserialize_BaseObjectRequest>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	2202      	movs	r2, #2
 800f064:	4605      	mov	r5, r0
 800f066:	460e      	mov	r6, r1
 800f068:	f005 f932 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f06c:	2202      	movs	r2, #2
 800f06e:	4604      	mov	r4, r0
 800f070:	4628      	mov	r0, r5
 800f072:	18b1      	adds	r1, r6, r2
 800f074:	f005 f92c 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f078:	4020      	ands	r0, r4
 800f07a:	b2c0      	uxtb	r0, r0
 800f07c:	bd70      	pop	{r4, r5, r6, pc}
 800f07e:	bf00      	nop

0800f080 <uxr_serialize_ActivityInfoVariant>:
 800f080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f084:	460e      	mov	r6, r1
 800f086:	7809      	ldrb	r1, [r1, #0]
 800f088:	4680      	mov	r8, r0
 800f08a:	f7fc fb65 	bl	800b758 <ucdr_serialize_uint8_t>
 800f08e:	4607      	mov	r7, r0
 800f090:	b138      	cbz	r0, 800f0a2 <uxr_serialize_ActivityInfoVariant+0x22>
 800f092:	7833      	ldrb	r3, [r6, #0]
 800f094:	2b06      	cmp	r3, #6
 800f096:	f000 8081 	beq.w	800f19c <uxr_serialize_ActivityInfoVariant+0x11c>
 800f09a:	2b0d      	cmp	r3, #13
 800f09c:	d014      	beq.n	800f0c8 <uxr_serialize_ActivityInfoVariant+0x48>
 800f09e:	2b05      	cmp	r3, #5
 800f0a0:	d002      	beq.n	800f0a8 <uxr_serialize_ActivityInfoVariant+0x28>
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800f0ac:	4640      	mov	r0, r8
 800f0ae:	f7fd f88f 	bl	800c1d0 <ucdr_serialize_int16_t>
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800f0ba:	f7fc ffb9 	bl	800c030 <ucdr_serialize_uint64_t>
 800f0be:	4038      	ands	r0, r7
 800f0c0:	b2c7      	uxtb	r7, r0
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800f0cc:	4640      	mov	r0, r8
 800f0ce:	f7fd f87f 	bl	800c1d0 <ucdr_serialize_int16_t>
 800f0d2:	68f1      	ldr	r1, [r6, #12]
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	f7fc fd54 	bl	800bb84 <ucdr_serialize_uint32_t>
 800f0dc:	68f3      	ldr	r3, [r6, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d0ed      	beq.n	800f0be <uxr_serialize_ActivityInfoVariant+0x3e>
 800f0e2:	b318      	cbz	r0, 800f12c <uxr_serialize_ActivityInfoVariant+0xac>
 800f0e4:	f106 090c 	add.w	r9, r6, #12
 800f0e8:	2400      	movs	r4, #0
 800f0ea:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f0ee:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800f0f2:	7c29      	ldrb	r1, [r5, #16]
 800f0f4:	4640      	mov	r0, r8
 800f0f6:	f7fc fb2f 	bl	800b758 <ucdr_serialize_uint8_t>
 800f0fa:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800f0fe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f102:	2800      	cmp	r0, #0
 800f104:	d051      	beq.n	800f1aa <uxr_serialize_ActivityInfoVariant+0x12a>
 800f106:	7c2b      	ldrb	r3, [r5, #16]
 800f108:	00c9      	lsls	r1, r1, #3
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d854      	bhi.n	800f1b8 <uxr_serialize_ActivityInfoVariant+0x138>
 800f10e:	e8df f003 	tbb	[pc, r3]
 800f112:	2133      	.short	0x2133
 800f114:	020f      	.short	0x020f
 800f116:	4449      	add	r1, r9
 800f118:	4640      	mov	r0, r8
 800f11a:	6889      	ldr	r1, [r1, #8]
 800f11c:	f005 f998 	bl	8014450 <ucdr_serialize_string>
 800f120:	3401      	adds	r4, #1
 800f122:	68f2      	ldr	r2, [r6, #12]
 800f124:	4294      	cmp	r4, r2
 800f126:	d244      	bcs.n	800f1b2 <uxr_serialize_ActivityInfoVariant+0x132>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1de      	bne.n	800f0ea <uxr_serialize_ActivityInfoVariant+0x6a>
 800f12c:	2700      	movs	r7, #0
 800f12e:	e7b8      	b.n	800f0a2 <uxr_serialize_ActivityInfoVariant+0x22>
 800f130:	3108      	adds	r1, #8
 800f132:	44a2      	add	sl, r4
 800f134:	2210      	movs	r2, #16
 800f136:	4640      	mov	r0, r8
 800f138:	4449      	add	r1, r9
 800f13a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800f13e:	f005 f863 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f142:	4605      	mov	r5, r0
 800f144:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 800f148:	4640      	mov	r0, r8
 800f14a:	f7fc fd1b 	bl	800bb84 <ucdr_serialize_uint32_t>
 800f14e:	4028      	ands	r0, r5
 800f150:	b2c0      	uxtb	r0, r0
 800f152:	e7e5      	b.n	800f120 <uxr_serialize_ActivityInfoVariant+0xa0>
 800f154:	3108      	adds	r1, #8
 800f156:	44a2      	add	sl, r4
 800f158:	2204      	movs	r2, #4
 800f15a:	4640      	mov	r0, r8
 800f15c:	4449      	add	r1, r9
 800f15e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800f162:	f005 f851 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f166:	4605      	mov	r5, r0
 800f168:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 800f16c:	4640      	mov	r0, r8
 800f16e:	f7fc fb1f 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f172:	4028      	ands	r0, r5
 800f174:	b2c0      	uxtb	r0, r0
 800f176:	e7d3      	b.n	800f120 <uxr_serialize_ActivityInfoVariant+0xa0>
 800f178:	3108      	adds	r1, #8
 800f17a:	44a2      	add	sl, r4
 800f17c:	2202      	movs	r2, #2
 800f17e:	4640      	mov	r0, r8
 800f180:	4449      	add	r1, r9
 800f182:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800f186:	f005 f83f 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f18a:	4605      	mov	r5, r0
 800f18c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 800f190:	4640      	mov	r0, r8
 800f192:	f7fc fae1 	bl	800b758 <ucdr_serialize_uint8_t>
 800f196:	4028      	ands	r0, r5
 800f198:	b2c0      	uxtb	r0, r0
 800f19a:	e7c1      	b.n	800f120 <uxr_serialize_ActivityInfoVariant+0xa0>
 800f19c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a6:	f7fd b813 	b.w	800c1d0 <ucdr_serialize_int16_t>
 800f1aa:	3401      	adds	r4, #1
 800f1ac:	68f2      	ldr	r2, [r6, #12]
 800f1ae:	42a2      	cmp	r2, r4
 800f1b0:	d8bc      	bhi.n	800f12c <uxr_serialize_ActivityInfoVariant+0xac>
 800f1b2:	4007      	ands	r7, r0
 800f1b4:	b2ff      	uxtb	r7, r7
 800f1b6:	e774      	b.n	800f0a2 <uxr_serialize_ActivityInfoVariant+0x22>
 800f1b8:	3401      	adds	r4, #1
 800f1ba:	68f3      	ldr	r3, [r6, #12]
 800f1bc:	3518      	adds	r5, #24
 800f1be:	429c      	cmp	r4, r3
 800f1c0:	d397      	bcc.n	800f0f2 <uxr_serialize_ActivityInfoVariant+0x72>
 800f1c2:	e76e      	b.n	800f0a2 <uxr_serialize_ActivityInfoVariant+0x22>

0800f1c4 <uxr_deserialize_BaseObjectReply>:
 800f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c8:	2202      	movs	r2, #2
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	460f      	mov	r7, r1
 800f1ce:	f005 f87f 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	18b9      	adds	r1, r7, r2
 800f1da:	f005 f879 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f1de:	4680      	mov	r8, r0
 800f1e0:	1d39      	adds	r1, r7, #4
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f7fc face 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f1e8:	ea05 0508 	and.w	r5, r5, r8
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	1d79      	adds	r1, r7, #5
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	402c      	ands	r4, r5
 800f1f4:	f7fc fac6 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f1f8:	4020      	ands	r0, r4
 800f1fa:	b2c0      	uxtb	r0, r0
 800f1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f200 <uxr_serialize_ReadSpecification>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	460e      	mov	r6, r1
 800f204:	4607      	mov	r7, r0
 800f206:	7809      	ldrb	r1, [r1, #0]
 800f208:	f7fc faa6 	bl	800b758 <ucdr_serialize_uint8_t>
 800f20c:	4604      	mov	r4, r0
 800f20e:	7871      	ldrb	r1, [r6, #1]
 800f210:	4638      	mov	r0, r7
 800f212:	f7fc faa1 	bl	800b758 <ucdr_serialize_uint8_t>
 800f216:	4004      	ands	r4, r0
 800f218:	78b1      	ldrb	r1, [r6, #2]
 800f21a:	4638      	mov	r0, r7
 800f21c:	f7fc fa6e 	bl	800b6fc <ucdr_serialize_bool>
 800f220:	78b3      	ldrb	r3, [r6, #2]
 800f222:	b2e4      	uxtb	r4, r4
 800f224:	4004      	ands	r4, r0
 800f226:	b943      	cbnz	r3, 800f23a <uxr_serialize_ReadSpecification+0x3a>
 800f228:	7a31      	ldrb	r1, [r6, #8]
 800f22a:	4638      	mov	r0, r7
 800f22c:	f7fc fa66 	bl	800b6fc <ucdr_serialize_bool>
 800f230:	7a33      	ldrb	r3, [r6, #8]
 800f232:	4004      	ands	r4, r0
 800f234:	b93b      	cbnz	r3, 800f246 <uxr_serialize_ReadSpecification+0x46>
 800f236:	4620      	mov	r0, r4
 800f238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23a:	6871      	ldr	r1, [r6, #4]
 800f23c:	4638      	mov	r0, r7
 800f23e:	f005 f907 	bl	8014450 <ucdr_serialize_string>
 800f242:	4004      	ands	r4, r0
 800f244:	e7f0      	b.n	800f228 <uxr_serialize_ReadSpecification+0x28>
 800f246:	8971      	ldrh	r1, [r6, #10]
 800f248:	4638      	mov	r0, r7
 800f24a:	f7fc fab1 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f24e:	4605      	mov	r5, r0
 800f250:	89b1      	ldrh	r1, [r6, #12]
 800f252:	4638      	mov	r0, r7
 800f254:	f7fc faac 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f258:	4005      	ands	r5, r0
 800f25a:	89f1      	ldrh	r1, [r6, #14]
 800f25c:	4638      	mov	r0, r7
 800f25e:	b2ed      	uxtb	r5, r5
 800f260:	f7fc faa6 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f264:	8a31      	ldrh	r1, [r6, #16]
 800f266:	4025      	ands	r5, r4
 800f268:	4604      	mov	r4, r0
 800f26a:	4638      	mov	r0, r7
 800f26c:	4025      	ands	r5, r4
 800f26e:	f7fc fa9f 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f272:	ea00 0405 	and.w	r4, r0, r5
 800f276:	4620      	mov	r0, r4
 800f278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27a:	bf00      	nop

0800f27c <uxr_serialize_CREATE_CLIENT_Payload>:
 800f27c:	f7ff ba1e 	b.w	800e6bc <uxr_serialize_CLIENT_Representation>

0800f280 <uxr_serialize_CREATE_Payload>:
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f282:	2202      	movs	r2, #2
 800f284:	4607      	mov	r7, r0
 800f286:	460e      	mov	r6, r1
 800f288:	f004 ffbe 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f28c:	2202      	movs	r2, #2
 800f28e:	4605      	mov	r5, r0
 800f290:	4638      	mov	r0, r7
 800f292:	18b1      	adds	r1, r6, r2
 800f294:	f004 ffb8 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f298:	7931      	ldrb	r1, [r6, #4]
 800f29a:	4604      	mov	r4, r0
 800f29c:	4638      	mov	r0, r7
 800f29e:	f7fc fa5b 	bl	800b758 <ucdr_serialize_uint8_t>
 800f2a2:	b170      	cbz	r0, 800f2c2 <uxr_serialize_CREATE_Payload+0x42>
 800f2a4:	7933      	ldrb	r3, [r6, #4]
 800f2a6:	402c      	ands	r4, r5
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	b2e4      	uxtb	r4, r4
 800f2ac:	2b0d      	cmp	r3, #13
 800f2ae:	d809      	bhi.n	800f2c4 <uxr_serialize_CREATE_Payload+0x44>
 800f2b0:	e8df f003 	tbb	[pc, r3]
 800f2b4:	23230a4c 	.word	0x23230a4c
 800f2b8:	0a0a0a0a 	.word	0x0a0a0a0a
 800f2bc:	12121208 	.word	0x12121208
 800f2c0:	3e45      	.short	0x3e45
 800f2c2:	2400      	movs	r4, #0
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2c8:	f106 0108 	add.w	r1, r6, #8
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	f7ff fafb 	bl	800e8c8 <uxr_serialize_DATAWRITER_Representation>
 800f2d2:	4004      	ands	r4, r0
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d8:	7a31      	ldrb	r1, [r6, #8]
 800f2da:	4638      	mov	r0, r7
 800f2dc:	f7fc fa3c 	bl	800b758 <ucdr_serialize_uint8_t>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d0ee      	beq.n	800f2c2 <uxr_serialize_CREATE_Payload+0x42>
 800f2e4:	7a33      	ldrb	r3, [r6, #8]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d001      	beq.n	800f2ee <uxr_serialize_CREATE_Payload+0x6e>
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d1ea      	bne.n	800f2c4 <uxr_serialize_CREATE_Payload+0x44>
 800f2ee:	68f1      	ldr	r1, [r6, #12]
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	f005 f8ad 	bl	8014450 <ucdr_serialize_string>
 800f2f6:	4004      	ands	r4, r0
 800f2f8:	e7e4      	b.n	800f2c4 <uxr_serialize_CREATE_Payload+0x44>
 800f2fa:	7a31      	ldrb	r1, [r6, #8]
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f7fc fa2b 	bl	800b758 <ucdr_serialize_uint8_t>
 800f302:	4605      	mov	r5, r0
 800f304:	b158      	cbz	r0, 800f31e <uxr_serialize_CREATE_Payload+0x9e>
 800f306:	7a33      	ldrb	r3, [r6, #8]
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d034      	beq.n	800f376 <uxr_serialize_CREATE_Payload+0xf6>
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d106      	bne.n	800f31e <uxr_serialize_CREATE_Payload+0x9e>
 800f310:	68f2      	ldr	r2, [r6, #12]
 800f312:	f106 0110 	add.w	r1, r6, #16
 800f316:	4638      	mov	r0, r7
 800f318:	f005 f86e 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800f31c:	4605      	mov	r5, r0
 800f31e:	2202      	movs	r2, #2
 800f320:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800f324:	4638      	mov	r0, r7
 800f326:	f004 ff6f 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f32a:	4028      	ands	r0, r5
 800f32c:	4004      	ands	r4, r0
 800f32e:	e7c9      	b.n	800f2c4 <uxr_serialize_CREATE_Payload+0x44>
 800f330:	f106 0108 	add.w	r1, r6, #8
 800f334:	4638      	mov	r0, r7
 800f336:	f7ff f9c1 	bl	800e6bc <uxr_serialize_CLIENT_Representation>
 800f33a:	4004      	ands	r4, r0
 800f33c:	e7c2      	b.n	800f2c4 <uxr_serialize_CREATE_Payload+0x44>
 800f33e:	f106 0108 	add.w	r1, r6, #8
 800f342:	4638      	mov	r0, r7
 800f344:	f7ff fa76 	bl	800e834 <uxr_serialize_AGENT_Representation>
 800f348:	4004      	ands	r4, r0
 800f34a:	e7bb      	b.n	800f2c4 <uxr_serialize_CREATE_Payload+0x44>
 800f34c:	7a31      	ldrb	r1, [r6, #8]
 800f34e:	4638      	mov	r0, r7
 800f350:	f7fc fa02 	bl	800b758 <ucdr_serialize_uint8_t>
 800f354:	4605      	mov	r5, r0
 800f356:	b130      	cbz	r0, 800f366 <uxr_serialize_CREATE_Payload+0xe6>
 800f358:	7a33      	ldrb	r3, [r6, #8]
 800f35a:	2b02      	cmp	r3, #2
 800f35c:	d011      	beq.n	800f382 <uxr_serialize_CREATE_Payload+0x102>
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d015      	beq.n	800f38e <uxr_serialize_CREATE_Payload+0x10e>
 800f362:	2b01      	cmp	r3, #1
 800f364:	d00d      	beq.n	800f382 <uxr_serialize_CREATE_Payload+0x102>
 800f366:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800f36a:	4638      	mov	r0, r7
 800f36c:	f7fc ff30 	bl	800c1d0 <ucdr_serialize_int16_t>
 800f370:	4028      	ands	r0, r5
 800f372:	4004      	ands	r4, r0
 800f374:	e7a6      	b.n	800f2c4 <uxr_serialize_CREATE_Payload+0x44>
 800f376:	68f1      	ldr	r1, [r6, #12]
 800f378:	4638      	mov	r0, r7
 800f37a:	f005 f869 	bl	8014450 <ucdr_serialize_string>
 800f37e:	4605      	mov	r5, r0
 800f380:	e7cd      	b.n	800f31e <uxr_serialize_CREATE_Payload+0x9e>
 800f382:	68f1      	ldr	r1, [r6, #12]
 800f384:	4638      	mov	r0, r7
 800f386:	f005 f863 	bl	8014450 <ucdr_serialize_string>
 800f38a:	4605      	mov	r5, r0
 800f38c:	e7eb      	b.n	800f366 <uxr_serialize_CREATE_Payload+0xe6>
 800f38e:	68f2      	ldr	r2, [r6, #12]
 800f390:	f106 0110 	add.w	r1, r6, #16
 800f394:	4638      	mov	r0, r7
 800f396:	f005 f82f 	bl	80143f8 <ucdr_serialize_sequence_uint8_t>
 800f39a:	4605      	mov	r5, r0
 800f39c:	e7e3      	b.n	800f366 <uxr_serialize_CREATE_Payload+0xe6>
 800f39e:	bf00      	nop

0800f3a0 <uxr_deserialize_GET_INFO_Payload>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	2202      	movs	r2, #2
 800f3a4:	4605      	mov	r5, r0
 800f3a6:	460e      	mov	r6, r1
 800f3a8:	f004 ff92 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f3ac:	2202      	movs	r2, #2
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	18b1      	adds	r1, r6, r2
 800f3b4:	f004 ff8c 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	1d31      	adds	r1, r6, #4
 800f3bc:	4628      	mov	r0, r5
 800f3be:	401c      	ands	r4, r3
 800f3c0:	f7fc fd10 	bl	800bde4 <ucdr_deserialize_uint32_t>
 800f3c4:	b2e4      	uxtb	r4, r4
 800f3c6:	4020      	ands	r0, r4
 800f3c8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ca:	bf00      	nop

0800f3cc <uxr_serialize_DELETE_Payload>:
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	2202      	movs	r2, #2
 800f3d0:	4605      	mov	r5, r0
 800f3d2:	460e      	mov	r6, r1
 800f3d4:	f004 ff18 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f3d8:	2202      	movs	r2, #2
 800f3da:	4604      	mov	r4, r0
 800f3dc:	4628      	mov	r0, r5
 800f3de:	18b1      	adds	r1, r6, r2
 800f3e0:	f004 ff12 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f3e4:	4020      	ands	r0, r4
 800f3e6:	b2c0      	uxtb	r0, r0
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ea:	bf00      	nop

0800f3ec <uxr_deserialize_STATUS_AGENT_Payload>:
 800f3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3f0:	460e      	mov	r6, r1
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	f7fc f9c6 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	1c71      	adds	r1, r6, #1
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f7fc f9c1 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f402:	2204      	movs	r2, #4
 800f404:	4681      	mov	r9, r0
 800f406:	4628      	mov	r0, r5
 800f408:	18b1      	adds	r1, r6, r2
 800f40a:	f004 ff61 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f40e:	f106 0108 	add.w	r1, r6, #8
 800f412:	4680      	mov	r8, r0
 800f414:	2202      	movs	r2, #2
 800f416:	4628      	mov	r0, r5
 800f418:	f004 ff5a 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f41c:	ea04 0309 	and.w	r3, r4, r9
 800f420:	4607      	mov	r7, r0
 800f422:	2202      	movs	r2, #2
 800f424:	b2db      	uxtb	r3, r3
 800f426:	f106 010a 	add.w	r1, r6, #10
 800f42a:	4628      	mov	r0, r5
 800f42c:	ea03 0408 	and.w	r4, r3, r8
 800f430:	f004 ff4e 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f434:	4603      	mov	r3, r0
 800f436:	4628      	mov	r0, r5
 800f438:	403c      	ands	r4, r7
 800f43a:	f106 010c 	add.w	r1, r6, #12
 800f43e:	461d      	mov	r5, r3
 800f440:	f7fc f972 	bl	800b728 <ucdr_deserialize_bool>
 800f444:	4025      	ands	r5, r4
 800f446:	4028      	ands	r0, r5
 800f448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f44c <uxr_deserialize_STATUS_Payload>:
 800f44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f450:	2202      	movs	r2, #2
 800f452:	4606      	mov	r6, r0
 800f454:	460f      	mov	r7, r1
 800f456:	f004 ff3b 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f45a:	2202      	movs	r2, #2
 800f45c:	4605      	mov	r5, r0
 800f45e:	4630      	mov	r0, r6
 800f460:	18b9      	adds	r1, r7, r2
 800f462:	f004 ff35 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f466:	4680      	mov	r8, r0
 800f468:	1d39      	adds	r1, r7, #4
 800f46a:	4630      	mov	r0, r6
 800f46c:	f7fc f98a 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f470:	ea05 0508 	and.w	r5, r5, r8
 800f474:	4604      	mov	r4, r0
 800f476:	1d79      	adds	r1, r7, #5
 800f478:	4630      	mov	r0, r6
 800f47a:	402c      	ands	r4, r5
 800f47c:	f7fc f982 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f480:	4020      	ands	r0, r4
 800f482:	b2c0      	uxtb	r0, r0
 800f484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f488 <uxr_serialize_INFO_Payload>:
 800f488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48c:	2202      	movs	r2, #2
 800f48e:	460c      	mov	r4, r1
 800f490:	4605      	mov	r5, r0
 800f492:	f004 feb9 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f496:	2202      	movs	r2, #2
 800f498:	4680      	mov	r8, r0
 800f49a:	4628      	mov	r0, r5
 800f49c:	18a1      	adds	r1, r4, r2
 800f49e:	f004 feb3 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f4a2:	4607      	mov	r7, r0
 800f4a4:	7921      	ldrb	r1, [r4, #4]
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f7fc f956 	bl	800b758 <ucdr_serialize_uint8_t>
 800f4ac:	ea08 0807 	and.w	r8, r8, r7
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	7961      	ldrb	r1, [r4, #5]
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	ea06 0608 	and.w	r6, r6, r8
 800f4ba:	f7fc f94d 	bl	800b758 <ucdr_serialize_uint8_t>
 800f4be:	7a21      	ldrb	r1, [r4, #8]
 800f4c0:	4030      	ands	r0, r6
 800f4c2:	b2c7      	uxtb	r7, r0
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f7fc f919 	bl	800b6fc <ucdr_serialize_bool>
 800f4ca:	7a23      	ldrb	r3, [r4, #8]
 800f4cc:	4606      	mov	r6, r0
 800f4ce:	b96b      	cbnz	r3, 800f4ec <uxr_serialize_INFO_Payload+0x64>
 800f4d0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f7fc f911 	bl	800b6fc <ucdr_serialize_bool>
 800f4da:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800f4de:	4030      	ands	r0, r6
 800f4e0:	b2c6      	uxtb	r6, r0
 800f4e2:	b983      	cbnz	r3, 800f506 <uxr_serialize_INFO_Payload+0x7e>
 800f4e4:	ea06 0007 	and.w	r0, r6, r7
 800f4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ec:	7b21      	ldrb	r1, [r4, #12]
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	f7fc f932 	bl	800b758 <ucdr_serialize_uint8_t>
 800f4f4:	b188      	cbz	r0, 800f51a <uxr_serialize_INFO_Payload+0x92>
 800f4f6:	f104 010c 	add.w	r1, r4, #12
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f7ff fa0c 	bl	800e918 <uxr_serialize_ObjectVariant.part.0>
 800f500:	4030      	ands	r0, r6
 800f502:	b2c6      	uxtb	r6, r0
 800f504:	e7e4      	b.n	800f4d0 <uxr_serialize_INFO_Payload+0x48>
 800f506:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7ff fdb8 	bl	800f080 <uxr_serialize_ActivityInfoVariant>
 800f510:	4006      	ands	r6, r0
 800f512:	ea06 0007 	and.w	r0, r6, r7
 800f516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f51a:	4606      	mov	r6, r0
 800f51c:	e7d8      	b.n	800f4d0 <uxr_serialize_INFO_Payload+0x48>
 800f51e:	bf00      	nop

0800f520 <uxr_serialize_READ_DATA_Payload>:
 800f520:	b570      	push	{r4, r5, r6, lr}
 800f522:	2202      	movs	r2, #2
 800f524:	4605      	mov	r5, r0
 800f526:	460e      	mov	r6, r1
 800f528:	f004 fe6e 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f52c:	2202      	movs	r2, #2
 800f52e:	4604      	mov	r4, r0
 800f530:	4628      	mov	r0, r5
 800f532:	18b1      	adds	r1, r6, r2
 800f534:	f004 fe68 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f538:	4603      	mov	r3, r0
 800f53a:	1d31      	adds	r1, r6, #4
 800f53c:	4628      	mov	r0, r5
 800f53e:	401c      	ands	r4, r3
 800f540:	f7ff fe5e 	bl	800f200 <uxr_serialize_ReadSpecification>
 800f544:	b2e4      	uxtb	r4, r4
 800f546:	4020      	ands	r0, r4
 800f548:	bd70      	pop	{r4, r5, r6, pc}
 800f54a:	bf00      	nop

0800f54c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f54c:	b570      	push	{r4, r5, r6, lr}
 800f54e:	2202      	movs	r2, #2
 800f550:	4605      	mov	r5, r0
 800f552:	460e      	mov	r6, r1
 800f554:	f004 fe58 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f558:	2202      	movs	r2, #2
 800f55a:	4604      	mov	r4, r0
 800f55c:	4628      	mov	r0, r5
 800f55e:	18b1      	adds	r1, r6, r2
 800f560:	f004 fe52 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f564:	4020      	ands	r0, r4
 800f566:	b2c0      	uxtb	r0, r0
 800f568:	bd70      	pop	{r4, r5, r6, pc}
 800f56a:	bf00      	nop

0800f56c <uxr_serialize_ACKNACK_Payload>:
 800f56c:	b570      	push	{r4, r5, r6, lr}
 800f56e:	460c      	mov	r4, r1
 800f570:	4605      	mov	r5, r0
 800f572:	460e      	mov	r6, r1
 800f574:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f578:	f7fc f91a 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f57c:	2202      	movs	r2, #2
 800f57e:	4621      	mov	r1, r4
 800f580:	4604      	mov	r4, r0
 800f582:	4628      	mov	r0, r5
 800f584:	f004 fe40 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f588:	4603      	mov	r3, r0
 800f58a:	7931      	ldrb	r1, [r6, #4]
 800f58c:	4628      	mov	r0, r5
 800f58e:	401c      	ands	r4, r3
 800f590:	f7fc f8e2 	bl	800b758 <ucdr_serialize_uint8_t>
 800f594:	b2e4      	uxtb	r4, r4
 800f596:	4020      	ands	r0, r4
 800f598:	bd70      	pop	{r4, r5, r6, pc}
 800f59a:	bf00      	nop

0800f59c <uxr_deserialize_ACKNACK_Payload>:
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	460e      	mov	r6, r1
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	f7fc fa05 	bl	800b9b0 <ucdr_deserialize_uint16_t>
 800f5a6:	2202      	movs	r2, #2
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	18b1      	adds	r1, r6, r2
 800f5ae:	f004 fe8f 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	1d31      	adds	r1, r6, #4
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	401c      	ands	r4, r3
 800f5ba:	f7fc f8e3 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f5be:	b2e4      	uxtb	r4, r4
 800f5c0:	4020      	ands	r0, r4
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}

0800f5c4 <uxr_serialize_HEARTBEAT_Payload>:
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	460d      	mov	r5, r1
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	8809      	ldrh	r1, [r1, #0]
 800f5cc:	f7fc f8f0 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f5d0:	8869      	ldrh	r1, [r5, #2]
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	f7fc f8eb 	bl	800b7b0 <ucdr_serialize_uint16_t>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	7929      	ldrb	r1, [r5, #4]
 800f5de:	4630      	mov	r0, r6
 800f5e0:	401c      	ands	r4, r3
 800f5e2:	f7fc f8b9 	bl	800b758 <ucdr_serialize_uint8_t>
 800f5e6:	b2e4      	uxtb	r4, r4
 800f5e8:	4020      	ands	r0, r4
 800f5ea:	bd70      	pop	{r4, r5, r6, pc}

0800f5ec <uxr_deserialize_HEARTBEAT_Payload>:
 800f5ec:	b570      	push	{r4, r5, r6, lr}
 800f5ee:	460e      	mov	r6, r1
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	f7fc f9dd 	bl	800b9b0 <ucdr_deserialize_uint16_t>
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	1cb1      	adds	r1, r6, #2
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7fc f9d8 	bl	800b9b0 <ucdr_deserialize_uint16_t>
 800f600:	4603      	mov	r3, r0
 800f602:	1d31      	adds	r1, r6, #4
 800f604:	4628      	mov	r0, r5
 800f606:	401c      	ands	r4, r3
 800f608:	f7fc f8bc 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f60c:	b2e4      	uxtb	r4, r4
 800f60e:	4020      	ands	r0, r4
 800f610:	bd70      	pop	{r4, r5, r6, pc}
 800f612:	bf00      	nop

0800f614 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f618:	460e      	mov	r6, r1
 800f61a:	4605      	mov	r5, r0
 800f61c:	f7fc ff64 	bl	800c4e8 <ucdr_deserialize_int32_t>
 800f620:	4607      	mov	r7, r0
 800f622:	1d31      	adds	r1, r6, #4
 800f624:	4628      	mov	r0, r5
 800f626:	f7fc fbdd 	bl	800bde4 <ucdr_deserialize_uint32_t>
 800f62a:	4680      	mov	r8, r0
 800f62c:	f106 0108 	add.w	r1, r6, #8
 800f630:	4628      	mov	r0, r5
 800f632:	f7fc ff59 	bl	800c4e8 <ucdr_deserialize_int32_t>
 800f636:	ea07 0708 	and.w	r7, r7, r8
 800f63a:	4604      	mov	r4, r0
 800f63c:	f106 010c 	add.w	r1, r6, #12
 800f640:	4628      	mov	r0, r5
 800f642:	403c      	ands	r4, r7
 800f644:	f7fc fbce 	bl	800bde4 <ucdr_deserialize_uint32_t>
 800f648:	f106 0110 	add.w	r1, r6, #16
 800f64c:	4004      	ands	r4, r0
 800f64e:	4628      	mov	r0, r5
 800f650:	f7fc ff4a 	bl	800c4e8 <ucdr_deserialize_int32_t>
 800f654:	4603      	mov	r3, r0
 800f656:	b2e4      	uxtb	r4, r4
 800f658:	4628      	mov	r0, r5
 800f65a:	461d      	mov	r5, r3
 800f65c:	f106 0114 	add.w	r1, r6, #20
 800f660:	f7fc fbc0 	bl	800bde4 <ucdr_deserialize_uint32_t>
 800f664:	402c      	ands	r4, r5
 800f666:	4020      	ands	r0, r4
 800f668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f66c <uxr_serialize_SampleIdentity>:
 800f66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f670:	4604      	mov	r4, r0
 800f672:	460d      	mov	r5, r1
 800f674:	220c      	movs	r2, #12
 800f676:	f004 fdc7 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f67a:	2203      	movs	r2, #3
 800f67c:	f105 010c 	add.w	r1, r5, #12
 800f680:	4607      	mov	r7, r0
 800f682:	4620      	mov	r0, r4
 800f684:	f004 fdc0 	bl	8014208 <ucdr_serialize_array_uint8_t>
 800f688:	7be9      	ldrb	r1, [r5, #15]
 800f68a:	4680      	mov	r8, r0
 800f68c:	4620      	mov	r0, r4
 800f68e:	f7fc f863 	bl	800b758 <ucdr_serialize_uint8_t>
 800f692:	6929      	ldr	r1, [r5, #16]
 800f694:	4606      	mov	r6, r0
 800f696:	4620      	mov	r0, r4
 800f698:	f7fc fe8e 	bl	800c3b8 <ucdr_serialize_int32_t>
 800f69c:	ea07 0708 	and.w	r7, r7, r8
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	403e      	ands	r6, r7
 800f6a6:	6969      	ldr	r1, [r5, #20]
 800f6a8:	461c      	mov	r4, r3
 800f6aa:	f7fc fa6b 	bl	800bb84 <ucdr_serialize_uint32_t>
 800f6ae:	4034      	ands	r4, r6
 800f6b0:	4020      	ands	r0, r4
 800f6b2:	b2c0      	uxtb	r0, r0
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6b8 <uxr_deserialize_SampleIdentity>:
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6bc:	4604      	mov	r4, r0
 800f6be:	460d      	mov	r5, r1
 800f6c0:	220c      	movs	r2, #12
 800f6c2:	f004 fe05 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f6c6:	2203      	movs	r2, #3
 800f6c8:	f105 010c 	add.w	r1, r5, #12
 800f6cc:	4607      	mov	r7, r0
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f004 fdfe 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 800f6d4:	f105 010f 	add.w	r1, r5, #15
 800f6d8:	4680      	mov	r8, r0
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f7fc f852 	bl	800b784 <ucdr_deserialize_uint8_t>
 800f6e0:	f105 0110 	add.w	r1, r5, #16
 800f6e4:	4606      	mov	r6, r0
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f7fc fefe 	bl	800c4e8 <ucdr_deserialize_int32_t>
 800f6ec:	ea07 0708 	and.w	r7, r7, r8
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	403e      	ands	r6, r7
 800f6f6:	f105 0114 	add.w	r1, r5, #20
 800f6fa:	461c      	mov	r4, r3
 800f6fc:	f7fc fb72 	bl	800bde4 <ucdr_deserialize_uint32_t>
 800f700:	4034      	ands	r4, r6
 800f702:	4020      	ands	r0, r4
 800f704:	b2c0      	uxtb	r0, r0
 800f706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70a:	bf00      	nop

0800f70c <rcl_client_get_rmw_handle>:
 800f70c:	b118      	cbz	r0, 800f716 <rcl_client_get_rmw_handle+0xa>
 800f70e:	6800      	ldr	r0, [r0, #0]
 800f710:	b108      	cbz	r0, 800f716 <rcl_client_get_rmw_handle+0xa>
 800f712:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f716:	4770      	bx	lr

0800f718 <rcl_send_request>:
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	b1f8      	cbz	r0, 800f75e <rcl_send_request+0x46>
 800f71e:	4604      	mov	r4, r0
 800f720:	6800      	ldr	r0, [r0, #0]
 800f722:	b1e0      	cbz	r0, 800f75e <rcl_send_request+0x46>
 800f724:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800f728:	b1cb      	cbz	r3, 800f75e <rcl_send_request+0x46>
 800f72a:	460e      	mov	r6, r1
 800f72c:	b1e1      	cbz	r1, 800f768 <rcl_send_request+0x50>
 800f72e:	4615      	mov	r5, r2
 800f730:	b1d2      	cbz	r2, 800f768 <rcl_send_request+0x50>
 800f732:	2105      	movs	r1, #5
 800f734:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f738:	f002 fdda 	bl	80122f0 <__atomic_load_8>
 800f73c:	4602      	mov	r2, r0
 800f73e:	460b      	mov	r3, r1
 800f740:	4631      	mov	r1, r6
 800f742:	e9c5 2300 	strd	r2, r3, [r5]
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	462a      	mov	r2, r5
 800f74a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f74e:	f003 ffc5 	bl	80136dc <rmw_send_request>
 800f752:	4606      	mov	r6, r0
 800f754:	b160      	cbz	r0, 800f770 <rcl_send_request+0x58>
 800f756:	2601      	movs	r6, #1
 800f758:	4630      	mov	r0, r6
 800f75a:	b002      	add	sp, #8
 800f75c:	bd70      	pop	{r4, r5, r6, pc}
 800f75e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800f762:	4630      	mov	r0, r6
 800f764:	b002      	add	sp, #8
 800f766:	bd70      	pop	{r4, r5, r6, pc}
 800f768:	260b      	movs	r6, #11
 800f76a:	4630      	mov	r0, r6
 800f76c:	b002      	add	sp, #8
 800f76e:	bd70      	pop	{r4, r5, r6, pc}
 800f770:	6820      	ldr	r0, [r4, #0]
 800f772:	2105      	movs	r1, #5
 800f774:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f778:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f77c:	9100      	str	r1, [sp, #0]
 800f77e:	f002 fe23 	bl	80123c8 <__atomic_exchange_8>
 800f782:	4630      	mov	r0, r6
 800f784:	b002      	add	sp, #8
 800f786:	bd70      	pop	{r4, r5, r6, pc}

0800f788 <rcl_take_response>:
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	468e      	mov	lr, r1
 800f78c:	b08c      	sub	sp, #48	; 0x30
 800f78e:	460c      	mov	r4, r1
 800f790:	4616      	mov	r6, r2
 800f792:	f10d 0c18 	add.w	ip, sp, #24
 800f796:	4605      	mov	r5, r0
 800f798:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f79c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f7a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f7a8:	b35d      	cbz	r5, 800f802 <rcl_take_response+0x7a>
 800f7aa:	682b      	ldr	r3, [r5, #0]
 800f7ac:	b34b      	cbz	r3, 800f802 <rcl_take_response+0x7a>
 800f7ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f7b2:	b330      	cbz	r0, 800f802 <rcl_take_response+0x7a>
 800f7b4:	b346      	cbz	r6, 800f808 <rcl_take_response+0x80>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	4632      	mov	r2, r6
 800f7ba:	a902      	add	r1, sp, #8
 800f7bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800f7c0:	f10d 0307 	add.w	r3, sp, #7
 800f7c4:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f810 <rcl_take_response+0x88>
 800f7c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f7d0:	f004 f88c 	bl	80138ec <rmw_take_response>
 800f7d4:	4605      	mov	r5, r0
 800f7d6:	b9c8      	cbnz	r0, 800f80c <rcl_take_response+0x84>
 800f7d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f7dc:	f240 13f5 	movw	r3, #501	; 0x1f5
 800f7e0:	2a00      	cmp	r2, #0
 800f7e2:	bf08      	it	eq
 800f7e4:	461d      	moveq	r5, r3
 800f7e6:	f10d 0e18 	add.w	lr, sp, #24
 800f7ea:	46a4      	mov	ip, r4
 800f7ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f7f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	b00c      	add	sp, #48	; 0x30
 800f800:	bd70      	pop	{r4, r5, r6, pc}
 800f802:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800f806:	e7ee      	b.n	800f7e6 <rcl_take_response+0x5e>
 800f808:	250b      	movs	r5, #11
 800f80a:	e7ec      	b.n	800f7e6 <rcl_take_response+0x5e>
 800f80c:	2501      	movs	r5, #1
 800f80e:	e7ea      	b.n	800f7e6 <rcl_take_response+0x5e>
	...

0800f818 <rcl_client_is_valid>:
 800f818:	b130      	cbz	r0, 800f828 <rcl_client_is_valid+0x10>
 800f81a:	6800      	ldr	r0, [r0, #0]
 800f81c:	b120      	cbz	r0, 800f828 <rcl_client_is_valid+0x10>
 800f81e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f822:	3800      	subs	r0, #0
 800f824:	bf18      	it	ne
 800f826:	2001      	movne	r0, #1
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop

0800f82c <rcl_convert_rmw_ret_to_rcl_ret>:
 800f82c:	280b      	cmp	r0, #11
 800f82e:	dc0d      	bgt.n	800f84c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f830:	2800      	cmp	r0, #0
 800f832:	db09      	blt.n	800f848 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f834:	280b      	cmp	r0, #11
 800f836:	d807      	bhi.n	800f848 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f838:	e8df f000 	tbb	[pc, r0]
 800f83c:	07060607 	.word	0x07060607
 800f840:	06060606 	.word	0x06060606
 800f844:	07070606 	.word	0x07070606
 800f848:	2001      	movs	r0, #1
 800f84a:	4770      	bx	lr
 800f84c:	28cb      	cmp	r0, #203	; 0xcb
 800f84e:	bf18      	it	ne
 800f850:	2001      	movne	r0, #1
 800f852:	4770      	bx	lr

0800f854 <rcl_get_zero_initialized_context>:
 800f854:	4a03      	ldr	r2, [pc, #12]	; (800f864 <rcl_get_zero_initialized_context+0x10>)
 800f856:	4603      	mov	r3, r0
 800f858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f85c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f860:	4618      	mov	r0, r3
 800f862:	4770      	bx	lr
 800f864:	08018124 	.word	0x08018124

0800f868 <rcl_context_is_valid>:
 800f868:	b118      	cbz	r0, 800f872 <rcl_context_is_valid+0xa>
 800f86a:	6840      	ldr	r0, [r0, #4]
 800f86c:	3800      	subs	r0, #0
 800f86e:	bf18      	it	ne
 800f870:	2001      	movne	r0, #1
 800f872:	4770      	bx	lr

0800f874 <__cleanup_context>:
 800f874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f878:	4606      	mov	r6, r0
 800f87a:	2300      	movs	r3, #0
 800f87c:	6800      	ldr	r0, [r0, #0]
 800f87e:	6073      	str	r3, [r6, #4]
 800f880:	2800      	cmp	r0, #0
 800f882:	d049      	beq.n	800f918 <__cleanup_context+0xa4>
 800f884:	6947      	ldr	r7, [r0, #20]
 800f886:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f88a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f88e:	b137      	cbz	r7, 800f89e <__cleanup_context+0x2a>
 800f890:	3014      	adds	r0, #20
 800f892:	f000 f9bd 	bl	800fc10 <rcl_init_options_fini>
 800f896:	4607      	mov	r7, r0
 800f898:	2800      	cmp	r0, #0
 800f89a:	d144      	bne.n	800f926 <__cleanup_context+0xb2>
 800f89c:	6830      	ldr	r0, [r6, #0]
 800f89e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f8a0:	b143      	cbz	r3, 800f8b4 <__cleanup_context+0x40>
 800f8a2:	3028      	adds	r0, #40	; 0x28
 800f8a4:	f003 fd60 	bl	8013368 <rmw_context_fini>
 800f8a8:	b118      	cbz	r0, 800f8b2 <__cleanup_context+0x3e>
 800f8aa:	2f00      	cmp	r7, #0
 800f8ac:	d03e      	beq.n	800f92c <__cleanup_context+0xb8>
 800f8ae:	f7fb f923 	bl	800aaf8 <rcutils_reset_error>
 800f8b2:	6830      	ldr	r0, [r6, #0]
 800f8b4:	6a03      	ldr	r3, [r0, #32]
 800f8b6:	b1db      	cbz	r3, 800f8f0 <__cleanup_context+0x7c>
 800f8b8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f8bc:	2a01      	cmp	r2, #1
 800f8be:	f17c 0100 	sbcs.w	r1, ip, #0
 800f8c2:	db11      	blt.n	800f8e8 <__cleanup_context+0x74>
 800f8c4:	2400      	movs	r4, #0
 800f8c6:	4625      	mov	r5, r4
 800f8c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f8cc:	4649      	mov	r1, r9
 800f8ce:	b1b8      	cbz	r0, 800f900 <__cleanup_context+0x8c>
 800f8d0:	47c0      	blx	r8
 800f8d2:	6833      	ldr	r3, [r6, #0]
 800f8d4:	3401      	adds	r4, #1
 800f8d6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f8da:	f145 0500 	adc.w	r5, r5, #0
 800f8de:	6a1b      	ldr	r3, [r3, #32]
 800f8e0:	4294      	cmp	r4, r2
 800f8e2:	eb75 010c 	sbcs.w	r1, r5, ip
 800f8e6:	dbef      	blt.n	800f8c8 <__cleanup_context+0x54>
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	4649      	mov	r1, r9
 800f8ec:	47c0      	blx	r8
 800f8ee:	6830      	ldr	r0, [r6, #0]
 800f8f0:	4649      	mov	r1, r9
 800f8f2:	47c0      	blx	r8
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	4638      	mov	r0, r7
 800f8f8:	e9c6 3300 	strd	r3, r3, [r6]
 800f8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f900:	3401      	adds	r4, #1
 800f902:	f145 0500 	adc.w	r5, r5, #0
 800f906:	4294      	cmp	r4, r2
 800f908:	eb75 010c 	sbcs.w	r1, r5, ip
 800f90c:	dbdc      	blt.n	800f8c8 <__cleanup_context+0x54>
 800f90e:	4618      	mov	r0, r3
 800f910:	4649      	mov	r1, r9
 800f912:	47c0      	blx	r8
 800f914:	6830      	ldr	r0, [r6, #0]
 800f916:	e7eb      	b.n	800f8f0 <__cleanup_context+0x7c>
 800f918:	4607      	mov	r7, r0
 800f91a:	2300      	movs	r3, #0
 800f91c:	4638      	mov	r0, r7
 800f91e:	e9c6 3300 	strd	r3, r3, [r6]
 800f922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f926:	f7fb f8e7 	bl	800aaf8 <rcutils_reset_error>
 800f92a:	e7b7      	b.n	800f89c <__cleanup_context+0x28>
 800f92c:	f7ff ff7e 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 800f930:	4607      	mov	r7, r0
 800f932:	e7bc      	b.n	800f8ae <__cleanup_context+0x3a>

0800f934 <rcl_init>:
 800f934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f938:	1e05      	subs	r5, r0, #0
 800f93a:	b09e      	sub	sp, #120	; 0x78
 800f93c:	460e      	mov	r6, r1
 800f93e:	4690      	mov	r8, r2
 800f940:	461f      	mov	r7, r3
 800f942:	f340 809f 	ble.w	800fa84 <rcl_init+0x150>
 800f946:	2900      	cmp	r1, #0
 800f948:	f000 809f 	beq.w	800fa8a <rcl_init+0x156>
 800f94c:	f1a1 0e04 	sub.w	lr, r1, #4
 800f950:	f04f 0c00 	mov.w	ip, #0
 800f954:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f958:	f10c 0c01 	add.w	ip, ip, #1
 800f95c:	2c00      	cmp	r4, #0
 800f95e:	f000 8094 	beq.w	800fa8a <rcl_init+0x156>
 800f962:	4565      	cmp	r5, ip
 800f964:	d1f6      	bne.n	800f954 <rcl_init+0x20>
 800f966:	f1b8 0f00 	cmp.w	r8, #0
 800f96a:	f000 808e 	beq.w	800fa8a <rcl_init+0x156>
 800f96e:	f8d8 4000 	ldr.w	r4, [r8]
 800f972:	2c00      	cmp	r4, #0
 800f974:	f000 8089 	beq.w	800fa8a <rcl_init+0x156>
 800f978:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f97c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f97e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	a819      	add	r0, sp, #100	; 0x64
 800f986:	f8cc 3000 	str.w	r3, [ip]
 800f98a:	f7fb f88f 	bl	800aaac <rcutils_allocator_is_valid>
 800f98e:	f080 0001 	eor.w	r0, r0, #1
 800f992:	b2c0      	uxtb	r0, r0
 800f994:	2800      	cmp	r0, #0
 800f996:	d178      	bne.n	800fa8a <rcl_init+0x156>
 800f998:	2f00      	cmp	r7, #0
 800f99a:	d076      	beq.n	800fa8a <rcl_init+0x156>
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d178      	bne.n	800fa94 <rcl_init+0x160>
 800f9a2:	2178      	movs	r1, #120	; 0x78
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f9aa:	4798      	blx	r3
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	6038      	str	r0, [r7, #0]
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	f000 80b6 	beq.w	800fb22 <rcl_init+0x1ee>
 800f9b6:	a802      	add	r0, sp, #8
 800f9b8:	f003 f80e 	bl	80129d8 <rmw_get_zero_initialized_context>
 800f9bc:	a902      	add	r1, sp, #8
 800f9be:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f9c2:	2250      	movs	r2, #80	; 0x50
 800f9c4:	f007 fa31 	bl	8016e2a <memcpy>
 800f9c8:	ac19      	add	r4, sp, #100	; 0x64
 800f9ca:	f8d7 e000 	ldr.w	lr, [r7]
 800f9ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9d0:	46f4      	mov	ip, lr
 800f9d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	f10e 0114 	add.w	r1, lr, #20
 800f9dc:	4640      	mov	r0, r8
 800f9de:	f8cc 3000 	str.w	r3, [ip]
 800f9e2:	f000 f93f 	bl	800fc64 <rcl_init_options_copy>
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d144      	bne.n	800fa76 <rcl_init+0x142>
 800f9ec:	f8d7 9000 	ldr.w	r9, [r7]
 800f9f0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f9f4:	f8c9 0020 	str.w	r0, [r9, #32]
 800f9f8:	f8c9 5018 	str.w	r5, [r9, #24]
 800f9fc:	f8c9 801c 	str.w	r8, [r9, #28]
 800fa00:	2d00      	cmp	r5, #0
 800fa02:	d04e      	beq.n	800faa2 <rcl_init+0x16e>
 800fa04:	2e00      	cmp	r6, #0
 800fa06:	d04c      	beq.n	800faa2 <rcl_init+0x16e>
 800fa08:	2104      	movs	r1, #4
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800fa10:	4798      	blx	r3
 800fa12:	f8c9 0020 	str.w	r0, [r9, #32]
 800fa16:	f8d7 9000 	ldr.w	r9, [r7]
 800fa1a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fa1e:	46ca      	mov	sl, r9
 800fa20:	b343      	cbz	r3, 800fa74 <rcl_init+0x140>
 800fa22:	2d01      	cmp	r5, #1
 800fa24:	f178 0300 	sbcs.w	r3, r8, #0
 800fa28:	db3b      	blt.n	800faa2 <rcl_init+0x16e>
 800fa2a:	2400      	movs	r4, #0
 800fa2c:	3e04      	subs	r6, #4
 800fa2e:	46a1      	mov	r9, r4
 800fa30:	e00b      	b.n	800fa4a <rcl_init+0x116>
 800fa32:	6831      	ldr	r1, [r6, #0]
 800fa34:	f007 f9f9 	bl	8016e2a <memcpy>
 800fa38:	3401      	adds	r4, #1
 800fa3a:	f149 0900 	adc.w	r9, r9, #0
 800fa3e:	45c8      	cmp	r8, r9
 800fa40:	bf08      	it	eq
 800fa42:	42a5      	cmpeq	r5, r4
 800fa44:	d02b      	beq.n	800fa9e <rcl_init+0x16a>
 800fa46:	f8d7 a000 	ldr.w	sl, [r7]
 800fa4a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fa4e:	f7f0 fbe9 	bl	8000224 <strlen>
 800fa52:	1c42      	adds	r2, r0, #1
 800fa54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa56:	4610      	mov	r0, r2
 800fa58:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fa5a:	f8da a020 	ldr.w	sl, [sl, #32]
 800fa5e:	9201      	str	r2, [sp, #4]
 800fa60:	4798      	blx	r3
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	9a01      	ldr	r2, [sp, #4]
 800fa6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d1de      	bne.n	800fa32 <rcl_init+0xfe>
 800fa74:	240a      	movs	r4, #10
 800fa76:	4638      	mov	r0, r7
 800fa78:	f7ff fefc 	bl	800f874 <__cleanup_context>
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	b01e      	add	sp, #120	; 0x78
 800fa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa84:	2900      	cmp	r1, #0
 800fa86:	f43f af6e 	beq.w	800f966 <rcl_init+0x32>
 800fa8a:	240b      	movs	r4, #11
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	b01e      	add	sp, #120	; 0x78
 800fa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa94:	2464      	movs	r4, #100	; 0x64
 800fa96:	4620      	mov	r0, r4
 800fa98:	b01e      	add	sp, #120	; 0x78
 800fa9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa9e:	f8d7 9000 	ldr.w	r9, [r7]
 800faa2:	4926      	ldr	r1, [pc, #152]	; (800fb3c <rcl_init+0x208>)
 800faa4:	680b      	ldr	r3, [r1, #0]
 800faa6:	3301      	adds	r3, #1
 800faa8:	d036      	beq.n	800fb18 <rcl_init+0x1e4>
 800faaa:	461a      	mov	r2, r3
 800faac:	2400      	movs	r4, #0
 800faae:	600b      	str	r3, [r1, #0]
 800fab0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fab4:	607b      	str	r3, [r7, #4]
 800fab6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fab8:	3301      	adds	r3, #1
 800faba:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800fabe:	d034      	beq.n	800fb2a <rcl_init+0x1f6>
 800fac0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800fac4:	b93b      	cbnz	r3, 800fad6 <rcl_init+0x1a2>
 800fac6:	3030      	adds	r0, #48	; 0x30
 800fac8:	f000 f93a 	bl	800fd40 <rcl_get_localhost_only>
 800facc:	4604      	mov	r4, r0
 800face:	2800      	cmp	r0, #0
 800fad0:	d1d1      	bne.n	800fa76 <rcl_init+0x142>
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	6958      	ldr	r0, [r3, #20]
 800fad6:	aa18      	add	r2, sp, #96	; 0x60
 800fad8:	a917      	add	r1, sp, #92	; 0x5c
 800fada:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fadc:	f001 f892 	bl	8010c04 <rcl_validate_enclave_name>
 800fae0:	4604      	mov	r4, r0
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d1c7      	bne.n	800fa76 <rcl_init+0x142>
 800fae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fae8:	b9eb      	cbnz	r3, 800fb26 <rcl_init+0x1f2>
 800faea:	6839      	ldr	r1, [r7, #0]
 800faec:	694b      	ldr	r3, [r1, #20]
 800faee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800faf2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800faf4:	f000 fc72 	bl	80103dc <rcl_get_security_options_from_environment>
 800faf8:	4604      	mov	r4, r0
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d1bb      	bne.n	800fa76 <rcl_init+0x142>
 800fafe:	6839      	ldr	r1, [r7, #0]
 800fb00:	6948      	ldr	r0, [r1, #20]
 800fb02:	3128      	adds	r1, #40	; 0x28
 800fb04:	3018      	adds	r0, #24
 800fb06:	f003 faf9 	bl	80130fc <rmw_init>
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d0bd      	beq.n	800fa8c <rcl_init+0x158>
 800fb10:	f7ff fe8c 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 800fb14:	4604      	mov	r4, r0
 800fb16:	e7ae      	b.n	800fa76 <rcl_init+0x142>
 800fb18:	2201      	movs	r2, #1
 800fb1a:	461c      	mov	r4, r3
 800fb1c:	600a      	str	r2, [r1, #0]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	e7c6      	b.n	800fab0 <rcl_init+0x17c>
 800fb22:	240a      	movs	r4, #10
 800fb24:	e7b2      	b.n	800fa8c <rcl_init+0x158>
 800fb26:	2401      	movs	r4, #1
 800fb28:	e7a5      	b.n	800fa76 <rcl_init+0x142>
 800fb2a:	3024      	adds	r0, #36	; 0x24
 800fb2c:	f006 f87c 	bl	8015c28 <rcl_get_default_domain_id>
 800fb30:	4604      	mov	r4, r0
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d19f      	bne.n	800fa76 <rcl_init+0x142>
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	6958      	ldr	r0, [r3, #20]
 800fb3a:	e7c1      	b.n	800fac0 <rcl_init+0x18c>
 800fb3c:	200134e8 	.word	0x200134e8

0800fb40 <rcl_get_zero_initialized_init_options>:
 800fb40:	2000      	movs	r0, #0
 800fb42:	4770      	bx	lr

0800fb44 <rcl_init_options_init>:
 800fb44:	b084      	sub	sp, #16
 800fb46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb48:	b097      	sub	sp, #92	; 0x5c
 800fb4a:	ae1d      	add	r6, sp, #116	; 0x74
 800fb4c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d058      	beq.n	800fc06 <rcl_init_options_init+0xc2>
 800fb54:	6803      	ldr	r3, [r0, #0]
 800fb56:	4605      	mov	r5, r0
 800fb58:	b133      	cbz	r3, 800fb68 <rcl_init_options_init+0x24>
 800fb5a:	2464      	movs	r4, #100	; 0x64
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	b017      	add	sp, #92	; 0x5c
 800fb60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fb64:	b004      	add	sp, #16
 800fb66:	4770      	bx	lr
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f7fa ff9f 	bl	800aaac <rcutils_allocator_is_valid>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d049      	beq.n	800fc06 <rcl_init_options_init+0xc2>
 800fb72:	46b4      	mov	ip, r6
 800fb74:	ac11      	add	r4, sp, #68	; 0x44
 800fb76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb7c:	f8dc 3000 	ldr.w	r3, [ip]
 800fb80:	2050      	movs	r0, #80	; 0x50
 800fb82:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fb84:	6023      	str	r3, [r4, #0]
 800fb86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb88:	4798      	blx	r3
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	6028      	str	r0, [r5, #0]
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d03b      	beq.n	800fc0a <rcl_init_options_init+0xc6>
 800fb92:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800fb96:	4686      	mov	lr, r0
 800fb98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fba0:	f8dc 3000 	ldr.w	r3, [ip]
 800fba4:	a802      	add	r0, sp, #8
 800fba6:	f8ce 3000 	str.w	r3, [lr]
 800fbaa:	f002 ff29 	bl	8012a00 <rmw_get_zero_initialized_init_options>
 800fbae:	f10d 0e08 	add.w	lr, sp, #8
 800fbb2:	f104 0c18 	add.w	ip, r4, #24
 800fbb6:	682f      	ldr	r7, [r5, #0]
 800fbb8:	ac20      	add	r4, sp, #128	; 0x80
 800fbba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbd2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fbd6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fbda:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fbde:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fbe2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fbe6:	f107 0018 	add.w	r0, r7, #24
 800fbea:	f003 f989 	bl	8012f00 <rmw_init_options_init>
 800fbee:	4604      	mov	r4, r0
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d0b3      	beq.n	800fb5c <rcl_init_options_init+0x18>
 800fbf4:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fbf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fbf8:	6828      	ldr	r0, [r5, #0]
 800fbfa:	4798      	blx	r3
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f7ff fe15 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 800fc02:	4604      	mov	r4, r0
 800fc04:	e7aa      	b.n	800fb5c <rcl_init_options_init+0x18>
 800fc06:	240b      	movs	r4, #11
 800fc08:	e7a8      	b.n	800fb5c <rcl_init_options_init+0x18>
 800fc0a:	240a      	movs	r4, #10
 800fc0c:	e7a6      	b.n	800fb5c <rcl_init_options_init+0x18>
 800fc0e:	bf00      	nop

0800fc10 <rcl_init_options_fini>:
 800fc10:	b530      	push	{r4, r5, lr}
 800fc12:	b087      	sub	sp, #28
 800fc14:	b1f0      	cbz	r0, 800fc54 <rcl_init_options_fini+0x44>
 800fc16:	6803      	ldr	r3, [r0, #0]
 800fc18:	4604      	mov	r4, r0
 800fc1a:	b1db      	cbz	r3, 800fc54 <rcl_init_options_fini+0x44>
 800fc1c:	469c      	mov	ip, r3
 800fc1e:	f10d 0e04 	add.w	lr, sp, #4
 800fc22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc2a:	f8dc 3000 	ldr.w	r3, [ip]
 800fc2e:	a801      	add	r0, sp, #4
 800fc30:	f8ce 3000 	str.w	r3, [lr]
 800fc34:	f7fa ff3a 	bl	800aaac <rcutils_allocator_is_valid>
 800fc38:	b160      	cbz	r0, 800fc54 <rcl_init_options_fini+0x44>
 800fc3a:	6820      	ldr	r0, [r4, #0]
 800fc3c:	3018      	adds	r0, #24
 800fc3e:	f003 fa19 	bl	8013074 <rmw_init_options_fini>
 800fc42:	4605      	mov	r5, r0
 800fc44:	b950      	cbnz	r0, 800fc5c <rcl_init_options_fini+0x4c>
 800fc46:	6820      	ldr	r0, [r4, #0]
 800fc48:	9b02      	ldr	r3, [sp, #8]
 800fc4a:	9905      	ldr	r1, [sp, #20]
 800fc4c:	4798      	blx	r3
 800fc4e:	4628      	mov	r0, r5
 800fc50:	b007      	add	sp, #28
 800fc52:	bd30      	pop	{r4, r5, pc}
 800fc54:	250b      	movs	r5, #11
 800fc56:	4628      	mov	r0, r5
 800fc58:	b007      	add	sp, #28
 800fc5a:	bd30      	pop	{r4, r5, pc}
 800fc5c:	f7ff fde6 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 800fc60:	4605      	mov	r5, r0
 800fc62:	e7f8      	b.n	800fc56 <rcl_init_options_fini+0x46>

0800fc64 <rcl_init_options_copy>:
 800fc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc68:	b094      	sub	sp, #80	; 0x50
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d05b      	beq.n	800fd26 <rcl_init_options_copy+0xc2>
 800fc6e:	4604      	mov	r4, r0
 800fc70:	6800      	ldr	r0, [r0, #0]
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d057      	beq.n	800fd26 <rcl_init_options_copy+0xc2>
 800fc76:	460e      	mov	r6, r1
 800fc78:	f7fa ff18 	bl	800aaac <rcutils_allocator_is_valid>
 800fc7c:	2e00      	cmp	r6, #0
 800fc7e:	d052      	beq.n	800fd26 <rcl_init_options_copy+0xc2>
 800fc80:	f080 0001 	eor.w	r0, r0, #1
 800fc84:	b2c0      	uxtb	r0, r0
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d14d      	bne.n	800fd26 <rcl_init_options_copy+0xc2>
 800fc8a:	6833      	ldr	r3, [r6, #0]
 800fc8c:	b123      	cbz	r3, 800fc98 <rcl_init_options_copy+0x34>
 800fc8e:	2464      	movs	r4, #100	; 0x64
 800fc90:	4620      	mov	r0, r4
 800fc92:	b014      	add	sp, #80	; 0x50
 800fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc98:	6827      	ldr	r7, [r4, #0]
 800fc9a:	ad0f      	add	r5, sp, #60	; 0x3c
 800fc9c:	46bc      	mov	ip, r7
 800fc9e:	f8d7 8000 	ldr.w	r8, [r7]
 800fca2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fca8:	f8dc 3000 	ldr.w	r3, [ip]
 800fcac:	2050      	movs	r0, #80	; 0x50
 800fcae:	4619      	mov	r1, r3
 800fcb0:	602b      	str	r3, [r5, #0]
 800fcb2:	47c0      	blx	r8
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	6030      	str	r0, [r6, #0]
 800fcb8:	b3d0      	cbz	r0, 800fd30 <rcl_init_options_copy+0xcc>
 800fcba:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800fcbe:	4686      	mov	lr, r0
 800fcc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fcc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fcc8:	f8dc 3000 	ldr.w	r3, [ip]
 800fccc:	4668      	mov	r0, sp
 800fcce:	f8ce 3000 	str.w	r3, [lr]
 800fcd2:	f002 fe95 	bl	8012a00 <rmw_get_zero_initialized_init_options>
 800fcd6:	46ee      	mov	lr, sp
 800fcd8:	f105 0c18 	add.w	ip, r5, #24
 800fcdc:	6824      	ldr	r4, [r4, #0]
 800fcde:	6835      	ldr	r5, [r6, #0]
 800fce0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fce8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcf8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fcfc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fd00:	f104 0018 	add.w	r0, r4, #24
 800fd04:	f105 0118 	add.w	r1, r5, #24
 800fd08:	f003 f962 	bl	8012fd0 <rmw_init_options_copy>
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d0be      	beq.n	800fc90 <rcl_init_options_copy+0x2c>
 800fd12:	f7fa fed9 	bl	800aac8 <rcutils_get_error_string>
 800fd16:	f7fa feef 	bl	800aaf8 <rcutils_reset_error>
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f7ff ff78 	bl	800fc10 <rcl_init_options_fini>
 800fd20:	b140      	cbz	r0, 800fd34 <rcl_init_options_copy+0xd0>
 800fd22:	4604      	mov	r4, r0
 800fd24:	e7b4      	b.n	800fc90 <rcl_init_options_copy+0x2c>
 800fd26:	240b      	movs	r4, #11
 800fd28:	4620      	mov	r0, r4
 800fd2a:	b014      	add	sp, #80	; 0x50
 800fd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd30:	240a      	movs	r4, #10
 800fd32:	e7ad      	b.n	800fc90 <rcl_init_options_copy+0x2c>
 800fd34:	4620      	mov	r0, r4
 800fd36:	b014      	add	sp, #80	; 0x50
 800fd38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3c:	f7ff bd76 	b.w	800f82c <rcl_convert_rmw_ret_to_rcl_ret>

0800fd40 <rcl_get_localhost_only>:
 800fd40:	b510      	push	{r4, lr}
 800fd42:	2300      	movs	r3, #0
 800fd44:	b082      	sub	sp, #8
 800fd46:	9301      	str	r3, [sp, #4]
 800fd48:	b1b8      	cbz	r0, 800fd7a <rcl_get_localhost_only+0x3a>
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	a901      	add	r1, sp, #4
 800fd4e:	480c      	ldr	r0, [pc, #48]	; (800fd80 <rcl_get_localhost_only+0x40>)
 800fd50:	f002 fb72 	bl	8012438 <rcutils_get_env>
 800fd54:	b110      	cbz	r0, 800fd5c <rcl_get_localhost_only+0x1c>
 800fd56:	2001      	movs	r0, #1
 800fd58:	b002      	add	sp, #8
 800fd5a:	bd10      	pop	{r4, pc}
 800fd5c:	9b01      	ldr	r3, [sp, #4]
 800fd5e:	b113      	cbz	r3, 800fd66 <rcl_get_localhost_only+0x26>
 800fd60:	781a      	ldrb	r2, [r3, #0]
 800fd62:	2a31      	cmp	r2, #49	; 0x31
 800fd64:	d004      	beq.n	800fd70 <rcl_get_localhost_only+0x30>
 800fd66:	2302      	movs	r3, #2
 800fd68:	2000      	movs	r0, #0
 800fd6a:	7023      	strb	r3, [r4, #0]
 800fd6c:	b002      	add	sp, #8
 800fd6e:	bd10      	pop	{r4, pc}
 800fd70:	785b      	ldrb	r3, [r3, #1]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1f7      	bne.n	800fd66 <rcl_get_localhost_only+0x26>
 800fd76:	2301      	movs	r3, #1
 800fd78:	e7f6      	b.n	800fd68 <rcl_get_localhost_only+0x28>
 800fd7a:	200b      	movs	r0, #11
 800fd7c:	b002      	add	sp, #8
 800fd7e:	bd10      	pop	{r4, pc}
 800fd80:	0801812c 	.word	0x0801812c

0800fd84 <rcl_get_zero_initialized_node>:
 800fd84:	4a03      	ldr	r2, [pc, #12]	; (800fd94 <rcl_get_zero_initialized_node+0x10>)
 800fd86:	4603      	mov	r3, r0
 800fd88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd8c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd90:	4618      	mov	r0, r3
 800fd92:	4770      	bx	lr
 800fd94:	08018154 	.word	0x08018154

0800fd98 <rcl_node_init>:
 800fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	b0a9      	sub	sp, #164	; 0xa4
 800fd9e:	4604      	mov	r4, r0
 800fda0:	460e      	mov	r6, r1
 800fda2:	4615      	mov	r5, r2
 800fda4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800fda8:	a823      	add	r0, sp, #140	; 0x8c
 800fdaa:	461f      	mov	r7, r3
 800fdac:	f006 f962 	bl	8016074 <rcl_guard_condition_get_default_options>
 800fdb0:	f1b8 0f00 	cmp.w	r8, #0
 800fdb4:	f000 80f3 	beq.w	800ff9e <rcl_node_init+0x206>
 800fdb8:	4640      	mov	r0, r8
 800fdba:	f7fa fe77 	bl	800aaac <rcutils_allocator_is_valid>
 800fdbe:	2d00      	cmp	r5, #0
 800fdc0:	bf18      	it	ne
 800fdc2:	2c00      	cmpne	r4, #0
 800fdc4:	f080 0001 	eor.w	r0, r0, #1
 800fdc8:	bf0c      	ite	eq
 800fdca:	f04f 0c01 	moveq.w	ip, #1
 800fdce:	f04f 0c00 	movne.w	ip, #0
 800fdd2:	2e00      	cmp	r6, #0
 800fdd4:	bf08      	it	eq
 800fdd6:	f04c 0c01 	orreq.w	ip, ip, #1
 800fdda:	ea4c 0c00 	orr.w	ip, ip, r0
 800fdde:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800fde2:	f040 80dc 	bne.w	800ff9e <rcl_node_init+0x206>
 800fde6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800fdea:	f1ba 0f00 	cmp.w	sl, #0
 800fdee:	f040 80fc 	bne.w	800ffea <rcl_node_init+0x252>
 800fdf2:	2f00      	cmp	r7, #0
 800fdf4:	f000 80d3 	beq.w	800ff9e <rcl_node_init+0x206>
 800fdf8:	4638      	mov	r0, r7
 800fdfa:	f7ff fd35 	bl	800f868 <rcl_context_is_valid>
 800fdfe:	4683      	mov	fp, r0
 800fe00:	2800      	cmp	r0, #0
 800fe02:	f000 80d2 	beq.w	800ffaa <rcl_node_init+0x212>
 800fe06:	4652      	mov	r2, sl
 800fe08:	4630      	mov	r0, r6
 800fe0a:	a922      	add	r1, sp, #136	; 0x88
 800fe0c:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 800fe10:	f002 ffa8 	bl	8012d64 <rmw_validate_node_name>
 800fe14:	4682      	mov	sl, r0
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f040 80c3 	bne.w	800ffa2 <rcl_node_init+0x20a>
 800fe1c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	f040 80f1 	bne.w	8010006 <rcl_node_init+0x26e>
 800fe24:	4628      	mov	r0, r5
 800fe26:	f7f0 f9fd 	bl	8000224 <strlen>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	f040 80c0 	bne.w	800ffb0 <rcl_node_init+0x218>
 800fe30:	4d79      	ldr	r5, [pc, #484]	; (8010018 <rcl_node_init+0x280>)
 800fe32:	a922      	add	r1, sp, #136	; 0x88
 800fe34:	2200      	movs	r2, #0
 800fe36:	4628      	mov	r0, r5
 800fe38:	f002 ff76 	bl	8012d28 <rmw_validate_namespace>
 800fe3c:	4682      	mov	sl, r0
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	f040 80af 	bne.w	800ffa2 <rcl_node_init+0x20a>
 800fe44:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fe46:	2800      	cmp	r0, #0
 800fe48:	f040 80d5 	bne.w	800fff6 <rcl_node_init+0x25e>
 800fe4c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe50:	2078      	movs	r0, #120	; 0x78
 800fe52:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe56:	4798      	blx	r3
 800fe58:	4682      	mov	sl, r0
 800fe5a:	6060      	str	r0, [r4, #4]
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f000 80cf 	beq.w	8010000 <rcl_node_init+0x268>
 800fe62:	2200      	movs	r2, #0
 800fe64:	2300      	movs	r3, #0
 800fe66:	a808      	add	r0, sp, #32
 800fe68:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 800fe6c:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800fe70:	f000 f902 	bl	8010078 <rcl_node_get_default_options>
 800fe74:	a908      	add	r1, sp, #32
 800fe76:	4650      	mov	r0, sl
 800fe78:	2268      	movs	r2, #104	; 0x68
 800fe7a:	f006 ffd6 	bl	8016e2a <memcpy>
 800fe7e:	6861      	ldr	r1, [r4, #4]
 800fe80:	4640      	mov	r0, r8
 800fe82:	6027      	str	r7, [r4, #0]
 800fe84:	f000 f906 	bl	8010094 <rcl_node_options_copy>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d158      	bne.n	800ff3e <rcl_node_init+0x1a6>
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f7f0 f9c9 	bl	8000224 <strlen>
 800fe92:	4428      	add	r0, r5
 800fe94:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fe98:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fe9c:	2b2f      	cmp	r3, #47	; 0x2f
 800fe9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fea2:	9300      	str	r3, [sp, #0]
 800fea4:	bf0c      	ite	eq
 800fea6:	4b5d      	ldreq	r3, [pc, #372]	; (801001c <rcl_node_init+0x284>)
 800fea8:	4b5d      	ldrne	r3, [pc, #372]	; (8010020 <rcl_node_init+0x288>)
 800feaa:	9302      	str	r3, [sp, #8]
 800feac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800feb0:	9301      	str	r3, [sp, #4]
 800feb2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800feb6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800feba:	f002 fae5 	bl	8012488 <rcutils_format_string_limit>
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 800fec4:	4631      	mov	r1, r6
 800fec6:	6818      	ldr	r0, [r3, #0]
 800fec8:	462a      	mov	r2, r5
 800feca:	6866      	ldr	r6, [r4, #4]
 800fecc:	3028      	adds	r0, #40	; 0x28
 800fece:	f003 fb6f 	bl	80135b0 <rmw_create_node>
 800fed2:	6863      	ldr	r3, [r4, #4]
 800fed4:	66b0      	str	r0, [r6, #104]	; 0x68
 800fed6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fed8:	2800      	cmp	r0, #0
 800feda:	d032      	beq.n	800ff42 <rcl_node_init+0x1aa>
 800fedc:	f003 fbf8 	bl	80136d0 <rmw_node_get_graph_guard_condition>
 800fee0:	4682      	mov	sl, r0
 800fee2:	b360      	cbz	r0, 800ff3e <rcl_node_init+0x1a6>
 800fee4:	f8d8 3000 	ldr.w	r3, [r8]
 800fee8:	2008      	movs	r0, #8
 800feea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800feee:	6866      	ldr	r6, [r4, #4]
 800fef0:	4798      	blx	r3
 800fef2:	6863      	ldr	r3, [r4, #4]
 800fef4:	66f0      	str	r0, [r6, #108]	; 0x6c
 800fef6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800fefa:	f1bb 0f00 	cmp.w	fp, #0
 800fefe:	d020      	beq.n	800ff42 <rcl_node_init+0x1aa>
 800ff00:	a806      	add	r0, sp, #24
 800ff02:	ae23      	add	r6, sp, #140	; 0x8c
 800ff04:	f006 f82a 	bl	8015f5c <rcl_get_zero_initialized_guard_condition>
 800ff08:	a806      	add	r0, sp, #24
 800ff0a:	6863      	ldr	r3, [r4, #4]
 800ff0c:	46c4      	mov	ip, r8
 800ff0e:	c803      	ldmia	r0, {r0, r1}
 800ff10:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800ff14:	e88b 0003 	stmia.w	fp, {r0, r1}
 800ff18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ff1e:	f8dc 3000 	ldr.w	r3, [ip]
 800ff22:	6033      	str	r3, [r6, #0]
 800ff24:	ab28      	add	r3, sp, #160	; 0xa0
 800ff26:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ff2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff2e:	4651      	mov	r1, sl
 800ff30:	463a      	mov	r2, r7
 800ff32:	4670      	mov	r0, lr
 800ff34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ff36:	f006 f81b 	bl	8015f70 <rcl_guard_condition_init_from_rmw>
 800ff3a:	4682      	mov	sl, r0
 800ff3c:	b328      	cbz	r0, 800ff8a <rcl_node_init+0x1f2>
 800ff3e:	6863      	ldr	r3, [r4, #4]
 800ff40:	b1f3      	cbz	r3, 800ff80 <rcl_node_init+0x1e8>
 800ff42:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800ff44:	b128      	cbz	r0, 800ff52 <rcl_node_init+0x1ba>
 800ff46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff4a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff4e:	4798      	blx	r3
 800ff50:	6863      	ldr	r3, [r4, #4]
 800ff52:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ff54:	b110      	cbz	r0, 800ff5c <rcl_node_init+0x1c4>
 800ff56:	f003 fb3d 	bl	80135d4 <rmw_destroy_node>
 800ff5a:	6863      	ldr	r3, [r4, #4]
 800ff5c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ff5e:	b148      	cbz	r0, 800ff74 <rcl_node_init+0x1dc>
 800ff60:	f006 f862 	bl	8016028 <rcl_guard_condition_fini>
 800ff64:	6863      	ldr	r3, [r4, #4]
 800ff66:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff6a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ff6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff70:	4798      	blx	r3
 800ff72:	6863      	ldr	r3, [r4, #4]
 800ff74:	4618      	mov	r0, r3
 800ff76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff7e:	4798      	blx	r3
 800ff80:	2300      	movs	r3, #0
 800ff82:	f04f 0a01 	mov.w	sl, #1
 800ff86:	e9c4 3300 	strd	r3, r3, [r4]
 800ff8a:	f1b9 0f00 	cmp.w	r9, #0
 800ff8e:	d008      	beq.n	800ffa2 <rcl_node_init+0x20a>
 800ff90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff94:	4628      	mov	r0, r5
 800ff96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff9a:	4798      	blx	r3
 800ff9c:	e001      	b.n	800ffa2 <rcl_node_init+0x20a>
 800ff9e:	f04f 0a0b 	mov.w	sl, #11
 800ffa2:	4650      	mov	r0, sl
 800ffa4:	b029      	add	sp, #164	; 0xa4
 800ffa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffaa:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800ffae:	e7f8      	b.n	800ffa2 <rcl_node_init+0x20a>
 800ffb0:	782b      	ldrb	r3, [r5, #0]
 800ffb2:	2b2f      	cmp	r3, #47	; 0x2f
 800ffb4:	f43f af3d 	beq.w	800fe32 <rcl_node_init+0x9a>
 800ffb8:	9503      	str	r5, [sp, #12]
 800ffba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	4b18      	ldr	r3, [pc, #96]	; (8010024 <rcl_node_init+0x28c>)
 800ffc2:	9302      	str	r3, [sp, #8]
 800ffc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ffc8:	9301      	str	r3, [sp, #4]
 800ffca:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ffce:	f002 fa5b 	bl	8012488 <rcutils_format_string_limit>
 800ffd2:	4605      	mov	r5, r0
 800ffd4:	b1e0      	cbz	r0, 8010010 <rcl_node_init+0x278>
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	a922      	add	r1, sp, #136	; 0x88
 800ffda:	9222      	str	r2, [sp, #136]	; 0x88
 800ffdc:	f002 fea4 	bl	8012d28 <rmw_validate_namespace>
 800ffe0:	4682      	mov	sl, r0
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d1d4      	bne.n	800ff90 <rcl_node_init+0x1f8>
 800ffe6:	46d9      	mov	r9, fp
 800ffe8:	e72c      	b.n	800fe44 <rcl_node_init+0xac>
 800ffea:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800ffee:	4650      	mov	r0, sl
 800fff0:	b029      	add	sp, #164	; 0xa4
 800fff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff6:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800fffa:	f002 fea7 	bl	8012d4c <rmw_namespace_validation_result_string>
 800fffe:	e7c4      	b.n	800ff8a <rcl_node_init+0x1f2>
 8010000:	f04f 0a0a 	mov.w	sl, #10
 8010004:	e7c1      	b.n	800ff8a <rcl_node_init+0x1f2>
 8010006:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 801000a:	f002 feff 	bl	8012e0c <rmw_node_name_validation_result_string>
 801000e:	e7c8      	b.n	800ffa2 <rcl_node_init+0x20a>
 8010010:	f04f 0a0a 	mov.w	sl, #10
 8010014:	e7c5      	b.n	800ffa2 <rcl_node_init+0x20a>
 8010016:	bf00      	nop
 8010018:	08018144 	.word	0x08018144
 801001c:	08017fc8 	.word	0x08017fc8
 8010020:	0801814c 	.word	0x0801814c
 8010024:	08018148 	.word	0x08018148

08010028 <rcl_node_is_valid>:
 8010028:	b130      	cbz	r0, 8010038 <rcl_node_is_valid+0x10>
 801002a:	6843      	ldr	r3, [r0, #4]
 801002c:	b123      	cbz	r3, 8010038 <rcl_node_is_valid+0x10>
 801002e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010030:	b113      	cbz	r3, 8010038 <rcl_node_is_valid+0x10>
 8010032:	6800      	ldr	r0, [r0, #0]
 8010034:	f7ff bc18 	b.w	800f868 <rcl_context_is_valid>
 8010038:	2000      	movs	r0, #0
 801003a:	4770      	bx	lr

0801003c <rcl_node_get_name>:
 801003c:	b120      	cbz	r0, 8010048 <rcl_node_get_name+0xc>
 801003e:	6840      	ldr	r0, [r0, #4]
 8010040:	b110      	cbz	r0, 8010048 <rcl_node_get_name+0xc>
 8010042:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010044:	b100      	cbz	r0, 8010048 <rcl_node_get_name+0xc>
 8010046:	6880      	ldr	r0, [r0, #8]
 8010048:	4770      	bx	lr
 801004a:	bf00      	nop

0801004c <rcl_node_get_namespace>:
 801004c:	b120      	cbz	r0, 8010058 <rcl_node_get_namespace+0xc>
 801004e:	6840      	ldr	r0, [r0, #4]
 8010050:	b110      	cbz	r0, 8010058 <rcl_node_get_namespace+0xc>
 8010052:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010054:	b100      	cbz	r0, 8010058 <rcl_node_get_namespace+0xc>
 8010056:	68c0      	ldr	r0, [r0, #12]
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop

0801005c <rcl_node_get_options>:
 801005c:	b128      	cbz	r0, 801006a <rcl_node_get_options+0xe>
 801005e:	6840      	ldr	r0, [r0, #4]
 8010060:	b118      	cbz	r0, 801006a <rcl_node_get_options+0xe>
 8010062:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8010064:	2b00      	cmp	r3, #0
 8010066:	bf08      	it	eq
 8010068:	2000      	moveq	r0, #0
 801006a:	4770      	bx	lr

0801006c <rcl_node_get_rmw_handle>:
 801006c:	b110      	cbz	r0, 8010074 <rcl_node_get_rmw_handle+0x8>
 801006e:	6840      	ldr	r0, [r0, #4]
 8010070:	b100      	cbz	r0, 8010074 <rcl_node_get_rmw_handle+0x8>
 8010072:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop

08010078 <rcl_node_get_default_options>:
 8010078:	b510      	push	{r4, lr}
 801007a:	4604      	mov	r4, r0
 801007c:	2268      	movs	r2, #104	; 0x68
 801007e:	2100      	movs	r1, #0
 8010080:	f006 fe0a 	bl	8016c98 <memset>
 8010084:	4620      	mov	r0, r4
 8010086:	f7fa fd03 	bl	800aa90 <rcutils_get_default_allocator>
 801008a:	2301      	movs	r3, #1
 801008c:	4620      	mov	r0, r4
 801008e:	7523      	strb	r3, [r4, #20]
 8010090:	bd10      	pop	{r4, pc}
 8010092:	bf00      	nop

08010094 <rcl_node_options_copy>:
 8010094:	2800      	cmp	r0, #0
 8010096:	bf18      	it	ne
 8010098:	4288      	cmpne	r0, r1
 801009a:	d01b      	beq.n	80100d4 <rcl_node_options_copy+0x40>
 801009c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801009e:	fab1 f681 	clz	r6, r1
 80100a2:	460c      	mov	r4, r1
 80100a4:	0976      	lsrs	r6, r6, #5
 80100a6:	b199      	cbz	r1, 80100d0 <rcl_node_options_copy+0x3c>
 80100a8:	4605      	mov	r5, r0
 80100aa:	8a87      	ldrh	r7, [r0, #20]
 80100ac:	4684      	mov	ip, r0
 80100ae:	468e      	mov	lr, r1
 80100b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100b6:	682b      	ldr	r3, [r5, #0]
 80100b8:	2250      	movs	r2, #80	; 0x50
 80100ba:	f10c 0118 	add.w	r1, ip, #24
 80100be:	f104 0018 	add.w	r0, r4, #24
 80100c2:	f8ce 3000 	str.w	r3, [lr]
 80100c6:	82a7      	strh	r7, [r4, #20]
 80100c8:	f006 feaf 	bl	8016e2a <memcpy>
 80100cc:	4630      	mov	r0, r6
 80100ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100d0:	200b      	movs	r0, #11
 80100d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100d4:	200b      	movs	r0, #11
 80100d6:	4770      	bx	lr

080100d8 <rcl_node_resolve_name>:
 80100d8:	b082      	sub	sp, #8
 80100da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100de:	b091      	sub	sp, #68	; 0x44
 80100e0:	ac1a      	add	r4, sp, #104	; 0x68
 80100e2:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80100e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80100ea:	2800      	cmp	r0, #0
 80100ec:	d03d      	beq.n	801016a <rcl_node_resolve_name+0x92>
 80100ee:	460c      	mov	r4, r1
 80100f0:	4605      	mov	r5, r0
 80100f2:	f7ff ffb3 	bl	801005c <rcl_node_get_options>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d03a      	beq.n	8010170 <rcl_node_resolve_name+0x98>
 80100fa:	4628      	mov	r0, r5
 80100fc:	f7ff ff9e 	bl	801003c <rcl_node_get_name>
 8010100:	4606      	mov	r6, r0
 8010102:	4628      	mov	r0, r5
 8010104:	ad0b      	add	r5, sp, #44	; 0x2c
 8010106:	f7ff ffa1 	bl	801004c <rcl_node_get_namespace>
 801010a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801010e:	4607      	mov	r7, r0
 8010110:	46ac      	mov	ip, r5
 8010112:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010116:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801011a:	f8de 3000 	ldr.w	r3, [lr]
 801011e:	f8cc 3000 	str.w	r3, [ip]
 8010122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010124:	b30b      	cbz	r3, 801016a <rcl_node_resolve_name+0x92>
 8010126:	4689      	mov	r9, r1
 8010128:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801012c:	f002 fb24 	bl	8012778 <rcutils_get_zero_initialized_string_map>
 8010130:	ab10      	add	r3, sp, #64	; 0x40
 8010132:	9008      	str	r0, [sp, #32]
 8010134:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010138:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801013c:	2100      	movs	r1, #0
 801013e:	a808      	add	r0, sp, #32
 8010140:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010144:	f002 fb8e 	bl	8012864 <rcutils_string_map_init>
 8010148:	4683      	mov	fp, r0
 801014a:	b1a0      	cbz	r0, 8010176 <rcl_node_resolve_name+0x9e>
 801014c:	f7fa fcbc 	bl	800aac8 <rcutils_get_error_string>
 8010150:	f7fa fcd2 	bl	800aaf8 <rcutils_reset_error>
 8010154:	f1bb 0f0a 	cmp.w	fp, #10
 8010158:	bf18      	it	ne
 801015a:	f04f 0b01 	movne.w	fp, #1
 801015e:	4658      	mov	r0, fp
 8010160:	b011      	add	sp, #68	; 0x44
 8010162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010166:	b002      	add	sp, #8
 8010168:	4770      	bx	lr
 801016a:	f04f 0b0b 	mov.w	fp, #11
 801016e:	e7f6      	b.n	801015e <rcl_node_resolve_name+0x86>
 8010170:	f04f 0b01 	mov.w	fp, #1
 8010174:	e7f3      	b.n	801015e <rcl_node_resolve_name+0x86>
 8010176:	9009      	str	r0, [sp, #36]	; 0x24
 8010178:	9007      	str	r0, [sp, #28]
 801017a:	a808      	add	r0, sp, #32
 801017c:	f005 fee8 	bl	8015f50 <rcl_get_default_topic_name_substitutions>
 8010180:	4683      	mov	fp, r0
 8010182:	b180      	cbz	r0, 80101a6 <rcl_node_resolve_name+0xce>
 8010184:	280a      	cmp	r0, #10
 8010186:	a808      	add	r0, sp, #32
 8010188:	bf18      	it	ne
 801018a:	f04f 0b01 	movne.w	fp, #1
 801018e:	f002 fba9 	bl	80128e4 <rcutils_string_map_fini>
 8010192:	4604      	mov	r4, r0
 8010194:	2800      	cmp	r0, #0
 8010196:	d15b      	bne.n	8010250 <rcl_node_resolve_name+0x178>
 8010198:	4651      	mov	r1, sl
 801019a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801019c:	47c8      	blx	r9
 801019e:	4651      	mov	r1, sl
 80101a0:	4620      	mov	r0, r4
 80101a2:	47c8      	blx	r9
 80101a4:	e7db      	b.n	801015e <rcl_node_resolve_name+0x86>
 80101a6:	ab09      	add	r3, sp, #36	; 0x24
 80101a8:	46ec      	mov	ip, sp
 80101aa:	9305      	str	r3, [sp, #20]
 80101ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101b2:	682b      	ldr	r3, [r5, #0]
 80101b4:	463a      	mov	r2, r7
 80101b6:	4631      	mov	r1, r6
 80101b8:	4620      	mov	r0, r4
 80101ba:	f8cc 3000 	str.w	r3, [ip]
 80101be:	ab08      	add	r3, sp, #32
 80101c0:	f005 fd66 	bl	8015c90 <rcl_expand_topic_name>
 80101c4:	4683      	mov	fp, r0
 80101c6:	b9d8      	cbnz	r0, 8010200 <rcl_node_resolve_name+0x128>
 80101c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80101ca:	4602      	mov	r2, r0
 80101cc:	9009      	str	r0, [sp, #36]	; 0x24
 80101ce:	a90a      	add	r1, sp, #40	; 0x28
 80101d0:	4620      	mov	r0, r4
 80101d2:	f002 fcd9 	bl	8012b88 <rmw_validate_full_topic_name>
 80101d6:	bb50      	cbnz	r0, 801022e <rcl_node_resolve_name+0x156>
 80101d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80101da:	2d00      	cmp	r5, #0
 80101dc:	d140      	bne.n	8010260 <rcl_node_resolve_name+0x188>
 80101de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101e0:	a808      	add	r0, sp, #32
 80101e2:	601c      	str	r4, [r3, #0]
 80101e4:	f002 fb7e 	bl	80128e4 <rcutils_string_map_fini>
 80101e8:	4683      	mov	fp, r0
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d043      	beq.n	8010276 <rcl_node_resolve_name+0x19e>
 80101ee:	f7fa fc6b 	bl	800aac8 <rcutils_get_error_string>
 80101f2:	46a8      	mov	r8, r5
 80101f4:	f04f 0b01 	mov.w	fp, #1
 80101f8:	462c      	mov	r4, r5
 80101fa:	f7fa fc7d 	bl	800aaf8 <rcutils_reset_error>
 80101fe:	e00a      	b.n	8010216 <rcl_node_resolve_name+0x13e>
 8010200:	2867      	cmp	r0, #103	; 0x67
 8010202:	bf14      	ite	ne
 8010204:	f04f 0800 	movne.w	r8, #0
 8010208:	f008 0801 	andeq.w	r8, r8, #1
 801020c:	9c07      	ldr	r4, [sp, #28]
 801020e:	a808      	add	r0, sp, #32
 8010210:	f002 fb68 	bl	80128e4 <rcutils_string_map_fini>
 8010214:	bb50      	cbnz	r0, 801026c <rcl_node_resolve_name+0x194>
 8010216:	4651      	mov	r1, sl
 8010218:	9809      	ldr	r0, [sp, #36]	; 0x24
 801021a:	47c8      	blx	r9
 801021c:	4651      	mov	r1, sl
 801021e:	4620      	mov	r0, r4
 8010220:	47c8      	blx	r9
 8010222:	f1b8 0f00 	cmp.w	r8, #0
 8010226:	bf18      	it	ne
 8010228:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801022c:	e797      	b.n	801015e <rcl_node_resolve_name+0x86>
 801022e:	f7fa fc4b 	bl	800aac8 <rcutils_get_error_string>
 8010232:	f7fa fc61 	bl	800aaf8 <rcutils_reset_error>
 8010236:	a808      	add	r0, sp, #32
 8010238:	f002 fb54 	bl	80128e4 <rcutils_string_map_fini>
 801023c:	b998      	cbnz	r0, 8010266 <rcl_node_resolve_name+0x18e>
 801023e:	4651      	mov	r1, sl
 8010240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010242:	47c8      	blx	r9
 8010244:	4651      	mov	r1, sl
 8010246:	4620      	mov	r0, r4
 8010248:	f04f 0b01 	mov.w	fp, #1
 801024c:	47c8      	blx	r9
 801024e:	e786      	b.n	801015e <rcl_node_resolve_name+0x86>
 8010250:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8010254:	f7fa fc38 	bl	800aac8 <rcutils_get_error_string>
 8010258:	f7fa fc4e 	bl	800aaf8 <rcutils_reset_error>
 801025c:	4644      	mov	r4, r8
 801025e:	e7da      	b.n	8010216 <rcl_node_resolve_name+0x13e>
 8010260:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010264:	e7d3      	b.n	801020e <rcl_node_resolve_name+0x136>
 8010266:	46d8      	mov	r8, fp
 8010268:	f04f 0b01 	mov.w	fp, #1
 801026c:	f7fa fc2c 	bl	800aac8 <rcutils_get_error_string>
 8010270:	f7fa fc42 	bl	800aaf8 <rcutils_reset_error>
 8010274:	e7cf      	b.n	8010216 <rcl_node_resolve_name+0x13e>
 8010276:	4651      	mov	r1, sl
 8010278:	9809      	ldr	r0, [sp, #36]	; 0x24
 801027a:	47c8      	blx	r9
 801027c:	4651      	mov	r1, sl
 801027e:	4658      	mov	r0, fp
 8010280:	47c8      	blx	r9
 8010282:	e76c      	b.n	801015e <rcl_node_resolve_name+0x86>

08010284 <exact_match_lookup>:
 8010284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010286:	f102 0708 	add.w	r7, r2, #8
 801028a:	460b      	mov	r3, r1
 801028c:	b085      	sub	sp, #20
 801028e:	4614      	mov	r4, r2
 8010290:	4606      	mov	r6, r0
 8010292:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010296:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801029a:	4618      	mov	r0, r3
 801029c:	4919      	ldr	r1, [pc, #100]	; (8010304 <exact_match_lookup+0x80>)
 801029e:	e894 000c 	ldmia.w	r4, {r2, r3}
 80102a2:	f002 f8e3 	bl	801246c <rcutils_join_path>
 80102a6:	7833      	ldrb	r3, [r6, #0]
 80102a8:	4605      	mov	r5, r0
 80102aa:	2b2f      	cmp	r3, #47	; 0x2f
 80102ac:	d023      	beq.n	80102f6 <exact_match_lookup+0x72>
 80102ae:	f104 030c 	add.w	r3, r4, #12
 80102b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80102b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80102ba:	1c70      	adds	r0, r6, #1
 80102bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80102c0:	f002 f8da 	bl	8012478 <rcutils_to_native_path>
 80102c4:	4606      	mov	r6, r0
 80102c6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80102ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80102ce:	4631      	mov	r1, r6
 80102d0:	4628      	mov	r0, r5
 80102d2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80102d6:	f002 f8c9 	bl	801246c <rcutils_join_path>
 80102da:	4603      	mov	r3, r0
 80102dc:	4630      	mov	r0, r6
 80102de:	6862      	ldr	r2, [r4, #4]
 80102e0:	461e      	mov	r6, r3
 80102e2:	6921      	ldr	r1, [r4, #16]
 80102e4:	4790      	blx	r2
 80102e6:	4628      	mov	r0, r5
 80102e8:	4635      	mov	r5, r6
 80102ea:	6863      	ldr	r3, [r4, #4]
 80102ec:	6921      	ldr	r1, [r4, #16]
 80102ee:	4798      	blx	r3
 80102f0:	4628      	mov	r0, r5
 80102f2:	b005      	add	sp, #20
 80102f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102f6:	7873      	ldrb	r3, [r6, #1]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1d8      	bne.n	80102ae <exact_match_lookup+0x2a>
 80102fc:	4628      	mov	r0, r5
 80102fe:	b005      	add	sp, #20
 8010300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010302:	bf00      	nop
 8010304:	08018198 	.word	0x08018198

08010308 <rcl_get_secure_root>:
 8010308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801030c:	b085      	sub	sp, #20
 801030e:	b168      	cbz	r0, 801032c <rcl_get_secure_root+0x24>
 8010310:	4607      	mov	r7, r0
 8010312:	4608      	mov	r0, r1
 8010314:	460c      	mov	r4, r1
 8010316:	f7fa fbc9 	bl	800aaac <rcutils_allocator_is_valid>
 801031a:	b138      	cbz	r0, 801032c <rcl_get_secure_root+0x24>
 801031c:	2300      	movs	r3, #0
 801031e:	482d      	ldr	r0, [pc, #180]	; (80103d4 <rcl_get_secure_root+0xcc>)
 8010320:	a903      	add	r1, sp, #12
 8010322:	9303      	str	r3, [sp, #12]
 8010324:	f002 f888 	bl	8012438 <rcutils_get_env>
 8010328:	4605      	mov	r5, r0
 801032a:	b120      	cbz	r0, 8010336 <rcl_get_secure_root+0x2e>
 801032c:	2500      	movs	r5, #0
 801032e:	4628      	mov	r0, r5
 8010330:	b005      	add	sp, #20
 8010332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010336:	9b03      	ldr	r3, [sp, #12]
 8010338:	781a      	ldrb	r2, [r3, #0]
 801033a:	2a00      	cmp	r2, #0
 801033c:	d0f6      	beq.n	801032c <rcl_get_secure_root+0x24>
 801033e:	f104 090c 	add.w	r9, r4, #12
 8010342:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010346:	e88d 0003 	stmia.w	sp, {r0, r1}
 801034a:	4618      	mov	r0, r3
 801034c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010350:	f002 f9d4 	bl	80126fc <rcutils_strdup>
 8010354:	4680      	mov	r8, r0
 8010356:	2800      	cmp	r0, #0
 8010358:	d0e8      	beq.n	801032c <rcl_get_secure_root+0x24>
 801035a:	a903      	add	r1, sp, #12
 801035c:	481e      	ldr	r0, [pc, #120]	; (80103d8 <rcl_get_secure_root+0xd0>)
 801035e:	9503      	str	r5, [sp, #12]
 8010360:	f002 f86a 	bl	8012438 <rcutils_get_env>
 8010364:	b160      	cbz	r0, 8010380 <rcl_get_secure_root+0x78>
 8010366:	2600      	movs	r6, #0
 8010368:	4630      	mov	r0, r6
 801036a:	6863      	ldr	r3, [r4, #4]
 801036c:	6921      	ldr	r1, [r4, #16]
 801036e:	4798      	blx	r3
 8010370:	4640      	mov	r0, r8
 8010372:	6863      	ldr	r3, [r4, #4]
 8010374:	6921      	ldr	r1, [r4, #16]
 8010376:	4798      	blx	r3
 8010378:	4628      	mov	r0, r5
 801037a:	b005      	add	sp, #20
 801037c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010380:	9b03      	ldr	r3, [sp, #12]
 8010382:	781e      	ldrb	r6, [r3, #0]
 8010384:	b1f6      	cbz	r6, 80103c4 <rcl_get_secure_root+0xbc>
 8010386:	e899 0003 	ldmia.w	r9, {r0, r1}
 801038a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801038e:	4618      	mov	r0, r3
 8010390:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010394:	f002 f9b2 	bl	80126fc <rcutils_strdup>
 8010398:	4606      	mov	r6, r0
 801039a:	2800      	cmp	r0, #0
 801039c:	d0e3      	beq.n	8010366 <rcl_get_secure_root+0x5e>
 801039e:	4622      	mov	r2, r4
 80103a0:	4641      	mov	r1, r8
 80103a2:	f7ff ff6f 	bl	8010284 <exact_match_lookup>
 80103a6:	4605      	mov	r5, r0
 80103a8:	2d00      	cmp	r5, #0
 80103aa:	d0dd      	beq.n	8010368 <rcl_get_secure_root+0x60>
 80103ac:	4628      	mov	r0, r5
 80103ae:	f002 f85b 	bl	8012468 <rcutils_is_directory>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d1d7      	bne.n	8010368 <rcl_get_secure_root+0x60>
 80103b8:	4628      	mov	r0, r5
 80103ba:	6921      	ldr	r1, [r4, #16]
 80103bc:	461d      	mov	r5, r3
 80103be:	6863      	ldr	r3, [r4, #4]
 80103c0:	4798      	blx	r3
 80103c2:	e7d1      	b.n	8010368 <rcl_get_secure_root+0x60>
 80103c4:	4622      	mov	r2, r4
 80103c6:	4638      	mov	r0, r7
 80103c8:	4641      	mov	r1, r8
 80103ca:	f7ff ff5b 	bl	8010284 <exact_match_lookup>
 80103ce:	4605      	mov	r5, r0
 80103d0:	e7ea      	b.n	80103a8 <rcl_get_secure_root+0xa0>
 80103d2:	bf00      	nop
 80103d4:	080181a4 	.word	0x080181a4
 80103d8:	080181bc 	.word	0x080181bc

080103dc <rcl_get_security_options_from_environment>:
 80103dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e0:	b082      	sub	sp, #8
 80103e2:	2300      	movs	r3, #0
 80103e4:	4606      	mov	r6, r0
 80103e6:	460f      	mov	r7, r1
 80103e8:	4821      	ldr	r0, [pc, #132]	; (8010470 <rcl_get_security_options_from_environment+0x94>)
 80103ea:	a901      	add	r1, sp, #4
 80103ec:	4690      	mov	r8, r2
 80103ee:	9301      	str	r3, [sp, #4]
 80103f0:	f002 f822 	bl	8012438 <rcutils_get_env>
 80103f4:	b120      	cbz	r0, 8010400 <rcl_get_security_options_from_environment+0x24>
 80103f6:	2501      	movs	r5, #1
 80103f8:	4628      	mov	r0, r5
 80103fa:	b002      	add	sp, #8
 80103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010400:	4604      	mov	r4, r0
 8010402:	491c      	ldr	r1, [pc, #112]	; (8010474 <rcl_get_security_options_from_environment+0x98>)
 8010404:	9801      	ldr	r0, [sp, #4]
 8010406:	f7ef ff03 	bl	8000210 <strcmp>
 801040a:	4605      	mov	r5, r0
 801040c:	b9f0      	cbnz	r0, 801044c <rcl_get_security_options_from_environment+0x70>
 801040e:	9001      	str	r0, [sp, #4]
 8010410:	f1b8 0f00 	cmp.w	r8, #0
 8010414:	d021      	beq.n	801045a <rcl_get_security_options_from_environment+0x7e>
 8010416:	a901      	add	r1, sp, #4
 8010418:	4817      	ldr	r0, [pc, #92]	; (8010478 <rcl_get_security_options_from_environment+0x9c>)
 801041a:	f002 f80d 	bl	8012438 <rcutils_get_env>
 801041e:	2800      	cmp	r0, #0
 8010420:	d1e9      	bne.n	80103f6 <rcl_get_security_options_from_environment+0x1a>
 8010422:	4916      	ldr	r1, [pc, #88]	; (801047c <rcl_get_security_options_from_environment+0xa0>)
 8010424:	9801      	ldr	r0, [sp, #4]
 8010426:	f7ef fef3 	bl	8000210 <strcmp>
 801042a:	4603      	mov	r3, r0
 801042c:	4639      	mov	r1, r7
 801042e:	4630      	mov	r0, r6
 8010430:	fab3 f383 	clz	r3, r3
 8010434:	095b      	lsrs	r3, r3, #5
 8010436:	f888 3000 	strb.w	r3, [r8]
 801043a:	f7ff ff65 	bl	8010308 <rcl_get_secure_root>
 801043e:	b170      	cbz	r0, 801045e <rcl_get_security_options_from_environment+0x82>
 8010440:	f8c8 0004 	str.w	r0, [r8, #4]
 8010444:	4628      	mov	r0, r5
 8010446:	b002      	add	sp, #8
 8010448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801044c:	4625      	mov	r5, r4
 801044e:	f888 4000 	strb.w	r4, [r8]
 8010452:	4628      	mov	r0, r5
 8010454:	b002      	add	sp, #8
 8010456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801045a:	250b      	movs	r5, #11
 801045c:	e7cc      	b.n	80103f8 <rcl_get_security_options_from_environment+0x1c>
 801045e:	f898 5000 	ldrb.w	r5, [r8]
 8010462:	f1a5 0501 	sub.w	r5, r5, #1
 8010466:	fab5 f585 	clz	r5, r5
 801046a:	096d      	lsrs	r5, r5, #5
 801046c:	e7c4      	b.n	80103f8 <rcl_get_security_options_from_environment+0x1c>
 801046e:	bf00      	nop
 8010470:	0801815c 	.word	0x0801815c
 8010474:	08018170 	.word	0x08018170
 8010478:	08018178 	.word	0x08018178
 801047c:	08018190 	.word	0x08018190

08010480 <rcl_service_get_rmw_handle>:
 8010480:	b118      	cbz	r0, 801048a <rcl_service_get_rmw_handle+0xa>
 8010482:	6800      	ldr	r0, [r0, #0]
 8010484:	b108      	cbz	r0, 801048a <rcl_service_get_rmw_handle+0xa>
 8010486:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801048a:	4770      	bx	lr

0801048c <rcl_take_request>:
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	468e      	mov	lr, r1
 8010490:	b08c      	sub	sp, #48	; 0x30
 8010492:	460c      	mov	r4, r1
 8010494:	4616      	mov	r6, r2
 8010496:	f10d 0c18 	add.w	ip, sp, #24
 801049a:	4605      	mov	r5, r0
 801049c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80104a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80104ac:	b30d      	cbz	r5, 80104f2 <rcl_take_request+0x66>
 80104ae:	682b      	ldr	r3, [r5, #0]
 80104b0:	b1fb      	cbz	r3, 80104f2 <rcl_take_request+0x66>
 80104b2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80104b6:	b1e0      	cbz	r0, 80104f2 <rcl_take_request+0x66>
 80104b8:	b336      	cbz	r6, 8010508 <rcl_take_request+0x7c>
 80104ba:	2300      	movs	r3, #0
 80104bc:	4632      	mov	r2, r6
 80104be:	a902      	add	r1, sp, #8
 80104c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80104c4:	f10d 0307 	add.w	r3, sp, #7
 80104c8:	f003 f956 	bl	8013778 <rmw_take_request>
 80104cc:	4605      	mov	r5, r0
 80104ce:	b198      	cbz	r0, 80104f8 <rcl_take_request+0x6c>
 80104d0:	280a      	cmp	r0, #10
 80104d2:	bf18      	it	ne
 80104d4:	2501      	movne	r5, #1
 80104d6:	f10d 0e18 	add.w	lr, sp, #24
 80104da:	46a4      	mov	ip, r4
 80104dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80104e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80104ec:	4628      	mov	r0, r5
 80104ee:	b00c      	add	sp, #48	; 0x30
 80104f0:	bd70      	pop	{r4, r5, r6, pc}
 80104f2:	f44f 7516 	mov.w	r5, #600	; 0x258
 80104f6:	e7ee      	b.n	80104d6 <rcl_take_request+0x4a>
 80104f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80104fc:	f240 2359 	movw	r3, #601	; 0x259
 8010500:	2a00      	cmp	r2, #0
 8010502:	bf08      	it	eq
 8010504:	461d      	moveq	r5, r3
 8010506:	e7e6      	b.n	80104d6 <rcl_take_request+0x4a>
 8010508:	250b      	movs	r5, #11
 801050a:	e7e4      	b.n	80104d6 <rcl_take_request+0x4a>

0801050c <rcl_send_response>:
 801050c:	b170      	cbz	r0, 801052c <rcl_send_response+0x20>
 801050e:	6800      	ldr	r0, [r0, #0]
 8010510:	b160      	cbz	r0, 801052c <rcl_send_response+0x20>
 8010512:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010516:	b148      	cbz	r0, 801052c <rcl_send_response+0x20>
 8010518:	b169      	cbz	r1, 8010536 <rcl_send_response+0x2a>
 801051a:	b510      	push	{r4, lr}
 801051c:	b14a      	cbz	r2, 8010532 <rcl_send_response+0x26>
 801051e:	f003 f989 	bl	8013834 <rmw_send_response>
 8010522:	b110      	cbz	r0, 801052a <rcl_send_response+0x1e>
 8010524:	2802      	cmp	r0, #2
 8010526:	bf18      	it	ne
 8010528:	2001      	movne	r0, #1
 801052a:	bd10      	pop	{r4, pc}
 801052c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8010530:	4770      	bx	lr
 8010532:	200b      	movs	r0, #11
 8010534:	bd10      	pop	{r4, pc}
 8010536:	200b      	movs	r0, #11
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop

0801053c <rcl_service_is_valid>:
 801053c:	b130      	cbz	r0, 801054c <rcl_service_is_valid+0x10>
 801053e:	6800      	ldr	r0, [r0, #0]
 8010540:	b120      	cbz	r0, 801054c <rcl_service_is_valid+0x10>
 8010542:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010546:	3800      	subs	r0, #0
 8010548:	bf18      	it	ne
 801054a:	2001      	movne	r0, #1
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop

08010550 <rcl_get_zero_initialized_subscription>:
 8010550:	4b01      	ldr	r3, [pc, #4]	; (8010558 <rcl_get_zero_initialized_subscription+0x8>)
 8010552:	6818      	ldr	r0, [r3, #0]
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	080181dc 	.word	0x080181dc

0801055c <rcl_subscription_init>:
 801055c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010560:	b088      	sub	sp, #32
 8010562:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010564:	b1ff      	cbz	r7, 80105a6 <rcl_subscription_init+0x4a>
 8010566:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 801056a:	4605      	mov	r5, r0
 801056c:	460e      	mov	r6, r1
 801056e:	4691      	mov	r9, r2
 8010570:	4650      	mov	r0, sl
 8010572:	4698      	mov	r8, r3
 8010574:	f7fa fa9a 	bl	800aaac <rcutils_allocator_is_valid>
 8010578:	f080 0401 	eor.w	r4, r0, #1
 801057c:	b2e4      	uxtb	r4, r4
 801057e:	b994      	cbnz	r4, 80105a6 <rcl_subscription_init+0x4a>
 8010580:	b18d      	cbz	r5, 80105a6 <rcl_subscription_init+0x4a>
 8010582:	4630      	mov	r0, r6
 8010584:	f7ff fd50 	bl	8010028 <rcl_node_is_valid>
 8010588:	2800      	cmp	r0, #0
 801058a:	d055      	beq.n	8010638 <rcl_subscription_init+0xdc>
 801058c:	f1b9 0f00 	cmp.w	r9, #0
 8010590:	d009      	beq.n	80105a6 <rcl_subscription_init+0x4a>
 8010592:	f1b8 0f00 	cmp.w	r8, #0
 8010596:	d006      	beq.n	80105a6 <rcl_subscription_init+0x4a>
 8010598:	682b      	ldr	r3, [r5, #0]
 801059a:	b14b      	cbz	r3, 80105b0 <rcl_subscription_init+0x54>
 801059c:	2464      	movs	r4, #100	; 0x64
 801059e:	4620      	mov	r0, r4
 80105a0:	b008      	add	sp, #32
 80105a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a6:	240b      	movs	r4, #11
 80105a8:	4620      	mov	r0, r4
 80105aa:	b008      	add	sp, #32
 80105ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80105b4:	aa07      	add	r2, sp, #28
 80105b6:	9307      	str	r3, [sp, #28]
 80105b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80105bc:	9205      	str	r2, [sp, #20]
 80105be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80105c6:	4641      	mov	r1, r8
 80105c8:	4630      	mov	r0, r6
 80105ca:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80105ce:	f7ff fd83 	bl	80100d8 <rcl_node_resolve_name>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d15f      	bne.n	8010696 <rcl_subscription_init+0x13a>
 80105d6:	21c8      	movs	r1, #200	; 0xc8
 80105d8:	2001      	movs	r0, #1
 80105da:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 80105de:	4798      	blx	r3
 80105e0:	6028      	str	r0, [r5, #0]
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d05f      	beq.n	80106a6 <rcl_subscription_init+0x14a>
 80105e6:	4630      	mov	r0, r6
 80105e8:	f7ff fd40 	bl	801006c <rcl_node_get_rmw_handle>
 80105ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80105f0:	4649      	mov	r1, r9
 80105f2:	9a07      	ldr	r2, [sp, #28]
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	463b      	mov	r3, r7
 80105f8:	682c      	ldr	r4, [r5, #0]
 80105fa:	f003 fa03 	bl	8013a04 <rmw_create_subscription>
 80105fe:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8010602:	682c      	ldr	r4, [r5, #0]
 8010604:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8010608:	b348      	cbz	r0, 801065e <rcl_subscription_init+0x102>
 801060a:	f104 0170 	add.w	r1, r4, #112	; 0x70
 801060e:	f003 faef 	bl	8013bf0 <rmw_subscription_get_actual_qos>
 8010612:	4604      	mov	r4, r0
 8010614:	b9a8      	cbnz	r0, 8010642 <rcl_subscription_init+0xe6>
 8010616:	6828      	ldr	r0, [r5, #0]
 8010618:	2270      	movs	r2, #112	; 0x70
 801061a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801061e:	4639      	mov	r1, r7
 8010620:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8010624:	f006 fc01 	bl	8016e2a <memcpy>
 8010628:	9807      	ldr	r0, [sp, #28]
 801062a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801062c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801062e:	4798      	blx	r3
 8010630:	4620      	mov	r0, r4
 8010632:	b008      	add	sp, #32
 8010634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010638:	24c8      	movs	r4, #200	; 0xc8
 801063a:	4620      	mov	r0, r4
 801063c:	b008      	add	sp, #32
 801063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010642:	682c      	ldr	r4, [r5, #0]
 8010644:	b36c      	cbz	r4, 80106a2 <rcl_subscription_init+0x146>
 8010646:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801064a:	b14b      	cbz	r3, 8010660 <rcl_subscription_init+0x104>
 801064c:	4630      	mov	r0, r6
 801064e:	f7ff fd0d 	bl	801006c <rcl_node_get_rmw_handle>
 8010652:	682b      	ldr	r3, [r5, #0]
 8010654:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8010658:	f003 fade 	bl	8013c18 <rmw_destroy_subscription>
 801065c:	682c      	ldr	r4, [r5, #0]
 801065e:	b194      	cbz	r4, 8010686 <rcl_subscription_init+0x12a>
 8010660:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8010664:	4630      	mov	r0, r6
 8010666:	f7fa fa21 	bl	800aaac <rcutils_allocator_is_valid>
 801066a:	b158      	cbz	r0, 8010684 <rcl_subscription_init+0x128>
 801066c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801066e:	b148      	cbz	r0, 8010684 <rcl_subscription_init+0x128>
 8010670:	4631      	mov	r1, r6
 8010672:	f002 f9d9 	bl	8012a28 <rmw_subscription_content_filter_options_fini>
 8010676:	4606      	mov	r6, r0
 8010678:	b9c8      	cbnz	r0, 80106ae <rcl_subscription_init+0x152>
 801067a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801067c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801067e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010680:	4798      	blx	r3
 8010682:	66e6      	str	r6, [r4, #108]	; 0x6c
 8010684:	682c      	ldr	r4, [r5, #0]
 8010686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010688:	4620      	mov	r0, r4
 801068a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801068c:	2401      	movs	r4, #1
 801068e:	4798      	blx	r3
 8010690:	2300      	movs	r3, #0
 8010692:	602b      	str	r3, [r5, #0]
 8010694:	e7c8      	b.n	8010628 <rcl_subscription_init+0xcc>
 8010696:	2867      	cmp	r0, #103	; 0x67
 8010698:	d007      	beq.n	80106aa <rcl_subscription_init+0x14e>
 801069a:	2869      	cmp	r0, #105	; 0x69
 801069c:	d005      	beq.n	80106aa <rcl_subscription_init+0x14e>
 801069e:	280a      	cmp	r0, #10
 80106a0:	d001      	beq.n	80106a6 <rcl_subscription_init+0x14a>
 80106a2:	2401      	movs	r4, #1
 80106a4:	e7c0      	b.n	8010628 <rcl_subscription_init+0xcc>
 80106a6:	240a      	movs	r4, #10
 80106a8:	e7be      	b.n	8010628 <rcl_subscription_init+0xcc>
 80106aa:	2467      	movs	r4, #103	; 0x67
 80106ac:	e7bc      	b.n	8010628 <rcl_subscription_init+0xcc>
 80106ae:	f7ff f8bd 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 80106b2:	682c      	ldr	r4, [r5, #0]
 80106b4:	e7e7      	b.n	8010686 <rcl_subscription_init+0x12a>
 80106b6:	bf00      	nop

080106b8 <rcl_subscription_get_default_options>:
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	4d14      	ldr	r5, [pc, #80]	; (801070c <rcl_subscription_get_default_options+0x54>)
 80106bc:	b08a      	sub	sp, #40	; 0x28
 80106be:	4604      	mov	r4, r0
 80106c0:	2250      	movs	r2, #80	; 0x50
 80106c2:	4913      	ldr	r1, [pc, #76]	; (8010710 <rcl_subscription_get_default_options+0x58>)
 80106c4:	4628      	mov	r0, r5
 80106c6:	f006 fbb0 	bl	8016e2a <memcpy>
 80106ca:	a804      	add	r0, sp, #16
 80106cc:	f7fa f9e0 	bl	800aa90 <rcutils_get_default_allocator>
 80106d0:	f10d 0c10 	add.w	ip, sp, #16
 80106d4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80106d8:	466e      	mov	r6, sp
 80106da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106e2:	f8dc 3000 	ldr.w	r3, [ip]
 80106e6:	4630      	mov	r0, r6
 80106e8:	f8ce 3000 	str.w	r3, [lr]
 80106ec:	f002 f9b6 	bl	8012a5c <rmw_get_default_subscription_options>
 80106f0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80106f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80106f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106fc:	2270      	movs	r2, #112	; 0x70
 80106fe:	4629      	mov	r1, r5
 8010700:	4620      	mov	r0, r4
 8010702:	f006 fb92 	bl	8016e2a <memcpy>
 8010706:	4620      	mov	r0, r4
 8010708:	b00a      	add	sp, #40	; 0x28
 801070a:	bd70      	pop	{r4, r5, r6, pc}
 801070c:	200134f0 	.word	0x200134f0
 8010710:	080181e0 	.word	0x080181e0

08010714 <rcl_take>:
 8010714:	2800      	cmp	r0, #0
 8010716:	d049      	beq.n	80107ac <rcl_take+0x98>
 8010718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801071c:	4615      	mov	r5, r2
 801071e:	6802      	ldr	r2, [r0, #0]
 8010720:	b0a4      	sub	sp, #144	; 0x90
 8010722:	4604      	mov	r4, r0
 8010724:	2a00      	cmp	r2, #0
 8010726:	d039      	beq.n	801079c <rcl_take+0x88>
 8010728:	461f      	mov	r7, r3
 801072a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 801072e:	b3ab      	cbz	r3, 801079c <rcl_take+0x88>
 8010730:	460e      	mov	r6, r1
 8010732:	2900      	cmp	r1, #0
 8010734:	d038      	beq.n	80107a8 <rcl_take+0x94>
 8010736:	2d00      	cmp	r5, #0
 8010738:	d03c      	beq.n	80107b4 <rcl_take+0xa0>
 801073a:	a802      	add	r0, sp, #8
 801073c:	f04f 0800 	mov.w	r8, #0
 8010740:	f002 fa1a 	bl	8012b78 <rmw_get_zero_initialized_message_info>
 8010744:	f10d 0c08 	add.w	ip, sp, #8
 8010748:	46ae      	mov	lr, r5
 801074a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801074e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010752:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010756:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801075a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801075e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010762:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010766:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801076a:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 801076e:	462b      	mov	r3, r5
 8010770:	6820      	ldr	r0, [r4, #0]
 8010772:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8010776:	4631      	mov	r1, r6
 8010778:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801077c:	9700      	str	r7, [sp, #0]
 801077e:	f003 faad 	bl	8013cdc <rmw_take_with_info>
 8010782:	4603      	mov	r3, r0
 8010784:	b9c0      	cbnz	r0, 80107b8 <rcl_take+0xa4>
 8010786:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801078a:	f240 1291 	movw	r2, #401	; 0x191
 801078e:	2900      	cmp	r1, #0
 8010790:	bf08      	it	eq
 8010792:	4613      	moveq	r3, r2
 8010794:	4618      	mov	r0, r3
 8010796:	b024      	add	sp, #144	; 0x90
 8010798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801079c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80107a0:	4618      	mov	r0, r3
 80107a2:	b024      	add	sp, #144	; 0x90
 80107a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a8:	230b      	movs	r3, #11
 80107aa:	e7f3      	b.n	8010794 <rcl_take+0x80>
 80107ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80107b0:	4618      	mov	r0, r3
 80107b2:	4770      	bx	lr
 80107b4:	ad14      	add	r5, sp, #80	; 0x50
 80107b6:	e7c0      	b.n	801073a <rcl_take+0x26>
 80107b8:	f7ff f838 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 80107bc:	4603      	mov	r3, r0
 80107be:	e7e9      	b.n	8010794 <rcl_take+0x80>

080107c0 <rcl_subscription_get_rmw_handle>:
 80107c0:	b118      	cbz	r0, 80107ca <rcl_subscription_get_rmw_handle+0xa>
 80107c2:	6800      	ldr	r0, [r0, #0]
 80107c4:	b108      	cbz	r0, 80107ca <rcl_subscription_get_rmw_handle+0xa>
 80107c6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80107ca:	4770      	bx	lr

080107cc <rcl_subscription_is_valid>:
 80107cc:	b130      	cbz	r0, 80107dc <rcl_subscription_is_valid+0x10>
 80107ce:	6800      	ldr	r0, [r0, #0]
 80107d0:	b120      	cbz	r0, 80107dc <rcl_subscription_is_valid+0x10>
 80107d2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80107d6:	3800      	subs	r0, #0
 80107d8:	bf18      	it	ne
 80107da:	2001      	movne	r0, #1
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop

080107e0 <rcl_get_system_time>:
 80107e0:	4608      	mov	r0, r1
 80107e2:	f7fa b9a5 	b.w	800ab30 <rcutils_system_time_now>
 80107e6:	bf00      	nop

080107e8 <rcl_get_steady_time>:
 80107e8:	4608      	mov	r0, r1
 80107ea:	f7fa b9c7 	b.w	800ab7c <rcutils_steady_time_now>
 80107ee:	bf00      	nop

080107f0 <rcl_get_ros_time>:
 80107f0:	7a03      	ldrb	r3, [r0, #8]
 80107f2:	b510      	push	{r4, lr}
 80107f4:	460c      	mov	r4, r1
 80107f6:	b143      	cbz	r3, 801080a <rcl_get_ros_time+0x1a>
 80107f8:	2105      	movs	r1, #5
 80107fa:	f001 fd79 	bl	80122f0 <__atomic_load_8>
 80107fe:	4602      	mov	r2, r0
 8010800:	460b      	mov	r3, r1
 8010802:	2000      	movs	r0, #0
 8010804:	e9c4 2300 	strd	r2, r3, [r4]
 8010808:	bd10      	pop	{r4, pc}
 801080a:	4608      	mov	r0, r1
 801080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010810:	f7fa b98e 	b.w	800ab30 <rcutils_system_time_now>

08010814 <rcl_clock_init>:
 8010814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010816:	4605      	mov	r5, r0
 8010818:	4610      	mov	r0, r2
 801081a:	4614      	mov	r4, r2
 801081c:	460e      	mov	r6, r1
 801081e:	f7fa f945 	bl	800aaac <rcutils_allocator_is_valid>
 8010822:	b128      	cbz	r0, 8010830 <rcl_clock_init+0x1c>
 8010824:	2d03      	cmp	r5, #3
 8010826:	d803      	bhi.n	8010830 <rcl_clock_init+0x1c>
 8010828:	e8df f005 	tbb	[pc, r5]
 801082c:	0659301f 	.word	0x0659301f
 8010830:	f04f 0c0b 	mov.w	ip, #11
 8010834:	4660      	mov	r0, ip
 8010836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010838:	2c00      	cmp	r4, #0
 801083a:	d0f9      	beq.n	8010830 <rcl_clock_init+0x1c>
 801083c:	fab6 f386 	clz	r3, r6
 8010840:	095b      	lsrs	r3, r3, #5
 8010842:	2e00      	cmp	r6, #0
 8010844:	d0f4      	beq.n	8010830 <rcl_clock_init+0x1c>
 8010846:	6133      	str	r3, [r6, #16]
 8010848:	469c      	mov	ip, r3
 801084a:	f106 0514 	add.w	r5, r6, #20
 801084e:	4f32      	ldr	r7, [pc, #200]	; (8010918 <rcl_clock_init+0x104>)
 8010850:	f04f 0e03 	mov.w	lr, #3
 8010854:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801085a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801085c:	6823      	ldr	r3, [r4, #0]
 801085e:	4660      	mov	r0, ip
 8010860:	602b      	str	r3, [r5, #0]
 8010862:	60f7      	str	r7, [r6, #12]
 8010864:	f886 e000 	strb.w	lr, [r6]
 8010868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801086a:	2e00      	cmp	r6, #0
 801086c:	d0e0      	beq.n	8010830 <rcl_clock_init+0x1c>
 801086e:	2300      	movs	r3, #0
 8010870:	f106 0514 	add.w	r5, r6, #20
 8010874:	7033      	strb	r3, [r6, #0]
 8010876:	469c      	mov	ip, r3
 8010878:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801087c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	4660      	mov	r0, ip
 8010888:	602b      	str	r3, [r5, #0]
 801088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801088c:	2c00      	cmp	r4, #0
 801088e:	d0cf      	beq.n	8010830 <rcl_clock_init+0x1c>
 8010890:	fab6 f586 	clz	r5, r6
 8010894:	096d      	lsrs	r5, r5, #5
 8010896:	2e00      	cmp	r6, #0
 8010898:	d0ca      	beq.n	8010830 <rcl_clock_init+0x1c>
 801089a:	46a6      	mov	lr, r4
 801089c:	7035      	strb	r5, [r6, #0]
 801089e:	f106 0c14 	add.w	ip, r6, #20
 80108a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80108a6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80108aa:	e9c6 5503 	strd	r5, r5, [r6, #12]
 80108ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108b2:	f8de 3000 	ldr.w	r3, [lr]
 80108b6:	2010      	movs	r0, #16
 80108b8:	f8cc 3000 	str.w	r3, [ip]
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	6921      	ldr	r1, [r4, #16]
 80108c0:	4798      	blx	r3
 80108c2:	6130      	str	r0, [r6, #16]
 80108c4:	b320      	cbz	r0, 8010910 <rcl_clock_init+0xfc>
 80108c6:	2200      	movs	r2, #0
 80108c8:	2300      	movs	r3, #0
 80108ca:	46ac      	mov	ip, r5
 80108cc:	7205      	strb	r5, [r0, #8]
 80108ce:	e9c0 2300 	strd	r2, r3, [r0]
 80108d2:	4a12      	ldr	r2, [pc, #72]	; (801091c <rcl_clock_init+0x108>)
 80108d4:	2301      	movs	r3, #1
 80108d6:	4660      	mov	r0, ip
 80108d8:	60f2      	str	r2, [r6, #12]
 80108da:	7033      	strb	r3, [r6, #0]
 80108dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108de:	2c00      	cmp	r4, #0
 80108e0:	d0a6      	beq.n	8010830 <rcl_clock_init+0x1c>
 80108e2:	fab6 f386 	clz	r3, r6
 80108e6:	095b      	lsrs	r3, r3, #5
 80108e8:	2e00      	cmp	r6, #0
 80108ea:	d0a1      	beq.n	8010830 <rcl_clock_init+0x1c>
 80108ec:	6133      	str	r3, [r6, #16]
 80108ee:	469c      	mov	ip, r3
 80108f0:	f106 0514 	add.w	r5, r6, #20
 80108f4:	f8df e028 	ldr.w	lr, [pc, #40]	; 8010920 <rcl_clock_init+0x10c>
 80108f8:	2702      	movs	r7, #2
 80108fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80108fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010902:	6823      	ldr	r3, [r4, #0]
 8010904:	4660      	mov	r0, ip
 8010906:	602b      	str	r3, [r5, #0]
 8010908:	f8c6 e00c 	str.w	lr, [r6, #12]
 801090c:	7037      	strb	r7, [r6, #0]
 801090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010910:	f04f 0c0a 	mov.w	ip, #10
 8010914:	e78e      	b.n	8010834 <rcl_clock_init+0x20>
 8010916:	bf00      	nop
 8010918:	080107e9 	.word	0x080107e9
 801091c:	080107f1 	.word	0x080107f1
 8010920:	080107e1 	.word	0x080107e1

08010924 <rcl_clock_get_now>:
 8010924:	b140      	cbz	r0, 8010938 <rcl_clock_get_now+0x14>
 8010926:	b139      	cbz	r1, 8010938 <rcl_clock_get_now+0x14>
 8010928:	7803      	ldrb	r3, [r0, #0]
 801092a:	b11b      	cbz	r3, 8010934 <rcl_clock_get_now+0x10>
 801092c:	68c3      	ldr	r3, [r0, #12]
 801092e:	b10b      	cbz	r3, 8010934 <rcl_clock_get_now+0x10>
 8010930:	6900      	ldr	r0, [r0, #16]
 8010932:	4718      	bx	r3
 8010934:	2001      	movs	r0, #1
 8010936:	4770      	bx	lr
 8010938:	200b      	movs	r0, #11
 801093a:	4770      	bx	lr

0801093c <rcl_timer_call>:
 801093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010940:	b087      	sub	sp, #28
 8010942:	2800      	cmp	r0, #0
 8010944:	d06c      	beq.n	8010a20 <rcl_timer_call+0xe4>
 8010946:	6803      	ldr	r3, [r0, #0]
 8010948:	4604      	mov	r4, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	d062      	beq.n	8010a14 <rcl_timer_call+0xd8>
 801094e:	f3bf 8f5b 	dmb	ish
 8010952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010956:	f3bf 8f5b 	dmb	ish
 801095a:	2b00      	cmp	r3, #0
 801095c:	d14f      	bne.n	80109fe <rcl_timer_call+0xc2>
 801095e:	6803      	ldr	r3, [r0, #0]
 8010960:	a904      	add	r1, sp, #16
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	f7ff ffde 	bl	8010924 <rcl_clock_get_now>
 8010968:	4605      	mov	r5, r0
 801096a:	2800      	cmp	r0, #0
 801096c:	d149      	bne.n	8010a02 <rcl_timer_call+0xc6>
 801096e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010972:	2b00      	cmp	r3, #0
 8010974:	db49      	blt.n	8010a0a <rcl_timer_call+0xce>
 8010976:	2605      	movs	r6, #5
 8010978:	6820      	ldr	r0, [r4, #0]
 801097a:	9600      	str	r6, [sp, #0]
 801097c:	3020      	adds	r0, #32
 801097e:	f001 fd23 	bl	80123c8 <__atomic_exchange_8>
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	4680      	mov	r8, r0
 8010986:	f3bf 8f5b 	dmb	ish
 801098a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801098e:	f3bf 8f5b 	dmb	ish
 8010992:	6820      	ldr	r0, [r4, #0]
 8010994:	4689      	mov	r9, r1
 8010996:	4631      	mov	r1, r6
 8010998:	3028      	adds	r0, #40	; 0x28
 801099a:	f001 fca9 	bl	80122f0 <__atomic_load_8>
 801099e:	460f      	mov	r7, r1
 80109a0:	4631      	mov	r1, r6
 80109a2:	4606      	mov	r6, r0
 80109a4:	6820      	ldr	r0, [r4, #0]
 80109a6:	3018      	adds	r0, #24
 80109a8:	f001 fca2 	bl	80122f0 <__atomic_load_8>
 80109ac:	4602      	mov	r2, r0
 80109ae:	9804      	ldr	r0, [sp, #16]
 80109b0:	460b      	mov	r3, r1
 80109b2:	18b6      	adds	r6, r6, r2
 80109b4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80109b8:	4692      	mov	sl, r2
 80109ba:	eb47 0701 	adc.w	r7, r7, r1
 80109be:	4286      	cmp	r6, r0
 80109c0:	eb77 010c 	sbcs.w	r1, r7, ip
 80109c4:	da04      	bge.n	80109d0 <rcl_timer_call+0x94>
 80109c6:	ea53 0102 	orrs.w	r1, r3, r2
 80109ca:	d12e      	bne.n	8010a2a <rcl_timer_call+0xee>
 80109cc:	4606      	mov	r6, r0
 80109ce:	4667      	mov	r7, ip
 80109d0:	6820      	ldr	r0, [r4, #0]
 80109d2:	2105      	movs	r1, #5
 80109d4:	4632      	mov	r2, r6
 80109d6:	463b      	mov	r3, r7
 80109d8:	3028      	adds	r0, #40	; 0x28
 80109da:	9100      	str	r1, [sp, #0]
 80109dc:	f001 fcbe 	bl	801235c <__atomic_store_8>
 80109e0:	f1bb 0f00 	cmp.w	fp, #0
 80109e4:	d00d      	beq.n	8010a02 <rcl_timer_call+0xc6>
 80109e6:	9a04      	ldr	r2, [sp, #16]
 80109e8:	4620      	mov	r0, r4
 80109ea:	9b05      	ldr	r3, [sp, #20]
 80109ec:	ebb2 0208 	subs.w	r2, r2, r8
 80109f0:	eb63 0309 	sbc.w	r3, r3, r9
 80109f4:	47d8      	blx	fp
 80109f6:	4628      	mov	r0, r5
 80109f8:	b007      	add	sp, #28
 80109fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fe:	f240 3521 	movw	r5, #801	; 0x321
 8010a02:	4628      	mov	r0, r5
 8010a04:	b007      	add	sp, #28
 8010a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a0a:	2501      	movs	r5, #1
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	b007      	add	sp, #28
 8010a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a14:	f44f 7548 	mov.w	r5, #800	; 0x320
 8010a18:	4628      	mov	r0, r5
 8010a1a:	b007      	add	sp, #28
 8010a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a20:	250b      	movs	r5, #11
 8010a22:	4628      	mov	r0, r5
 8010a24:	b007      	add	sp, #28
 8010a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a2a:	1b80      	subs	r0, r0, r6
 8010a2c:	eb6c 0107 	sbc.w	r1, ip, r7
 8010a30:	3801      	subs	r0, #1
 8010a32:	f161 0100 	sbc.w	r1, r1, #0
 8010a36:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010a3a:	f7ef fc51 	bl	80002e0 <__aeabi_ldivmod>
 8010a3e:	9b02      	ldr	r3, [sp, #8]
 8010a40:	3001      	adds	r0, #1
 8010a42:	f141 0100 	adc.w	r1, r1, #0
 8010a46:	fb00 f303 	mul.w	r3, r0, r3
 8010a4a:	fb01 330a 	mla	r3, r1, sl, r3
 8010a4e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010a52:	1986      	adds	r6, r0, r6
 8010a54:	4453      	add	r3, sl
 8010a56:	eb43 0707 	adc.w	r7, r3, r7
 8010a5a:	e7b9      	b.n	80109d0 <rcl_timer_call+0x94>

08010a5c <rcl_timer_is_ready>:
 8010a5c:	b570      	push	{r4, r5, r6, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	b380      	cbz	r0, 8010ac4 <rcl_timer_is_ready+0x68>
 8010a62:	6803      	ldr	r3, [r0, #0]
 8010a64:	4604      	mov	r4, r0
 8010a66:	b38b      	cbz	r3, 8010acc <rcl_timer_is_ready+0x70>
 8010a68:	460d      	mov	r5, r1
 8010a6a:	b359      	cbz	r1, 8010ac4 <rcl_timer_is_ready+0x68>
 8010a6c:	f3bf 8f5b 	dmb	ish
 8010a70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a74:	f3bf 8f5b 	dmb	ish
 8010a78:	b953      	cbnz	r3, 8010a90 <rcl_timer_is_ready+0x34>
 8010a7a:	6803      	ldr	r3, [r0, #0]
 8010a7c:	4669      	mov	r1, sp
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	f7ff ff50 	bl	8010924 <rcl_clock_get_now>
 8010a84:	4606      	mov	r6, r0
 8010a86:	b148      	cbz	r0, 8010a9c <rcl_timer_is_ready+0x40>
 8010a88:	f240 3321 	movw	r3, #801	; 0x321
 8010a8c:	4298      	cmp	r0, r3
 8010a8e:	d102      	bne.n	8010a96 <rcl_timer_is_ready+0x3a>
 8010a90:	2300      	movs	r3, #0
 8010a92:	461e      	mov	r6, r3
 8010a94:	702b      	strb	r3, [r5, #0]
 8010a96:	4630      	mov	r0, r6
 8010a98:	b002      	add	sp, #8
 8010a9a:	bd70      	pop	{r4, r5, r6, pc}
 8010a9c:	6820      	ldr	r0, [r4, #0]
 8010a9e:	2105      	movs	r1, #5
 8010aa0:	3028      	adds	r0, #40	; 0x28
 8010aa2:	f001 fc25 	bl	80122f0 <__atomic_load_8>
 8010aa6:	9b00      	ldr	r3, [sp, #0]
 8010aa8:	1ac0      	subs	r0, r0, r3
 8010aaa:	9b01      	ldr	r3, [sp, #4]
 8010aac:	eb61 0103 	sbc.w	r1, r1, r3
 8010ab0:	2801      	cmp	r0, #1
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f171 0300 	sbcs.w	r3, r1, #0
 8010ab8:	bfb4      	ite	lt
 8010aba:	2301      	movlt	r3, #1
 8010abc:	2300      	movge	r3, #0
 8010abe:	702b      	strb	r3, [r5, #0]
 8010ac0:	b002      	add	sp, #8
 8010ac2:	bd70      	pop	{r4, r5, r6, pc}
 8010ac4:	260b      	movs	r6, #11
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	b002      	add	sp, #8
 8010aca:	bd70      	pop	{r4, r5, r6, pc}
 8010acc:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010ad0:	e7e1      	b.n	8010a96 <rcl_timer_is_ready+0x3a>
 8010ad2:	bf00      	nop

08010ad4 <rcl_timer_get_time_until_next_call>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	b330      	cbz	r0, 8010b28 <rcl_timer_get_time_until_next_call+0x54>
 8010ada:	6803      	ldr	r3, [r0, #0]
 8010adc:	4604      	mov	r4, r0
 8010ade:	b33b      	cbz	r3, 8010b30 <rcl_timer_get_time_until_next_call+0x5c>
 8010ae0:	460d      	mov	r5, r1
 8010ae2:	b309      	cbz	r1, 8010b28 <rcl_timer_get_time_until_next_call+0x54>
 8010ae4:	f3bf 8f5b 	dmb	ish
 8010ae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010aec:	f3bf 8f5b 	dmb	ish
 8010af0:	b9ab      	cbnz	r3, 8010b1e <rcl_timer_get_time_until_next_call+0x4a>
 8010af2:	6803      	ldr	r3, [r0, #0]
 8010af4:	4669      	mov	r1, sp
 8010af6:	6818      	ldr	r0, [r3, #0]
 8010af8:	f7ff ff14 	bl	8010924 <rcl_clock_get_now>
 8010afc:	4606      	mov	r6, r0
 8010afe:	b958      	cbnz	r0, 8010b18 <rcl_timer_get_time_until_next_call+0x44>
 8010b00:	6820      	ldr	r0, [r4, #0]
 8010b02:	2105      	movs	r1, #5
 8010b04:	3028      	adds	r0, #40	; 0x28
 8010b06:	f001 fbf3 	bl	80122f0 <__atomic_load_8>
 8010b0a:	9b00      	ldr	r3, [sp, #0]
 8010b0c:	1ac0      	subs	r0, r0, r3
 8010b0e:	9b01      	ldr	r3, [sp, #4]
 8010b10:	eb61 0103 	sbc.w	r1, r1, r3
 8010b14:	6028      	str	r0, [r5, #0]
 8010b16:	6069      	str	r1, [r5, #4]
 8010b18:	4630      	mov	r0, r6
 8010b1a:	b002      	add	sp, #8
 8010b1c:	bd70      	pop	{r4, r5, r6, pc}
 8010b1e:	f240 3621 	movw	r6, #801	; 0x321
 8010b22:	4630      	mov	r0, r6
 8010b24:	b002      	add	sp, #8
 8010b26:	bd70      	pop	{r4, r5, r6, pc}
 8010b28:	260b      	movs	r6, #11
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	b002      	add	sp, #8
 8010b2e:	bd70      	pop	{r4, r5, r6, pc}
 8010b30:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010b34:	e7f0      	b.n	8010b18 <rcl_timer_get_time_until_next_call+0x44>
 8010b36:	bf00      	nop

08010b38 <rcl_timer_get_guard_condition>:
 8010b38:	b130      	cbz	r0, 8010b48 <rcl_timer_get_guard_condition+0x10>
 8010b3a:	6800      	ldr	r0, [r0, #0]
 8010b3c:	b120      	cbz	r0, 8010b48 <rcl_timer_get_guard_condition+0x10>
 8010b3e:	68c3      	ldr	r3, [r0, #12]
 8010b40:	b10b      	cbz	r3, 8010b46 <rcl_timer_get_guard_condition+0xe>
 8010b42:	3008      	adds	r0, #8
 8010b44:	4770      	bx	lr
 8010b46:	4618      	mov	r0, r3
 8010b48:	4770      	bx	lr
 8010b4a:	bf00      	nop

08010b4c <rcl_validate_enclave_name_with_size>:
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d049      	beq.n	8010be4 <rcl_validate_enclave_name_with_size+0x98>
 8010b50:	b570      	push	{r4, r5, r6, lr}
 8010b52:	4615      	mov	r5, r2
 8010b54:	b0c2      	sub	sp, #264	; 0x108
 8010b56:	b19a      	cbz	r2, 8010b80 <rcl_validate_enclave_name_with_size+0x34>
 8010b58:	461e      	mov	r6, r3
 8010b5a:	466a      	mov	r2, sp
 8010b5c:	ab01      	add	r3, sp, #4
 8010b5e:	460c      	mov	r4, r1
 8010b60:	f002 f88e 	bl	8012c80 <rmw_validate_namespace_with_size>
 8010b64:	4684      	mov	ip, r0
 8010b66:	b9b8      	cbnz	r0, 8010b98 <rcl_validate_enclave_name_with_size+0x4c>
 8010b68:	9900      	ldr	r1, [sp, #0]
 8010b6a:	b171      	cbz	r1, 8010b8a <rcl_validate_enclave_name_with_size+0x3e>
 8010b6c:	2907      	cmp	r1, #7
 8010b6e:	d019      	beq.n	8010ba4 <rcl_validate_enclave_name_with_size+0x58>
 8010b70:	1e4b      	subs	r3, r1, #1
 8010b72:	2b05      	cmp	r3, #5
 8010b74:	d83a      	bhi.n	8010bec <rcl_validate_enclave_name_with_size+0xa0>
 8010b76:	e8df f003 	tbb	[pc, r3]
 8010b7a:	2926      	.short	0x2926
 8010b7c:	1d322f2c 	.word	0x1d322f2c
 8010b80:	f04f 0c0b 	mov.w	ip, #11
 8010b84:	4660      	mov	r0, ip
 8010b86:	b042      	add	sp, #264	; 0x108
 8010b88:	bd70      	pop	{r4, r5, r6, pc}
 8010b8a:	2907      	cmp	r1, #7
 8010b8c:	d00a      	beq.n	8010ba4 <rcl_validate_enclave_name_with_size+0x58>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	4660      	mov	r0, ip
 8010b92:	602b      	str	r3, [r5, #0]
 8010b94:	b042      	add	sp, #264	; 0x108
 8010b96:	bd70      	pop	{r4, r5, r6, pc}
 8010b98:	f7fe fe48 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 8010b9c:	4684      	mov	ip, r0
 8010b9e:	4660      	mov	r0, ip
 8010ba0:	b042      	add	sp, #264	; 0x108
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}
 8010ba4:	2cff      	cmp	r4, #255	; 0xff
 8010ba6:	d9f2      	bls.n	8010b8e <rcl_validate_enclave_name_with_size+0x42>
 8010ba8:	6029      	str	r1, [r5, #0]
 8010baa:	2e00      	cmp	r6, #0
 8010bac:	d0ea      	beq.n	8010b84 <rcl_validate_enclave_name_with_size+0x38>
 8010bae:	23fe      	movs	r3, #254	; 0xfe
 8010bb0:	6033      	str	r3, [r6, #0]
 8010bb2:	e7e7      	b.n	8010b84 <rcl_validate_enclave_name_with_size+0x38>
 8010bb4:	2306      	movs	r3, #6
 8010bb6:	602b      	str	r3, [r5, #0]
 8010bb8:	2e00      	cmp	r6, #0
 8010bba:	d0e3      	beq.n	8010b84 <rcl_validate_enclave_name_with_size+0x38>
 8010bbc:	9b01      	ldr	r3, [sp, #4]
 8010bbe:	4660      	mov	r0, ip
 8010bc0:	6033      	str	r3, [r6, #0]
 8010bc2:	b042      	add	sp, #264	; 0x108
 8010bc4:	bd70      	pop	{r4, r5, r6, pc}
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	602b      	str	r3, [r5, #0]
 8010bca:	e7f5      	b.n	8010bb8 <rcl_validate_enclave_name_with_size+0x6c>
 8010bcc:	2302      	movs	r3, #2
 8010bce:	602b      	str	r3, [r5, #0]
 8010bd0:	e7f2      	b.n	8010bb8 <rcl_validate_enclave_name_with_size+0x6c>
 8010bd2:	2303      	movs	r3, #3
 8010bd4:	602b      	str	r3, [r5, #0]
 8010bd6:	e7ef      	b.n	8010bb8 <rcl_validate_enclave_name_with_size+0x6c>
 8010bd8:	2304      	movs	r3, #4
 8010bda:	602b      	str	r3, [r5, #0]
 8010bdc:	e7ec      	b.n	8010bb8 <rcl_validate_enclave_name_with_size+0x6c>
 8010bde:	2305      	movs	r3, #5
 8010be0:	602b      	str	r3, [r5, #0]
 8010be2:	e7e9      	b.n	8010bb8 <rcl_validate_enclave_name_with_size+0x6c>
 8010be4:	f04f 0c0b 	mov.w	ip, #11
 8010be8:	4660      	mov	r0, ip
 8010bea:	4770      	bx	lr
 8010bec:	460b      	mov	r3, r1
 8010bee:	4a04      	ldr	r2, [pc, #16]	; (8010c00 <rcl_validate_enclave_name_with_size+0xb4>)
 8010bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010bf4:	a802      	add	r0, sp, #8
 8010bf6:	f001 fd33 	bl	8012660 <rcutils_snprintf>
 8010bfa:	f04f 0c01 	mov.w	ip, #1
 8010bfe:	e7c1      	b.n	8010b84 <rcl_validate_enclave_name_with_size+0x38>
 8010c00:	08018230 	.word	0x08018230

08010c04 <rcl_validate_enclave_name>:
 8010c04:	b168      	cbz	r0, 8010c22 <rcl_validate_enclave_name+0x1e>
 8010c06:	b570      	push	{r4, r5, r6, lr}
 8010c08:	460d      	mov	r5, r1
 8010c0a:	4616      	mov	r6, r2
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	f7ef fb09 	bl	8000224 <strlen>
 8010c12:	4633      	mov	r3, r6
 8010c14:	4601      	mov	r1, r0
 8010c16:	462a      	mov	r2, r5
 8010c18:	4620      	mov	r0, r4
 8010c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c1e:	f7ff bf95 	b.w	8010b4c <rcl_validate_enclave_name_with_size>
 8010c22:	200b      	movs	r0, #11
 8010c24:	4770      	bx	lr
 8010c26:	bf00      	nop

08010c28 <rcl_get_zero_initialized_wait_set>:
 8010c28:	b510      	push	{r4, lr}
 8010c2a:	4c08      	ldr	r4, [pc, #32]	; (8010c4c <rcl_get_zero_initialized_wait_set+0x24>)
 8010c2c:	4686      	mov	lr, r0
 8010c2e:	4684      	mov	ip, r0
 8010c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	4670      	mov	r0, lr
 8010c46:	f8cc 3000 	str.w	r3, [ip]
 8010c4a:	bd10      	pop	{r4, pc}
 8010c4c:	08018290 	.word	0x08018290

08010c50 <rcl_wait_set_is_valid>:
 8010c50:	b118      	cbz	r0, 8010c5a <rcl_wait_set_is_valid+0xa>
 8010c52:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010c54:	3800      	subs	r0, #0
 8010c56:	bf18      	it	ne
 8010c58:	2001      	movne	r0, #1
 8010c5a:	4770      	bx	lr

08010c5c <rcl_wait_set_fini>:
 8010c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c60:	b082      	sub	sp, #8
 8010c62:	2800      	cmp	r0, #0
 8010c64:	f000 8095 	beq.w	8010d92 <rcl_wait_set_fini+0x136>
 8010c68:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	2e00      	cmp	r6, #0
 8010c6e:	f000 808c 	beq.w	8010d8a <rcl_wait_set_fini+0x12e>
 8010c72:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8010c74:	f003 fa0c 	bl	8014090 <rmw_destroy_wait_set>
 8010c78:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010c7a:	1e06      	subs	r6, r0, #0
 8010c7c:	bf18      	it	ne
 8010c7e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8010c82:	2d00      	cmp	r5, #0
 8010c84:	f000 8081 	beq.w	8010d8a <rcl_wait_set_fini+0x12e>
 8010c88:	2700      	movs	r7, #0
 8010c8a:	6820      	ldr	r0, [r4, #0]
 8010c8c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010c90:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010c92:	6067      	str	r7, [r4, #4]
 8010c94:	602f      	str	r7, [r5, #0]
 8010c96:	b120      	cbz	r0, 8010ca2 <rcl_wait_set_fini+0x46>
 8010c98:	9101      	str	r1, [sp, #4]
 8010c9a:	47c0      	blx	r8
 8010c9c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010c9e:	9901      	ldr	r1, [sp, #4]
 8010ca0:	6027      	str	r7, [r4, #0]
 8010ca2:	68a8      	ldr	r0, [r5, #8]
 8010ca4:	b120      	cbz	r0, 8010cb0 <rcl_wait_set_fini+0x54>
 8010ca6:	47c0      	blx	r8
 8010ca8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010caa:	2300      	movs	r3, #0
 8010cac:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010cb0:	f04f 0800 	mov.w	r8, #0
 8010cb4:	68a0      	ldr	r0, [r4, #8]
 8010cb6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010cb8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010cba:	f8c4 800c 	str.w	r8, [r4, #12]
 8010cbe:	f8c5 800c 	str.w	r8, [r5, #12]
 8010cc2:	b128      	cbz	r0, 8010cd0 <rcl_wait_set_fini+0x74>
 8010cc4:	47b8      	blx	r7
 8010cc6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010cc8:	f8c4 8008 	str.w	r8, [r4, #8]
 8010ccc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010cce:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010cd0:	f04f 0800 	mov.w	r8, #0
 8010cd4:	6968      	ldr	r0, [r5, #20]
 8010cd6:	f8c5 8010 	str.w	r8, [r5, #16]
 8010cda:	b128      	cbz	r0, 8010ce8 <rcl_wait_set_fini+0x8c>
 8010cdc:	47b8      	blx	r7
 8010cde:	f8c5 8014 	str.w	r8, [r5, #20]
 8010ce2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010ce4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010ce6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010ce8:	f04f 0800 	mov.w	r8, #0
 8010cec:	6920      	ldr	r0, [r4, #16]
 8010cee:	f8c4 8014 	str.w	r8, [r4, #20]
 8010cf2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8010cf6:	b128      	cbz	r0, 8010d04 <rcl_wait_set_fini+0xa8>
 8010cf8:	47b8      	blx	r7
 8010cfa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010cfc:	f8c4 8010 	str.w	r8, [r4, #16]
 8010d00:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010d02:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010d04:	f04f 0800 	mov.w	r8, #0
 8010d08:	69a0      	ldr	r0, [r4, #24]
 8010d0a:	f8c4 801c 	str.w	r8, [r4, #28]
 8010d0e:	f8c5 8018 	str.w	r8, [r5, #24]
 8010d12:	b128      	cbz	r0, 8010d20 <rcl_wait_set_fini+0xc4>
 8010d14:	9101      	str	r1, [sp, #4]
 8010d16:	47b8      	blx	r7
 8010d18:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010d1a:	9901      	ldr	r1, [sp, #4]
 8010d1c:	f8c4 8018 	str.w	r8, [r4, #24]
 8010d20:	6a28      	ldr	r0, [r5, #32]
 8010d22:	b120      	cbz	r0, 8010d2e <rcl_wait_set_fini+0xd2>
 8010d24:	47b8      	blx	r7
 8010d26:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010d2e:	2700      	movs	r7, #0
 8010d30:	6a20      	ldr	r0, [r4, #32]
 8010d32:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010d36:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010d38:	6267      	str	r7, [r4, #36]	; 0x24
 8010d3a:	626f      	str	r7, [r5, #36]	; 0x24
 8010d3c:	b120      	cbz	r0, 8010d48 <rcl_wait_set_fini+0xec>
 8010d3e:	9101      	str	r1, [sp, #4]
 8010d40:	47c0      	blx	r8
 8010d42:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010d44:	9901      	ldr	r1, [sp, #4]
 8010d46:	6227      	str	r7, [r4, #32]
 8010d48:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8010d4a:	b120      	cbz	r0, 8010d56 <rcl_wait_set_fini+0xfa>
 8010d4c:	47c0      	blx	r8
 8010d4e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010d50:	2300      	movs	r3, #0
 8010d52:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010d56:	2700      	movs	r7, #0
 8010d58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010d5a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010d5e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010d60:	62e7      	str	r7, [r4, #44]	; 0x2c
 8010d62:	632f      	str	r7, [r5, #48]	; 0x30
 8010d64:	b120      	cbz	r0, 8010d70 <rcl_wait_set_fini+0x114>
 8010d66:	9101      	str	r1, [sp, #4]
 8010d68:	47c0      	blx	r8
 8010d6a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010d6c:	9901      	ldr	r1, [sp, #4]
 8010d6e:	62a7      	str	r7, [r4, #40]	; 0x28
 8010d70:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8010d72:	b120      	cbz	r0, 8010d7e <rcl_wait_set_fini+0x122>
 8010d74:	47c0      	blx	r8
 8010d76:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010d78:	2300      	movs	r3, #0
 8010d7a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8010d7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8010d80:	4628      	mov	r0, r5
 8010d82:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010d84:	4798      	blx	r3
 8010d86:	2300      	movs	r3, #0
 8010d88:	6323      	str	r3, [r4, #48]	; 0x30
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	b002      	add	sp, #8
 8010d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d92:	260b      	movs	r6, #11
 8010d94:	4630      	mov	r0, r6
 8010d96:	b002      	add	sp, #8
 8010d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d9c <rcl_wait_set_add_subscription>:
 8010d9c:	b318      	cbz	r0, 8010de6 <rcl_wait_set_add_subscription+0x4a>
 8010d9e:	b538      	push	{r3, r4, r5, lr}
 8010da0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010da2:	4604      	mov	r4, r0
 8010da4:	b30b      	cbz	r3, 8010dea <rcl_wait_set_add_subscription+0x4e>
 8010da6:	b319      	cbz	r1, 8010df0 <rcl_wait_set_add_subscription+0x54>
 8010da8:	681d      	ldr	r5, [r3, #0]
 8010daa:	6840      	ldr	r0, [r0, #4]
 8010dac:	4285      	cmp	r5, r0
 8010dae:	d217      	bcs.n	8010de0 <rcl_wait_set_add_subscription+0x44>
 8010db0:	1c68      	adds	r0, r5, #1
 8010db2:	6018      	str	r0, [r3, #0]
 8010db4:	6823      	ldr	r3, [r4, #0]
 8010db6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010dba:	b102      	cbz	r2, 8010dbe <rcl_wait_set_add_subscription+0x22>
 8010dbc:	6015      	str	r5, [r2, #0]
 8010dbe:	4608      	mov	r0, r1
 8010dc0:	f7ff fcfe 	bl	80107c0 <rcl_subscription_get_rmw_handle>
 8010dc4:	b150      	cbz	r0, 8010ddc <rcl_wait_set_add_subscription+0x40>
 8010dc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010dc8:	6842      	ldr	r2, [r0, #4]
 8010dca:	2000      	movs	r0, #0
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010dd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010dd4:	6853      	ldr	r3, [r2, #4]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	6053      	str	r3, [r2, #4]
 8010dda:	bd38      	pop	{r3, r4, r5, pc}
 8010ddc:	2001      	movs	r0, #1
 8010dde:	bd38      	pop	{r3, r4, r5, pc}
 8010de0:	f240 3086 	movw	r0, #902	; 0x386
 8010de4:	bd38      	pop	{r3, r4, r5, pc}
 8010de6:	200b      	movs	r0, #11
 8010de8:	4770      	bx	lr
 8010dea:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	200b      	movs	r0, #11
 8010df2:	bd38      	pop	{r3, r4, r5, pc}

08010df4 <rcl_wait_set_clear>:
 8010df4:	2800      	cmp	r0, #0
 8010df6:	d074      	beq.n	8010ee2 <rcl_wait_set_clear+0xee>
 8010df8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010dfa:	b510      	push	{r4, lr}
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d071      	beq.n	8010ee6 <rcl_wait_set_clear+0xf2>
 8010e02:	6800      	ldr	r0, [r0, #0]
 8010e04:	b138      	cbz	r0, 8010e16 <rcl_wait_set_clear+0x22>
 8010e06:	6862      	ldr	r2, [r4, #4]
 8010e08:	2100      	movs	r1, #0
 8010e0a:	0092      	lsls	r2, r2, #2
 8010e0c:	f005 ff44 	bl	8016c98 <memset>
 8010e10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e12:	2200      	movs	r2, #0
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	68a0      	ldr	r0, [r4, #8]
 8010e18:	b138      	cbz	r0, 8010e2a <rcl_wait_set_clear+0x36>
 8010e1a:	68e2      	ldr	r2, [r4, #12]
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	0092      	lsls	r2, r2, #2
 8010e20:	f005 ff3a 	bl	8016c98 <memset>
 8010e24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e26:	2200      	movs	r2, #0
 8010e28:	60da      	str	r2, [r3, #12]
 8010e2a:	69a0      	ldr	r0, [r4, #24]
 8010e2c:	b138      	cbz	r0, 8010e3e <rcl_wait_set_clear+0x4a>
 8010e2e:	69e2      	ldr	r2, [r4, #28]
 8010e30:	2100      	movs	r1, #0
 8010e32:	0092      	lsls	r2, r2, #2
 8010e34:	f005 ff30 	bl	8016c98 <memset>
 8010e38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	619a      	str	r2, [r3, #24]
 8010e3e:	6a20      	ldr	r0, [r4, #32]
 8010e40:	b138      	cbz	r0, 8010e52 <rcl_wait_set_clear+0x5e>
 8010e42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010e44:	2100      	movs	r1, #0
 8010e46:	0092      	lsls	r2, r2, #2
 8010e48:	f005 ff26 	bl	8016c98 <memset>
 8010e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e4e:	2200      	movs	r2, #0
 8010e50:	625a      	str	r2, [r3, #36]	; 0x24
 8010e52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010e54:	b138      	cbz	r0, 8010e66 <rcl_wait_set_clear+0x72>
 8010e56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010e58:	2100      	movs	r1, #0
 8010e5a:	0092      	lsls	r2, r2, #2
 8010e5c:	f005 ff1c 	bl	8016c98 <memset>
 8010e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e62:	2200      	movs	r2, #0
 8010e64:	631a      	str	r2, [r3, #48]	; 0x30
 8010e66:	6920      	ldr	r0, [r4, #16]
 8010e68:	b138      	cbz	r0, 8010e7a <rcl_wait_set_clear+0x86>
 8010e6a:	6962      	ldr	r2, [r4, #20]
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	0092      	lsls	r2, r2, #2
 8010e70:	f005 ff12 	bl	8016c98 <memset>
 8010e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e76:	2200      	movs	r2, #0
 8010e78:	641a      	str	r2, [r3, #64]	; 0x40
 8010e7a:	6898      	ldr	r0, [r3, #8]
 8010e7c:	b138      	cbz	r0, 8010e8e <rcl_wait_set_clear+0x9a>
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	2100      	movs	r1, #0
 8010e82:	0092      	lsls	r2, r2, #2
 8010e84:	f005 ff08 	bl	8016c98 <memset>
 8010e88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	605a      	str	r2, [r3, #4]
 8010e8e:	6958      	ldr	r0, [r3, #20]
 8010e90:	b138      	cbz	r0, 8010ea2 <rcl_wait_set_clear+0xae>
 8010e92:	691a      	ldr	r2, [r3, #16]
 8010e94:	2100      	movs	r1, #0
 8010e96:	0092      	lsls	r2, r2, #2
 8010e98:	f005 fefe 	bl	8016c98 <memset>
 8010e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	611a      	str	r2, [r3, #16]
 8010ea2:	6a18      	ldr	r0, [r3, #32]
 8010ea4:	b138      	cbz	r0, 8010eb6 <rcl_wait_set_clear+0xc2>
 8010ea6:	69da      	ldr	r2, [r3, #28]
 8010ea8:	2100      	movs	r1, #0
 8010eaa:	0092      	lsls	r2, r2, #2
 8010eac:	f005 fef4 	bl	8016c98 <memset>
 8010eb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	61da      	str	r2, [r3, #28]
 8010eb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010eb8:	b138      	cbz	r0, 8010eca <rcl_wait_set_clear+0xd6>
 8010eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	0092      	lsls	r2, r2, #2
 8010ec0:	f005 feea 	bl	8016c98 <memset>
 8010ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8010eca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010ecc:	b140      	cbz	r0, 8010ee0 <rcl_wait_set_clear+0xec>
 8010ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	0092      	lsls	r2, r2, #2
 8010ed4:	f005 fee0 	bl	8016c98 <memset>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010edc:	4618      	mov	r0, r3
 8010ede:	6353      	str	r3, [r2, #52]	; 0x34
 8010ee0:	bd10      	pop	{r4, pc}
 8010ee2:	200b      	movs	r0, #11
 8010ee4:	4770      	bx	lr
 8010ee6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010eea:	bd10      	pop	{r4, pc}

08010eec <rcl_wait_set_resize>:
 8010eec:	2800      	cmp	r0, #0
 8010eee:	f000 8180 	beq.w	80111f2 <rcl_wait_set_resize+0x306>
 8010ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8010ef8:	b083      	sub	sp, #12
 8010efa:	4605      	mov	r5, r0
 8010efc:	2c00      	cmp	r4, #0
 8010efe:	f000 817a 	beq.w	80111f6 <rcl_wait_set_resize+0x30a>
 8010f02:	f04f 0900 	mov.w	r9, #0
 8010f06:	461f      	mov	r7, r3
 8010f08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010f0c:	4688      	mov	r8, r1
 8010f0e:	4616      	mov	r6, r2
 8010f10:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8010f14:	f8c0 9004 	str.w	r9, [r0, #4]
 8010f18:	f8c4 9000 	str.w	r9, [r4]
 8010f1c:	2900      	cmp	r1, #0
 8010f1e:	f000 80bf 	beq.w	80110a0 <rcl_wait_set_resize+0x1b4>
 8010f22:	008c      	lsls	r4, r1, #2
 8010f24:	4652      	mov	r2, sl
 8010f26:	6800      	ldr	r0, [r0, #0]
 8010f28:	4621      	mov	r1, r4
 8010f2a:	9301      	str	r3, [sp, #4]
 8010f2c:	4798      	blx	r3
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	6028      	str	r0, [r5, #0]
 8010f32:	2800      	cmp	r0, #0
 8010f34:	f000 80f6 	beq.w	8011124 <rcl_wait_set_resize+0x238>
 8010f38:	4622      	mov	r2, r4
 8010f3a:	4649      	mov	r1, r9
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	f005 feab 	bl	8016c98 <memset>
 8010f42:	f8c5 8004 	str.w	r8, [r5, #4]
 8010f46:	4652      	mov	r2, sl
 8010f48:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8010f4c:	4621      	mov	r1, r4
 8010f4e:	9b01      	ldr	r3, [sp, #4]
 8010f50:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010f54:	f8c8 9004 	str.w	r9, [r8, #4]
 8010f58:	4798      	blx	r3
 8010f5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010f5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f000 814a 	beq.w	80111fc <rcl_wait_set_resize+0x310>
 8010f68:	4622      	mov	r2, r4
 8010f6a:	4649      	mov	r1, r9
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f005 fe93 	bl	8016c98 <memset>
 8010f72:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010f74:	f04f 0800 	mov.w	r8, #0
 8010f78:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010f7c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8010f80:	f8c5 800c 	str.w	r8, [r5, #12]
 8010f84:	f8c4 800c 	str.w	r8, [r4, #12]
 8010f88:	2e00      	cmp	r6, #0
 8010f8a:	f040 809b 	bne.w	80110c4 <rcl_wait_set_resize+0x1d8>
 8010f8e:	68a8      	ldr	r0, [r5, #8]
 8010f90:	b128      	cbz	r0, 8010f9e <rcl_wait_set_resize+0xb2>
 8010f92:	4649      	mov	r1, r9
 8010f94:	4790      	blx	r2
 8010f96:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010f98:	60ae      	str	r6, [r5, #8]
 8010f9a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010f9e:	f04f 0800 	mov.w	r8, #0
 8010fa2:	19f6      	adds	r6, r6, r7
 8010fa4:	f8c4 8010 	str.w	r8, [r4, #16]
 8010fa8:	f040 80a2 	bne.w	80110f0 <rcl_wait_set_resize+0x204>
 8010fac:	6960      	ldr	r0, [r4, #20]
 8010fae:	b130      	cbz	r0, 8010fbe <rcl_wait_set_resize+0xd2>
 8010fb0:	4649      	mov	r1, r9
 8010fb2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010fb4:	4798      	blx	r3
 8010fb6:	6166      	str	r6, [r4, #20]
 8010fb8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010fba:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010fbe:	2600      	movs	r6, #0
 8010fc0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010fc4:	616e      	str	r6, [r5, #20]
 8010fc6:	6426      	str	r6, [r4, #64]	; 0x40
 8010fc8:	2f00      	cmp	r7, #0
 8010fca:	f040 80af 	bne.w	801112c <rcl_wait_set_resize+0x240>
 8010fce:	6928      	ldr	r0, [r5, #16]
 8010fd0:	b138      	cbz	r0, 8010fe2 <rcl_wait_set_resize+0xf6>
 8010fd2:	4649      	mov	r1, r9
 8010fd4:	47d0      	blx	sl
 8010fd6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010fd8:	612f      	str	r7, [r5, #16]
 8010fda:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010fde:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010fe2:	2600      	movs	r6, #0
 8010fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fe6:	61ee      	str	r6, [r5, #28]
 8010fe8:	61a6      	str	r6, [r4, #24]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f040 8093 	bne.w	8011116 <rcl_wait_set_resize+0x22a>
 8010ff0:	69a8      	ldr	r0, [r5, #24]
 8010ff2:	b120      	cbz	r0, 8010ffe <rcl_wait_set_resize+0x112>
 8010ff4:	4649      	mov	r1, r9
 8010ff6:	47d0      	blx	sl
 8010ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ffa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ffc:	61ab      	str	r3, [r5, #24]
 8010ffe:	6a20      	ldr	r0, [r4, #32]
 8011000:	b128      	cbz	r0, 801100e <rcl_wait_set_resize+0x122>
 8011002:	4649      	mov	r1, r9
 8011004:	47d0      	blx	sl
 8011006:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011008:	2300      	movs	r3, #0
 801100a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801100e:	2600      	movs	r6, #0
 8011010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011012:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8011014:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8011018:	626e      	str	r6, [r5, #36]	; 0x24
 801101a:	6266      	str	r6, [r4, #36]	; 0x24
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 8098 	beq.w	8011152 <rcl_wait_set_resize+0x266>
 8011022:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011026:	463a      	mov	r2, r7
 8011028:	6a28      	ldr	r0, [r5, #32]
 801102a:	4651      	mov	r1, sl
 801102c:	47c8      	blx	r9
 801102e:	6228      	str	r0, [r5, #32]
 8011030:	2800      	cmp	r0, #0
 8011032:	d077      	beq.n	8011124 <rcl_wait_set_resize+0x238>
 8011034:	4652      	mov	r2, sl
 8011036:	4631      	mov	r1, r6
 8011038:	f005 fe2e 	bl	8016c98 <memset>
 801103c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011040:	463a      	mov	r2, r7
 8011042:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011044:	4651      	mov	r1, sl
 8011046:	626b      	str	r3, [r5, #36]	; 0x24
 8011048:	62a6      	str	r6, [r4, #40]	; 0x28
 801104a:	47c8      	blx	r9
 801104c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801104e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8011050:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011052:	2c00      	cmp	r4, #0
 8011054:	f000 80f2 	beq.w	801123c <rcl_wait_set_resize+0x350>
 8011058:	4620      	mov	r0, r4
 801105a:	4652      	mov	r2, sl
 801105c:	4631      	mov	r1, r6
 801105e:	f005 fe1b 	bl	8016c98 <memset>
 8011062:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011064:	2600      	movs	r6, #0
 8011066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011068:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801106a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801106e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8011070:	6326      	str	r6, [r4, #48]	; 0x30
 8011072:	2b00      	cmp	r3, #0
 8011074:	f040 8097 	bne.w	80111a6 <rcl_wait_set_resize+0x2ba>
 8011078:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801107a:	b120      	cbz	r0, 8011086 <rcl_wait_set_resize+0x19a>
 801107c:	4639      	mov	r1, r7
 801107e:	47c0      	blx	r8
 8011080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011082:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011084:	62ab      	str	r3, [r5, #40]	; 0x28
 8011086:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8011088:	2800      	cmp	r0, #0
 801108a:	d04c      	beq.n	8011126 <rcl_wait_set_resize+0x23a>
 801108c:	4639      	mov	r1, r7
 801108e:	47c0      	blx	r8
 8011090:	2300      	movs	r3, #0
 8011092:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011094:	4618      	mov	r0, r3
 8011096:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801109a:	b003      	add	sp, #12
 801109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a0:	6800      	ldr	r0, [r0, #0]
 80110a2:	b120      	cbz	r0, 80110ae <rcl_wait_set_resize+0x1c2>
 80110a4:	4651      	mov	r1, sl
 80110a6:	47d8      	blx	fp
 80110a8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80110aa:	f8c5 8000 	str.w	r8, [r5]
 80110ae:	68a0      	ldr	r0, [r4, #8]
 80110b0:	2800      	cmp	r0, #0
 80110b2:	f43f af5f 	beq.w	8010f74 <rcl_wait_set_resize+0x88>
 80110b6:	4651      	mov	r1, sl
 80110b8:	47d8      	blx	fp
 80110ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80110bc:	2300      	movs	r3, #0
 80110be:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80110c2:	e757      	b.n	8010f74 <rcl_wait_set_resize+0x88>
 80110c4:	00b4      	lsls	r4, r6, #2
 80110c6:	464a      	mov	r2, r9
 80110c8:	68a8      	ldr	r0, [r5, #8]
 80110ca:	4621      	mov	r1, r4
 80110cc:	4798      	blx	r3
 80110ce:	60a8      	str	r0, [r5, #8]
 80110d0:	b340      	cbz	r0, 8011124 <rcl_wait_set_resize+0x238>
 80110d2:	4622      	mov	r2, r4
 80110d4:	4641      	mov	r1, r8
 80110d6:	f005 fddf 	bl	8016c98 <memset>
 80110da:	f04f 0800 	mov.w	r8, #0
 80110de:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80110e0:	60ee      	str	r6, [r5, #12]
 80110e2:	19f6      	adds	r6, r6, r7
 80110e4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80110e8:	f8c4 8010 	str.w	r8, [r4, #16]
 80110ec:	f43f af5e 	beq.w	8010fac <rcl_wait_set_resize+0xc0>
 80110f0:	00b6      	lsls	r6, r6, #2
 80110f2:	464a      	mov	r2, r9
 80110f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80110f6:	6960      	ldr	r0, [r4, #20]
 80110f8:	4631      	mov	r1, r6
 80110fa:	4798      	blx	r3
 80110fc:	4681      	mov	r9, r0
 80110fe:	6160      	str	r0, [r4, #20]
 8011100:	2800      	cmp	r0, #0
 8011102:	f000 8084 	beq.w	801120e <rcl_wait_set_resize+0x322>
 8011106:	4632      	mov	r2, r6
 8011108:	4641      	mov	r1, r8
 801110a:	f005 fdc5 	bl	8016c98 <memset>
 801110e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011110:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011114:	e753      	b.n	8010fbe <rcl_wait_set_resize+0xd2>
 8011116:	009c      	lsls	r4, r3, #2
 8011118:	464a      	mov	r2, r9
 801111a:	69a8      	ldr	r0, [r5, #24]
 801111c:	4621      	mov	r1, r4
 801111e:	47c0      	blx	r8
 8011120:	61a8      	str	r0, [r5, #24]
 8011122:	bb40      	cbnz	r0, 8011176 <rcl_wait_set_resize+0x28a>
 8011124:	200a      	movs	r0, #10
 8011126:	b003      	add	sp, #12
 8011128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112c:	00bc      	lsls	r4, r7, #2
 801112e:	464a      	mov	r2, r9
 8011130:	6928      	ldr	r0, [r5, #16]
 8011132:	4621      	mov	r1, r4
 8011134:	47c0      	blx	r8
 8011136:	6128      	str	r0, [r5, #16]
 8011138:	2800      	cmp	r0, #0
 801113a:	d0f3      	beq.n	8011124 <rcl_wait_set_resize+0x238>
 801113c:	4622      	mov	r2, r4
 801113e:	4631      	mov	r1, r6
 8011140:	f005 fdaa 	bl	8016c98 <memset>
 8011144:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011146:	616f      	str	r7, [r5, #20]
 8011148:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801114c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8011150:	e747      	b.n	8010fe2 <rcl_wait_set_resize+0xf6>
 8011152:	6a28      	ldr	r0, [r5, #32]
 8011154:	b120      	cbz	r0, 8011160 <rcl_wait_set_resize+0x274>
 8011156:	4639      	mov	r1, r7
 8011158:	47c0      	blx	r8
 801115a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801115c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801115e:	622b      	str	r3, [r5, #32]
 8011160:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011162:	2800      	cmp	r0, #0
 8011164:	f43f af7e 	beq.w	8011064 <rcl_wait_set_resize+0x178>
 8011168:	4639      	mov	r1, r7
 801116a:	47c0      	blx	r8
 801116c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801116e:	2300      	movs	r3, #0
 8011170:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8011174:	e776      	b.n	8011064 <rcl_wait_set_resize+0x178>
 8011176:	4622      	mov	r2, r4
 8011178:	4631      	mov	r1, r6
 801117a:	f005 fd8d 	bl	8016c98 <memset>
 801117e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8011180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011182:	464a      	mov	r2, r9
 8011184:	6a38      	ldr	r0, [r7, #32]
 8011186:	4621      	mov	r1, r4
 8011188:	61eb      	str	r3, [r5, #28]
 801118a:	61fe      	str	r6, [r7, #28]
 801118c:	47c0      	blx	r8
 801118e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011190:	6238      	str	r0, [r7, #32]
 8011192:	6a1f      	ldr	r7, [r3, #32]
 8011194:	2f00      	cmp	r7, #0
 8011196:	d04a      	beq.n	801122e <rcl_wait_set_resize+0x342>
 8011198:	4622      	mov	r2, r4
 801119a:	4631      	mov	r1, r6
 801119c:	4638      	mov	r0, r7
 801119e:	f005 fd7b 	bl	8016c98 <memset>
 80111a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80111a4:	e733      	b.n	801100e <rcl_wait_set_resize+0x122>
 80111a6:	009c      	lsls	r4, r3, #2
 80111a8:	463a      	mov	r2, r7
 80111aa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80111ac:	4621      	mov	r1, r4
 80111ae:	47c8      	blx	r9
 80111b0:	62a8      	str	r0, [r5, #40]	; 0x28
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d0b6      	beq.n	8011124 <rcl_wait_set_resize+0x238>
 80111b6:	4622      	mov	r2, r4
 80111b8:	4631      	mov	r1, r6
 80111ba:	f005 fd6d 	bl	8016c98 <memset>
 80111be:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80111c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111c4:	463a      	mov	r2, r7
 80111c6:	4621      	mov	r1, r4
 80111c8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80111cc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80111ce:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 80111d2:	47c8      	blx	r9
 80111d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80111d6:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80111da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d034      	beq.n	801124a <rcl_wait_set_resize+0x35e>
 80111e0:	4622      	mov	r2, r4
 80111e2:	4631      	mov	r1, r6
 80111e4:	4618      	mov	r0, r3
 80111e6:	f005 fd57 	bl	8016c98 <memset>
 80111ea:	4630      	mov	r0, r6
 80111ec:	b003      	add	sp, #12
 80111ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f2:	200b      	movs	r0, #11
 80111f4:	4770      	bx	lr
 80111f6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80111fa:	e794      	b.n	8011126 <rcl_wait_set_resize+0x23a>
 80111fc:	6828      	ldr	r0, [r5, #0]
 80111fe:	4651      	mov	r1, sl
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	47d8      	blx	fp
 8011204:	9b01      	ldr	r3, [sp, #4]
 8011206:	200a      	movs	r0, #10
 8011208:	e9c5 3300 	strd	r3, r3, [r5]
 801120c:	e78b      	b.n	8011126 <rcl_wait_set_resize+0x23a>
 801120e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011210:	68a8      	ldr	r0, [r5, #8]
 8011212:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011216:	4798      	blx	r3
 8011218:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801121a:	6928      	ldr	r0, [r5, #16]
 801121c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801121e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011220:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8011224:	4790      	blx	r2
 8011226:	200a      	movs	r0, #10
 8011228:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801122c:	e77b      	b.n	8011126 <rcl_wait_set_resize+0x23a>
 801122e:	69a8      	ldr	r0, [r5, #24]
 8011230:	4649      	mov	r1, r9
 8011232:	47d0      	blx	sl
 8011234:	200a      	movs	r0, #10
 8011236:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801123a:	e774      	b.n	8011126 <rcl_wait_set_resize+0x23a>
 801123c:	6a28      	ldr	r0, [r5, #32]
 801123e:	4639      	mov	r1, r7
 8011240:	47c0      	blx	r8
 8011242:	200a      	movs	r0, #10
 8011244:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011248:	e76d      	b.n	8011126 <rcl_wait_set_resize+0x23a>
 801124a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801124c:	4639      	mov	r1, r7
 801124e:	9301      	str	r3, [sp, #4]
 8011250:	47c0      	blx	r8
 8011252:	9b01      	ldr	r3, [sp, #4]
 8011254:	200a      	movs	r0, #10
 8011256:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801125a:	e764      	b.n	8011126 <rcl_wait_set_resize+0x23a>

0801125c <rcl_wait_set_init>:
 801125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011260:	b085      	sub	sp, #20
 8011262:	4605      	mov	r5, r0
 8011264:	460e      	mov	r6, r1
 8011266:	4617      	mov	r7, r2
 8011268:	a812      	add	r0, sp, #72	; 0x48
 801126a:	4698      	mov	r8, r3
 801126c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8011270:	f7f9 fc1c 	bl	800aaac <rcutils_allocator_is_valid>
 8011274:	2d00      	cmp	r5, #0
 8011276:	d072      	beq.n	801135e <rcl_wait_set_init+0x102>
 8011278:	f080 0001 	eor.w	r0, r0, #1
 801127c:	b2c0      	uxtb	r0, r0
 801127e:	2800      	cmp	r0, #0
 8011280:	d16d      	bne.n	801135e <rcl_wait_set_init+0x102>
 8011282:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8011286:	f1ba 0f00 	cmp.w	sl, #0
 801128a:	d004      	beq.n	8011296 <rcl_wait_set_init+0x3a>
 801128c:	2464      	movs	r4, #100	; 0x64
 801128e:	4620      	mov	r0, r4
 8011290:	b005      	add	sp, #20
 8011292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011296:	f1b9 0f00 	cmp.w	r9, #0
 801129a:	d060      	beq.n	801135e <rcl_wait_set_init+0x102>
 801129c:	4648      	mov	r0, r9
 801129e:	f7fe fae3 	bl	800f868 <rcl_context_is_valid>
 80112a2:	2800      	cmp	r0, #0
 80112a4:	d068      	beq.n	8011378 <rcl_wait_set_init+0x11c>
 80112a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80112a8:	205c      	movs	r0, #92	; 0x5c
 80112aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80112ac:	4798      	blx	r3
 80112ae:	6328      	str	r0, [r5, #48]	; 0x30
 80112b0:	2800      	cmp	r0, #0
 80112b2:	d063      	beq.n	801137c <rcl_wait_set_init+0x120>
 80112b4:	225c      	movs	r2, #92	; 0x5c
 80112b6:	4651      	mov	r1, sl
 80112b8:	f005 fcee 	bl	8016c98 <memset>
 80112bc:	ac12      	add	r4, sp, #72	; 0x48
 80112be:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 80112c2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80112c6:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 80112ca:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 80112ce:	eb03 0e02 	add.w	lr, r3, r2
 80112d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112d4:	f8d9 9000 	ldr.w	r9, [r9]
 80112d8:	449e      	add	lr, r3
 80112da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112dc:	e9cb aa01 	strd	sl, sl, [fp, #4]
 80112e0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 80112e4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 80112e8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 80112ec:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 80112f0:	44be      	add	lr, r7
 80112f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112f6:	6823      	ldr	r3, [r4, #0]
 80112f8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80112fc:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8011300:	f8cc 3000 	str.w	r3, [ip]
 8011304:	f002 feba 	bl	801407c <rmw_create_wait_set>
 8011308:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801130a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801130e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011310:	b350      	cbz	r0, 8011368 <rcl_wait_set_init+0x10c>
 8011312:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8011314:	4643      	mov	r3, r8
 8011316:	463a      	mov	r2, r7
 8011318:	4631      	mov	r1, r6
 801131a:	9402      	str	r4, [sp, #8]
 801131c:	4628      	mov	r0, r5
 801131e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8011320:	9401      	str	r4, [sp, #4]
 8011322:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011324:	9400      	str	r4, [sp, #0]
 8011326:	f7ff fde1 	bl	8010eec <rcl_wait_set_resize>
 801132a:	4604      	mov	r4, r0
 801132c:	2800      	cmp	r0, #0
 801132e:	d0ae      	beq.n	801128e <rcl_wait_set_init+0x32>
 8011330:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011332:	bb2b      	cbnz	r3, 8011380 <rcl_wait_set_init+0x124>
 8011334:	2600      	movs	r6, #0
 8011336:	4628      	mov	r0, r5
 8011338:	4633      	mov	r3, r6
 801133a:	4632      	mov	r2, r6
 801133c:	4631      	mov	r1, r6
 801133e:	9600      	str	r6, [sp, #0]
 8011340:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011344:	f7ff fdd2 	bl	8010eec <rcl_wait_set_resize>
 8011348:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801134a:	2800      	cmp	r0, #0
 801134c:	d09f      	beq.n	801128e <rcl_wait_set_init+0x32>
 801134e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011350:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8011352:	4798      	blx	r3
 8011354:	4620      	mov	r0, r4
 8011356:	632e      	str	r6, [r5, #48]	; 0x30
 8011358:	b005      	add	sp, #20
 801135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135e:	240b      	movs	r4, #11
 8011360:	4620      	mov	r0, r4
 8011362:	b005      	add	sp, #20
 8011364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011368:	2401      	movs	r4, #1
 801136a:	f002 fe91 	bl	8014090 <rmw_destroy_wait_set>
 801136e:	2800      	cmp	r0, #0
 8011370:	bf18      	it	ne
 8011372:	f44f 7461 	movne.w	r4, #900	; 0x384
 8011376:	e7dd      	b.n	8011334 <rcl_wait_set_init+0xd8>
 8011378:	2465      	movs	r4, #101	; 0x65
 801137a:	e788      	b.n	801128e <rcl_wait_set_init+0x32>
 801137c:	240a      	movs	r4, #10
 801137e:	e786      	b.n	801128e <rcl_wait_set_init+0x32>
 8011380:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011382:	e7f2      	b.n	801136a <rcl_wait_set_init+0x10e>

08011384 <rcl_wait_set_add_guard_condition>:
 8011384:	b318      	cbz	r0, 80113ce <rcl_wait_set_add_guard_condition+0x4a>
 8011386:	b538      	push	{r3, r4, r5, lr}
 8011388:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801138a:	4604      	mov	r4, r0
 801138c:	b30b      	cbz	r3, 80113d2 <rcl_wait_set_add_guard_condition+0x4e>
 801138e:	b319      	cbz	r1, 80113d8 <rcl_wait_set_add_guard_condition+0x54>
 8011390:	68dd      	ldr	r5, [r3, #12]
 8011392:	68c0      	ldr	r0, [r0, #12]
 8011394:	4285      	cmp	r5, r0
 8011396:	d217      	bcs.n	80113c8 <rcl_wait_set_add_guard_condition+0x44>
 8011398:	1c68      	adds	r0, r5, #1
 801139a:	60d8      	str	r0, [r3, #12]
 801139c:	68a3      	ldr	r3, [r4, #8]
 801139e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80113a2:	b102      	cbz	r2, 80113a6 <rcl_wait_set_add_guard_condition+0x22>
 80113a4:	6015      	str	r5, [r2, #0]
 80113a6:	4608      	mov	r0, r1
 80113a8:	f004 fe80 	bl	80160ac <rcl_guard_condition_get_rmw_handle>
 80113ac:	b150      	cbz	r0, 80113c4 <rcl_wait_set_add_guard_condition+0x40>
 80113ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80113b0:	6842      	ldr	r2, [r0, #4]
 80113b2:	2000      	movs	r0, #0
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80113bc:	6913      	ldr	r3, [r2, #16]
 80113be:	3301      	adds	r3, #1
 80113c0:	6113      	str	r3, [r2, #16]
 80113c2:	bd38      	pop	{r3, r4, r5, pc}
 80113c4:	2001      	movs	r0, #1
 80113c6:	bd38      	pop	{r3, r4, r5, pc}
 80113c8:	f240 3086 	movw	r0, #902	; 0x386
 80113cc:	bd38      	pop	{r3, r4, r5, pc}
 80113ce:	200b      	movs	r0, #11
 80113d0:	4770      	bx	lr
 80113d2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80113d6:	bd38      	pop	{r3, r4, r5, pc}
 80113d8:	200b      	movs	r0, #11
 80113da:	bd38      	pop	{r3, r4, r5, pc}

080113dc <rcl_wait_set_add_timer>:
 80113dc:	b328      	cbz	r0, 801142a <rcl_wait_set_add_timer+0x4e>
 80113de:	b538      	push	{r3, r4, r5, lr}
 80113e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80113e2:	4604      	mov	r4, r0
 80113e4:	b31b      	cbz	r3, 801142e <rcl_wait_set_add_timer+0x52>
 80113e6:	b329      	cbz	r1, 8011434 <rcl_wait_set_add_timer+0x58>
 80113e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80113ea:	6965      	ldr	r5, [r4, #20]
 80113ec:	42a8      	cmp	r0, r5
 80113ee:	d219      	bcs.n	8011424 <rcl_wait_set_add_timer+0x48>
 80113f0:	1c45      	adds	r5, r0, #1
 80113f2:	641d      	str	r5, [r3, #64]	; 0x40
 80113f4:	6923      	ldr	r3, [r4, #16]
 80113f6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80113fa:	b102      	cbz	r2, 80113fe <rcl_wait_set_add_timer+0x22>
 80113fc:	6010      	str	r0, [r2, #0]
 80113fe:	4608      	mov	r0, r1
 8011400:	f7ff fb9a 	bl	8010b38 <rcl_timer_get_guard_condition>
 8011404:	b168      	cbz	r0, 8011422 <rcl_wait_set_add_timer+0x46>
 8011406:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011408:	68e3      	ldr	r3, [r4, #12]
 801140a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801140c:	3b01      	subs	r3, #1
 801140e:	441d      	add	r5, r3
 8011410:	f004 fe4c 	bl	80160ac <rcl_guard_condition_get_rmw_handle>
 8011414:	b180      	cbz	r0, 8011438 <rcl_wait_set_add_timer+0x5c>
 8011416:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011418:	6842      	ldr	r2, [r0, #4]
 801141a:	2000      	movs	r0, #0
 801141c:	695b      	ldr	r3, [r3, #20]
 801141e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011422:	bd38      	pop	{r3, r4, r5, pc}
 8011424:	f240 3086 	movw	r0, #902	; 0x386
 8011428:	bd38      	pop	{r3, r4, r5, pc}
 801142a:	200b      	movs	r0, #11
 801142c:	4770      	bx	lr
 801142e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011432:	bd38      	pop	{r3, r4, r5, pc}
 8011434:	200b      	movs	r0, #11
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	2001      	movs	r0, #1
 801143a:	bd38      	pop	{r3, r4, r5, pc}

0801143c <rcl_wait_set_add_client>:
 801143c:	b318      	cbz	r0, 8011486 <rcl_wait_set_add_client+0x4a>
 801143e:	b538      	push	{r3, r4, r5, lr}
 8011440:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011442:	4604      	mov	r4, r0
 8011444:	b30b      	cbz	r3, 801148a <rcl_wait_set_add_client+0x4e>
 8011446:	b319      	cbz	r1, 8011490 <rcl_wait_set_add_client+0x54>
 8011448:	699d      	ldr	r5, [r3, #24]
 801144a:	69c0      	ldr	r0, [r0, #28]
 801144c:	4285      	cmp	r5, r0
 801144e:	d217      	bcs.n	8011480 <rcl_wait_set_add_client+0x44>
 8011450:	1c68      	adds	r0, r5, #1
 8011452:	6198      	str	r0, [r3, #24]
 8011454:	69a3      	ldr	r3, [r4, #24]
 8011456:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801145a:	b102      	cbz	r2, 801145e <rcl_wait_set_add_client+0x22>
 801145c:	6015      	str	r5, [r2, #0]
 801145e:	4608      	mov	r0, r1
 8011460:	f7fe f954 	bl	800f70c <rcl_client_get_rmw_handle>
 8011464:	b150      	cbz	r0, 801147c <rcl_wait_set_add_client+0x40>
 8011466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011468:	6842      	ldr	r2, [r0, #4]
 801146a:	2000      	movs	r0, #0
 801146c:	6a1b      	ldr	r3, [r3, #32]
 801146e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011472:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011474:	69d3      	ldr	r3, [r2, #28]
 8011476:	3301      	adds	r3, #1
 8011478:	61d3      	str	r3, [r2, #28]
 801147a:	bd38      	pop	{r3, r4, r5, pc}
 801147c:	2001      	movs	r0, #1
 801147e:	bd38      	pop	{r3, r4, r5, pc}
 8011480:	f240 3086 	movw	r0, #902	; 0x386
 8011484:	bd38      	pop	{r3, r4, r5, pc}
 8011486:	200b      	movs	r0, #11
 8011488:	4770      	bx	lr
 801148a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801148e:	bd38      	pop	{r3, r4, r5, pc}
 8011490:	200b      	movs	r0, #11
 8011492:	bd38      	pop	{r3, r4, r5, pc}

08011494 <rcl_wait_set_add_service>:
 8011494:	b318      	cbz	r0, 80114de <rcl_wait_set_add_service+0x4a>
 8011496:	b538      	push	{r3, r4, r5, lr}
 8011498:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801149a:	4604      	mov	r4, r0
 801149c:	b30b      	cbz	r3, 80114e2 <rcl_wait_set_add_service+0x4e>
 801149e:	b319      	cbz	r1, 80114e8 <rcl_wait_set_add_service+0x54>
 80114a0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80114a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80114a4:	4285      	cmp	r5, r0
 80114a6:	d217      	bcs.n	80114d8 <rcl_wait_set_add_service+0x44>
 80114a8:	1c68      	adds	r0, r5, #1
 80114aa:	6258      	str	r0, [r3, #36]	; 0x24
 80114ac:	6a23      	ldr	r3, [r4, #32]
 80114ae:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80114b2:	b102      	cbz	r2, 80114b6 <rcl_wait_set_add_service+0x22>
 80114b4:	6015      	str	r5, [r2, #0]
 80114b6:	4608      	mov	r0, r1
 80114b8:	f7fe ffe2 	bl	8010480 <rcl_service_get_rmw_handle>
 80114bc:	b150      	cbz	r0, 80114d4 <rcl_wait_set_add_service+0x40>
 80114be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80114c0:	6842      	ldr	r2, [r0, #4]
 80114c2:	2000      	movs	r0, #0
 80114c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80114cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80114ce:	3301      	adds	r3, #1
 80114d0:	6293      	str	r3, [r2, #40]	; 0x28
 80114d2:	bd38      	pop	{r3, r4, r5, pc}
 80114d4:	2001      	movs	r0, #1
 80114d6:	bd38      	pop	{r3, r4, r5, pc}
 80114d8:	f240 3086 	movw	r0, #902	; 0x386
 80114dc:	bd38      	pop	{r3, r4, r5, pc}
 80114de:	200b      	movs	r0, #11
 80114e0:	4770      	bx	lr
 80114e2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80114e6:	bd38      	pop	{r3, r4, r5, pc}
 80114e8:	200b      	movs	r0, #11
 80114ea:	bd38      	pop	{r3, r4, r5, pc}
 80114ec:	0000      	movs	r0, r0
	...

080114f0 <rcl_wait>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	ed2d 8b02 	vpush	{d8}
 80114f8:	b08d      	sub	sp, #52	; 0x34
 80114fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80114fe:	2800      	cmp	r0, #0
 8011500:	f000 814f 	beq.w	80117a2 <rcl_wait+0x2b2>
 8011504:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8011506:	4605      	mov	r5, r0
 8011508:	2e00      	cmp	r6, #0
 801150a:	f000 811a 	beq.w	8011742 <rcl_wait+0x252>
 801150e:	6843      	ldr	r3, [r0, #4]
 8011510:	b983      	cbnz	r3, 8011534 <rcl_wait+0x44>
 8011512:	68eb      	ldr	r3, [r5, #12]
 8011514:	b973      	cbnz	r3, 8011534 <rcl_wait+0x44>
 8011516:	696b      	ldr	r3, [r5, #20]
 8011518:	b963      	cbnz	r3, 8011534 <rcl_wait+0x44>
 801151a:	69eb      	ldr	r3, [r5, #28]
 801151c:	b953      	cbnz	r3, 8011534 <rcl_wait+0x44>
 801151e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011520:	b943      	cbnz	r3, 8011534 <rcl_wait+0x44>
 8011522:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011524:	b933      	cbnz	r3, 8011534 <rcl_wait+0x44>
 8011526:	f240 3085 	movw	r0, #901	; 0x385
 801152a:	b00d      	add	sp, #52	; 0x34
 801152c:	ecbd 8b02 	vpop	{d8}
 8011530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011534:	9b04      	ldr	r3, [sp, #16]
 8011536:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011538:	2b01      	cmp	r3, #1
 801153a:	9b05      	ldr	r3, [sp, #20]
 801153c:	f173 0300 	sbcs.w	r3, r3, #0
 8011540:	f2c0 80f8 	blt.w	8011734 <rcl_wait+0x244>
 8011544:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011548:	2a00      	cmp	r2, #0
 801154a:	f000 810f 	beq.w	801176c <rcl_wait+0x27c>
 801154e:	2400      	movs	r4, #0
 8011550:	4613      	mov	r3, r2
 8011552:	f240 3921 	movw	r9, #801	; 0x321
 8011556:	4632      	mov	r2, r6
 8011558:	46a2      	mov	sl, r4
 801155a:	46a3      	mov	fp, r4
 801155c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 80117c0 <rcl_wait+0x2d0>
 8011560:	e014      	b.n	801158c <rcl_wait+0x9c>
 8011562:	2800      	cmp	r0, #0
 8011564:	d1e1      	bne.n	801152a <rcl_wait+0x3a>
 8011566:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801156a:	4542      	cmp	r2, r8
 801156c:	eb73 0107 	sbcs.w	r1, r3, r7
 8011570:	da03      	bge.n	801157a <rcl_wait+0x8a>
 8011572:	4690      	mov	r8, r2
 8011574:	461f      	mov	r7, r3
 8011576:	f04f 0b01 	mov.w	fp, #1
 801157a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801157c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801157e:	3401      	adds	r4, #1
 8011580:	f14a 0a00 	adc.w	sl, sl, #0
 8011584:	429c      	cmp	r4, r3
 8011586:	f17a 0100 	sbcs.w	r1, sl, #0
 801158a:	d228      	bcs.n	80115de <rcl_wait+0xee>
 801158c:	6928      	ldr	r0, [r5, #16]
 801158e:	a908      	add	r1, sp, #32
 8011590:	00a6      	lsls	r6, r4, #2
 8011592:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011596:	2800      	cmp	r0, #0
 8011598:	d0f1      	beq.n	801157e <rcl_wait+0x8e>
 801159a:	68eb      	ldr	r3, [r5, #12]
 801159c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80115a0:	4423      	add	r3, r4
 80115a2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80115a6:	f1be 0f00 	cmp.w	lr, #0
 80115aa:	d006      	beq.n	80115ba <rcl_wait+0xca>
 80115ac:	6913      	ldr	r3, [r2, #16]
 80115ae:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80115b2:	3301      	adds	r3, #1
 80115b4:	6113      	str	r3, [r2, #16]
 80115b6:	692b      	ldr	r3, [r5, #16]
 80115b8:	5998      	ldr	r0, [r3, r6]
 80115ba:	ed8d 8b08 	vstr	d8, [sp, #32]
 80115be:	f7ff fa89 	bl	8010ad4 <rcl_timer_get_time_until_next_call>
 80115c2:	4548      	cmp	r0, r9
 80115c4:	d1cd      	bne.n	8011562 <rcl_wait+0x72>
 80115c6:	692b      	ldr	r3, [r5, #16]
 80115c8:	2200      	movs	r2, #0
 80115ca:	3401      	adds	r4, #1
 80115cc:	519a      	str	r2, [r3, r6]
 80115ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80115d0:	f14a 0a00 	adc.w	sl, sl, #0
 80115d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80115d6:	429c      	cmp	r4, r3
 80115d8:	f17a 0100 	sbcs.w	r1, sl, #0
 80115dc:	d3d6      	bcc.n	801158c <rcl_wait+0x9c>
 80115de:	4659      	mov	r1, fp
 80115e0:	4616      	mov	r6, r2
 80115e2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80115e6:	4313      	orrs	r3, r2
 80115e8:	f040 80b4 	bne.w	8011754 <rcl_wait+0x264>
 80115ec:	2300      	movs	r3, #0
 80115ee:	2200      	movs	r2, #0
 80115f0:	460c      	mov	r4, r1
 80115f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80115f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80115fa:	ab08      	add	r3, sp, #32
 80115fc:	9302      	str	r3, [sp, #8]
 80115fe:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8011602:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011604:	f106 0110 	add.w	r1, r6, #16
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	1d30      	adds	r0, r6, #4
 801160c:	f106 031c 	add.w	r3, r6, #28
 8011610:	9201      	str	r2, [sp, #4]
 8011612:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8011616:	f002 fbcd 	bl	8013db4 <rmw_wait>
 801161a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801161c:	4680      	mov	r8, r0
 801161e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011620:	b1e2      	cbz	r2, 801165c <rcl_wait+0x16c>
 8011622:	f04f 0900 	mov.w	r9, #0
 8011626:	464f      	mov	r7, r9
 8011628:	692a      	ldr	r2, [r5, #16]
 801162a:	f10d 011f 	add.w	r1, sp, #31
 801162e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8011632:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8011636:	b160      	cbz	r0, 8011652 <rcl_wait+0x162>
 8011638:	f88d 701f 	strb.w	r7, [sp, #31]
 801163c:	f7ff fa0e 	bl	8010a5c <rcl_timer_is_ready>
 8011640:	2800      	cmp	r0, #0
 8011642:	f47f af72 	bne.w	801152a <rcl_wait+0x3a>
 8011646:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801164a:	b90b      	cbnz	r3, 8011650 <rcl_wait+0x160>
 801164c:	692a      	ldr	r2, [r5, #16]
 801164e:	5193      	str	r3, [r2, r6]
 8011650:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011652:	f109 0901 	add.w	r9, r9, #1
 8011656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011658:	454a      	cmp	r2, r9
 801165a:	d8e5      	bhi.n	8011628 <rcl_wait+0x138>
 801165c:	f038 0002 	bics.w	r0, r8, #2
 8011660:	d176      	bne.n	8011750 <rcl_wait+0x260>
 8011662:	686f      	ldr	r7, [r5, #4]
 8011664:	b17f      	cbz	r7, 8011686 <rcl_wait+0x196>
 8011666:	4602      	mov	r2, r0
 8011668:	e002      	b.n	8011670 <rcl_wait+0x180>
 801166a:	3201      	adds	r2, #1
 801166c:	42ba      	cmp	r2, r7
 801166e:	d00a      	beq.n	8011686 <rcl_wait+0x196>
 8011670:	6899      	ldr	r1, [r3, #8]
 8011672:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011676:	2900      	cmp	r1, #0
 8011678:	d1f7      	bne.n	801166a <rcl_wait+0x17a>
 801167a:	682e      	ldr	r6, [r5, #0]
 801167c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011680:	3201      	adds	r2, #1
 8011682:	42ba      	cmp	r2, r7
 8011684:	d1f4      	bne.n	8011670 <rcl_wait+0x180>
 8011686:	68ef      	ldr	r7, [r5, #12]
 8011688:	b17f      	cbz	r7, 80116aa <rcl_wait+0x1ba>
 801168a:	2200      	movs	r2, #0
 801168c:	e002      	b.n	8011694 <rcl_wait+0x1a4>
 801168e:	3201      	adds	r2, #1
 8011690:	42ba      	cmp	r2, r7
 8011692:	d00a      	beq.n	80116aa <rcl_wait+0x1ba>
 8011694:	6959      	ldr	r1, [r3, #20]
 8011696:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801169a:	2900      	cmp	r1, #0
 801169c:	d1f7      	bne.n	801168e <rcl_wait+0x19e>
 801169e:	68ae      	ldr	r6, [r5, #8]
 80116a0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80116a4:	3201      	adds	r2, #1
 80116a6:	42ba      	cmp	r2, r7
 80116a8:	d1f4      	bne.n	8011694 <rcl_wait+0x1a4>
 80116aa:	69ef      	ldr	r7, [r5, #28]
 80116ac:	b17f      	cbz	r7, 80116ce <rcl_wait+0x1de>
 80116ae:	2200      	movs	r2, #0
 80116b0:	e002      	b.n	80116b8 <rcl_wait+0x1c8>
 80116b2:	3201      	adds	r2, #1
 80116b4:	42ba      	cmp	r2, r7
 80116b6:	d00a      	beq.n	80116ce <rcl_wait+0x1de>
 80116b8:	6a19      	ldr	r1, [r3, #32]
 80116ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80116be:	2900      	cmp	r1, #0
 80116c0:	d1f7      	bne.n	80116b2 <rcl_wait+0x1c2>
 80116c2:	69ae      	ldr	r6, [r5, #24]
 80116c4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80116c8:	3201      	adds	r2, #1
 80116ca:	42ba      	cmp	r2, r7
 80116cc:	d1f4      	bne.n	80116b8 <rcl_wait+0x1c8>
 80116ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80116d0:	b17f      	cbz	r7, 80116f2 <rcl_wait+0x202>
 80116d2:	2200      	movs	r2, #0
 80116d4:	e002      	b.n	80116dc <rcl_wait+0x1ec>
 80116d6:	3201      	adds	r2, #1
 80116d8:	42ba      	cmp	r2, r7
 80116da:	d00a      	beq.n	80116f2 <rcl_wait+0x202>
 80116dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80116de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80116e2:	2900      	cmp	r1, #0
 80116e4:	d1f7      	bne.n	80116d6 <rcl_wait+0x1e6>
 80116e6:	6a2e      	ldr	r6, [r5, #32]
 80116e8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80116ec:	3201      	adds	r2, #1
 80116ee:	42ba      	cmp	r2, r7
 80116f0:	d1f4      	bne.n	80116dc <rcl_wait+0x1ec>
 80116f2:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80116f4:	b17f      	cbz	r7, 8011716 <rcl_wait+0x226>
 80116f6:	2200      	movs	r2, #0
 80116f8:	e002      	b.n	8011700 <rcl_wait+0x210>
 80116fa:	3201      	adds	r2, #1
 80116fc:	42ba      	cmp	r2, r7
 80116fe:	d00a      	beq.n	8011716 <rcl_wait+0x226>
 8011700:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011702:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011706:	2900      	cmp	r1, #0
 8011708:	d1f7      	bne.n	80116fa <rcl_wait+0x20a>
 801170a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801170c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011710:	3201      	adds	r2, #1
 8011712:	42ba      	cmp	r2, r7
 8011714:	d1f4      	bne.n	8011700 <rcl_wait+0x210>
 8011716:	f1b8 0f02 	cmp.w	r8, #2
 801171a:	f47f af06 	bne.w	801152a <rcl_wait+0x3a>
 801171e:	f084 0301 	eor.w	r3, r4, #1
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b00      	cmp	r3, #0
 8011726:	bf18      	it	ne
 8011728:	2002      	movne	r0, #2
 801172a:	b00d      	add	sp, #52	; 0x34
 801172c:	ecbd 8b02 	vpop	{d8}
 8011730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011734:	2a00      	cmp	r2, #0
 8011736:	d03a      	beq.n	80117ae <rcl_wait+0x2be>
 8011738:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801173c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011740:	e705      	b.n	801154e <rcl_wait+0x5e>
 8011742:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011746:	b00d      	add	sp, #52	; 0x34
 8011748:	ecbd 8b02 	vpop	{d8}
 801174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011750:	2001      	movs	r0, #1
 8011752:	e6ea      	b.n	801152a <rcl_wait+0x3a>
 8011754:	9b04      	ldr	r3, [sp, #16]
 8011756:	460c      	mov	r4, r1
 8011758:	2b01      	cmp	r3, #1
 801175a:	9b05      	ldr	r3, [sp, #20]
 801175c:	f173 0300 	sbcs.w	r3, r3, #0
 8011760:	bfa8      	it	ge
 8011762:	f044 0401 	orrge.w	r4, r4, #1
 8011766:	b914      	cbnz	r4, 801176e <rcl_wait+0x27e>
 8011768:	4623      	mov	r3, r4
 801176a:	e747      	b.n	80115fc <rcl_wait+0x10c>
 801176c:	4611      	mov	r1, r2
 801176e:	2f00      	cmp	r7, #0
 8011770:	da02      	bge.n	8011778 <rcl_wait+0x288>
 8011772:	f04f 0800 	mov.w	r8, #0
 8011776:	4647      	mov	r7, r8
 8011778:	460c      	mov	r4, r1
 801177a:	4640      	mov	r0, r8
 801177c:	4639      	mov	r1, r7
 801177e:	a312      	add	r3, pc, #72	; (adr r3, 80117c8 <rcl_wait+0x2d8>)
 8011780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011784:	f7ee fdac 	bl	80002e0 <__aeabi_ldivmod>
 8011788:	a30f      	add	r3, pc, #60	; (adr r3, 80117c8 <rcl_wait+0x2d8>)
 801178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011792:	4640      	mov	r0, r8
 8011794:	4639      	mov	r1, r7
 8011796:	f7ee fda3 	bl	80002e0 <__aeabi_ldivmod>
 801179a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801179e:	ab08      	add	r3, sp, #32
 80117a0:	e72c      	b.n	80115fc <rcl_wait+0x10c>
 80117a2:	200b      	movs	r0, #11
 80117a4:	b00d      	add	sp, #52	; 0x34
 80117a6:	ecbd 8b02 	vpop	{d8}
 80117aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ae:	4611      	mov	r1, r2
 80117b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80117b4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80117b8:	e713      	b.n	80115e2 <rcl_wait+0xf2>
 80117ba:	bf00      	nop
 80117bc:	f3af 8000 	nop.w
 80117c0:	ffffffff 	.word	0xffffffff
 80117c4:	7fffffff 	.word	0x7fffffff
 80117c8:	3b9aca00 	.word	0x3b9aca00
 80117cc:	00000000 	.word	0x00000000

080117d0 <rcl_action_take_goal_response>:
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d039      	beq.n	8011848 <rcl_action_take_goal_response+0x78>
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	4604      	mov	r4, r0
 80117d8:	6800      	ldr	r0, [r0, #0]
 80117da:	b380      	cbz	r0, 801183e <rcl_action_take_goal_response+0x6e>
 80117dc:	460e      	mov	r6, r1
 80117de:	4615      	mov	r5, r2
 80117e0:	f7fe f81a 	bl	800f818 <rcl_client_is_valid>
 80117e4:	b330      	cbz	r0, 8011834 <rcl_action_take_goal_response+0x64>
 80117e6:	6820      	ldr	r0, [r4, #0]
 80117e8:	3004      	adds	r0, #4
 80117ea:	f7fe f815 	bl	800f818 <rcl_client_is_valid>
 80117ee:	b308      	cbz	r0, 8011834 <rcl_action_take_goal_response+0x64>
 80117f0:	6820      	ldr	r0, [r4, #0]
 80117f2:	3008      	adds	r0, #8
 80117f4:	f7fe f810 	bl	800f818 <rcl_client_is_valid>
 80117f8:	b1e0      	cbz	r0, 8011834 <rcl_action_take_goal_response+0x64>
 80117fa:	6820      	ldr	r0, [r4, #0]
 80117fc:	300c      	adds	r0, #12
 80117fe:	f7fe ffe5 	bl	80107cc <rcl_subscription_is_valid>
 8011802:	b1b8      	cbz	r0, 8011834 <rcl_action_take_goal_response+0x64>
 8011804:	6820      	ldr	r0, [r4, #0]
 8011806:	3010      	adds	r0, #16
 8011808:	f7fe ffe0 	bl	80107cc <rcl_subscription_is_valid>
 801180c:	b190      	cbz	r0, 8011834 <rcl_action_take_goal_response+0x64>
 801180e:	b1cd      	cbz	r5, 8011844 <rcl_action_take_goal_response+0x74>
 8011810:	b1c6      	cbz	r6, 8011844 <rcl_action_take_goal_response+0x74>
 8011812:	462a      	mov	r2, r5
 8011814:	4631      	mov	r1, r6
 8011816:	6820      	ldr	r0, [r4, #0]
 8011818:	f7fd ffb6 	bl	800f788 <rcl_take_response>
 801181c:	b148      	cbz	r0, 8011832 <rcl_action_take_goal_response+0x62>
 801181e:	280a      	cmp	r0, #10
 8011820:	d007      	beq.n	8011832 <rcl_action_take_goal_response+0x62>
 8011822:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011826:	f640 0337 	movw	r3, #2103	; 0x837
 801182a:	4290      	cmp	r0, r2
 801182c:	bf0c      	ite	eq
 801182e:	4618      	moveq	r0, r3
 8011830:	2001      	movne	r0, #1
 8011832:	bd70      	pop	{r4, r5, r6, pc}
 8011834:	f7f9 f960 	bl	800aaf8 <rcutils_reset_error>
 8011838:	f640 0036 	movw	r0, #2102	; 0x836
 801183c:	bd70      	pop	{r4, r5, r6, pc}
 801183e:	f640 0036 	movw	r0, #2102	; 0x836
 8011842:	bd70      	pop	{r4, r5, r6, pc}
 8011844:	200b      	movs	r0, #11
 8011846:	bd70      	pop	{r4, r5, r6, pc}
 8011848:	f640 0036 	movw	r0, #2102	; 0x836
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop

08011850 <rcl_action_send_result_request>:
 8011850:	b390      	cbz	r0, 80118b8 <rcl_action_send_result_request+0x68>
 8011852:	b570      	push	{r4, r5, r6, lr}
 8011854:	4604      	mov	r4, r0
 8011856:	6800      	ldr	r0, [r0, #0]
 8011858:	b348      	cbz	r0, 80118ae <rcl_action_send_result_request+0x5e>
 801185a:	460e      	mov	r6, r1
 801185c:	4615      	mov	r5, r2
 801185e:	f7fd ffdb 	bl	800f818 <rcl_client_is_valid>
 8011862:	b1f8      	cbz	r0, 80118a4 <rcl_action_send_result_request+0x54>
 8011864:	6820      	ldr	r0, [r4, #0]
 8011866:	3004      	adds	r0, #4
 8011868:	f7fd ffd6 	bl	800f818 <rcl_client_is_valid>
 801186c:	b1d0      	cbz	r0, 80118a4 <rcl_action_send_result_request+0x54>
 801186e:	6820      	ldr	r0, [r4, #0]
 8011870:	3008      	adds	r0, #8
 8011872:	f7fd ffd1 	bl	800f818 <rcl_client_is_valid>
 8011876:	b1a8      	cbz	r0, 80118a4 <rcl_action_send_result_request+0x54>
 8011878:	6820      	ldr	r0, [r4, #0]
 801187a:	300c      	adds	r0, #12
 801187c:	f7fe ffa6 	bl	80107cc <rcl_subscription_is_valid>
 8011880:	b180      	cbz	r0, 80118a4 <rcl_action_send_result_request+0x54>
 8011882:	6820      	ldr	r0, [r4, #0]
 8011884:	3010      	adds	r0, #16
 8011886:	f7fe ffa1 	bl	80107cc <rcl_subscription_is_valid>
 801188a:	b158      	cbz	r0, 80118a4 <rcl_action_send_result_request+0x54>
 801188c:	b195      	cbz	r5, 80118b4 <rcl_action_send_result_request+0x64>
 801188e:	b18e      	cbz	r6, 80118b4 <rcl_action_send_result_request+0x64>
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	462a      	mov	r2, r5
 8011894:	4631      	mov	r1, r6
 8011896:	3008      	adds	r0, #8
 8011898:	f7fd ff3e 	bl	800f718 <rcl_send_request>
 801189c:	3800      	subs	r0, #0
 801189e:	bf18      	it	ne
 80118a0:	2001      	movne	r0, #1
 80118a2:	bd70      	pop	{r4, r5, r6, pc}
 80118a4:	f7f9 f928 	bl	800aaf8 <rcutils_reset_error>
 80118a8:	f640 0036 	movw	r0, #2102	; 0x836
 80118ac:	bd70      	pop	{r4, r5, r6, pc}
 80118ae:	f640 0036 	movw	r0, #2102	; 0x836
 80118b2:	bd70      	pop	{r4, r5, r6, pc}
 80118b4:	200b      	movs	r0, #11
 80118b6:	bd70      	pop	{r4, r5, r6, pc}
 80118b8:	f640 0036 	movw	r0, #2102	; 0x836
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop

080118c0 <rcl_action_take_result_response>:
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d03a      	beq.n	801193a <rcl_action_take_result_response+0x7a>
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	4604      	mov	r4, r0
 80118c8:	6800      	ldr	r0, [r0, #0]
 80118ca:	b388      	cbz	r0, 8011930 <rcl_action_take_result_response+0x70>
 80118cc:	460e      	mov	r6, r1
 80118ce:	4615      	mov	r5, r2
 80118d0:	f7fd ffa2 	bl	800f818 <rcl_client_is_valid>
 80118d4:	b338      	cbz	r0, 8011926 <rcl_action_take_result_response+0x66>
 80118d6:	6820      	ldr	r0, [r4, #0]
 80118d8:	3004      	adds	r0, #4
 80118da:	f7fd ff9d 	bl	800f818 <rcl_client_is_valid>
 80118de:	b310      	cbz	r0, 8011926 <rcl_action_take_result_response+0x66>
 80118e0:	6820      	ldr	r0, [r4, #0]
 80118e2:	3008      	adds	r0, #8
 80118e4:	f7fd ff98 	bl	800f818 <rcl_client_is_valid>
 80118e8:	b1e8      	cbz	r0, 8011926 <rcl_action_take_result_response+0x66>
 80118ea:	6820      	ldr	r0, [r4, #0]
 80118ec:	300c      	adds	r0, #12
 80118ee:	f7fe ff6d 	bl	80107cc <rcl_subscription_is_valid>
 80118f2:	b1c0      	cbz	r0, 8011926 <rcl_action_take_result_response+0x66>
 80118f4:	6820      	ldr	r0, [r4, #0]
 80118f6:	3010      	adds	r0, #16
 80118f8:	f7fe ff68 	bl	80107cc <rcl_subscription_is_valid>
 80118fc:	b198      	cbz	r0, 8011926 <rcl_action_take_result_response+0x66>
 80118fe:	b1d5      	cbz	r5, 8011936 <rcl_action_take_result_response+0x76>
 8011900:	b1ce      	cbz	r6, 8011936 <rcl_action_take_result_response+0x76>
 8011902:	6820      	ldr	r0, [r4, #0]
 8011904:	462a      	mov	r2, r5
 8011906:	4631      	mov	r1, r6
 8011908:	3008      	adds	r0, #8
 801190a:	f7fd ff3d 	bl	800f788 <rcl_take_response>
 801190e:	b148      	cbz	r0, 8011924 <rcl_action_take_result_response+0x64>
 8011910:	280a      	cmp	r0, #10
 8011912:	d007      	beq.n	8011924 <rcl_action_take_result_response+0x64>
 8011914:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011918:	f640 0337 	movw	r3, #2103	; 0x837
 801191c:	4290      	cmp	r0, r2
 801191e:	bf0c      	ite	eq
 8011920:	4618      	moveq	r0, r3
 8011922:	2001      	movne	r0, #1
 8011924:	bd70      	pop	{r4, r5, r6, pc}
 8011926:	f7f9 f8e7 	bl	800aaf8 <rcutils_reset_error>
 801192a:	f640 0036 	movw	r0, #2102	; 0x836
 801192e:	bd70      	pop	{r4, r5, r6, pc}
 8011930:	f640 0036 	movw	r0, #2102	; 0x836
 8011934:	bd70      	pop	{r4, r5, r6, pc}
 8011936:	200b      	movs	r0, #11
 8011938:	bd70      	pop	{r4, r5, r6, pc}
 801193a:	f640 0036 	movw	r0, #2102	; 0x836
 801193e:	4770      	bx	lr

08011940 <rcl_action_take_cancel_response>:
 8011940:	2800      	cmp	r0, #0
 8011942:	d03a      	beq.n	80119ba <rcl_action_take_cancel_response+0x7a>
 8011944:	b570      	push	{r4, r5, r6, lr}
 8011946:	4604      	mov	r4, r0
 8011948:	6800      	ldr	r0, [r0, #0]
 801194a:	b388      	cbz	r0, 80119b0 <rcl_action_take_cancel_response+0x70>
 801194c:	460e      	mov	r6, r1
 801194e:	4615      	mov	r5, r2
 8011950:	f7fd ff62 	bl	800f818 <rcl_client_is_valid>
 8011954:	b338      	cbz	r0, 80119a6 <rcl_action_take_cancel_response+0x66>
 8011956:	6820      	ldr	r0, [r4, #0]
 8011958:	3004      	adds	r0, #4
 801195a:	f7fd ff5d 	bl	800f818 <rcl_client_is_valid>
 801195e:	b310      	cbz	r0, 80119a6 <rcl_action_take_cancel_response+0x66>
 8011960:	6820      	ldr	r0, [r4, #0]
 8011962:	3008      	adds	r0, #8
 8011964:	f7fd ff58 	bl	800f818 <rcl_client_is_valid>
 8011968:	b1e8      	cbz	r0, 80119a6 <rcl_action_take_cancel_response+0x66>
 801196a:	6820      	ldr	r0, [r4, #0]
 801196c:	300c      	adds	r0, #12
 801196e:	f7fe ff2d 	bl	80107cc <rcl_subscription_is_valid>
 8011972:	b1c0      	cbz	r0, 80119a6 <rcl_action_take_cancel_response+0x66>
 8011974:	6820      	ldr	r0, [r4, #0]
 8011976:	3010      	adds	r0, #16
 8011978:	f7fe ff28 	bl	80107cc <rcl_subscription_is_valid>
 801197c:	b198      	cbz	r0, 80119a6 <rcl_action_take_cancel_response+0x66>
 801197e:	b1d5      	cbz	r5, 80119b6 <rcl_action_take_cancel_response+0x76>
 8011980:	b1ce      	cbz	r6, 80119b6 <rcl_action_take_cancel_response+0x76>
 8011982:	6820      	ldr	r0, [r4, #0]
 8011984:	462a      	mov	r2, r5
 8011986:	4631      	mov	r1, r6
 8011988:	3004      	adds	r0, #4
 801198a:	f7fd fefd 	bl	800f788 <rcl_take_response>
 801198e:	b148      	cbz	r0, 80119a4 <rcl_action_take_cancel_response+0x64>
 8011990:	280a      	cmp	r0, #10
 8011992:	d007      	beq.n	80119a4 <rcl_action_take_cancel_response+0x64>
 8011994:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011998:	f640 0337 	movw	r3, #2103	; 0x837
 801199c:	4290      	cmp	r0, r2
 801199e:	bf0c      	ite	eq
 80119a0:	4618      	moveq	r0, r3
 80119a2:	2001      	movne	r0, #1
 80119a4:	bd70      	pop	{r4, r5, r6, pc}
 80119a6:	f7f9 f8a7 	bl	800aaf8 <rcutils_reset_error>
 80119aa:	f640 0036 	movw	r0, #2102	; 0x836
 80119ae:	bd70      	pop	{r4, r5, r6, pc}
 80119b0:	f640 0036 	movw	r0, #2102	; 0x836
 80119b4:	bd70      	pop	{r4, r5, r6, pc}
 80119b6:	200b      	movs	r0, #11
 80119b8:	bd70      	pop	{r4, r5, r6, pc}
 80119ba:	f640 0036 	movw	r0, #2102	; 0x836
 80119be:	4770      	bx	lr

080119c0 <rcl_action_take_feedback>:
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d038      	beq.n	8011a36 <rcl_action_take_feedback+0x76>
 80119c4:	b530      	push	{r4, r5, lr}
 80119c6:	4604      	mov	r4, r0
 80119c8:	6800      	ldr	r0, [r0, #0]
 80119ca:	b091      	sub	sp, #68	; 0x44
 80119cc:	b378      	cbz	r0, 8011a2e <rcl_action_take_feedback+0x6e>
 80119ce:	460d      	mov	r5, r1
 80119d0:	f7fd ff22 	bl	800f818 <rcl_client_is_valid>
 80119d4:	b328      	cbz	r0, 8011a22 <rcl_action_take_feedback+0x62>
 80119d6:	6820      	ldr	r0, [r4, #0]
 80119d8:	3004      	adds	r0, #4
 80119da:	f7fd ff1d 	bl	800f818 <rcl_client_is_valid>
 80119de:	b300      	cbz	r0, 8011a22 <rcl_action_take_feedback+0x62>
 80119e0:	6820      	ldr	r0, [r4, #0]
 80119e2:	3008      	adds	r0, #8
 80119e4:	f7fd ff18 	bl	800f818 <rcl_client_is_valid>
 80119e8:	b1d8      	cbz	r0, 8011a22 <rcl_action_take_feedback+0x62>
 80119ea:	6820      	ldr	r0, [r4, #0]
 80119ec:	300c      	adds	r0, #12
 80119ee:	f7fe feed 	bl	80107cc <rcl_subscription_is_valid>
 80119f2:	b1b0      	cbz	r0, 8011a22 <rcl_action_take_feedback+0x62>
 80119f4:	6820      	ldr	r0, [r4, #0]
 80119f6:	3010      	adds	r0, #16
 80119f8:	f7fe fee8 	bl	80107cc <rcl_subscription_is_valid>
 80119fc:	b188      	cbz	r0, 8011a22 <rcl_action_take_feedback+0x62>
 80119fe:	b1ed      	cbz	r5, 8011a3c <rcl_action_take_feedback+0x7c>
 8011a00:	6820      	ldr	r0, [r4, #0]
 8011a02:	2300      	movs	r3, #0
 8011a04:	466a      	mov	r2, sp
 8011a06:	4629      	mov	r1, r5
 8011a08:	300c      	adds	r0, #12
 8011a0a:	f7fe fe83 	bl	8010714 <rcl_take>
 8011a0e:	b160      	cbz	r0, 8011a2a <rcl_action_take_feedback+0x6a>
 8011a10:	f240 1391 	movw	r3, #401	; 0x191
 8011a14:	4298      	cmp	r0, r3
 8011a16:	d014      	beq.n	8011a42 <rcl_action_take_feedback+0x82>
 8011a18:	280a      	cmp	r0, #10
 8011a1a:	bf18      	it	ne
 8011a1c:	2001      	movne	r0, #1
 8011a1e:	b011      	add	sp, #68	; 0x44
 8011a20:	bd30      	pop	{r4, r5, pc}
 8011a22:	f7f9 f869 	bl	800aaf8 <rcutils_reset_error>
 8011a26:	f640 0036 	movw	r0, #2102	; 0x836
 8011a2a:	b011      	add	sp, #68	; 0x44
 8011a2c:	bd30      	pop	{r4, r5, pc}
 8011a2e:	f640 0036 	movw	r0, #2102	; 0x836
 8011a32:	b011      	add	sp, #68	; 0x44
 8011a34:	bd30      	pop	{r4, r5, pc}
 8011a36:	f640 0036 	movw	r0, #2102	; 0x836
 8011a3a:	4770      	bx	lr
 8011a3c:	200b      	movs	r0, #11
 8011a3e:	b011      	add	sp, #68	; 0x44
 8011a40:	bd30      	pop	{r4, r5, pc}
 8011a42:	f640 0037 	movw	r0, #2103	; 0x837
 8011a46:	e7f0      	b.n	8011a2a <rcl_action_take_feedback+0x6a>

08011a48 <rcl_action_wait_set_add_action_client>:
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d048      	beq.n	8011ade <rcl_action_wait_set_add_action_client+0x96>
 8011a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a4e:	460c      	mov	r4, r1
 8011a50:	2900      	cmp	r1, #0
 8011a52:	d03c      	beq.n	8011ace <rcl_action_wait_set_add_action_client+0x86>
 8011a54:	4605      	mov	r5, r0
 8011a56:	6808      	ldr	r0, [r1, #0]
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	d038      	beq.n	8011ace <rcl_action_wait_set_add_action_client+0x86>
 8011a5c:	4617      	mov	r7, r2
 8011a5e:	461e      	mov	r6, r3
 8011a60:	f7fd feda 	bl	800f818 <rcl_client_is_valid>
 8011a64:	b3b0      	cbz	r0, 8011ad4 <rcl_action_wait_set_add_action_client+0x8c>
 8011a66:	6820      	ldr	r0, [r4, #0]
 8011a68:	3004      	adds	r0, #4
 8011a6a:	f7fd fed5 	bl	800f818 <rcl_client_is_valid>
 8011a6e:	b388      	cbz	r0, 8011ad4 <rcl_action_wait_set_add_action_client+0x8c>
 8011a70:	6820      	ldr	r0, [r4, #0]
 8011a72:	3008      	adds	r0, #8
 8011a74:	f7fd fed0 	bl	800f818 <rcl_client_is_valid>
 8011a78:	b360      	cbz	r0, 8011ad4 <rcl_action_wait_set_add_action_client+0x8c>
 8011a7a:	6820      	ldr	r0, [r4, #0]
 8011a7c:	300c      	adds	r0, #12
 8011a7e:	f7fe fea5 	bl	80107cc <rcl_subscription_is_valid>
 8011a82:	b338      	cbz	r0, 8011ad4 <rcl_action_wait_set_add_action_client+0x8c>
 8011a84:	6820      	ldr	r0, [r4, #0]
 8011a86:	3010      	adds	r0, #16
 8011a88:	f7fe fea0 	bl	80107cc <rcl_subscription_is_valid>
 8011a8c:	b310      	cbz	r0, 8011ad4 <rcl_action_wait_set_add_action_client+0x8c>
 8011a8e:	6821      	ldr	r1, [r4, #0]
 8011a90:	4628      	mov	r0, r5
 8011a92:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8011a96:	f7ff fcd1 	bl	801143c <rcl_wait_set_add_client>
 8011a9a:	b9b8      	cbnz	r0, 8011acc <rcl_action_wait_set_add_action_client+0x84>
 8011a9c:	6821      	ldr	r1, [r4, #0]
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8011aa4:	3104      	adds	r1, #4
 8011aa6:	f7ff fcc9 	bl	801143c <rcl_wait_set_add_client>
 8011aaa:	b978      	cbnz	r0, 8011acc <rcl_action_wait_set_add_action_client+0x84>
 8011aac:	6821      	ldr	r1, [r4, #0]
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8011ab4:	3108      	adds	r1, #8
 8011ab6:	f7ff fcc1 	bl	801143c <rcl_wait_set_add_client>
 8011aba:	b938      	cbnz	r0, 8011acc <rcl_action_wait_set_add_action_client+0x84>
 8011abc:	6821      	ldr	r1, [r4, #0]
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8011ac4:	310c      	adds	r1, #12
 8011ac6:	f7ff f969 	bl	8010d9c <rcl_wait_set_add_subscription>
 8011aca:	b158      	cbz	r0, 8011ae4 <rcl_action_wait_set_add_action_client+0x9c>
 8011acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ace:	f640 0036 	movw	r0, #2102	; 0x836
 8011ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ad4:	f7f9 f810 	bl	800aaf8 <rcutils_reset_error>
 8011ad8:	f640 0036 	movw	r0, #2102	; 0x836
 8011adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ade:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011ae2:	4770      	bx	lr
 8011ae4:	6821      	ldr	r1, [r4, #0]
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8011aec:	3110      	adds	r1, #16
 8011aee:	f7ff f955 	bl	8010d9c <rcl_wait_set_add_subscription>
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d1ea      	bne.n	8011acc <rcl_action_wait_set_add_action_client+0x84>
 8011af6:	b11f      	cbz	r7, 8011b00 <rcl_action_wait_set_add_action_client+0xb8>
 8011af8:	6823      	ldr	r3, [r4, #0]
 8011afa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8011afe:	603b      	str	r3, [r7, #0]
 8011b00:	2e00      	cmp	r6, #0
 8011b02:	d0e3      	beq.n	8011acc <rcl_action_wait_set_add_action_client+0x84>
 8011b04:	6823      	ldr	r3, [r4, #0]
 8011b06:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8011b0a:	6033      	str	r3, [r6, #0]
 8011b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b0e:	bf00      	nop

08011b10 <rcl_action_client_wait_set_get_entities_ready>:
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d050      	beq.n	8011bb6 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8011b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b18:	460c      	mov	r4, r1
 8011b1a:	2900      	cmp	r1, #0
 8011b1c:	d03e      	beq.n	8011b9c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8011b1e:	4605      	mov	r5, r0
 8011b20:	6808      	ldr	r0, [r1, #0]
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d03a      	beq.n	8011b9c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8011b26:	4616      	mov	r6, r2
 8011b28:	461f      	mov	r7, r3
 8011b2a:	f7fd fe75 	bl	800f818 <rcl_client_is_valid>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d038      	beq.n	8011ba4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011b32:	6820      	ldr	r0, [r4, #0]
 8011b34:	3004      	adds	r0, #4
 8011b36:	f7fd fe6f 	bl	800f818 <rcl_client_is_valid>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d032      	beq.n	8011ba4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011b3e:	6820      	ldr	r0, [r4, #0]
 8011b40:	3008      	adds	r0, #8
 8011b42:	f7fd fe69 	bl	800f818 <rcl_client_is_valid>
 8011b46:	b368      	cbz	r0, 8011ba4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011b48:	6820      	ldr	r0, [r4, #0]
 8011b4a:	300c      	adds	r0, #12
 8011b4c:	f7fe fe3e 	bl	80107cc <rcl_subscription_is_valid>
 8011b50:	b340      	cbz	r0, 8011ba4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011b52:	6820      	ldr	r0, [r4, #0]
 8011b54:	3010      	adds	r0, #16
 8011b56:	f7fe fe39 	bl	80107cc <rcl_subscription_is_valid>
 8011b5a:	b318      	cbz	r0, 8011ba4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011b5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011b60:	2a00      	cmp	r2, #0
 8011b62:	bf18      	it	ne
 8011b64:	2b00      	cmpne	r3, #0
 8011b66:	9b08      	ldr	r3, [sp, #32]
 8011b68:	bf0c      	ite	eq
 8011b6a:	2101      	moveq	r1, #1
 8011b6c:	2100      	movne	r1, #0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	bf08      	it	eq
 8011b72:	f041 0101 	orreq.w	r1, r1, #1
 8011b76:	2f00      	cmp	r7, #0
 8011b78:	bf08      	it	eq
 8011b7a:	f041 0101 	orreq.w	r1, r1, #1
 8011b7e:	b9b9      	cbnz	r1, 8011bb0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011b80:	b1b6      	cbz	r6, 8011bb0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	686c      	ldr	r4, [r5, #4]
 8011b86:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8011b8a:	428a      	cmp	r2, r1
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	bf38      	it	cc
 8011b90:	4608      	movcc	r0, r1
 8011b92:	4284      	cmp	r4, r0
 8011b94:	d812      	bhi.n	8011bbc <rcl_action_client_wait_set_get_entities_ready+0xac>
 8011b96:	2001      	movs	r0, #1
 8011b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b9c:	f640 0036 	movw	r0, #2102	; 0x836
 8011ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ba4:	f7f8 ffa8 	bl	800aaf8 <rcutils_reset_error>
 8011ba8:	f640 0036 	movw	r0, #2102	; 0x836
 8011bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bb0:	200b      	movs	r0, #11
 8011bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bb6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011bba:	4770      	bx	lr
 8011bbc:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8011bc0:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 8011bc4:	45f0      	cmp	r8, lr
 8011bc6:	4640      	mov	r0, r8
 8011bc8:	69ec      	ldr	r4, [r5, #28]
 8011bca:	bf38      	it	cc
 8011bcc:	4670      	movcc	r0, lr
 8011bce:	4560      	cmp	r0, ip
 8011bd0:	bf38      	it	cc
 8011bd2:	4660      	movcc	r0, ip
 8011bd4:	4284      	cmp	r4, r0
 8011bd6:	d9de      	bls.n	8011b96 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8011bd8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8011bdc:	682d      	ldr	r5, [r5, #0]
 8011bde:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8011be2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8011be6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8011bea:	1a18      	subs	r0, r3, r0
 8011bec:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8011bf0:	f103 0c0c 	add.w	ip, r3, #12
 8011bf4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8011bf8:	fab0 f080 	clz	r0, r0
 8011bfc:	eba5 050c 	sub.w	r5, r5, ip
 8011c00:	0940      	lsrs	r0, r0, #5
 8011c02:	fab5 f585 	clz	r5, r5
 8011c06:	096d      	lsrs	r5, r5, #5
 8011c08:	7035      	strb	r5, [r6, #0]
 8011c0a:	f103 0510 	add.w	r5, r3, #16
 8011c0e:	1b64      	subs	r4, r4, r5
 8011c10:	9d08      	ldr	r5, [sp, #32]
 8011c12:	fab4 f484 	clz	r4, r4
 8011c16:	0964      	lsrs	r4, r4, #5
 8011c18:	703c      	strb	r4, [r7, #0]
 8011c1a:	1d1c      	adds	r4, r3, #4
 8011c1c:	3308      	adds	r3, #8
 8011c1e:	7028      	strb	r0, [r5, #0]
 8011c20:	1b09      	subs	r1, r1, r4
 8011c22:	2000      	movs	r0, #0
 8011c24:	1ad3      	subs	r3, r2, r3
 8011c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c28:	fab1 f181 	clz	r1, r1
 8011c2c:	fab3 f383 	clz	r3, r3
 8011c30:	0949      	lsrs	r1, r1, #5
 8011c32:	095b      	lsrs	r3, r3, #5
 8011c34:	7011      	strb	r1, [r2, #0]
 8011c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c38:	7013      	strb	r3, [r2, #0]
 8011c3a:	e7b1      	b.n	8011ba0 <rcl_action_client_wait_set_get_entities_ready+0x90>

08011c3c <rcl_action_take_goal_request>:
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	d039      	beq.n	8011cb4 <rcl_action_take_goal_request+0x78>
 8011c40:	b570      	push	{r4, r5, r6, lr}
 8011c42:	4604      	mov	r4, r0
 8011c44:	6800      	ldr	r0, [r0, #0]
 8011c46:	b380      	cbz	r0, 8011caa <rcl_action_take_goal_request+0x6e>
 8011c48:	460e      	mov	r6, r1
 8011c4a:	4615      	mov	r5, r2
 8011c4c:	f7fe fc76 	bl	801053c <rcl_service_is_valid>
 8011c50:	b330      	cbz	r0, 8011ca0 <rcl_action_take_goal_request+0x64>
 8011c52:	6820      	ldr	r0, [r4, #0]
 8011c54:	3004      	adds	r0, #4
 8011c56:	f7fe fc71 	bl	801053c <rcl_service_is_valid>
 8011c5a:	b308      	cbz	r0, 8011ca0 <rcl_action_take_goal_request+0x64>
 8011c5c:	6820      	ldr	r0, [r4, #0]
 8011c5e:	3008      	adds	r0, #8
 8011c60:	f7fe fc6c 	bl	801053c <rcl_service_is_valid>
 8011c64:	b1e0      	cbz	r0, 8011ca0 <rcl_action_take_goal_request+0x64>
 8011c66:	6820      	ldr	r0, [r4, #0]
 8011c68:	300c      	adds	r0, #12
 8011c6a:	f7f7 ff89 	bl	8009b80 <rcl_publisher_is_valid>
 8011c6e:	b1b8      	cbz	r0, 8011ca0 <rcl_action_take_goal_request+0x64>
 8011c70:	6820      	ldr	r0, [r4, #0]
 8011c72:	3010      	adds	r0, #16
 8011c74:	f7f7 ff84 	bl	8009b80 <rcl_publisher_is_valid>
 8011c78:	b190      	cbz	r0, 8011ca0 <rcl_action_take_goal_request+0x64>
 8011c7a:	b1cd      	cbz	r5, 8011cb0 <rcl_action_take_goal_request+0x74>
 8011c7c:	b1c6      	cbz	r6, 8011cb0 <rcl_action_take_goal_request+0x74>
 8011c7e:	462a      	mov	r2, r5
 8011c80:	4631      	mov	r1, r6
 8011c82:	6820      	ldr	r0, [r4, #0]
 8011c84:	f7fe fc02 	bl	801048c <rcl_take_request>
 8011c88:	b148      	cbz	r0, 8011c9e <rcl_action_take_goal_request+0x62>
 8011c8a:	280a      	cmp	r0, #10
 8011c8c:	d007      	beq.n	8011c9e <rcl_action_take_goal_request+0x62>
 8011c8e:	f240 2259 	movw	r2, #601	; 0x259
 8011c92:	f640 0399 	movw	r3, #2201	; 0x899
 8011c96:	4290      	cmp	r0, r2
 8011c98:	bf0c      	ite	eq
 8011c9a:	4618      	moveq	r0, r3
 8011c9c:	2001      	movne	r0, #1
 8011c9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ca0:	f7f8 ff2a 	bl	800aaf8 <rcutils_reset_error>
 8011ca4:	f640 0098 	movw	r0, #2200	; 0x898
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
 8011caa:	f640 0098 	movw	r0, #2200	; 0x898
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	200b      	movs	r0, #11
 8011cb2:	bd70      	pop	{r4, r5, r6, pc}
 8011cb4:	f640 0098 	movw	r0, #2200	; 0x898
 8011cb8:	4770      	bx	lr
 8011cba:	bf00      	nop

08011cbc <rcl_action_send_goal_response>:
 8011cbc:	b390      	cbz	r0, 8011d24 <rcl_action_send_goal_response+0x68>
 8011cbe:	b570      	push	{r4, r5, r6, lr}
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	6800      	ldr	r0, [r0, #0]
 8011cc4:	b348      	cbz	r0, 8011d1a <rcl_action_send_goal_response+0x5e>
 8011cc6:	460e      	mov	r6, r1
 8011cc8:	4615      	mov	r5, r2
 8011cca:	f7fe fc37 	bl	801053c <rcl_service_is_valid>
 8011cce:	b1f8      	cbz	r0, 8011d10 <rcl_action_send_goal_response+0x54>
 8011cd0:	6820      	ldr	r0, [r4, #0]
 8011cd2:	3004      	adds	r0, #4
 8011cd4:	f7fe fc32 	bl	801053c <rcl_service_is_valid>
 8011cd8:	b1d0      	cbz	r0, 8011d10 <rcl_action_send_goal_response+0x54>
 8011cda:	6820      	ldr	r0, [r4, #0]
 8011cdc:	3008      	adds	r0, #8
 8011cde:	f7fe fc2d 	bl	801053c <rcl_service_is_valid>
 8011ce2:	b1a8      	cbz	r0, 8011d10 <rcl_action_send_goal_response+0x54>
 8011ce4:	6820      	ldr	r0, [r4, #0]
 8011ce6:	300c      	adds	r0, #12
 8011ce8:	f7f7 ff4a 	bl	8009b80 <rcl_publisher_is_valid>
 8011cec:	b180      	cbz	r0, 8011d10 <rcl_action_send_goal_response+0x54>
 8011cee:	6820      	ldr	r0, [r4, #0]
 8011cf0:	3010      	adds	r0, #16
 8011cf2:	f7f7 ff45 	bl	8009b80 <rcl_publisher_is_valid>
 8011cf6:	b158      	cbz	r0, 8011d10 <rcl_action_send_goal_response+0x54>
 8011cf8:	b195      	cbz	r5, 8011d20 <rcl_action_send_goal_response+0x64>
 8011cfa:	b18e      	cbz	r6, 8011d20 <rcl_action_send_goal_response+0x64>
 8011cfc:	462a      	mov	r2, r5
 8011cfe:	4631      	mov	r1, r6
 8011d00:	6820      	ldr	r0, [r4, #0]
 8011d02:	f7fe fc03 	bl	801050c <rcl_send_response>
 8011d06:	b110      	cbz	r0, 8011d0e <rcl_action_send_goal_response+0x52>
 8011d08:	2802      	cmp	r0, #2
 8011d0a:	bf18      	it	ne
 8011d0c:	2001      	movne	r0, #1
 8011d0e:	bd70      	pop	{r4, r5, r6, pc}
 8011d10:	f7f8 fef2 	bl	800aaf8 <rcutils_reset_error>
 8011d14:	f640 0098 	movw	r0, #2200	; 0x898
 8011d18:	bd70      	pop	{r4, r5, r6, pc}
 8011d1a:	f640 0098 	movw	r0, #2200	; 0x898
 8011d1e:	bd70      	pop	{r4, r5, r6, pc}
 8011d20:	200b      	movs	r0, #11
 8011d22:	bd70      	pop	{r4, r5, r6, pc}
 8011d24:	f640 0098 	movw	r0, #2200	; 0x898
 8011d28:	4770      	bx	lr
 8011d2a:	bf00      	nop

08011d2c <rcl_action_take_result_request>:
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	d03a      	beq.n	8011da6 <rcl_action_take_result_request+0x7a>
 8011d30:	b570      	push	{r4, r5, r6, lr}
 8011d32:	4604      	mov	r4, r0
 8011d34:	6800      	ldr	r0, [r0, #0]
 8011d36:	b388      	cbz	r0, 8011d9c <rcl_action_take_result_request+0x70>
 8011d38:	460e      	mov	r6, r1
 8011d3a:	4615      	mov	r5, r2
 8011d3c:	f7fe fbfe 	bl	801053c <rcl_service_is_valid>
 8011d40:	b338      	cbz	r0, 8011d92 <rcl_action_take_result_request+0x66>
 8011d42:	6820      	ldr	r0, [r4, #0]
 8011d44:	3004      	adds	r0, #4
 8011d46:	f7fe fbf9 	bl	801053c <rcl_service_is_valid>
 8011d4a:	b310      	cbz	r0, 8011d92 <rcl_action_take_result_request+0x66>
 8011d4c:	6820      	ldr	r0, [r4, #0]
 8011d4e:	3008      	adds	r0, #8
 8011d50:	f7fe fbf4 	bl	801053c <rcl_service_is_valid>
 8011d54:	b1e8      	cbz	r0, 8011d92 <rcl_action_take_result_request+0x66>
 8011d56:	6820      	ldr	r0, [r4, #0]
 8011d58:	300c      	adds	r0, #12
 8011d5a:	f7f7 ff11 	bl	8009b80 <rcl_publisher_is_valid>
 8011d5e:	b1c0      	cbz	r0, 8011d92 <rcl_action_take_result_request+0x66>
 8011d60:	6820      	ldr	r0, [r4, #0]
 8011d62:	3010      	adds	r0, #16
 8011d64:	f7f7 ff0c 	bl	8009b80 <rcl_publisher_is_valid>
 8011d68:	b198      	cbz	r0, 8011d92 <rcl_action_take_result_request+0x66>
 8011d6a:	b1d5      	cbz	r5, 8011da2 <rcl_action_take_result_request+0x76>
 8011d6c:	b1ce      	cbz	r6, 8011da2 <rcl_action_take_result_request+0x76>
 8011d6e:	6820      	ldr	r0, [r4, #0]
 8011d70:	462a      	mov	r2, r5
 8011d72:	4631      	mov	r1, r6
 8011d74:	3008      	adds	r0, #8
 8011d76:	f7fe fb89 	bl	801048c <rcl_take_request>
 8011d7a:	b148      	cbz	r0, 8011d90 <rcl_action_take_result_request+0x64>
 8011d7c:	280a      	cmp	r0, #10
 8011d7e:	d007      	beq.n	8011d90 <rcl_action_take_result_request+0x64>
 8011d80:	f240 2259 	movw	r2, #601	; 0x259
 8011d84:	f640 0399 	movw	r3, #2201	; 0x899
 8011d88:	4290      	cmp	r0, r2
 8011d8a:	bf0c      	ite	eq
 8011d8c:	4618      	moveq	r0, r3
 8011d8e:	2001      	movne	r0, #1
 8011d90:	bd70      	pop	{r4, r5, r6, pc}
 8011d92:	f7f8 feb1 	bl	800aaf8 <rcutils_reset_error>
 8011d96:	f640 0098 	movw	r0, #2200	; 0x898
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}
 8011d9c:	f640 0098 	movw	r0, #2200	; 0x898
 8011da0:	bd70      	pop	{r4, r5, r6, pc}
 8011da2:	200b      	movs	r0, #11
 8011da4:	bd70      	pop	{r4, r5, r6, pc}
 8011da6:	f640 0098 	movw	r0, #2200	; 0x898
 8011daa:	4770      	bx	lr

08011dac <rcl_action_take_cancel_request>:
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d03a      	beq.n	8011e26 <rcl_action_take_cancel_request+0x7a>
 8011db0:	b570      	push	{r4, r5, r6, lr}
 8011db2:	4604      	mov	r4, r0
 8011db4:	6800      	ldr	r0, [r0, #0]
 8011db6:	b388      	cbz	r0, 8011e1c <rcl_action_take_cancel_request+0x70>
 8011db8:	460e      	mov	r6, r1
 8011dba:	4615      	mov	r5, r2
 8011dbc:	f7fe fbbe 	bl	801053c <rcl_service_is_valid>
 8011dc0:	b338      	cbz	r0, 8011e12 <rcl_action_take_cancel_request+0x66>
 8011dc2:	6820      	ldr	r0, [r4, #0]
 8011dc4:	3004      	adds	r0, #4
 8011dc6:	f7fe fbb9 	bl	801053c <rcl_service_is_valid>
 8011dca:	b310      	cbz	r0, 8011e12 <rcl_action_take_cancel_request+0x66>
 8011dcc:	6820      	ldr	r0, [r4, #0]
 8011dce:	3008      	adds	r0, #8
 8011dd0:	f7fe fbb4 	bl	801053c <rcl_service_is_valid>
 8011dd4:	b1e8      	cbz	r0, 8011e12 <rcl_action_take_cancel_request+0x66>
 8011dd6:	6820      	ldr	r0, [r4, #0]
 8011dd8:	300c      	adds	r0, #12
 8011dda:	f7f7 fed1 	bl	8009b80 <rcl_publisher_is_valid>
 8011dde:	b1c0      	cbz	r0, 8011e12 <rcl_action_take_cancel_request+0x66>
 8011de0:	6820      	ldr	r0, [r4, #0]
 8011de2:	3010      	adds	r0, #16
 8011de4:	f7f7 fecc 	bl	8009b80 <rcl_publisher_is_valid>
 8011de8:	b198      	cbz	r0, 8011e12 <rcl_action_take_cancel_request+0x66>
 8011dea:	b1d5      	cbz	r5, 8011e22 <rcl_action_take_cancel_request+0x76>
 8011dec:	b1ce      	cbz	r6, 8011e22 <rcl_action_take_cancel_request+0x76>
 8011dee:	6820      	ldr	r0, [r4, #0]
 8011df0:	462a      	mov	r2, r5
 8011df2:	4631      	mov	r1, r6
 8011df4:	3004      	adds	r0, #4
 8011df6:	f7fe fb49 	bl	801048c <rcl_take_request>
 8011dfa:	b148      	cbz	r0, 8011e10 <rcl_action_take_cancel_request+0x64>
 8011dfc:	280a      	cmp	r0, #10
 8011dfe:	d007      	beq.n	8011e10 <rcl_action_take_cancel_request+0x64>
 8011e00:	f240 2259 	movw	r2, #601	; 0x259
 8011e04:	f640 0399 	movw	r3, #2201	; 0x899
 8011e08:	4290      	cmp	r0, r2
 8011e0a:	bf0c      	ite	eq
 8011e0c:	4618      	moveq	r0, r3
 8011e0e:	2001      	movne	r0, #1
 8011e10:	bd70      	pop	{r4, r5, r6, pc}
 8011e12:	f7f8 fe71 	bl	800aaf8 <rcutils_reset_error>
 8011e16:	f640 0098 	movw	r0, #2200	; 0x898
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	f640 0098 	movw	r0, #2200	; 0x898
 8011e20:	bd70      	pop	{r4, r5, r6, pc}
 8011e22:	200b      	movs	r0, #11
 8011e24:	bd70      	pop	{r4, r5, r6, pc}
 8011e26:	f640 0098 	movw	r0, #2200	; 0x898
 8011e2a:	4770      	bx	lr

08011e2c <rcl_action_send_cancel_response>:
 8011e2c:	b398      	cbz	r0, 8011e96 <rcl_action_send_cancel_response+0x6a>
 8011e2e:	b570      	push	{r4, r5, r6, lr}
 8011e30:	4604      	mov	r4, r0
 8011e32:	6800      	ldr	r0, [r0, #0]
 8011e34:	b350      	cbz	r0, 8011e8c <rcl_action_send_cancel_response+0x60>
 8011e36:	460e      	mov	r6, r1
 8011e38:	4615      	mov	r5, r2
 8011e3a:	f7fe fb7f 	bl	801053c <rcl_service_is_valid>
 8011e3e:	b300      	cbz	r0, 8011e82 <rcl_action_send_cancel_response+0x56>
 8011e40:	6820      	ldr	r0, [r4, #0]
 8011e42:	3004      	adds	r0, #4
 8011e44:	f7fe fb7a 	bl	801053c <rcl_service_is_valid>
 8011e48:	b1d8      	cbz	r0, 8011e82 <rcl_action_send_cancel_response+0x56>
 8011e4a:	6820      	ldr	r0, [r4, #0]
 8011e4c:	3008      	adds	r0, #8
 8011e4e:	f7fe fb75 	bl	801053c <rcl_service_is_valid>
 8011e52:	b1b0      	cbz	r0, 8011e82 <rcl_action_send_cancel_response+0x56>
 8011e54:	6820      	ldr	r0, [r4, #0]
 8011e56:	300c      	adds	r0, #12
 8011e58:	f7f7 fe92 	bl	8009b80 <rcl_publisher_is_valid>
 8011e5c:	b188      	cbz	r0, 8011e82 <rcl_action_send_cancel_response+0x56>
 8011e5e:	6820      	ldr	r0, [r4, #0]
 8011e60:	3010      	adds	r0, #16
 8011e62:	f7f7 fe8d 	bl	8009b80 <rcl_publisher_is_valid>
 8011e66:	b160      	cbz	r0, 8011e82 <rcl_action_send_cancel_response+0x56>
 8011e68:	b19d      	cbz	r5, 8011e92 <rcl_action_send_cancel_response+0x66>
 8011e6a:	b196      	cbz	r6, 8011e92 <rcl_action_send_cancel_response+0x66>
 8011e6c:	6820      	ldr	r0, [r4, #0]
 8011e6e:	462a      	mov	r2, r5
 8011e70:	4631      	mov	r1, r6
 8011e72:	3004      	adds	r0, #4
 8011e74:	f7fe fb4a 	bl	801050c <rcl_send_response>
 8011e78:	b110      	cbz	r0, 8011e80 <rcl_action_send_cancel_response+0x54>
 8011e7a:	2802      	cmp	r0, #2
 8011e7c:	bf18      	it	ne
 8011e7e:	2001      	movne	r0, #1
 8011e80:	bd70      	pop	{r4, r5, r6, pc}
 8011e82:	f7f8 fe39 	bl	800aaf8 <rcutils_reset_error>
 8011e86:	f640 0098 	movw	r0, #2200	; 0x898
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}
 8011e8c:	f640 0098 	movw	r0, #2200	; 0x898
 8011e90:	bd70      	pop	{r4, r5, r6, pc}
 8011e92:	200b      	movs	r0, #11
 8011e94:	bd70      	pop	{r4, r5, r6, pc}
 8011e96:	f640 0098 	movw	r0, #2200	; 0x898
 8011e9a:	4770      	bx	lr

08011e9c <rcl_action_wait_set_add_action_server>:
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d04d      	beq.n	8011f3c <rcl_action_wait_set_add_action_server+0xa0>
 8011ea0:	b570      	push	{r4, r5, r6, lr}
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	b159      	cbz	r1, 8011ebe <rcl_action_wait_set_add_action_server+0x22>
 8011ea6:	4605      	mov	r5, r0
 8011ea8:	6808      	ldr	r0, [r1, #0]
 8011eaa:	b140      	cbz	r0, 8011ebe <rcl_action_wait_set_add_action_server+0x22>
 8011eac:	4616      	mov	r6, r2
 8011eae:	f7fe fb45 	bl	801053c <rcl_service_is_valid>
 8011eb2:	b120      	cbz	r0, 8011ebe <rcl_action_wait_set_add_action_server+0x22>
 8011eb4:	6820      	ldr	r0, [r4, #0]
 8011eb6:	3004      	adds	r0, #4
 8011eb8:	f7fe fb40 	bl	801053c <rcl_service_is_valid>
 8011ebc:	b910      	cbnz	r0, 8011ec4 <rcl_action_wait_set_add_action_server+0x28>
 8011ebe:	f640 0098 	movw	r0, #2200	; 0x898
 8011ec2:	bd70      	pop	{r4, r5, r6, pc}
 8011ec4:	6820      	ldr	r0, [r4, #0]
 8011ec6:	3008      	adds	r0, #8
 8011ec8:	f7fe fb38 	bl	801053c <rcl_service_is_valid>
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	d0f6      	beq.n	8011ebe <rcl_action_wait_set_add_action_server+0x22>
 8011ed0:	6820      	ldr	r0, [r4, #0]
 8011ed2:	300c      	adds	r0, #12
 8011ed4:	f7f7 fe6c 	bl	8009bb0 <rcl_publisher_is_valid_except_context>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d0f0      	beq.n	8011ebe <rcl_action_wait_set_add_action_server+0x22>
 8011edc:	6820      	ldr	r0, [r4, #0]
 8011ede:	3010      	adds	r0, #16
 8011ee0:	f7f7 fe66 	bl	8009bb0 <rcl_publisher_is_valid_except_context>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d0ea      	beq.n	8011ebe <rcl_action_wait_set_add_action_server+0x22>
 8011ee8:	6821      	ldr	r1, [r4, #0]
 8011eea:	4628      	mov	r0, r5
 8011eec:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8011ef0:	f7ff fad0 	bl	8011494 <rcl_wait_set_add_service>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d1e4      	bne.n	8011ec2 <rcl_action_wait_set_add_action_server+0x26>
 8011ef8:	6821      	ldr	r1, [r4, #0]
 8011efa:	4628      	mov	r0, r5
 8011efc:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8011f00:	3104      	adds	r1, #4
 8011f02:	f7ff fac7 	bl	8011494 <rcl_wait_set_add_service>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d1db      	bne.n	8011ec2 <rcl_action_wait_set_add_action_server+0x26>
 8011f0a:	6821      	ldr	r1, [r4, #0]
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8011f12:	3108      	adds	r1, #8
 8011f14:	f7ff fabe 	bl	8011494 <rcl_wait_set_add_service>
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d1d2      	bne.n	8011ec2 <rcl_action_wait_set_add_action_server+0x26>
 8011f1c:	6821      	ldr	r1, [r4, #0]
 8011f1e:	4628      	mov	r0, r5
 8011f20:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8011f24:	3114      	adds	r1, #20
 8011f26:	f7ff fa59 	bl	80113dc <rcl_wait_set_add_timer>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d1c9      	bne.n	8011ec2 <rcl_action_wait_set_add_action_server+0x26>
 8011f2e:	2e00      	cmp	r6, #0
 8011f30:	d0c7      	beq.n	8011ec2 <rcl_action_wait_set_add_action_server+0x26>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8011f38:	6033      	str	r3, [r6, #0]
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}
 8011f3c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop

08011f44 <rcl_action_server_wait_set_get_entities_ready>:
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d067      	beq.n	8012018 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8011f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4c:	460c      	mov	r4, r1
 8011f4e:	b161      	cbz	r1, 8011f6a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011f50:	4605      	mov	r5, r0
 8011f52:	6808      	ldr	r0, [r1, #0]
 8011f54:	b148      	cbz	r0, 8011f6a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011f56:	4616      	mov	r6, r2
 8011f58:	4698      	mov	r8, r3
 8011f5a:	f7fe faef 	bl	801053c <rcl_service_is_valid>
 8011f5e:	b120      	cbz	r0, 8011f6a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011f60:	6820      	ldr	r0, [r4, #0]
 8011f62:	3004      	adds	r0, #4
 8011f64:	f7fe faea 	bl	801053c <rcl_service_is_valid>
 8011f68:	b918      	cbnz	r0, 8011f72 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8011f6a:	f640 0098 	movw	r0, #2200	; 0x898
 8011f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f72:	6820      	ldr	r0, [r4, #0]
 8011f74:	3008      	adds	r0, #8
 8011f76:	f7fe fae1 	bl	801053c <rcl_service_is_valid>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	d0f5      	beq.n	8011f6a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011f7e:	6820      	ldr	r0, [r4, #0]
 8011f80:	300c      	adds	r0, #12
 8011f82:	f7f7 fe15 	bl	8009bb0 <rcl_publisher_is_valid_except_context>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d0ef      	beq.n	8011f6a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011f8a:	6820      	ldr	r0, [r4, #0]
 8011f8c:	3010      	adds	r0, #16
 8011f8e:	f7f7 fe0f 	bl	8009bb0 <rcl_publisher_is_valid_except_context>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d0e9      	beq.n	8011f6a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011f96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f9a:	2a00      	cmp	r2, #0
 8011f9c:	bf18      	it	ne
 8011f9e:	2b00      	cmpne	r3, #0
 8011fa0:	bf0c      	ite	eq
 8011fa2:	2101      	moveq	r1, #1
 8011fa4:	2100      	movne	r1, #0
 8011fa6:	f1b8 0f00 	cmp.w	r8, #0
 8011faa:	bf08      	it	eq
 8011fac:	f041 0101 	orreq.w	r1, r1, #1
 8011fb0:	bba9      	cbnz	r1, 801201e <rcl_action_server_wait_set_get_entities_ready+0xda>
 8011fb2:	b3a6      	cbz	r6, 801201e <rcl_action_server_wait_set_get_entities_ready+0xda>
 8011fb4:	6821      	ldr	r1, [r4, #0]
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	692c      	ldr	r4, [r5, #16]
 8011fba:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 8011fbe:	6a2f      	ldr	r7, [r5, #32]
 8011fc0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011fc4:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8011fc8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011fcc:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8011fd0:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8011fd4:	1a64      	subs	r4, r4, r1
 8011fd6:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8011fda:	fab4 f484 	clz	r4, r4
 8011fde:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8011fe2:	0964      	lsrs	r4, r4, #5
 8011fe4:	7034      	strb	r4, [r6, #0]
 8011fe6:	1d0c      	adds	r4, r1, #4
 8011fe8:	1b2c      	subs	r4, r5, r4
 8011fea:	fab4 f484 	clz	r4, r4
 8011fee:	0964      	lsrs	r4, r4, #5
 8011ff0:	f888 4000 	strb.w	r4, [r8]
 8011ff4:	f101 0408 	add.w	r4, r1, #8
 8011ff8:	1b1b      	subs	r3, r3, r4
 8011ffa:	9c06      	ldr	r4, [sp, #24]
 8011ffc:	fab3 f383 	clz	r3, r3
 8012000:	095b      	lsrs	r3, r3, #5
 8012002:	7023      	strb	r3, [r4, #0]
 8012004:	f101 0314 	add.w	r3, r1, #20
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	9a07      	ldr	r2, [sp, #28]
 801200c:	fab3 f383 	clz	r3, r3
 8012010:	095b      	lsrs	r3, r3, #5
 8012012:	7013      	strb	r3, [r2, #0]
 8012014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012018:	f44f 7061 	mov.w	r0, #900	; 0x384
 801201c:	4770      	bx	lr
 801201e:	200b      	movs	r0, #11
 8012020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012024 <_execute_event_handler>:
 8012024:	2002      	movs	r0, #2
 8012026:	4770      	bx	lr

08012028 <_cancel_goal_event_handler>:
 8012028:	2003      	movs	r0, #3
 801202a:	4770      	bx	lr

0801202c <_succeed_event_handler>:
 801202c:	2004      	movs	r0, #4
 801202e:	4770      	bx	lr

08012030 <_abort_event_handler>:
 8012030:	2006      	movs	r0, #6
 8012032:	4770      	bx	lr

08012034 <_canceled_event_handler>:
 8012034:	2005      	movs	r0, #5
 8012036:	4770      	bx	lr

08012038 <rcl_action_transition_goal_state>:
 8012038:	b2c2      	uxtb	r2, r0
 801203a:	2a06      	cmp	r2, #6
 801203c:	d810      	bhi.n	8012060 <rcl_action_transition_goal_state+0x28>
 801203e:	2904      	cmp	r1, #4
 8012040:	d80e      	bhi.n	8012060 <rcl_action_transition_goal_state+0x28>
 8012042:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012046:	b410      	push	{r4}
 8012048:	1853      	adds	r3, r2, r1
 801204a:	4c06      	ldr	r4, [pc, #24]	; (8012064 <rcl_action_transition_goal_state+0x2c>)
 801204c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012050:	b113      	cbz	r3, 8012058 <rcl_action_transition_goal_state+0x20>
 8012052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012056:	4718      	bx	r3
 8012058:	2000      	movs	r0, #0
 801205a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801205e:	4770      	bx	lr
 8012060:	2000      	movs	r0, #0
 8012062:	4770      	bx	lr
 8012064:	080182c4 	.word	0x080182c4

08012068 <rcl_action_get_zero_initialized_cancel_response>:
 8012068:	b510      	push	{r4, lr}
 801206a:	4c07      	ldr	r4, [pc, #28]	; (8012088 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801206c:	4686      	mov	lr, r0
 801206e:	4684      	mov	ip, r0
 8012070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012072:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012078:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	4670      	mov	r0, lr
 8012080:	f8cc 3000 	str.w	r3, [ip]
 8012084:	bd10      	pop	{r4, pc}
 8012086:	bf00      	nop
 8012088:	08018350 	.word	0x08018350

0801208c <rclc_action_send_result_request>:
 801208c:	b1d0      	cbz	r0, 80120c4 <rclc_action_send_result_request+0x38>
 801208e:	4684      	mov	ip, r0
 8012090:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012094:	b500      	push	{lr}
 8012096:	b087      	sub	sp, #28
 8012098:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801209c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80120a0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80120a4:	f10d 0e08 	add.w	lr, sp, #8
 80120a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80120ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80120b0:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 80120b4:	a902      	add	r1, sp, #8
 80120b6:	3010      	adds	r0, #16
 80120b8:	f7ff fbca 	bl	8011850 <rcl_action_send_result_request>
 80120bc:	b920      	cbnz	r0, 80120c8 <rclc_action_send_result_request+0x3c>
 80120be:	b007      	add	sp, #28
 80120c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80120c4:	200b      	movs	r0, #11
 80120c6:	4770      	bx	lr
 80120c8:	9001      	str	r0, [sp, #4]
 80120ca:	f7f8 fd15 	bl	800aaf8 <rcutils_reset_error>
 80120ce:	9801      	ldr	r0, [sp, #4]
 80120d0:	b007      	add	sp, #28
 80120d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80120d6:	bf00      	nop

080120d8 <rclc_action_take_goal_handle>:
 80120d8:	b160      	cbz	r0, 80120f4 <rclc_action_take_goal_handle+0x1c>
 80120da:	6883      	ldr	r3, [r0, #8]
 80120dc:	b143      	cbz	r3, 80120f0 <rclc_action_take_goal_handle+0x18>
 80120de:	6819      	ldr	r1, [r3, #0]
 80120e0:	2200      	movs	r2, #0
 80120e2:	6081      	str	r1, [r0, #8]
 80120e4:	721a      	strb	r2, [r3, #8]
 80120e6:	68c1      	ldr	r1, [r0, #12]
 80120e8:	621a      	str	r2, [r3, #32]
 80120ea:	849a      	strh	r2, [r3, #36]	; 0x24
 80120ec:	6019      	str	r1, [r3, #0]
 80120ee:	60c3      	str	r3, [r0, #12]
 80120f0:	4618      	mov	r0, r3
 80120f2:	4770      	bx	lr
 80120f4:	4603      	mov	r3, r0
 80120f6:	e7fb      	b.n	80120f0 <rclc_action_take_goal_handle+0x18>

080120f8 <rclc_action_remove_used_goal_handle>:
 80120f8:	b180      	cbz	r0, 801211c <rclc_action_remove_used_goal_handle+0x24>
 80120fa:	b179      	cbz	r1, 801211c <rclc_action_remove_used_goal_handle+0x24>
 80120fc:	68c3      	ldr	r3, [r0, #12]
 80120fe:	4299      	cmp	r1, r3
 8012100:	d00d      	beq.n	801211e <rclc_action_remove_used_goal_handle+0x26>
 8012102:	b12b      	cbz	r3, 8012110 <rclc_action_remove_used_goal_handle+0x18>
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	4291      	cmp	r1, r2
 8012108:	d003      	beq.n	8012112 <rclc_action_remove_used_goal_handle+0x1a>
 801210a:	4613      	mov	r3, r2
 801210c:	2b00      	cmp	r3, #0
 801210e:	d1f9      	bne.n	8012104 <rclc_action_remove_used_goal_handle+0xc>
 8012110:	4770      	bx	lr
 8012112:	680a      	ldr	r2, [r1, #0]
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	6883      	ldr	r3, [r0, #8]
 8012118:	600b      	str	r3, [r1, #0]
 801211a:	6081      	str	r1, [r0, #8]
 801211c:	4770      	bx	lr
 801211e:	680b      	ldr	r3, [r1, #0]
 8012120:	60c3      	str	r3, [r0, #12]
 8012122:	e7f8      	b.n	8012116 <rclc_action_remove_used_goal_handle+0x1e>

08012124 <rclc_action_find_goal_handle_by_uuid>:
 8012124:	b538      	push	{r3, r4, r5, lr}
 8012126:	b181      	cbz	r1, 801214a <rclc_action_find_goal_handle_by_uuid+0x26>
 8012128:	b178      	cbz	r0, 801214a <rclc_action_find_goal_handle_by_uuid+0x26>
 801212a:	68c4      	ldr	r4, [r0, #12]
 801212c:	460d      	mov	r5, r1
 801212e:	b914      	cbnz	r4, 8012136 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012130:	e009      	b.n	8012146 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012132:	6824      	ldr	r4, [r4, #0]
 8012134:	b13c      	cbz	r4, 8012146 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012136:	f104 0009 	add.w	r0, r4, #9
 801213a:	2210      	movs	r2, #16
 801213c:	4629      	mov	r1, r5
 801213e:	f004 fd81 	bl	8016c44 <memcmp>
 8012142:	2800      	cmp	r0, #0
 8012144:	d1f5      	bne.n	8012132 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012146:	4620      	mov	r0, r4
 8012148:	bd38      	pop	{r3, r4, r5, pc}
 801214a:	2400      	movs	r4, #0
 801214c:	4620      	mov	r0, r4
 801214e:	bd38      	pop	{r3, r4, r5, pc}

08012150 <rclc_action_find_first_handle_by_status>:
 8012150:	b140      	cbz	r0, 8012164 <rclc_action_find_first_handle_by_status+0x14>
 8012152:	68c0      	ldr	r0, [r0, #12]
 8012154:	b910      	cbnz	r0, 801215c <rclc_action_find_first_handle_by_status+0xc>
 8012156:	e005      	b.n	8012164 <rclc_action_find_first_handle_by_status+0x14>
 8012158:	6800      	ldr	r0, [r0, #0]
 801215a:	b118      	cbz	r0, 8012164 <rclc_action_find_first_handle_by_status+0x14>
 801215c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012160:	428b      	cmp	r3, r1
 8012162:	d1f9      	bne.n	8012158 <rclc_action_find_first_handle_by_status+0x8>
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop

08012168 <rclc_action_find_first_terminated_handle>:
 8012168:	b140      	cbz	r0, 801217c <rclc_action_find_first_terminated_handle+0x14>
 801216a:	68c0      	ldr	r0, [r0, #12]
 801216c:	b910      	cbnz	r0, 8012174 <rclc_action_find_first_terminated_handle+0xc>
 801216e:	e005      	b.n	801217c <rclc_action_find_first_terminated_handle+0x14>
 8012170:	6800      	ldr	r0, [r0, #0]
 8012172:	b118      	cbz	r0, 801217c <rclc_action_find_first_terminated_handle+0x14>
 8012174:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012178:	2b03      	cmp	r3, #3
 801217a:	ddf9      	ble.n	8012170 <rclc_action_find_first_terminated_handle+0x8>
 801217c:	4770      	bx	lr
 801217e:	bf00      	nop

08012180 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012180:	b170      	cbz	r0, 80121a0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012182:	68c0      	ldr	r0, [r0, #12]
 8012184:	b160      	cbz	r0, 80121a0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012186:	b410      	push	{r4}
 8012188:	e001      	b.n	801218e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801218a:	6800      	ldr	r0, [r0, #0]
 801218c:	b128      	cbz	r0, 801219a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801218e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8012192:	4299      	cmp	r1, r3
 8012194:	bf08      	it	eq
 8012196:	4294      	cmpeq	r4, r2
 8012198:	d1f7      	bne.n	801218a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801219a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801219e:	4770      	bx	lr
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop

080121a4 <rclc_action_find_handle_by_result_request_sequence_number>:
 80121a4:	b170      	cbz	r0, 80121c4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80121a6:	68c0      	ldr	r0, [r0, #12]
 80121a8:	b160      	cbz	r0, 80121c4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80121aa:	b410      	push	{r4}
 80121ac:	e001      	b.n	80121b2 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80121ae:	6800      	ldr	r0, [r0, #0]
 80121b0:	b128      	cbz	r0, 80121be <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80121b2:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 80121b6:	4299      	cmp	r1, r3
 80121b8:	bf08      	it	eq
 80121ba:	4294      	cmpeq	r4, r2
 80121bc:	d1f7      	bne.n	80121ae <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80121be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121c2:	4770      	bx	lr
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop

080121c8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80121c8:	b170      	cbz	r0, 80121e8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80121ca:	68c0      	ldr	r0, [r0, #12]
 80121cc:	b160      	cbz	r0, 80121e8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80121ce:	b410      	push	{r4}
 80121d0:	e001      	b.n	80121d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80121d2:	6800      	ldr	r0, [r0, #0]
 80121d4:	b128      	cbz	r0, 80121e2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80121d6:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 80121da:	4299      	cmp	r1, r3
 80121dc:	bf08      	it	eq
 80121de:	4294      	cmpeq	r4, r2
 80121e0:	d1f7      	bne.n	80121d2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80121e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121e6:	4770      	bx	lr
 80121e8:	4770      	bx	lr
 80121ea:	bf00      	nop

080121ec <rclc_action_find_first_handle_with_goal_response>:
 80121ec:	b140      	cbz	r0, 8012200 <rclc_action_find_first_handle_with_goal_response+0x14>
 80121ee:	68c0      	ldr	r0, [r0, #12]
 80121f0:	b910      	cbnz	r0, 80121f8 <rclc_action_find_first_handle_with_goal_response+0xc>
 80121f2:	e005      	b.n	8012200 <rclc_action_find_first_handle_with_goal_response+0x14>
 80121f4:	6800      	ldr	r0, [r0, #0]
 80121f6:	b118      	cbz	r0, 8012200 <rclc_action_find_first_handle_with_goal_response+0x14>
 80121f8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d0f9      	beq.n	80121f4 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop

08012204 <rclc_action_find_first_handle_with_result_response>:
 8012204:	b140      	cbz	r0, 8012218 <rclc_action_find_first_handle_with_result_response+0x14>
 8012206:	68c0      	ldr	r0, [r0, #12]
 8012208:	b910      	cbnz	r0, 8012210 <rclc_action_find_first_handle_with_result_response+0xc>
 801220a:	e005      	b.n	8012218 <rclc_action_find_first_handle_with_result_response+0x14>
 801220c:	6800      	ldr	r0, [r0, #0]
 801220e:	b118      	cbz	r0, 8012218 <rclc_action_find_first_handle_with_result_response+0x14>
 8012210:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8012214:	2b00      	cmp	r3, #0
 8012216:	d0f9      	beq.n	801220c <rclc_action_find_first_handle_with_result_response+0x8>
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop

0801221c <rclc_action_server_response_goal_request>:
 801221c:	b198      	cbz	r0, 8012246 <rclc_action_server_response_goal_request+0x2a>
 801221e:	2200      	movs	r2, #0
 8012220:	460b      	mov	r3, r1
 8012222:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8012226:	b510      	push	{r4, lr}
 8012228:	6844      	ldr	r4, [r0, #4]
 801222a:	b086      	sub	sp, #24
 801222c:	f104 0010 	add.w	r0, r4, #16
 8012230:	9205      	str	r2, [sp, #20]
 8012232:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012236:	aa03      	add	r2, sp, #12
 8012238:	f88d 300c 	strb.w	r3, [sp, #12]
 801223c:	f7ff fd3e 	bl	8011cbc <rcl_action_send_goal_response>
 8012240:	b918      	cbnz	r0, 801224a <rclc_action_server_response_goal_request+0x2e>
 8012242:	b006      	add	sp, #24
 8012244:	bd10      	pop	{r4, pc}
 8012246:	200b      	movs	r0, #11
 8012248:	4770      	bx	lr
 801224a:	9001      	str	r0, [sp, #4]
 801224c:	f7f8 fc54 	bl	800aaf8 <rcutils_reset_error>
 8012250:	9801      	ldr	r0, [sp, #4]
 8012252:	b006      	add	sp, #24
 8012254:	bd10      	pop	{r4, pc}
 8012256:	bf00      	nop

08012258 <rclc_action_server_goal_cancel_accept>:
 8012258:	b310      	cbz	r0, 80122a0 <rclc_action_server_goal_cancel_accept+0x48>
 801225a:	b510      	push	{r4, lr}
 801225c:	b090      	sub	sp, #64	; 0x40
 801225e:	4604      	mov	r4, r0
 8012260:	a806      	add	r0, sp, #24
 8012262:	f7ff ff01 	bl	8012068 <rcl_action_get_zero_initialized_cancel_response>
 8012266:	2300      	movs	r3, #0
 8012268:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801226c:	46ec      	mov	ip, sp
 801226e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012272:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012276:	f88d 3018 	strb.w	r3, [sp, #24]
 801227a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801227e:	f8cd d01c 	str.w	sp, [sp, #28]
 8012282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012286:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80122a8 <rclc_action_server_goal_cancel_accept+0x50>
 801228a:	6860      	ldr	r0, [r4, #4]
 801228c:	aa06      	add	r2, sp, #24
 801228e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8012292:	3010      	adds	r0, #16
 8012294:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012298:	f7ff fdc8 	bl	8011e2c <rcl_action_send_cancel_response>
 801229c:	b010      	add	sp, #64	; 0x40
 801229e:	bd10      	pop	{r4, pc}
 80122a0:	200b      	movs	r0, #11
 80122a2:	4770      	bx	lr
 80122a4:	f3af 8000 	nop.w
 80122a8:	00000001 	.word	0x00000001
 80122ac:	00000001 	.word	0x00000001

080122b0 <rclc_action_server_goal_cancel_reject>:
 80122b0:	b082      	sub	sp, #8
 80122b2:	b530      	push	{r4, r5, lr}
 80122b4:	b08b      	sub	sp, #44	; 0x2c
 80122b6:	ac0e      	add	r4, sp, #56	; 0x38
 80122b8:	e884 000c 	stmia.w	r4, {r2, r3}
 80122bc:	b188      	cbz	r0, 80122e2 <rclc_action_server_goal_cancel_reject+0x32>
 80122be:	4604      	mov	r4, r0
 80122c0:	a801      	add	r0, sp, #4
 80122c2:	460d      	mov	r5, r1
 80122c4:	f7ff fed0 	bl	8012068 <rcl_action_get_zero_initialized_cancel_response>
 80122c8:	aa01      	add	r2, sp, #4
 80122ca:	a90e      	add	r1, sp, #56	; 0x38
 80122cc:	f104 0010 	add.w	r0, r4, #16
 80122d0:	f88d 5004 	strb.w	r5, [sp, #4]
 80122d4:	f7ff fdaa 	bl	8011e2c <rcl_action_send_cancel_response>
 80122d8:	b00b      	add	sp, #44	; 0x2c
 80122da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122de:	b002      	add	sp, #8
 80122e0:	4770      	bx	lr
 80122e2:	200b      	movs	r0, #11
 80122e4:	b00b      	add	sp, #44	; 0x2c
 80122e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122ea:	b002      	add	sp, #8
 80122ec:	4770      	bx	lr
 80122ee:	bf00      	nop

080122f0 <__atomic_load_8>:
 80122f0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80122f4:	4a16      	ldr	r2, [pc, #88]	; (8012350 <__atomic_load_8+0x60>)
 80122f6:	4b17      	ldr	r3, [pc, #92]	; (8012354 <__atomic_load_8+0x64>)
 80122f8:	f04f 0c01 	mov.w	ip, #1
 80122fc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8012300:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012304:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012308:	fb02 f101 	mul.w	r1, r2, r1
 801230c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012310:	fba3 2301 	umull	r2, r3, r3, r1
 8012314:	091b      	lsrs	r3, r3, #4
 8012316:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801231a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801231e:	b4d0      	push	{r4, r6, r7}
 8012320:	1ac9      	subs	r1, r1, r3
 8012322:	4c0d      	ldr	r4, [pc, #52]	; (8012358 <__atomic_load_8+0x68>)
 8012324:	1862      	adds	r2, r4, r1
 8012326:	e8d2 3f4f 	ldrexb	r3, [r2]
 801232a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801232e:	2e00      	cmp	r6, #0
 8012330:	d1f9      	bne.n	8012326 <__atomic_load_8+0x36>
 8012332:	b2db      	uxtb	r3, r3
 8012334:	f3bf 8f5b 	dmb	ish
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1f4      	bne.n	8012326 <__atomic_load_8+0x36>
 801233c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012340:	f3bf 8f5b 	dmb	ish
 8012344:	5463      	strb	r3, [r4, r1]
 8012346:	4630      	mov	r0, r6
 8012348:	4639      	mov	r1, r7
 801234a:	bcd0      	pop	{r4, r6, r7}
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop
 8012350:	27d4eb2d 	.word	0x27d4eb2d
 8012354:	b21642c9 	.word	0xb21642c9
 8012358:	20013560 	.word	0x20013560

0801235c <__atomic_store_8>:
 801235c:	b570      	push	{r4, r5, r6, lr}
 801235e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8012362:	4916      	ldr	r1, [pc, #88]	; (80123bc <__atomic_store_8+0x60>)
 8012364:	4c16      	ldr	r4, [pc, #88]	; (80123c0 <__atomic_store_8+0x64>)
 8012366:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801236a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801236e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8012372:	fb01 fe0e 	mul.w	lr, r1, lr
 8012376:	4913      	ldr	r1, [pc, #76]	; (80123c4 <__atomic_store_8+0x68>)
 8012378:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801237c:	fba1 510e 	umull	r5, r1, r1, lr
 8012380:	f04f 0501 	mov.w	r5, #1
 8012384:	0909      	lsrs	r1, r1, #4
 8012386:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801238a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801238e:	ebae 0e01 	sub.w	lr, lr, r1
 8012392:	eb04 0c0e 	add.w	ip, r4, lr
 8012396:	e8dc 1f4f 	ldrexb	r1, [ip]
 801239a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801239e:	2e00      	cmp	r6, #0
 80123a0:	d1f9      	bne.n	8012396 <__atomic_store_8+0x3a>
 80123a2:	b2c9      	uxtb	r1, r1
 80123a4:	f3bf 8f5b 	dmb	ish
 80123a8:	2900      	cmp	r1, #0
 80123aa:	d1f4      	bne.n	8012396 <__atomic_store_8+0x3a>
 80123ac:	e9c0 2300 	strd	r2, r3, [r0]
 80123b0:	f3bf 8f5b 	dmb	ish
 80123b4:	f804 100e 	strb.w	r1, [r4, lr]
 80123b8:	bd70      	pop	{r4, r5, r6, pc}
 80123ba:	bf00      	nop
 80123bc:	27d4eb2d 	.word	0x27d4eb2d
 80123c0:	20013560 	.word	0x20013560
 80123c4:	b21642c9 	.word	0xb21642c9

080123c8 <__atomic_exchange_8>:
 80123c8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80123cc:	4917      	ldr	r1, [pc, #92]	; (801242c <__atomic_exchange_8+0x64>)
 80123ce:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 80123d2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80123d6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80123da:	fb01 fc0c 	mul.w	ip, r1, ip
 80123de:	4914      	ldr	r1, [pc, #80]	; (8012430 <__atomic_exchange_8+0x68>)
 80123e0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	4686      	mov	lr, r0
 80123e8:	fba1 010c 	umull	r0, r1, r1, ip
 80123ec:	4d11      	ldr	r5, [pc, #68]	; (8012434 <__atomic_exchange_8+0x6c>)
 80123ee:	f04f 0001 	mov.w	r0, #1
 80123f2:	0909      	lsrs	r1, r1, #4
 80123f4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80123f8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80123fc:	ebac 0c01 	sub.w	ip, ip, r1
 8012400:	eb05 010c 	add.w	r1, r5, ip
 8012404:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012408:	e8c1 0f46 	strexb	r6, r0, [r1]
 801240c:	2e00      	cmp	r6, #0
 801240e:	d1f9      	bne.n	8012404 <__atomic_exchange_8+0x3c>
 8012410:	b2e4      	uxtb	r4, r4
 8012412:	f3bf 8f5b 	dmb	ish
 8012416:	2c00      	cmp	r4, #0
 8012418:	d1f4      	bne.n	8012404 <__atomic_exchange_8+0x3c>
 801241a:	e9de 0100 	ldrd	r0, r1, [lr]
 801241e:	e9ce 2300 	strd	r2, r3, [lr]
 8012422:	f3bf 8f5b 	dmb	ish
 8012426:	f805 400c 	strb.w	r4, [r5, ip]
 801242a:	bd70      	pop	{r4, r5, r6, pc}
 801242c:	27d4eb2d 	.word	0x27d4eb2d
 8012430:	b21642c9 	.word	0xb21642c9
 8012434:	20013560 	.word	0x20013560

08012438 <rcutils_get_env>:
 8012438:	b168      	cbz	r0, 8012456 <rcutils_get_env+0x1e>
 801243a:	b510      	push	{r4, lr}
 801243c:	460c      	mov	r4, r1
 801243e:	b129      	cbz	r1, 801244c <rcutils_get_env+0x14>
 8012440:	f004 f858 	bl	80164f4 <getenv>
 8012444:	b120      	cbz	r0, 8012450 <rcutils_get_env+0x18>
 8012446:	6020      	str	r0, [r4, #0]
 8012448:	2000      	movs	r0, #0
 801244a:	bd10      	pop	{r4, pc}
 801244c:	4803      	ldr	r0, [pc, #12]	; (801245c <rcutils_get_env+0x24>)
 801244e:	bd10      	pop	{r4, pc}
 8012450:	4b03      	ldr	r3, [pc, #12]	; (8012460 <rcutils_get_env+0x28>)
 8012452:	6023      	str	r3, [r4, #0]
 8012454:	bd10      	pop	{r4, pc}
 8012456:	4803      	ldr	r0, [pc, #12]	; (8012464 <rcutils_get_env+0x2c>)
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop
 801245c:	08018390 	.word	0x08018390
 8012460:	080184b4 	.word	0x080184b4
 8012464:	08018374 	.word	0x08018374

08012468 <rcutils_is_directory>:
 8012468:	2000      	movs	r0, #0
 801246a:	4770      	bx	lr

0801246c <rcutils_join_path>:
 801246c:	b082      	sub	sp, #8
 801246e:	2000      	movs	r0, #0
 8012470:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012474:	b002      	add	sp, #8
 8012476:	4770      	bx	lr

08012478 <rcutils_to_native_path>:
 8012478:	b084      	sub	sp, #16
 801247a:	2000      	movs	r0, #0
 801247c:	f10d 0c04 	add.w	ip, sp, #4
 8012480:	b004      	add	sp, #16
 8012482:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8012486:	4770      	bx	lr

08012488 <rcutils_format_string_limit>:
 8012488:	b40f      	push	{r0, r1, r2, r3}
 801248a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801248c:	b083      	sub	sp, #12
 801248e:	ac08      	add	r4, sp, #32
 8012490:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012496:	b326      	cbz	r6, 80124e2 <rcutils_format_string_limit+0x5a>
 8012498:	a808      	add	r0, sp, #32
 801249a:	f7f8 fb07 	bl	800aaac <rcutils_allocator_is_valid>
 801249e:	b300      	cbz	r0, 80124e2 <rcutils_format_string_limit+0x5a>
 80124a0:	2100      	movs	r1, #0
 80124a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80124a4:	4632      	mov	r2, r6
 80124a6:	4608      	mov	r0, r1
 80124a8:	e9cd 3300 	strd	r3, r3, [sp]
 80124ac:	f000 f906 	bl	80126bc <rcutils_vsnprintf>
 80124b0:	1c43      	adds	r3, r0, #1
 80124b2:	4605      	mov	r5, r0
 80124b4:	d015      	beq.n	80124e2 <rcutils_format_string_limit+0x5a>
 80124b6:	1c47      	adds	r7, r0, #1
 80124b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124ba:	429f      	cmp	r7, r3
 80124bc:	d901      	bls.n	80124c2 <rcutils_format_string_limit+0x3a>
 80124be:	1e5d      	subs	r5, r3, #1
 80124c0:	461f      	mov	r7, r3
 80124c2:	9b08      	ldr	r3, [sp, #32]
 80124c4:	4638      	mov	r0, r7
 80124c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80124c8:	4798      	blx	r3
 80124ca:	4604      	mov	r4, r0
 80124cc:	b148      	cbz	r0, 80124e2 <rcutils_format_string_limit+0x5a>
 80124ce:	4632      	mov	r2, r6
 80124d0:	4639      	mov	r1, r7
 80124d2:	9b01      	ldr	r3, [sp, #4]
 80124d4:	f000 f8f2 	bl	80126bc <rcutils_vsnprintf>
 80124d8:	2800      	cmp	r0, #0
 80124da:	db09      	blt.n	80124f0 <rcutils_format_string_limit+0x68>
 80124dc:	2300      	movs	r3, #0
 80124de:	5563      	strb	r3, [r4, r5]
 80124e0:	e000      	b.n	80124e4 <rcutils_format_string_limit+0x5c>
 80124e2:	2400      	movs	r4, #0
 80124e4:	4620      	mov	r0, r4
 80124e6:	b003      	add	sp, #12
 80124e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80124ec:	b004      	add	sp, #16
 80124ee:	4770      	bx	lr
 80124f0:	4620      	mov	r0, r4
 80124f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80124f6:	2400      	movs	r4, #0
 80124f8:	4798      	blx	r3
 80124fa:	e7f3      	b.n	80124e4 <rcutils_format_string_limit+0x5c>

080124fc <rcutils_repl_str>:
 80124fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012500:	ed2d 8b02 	vpush	{d8}
 8012504:	b087      	sub	sp, #28
 8012506:	2600      	movs	r6, #0
 8012508:	4680      	mov	r8, r0
 801250a:	468a      	mov	sl, r1
 801250c:	9000      	str	r0, [sp, #0]
 801250e:	4608      	mov	r0, r1
 8012510:	ee08 2a10 	vmov	s16, r2
 8012514:	4699      	mov	r9, r3
 8012516:	2510      	movs	r5, #16
 8012518:	f7ed fe84 	bl	8000224 <strlen>
 801251c:	4637      	mov	r7, r6
 801251e:	46b3      	mov	fp, r6
 8012520:	9001      	str	r0, [sp, #4]
 8012522:	e01e      	b.n	8012562 <rcutils_repl_str+0x66>
 8012524:	f10b 0b01 	add.w	fp, fp, #1
 8012528:	9b01      	ldr	r3, [sp, #4]
 801252a:	455e      	cmp	r6, fp
 801252c:	eb04 0803 	add.w	r8, r4, r3
 8012530:	d211      	bcs.n	8012556 <rcutils_repl_str+0x5a>
 8012532:	442e      	add	r6, r5
 8012534:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012538:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801253c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012540:	00b1      	lsls	r1, r6, #2
 8012542:	4798      	blx	r3
 8012544:	2800      	cmp	r0, #0
 8012546:	f000 8088 	beq.w	801265a <rcutils_repl_str+0x15e>
 801254a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801254e:	4607      	mov	r7, r0
 8012550:	bf28      	it	cs
 8012552:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8012556:	9a00      	ldr	r2, [sp, #0]
 8012558:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801255c:	1aa4      	subs	r4, r4, r2
 801255e:	f843 4c04 	str.w	r4, [r3, #-4]
 8012562:	4651      	mov	r1, sl
 8012564:	4640      	mov	r0, r8
 8012566:	f004 fbbe 	bl	8016ce6 <strstr>
 801256a:	4604      	mov	r4, r0
 801256c:	4638      	mov	r0, r7
 801256e:	2c00      	cmp	r4, #0
 8012570:	d1d8      	bne.n	8012524 <rcutils_repl_str+0x28>
 8012572:	4640      	mov	r0, r8
 8012574:	f7ed fe56 	bl	8000224 <strlen>
 8012578:	9b00      	ldr	r3, [sp, #0]
 801257a:	eba8 0803 	sub.w	r8, r8, r3
 801257e:	eb08 0400 	add.w	r4, r8, r0
 8012582:	9402      	str	r4, [sp, #8]
 8012584:	f1bb 0f00 	cmp.w	fp, #0
 8012588:	d045      	beq.n	8012616 <rcutils_repl_str+0x11a>
 801258a:	ee18 0a10 	vmov	r0, s16
 801258e:	f7ed fe49 	bl	8000224 <strlen>
 8012592:	9a01      	ldr	r2, [sp, #4]
 8012594:	4606      	mov	r6, r0
 8012596:	f8d9 3000 	ldr.w	r3, [r9]
 801259a:	1a82      	subs	r2, r0, r2
 801259c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80125a0:	fb0b 4202 	mla	r2, fp, r2, r4
 80125a4:	1c50      	adds	r0, r2, #1
 80125a6:	9205      	str	r2, [sp, #20]
 80125a8:	4798      	blx	r3
 80125aa:	4682      	mov	sl, r0
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d054      	beq.n	801265a <rcutils_repl_str+0x15e>
 80125b0:	683a      	ldr	r2, [r7, #0]
 80125b2:	463d      	mov	r5, r7
 80125b4:	9900      	ldr	r1, [sp, #0]
 80125b6:	2401      	movs	r4, #1
 80125b8:	f004 fc37 	bl	8016e2a <memcpy>
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80125c2:	eb0a 0803 	add.w	r8, sl, r3
 80125c6:	ee18 7a10 	vmov	r7, s16
 80125ca:	f8dd a000 	ldr.w	sl, [sp]
 80125ce:	f8cd 9000 	str.w	r9, [sp]
 80125d2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80125d6:	4632      	mov	r2, r6
 80125d8:	4639      	mov	r1, r7
 80125da:	4640      	mov	r0, r8
 80125dc:	44b0      	add	r8, r6
 80125de:	f004 fc24 	bl	8016e2a <memcpy>
 80125e2:	f855 2b04 	ldr.w	r2, [r5], #4
 80125e6:	45a3      	cmp	fp, r4
 80125e8:	444a      	add	r2, r9
 80125ea:	eb0a 0102 	add.w	r1, sl, r2
 80125ee:	d02a      	beq.n	8012646 <rcutils_repl_str+0x14a>
 80125f0:	6828      	ldr	r0, [r5, #0]
 80125f2:	1a82      	subs	r2, r0, r2
 80125f4:	4640      	mov	r0, r8
 80125f6:	4490      	add	r8, r2
 80125f8:	f004 fc17 	bl	8016e2a <memcpy>
 80125fc:	1c62      	adds	r2, r4, #1
 80125fe:	45a3      	cmp	fp, r4
 8012600:	4614      	mov	r4, r2
 8012602:	d8e8      	bhi.n	80125d6 <rcutils_repl_str+0xda>
 8012604:	f8dd 9000 	ldr.w	r9, [sp]
 8012608:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801260c:	2300      	movs	r3, #0
 801260e:	9a05      	ldr	r2, [sp, #20]
 8012610:	f80a 3002 	strb.w	r3, [sl, r2]
 8012614:	e00b      	b.n	801262e <rcutils_repl_str+0x132>
 8012616:	4620      	mov	r0, r4
 8012618:	f8d9 3000 	ldr.w	r3, [r9]
 801261c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012620:	3001      	adds	r0, #1
 8012622:	4798      	blx	r3
 8012624:	4682      	mov	sl, r0
 8012626:	b110      	cbz	r0, 801262e <rcutils_repl_str+0x132>
 8012628:	9900      	ldr	r1, [sp, #0]
 801262a:	f004 fbf6 	bl	8016e1a <strcpy>
 801262e:	4638      	mov	r0, r7
 8012630:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012634:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012638:	4798      	blx	r3
 801263a:	4650      	mov	r0, sl
 801263c:	b007      	add	sp, #28
 801263e:	ecbd 8b02 	vpop	{d8}
 8012642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012646:	9b02      	ldr	r3, [sp, #8]
 8012648:	4640      	mov	r0, r8
 801264a:	f8dd 9000 	ldr.w	r9, [sp]
 801264e:	1a9a      	subs	r2, r3, r2
 8012650:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012654:	f004 fbe9 	bl	8016e2a <memcpy>
 8012658:	e7d8      	b.n	801260c <rcutils_repl_str+0x110>
 801265a:	f04f 0a00 	mov.w	sl, #0
 801265e:	e7e6      	b.n	801262e <rcutils_repl_str+0x132>

08012660 <rcutils_snprintf>:
 8012660:	b40c      	push	{r2, r3}
 8012662:	b530      	push	{r4, r5, lr}
 8012664:	b083      	sub	sp, #12
 8012666:	ab06      	add	r3, sp, #24
 8012668:	f853 2b04 	ldr.w	r2, [r3], #4
 801266c:	9301      	str	r3, [sp, #4]
 801266e:	b1e2      	cbz	r2, 80126aa <rcutils_snprintf+0x4a>
 8012670:	fab0 f480 	clz	r4, r0
 8012674:	fab1 f581 	clz	r5, r1
 8012678:	ea50 0c01 	orrs.w	ip, r0, r1
 801267c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012680:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012684:	d008      	beq.n	8012698 <rcutils_snprintf+0x38>
 8012686:	b984      	cbnz	r4, 80126aa <rcutils_snprintf+0x4a>
 8012688:	b97d      	cbnz	r5, 80126aa <rcutils_snprintf+0x4a>
 801268a:	f004 facd 	bl	8016c28 <vsniprintf>
 801268e:	b003      	add	sp, #12
 8012690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012694:	b002      	add	sp, #8
 8012696:	4770      	bx	lr
 8012698:	4661      	mov	r1, ip
 801269a:	4660      	mov	r0, ip
 801269c:	f004 fac4 	bl	8016c28 <vsniprintf>
 80126a0:	b003      	add	sp, #12
 80126a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126a6:	b002      	add	sp, #8
 80126a8:	4770      	bx	lr
 80126aa:	f004 fb89 	bl	8016dc0 <__errno>
 80126ae:	2216      	movs	r2, #22
 80126b0:	4603      	mov	r3, r0
 80126b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126b6:	601a      	str	r2, [r3, #0]
 80126b8:	e7e9      	b.n	801268e <rcutils_snprintf+0x2e>
 80126ba:	bf00      	nop

080126bc <rcutils_vsnprintf>:
 80126bc:	b570      	push	{r4, r5, r6, lr}
 80126be:	b1b2      	cbz	r2, 80126ee <rcutils_vsnprintf+0x32>
 80126c0:	fab0 f480 	clz	r4, r0
 80126c4:	fab1 f581 	clz	r5, r1
 80126c8:	ea50 0c01 	orrs.w	ip, r0, r1
 80126cc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80126d0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80126d4:	d005      	beq.n	80126e2 <rcutils_vsnprintf+0x26>
 80126d6:	b954      	cbnz	r4, 80126ee <rcutils_vsnprintf+0x32>
 80126d8:	b94d      	cbnz	r5, 80126ee <rcutils_vsnprintf+0x32>
 80126da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126de:	f004 baa3 	b.w	8016c28 <vsniprintf>
 80126e2:	4661      	mov	r1, ip
 80126e4:	4660      	mov	r0, ip
 80126e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126ea:	f004 ba9d 	b.w	8016c28 <vsniprintf>
 80126ee:	f004 fb67 	bl	8016dc0 <__errno>
 80126f2:	2316      	movs	r3, #22
 80126f4:	6003      	str	r3, [r0, #0]
 80126f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126fa:	bd70      	pop	{r4, r5, r6, pc}

080126fc <rcutils_strdup>:
 80126fc:	b084      	sub	sp, #16
 80126fe:	b570      	push	{r4, r5, r6, lr}
 8012700:	b082      	sub	sp, #8
 8012702:	4605      	mov	r5, r0
 8012704:	ac07      	add	r4, sp, #28
 8012706:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801270a:	b1b0      	cbz	r0, 801273a <rcutils_strdup+0x3e>
 801270c:	f7ed fd8a 	bl	8000224 <strlen>
 8012710:	1c42      	adds	r2, r0, #1
 8012712:	9b07      	ldr	r3, [sp, #28]
 8012714:	4606      	mov	r6, r0
 8012716:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012718:	4610      	mov	r0, r2
 801271a:	9201      	str	r2, [sp, #4]
 801271c:	4798      	blx	r3
 801271e:	4604      	mov	r4, r0
 8012720:	b128      	cbz	r0, 801272e <rcutils_strdup+0x32>
 8012722:	9a01      	ldr	r2, [sp, #4]
 8012724:	4629      	mov	r1, r5
 8012726:	f004 fb80 	bl	8016e2a <memcpy>
 801272a:	2300      	movs	r3, #0
 801272c:	55a3      	strb	r3, [r4, r6]
 801272e:	4620      	mov	r0, r4
 8012730:	b002      	add	sp, #8
 8012732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012736:	b004      	add	sp, #16
 8012738:	4770      	bx	lr
 801273a:	4604      	mov	r4, r0
 801273c:	e7f7      	b.n	801272e <rcutils_strdup+0x32>
 801273e:	bf00      	nop

08012740 <rcutils_strndup>:
 8012740:	b082      	sub	sp, #8
 8012742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012744:	ac06      	add	r4, sp, #24
 8012746:	4605      	mov	r5, r0
 8012748:	e884 000c 	stmia.w	r4, {r2, r3}
 801274c:	b188      	cbz	r0, 8012772 <rcutils_strndup+0x32>
 801274e:	1c4f      	adds	r7, r1, #1
 8012750:	460e      	mov	r6, r1
 8012752:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012754:	4638      	mov	r0, r7
 8012756:	4790      	blx	r2
 8012758:	4604      	mov	r4, r0
 801275a:	b128      	cbz	r0, 8012768 <rcutils_strndup+0x28>
 801275c:	463a      	mov	r2, r7
 801275e:	4629      	mov	r1, r5
 8012760:	f004 fb63 	bl	8016e2a <memcpy>
 8012764:	2300      	movs	r3, #0
 8012766:	55a3      	strb	r3, [r4, r6]
 8012768:	4620      	mov	r0, r4
 801276a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801276e:	b002      	add	sp, #8
 8012770:	4770      	bx	lr
 8012772:	4604      	mov	r4, r0
 8012774:	e7f8      	b.n	8012768 <rcutils_strndup+0x28>
 8012776:	bf00      	nop

08012778 <rcutils_get_zero_initialized_string_map>:
 8012778:	2000      	movs	r0, #0
 801277a:	4b01      	ldr	r3, [pc, #4]	; (8012780 <rcutils_get_zero_initialized_string_map+0x8>)
 801277c:	6018      	str	r0, [r3, #0]
 801277e:	4770      	bx	lr
 8012780:	20013578 	.word	0x20013578

08012784 <rcutils_string_map_reserve>:
 8012784:	2800      	cmp	r0, #0
 8012786:	d05e      	beq.n	8012846 <rcutils_string_map_reserve+0xc2>
 8012788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801278c:	460c      	mov	r4, r1
 801278e:	6801      	ldr	r1, [r0, #0]
 8012790:	b082      	sub	sp, #8
 8012792:	4605      	mov	r5, r0
 8012794:	b129      	cbz	r1, 80127a2 <rcutils_string_map_reserve+0x1e>
 8012796:	68cb      	ldr	r3, [r1, #12]
 8012798:	42a3      	cmp	r3, r4
 801279a:	d906      	bls.n	80127aa <rcutils_string_map_reserve+0x26>
 801279c:	461c      	mov	r4, r3
 801279e:	2900      	cmp	r1, #0
 80127a0:	d1f9      	bne.n	8012796 <rcutils_string_map_reserve+0x12>
 80127a2:	201f      	movs	r0, #31
 80127a4:	b002      	add	sp, #8
 80127a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127aa:	688b      	ldr	r3, [r1, #8]
 80127ac:	42a3      	cmp	r3, r4
 80127ae:	d046      	beq.n	801283e <rcutils_string_map_reserve+0xba>
 80127b0:	6a0e      	ldr	r6, [r1, #32]
 80127b2:	2c00      	cmp	r4, #0
 80127b4:	d033      	beq.n	801281e <rcutils_string_map_reserve+0x9a>
 80127b6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80127ba:	d242      	bcs.n	8012842 <rcutils_string_map_reserve+0xbe>
 80127bc:	00a7      	lsls	r7, r4, #2
 80127be:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80127c2:	6808      	ldr	r0, [r1, #0]
 80127c4:	4632      	mov	r2, r6
 80127c6:	4639      	mov	r1, r7
 80127c8:	47c0      	blx	r8
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d039      	beq.n	8012842 <rcutils_string_map_reserve+0xbe>
 80127ce:	682b      	ldr	r3, [r5, #0]
 80127d0:	4632      	mov	r2, r6
 80127d2:	4639      	mov	r1, r7
 80127d4:	6018      	str	r0, [r3, #0]
 80127d6:	6858      	ldr	r0, [r3, #4]
 80127d8:	47c0      	blx	r8
 80127da:	2800      	cmp	r0, #0
 80127dc:	d031      	beq.n	8012842 <rcutils_string_map_reserve+0xbe>
 80127de:	682d      	ldr	r5, [r5, #0]
 80127e0:	68ab      	ldr	r3, [r5, #8]
 80127e2:	6068      	str	r0, [r5, #4]
 80127e4:	42a3      	cmp	r3, r4
 80127e6:	d225      	bcs.n	8012834 <rcutils_string_map_reserve+0xb0>
 80127e8:	682a      	ldr	r2, [r5, #0]
 80127ea:	eb00 0c07 	add.w	ip, r0, r7
 80127ee:	0099      	lsls	r1, r3, #2
 80127f0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80127f4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80127f8:	45e6      	cmp	lr, ip
 80127fa:	d203      	bcs.n	8012804 <rcutils_string_map_reserve+0x80>
 80127fc:	eb02 0c07 	add.w	ip, r2, r7
 8012800:	4566      	cmp	r6, ip
 8012802:	d322      	bcc.n	801284a <rcutils_string_map_reserve+0xc6>
 8012804:	1ae3      	subs	r3, r4, r3
 8012806:	4670      	mov	r0, lr
 8012808:	2100      	movs	r1, #0
 801280a:	009a      	lsls	r2, r3, #2
 801280c:	9201      	str	r2, [sp, #4]
 801280e:	f004 fa43 	bl	8016c98 <memset>
 8012812:	9a01      	ldr	r2, [sp, #4]
 8012814:	2100      	movs	r1, #0
 8012816:	4630      	mov	r0, r6
 8012818:	f004 fa3e 	bl	8016c98 <memset>
 801281c:	e00a      	b.n	8012834 <rcutils_string_map_reserve+0xb0>
 801281e:	694f      	ldr	r7, [r1, #20]
 8012820:	6808      	ldr	r0, [r1, #0]
 8012822:	4631      	mov	r1, r6
 8012824:	47b8      	blx	r7
 8012826:	682b      	ldr	r3, [r5, #0]
 8012828:	4631      	mov	r1, r6
 801282a:	6858      	ldr	r0, [r3, #4]
 801282c:	601c      	str	r4, [r3, #0]
 801282e:	47b8      	blx	r7
 8012830:	682d      	ldr	r5, [r5, #0]
 8012832:	606c      	str	r4, [r5, #4]
 8012834:	2000      	movs	r0, #0
 8012836:	60ac      	str	r4, [r5, #8]
 8012838:	b002      	add	sp, #8
 801283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801283e:	2000      	movs	r0, #0
 8012840:	e7b0      	b.n	80127a4 <rcutils_string_map_reserve+0x20>
 8012842:	200a      	movs	r0, #10
 8012844:	e7ae      	b.n	80127a4 <rcutils_string_map_reserve+0x20>
 8012846:	200b      	movs	r0, #11
 8012848:	4770      	bx	lr
 801284a:	1f0b      	subs	r3, r1, #4
 801284c:	4418      	add	r0, r3
 801284e:	4413      	add	r3, r2
 8012850:	3a04      	subs	r2, #4
 8012852:	4417      	add	r7, r2
 8012854:	2200      	movs	r2, #0
 8012856:	f843 2f04 	str.w	r2, [r3, #4]!
 801285a:	42bb      	cmp	r3, r7
 801285c:	f840 2f04 	str.w	r2, [r0, #4]!
 8012860:	d1f9      	bne.n	8012856 <rcutils_string_map_reserve+0xd2>
 8012862:	e7e7      	b.n	8012834 <rcutils_string_map_reserve+0xb0>

08012864 <rcutils_string_map_init>:
 8012864:	b082      	sub	sp, #8
 8012866:	b570      	push	{r4, r5, r6, lr}
 8012868:	ac04      	add	r4, sp, #16
 801286a:	e884 000c 	stmia.w	r4, {r2, r3}
 801286e:	b380      	cbz	r0, 80128d2 <rcutils_string_map_init+0x6e>
 8012870:	6806      	ldr	r6, [r0, #0]
 8012872:	4604      	mov	r4, r0
 8012874:	b12e      	cbz	r6, 8012882 <rcutils_string_map_init+0x1e>
 8012876:	251e      	movs	r5, #30
 8012878:	4628      	mov	r0, r5
 801287a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801287e:	b002      	add	sp, #8
 8012880:	4770      	bx	lr
 8012882:	a804      	add	r0, sp, #16
 8012884:	460d      	mov	r5, r1
 8012886:	f7f8 f911 	bl	800aaac <rcutils_allocator_is_valid>
 801288a:	b310      	cbz	r0, 80128d2 <rcutils_string_map_init+0x6e>
 801288c:	9b04      	ldr	r3, [sp, #16]
 801288e:	2024      	movs	r0, #36	; 0x24
 8012890:	9908      	ldr	r1, [sp, #32]
 8012892:	4798      	blx	r3
 8012894:	6020      	str	r0, [r4, #0]
 8012896:	b310      	cbz	r0, 80128de <rcutils_string_map_init+0x7a>
 8012898:	f10d 0e10 	add.w	lr, sp, #16
 801289c:	f100 0c10 	add.w	ip, r0, #16
 80128a0:	e9c0 6600 	strd	r6, r6, [r0]
 80128a4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80128a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128b0:	f8de 3000 	ldr.w	r3, [lr]
 80128b4:	4629      	mov	r1, r5
 80128b6:	4620      	mov	r0, r4
 80128b8:	f8cc 3000 	str.w	r3, [ip]
 80128bc:	f7ff ff62 	bl	8012784 <rcutils_string_map_reserve>
 80128c0:	4605      	mov	r5, r0
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d0d8      	beq.n	8012878 <rcutils_string_map_init+0x14>
 80128c6:	9b05      	ldr	r3, [sp, #20]
 80128c8:	9908      	ldr	r1, [sp, #32]
 80128ca:	6820      	ldr	r0, [r4, #0]
 80128cc:	4798      	blx	r3
 80128ce:	6026      	str	r6, [r4, #0]
 80128d0:	e7d2      	b.n	8012878 <rcutils_string_map_init+0x14>
 80128d2:	250b      	movs	r5, #11
 80128d4:	4628      	mov	r0, r5
 80128d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128da:	b002      	add	sp, #8
 80128dc:	4770      	bx	lr
 80128de:	250a      	movs	r5, #10
 80128e0:	e7ca      	b.n	8012878 <rcutils_string_map_init+0x14>
 80128e2:	bf00      	nop

080128e4 <rcutils_string_map_fini>:
 80128e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e8:	b082      	sub	sp, #8
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d03a      	beq.n	8012964 <rcutils_string_map_fini+0x80>
 80128ee:	6804      	ldr	r4, [r0, #0]
 80128f0:	4606      	mov	r6, r0
 80128f2:	2c00      	cmp	r4, #0
 80128f4:	d032      	beq.n	801295c <rcutils_string_map_fini+0x78>
 80128f6:	68a3      	ldr	r3, [r4, #8]
 80128f8:	b32b      	cbz	r3, 8012946 <rcutils_string_map_fini+0x62>
 80128fa:	2500      	movs	r5, #0
 80128fc:	6822      	ldr	r2, [r4, #0]
 80128fe:	462f      	mov	r7, r5
 8012900:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012904:	b1e0      	cbz	r0, 8012940 <rcutils_string_map_fini+0x5c>
 8012906:	6a21      	ldr	r1, [r4, #32]
 8012908:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801290c:	9101      	str	r1, [sp, #4]
 801290e:	47c0      	blx	r8
 8012910:	9901      	ldr	r1, [sp, #4]
 8012912:	e9d4 3200 	ldrd	r3, r2, [r4]
 8012916:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801291a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801291e:	47c0      	blx	r8
 8012920:	68e3      	ldr	r3, [r4, #12]
 8012922:	6862      	ldr	r2, [r4, #4]
 8012924:	3b01      	subs	r3, #1
 8012926:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801292a:	3501      	adds	r5, #1
 801292c:	60e3      	str	r3, [r4, #12]
 801292e:	6834      	ldr	r4, [r6, #0]
 8012930:	68a3      	ldr	r3, [r4, #8]
 8012932:	429d      	cmp	r5, r3
 8012934:	d207      	bcs.n	8012946 <rcutils_string_map_fini+0x62>
 8012936:	6822      	ldr	r2, [r4, #0]
 8012938:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801293c:	2800      	cmp	r0, #0
 801293e:	d1e2      	bne.n	8012906 <rcutils_string_map_fini+0x22>
 8012940:	3501      	adds	r5, #1
 8012942:	429d      	cmp	r5, r3
 8012944:	d3dc      	bcc.n	8012900 <rcutils_string_map_fini+0x1c>
 8012946:	2100      	movs	r1, #0
 8012948:	4630      	mov	r0, r6
 801294a:	f7ff ff1b 	bl	8012784 <rcutils_string_map_reserve>
 801294e:	4604      	mov	r4, r0
 8012950:	b920      	cbnz	r0, 801295c <rcutils_string_map_fini+0x78>
 8012952:	6830      	ldr	r0, [r6, #0]
 8012954:	6943      	ldr	r3, [r0, #20]
 8012956:	6a01      	ldr	r1, [r0, #32]
 8012958:	4798      	blx	r3
 801295a:	6034      	str	r4, [r6, #0]
 801295c:	4620      	mov	r0, r4
 801295e:	b002      	add	sp, #8
 8012960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012964:	240b      	movs	r4, #11
 8012966:	4620      	mov	r0, r4
 8012968:	b002      	add	sp, #8
 801296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801296e:	bf00      	nop

08012970 <rcutils_string_map_getn>:
 8012970:	b378      	cbz	r0, 80129d2 <rcutils_string_map_getn+0x62>
 8012972:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012976:	f8d0 b000 	ldr.w	fp, [r0]
 801297a:	f1bb 0f00 	cmp.w	fp, #0
 801297e:	d01f      	beq.n	80129c0 <rcutils_string_map_getn+0x50>
 8012980:	fab1 f481 	clz	r4, r1
 8012984:	4688      	mov	r8, r1
 8012986:	0964      	lsrs	r4, r4, #5
 8012988:	b1d1      	cbz	r1, 80129c0 <rcutils_string_map_getn+0x50>
 801298a:	f8db 7008 	ldr.w	r7, [fp, #8]
 801298e:	f8db 6000 	ldr.w	r6, [fp]
 8012992:	b1af      	cbz	r7, 80129c0 <rcutils_string_map_getn+0x50>
 8012994:	4691      	mov	r9, r2
 8012996:	3e04      	subs	r6, #4
 8012998:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801299c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80129a0:	3401      	adds	r4, #1
 80129a2:	4628      	mov	r0, r5
 80129a4:	b155      	cbz	r5, 80129bc <rcutils_string_map_getn+0x4c>
 80129a6:	f7ed fc3d 	bl	8000224 <strlen>
 80129aa:	4602      	mov	r2, r0
 80129ac:	4629      	mov	r1, r5
 80129ae:	4640      	mov	r0, r8
 80129b0:	454a      	cmp	r2, r9
 80129b2:	bf38      	it	cc
 80129b4:	464a      	movcc	r2, r9
 80129b6:	f004 f984 	bl	8016cc2 <strncmp>
 80129ba:	b120      	cbz	r0, 80129c6 <rcutils_string_map_getn+0x56>
 80129bc:	42a7      	cmp	r7, r4
 80129be:	d1eb      	bne.n	8012998 <rcutils_string_map_getn+0x28>
 80129c0:	2000      	movs	r0, #0
 80129c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80129ca:	f853 000a 	ldr.w	r0, [r3, sl]
 80129ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d2:	4770      	bx	lr
 80129d4:	0000      	movs	r0, r0
	...

080129d8 <rmw_get_zero_initialized_context>:
 80129d8:	b510      	push	{r4, lr}
 80129da:	4604      	mov	r4, r0
 80129dc:	3010      	adds	r0, #16
 80129de:	f000 f80f 	bl	8012a00 <rmw_get_zero_initialized_init_options>
 80129e2:	2300      	movs	r3, #0
 80129e4:	4620      	mov	r0, r4
 80129e6:	60a3      	str	r3, [r4, #8]
 80129e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80129ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80129ec:	ed9f 7b02 	vldr	d7, [pc, #8]	; 80129f8 <rmw_get_zero_initialized_context+0x20>
 80129f0:	ed84 7b00 	vstr	d7, [r4]
 80129f4:	bd10      	pop	{r4, pc}
 80129f6:	bf00      	nop
	...

08012a00 <rmw_get_zero_initialized_init_options>:
 8012a00:	b510      	push	{r4, lr}
 8012a02:	4604      	mov	r4, r0
 8012a04:	2238      	movs	r2, #56	; 0x38
 8012a06:	2100      	movs	r1, #0
 8012a08:	f004 f946 	bl	8016c98 <memset>
 8012a0c:	f104 0010 	add.w	r0, r4, #16
 8012a10:	f000 f806 	bl	8012a20 <rmw_get_default_security_options>
 8012a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a18:	4620      	mov	r0, r4
 8012a1a:	60e3      	str	r3, [r4, #12]
 8012a1c:	bd10      	pop	{r4, pc}
 8012a1e:	bf00      	nop

08012a20 <rmw_get_default_security_options>:
 8012a20:	2200      	movs	r2, #0
 8012a22:	7002      	strb	r2, [r0, #0]
 8012a24:	6042      	str	r2, [r0, #4]
 8012a26:	4770      	bx	lr

08012a28 <rmw_subscription_content_filter_options_fini>:
 8012a28:	b1b0      	cbz	r0, 8012a58 <rmw_subscription_content_filter_options_fini+0x30>
 8012a2a:	b538      	push	{r3, r4, r5, lr}
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	4608      	mov	r0, r1
 8012a30:	460d      	mov	r5, r1
 8012a32:	f7f8 f83b 	bl	800aaac <rcutils_allocator_is_valid>
 8012a36:	b168      	cbz	r0, 8012a54 <rmw_subscription_content_filter_options_fini+0x2c>
 8012a38:	6820      	ldr	r0, [r4, #0]
 8012a3a:	b120      	cbz	r0, 8012a46 <rmw_subscription_content_filter_options_fini+0x1e>
 8012a3c:	686b      	ldr	r3, [r5, #4]
 8012a3e:	6929      	ldr	r1, [r5, #16]
 8012a40:	4798      	blx	r3
 8012a42:	2300      	movs	r3, #0
 8012a44:	6023      	str	r3, [r4, #0]
 8012a46:	1d20      	adds	r0, r4, #4
 8012a48:	f003 fbfa 	bl	8016240 <rcutils_string_array_fini>
 8012a4c:	3800      	subs	r0, #0
 8012a4e:	bf18      	it	ne
 8012a50:	2001      	movne	r0, #1
 8012a52:	bd38      	pop	{r3, r4, r5, pc}
 8012a54:	200b      	movs	r0, #11
 8012a56:	bd38      	pop	{r3, r4, r5, pc}
 8012a58:	200b      	movs	r0, #11
 8012a5a:	4770      	bx	lr

08012a5c <rmw_get_default_subscription_options>:
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	e9c0 2200 	strd	r2, r2, [r0]
 8012a62:	6082      	str	r2, [r0, #8]
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop

08012a68 <rmw_time_equal>:
 8012a68:	b4f0      	push	{r4, r5, r6, r7}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	ac04      	add	r4, sp, #16
 8012a6e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012a72:	4603      	mov	r3, r0
 8012a74:	4925      	ldr	r1, [pc, #148]	; (8012b0c <rmw_time_equal+0xa4>)
 8012a76:	9d01      	ldr	r5, [sp, #4]
 8012a78:	4610      	mov	r0, r2
 8012a7a:	4299      	cmp	r1, r3
 8012a7c:	f04f 0202 	mov.w	r2, #2
 8012a80:	9e03      	ldr	r6, [sp, #12]
 8012a82:	41aa      	sbcs	r2, r5
 8012a84:	d330      	bcc.n	8012ae8 <rmw_time_equal+0x80>
 8012a86:	4c22      	ldr	r4, [pc, #136]	; (8012b10 <rmw_time_equal+0xa8>)
 8012a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012a8c:	fba3 3204 	umull	r3, r2, r3, r4
 8012a90:	fb04 2205 	mla	r2, r4, r5, r2
 8012a94:	43dd      	mvns	r5, r3
 8012a96:	1a8c      	subs	r4, r1, r2
 8012a98:	4285      	cmp	r5, r0
 8012a9a:	41b4      	sbcs	r4, r6
 8012a9c:	d332      	bcc.n	8012b04 <rmw_time_equal+0x9c>
 8012a9e:	eb10 0c03 	adds.w	ip, r0, r3
 8012aa2:	eb42 0106 	adc.w	r1, r2, r6
 8012aa6:	4819      	ldr	r0, [pc, #100]	; (8012b0c <rmw_time_equal+0xa4>)
 8012aa8:	2202      	movs	r2, #2
 8012aaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012aac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8012aae:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012ab2:	4298      	cmp	r0, r3
 8012ab4:	41b2      	sbcs	r2, r6
 8012ab6:	d31c      	bcc.n	8012af2 <rmw_time_equal+0x8a>
 8012ab8:	4c15      	ldr	r4, [pc, #84]	; (8012b10 <rmw_time_equal+0xa8>)
 8012aba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012abe:	fba3 3204 	umull	r3, r2, r3, r4
 8012ac2:	fb04 2206 	mla	r2, r4, r6, r2
 8012ac6:	43de      	mvns	r6, r3
 8012ac8:	1a84      	subs	r4, r0, r2
 8012aca:	42ae      	cmp	r6, r5
 8012acc:	41bc      	sbcs	r4, r7
 8012ace:	d315      	bcc.n	8012afc <rmw_time_equal+0x94>
 8012ad0:	195b      	adds	r3, r3, r5
 8012ad2:	eb42 0207 	adc.w	r2, r2, r7
 8012ad6:	428a      	cmp	r2, r1
 8012ad8:	bf08      	it	eq
 8012ada:	4563      	cmpeq	r3, ip
 8012adc:	bf0c      	ite	eq
 8012ade:	2001      	moveq	r0, #1
 8012ae0:	2000      	movne	r0, #0
 8012ae2:	b004      	add	sp, #16
 8012ae4:	bcf0      	pop	{r4, r5, r6, r7}
 8012ae6:	4770      	bx	lr
 8012ae8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012af0:	e7d9      	b.n	8012aa6 <rmw_time_equal+0x3e>
 8012af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012af6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012afa:	e7ec      	b.n	8012ad6 <rmw_time_equal+0x6e>
 8012afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b00:	4602      	mov	r2, r0
 8012b02:	e7e8      	b.n	8012ad6 <rmw_time_equal+0x6e>
 8012b04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012b08:	e7cd      	b.n	8012aa6 <rmw_time_equal+0x3e>
 8012b0a:	bf00      	nop
 8012b0c:	25c17d04 	.word	0x25c17d04
 8012b10:	3b9aca00 	.word	0x3b9aca00

08012b14 <rmw_time_total_nsec>:
 8012b14:	b470      	push	{r4, r5, r6}
 8012b16:	b085      	sub	sp, #20
 8012b18:	ac04      	add	r4, sp, #16
 8012b1a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012b1e:	4603      	mov	r3, r0
 8012b20:	4913      	ldr	r1, [pc, #76]	; (8012b70 <rmw_time_total_nsec+0x5c>)
 8012b22:	9d01      	ldr	r5, [sp, #4]
 8012b24:	4610      	mov	r0, r2
 8012b26:	4299      	cmp	r1, r3
 8012b28:	f04f 0202 	mov.w	r2, #2
 8012b2c:	9e03      	ldr	r6, [sp, #12]
 8012b2e:	41aa      	sbcs	r2, r5
 8012b30:	d311      	bcc.n	8012b56 <rmw_time_total_nsec+0x42>
 8012b32:	4c10      	ldr	r4, [pc, #64]	; (8012b74 <rmw_time_total_nsec+0x60>)
 8012b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b38:	fba3 3204 	umull	r3, r2, r3, r4
 8012b3c:	fb04 2205 	mla	r2, r4, r5, r2
 8012b40:	43dd      	mvns	r5, r3
 8012b42:	1a8c      	subs	r4, r1, r2
 8012b44:	4285      	cmp	r5, r0
 8012b46:	41b4      	sbcs	r4, r6
 8012b48:	d30c      	bcc.n	8012b64 <rmw_time_total_nsec+0x50>
 8012b4a:	1818      	adds	r0, r3, r0
 8012b4c:	eb42 0106 	adc.w	r1, r2, r6
 8012b50:	b005      	add	sp, #20
 8012b52:	bc70      	pop	{r4, r5, r6}
 8012b54:	4770      	bx	lr
 8012b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b5e:	b005      	add	sp, #20
 8012b60:	bc70      	pop	{r4, r5, r6}
 8012b62:	4770      	bx	lr
 8012b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b68:	b005      	add	sp, #20
 8012b6a:	bc70      	pop	{r4, r5, r6}
 8012b6c:	4770      	bx	lr
 8012b6e:	bf00      	nop
 8012b70:	25c17d04 	.word	0x25c17d04
 8012b74:	3b9aca00 	.word	0x3b9aca00

08012b78 <rmw_get_zero_initialized_message_info>:
 8012b78:	b510      	push	{r4, lr}
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	2240      	movs	r2, #64	; 0x40
 8012b7e:	2100      	movs	r1, #0
 8012b80:	f004 f88a 	bl	8016c98 <memset>
 8012b84:	4620      	mov	r0, r4
 8012b86:	bd10      	pop	{r4, pc}

08012b88 <rmw_validate_full_topic_name>:
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	d05d      	beq.n	8012c48 <rmw_validate_full_topic_name+0xc0>
 8012b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b90:	460d      	mov	r5, r1
 8012b92:	2900      	cmp	r1, #0
 8012b94:	d05a      	beq.n	8012c4c <rmw_validate_full_topic_name+0xc4>
 8012b96:	4604      	mov	r4, r0
 8012b98:	4616      	mov	r6, r2
 8012b9a:	f7ed fb43 	bl	8000224 <strlen>
 8012b9e:	b150      	cbz	r0, 8012bb6 <rmw_validate_full_topic_name+0x2e>
 8012ba0:	7823      	ldrb	r3, [r4, #0]
 8012ba2:	2b2f      	cmp	r3, #47	; 0x2f
 8012ba4:	d00e      	beq.n	8012bc4 <rmw_validate_full_topic_name+0x3c>
 8012ba6:	2302      	movs	r3, #2
 8012ba8:	602b      	str	r3, [r5, #0]
 8012baa:	b146      	cbz	r6, 8012bbe <rmw_validate_full_topic_name+0x36>
 8012bac:	2300      	movs	r3, #0
 8012bae:	4618      	mov	r0, r3
 8012bb0:	6033      	str	r3, [r6, #0]
 8012bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	602b      	str	r3, [r5, #0]
 8012bba:	2e00      	cmp	r6, #0
 8012bbc:	d1f6      	bne.n	8012bac <rmw_validate_full_topic_name+0x24>
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc4:	1e43      	subs	r3, r0, #1
 8012bc6:	5ce2      	ldrb	r2, [r4, r3]
 8012bc8:	2a2f      	cmp	r2, #47	; 0x2f
 8012bca:	d041      	beq.n	8012c50 <rmw_validate_full_topic_name+0xc8>
 8012bcc:	1e62      	subs	r2, r4, #1
 8012bce:	f1c4 0e01 	rsb	lr, r4, #1
 8012bd2:	eb02 0800 	add.w	r8, r2, r0
 8012bd6:	eb0e 0702 	add.w	r7, lr, r2
 8012bda:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012bde:	f023 0120 	bic.w	r1, r3, #32
 8012be2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8012be6:	3941      	subs	r1, #65	; 0x41
 8012be8:	2919      	cmp	r1, #25
 8012bea:	d90f      	bls.n	8012c0c <rmw_validate_full_topic_name+0x84>
 8012bec:	f1bc 0f0a 	cmp.w	ip, #10
 8012bf0:	d90c      	bls.n	8012c0c <rmw_validate_full_topic_name+0x84>
 8012bf2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8012bf6:	fab3 f383 	clz	r3, r3
 8012bfa:	095b      	lsrs	r3, r3, #5
 8012bfc:	b933      	cbnz	r3, 8012c0c <rmw_validate_full_topic_name+0x84>
 8012bfe:	2204      	movs	r2, #4
 8012c00:	602a      	str	r2, [r5, #0]
 8012c02:	2e00      	cmp	r6, #0
 8012c04:	d0db      	beq.n	8012bbe <rmw_validate_full_topic_name+0x36>
 8012c06:	4618      	mov	r0, r3
 8012c08:	6037      	str	r7, [r6, #0]
 8012c0a:	e7d2      	b.n	8012bb2 <rmw_validate_full_topic_name+0x2a>
 8012c0c:	4542      	cmp	r2, r8
 8012c0e:	d1e2      	bne.n	8012bd6 <rmw_validate_full_topic_name+0x4e>
 8012c10:	2301      	movs	r3, #1
 8012c12:	4f1a      	ldr	r7, [pc, #104]	; (8012c7c <rmw_validate_full_topic_name+0xf4>)
 8012c14:	e004      	b.n	8012c20 <rmw_validate_full_topic_name+0x98>
 8012c16:	4298      	cmp	r0, r3
 8012c18:	f104 0401 	add.w	r4, r4, #1
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	d91c      	bls.n	8012c5a <rmw_validate_full_topic_name+0xd2>
 8012c20:	4298      	cmp	r0, r3
 8012c22:	f103 0201 	add.w	r2, r3, #1
 8012c26:	d0f6      	beq.n	8012c16 <rmw_validate_full_topic_name+0x8e>
 8012c28:	7821      	ldrb	r1, [r4, #0]
 8012c2a:	292f      	cmp	r1, #47	; 0x2f
 8012c2c:	d1f3      	bne.n	8012c16 <rmw_validate_full_topic_name+0x8e>
 8012c2e:	7861      	ldrb	r1, [r4, #1]
 8012c30:	292f      	cmp	r1, #47	; 0x2f
 8012c32:	d01e      	beq.n	8012c72 <rmw_validate_full_topic_name+0xea>
 8012c34:	5dc9      	ldrb	r1, [r1, r7]
 8012c36:	0749      	lsls	r1, r1, #29
 8012c38:	d5ed      	bpl.n	8012c16 <rmw_validate_full_topic_name+0x8e>
 8012c3a:	2206      	movs	r2, #6
 8012c3c:	602a      	str	r2, [r5, #0]
 8012c3e:	2e00      	cmp	r6, #0
 8012c40:	d0bd      	beq.n	8012bbe <rmw_validate_full_topic_name+0x36>
 8012c42:	2000      	movs	r0, #0
 8012c44:	6033      	str	r3, [r6, #0]
 8012c46:	e7b4      	b.n	8012bb2 <rmw_validate_full_topic_name+0x2a>
 8012c48:	200b      	movs	r0, #11
 8012c4a:	4770      	bx	lr
 8012c4c:	200b      	movs	r0, #11
 8012c4e:	e7b0      	b.n	8012bb2 <rmw_validate_full_topic_name+0x2a>
 8012c50:	2203      	movs	r2, #3
 8012c52:	602a      	str	r2, [r5, #0]
 8012c54:	2e00      	cmp	r6, #0
 8012c56:	d1f4      	bne.n	8012c42 <rmw_validate_full_topic_name+0xba>
 8012c58:	e7b1      	b.n	8012bbe <rmw_validate_full_topic_name+0x36>
 8012c5a:	28f7      	cmp	r0, #247	; 0xf7
 8012c5c:	d803      	bhi.n	8012c66 <rmw_validate_full_topic_name+0xde>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	4618      	mov	r0, r3
 8012c62:	602b      	str	r3, [r5, #0]
 8012c64:	e7a5      	b.n	8012bb2 <rmw_validate_full_topic_name+0x2a>
 8012c66:	2307      	movs	r3, #7
 8012c68:	602b      	str	r3, [r5, #0]
 8012c6a:	2e00      	cmp	r6, #0
 8012c6c:	d0a7      	beq.n	8012bbe <rmw_validate_full_topic_name+0x36>
 8012c6e:	23f6      	movs	r3, #246	; 0xf6
 8012c70:	e7e7      	b.n	8012c42 <rmw_validate_full_topic_name+0xba>
 8012c72:	2205      	movs	r2, #5
 8012c74:	602a      	str	r2, [r5, #0]
 8012c76:	2e00      	cmp	r6, #0
 8012c78:	d1e3      	bne.n	8012c42 <rmw_validate_full_topic_name+0xba>
 8012c7a:	e7a0      	b.n	8012bbe <rmw_validate_full_topic_name+0x36>
 8012c7c:	080189a4 	.word	0x080189a4

08012c80 <rmw_validate_namespace_with_size>:
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d043      	beq.n	8012d0c <rmw_validate_namespace_with_size+0x8c>
 8012c84:	b570      	push	{r4, r5, r6, lr}
 8012c86:	4614      	mov	r4, r2
 8012c88:	b0c2      	sub	sp, #264	; 0x108
 8012c8a:	b32a      	cbz	r2, 8012cd8 <rmw_validate_namespace_with_size+0x58>
 8012c8c:	2901      	cmp	r1, #1
 8012c8e:	460d      	mov	r5, r1
 8012c90:	461e      	mov	r6, r3
 8012c92:	d102      	bne.n	8012c9a <rmw_validate_namespace_with_size+0x1a>
 8012c94:	7803      	ldrb	r3, [r0, #0]
 8012c96:	2b2f      	cmp	r3, #47	; 0x2f
 8012c98:	d012      	beq.n	8012cc0 <rmw_validate_namespace_with_size+0x40>
 8012c9a:	aa01      	add	r2, sp, #4
 8012c9c:	4669      	mov	r1, sp
 8012c9e:	f7ff ff73 	bl	8012b88 <rmw_validate_full_topic_name>
 8012ca2:	b980      	cbnz	r0, 8012cc6 <rmw_validate_namespace_with_size+0x46>
 8012ca4:	9a00      	ldr	r2, [sp, #0]
 8012ca6:	b14a      	cbz	r2, 8012cbc <rmw_validate_namespace_with_size+0x3c>
 8012ca8:	2a07      	cmp	r2, #7
 8012caa:	d007      	beq.n	8012cbc <rmw_validate_namespace_with_size+0x3c>
 8012cac:	1e53      	subs	r3, r2, #1
 8012cae:	2b05      	cmp	r3, #5
 8012cb0:	d82e      	bhi.n	8012d10 <rmw_validate_namespace_with_size+0x90>
 8012cb2:	e8df f003 	tbb	[pc, r3]
 8012cb6:	1f1c      	.short	0x1f1c
 8012cb8:	14282522 	.word	0x14282522
 8012cbc:	2df5      	cmp	r5, #245	; 0xf5
 8012cbe:	d804      	bhi.n	8012cca <rmw_validate_namespace_with_size+0x4a>
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	6023      	str	r3, [r4, #0]
 8012cc6:	b042      	add	sp, #264	; 0x108
 8012cc8:	bd70      	pop	{r4, r5, r6, pc}
 8012cca:	2307      	movs	r3, #7
 8012ccc:	6023      	str	r3, [r4, #0]
 8012cce:	2e00      	cmp	r6, #0
 8012cd0:	d0f9      	beq.n	8012cc6 <rmw_validate_namespace_with_size+0x46>
 8012cd2:	23f4      	movs	r3, #244	; 0xf4
 8012cd4:	6033      	str	r3, [r6, #0]
 8012cd6:	e7f6      	b.n	8012cc6 <rmw_validate_namespace_with_size+0x46>
 8012cd8:	200b      	movs	r0, #11
 8012cda:	b042      	add	sp, #264	; 0x108
 8012cdc:	bd70      	pop	{r4, r5, r6, pc}
 8012cde:	2306      	movs	r3, #6
 8012ce0:	6023      	str	r3, [r4, #0]
 8012ce2:	2e00      	cmp	r6, #0
 8012ce4:	d0ef      	beq.n	8012cc6 <rmw_validate_namespace_with_size+0x46>
 8012ce6:	9b01      	ldr	r3, [sp, #4]
 8012ce8:	6033      	str	r3, [r6, #0]
 8012cea:	b042      	add	sp, #264	; 0x108
 8012cec:	bd70      	pop	{r4, r5, r6, pc}
 8012cee:	2301      	movs	r3, #1
 8012cf0:	6023      	str	r3, [r4, #0]
 8012cf2:	e7f6      	b.n	8012ce2 <rmw_validate_namespace_with_size+0x62>
 8012cf4:	2302      	movs	r3, #2
 8012cf6:	6023      	str	r3, [r4, #0]
 8012cf8:	e7f3      	b.n	8012ce2 <rmw_validate_namespace_with_size+0x62>
 8012cfa:	2303      	movs	r3, #3
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	e7f0      	b.n	8012ce2 <rmw_validate_namespace_with_size+0x62>
 8012d00:	2304      	movs	r3, #4
 8012d02:	6023      	str	r3, [r4, #0]
 8012d04:	e7ed      	b.n	8012ce2 <rmw_validate_namespace_with_size+0x62>
 8012d06:	2305      	movs	r3, #5
 8012d08:	6023      	str	r3, [r4, #0]
 8012d0a:	e7ea      	b.n	8012ce2 <rmw_validate_namespace_with_size+0x62>
 8012d0c:	200b      	movs	r0, #11
 8012d0e:	4770      	bx	lr
 8012d10:	4613      	mov	r3, r2
 8012d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012d16:	4a03      	ldr	r2, [pc, #12]	; (8012d24 <rmw_validate_namespace_with_size+0xa4>)
 8012d18:	a802      	add	r0, sp, #8
 8012d1a:	f7ff fca1 	bl	8012660 <rcutils_snprintf>
 8012d1e:	2001      	movs	r0, #1
 8012d20:	e7d1      	b.n	8012cc6 <rmw_validate_namespace_with_size+0x46>
 8012d22:	bf00      	nop
 8012d24:	080183ac 	.word	0x080183ac

08012d28 <rmw_validate_namespace>:
 8012d28:	b168      	cbz	r0, 8012d46 <rmw_validate_namespace+0x1e>
 8012d2a:	b570      	push	{r4, r5, r6, lr}
 8012d2c:	460d      	mov	r5, r1
 8012d2e:	4616      	mov	r6, r2
 8012d30:	4604      	mov	r4, r0
 8012d32:	f7ed fa77 	bl	8000224 <strlen>
 8012d36:	4633      	mov	r3, r6
 8012d38:	4601      	mov	r1, r0
 8012d3a:	462a      	mov	r2, r5
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d42:	f7ff bf9d 	b.w	8012c80 <rmw_validate_namespace_with_size>
 8012d46:	200b      	movs	r0, #11
 8012d48:	4770      	bx	lr
 8012d4a:	bf00      	nop

08012d4c <rmw_namespace_validation_result_string>:
 8012d4c:	2807      	cmp	r0, #7
 8012d4e:	d803      	bhi.n	8012d58 <rmw_namespace_validation_result_string+0xc>
 8012d50:	4b02      	ldr	r3, [pc, #8]	; (8012d5c <rmw_namespace_validation_result_string+0x10>)
 8012d52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012d56:	4770      	bx	lr
 8012d58:	4801      	ldr	r0, [pc, #4]	; (8012d60 <rmw_namespace_validation_result_string+0x14>)
 8012d5a:	4770      	bx	lr
 8012d5c:	080185a4 	.word	0x080185a4
 8012d60:	080183fc 	.word	0x080183fc

08012d64 <rmw_validate_node_name>:
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d042      	beq.n	8012dee <rmw_validate_node_name+0x8a>
 8012d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d6c:	460d      	mov	r5, r1
 8012d6e:	2900      	cmp	r1, #0
 8012d70:	d03f      	beq.n	8012df2 <rmw_validate_node_name+0x8e>
 8012d72:	4604      	mov	r4, r0
 8012d74:	4616      	mov	r6, r2
 8012d76:	f7ed fa55 	bl	8000224 <strlen>
 8012d7a:	b310      	cbz	r0, 8012dc2 <rmw_validate_node_name+0x5e>
 8012d7c:	1e63      	subs	r3, r4, #1
 8012d7e:	f1c4 0101 	rsb	r1, r4, #1
 8012d82:	eb03 0800 	add.w	r8, r3, r0
 8012d86:	18cf      	adds	r7, r1, r3
 8012d88:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012d8c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8012d90:	f02e 0c20 	bic.w	ip, lr, #32
 8012d94:	2a09      	cmp	r2, #9
 8012d96:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8012d9a:	d905      	bls.n	8012da8 <rmw_validate_node_name+0x44>
 8012d9c:	f1bc 0f19 	cmp.w	ip, #25
 8012da0:	d902      	bls.n	8012da8 <rmw_validate_node_name+0x44>
 8012da2:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8012da6:	d114      	bne.n	8012dd2 <rmw_validate_node_name+0x6e>
 8012da8:	4598      	cmp	r8, r3
 8012daa:	d1ec      	bne.n	8012d86 <rmw_validate_node_name+0x22>
 8012dac:	7822      	ldrb	r2, [r4, #0]
 8012dae:	4b16      	ldr	r3, [pc, #88]	; (8012e08 <rmw_validate_node_name+0xa4>)
 8012db0:	5cd3      	ldrb	r3, [r2, r3]
 8012db2:	f013 0304 	ands.w	r3, r3, #4
 8012db6:	d113      	bne.n	8012de0 <rmw_validate_node_name+0x7c>
 8012db8:	28ff      	cmp	r0, #255	; 0xff
 8012dba:	d81c      	bhi.n	8012df6 <rmw_validate_node_name+0x92>
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	602b      	str	r3, [r5, #0]
 8012dc0:	e00c      	b.n	8012ddc <rmw_validate_node_name+0x78>
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	602b      	str	r3, [r5, #0]
 8012dc6:	b17e      	cbz	r6, 8012de8 <rmw_validate_node_name+0x84>
 8012dc8:	2300      	movs	r3, #0
 8012dca:	4618      	mov	r0, r3
 8012dcc:	6033      	str	r3, [r6, #0]
 8012dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd2:	2302      	movs	r3, #2
 8012dd4:	602b      	str	r3, [r5, #0]
 8012dd6:	b13e      	cbz	r6, 8012de8 <rmw_validate_node_name+0x84>
 8012dd8:	2000      	movs	r0, #0
 8012dda:	6037      	str	r7, [r6, #0]
 8012ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de0:	2303      	movs	r3, #3
 8012de2:	602b      	str	r3, [r5, #0]
 8012de4:	2e00      	cmp	r6, #0
 8012de6:	d1ef      	bne.n	8012dc8 <rmw_validate_node_name+0x64>
 8012de8:	2000      	movs	r0, #0
 8012dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dee:	200b      	movs	r0, #11
 8012df0:	4770      	bx	lr
 8012df2:	200b      	movs	r0, #11
 8012df4:	e7f2      	b.n	8012ddc <rmw_validate_node_name+0x78>
 8012df6:	2204      	movs	r2, #4
 8012df8:	602a      	str	r2, [r5, #0]
 8012dfa:	2e00      	cmp	r6, #0
 8012dfc:	d0f4      	beq.n	8012de8 <rmw_validate_node_name+0x84>
 8012dfe:	22fe      	movs	r2, #254	; 0xfe
 8012e00:	4618      	mov	r0, r3
 8012e02:	6032      	str	r2, [r6, #0]
 8012e04:	e7ea      	b.n	8012ddc <rmw_validate_node_name+0x78>
 8012e06:	bf00      	nop
 8012e08:	080189a4 	.word	0x080189a4

08012e0c <rmw_node_name_validation_result_string>:
 8012e0c:	2804      	cmp	r0, #4
 8012e0e:	d803      	bhi.n	8012e18 <rmw_node_name_validation_result_string+0xc>
 8012e10:	4b02      	ldr	r3, [pc, #8]	; (8012e1c <rmw_node_name_validation_result_string+0x10>)
 8012e12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012e16:	4770      	bx	lr
 8012e18:	4801      	ldr	r0, [pc, #4]	; (8012e20 <rmw_node_name_validation_result_string+0x14>)
 8012e1a:	4770      	bx	lr
 8012e1c:	080186b0 	.word	0x080186b0
 8012e20:	080185c4 	.word	0x080185c4

08012e24 <get_memory>:
 8012e24:	4603      	mov	r3, r0
 8012e26:	6840      	ldr	r0, [r0, #4]
 8012e28:	b158      	cbz	r0, 8012e42 <get_memory+0x1e>
 8012e2a:	6842      	ldr	r2, [r0, #4]
 8012e2c:	605a      	str	r2, [r3, #4]
 8012e2e:	b10a      	cbz	r2, 8012e34 <get_memory+0x10>
 8012e30:	2100      	movs	r1, #0
 8012e32:	6011      	str	r1, [r2, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	6042      	str	r2, [r0, #4]
 8012e38:	b102      	cbz	r2, 8012e3c <get_memory+0x18>
 8012e3a:	6010      	str	r0, [r2, #0]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	6002      	str	r2, [r0, #0]
 8012e40:	6018      	str	r0, [r3, #0]
 8012e42:	4770      	bx	lr

08012e44 <put_memory>:
 8012e44:	680b      	ldr	r3, [r1, #0]
 8012e46:	b10b      	cbz	r3, 8012e4c <put_memory+0x8>
 8012e48:	684a      	ldr	r2, [r1, #4]
 8012e4a:	605a      	str	r2, [r3, #4]
 8012e4c:	684a      	ldr	r2, [r1, #4]
 8012e4e:	b102      	cbz	r2, 8012e52 <put_memory+0xe>
 8012e50:	6013      	str	r3, [r2, #0]
 8012e52:	6803      	ldr	r3, [r0, #0]
 8012e54:	428b      	cmp	r3, r1
 8012e56:	6843      	ldr	r3, [r0, #4]
 8012e58:	bf08      	it	eq
 8012e5a:	6002      	streq	r2, [r0, #0]
 8012e5c:	604b      	str	r3, [r1, #4]
 8012e5e:	b103      	cbz	r3, 8012e62 <put_memory+0x1e>
 8012e60:	6019      	str	r1, [r3, #0]
 8012e62:	2300      	movs	r3, #0
 8012e64:	600b      	str	r3, [r1, #0]
 8012e66:	6041      	str	r1, [r0, #4]
 8012e68:	4770      	bx	lr
 8012e6a:	bf00      	nop

08012e6c <rmw_destroy_client>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	b128      	cbz	r0, 8012e7c <rmw_destroy_client+0x10>
 8012e70:	4604      	mov	r4, r0
 8012e72:	6800      	ldr	r0, [r0, #0]
 8012e74:	460d      	mov	r5, r1
 8012e76:	f7f8 fbcf 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 8012e7a:	b910      	cbnz	r0, 8012e82 <rmw_destroy_client+0x16>
 8012e7c:	2401      	movs	r4, #1
 8012e7e:	4620      	mov	r0, r4
 8012e80:	bd70      	pop	{r4, r5, r6, pc}
 8012e82:	6863      	ldr	r3, [r4, #4]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d0f9      	beq.n	8012e7c <rmw_destroy_client+0x10>
 8012e88:	2d00      	cmp	r5, #0
 8012e8a:	d0f7      	beq.n	8012e7c <rmw_destroy_client+0x10>
 8012e8c:	6828      	ldr	r0, [r5, #0]
 8012e8e:	f7f8 fbc3 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	d0f2      	beq.n	8012e7c <rmw_destroy_client+0x10>
 8012e96:	686e      	ldr	r6, [r5, #4]
 8012e98:	2e00      	cmp	r6, #0
 8012e9a:	d0ef      	beq.n	8012e7c <rmw_destroy_client+0x10>
 8012e9c:	6864      	ldr	r4, [r4, #4]
 8012e9e:	6932      	ldr	r2, [r6, #16]
 8012ea0:	6920      	ldr	r0, [r4, #16]
 8012ea2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012ea6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012eaa:	6819      	ldr	r1, [r3, #0]
 8012eac:	f002 f92a 	bl	8015104 <uxr_buffer_cancel_data>
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	6920      	ldr	r0, [r4, #16]
 8012eb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012eb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012ebc:	f7f8 fb32 	bl	800b524 <run_xrce_session>
 8012ec0:	6920      	ldr	r0, [r4, #16]
 8012ec2:	6932      	ldr	r2, [r6, #16]
 8012ec4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012ec8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012ecc:	6819      	ldr	r1, [r3, #0]
 8012ece:	f7f9 fd8b 	bl	800c9e8 <uxr_buffer_delete_entity>
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	6920      	ldr	r0, [r4, #16]
 8012ed6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012eda:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012ede:	f7f8 fb21 	bl	800b524 <run_xrce_session>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	bf14      	ite	ne
 8012eea:	2400      	movne	r4, #0
 8012eec:	2402      	moveq	r4, #2
 8012eee:	f7f8 f9f5 	bl	800b2dc <rmw_uxrce_fini_client_memory>
 8012ef2:	e7c4      	b.n	8012e7e <rmw_destroy_client+0x12>

08012ef4 <rmw_get_implementation_identifier>:
 8012ef4:	4b01      	ldr	r3, [pc, #4]	; (8012efc <rmw_get_implementation_identifier+0x8>)
 8012ef6:	6818      	ldr	r0, [r3, #0]
 8012ef8:	4770      	bx	lr
 8012efa:	bf00      	nop
 8012efc:	080186dc 	.word	0x080186dc

08012f00 <rmw_init_options_init>:
 8012f00:	b084      	sub	sp, #16
 8012f02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f04:	b083      	sub	sp, #12
 8012f06:	ad09      	add	r5, sp, #36	; 0x24
 8012f08:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012f0c:	b130      	cbz	r0, 8012f1c <rmw_init_options_init+0x1c>
 8012f0e:	4604      	mov	r4, r0
 8012f10:	4628      	mov	r0, r5
 8012f12:	f7f7 fdcb 	bl	800aaac <rcutils_allocator_is_valid>
 8012f16:	b108      	cbz	r0, 8012f1c <rmw_init_options_init+0x1c>
 8012f18:	68a6      	ldr	r6, [r4, #8]
 8012f1a:	b12e      	cbz	r6, 8012f28 <rmw_init_options_init+0x28>
 8012f1c:	200b      	movs	r0, #11
 8012f1e:	b003      	add	sp, #12
 8012f20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f24:	b004      	add	sp, #16
 8012f26:	4770      	bx	lr
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f104 0c20 	add.w	ip, r4, #32
 8012f30:	f8df e098 	ldr.w	lr, [pc, #152]	; 8012fcc <rmw_init_options_init+0xcc>
 8012f34:	466f      	mov	r7, sp
 8012f36:	e9c4 2300 	strd	r2, r3, [r4]
 8012f3a:	4b20      	ldr	r3, [pc, #128]	; (8012fbc <rmw_init_options_init+0xbc>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	60a3      	str	r3, [r4, #8]
 8012f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f46:	682b      	ldr	r3, [r5, #0]
 8012f48:	4638      	mov	r0, r7
 8012f4a:	f8cc 3000 	str.w	r3, [ip]
 8012f4e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8012f52:	60e6      	str	r6, [r4, #12]
 8012f54:	f7ff fd64 	bl	8012a20 <rmw_get_default_security_options>
 8012f58:	f104 0310 	add.w	r3, r4, #16
 8012f5c:	2203      	movs	r2, #3
 8012f5e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012f62:	e883 0003 	stmia.w	r3, {r0, r1}
 8012f66:	4816      	ldr	r0, [pc, #88]	; (8012fc0 <rmw_init_options_init+0xc0>)
 8012f68:	4916      	ldr	r1, [pc, #88]	; (8012fc4 <rmw_init_options_init+0xc4>)
 8012f6a:	7626      	strb	r6, [r4, #24]
 8012f6c:	f7f8 f8f6 	bl	800b15c <rmw_uxrce_init_init_options_impl_memory>
 8012f70:	4813      	ldr	r0, [pc, #76]	; (8012fc0 <rmw_init_options_init+0xc0>)
 8012f72:	f7ff ff57 	bl	8012e24 <get_memory>
 8012f76:	b1f0      	cbz	r0, 8012fb6 <rmw_init_options_init+0xb6>
 8012f78:	4a13      	ldr	r2, [pc, #76]	; (8012fc8 <rmw_init_options_init+0xc8>)
 8012f7a:	6883      	ldr	r3, [r0, #8]
 8012f7c:	6851      	ldr	r1, [r2, #4]
 8012f7e:	6363      	str	r3, [r4, #52]	; 0x34
 8012f80:	7810      	ldrb	r0, [r2, #0]
 8012f82:	6159      	str	r1, [r3, #20]
 8012f84:	68d1      	ldr	r1, [r2, #12]
 8012f86:	7418      	strb	r0, [r3, #16]
 8012f88:	61d9      	str	r1, [r3, #28]
 8012f8a:	6911      	ldr	r1, [r2, #16]
 8012f8c:	6219      	str	r1, [r3, #32]
 8012f8e:	6951      	ldr	r1, [r2, #20]
 8012f90:	6892      	ldr	r2, [r2, #8]
 8012f92:	6259      	str	r1, [r3, #36]	; 0x24
 8012f94:	619a      	str	r2, [r3, #24]
 8012f96:	f7fb f991 	bl	800e2bc <uxr_nanos>
 8012f9a:	f003 fbaf 	bl	80166fc <srand>
 8012f9e:	f003 fbdb 	bl	8016758 <rand>
 8012fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fa4:	6298      	str	r0, [r3, #40]	; 0x28
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	d0f9      	beq.n	8012f9e <rmw_init_options_init+0x9e>
 8012faa:	2000      	movs	r0, #0
 8012fac:	b003      	add	sp, #12
 8012fae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012fb2:	b004      	add	sp, #16
 8012fb4:	4770      	bx	lr
 8012fb6:	2001      	movs	r0, #1
 8012fb8:	e7b1      	b.n	8012f1e <rmw_init_options_init+0x1e>
 8012fba:	bf00      	nop
 8012fbc:	080186dc 	.word	0x080186dc
 8012fc0:	20013458 	.word	0x20013458
 8012fc4:	2000e830 	.word	0x2000e830
 8012fc8:	2000e6bc 	.word	0x2000e6bc
 8012fcc:	08018144 	.word	0x08018144

08012fd0 <rmw_init_options_copy>:
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	d047      	beq.n	8013064 <rmw_init_options_copy+0x94>
 8012fd4:	b570      	push	{r4, r5, r6, lr}
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	b149      	cbz	r1, 8012fee <rmw_init_options_copy+0x1e>
 8012fda:	4604      	mov	r4, r0
 8012fdc:	6880      	ldr	r0, [r0, #8]
 8012fde:	b120      	cbz	r0, 8012fea <rmw_init_options_copy+0x1a>
 8012fe0:	4b22      	ldr	r3, [pc, #136]	; (801306c <rmw_init_options_copy+0x9c>)
 8012fe2:	6819      	ldr	r1, [r3, #0]
 8012fe4:	f7ed f914 	bl	8000210 <strcmp>
 8012fe8:	bba8      	cbnz	r0, 8013056 <rmw_init_options_copy+0x86>
 8012fea:	68ab      	ldr	r3, [r5, #8]
 8012fec:	b11b      	cbz	r3, 8012ff6 <rmw_init_options_copy+0x26>
 8012fee:	f04f 0c0b 	mov.w	ip, #11
 8012ff2:	4660      	mov	r0, ip
 8012ff4:	bd70      	pop	{r4, r5, r6, pc}
 8012ff6:	4623      	mov	r3, r4
 8012ff8:	462a      	mov	r2, r5
 8012ffa:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012ffe:	f8d3 e000 	ldr.w	lr, [r3]
 8013002:	3310      	adds	r3, #16
 8013004:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8013008:	3210      	adds	r2, #16
 801300a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801300e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013012:	42b3      	cmp	r3, r6
 8013014:	f842 ec10 	str.w	lr, [r2, #-16]
 8013018:	f842 cc0c 	str.w	ip, [r2, #-12]
 801301c:	f842 0c08 	str.w	r0, [r2, #-8]
 8013020:	f842 1c04 	str.w	r1, [r2, #-4]
 8013024:	d1eb      	bne.n	8012ffe <rmw_init_options_copy+0x2e>
 8013026:	6819      	ldr	r1, [r3, #0]
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	4811      	ldr	r0, [pc, #68]	; (8013070 <rmw_init_options_copy+0xa0>)
 801302c:	6011      	str	r1, [r2, #0]
 801302e:	6053      	str	r3, [r2, #4]
 8013030:	f7ff fef8 	bl	8012e24 <get_memory>
 8013034:	b198      	cbz	r0, 801305e <rmw_init_options_copy+0x8e>
 8013036:	6883      	ldr	r3, [r0, #8]
 8013038:	f04f 0c00 	mov.w	ip, #0
 801303c:	636b      	str	r3, [r5, #52]	; 0x34
 801303e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8013040:	f103 0410 	add.w	r4, r3, #16
 8013044:	3510      	adds	r5, #16
 8013046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801304a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801304e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013052:	4660      	mov	r0, ip
 8013054:	bd70      	pop	{r4, r5, r6, pc}
 8013056:	f04f 0c0c 	mov.w	ip, #12
 801305a:	4660      	mov	r0, ip
 801305c:	bd70      	pop	{r4, r5, r6, pc}
 801305e:	f04f 0c01 	mov.w	ip, #1
 8013062:	e7c6      	b.n	8012ff2 <rmw_init_options_copy+0x22>
 8013064:	f04f 0c0b 	mov.w	ip, #11
 8013068:	4660      	mov	r0, ip
 801306a:	4770      	bx	lr
 801306c:	080186dc 	.word	0x080186dc
 8013070:	20013458 	.word	0x20013458

08013074 <rmw_init_options_fini>:
 8013074:	b510      	push	{r4, lr}
 8013076:	b08e      	sub	sp, #56	; 0x38
 8013078:	b388      	cbz	r0, 80130de <rmw_init_options_fini+0x6a>
 801307a:	4604      	mov	r4, r0
 801307c:	3020      	adds	r0, #32
 801307e:	f7f7 fd15 	bl	800aaac <rcutils_allocator_is_valid>
 8013082:	b360      	cbz	r0, 80130de <rmw_init_options_fini+0x6a>
 8013084:	68a0      	ldr	r0, [r4, #8]
 8013086:	b120      	cbz	r0, 8013092 <rmw_init_options_fini+0x1e>
 8013088:	4b1a      	ldr	r3, [pc, #104]	; (80130f4 <rmw_init_options_fini+0x80>)
 801308a:	6819      	ldr	r1, [r3, #0]
 801308c:	f7ed f8c0 	bl	8000210 <strcmp>
 8013090:	bb68      	cbnz	r0, 80130ee <rmw_init_options_fini+0x7a>
 8013092:	4b19      	ldr	r3, [pc, #100]	; (80130f8 <rmw_init_options_fini+0x84>)
 8013094:	6819      	ldr	r1, [r3, #0]
 8013096:	b331      	cbz	r1, 80130e6 <rmw_init_options_fini+0x72>
 8013098:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801309a:	e001      	b.n	80130a0 <rmw_init_options_fini+0x2c>
 801309c:	6849      	ldr	r1, [r1, #4]
 801309e:	b311      	cbz	r1, 80130e6 <rmw_init_options_fini+0x72>
 80130a0:	688b      	ldr	r3, [r1, #8]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d1fa      	bne.n	801309c <rmw_init_options_fini+0x28>
 80130a6:	4814      	ldr	r0, [pc, #80]	; (80130f8 <rmw_init_options_fini+0x84>)
 80130a8:	f7ff fecc 	bl	8012e44 <put_memory>
 80130ac:	4668      	mov	r0, sp
 80130ae:	f7ff fca7 	bl	8012a00 <rmw_get_zero_initialized_init_options>
 80130b2:	46ee      	mov	lr, sp
 80130b4:	46a4      	mov	ip, r4
 80130b6:	2400      	movs	r4, #0
 80130b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80130d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80130d8:	4620      	mov	r0, r4
 80130da:	b00e      	add	sp, #56	; 0x38
 80130dc:	bd10      	pop	{r4, pc}
 80130de:	240b      	movs	r4, #11
 80130e0:	4620      	mov	r0, r4
 80130e2:	b00e      	add	sp, #56	; 0x38
 80130e4:	bd10      	pop	{r4, pc}
 80130e6:	2401      	movs	r4, #1
 80130e8:	4620      	mov	r0, r4
 80130ea:	b00e      	add	sp, #56	; 0x38
 80130ec:	bd10      	pop	{r4, pc}
 80130ee:	240c      	movs	r4, #12
 80130f0:	e7f2      	b.n	80130d8 <rmw_init_options_fini+0x64>
 80130f2:	bf00      	nop
 80130f4:	080186dc 	.word	0x080186dc
 80130f8:	20013458 	.word	0x20013458

080130fc <rmw_init>:
 80130fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013100:	b083      	sub	sp, #12
 8013102:	2800      	cmp	r0, #0
 8013104:	f000 80d3 	beq.w	80132ae <rmw_init+0x1b2>
 8013108:	460e      	mov	r6, r1
 801310a:	2900      	cmp	r1, #0
 801310c:	f000 80cf 	beq.w	80132ae <rmw_init+0x1b2>
 8013110:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013112:	4605      	mov	r5, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	f000 80ca 	beq.w	80132ae <rmw_init+0x1b2>
 801311a:	4b78      	ldr	r3, [pc, #480]	; (80132fc <rmw_init+0x200>)
 801311c:	6880      	ldr	r0, [r0, #8]
 801311e:	681f      	ldr	r7, [r3, #0]
 8013120:	b128      	cbz	r0, 801312e <rmw_init+0x32>
 8013122:	4639      	mov	r1, r7
 8013124:	f7ed f874 	bl	8000210 <strcmp>
 8013128:	2800      	cmp	r0, #0
 801312a:	f040 80ca 	bne.w	80132c2 <rmw_init+0x1c6>
 801312e:	4c74      	ldr	r4, [pc, #464]	; (8013300 <rmw_init+0x204>)
 8013130:	f04f 0800 	mov.w	r8, #0
 8013134:	4973      	ldr	r1, [pc, #460]	; (8013304 <rmw_init+0x208>)
 8013136:	4874      	ldr	r0, [pc, #464]	; (8013308 <rmw_init+0x20c>)
 8013138:	e9d5 2300 	ldrd	r2, r3, [r5]
 801313c:	60b7      	str	r7, [r6, #8]
 801313e:	e9c6 2300 	strd	r2, r3, [r6]
 8013142:	68eb      	ldr	r3, [r5, #12]
 8013144:	2201      	movs	r2, #1
 8013146:	64b3      	str	r3, [r6, #72]	; 0x48
 8013148:	f7f7 ffa8 	bl	800b09c <rmw_uxrce_init_session_memory>
 801314c:	4620      	mov	r0, r4
 801314e:	2204      	movs	r2, #4
 8013150:	496e      	ldr	r1, [pc, #440]	; (801330c <rmw_init+0x210>)
 8013152:	f7f7 ffe3 	bl	800b11c <rmw_uxrce_init_static_input_buffer_memory>
 8013156:	486c      	ldr	r0, [pc, #432]	; (8013308 <rmw_init+0x20c>)
 8013158:	f884 800d 	strb.w	r8, [r4, #13]
 801315c:	f7ff fe62 	bl	8012e24 <get_memory>
 8013160:	2800      	cmp	r0, #0
 8013162:	f000 80a9 	beq.w	80132b8 <rmw_init+0x1bc>
 8013166:	6884      	ldr	r4, [r0, #8]
 8013168:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801316a:	f104 0910 	add.w	r9, r4, #16
 801316e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8013170:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013174:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013178:	9101      	str	r1, [sp, #4]
 801317a:	4661      	mov	r1, ip
 801317c:	6a00      	ldr	r0, [r0, #32]
 801317e:	9000      	str	r0, [sp, #0]
 8013180:	4648      	mov	r0, r9
 8013182:	f001 f9f9 	bl	8014578 <uxr_set_custom_transport_callbacks>
 8013186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801318a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801318e:	4960      	ldr	r1, [pc, #384]	; (8013310 <rmw_init+0x214>)
 8013190:	4860      	ldr	r0, [pc, #384]	; (8013314 <rmw_init+0x218>)
 8013192:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8013196:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801319a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801319e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80131a2:	2201      	movs	r2, #1
 80131a4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80131a8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80131ac:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80131b0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80131b4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80131b6:	f7f7 ff51 	bl	800b05c <rmw_uxrce_init_node_memory>
 80131ba:	220a      	movs	r2, #10
 80131bc:	4956      	ldr	r1, [pc, #344]	; (8013318 <rmw_init+0x21c>)
 80131be:	4857      	ldr	r0, [pc, #348]	; (801331c <rmw_init+0x220>)
 80131c0:	f7f7 ff2c 	bl	800b01c <rmw_uxrce_init_subscription_memory>
 80131c4:	220a      	movs	r2, #10
 80131c6:	4956      	ldr	r1, [pc, #344]	; (8013320 <rmw_init+0x224>)
 80131c8:	4856      	ldr	r0, [pc, #344]	; (8013324 <rmw_init+0x228>)
 80131ca:	f7f7 ff07 	bl	800afdc <rmw_uxrce_init_publisher_memory>
 80131ce:	2201      	movs	r2, #1
 80131d0:	4955      	ldr	r1, [pc, #340]	; (8013328 <rmw_init+0x22c>)
 80131d2:	4856      	ldr	r0, [pc, #344]	; (801332c <rmw_init+0x230>)
 80131d4:	f7f7 fec2 	bl	800af5c <rmw_uxrce_init_service_memory>
 80131d8:	2201      	movs	r2, #1
 80131da:	4955      	ldr	r1, [pc, #340]	; (8013330 <rmw_init+0x234>)
 80131dc:	4855      	ldr	r0, [pc, #340]	; (8013334 <rmw_init+0x238>)
 80131de:	f7f7 fedd 	bl	800af9c <rmw_uxrce_init_client_memory>
 80131e2:	2214      	movs	r2, #20
 80131e4:	4954      	ldr	r1, [pc, #336]	; (8013338 <rmw_init+0x23c>)
 80131e6:	4855      	ldr	r0, [pc, #340]	; (801333c <rmw_init+0x240>)
 80131e8:	f7f7 ff78 	bl	800b0dc <rmw_uxrce_init_topic_memory>
 80131ec:	2203      	movs	r2, #3
 80131ee:	4954      	ldr	r1, [pc, #336]	; (8013340 <rmw_init+0x244>)
 80131f0:	4854      	ldr	r0, [pc, #336]	; (8013344 <rmw_init+0x248>)
 80131f2:	f7f7 ffb3 	bl	800b15c <rmw_uxrce_init_init_options_impl_memory>
 80131f6:	2204      	movs	r2, #4
 80131f8:	4953      	ldr	r1, [pc, #332]	; (8013348 <rmw_init+0x24c>)
 80131fa:	4854      	ldr	r0, [pc, #336]	; (801334c <rmw_init+0x250>)
 80131fc:	f7f7 ffce 	bl	800b19c <rmw_uxrce_init_wait_set_memory>
 8013200:	4953      	ldr	r1, [pc, #332]	; (8013350 <rmw_init+0x254>)
 8013202:	4854      	ldr	r0, [pc, #336]	; (8013354 <rmw_init+0x258>)
 8013204:	2204      	movs	r2, #4
 8013206:	f7f7 ffe9 	bl	800b1dc <rmw_uxrce_init_guard_condition_memory>
 801320a:	4642      	mov	r2, r8
 801320c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801320e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013210:	f000 fdb8 	bl	8013d84 <rmw_uxrce_transport_init>
 8013214:	4607      	mov	r7, r0
 8013216:	2800      	cmp	r0, #0
 8013218:	d158      	bne.n	80132cc <rmw_init+0x1d0>
 801321a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801321c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8013220:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8013224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013226:	4628      	mov	r0, r5
 8013228:	f7f9 fe9e 	bl	800cf68 <uxr_init_session>
 801322c:	4622      	mov	r2, r4
 801322e:	494a      	ldr	r1, [pc, #296]	; (8013358 <rmw_init+0x25c>)
 8013230:	4628      	mov	r0, r5
 8013232:	f7f9 febd 	bl	800cfb0 <uxr_set_topic_callback>
 8013236:	463a      	mov	r2, r7
 8013238:	4948      	ldr	r1, [pc, #288]	; (801335c <rmw_init+0x260>)
 801323a:	4628      	mov	r0, r5
 801323c:	f7f9 feb4 	bl	800cfa8 <uxr_set_status_callback>
 8013240:	463a      	mov	r2, r7
 8013242:	4947      	ldr	r1, [pc, #284]	; (8013360 <rmw_init+0x264>)
 8013244:	4628      	mov	r0, r5
 8013246:	f7f9 feb7 	bl	800cfb8 <uxr_set_request_callback>
 801324a:	463a      	mov	r2, r7
 801324c:	4945      	ldr	r1, [pc, #276]	; (8013364 <rmw_init+0x268>)
 801324e:	4628      	mov	r0, r5
 8013250:	f7f9 feb6 	bl	800cfc0 <uxr_set_reply_callback>
 8013254:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013258:	2304      	movs	r3, #4
 801325a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801325e:	0092      	lsls	r2, r2, #2
 8013260:	4628      	mov	r0, r5
 8013262:	f7f9 feed 	bl	800d040 <uxr_create_input_reliable_stream>
 8013266:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801326a:	2304      	movs	r3, #4
 801326c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8013270:	0092      	lsls	r2, r2, #2
 8013272:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8013276:	4628      	mov	r0, r5
 8013278:	f7f9 feb8 	bl	800cfec <uxr_create_output_reliable_stream>
 801327c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8013280:	4628      	mov	r0, r5
 8013282:	f7f9 fed7 	bl	800d034 <uxr_create_input_best_effort_stream>
 8013286:	f241 3194 	movw	r1, #5012	; 0x1394
 801328a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801328e:	4628      	mov	r0, r5
 8013290:	4421      	add	r1, r4
 8013292:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013296:	f7f9 fe97 	bl	800cfc8 <uxr_create_output_best_effort_stream>
 801329a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801329e:	4628      	mov	r0, r5
 80132a0:	f7fa fc20 	bl	800dae4 <uxr_create_session>
 80132a4:	b1f8      	cbz	r0, 80132e6 <rmw_init+0x1ea>
 80132a6:	4638      	mov	r0, r7
 80132a8:	b003      	add	sp, #12
 80132aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132ae:	270b      	movs	r7, #11
 80132b0:	4638      	mov	r0, r7
 80132b2:	b003      	add	sp, #12
 80132b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132b8:	2701      	movs	r7, #1
 80132ba:	4638      	mov	r0, r7
 80132bc:	b003      	add	sp, #12
 80132be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132c2:	270c      	movs	r7, #12
 80132c4:	4638      	mov	r0, r7
 80132c6:	b003      	add	sp, #12
 80132c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132cc:	4648      	mov	r0, r9
 80132ce:	f001 f991 	bl	80145f4 <uxr_close_custom_transport>
 80132d2:	4621      	mov	r1, r4
 80132d4:	480c      	ldr	r0, [pc, #48]	; (8013308 <rmw_init+0x20c>)
 80132d6:	f7ff fdb5 	bl	8012e44 <put_memory>
 80132da:	4638      	mov	r0, r7
 80132dc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80132e0:	b003      	add	sp, #12
 80132e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132e6:	4648      	mov	r0, r9
 80132e8:	f001 f984 	bl	80145f4 <uxr_close_custom_transport>
 80132ec:	4621      	mov	r1, r4
 80132ee:	4806      	ldr	r0, [pc, #24]	; (8013308 <rmw_init+0x20c>)
 80132f0:	f7ff fda8 	bl	8012e44 <put_memory>
 80132f4:	64f7      	str	r7, [r6, #76]	; 0x4c
 80132f6:	2701      	movs	r7, #1
 80132f8:	e7d5      	b.n	80132a6 <rmw_init+0x1aa>
 80132fa:	bf00      	nop
 80132fc:	080186dc 	.word	0x080186dc
 8013300:	200134a8 	.word	0x200134a8
 8013304:	2000f290 	.word	0x2000f290
 8013308:	20013498 	.word	0x20013498
 801330c:	20010838 	.word	0x20010838
 8013310:	2000e8b4 	.word	0x2000e8b4
 8013314:	20013468 	.word	0x20013468
 8013318:	20012938 	.word	0x20012938
 801331c:	200134b8 	.word	0x200134b8
 8013320:	2000e958 	.word	0x2000e958
 8013324:	20013478 	.word	0x20013478
 8013328:	2000f1c8 	.word	0x2000f1c8
 801332c:	20013488 	.word	0x20013488
 8013330:	2000e6e8 	.word	0x2000e6e8
 8013334:	2000e6d8 	.word	0x2000e6d8
 8013338:	200131a8 	.word	0x200131a8
 801333c:	200134c8 	.word	0x200134c8
 8013340:	2000e830 	.word	0x2000e830
 8013344:	20013458 	.word	0x20013458
 8013348:	200133d8 	.word	0x200133d8
 801334c:	200134d8 	.word	0x200134d8
 8013350:	2000e7b0 	.word	0x2000e7b0
 8013354:	20013448 	.word	0x20013448
 8013358:	0801629d 	.word	0x0801629d
 801335c:	08016295 	.word	0x08016295
 8013360:	08016335 	.word	0x08016335
 8013364:	080163d1 	.word	0x080163d1

08013368 <rmw_context_fini>:
 8013368:	4b17      	ldr	r3, [pc, #92]	; (80133c8 <rmw_context_fini+0x60>)
 801336a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801336c:	b570      	push	{r4, r5, r6, lr}
 801336e:	681c      	ldr	r4, [r3, #0]
 8013370:	4605      	mov	r5, r0
 8013372:	b334      	cbz	r4, 80133c2 <rmw_context_fini+0x5a>
 8013374:	2600      	movs	r6, #0
 8013376:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801337a:	6902      	ldr	r2, [r0, #16]
 801337c:	428a      	cmp	r2, r1
 801337e:	d018      	beq.n	80133b2 <rmw_context_fini+0x4a>
 8013380:	2c00      	cmp	r4, #0
 8013382:	d1f8      	bne.n	8013376 <rmw_context_fini+0xe>
 8013384:	b189      	cbz	r1, 80133aa <rmw_context_fini+0x42>
 8013386:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801338a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801338e:	789b      	ldrb	r3, [r3, #2]
 8013390:	2b01      	cmp	r3, #1
 8013392:	bf14      	ite	ne
 8013394:	210a      	movne	r1, #10
 8013396:	2100      	moveq	r1, #0
 8013398:	f7fa fb7c 	bl	800da94 <uxr_delete_session_retries>
 801339c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801339e:	f7f7 ff3d 	bl	800b21c <rmw_uxrce_fini_session_memory>
 80133a2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80133a4:	3010      	adds	r0, #16
 80133a6:	f001 f925 	bl	80145f4 <uxr_close_custom_transport>
 80133aa:	2300      	movs	r3, #0
 80133ac:	4630      	mov	r0, r6
 80133ae:	64eb      	str	r3, [r5, #76]	; 0x4c
 80133b0:	bd70      	pop	{r4, r5, r6, pc}
 80133b2:	3018      	adds	r0, #24
 80133b4:	f000 f90e 	bl	80135d4 <rmw_destroy_node>
 80133b8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80133ba:	4606      	mov	r6, r0
 80133bc:	2c00      	cmp	r4, #0
 80133be:	d1da      	bne.n	8013376 <rmw_context_fini+0xe>
 80133c0:	e7e0      	b.n	8013384 <rmw_context_fini+0x1c>
 80133c2:	4626      	mov	r6, r4
 80133c4:	e7de      	b.n	8013384 <rmw_context_fini+0x1c>
 80133c6:	bf00      	nop
 80133c8:	20013468 	.word	0x20013468

080133cc <create_topic>:
 80133cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133d0:	4605      	mov	r5, r0
 80133d2:	b084      	sub	sp, #16
 80133d4:	4822      	ldr	r0, [pc, #136]	; (8013460 <create_topic+0x94>)
 80133d6:	460f      	mov	r7, r1
 80133d8:	4616      	mov	r6, r2
 80133da:	f7ff fd23 	bl	8012e24 <get_memory>
 80133de:	4604      	mov	r4, r0
 80133e0:	2800      	cmp	r0, #0
 80133e2:	d039      	beq.n	8013458 <create_topic+0x8c>
 80133e4:	692b      	ldr	r3, [r5, #16]
 80133e6:	2102      	movs	r1, #2
 80133e8:	6884      	ldr	r4, [r0, #8]
 80133ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80133ee:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8013468 <create_topic+0x9c>
 80133f2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80133f6:	1c42      	adds	r2, r0, #1
 80133f8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80133fc:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8013400:	f7f9 fcf4 	bl	800cdec <uxr_object_id>
 8013404:	223c      	movs	r2, #60	; 0x3c
 8013406:	6120      	str	r0, [r4, #16]
 8013408:	4641      	mov	r1, r8
 801340a:	4638      	mov	r0, r7
 801340c:	f7f8 f8ec 	bl	800b5e8 <generate_topic_name>
 8013410:	b1f0      	cbz	r0, 8013450 <create_topic+0x84>
 8013412:	4f14      	ldr	r7, [pc, #80]	; (8013464 <create_topic+0x98>)
 8013414:	4630      	mov	r0, r6
 8013416:	2264      	movs	r2, #100	; 0x64
 8013418:	4639      	mov	r1, r7
 801341a:	f7f8 f8b7 	bl	800b58c <generate_type_name>
 801341e:	b1b8      	cbz	r0, 8013450 <create_topic+0x84>
 8013420:	6928      	ldr	r0, [r5, #16]
 8013422:	2106      	movs	r1, #6
 8013424:	696b      	ldr	r3, [r5, #20]
 8013426:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801342a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801342e:	f8cd 8000 	str.w	r8, [sp]
 8013432:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8013436:	6811      	ldr	r1, [r2, #0]
 8013438:	6922      	ldr	r2, [r4, #16]
 801343a:	f7f9 fb53 	bl	800cae4 <uxr_buffer_create_topic_bin>
 801343e:	4602      	mov	r2, r0
 8013440:	6928      	ldr	r0, [r5, #16]
 8013442:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013446:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801344a:	f7f8 f86b 	bl	800b524 <run_xrce_session>
 801344e:	b918      	cbnz	r0, 8013458 <create_topic+0x8c>
 8013450:	4620      	mov	r0, r4
 8013452:	2400      	movs	r4, #0
 8013454:	f7f7 ff58 	bl	800b308 <rmw_uxrce_fini_topic_memory>
 8013458:	4620      	mov	r0, r4
 801345a:	b004      	add	sp, #16
 801345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013460:	200134c8 	.word	0x200134c8
 8013464:	200135b8 	.word	0x200135b8
 8013468:	2001357c 	.word	0x2001357c

0801346c <destroy_topic>:
 801346c:	b538      	push	{r3, r4, r5, lr}
 801346e:	6985      	ldr	r5, [r0, #24]
 8013470:	b1dd      	cbz	r5, 80134aa <destroy_topic+0x3e>
 8013472:	4604      	mov	r4, r0
 8013474:	6928      	ldr	r0, [r5, #16]
 8013476:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801347a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801347e:	6922      	ldr	r2, [r4, #16]
 8013480:	6819      	ldr	r1, [r3, #0]
 8013482:	f7f9 fab1 	bl	800c9e8 <uxr_buffer_delete_entity>
 8013486:	4602      	mov	r2, r0
 8013488:	6928      	ldr	r0, [r5, #16]
 801348a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801348e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013492:	f7f8 f847 	bl	800b524 <run_xrce_session>
 8013496:	4603      	mov	r3, r0
 8013498:	4620      	mov	r0, r4
 801349a:	2b00      	cmp	r3, #0
 801349c:	bf14      	ite	ne
 801349e:	2400      	movne	r4, #0
 80134a0:	2402      	moveq	r4, #2
 80134a2:	f7f7 ff31 	bl	800b308 <rmw_uxrce_fini_topic_memory>
 80134a6:	4620      	mov	r0, r4
 80134a8:	bd38      	pop	{r3, r4, r5, pc}
 80134aa:	2401      	movs	r4, #1
 80134ac:	4620      	mov	r0, r4
 80134ae:	bd38      	pop	{r3, r4, r5, pc}

080134b0 <create_node>:
 80134b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134b4:	b083      	sub	sp, #12
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d064      	beq.n	8013584 <create_node+0xd4>
 80134ba:	4606      	mov	r6, r0
 80134bc:	4838      	ldr	r0, [pc, #224]	; (80135a0 <create_node+0xf0>)
 80134be:	460f      	mov	r7, r1
 80134c0:	4690      	mov	r8, r2
 80134c2:	461d      	mov	r5, r3
 80134c4:	f7ff fcae 	bl	8012e24 <get_memory>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d05b      	beq.n	8013584 <create_node+0xd4>
 80134cc:	6884      	ldr	r4, [r0, #8]
 80134ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80134d0:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80134d4:	f104 0518 	add.w	r5, r4, #24
 80134d8:	6123      	str	r3, [r4, #16]
 80134da:	f7ff fd0b 	bl	8012ef4 <rmw_get_implementation_identifier>
 80134de:	f8c4 9020 	str.w	r9, [r4, #32]
 80134e2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80134e6:	4630      	mov	r0, r6
 80134e8:	f7ec fe9c 	bl	8000224 <strlen>
 80134ec:	1c42      	adds	r2, r0, #1
 80134ee:	2a3c      	cmp	r2, #60	; 0x3c
 80134f0:	d840      	bhi.n	8013574 <create_node+0xc4>
 80134f2:	4648      	mov	r0, r9
 80134f4:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80134f8:	4631      	mov	r1, r6
 80134fa:	f003 fc96 	bl	8016e2a <memcpy>
 80134fe:	4638      	mov	r0, r7
 8013500:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8013504:	f7ec fe8e 	bl	8000224 <strlen>
 8013508:	1c42      	adds	r2, r0, #1
 801350a:	2a3c      	cmp	r2, #60	; 0x3c
 801350c:	d832      	bhi.n	8013574 <create_node+0xc4>
 801350e:	4639      	mov	r1, r7
 8013510:	4648      	mov	r0, r9
 8013512:	f003 fc8a 	bl	8016e2a <memcpy>
 8013516:	6923      	ldr	r3, [r4, #16]
 8013518:	2101      	movs	r1, #1
 801351a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801351e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8013522:	1842      	adds	r2, r0, r1
 8013524:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8013528:	f7f9 fc60 	bl	800cdec <uxr_object_id>
 801352c:	6160      	str	r0, [r4, #20]
 801352e:	783b      	ldrb	r3, [r7, #0]
 8013530:	2b2f      	cmp	r3, #47	; 0x2f
 8013532:	d12c      	bne.n	801358e <create_node+0xde>
 8013534:	787b      	ldrb	r3, [r7, #1]
 8013536:	bb53      	cbnz	r3, 801358e <create_node+0xde>
 8013538:	4633      	mov	r3, r6
 801353a:	4a1a      	ldr	r2, [pc, #104]	; (80135a4 <create_node+0xf4>)
 801353c:	213c      	movs	r1, #60	; 0x3c
 801353e:	481a      	ldr	r0, [pc, #104]	; (80135a8 <create_node+0xf8>)
 8013540:	f003 fad0 	bl	8016ae4 <sniprintf>
 8013544:	6920      	ldr	r0, [r4, #16]
 8013546:	2106      	movs	r1, #6
 8013548:	fa1f f388 	uxth.w	r3, r8
 801354c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8013550:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013554:	9101      	str	r1, [sp, #4]
 8013556:	4914      	ldr	r1, [pc, #80]	; (80135a8 <create_node+0xf8>)
 8013558:	9100      	str	r1, [sp, #0]
 801355a:	6811      	ldr	r1, [r2, #0]
 801355c:	6962      	ldr	r2, [r4, #20]
 801355e:	f7f9 fa8f 	bl	800ca80 <uxr_buffer_create_participant_bin>
 8013562:	4602      	mov	r2, r0
 8013564:	6920      	ldr	r0, [r4, #16]
 8013566:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801356a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801356e:	f7f7 ffd9 	bl	800b524 <run_xrce_session>
 8013572:	b918      	cbnz	r0, 801357c <create_node+0xcc>
 8013574:	4628      	mov	r0, r5
 8013576:	2500      	movs	r5, #0
 8013578:	f7f7 fe56 	bl	800b228 <rmw_uxrce_fini_node_memory>
 801357c:	4628      	mov	r0, r5
 801357e:	b003      	add	sp, #12
 8013580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013584:	2500      	movs	r5, #0
 8013586:	4628      	mov	r0, r5
 8013588:	b003      	add	sp, #12
 801358a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801358e:	463b      	mov	r3, r7
 8013590:	4a06      	ldr	r2, [pc, #24]	; (80135ac <create_node+0xfc>)
 8013592:	213c      	movs	r1, #60	; 0x3c
 8013594:	9600      	str	r6, [sp, #0]
 8013596:	4804      	ldr	r0, [pc, #16]	; (80135a8 <create_node+0xf8>)
 8013598:	f003 faa4 	bl	8016ae4 <sniprintf>
 801359c:	e7d2      	b.n	8013544 <create_node+0x94>
 801359e:	bf00      	nop
 80135a0:	20013468 	.word	0x20013468
 80135a4:	08017fbc 	.word	0x08017fbc
 80135a8:	2001361c 	.word	0x2001361c
 80135ac:	0801814c 	.word	0x0801814c

080135b0 <rmw_create_node>:
 80135b0:	468c      	mov	ip, r1
 80135b2:	4611      	mov	r1, r2
 80135b4:	f1bc 0f00 	cmp.w	ip, #0
 80135b8:	d00a      	beq.n	80135d0 <rmw_create_node+0x20>
 80135ba:	f89c 3000 	ldrb.w	r3, [ip]
 80135be:	b13b      	cbz	r3, 80135d0 <rmw_create_node+0x20>
 80135c0:	b132      	cbz	r2, 80135d0 <rmw_create_node+0x20>
 80135c2:	7813      	ldrb	r3, [r2, #0]
 80135c4:	b123      	cbz	r3, 80135d0 <rmw_create_node+0x20>
 80135c6:	4603      	mov	r3, r0
 80135c8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80135ca:	4660      	mov	r0, ip
 80135cc:	f7ff bf70 	b.w	80134b0 <create_node>
 80135d0:	2000      	movs	r0, #0
 80135d2:	4770      	bx	lr

080135d4 <rmw_destroy_node>:
 80135d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d6:	b328      	cbz	r0, 8013624 <rmw_destroy_node+0x50>
 80135d8:	4607      	mov	r7, r0
 80135da:	6800      	ldr	r0, [r0, #0]
 80135dc:	b120      	cbz	r0, 80135e8 <rmw_destroy_node+0x14>
 80135de:	4b37      	ldr	r3, [pc, #220]	; (80136bc <rmw_destroy_node+0xe8>)
 80135e0:	6819      	ldr	r1, [r3, #0]
 80135e2:	f7ec fe15 	bl	8000210 <strcmp>
 80135e6:	b9e8      	cbnz	r0, 8013624 <rmw_destroy_node+0x50>
 80135e8:	687d      	ldr	r5, [r7, #4]
 80135ea:	b1dd      	cbz	r5, 8013624 <rmw_destroy_node+0x50>
 80135ec:	4b34      	ldr	r3, [pc, #208]	; (80136c0 <rmw_destroy_node+0xec>)
 80135ee:	681c      	ldr	r4, [r3, #0]
 80135f0:	2c00      	cmp	r4, #0
 80135f2:	d060      	beq.n	80136b6 <rmw_destroy_node+0xe2>
 80135f4:	2600      	movs	r6, #0
 80135f6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80135fa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80135fe:	429d      	cmp	r5, r3
 8013600:	d013      	beq.n	801362a <rmw_destroy_node+0x56>
 8013602:	2c00      	cmp	r4, #0
 8013604:	d1f7      	bne.n	80135f6 <rmw_destroy_node+0x22>
 8013606:	4b2f      	ldr	r3, [pc, #188]	; (80136c4 <rmw_destroy_node+0xf0>)
 8013608:	681c      	ldr	r4, [r3, #0]
 801360a:	b1c4      	cbz	r4, 801363e <rmw_destroy_node+0x6a>
 801360c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013610:	6a0b      	ldr	r3, [r1, #32]
 8013612:	429d      	cmp	r5, r3
 8013614:	d1f9      	bne.n	801360a <rmw_destroy_node+0x36>
 8013616:	317c      	adds	r1, #124	; 0x7c
 8013618:	4638      	mov	r0, r7
 801361a:	f000 fafd 	bl	8013c18 <rmw_destroy_subscription>
 801361e:	2801      	cmp	r0, #1
 8013620:	4606      	mov	r6, r0
 8013622:	d1f2      	bne.n	801360a <rmw_destroy_node+0x36>
 8013624:	2601      	movs	r6, #1
 8013626:	4630      	mov	r0, r6
 8013628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801362a:	3184      	adds	r1, #132	; 0x84
 801362c:	4638      	mov	r0, r7
 801362e:	f7f7 fc41 	bl	800aeb4 <rmw_destroy_publisher>
 8013632:	2801      	cmp	r0, #1
 8013634:	4606      	mov	r6, r0
 8013636:	d0f5      	beq.n	8013624 <rmw_destroy_node+0x50>
 8013638:	2c00      	cmp	r4, #0
 801363a:	d1dc      	bne.n	80135f6 <rmw_destroy_node+0x22>
 801363c:	e7e3      	b.n	8013606 <rmw_destroy_node+0x32>
 801363e:	4b22      	ldr	r3, [pc, #136]	; (80136c8 <rmw_destroy_node+0xf4>)
 8013640:	681c      	ldr	r4, [r3, #0]
 8013642:	b16c      	cbz	r4, 8013660 <rmw_destroy_node+0x8c>
 8013644:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013648:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801364a:	429d      	cmp	r5, r3
 801364c:	d1f9      	bne.n	8013642 <rmw_destroy_node+0x6e>
 801364e:	317c      	adds	r1, #124	; 0x7c
 8013650:	4638      	mov	r0, r7
 8013652:	f000 f993 	bl	801397c <rmw_destroy_service>
 8013656:	2801      	cmp	r0, #1
 8013658:	4606      	mov	r6, r0
 801365a:	d0e3      	beq.n	8013624 <rmw_destroy_node+0x50>
 801365c:	2c00      	cmp	r4, #0
 801365e:	d1f1      	bne.n	8013644 <rmw_destroy_node+0x70>
 8013660:	4b1a      	ldr	r3, [pc, #104]	; (80136cc <rmw_destroy_node+0xf8>)
 8013662:	681c      	ldr	r4, [r3, #0]
 8013664:	b16c      	cbz	r4, 8013682 <rmw_destroy_node+0xae>
 8013666:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801366a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801366c:	429d      	cmp	r5, r3
 801366e:	d1f9      	bne.n	8013664 <rmw_destroy_node+0x90>
 8013670:	317c      	adds	r1, #124	; 0x7c
 8013672:	4638      	mov	r0, r7
 8013674:	f7ff fbfa 	bl	8012e6c <rmw_destroy_client>
 8013678:	2801      	cmp	r0, #1
 801367a:	4606      	mov	r6, r0
 801367c:	d0d2      	beq.n	8013624 <rmw_destroy_node+0x50>
 801367e:	2c00      	cmp	r4, #0
 8013680:	d1f1      	bne.n	8013666 <rmw_destroy_node+0x92>
 8013682:	6928      	ldr	r0, [r5, #16]
 8013684:	696a      	ldr	r2, [r5, #20]
 8013686:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801368a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801368e:	6819      	ldr	r1, [r3, #0]
 8013690:	f7f9 f9aa 	bl	800c9e8 <uxr_buffer_delete_entity>
 8013694:	4602      	mov	r2, r0
 8013696:	6928      	ldr	r0, [r5, #16]
 8013698:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801369c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80136a0:	f7f7 ff40 	bl	800b524 <run_xrce_session>
 80136a4:	4603      	mov	r3, r0
 80136a6:	4638      	mov	r0, r7
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	bf08      	it	eq
 80136ac:	2602      	moveq	r6, #2
 80136ae:	f7f7 fdbb 	bl	800b228 <rmw_uxrce_fini_node_memory>
 80136b2:	4630      	mov	r0, r6
 80136b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136b6:	4626      	mov	r6, r4
 80136b8:	e7a5      	b.n	8013606 <rmw_destroy_node+0x32>
 80136ba:	bf00      	nop
 80136bc:	080186dc 	.word	0x080186dc
 80136c0:	20013478 	.word	0x20013478
 80136c4:	200134b8 	.word	0x200134b8
 80136c8:	20013488 	.word	0x20013488
 80136cc:	2000e6d8 	.word	0x2000e6d8

080136d0 <rmw_node_get_graph_guard_condition>:
 80136d0:	6843      	ldr	r3, [r0, #4]
 80136d2:	6918      	ldr	r0, [r3, #16]
 80136d4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop

080136dc <rmw_send_request>:
 80136dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136e0:	4604      	mov	r4, r0
 80136e2:	6800      	ldr	r0, [r0, #0]
 80136e4:	b08b      	sub	sp, #44	; 0x2c
 80136e6:	460e      	mov	r6, r1
 80136e8:	4615      	mov	r5, r2
 80136ea:	b128      	cbz	r0, 80136f8 <rmw_send_request+0x1c>
 80136ec:	4b21      	ldr	r3, [pc, #132]	; (8013774 <rmw_send_request+0x98>)
 80136ee:	6819      	ldr	r1, [r3, #0]
 80136f0:	f7ec fd8e 	bl	8000210 <strcmp>
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d139      	bne.n	801376c <rmw_send_request+0x90>
 80136f8:	6864      	ldr	r4, [r4, #4]
 80136fa:	2700      	movs	r7, #0
 80136fc:	6963      	ldr	r3, [r4, #20]
 80136fe:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8013702:	689b      	ldr	r3, [r3, #8]
 8013704:	4798      	blx	r3
 8013706:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801370a:	4630      	mov	r0, r6
 801370c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013710:	4798      	blx	r3
 8013712:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013716:	9000      	str	r0, [sp, #0]
 8013718:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801371c:	6922      	ldr	r2, [r4, #16]
 801371e:	ab02      	add	r3, sp, #8
 8013720:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8013722:	f7fa fe6b 	bl	800e3fc <uxr_prepare_output_stream>
 8013726:	e9c5 0700 	strd	r0, r7, [r5]
 801372a:	b198      	cbz	r0, 8013754 <rmw_send_request+0x78>
 801372c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013730:	a902      	add	r1, sp, #8
 8013732:	4630      	mov	r0, r6
 8013734:	4798      	blx	r3
 8013736:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801373a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801373e:	2b01      	cmp	r3, #1
 8013740:	d00c      	beq.n	801375c <rmw_send_request+0x80>
 8013742:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8013744:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013748:	f7fa f85a 	bl	800d800 <uxr_run_session_until_confirm_delivery>
 801374c:	4638      	mov	r0, r7
 801374e:	b00b      	add	sp, #44	; 0x2c
 8013750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013754:	2001      	movs	r0, #1
 8013756:	b00b      	add	sp, #44	; 0x2c
 8013758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801375c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013760:	f7f9 fc94 	bl	800d08c <uxr_flash_output_streams>
 8013764:	4638      	mov	r0, r7
 8013766:	b00b      	add	sp, #44	; 0x2c
 8013768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801376c:	200c      	movs	r0, #12
 801376e:	b00b      	add	sp, #44	; 0x2c
 8013770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013774:	080186dc 	.word	0x080186dc

08013778 <rmw_take_request>:
 8013778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801377c:	4605      	mov	r5, r0
 801377e:	6800      	ldr	r0, [r0, #0]
 8013780:	b089      	sub	sp, #36	; 0x24
 8013782:	460c      	mov	r4, r1
 8013784:	4690      	mov	r8, r2
 8013786:	461e      	mov	r6, r3
 8013788:	b128      	cbz	r0, 8013796 <rmw_take_request+0x1e>
 801378a:	4b28      	ldr	r3, [pc, #160]	; (801382c <rmw_take_request+0xb4>)
 801378c:	6819      	ldr	r1, [r3, #0]
 801378e:	f7ec fd3f 	bl	8000210 <strcmp>
 8013792:	2800      	cmp	r0, #0
 8013794:	d146      	bne.n	8013824 <rmw_take_request+0xac>
 8013796:	b10e      	cbz	r6, 801379c <rmw_take_request+0x24>
 8013798:	2300      	movs	r3, #0
 801379a:	7033      	strb	r3, [r6, #0]
 801379c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80137a0:	f7f7 fe42 	bl	800b428 <rmw_uxrce_clean_expired_static_input_buffer>
 80137a4:	4648      	mov	r0, r9
 80137a6:	f7f7 fe15 	bl	800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137aa:	4607      	mov	r7, r0
 80137ac:	b3b0      	cbz	r0, 801381c <rmw_take_request+0xa4>
 80137ae:	6885      	ldr	r5, [r0, #8]
 80137b0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80137b4:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 80137b8:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80137bc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80137c0:	7423      	strb	r3, [r4, #16]
 80137c2:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 80137c6:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 80137ca:	f8a4 2011 	strh.w	r2, [r4, #17]
 80137ce:	74e3      	strb	r3, [r4, #19]
 80137d0:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 80137d4:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 80137d8:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 80137dc:	6161      	str	r1, [r4, #20]
 80137de:	61a2      	str	r2, [r4, #24]
 80137e0:	61e3      	str	r3, [r4, #28]
 80137e2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80137e6:	689b      	ldr	r3, [r3, #8]
 80137e8:	4798      	blx	r3
 80137ea:	6844      	ldr	r4, [r0, #4]
 80137ec:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80137f0:	f105 0110 	add.w	r1, r5, #16
 80137f4:	4668      	mov	r0, sp
 80137f6:	f7f9 f883 	bl	800c900 <ucdr_init_buffer>
 80137fa:	4641      	mov	r1, r8
 80137fc:	68e3      	ldr	r3, [r4, #12]
 80137fe:	4668      	mov	r0, sp
 8013800:	4798      	blx	r3
 8013802:	4639      	mov	r1, r7
 8013804:	4604      	mov	r4, r0
 8013806:	480a      	ldr	r0, [pc, #40]	; (8013830 <rmw_take_request+0xb8>)
 8013808:	f7ff fb1c 	bl	8012e44 <put_memory>
 801380c:	b106      	cbz	r6, 8013810 <rmw_take_request+0x98>
 801380e:	7034      	strb	r4, [r6, #0]
 8013810:	f084 0001 	eor.w	r0, r4, #1
 8013814:	b2c0      	uxtb	r0, r0
 8013816:	b009      	add	sp, #36	; 0x24
 8013818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801381c:	2001      	movs	r0, #1
 801381e:	b009      	add	sp, #36	; 0x24
 8013820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013824:	200c      	movs	r0, #12
 8013826:	b009      	add	sp, #36	; 0x24
 8013828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801382c:	080186dc 	.word	0x080186dc
 8013830:	200134a8 	.word	0x200134a8

08013834 <rmw_send_response>:
 8013834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013836:	4605      	mov	r5, r0
 8013838:	6800      	ldr	r0, [r0, #0]
 801383a:	b091      	sub	sp, #68	; 0x44
 801383c:	460c      	mov	r4, r1
 801383e:	4616      	mov	r6, r2
 8013840:	b128      	cbz	r0, 801384e <rmw_send_response+0x1a>
 8013842:	4b29      	ldr	r3, [pc, #164]	; (80138e8 <rmw_send_response+0xb4>)
 8013844:	6819      	ldr	r1, [r3, #0]
 8013846:	f7ec fce3 	bl	8000210 <strcmp>
 801384a:	2800      	cmp	r0, #0
 801384c:	d141      	bne.n	80138d2 <rmw_send_response+0x9e>
 801384e:	686d      	ldr	r5, [r5, #4]
 8013850:	68a1      	ldr	r1, [r4, #8]
 8013852:	6860      	ldr	r0, [r4, #4]
 8013854:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8013856:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801385a:	9307      	str	r3, [sp, #28]
 801385c:	4623      	mov	r3, r4
 801385e:	9206      	str	r2, [sp, #24]
 8013860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013864:	789b      	ldrb	r3, [r3, #2]
 8013866:	f88d 2017 	strb.w	r2, [sp, #23]
 801386a:	f88d 3016 	strb.w	r3, [sp, #22]
 801386e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013872:	68e2      	ldr	r2, [r4, #12]
 8013874:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013878:	ab02      	add	r3, sp, #8
 801387a:	696c      	ldr	r4, [r5, #20]
 801387c:	c307      	stmia	r3!, {r0, r1, r2}
 801387e:	68e3      	ldr	r3, [r4, #12]
 8013880:	4798      	blx	r3
 8013882:	6844      	ldr	r4, [r0, #4]
 8013884:	4630      	mov	r0, r6
 8013886:	6923      	ldr	r3, [r4, #16]
 8013888:	4798      	blx	r3
 801388a:	f100 0318 	add.w	r3, r0, #24
 801388e:	6938      	ldr	r0, [r7, #16]
 8013890:	9300      	str	r3, [sp, #0]
 8013892:	ab08      	add	r3, sp, #32
 8013894:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013898:	692a      	ldr	r2, [r5, #16]
 801389a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801389c:	f7fa fdae 	bl	800e3fc <uxr_prepare_output_stream>
 80138a0:	b910      	cbnz	r0, 80138a8 <rmw_send_response+0x74>
 80138a2:	2001      	movs	r0, #1
 80138a4:	b011      	add	sp, #68	; 0x44
 80138a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138a8:	a902      	add	r1, sp, #8
 80138aa:	a808      	add	r0, sp, #32
 80138ac:	f7fb fede 	bl	800f66c <uxr_serialize_SampleIdentity>
 80138b0:	68a3      	ldr	r3, [r4, #8]
 80138b2:	a908      	add	r1, sp, #32
 80138b4:	4630      	mov	r0, r6
 80138b6:	4798      	blx	r3
 80138b8:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80138bc:	6938      	ldr	r0, [r7, #16]
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d00a      	beq.n	80138d8 <rmw_send_response+0xa4>
 80138c2:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80138c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80138c8:	f7f9 ff9a 	bl	800d800 <uxr_run_session_until_confirm_delivery>
 80138cc:	2000      	movs	r0, #0
 80138ce:	b011      	add	sp, #68	; 0x44
 80138d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138d2:	200c      	movs	r0, #12
 80138d4:	b011      	add	sp, #68	; 0x44
 80138d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80138dc:	f7f9 fbd6 	bl	800d08c <uxr_flash_output_streams>
 80138e0:	2000      	movs	r0, #0
 80138e2:	b011      	add	sp, #68	; 0x44
 80138e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138e6:	bf00      	nop
 80138e8:	080186dc 	.word	0x080186dc

080138ec <rmw_take_response>:
 80138ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f0:	4604      	mov	r4, r0
 80138f2:	6800      	ldr	r0, [r0, #0]
 80138f4:	b088      	sub	sp, #32
 80138f6:	460f      	mov	r7, r1
 80138f8:	4690      	mov	r8, r2
 80138fa:	461d      	mov	r5, r3
 80138fc:	b120      	cbz	r0, 8013908 <rmw_take_response+0x1c>
 80138fe:	4b1d      	ldr	r3, [pc, #116]	; (8013974 <rmw_take_response+0x88>)
 8013900:	6819      	ldr	r1, [r3, #0]
 8013902:	f7ec fc85 	bl	8000210 <strcmp>
 8013906:	bb68      	cbnz	r0, 8013964 <rmw_take_response+0x78>
 8013908:	b10d      	cbz	r5, 801390e <rmw_take_response+0x22>
 801390a:	2300      	movs	r3, #0
 801390c:	702b      	strb	r3, [r5, #0]
 801390e:	6864      	ldr	r4, [r4, #4]
 8013910:	f7f7 fd8a 	bl	800b428 <rmw_uxrce_clean_expired_static_input_buffer>
 8013914:	4620      	mov	r0, r4
 8013916:	f7f7 fd5d 	bl	800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801391a:	4606      	mov	r6, r0
 801391c:	b330      	cbz	r0, 801396c <rmw_take_response+0x80>
 801391e:	6963      	ldr	r3, [r4, #20]
 8013920:	6884      	ldr	r4, [r0, #8]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8013928:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801392c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8013930:	4798      	blx	r3
 8013932:	6847      	ldr	r7, [r0, #4]
 8013934:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8013938:	f104 0110 	add.w	r1, r4, #16
 801393c:	4668      	mov	r0, sp
 801393e:	f7f8 ffdf 	bl	800c900 <ucdr_init_buffer>
 8013942:	4641      	mov	r1, r8
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	4668      	mov	r0, sp
 8013948:	4798      	blx	r3
 801394a:	4631      	mov	r1, r6
 801394c:	4604      	mov	r4, r0
 801394e:	480a      	ldr	r0, [pc, #40]	; (8013978 <rmw_take_response+0x8c>)
 8013950:	f7ff fa78 	bl	8012e44 <put_memory>
 8013954:	b105      	cbz	r5, 8013958 <rmw_take_response+0x6c>
 8013956:	702c      	strb	r4, [r5, #0]
 8013958:	f084 0001 	eor.w	r0, r4, #1
 801395c:	b2c0      	uxtb	r0, r0
 801395e:	b008      	add	sp, #32
 8013960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013964:	200c      	movs	r0, #12
 8013966:	b008      	add	sp, #32
 8013968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801396c:	2001      	movs	r0, #1
 801396e:	b008      	add	sp, #32
 8013970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013974:	080186dc 	.word	0x080186dc
 8013978:	200134a8 	.word	0x200134a8

0801397c <rmw_destroy_service>:
 801397c:	b570      	push	{r4, r5, r6, lr}
 801397e:	b128      	cbz	r0, 801398c <rmw_destroy_service+0x10>
 8013980:	4604      	mov	r4, r0
 8013982:	6800      	ldr	r0, [r0, #0]
 8013984:	460d      	mov	r5, r1
 8013986:	f7f7 fe47 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 801398a:	b910      	cbnz	r0, 8013992 <rmw_destroy_service+0x16>
 801398c:	2401      	movs	r4, #1
 801398e:	4620      	mov	r0, r4
 8013990:	bd70      	pop	{r4, r5, r6, pc}
 8013992:	6863      	ldr	r3, [r4, #4]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d0f9      	beq.n	801398c <rmw_destroy_service+0x10>
 8013998:	2d00      	cmp	r5, #0
 801399a:	d0f7      	beq.n	801398c <rmw_destroy_service+0x10>
 801399c:	6828      	ldr	r0, [r5, #0]
 801399e:	f7f7 fe3b 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d0f2      	beq.n	801398c <rmw_destroy_service+0x10>
 80139a6:	686e      	ldr	r6, [r5, #4]
 80139a8:	2e00      	cmp	r6, #0
 80139aa:	d0ef      	beq.n	801398c <rmw_destroy_service+0x10>
 80139ac:	6864      	ldr	r4, [r4, #4]
 80139ae:	6932      	ldr	r2, [r6, #16]
 80139b0:	6920      	ldr	r0, [r4, #16]
 80139b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80139b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80139ba:	6819      	ldr	r1, [r3, #0]
 80139bc:	f001 fba2 	bl	8015104 <uxr_buffer_cancel_data>
 80139c0:	4602      	mov	r2, r0
 80139c2:	6920      	ldr	r0, [r4, #16]
 80139c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80139c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80139cc:	f7f7 fdaa 	bl	800b524 <run_xrce_session>
 80139d0:	6920      	ldr	r0, [r4, #16]
 80139d2:	6932      	ldr	r2, [r6, #16]
 80139d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80139d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80139dc:	6819      	ldr	r1, [r3, #0]
 80139de:	f7f9 f803 	bl	800c9e8 <uxr_buffer_delete_entity>
 80139e2:	4602      	mov	r2, r0
 80139e4:	6920      	ldr	r0, [r4, #16]
 80139e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80139ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80139ee:	f7f7 fd99 	bl	800b524 <run_xrce_session>
 80139f2:	4603      	mov	r3, r0
 80139f4:	4628      	mov	r0, r5
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	bf14      	ite	ne
 80139fa:	2400      	movne	r4, #0
 80139fc:	2402      	moveq	r4, #2
 80139fe:	f7f7 fc57 	bl	800b2b0 <rmw_uxrce_fini_service_memory>
 8013a02:	e7c4      	b.n	801398e <rmw_destroy_service+0x12>

08013a04 <rmw_create_subscription>:
 8013a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a08:	b08d      	sub	sp, #52	; 0x34
 8013a0a:	2900      	cmp	r1, #0
 8013a0c:	f000 80d8 	beq.w	8013bc0 <rmw_create_subscription+0x1bc>
 8013a10:	4604      	mov	r4, r0
 8013a12:	2800      	cmp	r0, #0
 8013a14:	f000 80d4 	beq.w	8013bc0 <rmw_create_subscription+0x1bc>
 8013a18:	6800      	ldr	r0, [r0, #0]
 8013a1a:	460e      	mov	r6, r1
 8013a1c:	4615      	mov	r5, r2
 8013a1e:	461f      	mov	r7, r3
 8013a20:	f7f7 fdfa 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 8013a24:	f080 0001 	eor.w	r0, r0, #1
 8013a28:	b2c0      	uxtb	r0, r0
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	f040 80c8 	bne.w	8013bc0 <rmw_create_subscription+0x1bc>
 8013a30:	2d00      	cmp	r5, #0
 8013a32:	f000 80c5 	beq.w	8013bc0 <rmw_create_subscription+0x1bc>
 8013a36:	782b      	ldrb	r3, [r5, #0]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	f000 80c1 	beq.w	8013bc0 <rmw_create_subscription+0x1bc>
 8013a3e:	2f00      	cmp	r7, #0
 8013a40:	f000 80be 	beq.w	8013bc0 <rmw_create_subscription+0x1bc>
 8013a44:	4867      	ldr	r0, [pc, #412]	; (8013be4 <rmw_create_subscription+0x1e0>)
 8013a46:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013a4a:	f7ff f9eb 	bl	8012e24 <get_memory>
 8013a4e:	4604      	mov	r4, r0
 8013a50:	2800      	cmp	r0, #0
 8013a52:	f000 80b6 	beq.w	8013bc2 <rmw_create_subscription+0x1be>
 8013a56:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8013a5a:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8013a5e:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8013a62:	f7ff fa47 	bl	8012ef4 <rmw_get_implementation_identifier>
 8013a66:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8013a6a:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8013a6e:	4628      	mov	r0, r5
 8013a70:	f7ec fbd8 	bl	8000224 <strlen>
 8013a74:	3001      	adds	r0, #1
 8013a76:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8013a7a:	283c      	cmp	r0, #60	; 0x3c
 8013a7c:	f200 80a5 	bhi.w	8013bca <rmw_create_subscription+0x1c6>
 8013a80:	462b      	mov	r3, r5
 8013a82:	4a59      	ldr	r2, [pc, #356]	; (8013be8 <rmw_create_subscription+0x1e4>)
 8013a84:	213c      	movs	r1, #60	; 0x3c
 8013a86:	4650      	mov	r0, sl
 8013a88:	f003 f82c 	bl	8016ae4 <sniprintf>
 8013a8c:	4639      	mov	r1, r7
 8013a8e:	2250      	movs	r2, #80	; 0x50
 8013a90:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8013a94:	f8c8 9020 	str.w	r9, [r8, #32]
 8013a98:	f003 f9c7 	bl	8016e2a <memcpy>
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	4953      	ldr	r1, [pc, #332]	; (8013bec <rmw_create_subscription+0x1e8>)
 8013aa0:	f7f7 fdc8 	bl	800b634 <get_message_typesupport_handle>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	f000 8090 	beq.w	8013bca <rmw_create_subscription+0x1c6>
 8013aaa:	6842      	ldr	r2, [r0, #4]
 8013aac:	f8c8 2018 	str.w	r2, [r8, #24]
 8013ab0:	2a00      	cmp	r2, #0
 8013ab2:	f000 808a 	beq.w	8013bca <rmw_create_subscription+0x1c6>
 8013ab6:	4629      	mov	r1, r5
 8013ab8:	463b      	mov	r3, r7
 8013aba:	4648      	mov	r0, r9
 8013abc:	f7ff fc86 	bl	80133cc <create_topic>
 8013ac0:	f8c8 001c 	str.w	r0, [r8, #28]
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	f000 8085 	beq.w	8013bd4 <rmw_create_subscription+0x1d0>
 8013aca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013ace:	2104      	movs	r1, #4
 8013ad0:	2506      	movs	r5, #6
 8013ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ad6:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8013ada:	1c42      	adds	r2, r0, #1
 8013adc:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8013ae0:	f7f9 f984 	bl	800cdec <uxr_object_id>
 8013ae4:	f8c8 0010 	str.w	r0, [r8, #16]
 8013ae8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013aec:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8013af0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013af4:	9500      	str	r5, [sp, #0]
 8013af6:	6819      	ldr	r1, [r3, #0]
 8013af8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013afc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013b00:	f7f9 f856 	bl	800cbb0 <uxr_buffer_create_subscriber_bin>
 8013b04:	4602      	mov	r2, r0
 8013b06:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013b0a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013b0e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013b12:	f7f7 fd07 	bl	800b524 <run_xrce_session>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	d057      	beq.n	8013bca <rmw_create_subscription+0x1c6>
 8013b1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b1e:	4629      	mov	r1, r5
 8013b20:	ae08      	add	r6, sp, #32
 8013b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b26:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8013b2a:	1c42      	adds	r2, r0, #1
 8013b2c:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8013b30:	f7f9 f95c 	bl	800cdec <uxr_object_id>
 8013b34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b38:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	f8c8 0014 	str.w	r0, [r8, #20]
 8013b42:	4630      	mov	r0, r6
 8013b44:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8013b48:	9305      	str	r3, [sp, #20]
 8013b4a:	f7f7 fd07 	bl	800b55c <convert_qos_profile>
 8013b4e:	9503      	str	r5, [sp, #12]
 8013b50:	9b05      	ldr	r3, [sp, #20]
 8013b52:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b56:	9001      	str	r0, [sp, #4]
 8013b58:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8013b5c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013b60:	691b      	ldr	r3, [r3, #16]
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	f8db 1000 	ldr.w	r1, [fp]
 8013b68:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8013b6c:	f7f9 f8c6 	bl	800ccfc <uxr_buffer_create_datareader_bin>
 8013b70:	4602      	mov	r2, r0
 8013b72:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013b76:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013b7a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013b7e:	f7f7 fcd1 	bl	800b524 <run_xrce_session>
 8013b82:	b310      	cbz	r0, 8013bca <rmw_create_subscription+0x1c6>
 8013b84:	7a3b      	ldrb	r3, [r7, #8]
 8013b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b8a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013b8e:	2b02      	cmp	r3, #2
 8013b90:	920a      	str	r2, [sp, #40]	; 0x28
 8013b92:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013b96:	f04f 0200 	mov.w	r2, #0
 8013b9a:	bf08      	it	eq
 8013b9c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8013ba0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ba4:	bf18      	it	ne
 8013ba6:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8013baa:	920b      	str	r2, [sp, #44]	; 0x2c
 8013bac:	9307      	str	r3, [sp, #28]
 8013bae:	ab0a      	add	r3, sp, #40	; 0x28
 8013bb0:	9300      	str	r3, [sp, #0]
 8013bb2:	9b07      	ldr	r3, [sp, #28]
 8013bb4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8013bb8:	6809      	ldr	r1, [r1, #0]
 8013bba:	f001 fa69 	bl	8015090 <uxr_buffer_request_data>
 8013bbe:	e000      	b.n	8013bc2 <rmw_create_subscription+0x1be>
 8013bc0:	2400      	movs	r4, #0
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	b00d      	add	sp, #52	; 0x34
 8013bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bca:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8013bce:	b108      	cbz	r0, 8013bd4 <rmw_create_subscription+0x1d0>
 8013bd0:	f7f7 fb9a 	bl	800b308 <rmw_uxrce_fini_topic_memory>
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	2400      	movs	r4, #0
 8013bd8:	f7f7 fb54 	bl	800b284 <rmw_uxrce_fini_subscription_memory>
 8013bdc:	4620      	mov	r0, r4
 8013bde:	b00d      	add	sp, #52	; 0x34
 8013be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be4:	200134b8 	.word	0x200134b8
 8013be8:	08017fbc 	.word	0x08017fbc
 8013bec:	08017f88 	.word	0x08017f88

08013bf0 <rmw_subscription_get_actual_qos>:
 8013bf0:	b178      	cbz	r0, 8013c12 <rmw_subscription_get_actual_qos+0x22>
 8013bf2:	b510      	push	{r4, lr}
 8013bf4:	fab1 f481 	clz	r4, r1
 8013bf8:	0964      	lsrs	r4, r4, #5
 8013bfa:	b141      	cbz	r1, 8013c0e <rmw_subscription_get_actual_qos+0x1e>
 8013bfc:	6843      	ldr	r3, [r0, #4]
 8013bfe:	2250      	movs	r2, #80	; 0x50
 8013c00:	4608      	mov	r0, r1
 8013c02:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8013c06:	f003 f910 	bl	8016e2a <memcpy>
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	bd10      	pop	{r4, pc}
 8013c0e:	200b      	movs	r0, #11
 8013c10:	bd10      	pop	{r4, pc}
 8013c12:	200b      	movs	r0, #11
 8013c14:	4770      	bx	lr
 8013c16:	bf00      	nop

08013c18 <rmw_destroy_subscription>:
 8013c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1c:	b128      	cbz	r0, 8013c2a <rmw_destroy_subscription+0x12>
 8013c1e:	4604      	mov	r4, r0
 8013c20:	6800      	ldr	r0, [r0, #0]
 8013c22:	460d      	mov	r5, r1
 8013c24:	f7f7 fcf8 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 8013c28:	b918      	cbnz	r0, 8013c32 <rmw_destroy_subscription+0x1a>
 8013c2a:	2401      	movs	r4, #1
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c32:	6863      	ldr	r3, [r4, #4]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d0f8      	beq.n	8013c2a <rmw_destroy_subscription+0x12>
 8013c38:	fab5 f485 	clz	r4, r5
 8013c3c:	0964      	lsrs	r4, r4, #5
 8013c3e:	2d00      	cmp	r5, #0
 8013c40:	d0f3      	beq.n	8013c2a <rmw_destroy_subscription+0x12>
 8013c42:	6828      	ldr	r0, [r5, #0]
 8013c44:	f7f7 fce8 	bl	800b618 <is_uxrce_rmw_identifier_valid>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d0ee      	beq.n	8013c2a <rmw_destroy_subscription+0x12>
 8013c4c:	686e      	ldr	r6, [r5, #4]
 8013c4e:	2e00      	cmp	r6, #0
 8013c50:	d0eb      	beq.n	8013c2a <rmw_destroy_subscription+0x12>
 8013c52:	6a37      	ldr	r7, [r6, #32]
 8013c54:	6972      	ldr	r2, [r6, #20]
 8013c56:	6938      	ldr	r0, [r7, #16]
 8013c58:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013c5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013c60:	6819      	ldr	r1, [r3, #0]
 8013c62:	f001 fa4f 	bl	8015104 <uxr_buffer_cancel_data>
 8013c66:	4602      	mov	r2, r0
 8013c68:	6938      	ldr	r0, [r7, #16]
 8013c6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013c6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013c72:	f7f7 fc57 	bl	800b524 <run_xrce_session>
 8013c76:	69f0      	ldr	r0, [r6, #28]
 8013c78:	f7ff fbf8 	bl	801346c <destroy_topic>
 8013c7c:	6a33      	ldr	r3, [r6, #32]
 8013c7e:	6972      	ldr	r2, [r6, #20]
 8013c80:	6918      	ldr	r0, [r3, #16]
 8013c82:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013c86:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013c8a:	6819      	ldr	r1, [r3, #0]
 8013c8c:	f7f8 feac 	bl	800c9e8 <uxr_buffer_delete_entity>
 8013c90:	6a33      	ldr	r3, [r6, #32]
 8013c92:	4680      	mov	r8, r0
 8013c94:	6932      	ldr	r2, [r6, #16]
 8013c96:	6918      	ldr	r0, [r3, #16]
 8013c98:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013c9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ca0:	6819      	ldr	r1, [r3, #0]
 8013ca2:	f7f8 fea1 	bl	800c9e8 <uxr_buffer_delete_entity>
 8013ca6:	4606      	mov	r6, r0
 8013ca8:	6938      	ldr	r0, [r7, #16]
 8013caa:	4642      	mov	r2, r8
 8013cac:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013cb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013cb4:	f7f7 fc36 	bl	800b524 <run_xrce_session>
 8013cb8:	693f      	ldr	r7, [r7, #16]
 8013cba:	4632      	mov	r2, r6
 8013cbc:	4606      	mov	r6, r0
 8013cbe:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8013cc2:	4638      	mov	r0, r7
 8013cc4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8013cc8:	f7f7 fc2c 	bl	800b524 <run_xrce_session>
 8013ccc:	b126      	cbz	r6, 8013cd8 <rmw_destroy_subscription+0xc0>
 8013cce:	b118      	cbz	r0, 8013cd8 <rmw_destroy_subscription+0xc0>
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	f7f7 fad7 	bl	800b284 <rmw_uxrce_fini_subscription_memory>
 8013cd6:	e7a9      	b.n	8013c2c <rmw_destroy_subscription+0x14>
 8013cd8:	2402      	movs	r4, #2
 8013cda:	e7f9      	b.n	8013cd0 <rmw_destroy_subscription+0xb8>

08013cdc <rmw_take_with_info>:
 8013cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cde:	4604      	mov	r4, r0
 8013ce0:	6800      	ldr	r0, [r0, #0]
 8013ce2:	b089      	sub	sp, #36	; 0x24
 8013ce4:	460f      	mov	r7, r1
 8013ce6:	4615      	mov	r5, r2
 8013ce8:	b128      	cbz	r0, 8013cf6 <rmw_take_with_info+0x1a>
 8013cea:	4b24      	ldr	r3, [pc, #144]	; (8013d7c <rmw_take_with_info+0xa0>)
 8013cec:	6819      	ldr	r1, [r3, #0]
 8013cee:	f7ec fa8f 	bl	8000210 <strcmp>
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	d13e      	bne.n	8013d74 <rmw_take_with_info+0x98>
 8013cf6:	b305      	cbz	r5, 8013d3a <rmw_take_with_info+0x5e>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	6864      	ldr	r4, [r4, #4]
 8013cfc:	702b      	strb	r3, [r5, #0]
 8013cfe:	f7f7 fb93 	bl	800b428 <rmw_uxrce_clean_expired_static_input_buffer>
 8013d02:	4620      	mov	r0, r4
 8013d04:	f7f7 fb66 	bl	800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d08:	4606      	mov	r6, r0
 8013d0a:	b1f0      	cbz	r0, 8013d4a <rmw_take_with_info+0x6e>
 8013d0c:	6881      	ldr	r1, [r0, #8]
 8013d0e:	4668      	mov	r0, sp
 8013d10:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013d14:	3110      	adds	r1, #16
 8013d16:	f7f8 fdf3 	bl	800c900 <ucdr_init_buffer>
 8013d1a:	69a3      	ldr	r3, [r4, #24]
 8013d1c:	4639      	mov	r1, r7
 8013d1e:	4668      	mov	r0, sp
 8013d20:	68db      	ldr	r3, [r3, #12]
 8013d22:	4798      	blx	r3
 8013d24:	4604      	mov	r4, r0
 8013d26:	4631      	mov	r1, r6
 8013d28:	4815      	ldr	r0, [pc, #84]	; (8013d80 <rmw_take_with_info+0xa4>)
 8013d2a:	f7ff f88b 	bl	8012e44 <put_memory>
 8013d2e:	702c      	strb	r4, [r5, #0]
 8013d30:	f084 0001 	eor.w	r0, r4, #1
 8013d34:	b2c0      	uxtb	r0, r0
 8013d36:	b009      	add	sp, #36	; 0x24
 8013d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d3a:	6864      	ldr	r4, [r4, #4]
 8013d3c:	f7f7 fb74 	bl	800b428 <rmw_uxrce_clean_expired_static_input_buffer>
 8013d40:	4620      	mov	r0, r4
 8013d42:	f7f7 fb47 	bl	800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d46:	4605      	mov	r5, r0
 8013d48:	b910      	cbnz	r0, 8013d50 <rmw_take_with_info+0x74>
 8013d4a:	2001      	movs	r0, #1
 8013d4c:	b009      	add	sp, #36	; 0x24
 8013d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d50:	68a9      	ldr	r1, [r5, #8]
 8013d52:	4668      	mov	r0, sp
 8013d54:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013d58:	3110      	adds	r1, #16
 8013d5a:	f7f8 fdd1 	bl	800c900 <ucdr_init_buffer>
 8013d5e:	69a3      	ldr	r3, [r4, #24]
 8013d60:	4639      	mov	r1, r7
 8013d62:	4668      	mov	r0, sp
 8013d64:	68db      	ldr	r3, [r3, #12]
 8013d66:	4798      	blx	r3
 8013d68:	4629      	mov	r1, r5
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	4804      	ldr	r0, [pc, #16]	; (8013d80 <rmw_take_with_info+0xa4>)
 8013d6e:	f7ff f869 	bl	8012e44 <put_memory>
 8013d72:	e7dd      	b.n	8013d30 <rmw_take_with_info+0x54>
 8013d74:	200c      	movs	r0, #12
 8013d76:	b009      	add	sp, #36	; 0x24
 8013d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	080186dc 	.word	0x080186dc
 8013d80:	200134a8 	.word	0x200134a8

08013d84 <rmw_uxrce_transport_init>:
 8013d84:	b508      	push	{r3, lr}
 8013d86:	b108      	cbz	r0, 8013d8c <rmw_uxrce_transport_init+0x8>
 8013d88:	f100 0210 	add.w	r2, r0, #16
 8013d8c:	b139      	cbz	r1, 8013d9e <rmw_uxrce_transport_init+0x1a>
 8013d8e:	6949      	ldr	r1, [r1, #20]
 8013d90:	4610      	mov	r0, r2
 8013d92:	f000 fbfb 	bl	801458c <uxr_init_custom_transport>
 8013d96:	f080 0001 	eor.w	r0, r0, #1
 8013d9a:	b2c0      	uxtb	r0, r0
 8013d9c:	bd08      	pop	{r3, pc}
 8013d9e:	4b04      	ldr	r3, [pc, #16]	; (8013db0 <rmw_uxrce_transport_init+0x2c>)
 8013da0:	4610      	mov	r0, r2
 8013da2:	6859      	ldr	r1, [r3, #4]
 8013da4:	f000 fbf2 	bl	801458c <uxr_init_custom_transport>
 8013da8:	f080 0001 	eor.w	r0, r0, #1
 8013dac:	b2c0      	uxtb	r0, r0
 8013dae:	bd08      	pop	{r3, pc}
 8013db0:	2000e6bc 	.word	0x2000e6bc

08013db4 <rmw_wait>:
 8013db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013db8:	4698      	mov	r8, r3
 8013dba:	ea40 0301 	orr.w	r3, r0, r1
 8013dbe:	b089      	sub	sp, #36	; 0x24
 8013dc0:	ea48 0303 	orr.w	r3, r8, r3
 8013dc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	f000 8106 	beq.w	8013fd8 <rmw_wait+0x224>
 8013dcc:	4605      	mov	r5, r0
 8013dce:	460e      	mov	r6, r1
 8013dd0:	4691      	mov	r9, r2
 8013dd2:	b16c      	cbz	r4, 8013df0 <rmw_wait+0x3c>
 8013dd4:	4ba6      	ldr	r3, [pc, #664]	; (8014070 <rmw_wait+0x2bc>)
 8013dd6:	af04      	add	r7, sp, #16
 8013dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013dda:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013dde:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013de2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013de6:	f7fe fe3f 	bl	8012a68 <rmw_time_equal>
 8013dea:	2800      	cmp	r0, #0
 8013dec:	f000 810b 	beq.w	8014006 <rmw_wait+0x252>
 8013df0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013df4:	f7f7 fb18 	bl	800b428 <rmw_uxrce_clean_expired_static_input_buffer>
 8013df8:	4b9e      	ldr	r3, [pc, #632]	; (8014074 <rmw_wait+0x2c0>)
 8013dfa:	681c      	ldr	r4, [r3, #0]
 8013dfc:	b14c      	cbz	r4, 8013e12 <rmw_wait+0x5e>
 8013dfe:	4623      	mov	r3, r4
 8013e00:	2100      	movs	r1, #0
 8013e02:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013e0a:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1f7      	bne.n	8013e02 <rmw_wait+0x4e>
 8013e12:	f1b9 0f00 	cmp.w	r9, #0
 8013e16:	d011      	beq.n	8013e3c <rmw_wait+0x88>
 8013e18:	f8d9 1000 	ldr.w	r1, [r9]
 8013e1c:	b171      	cbz	r1, 8013e3c <rmw_wait+0x88>
 8013e1e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013e22:	2300      	movs	r3, #0
 8013e24:	2001      	movs	r0, #1
 8013e26:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013e2e:	4299      	cmp	r1, r3
 8013e30:	6912      	ldr	r2, [r2, #16]
 8013e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013e36:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8013e3a:	d1f4      	bne.n	8013e26 <rmw_wait+0x72>
 8013e3c:	f1b8 0f00 	cmp.w	r8, #0
 8013e40:	d011      	beq.n	8013e66 <rmw_wait+0xb2>
 8013e42:	f8d8 1000 	ldr.w	r1, [r8]
 8013e46:	b171      	cbz	r1, 8013e66 <rmw_wait+0xb2>
 8013e48:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	2001      	movs	r0, #1
 8013e50:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013e54:	3301      	adds	r3, #1
 8013e56:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013e58:	4299      	cmp	r1, r3
 8013e5a:	6912      	ldr	r2, [r2, #16]
 8013e5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013e60:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8013e64:	d1f4      	bne.n	8013e50 <rmw_wait+0x9c>
 8013e66:	b185      	cbz	r5, 8013e8a <rmw_wait+0xd6>
 8013e68:	6829      	ldr	r1, [r5, #0]
 8013e6a:	b171      	cbz	r1, 8013e8a <rmw_wait+0xd6>
 8013e6c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013e70:	2300      	movs	r3, #0
 8013e72:	2001      	movs	r0, #1
 8013e74:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013e78:	3301      	adds	r3, #1
 8013e7a:	6a12      	ldr	r2, [r2, #32]
 8013e7c:	4299      	cmp	r1, r3
 8013e7e:	6912      	ldr	r2, [r2, #16]
 8013e80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013e84:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8013e88:	d1f4      	bne.n	8013e74 <rmw_wait+0xc0>
 8013e8a:	b344      	cbz	r4, 8013ede <rmw_wait+0x12a>
 8013e8c:	4622      	mov	r2, r4
 8013e8e:	2300      	movs	r3, #0
 8013e90:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013e94:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8013e98:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8013e9c:	440b      	add	r3, r1
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	2a00      	cmp	r2, #0
 8013ea2:	d1f5      	bne.n	8013e90 <rmw_wait+0xdc>
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d05f      	beq.n	8013f68 <rmw_wait+0x1b4>
 8013ea8:	1c7a      	adds	r2, r7, #1
 8013eaa:	d00d      	beq.n	8013ec8 <rmw_wait+0x114>
 8013eac:	ee07 7a90 	vmov	s15, r7
 8013eb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013eb4:	ee07 3a90 	vmov	s15, r3
 8013eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ec0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013ec4:	ee17 7a90 	vmov	r7, s15
 8013ec8:	68a0      	ldr	r0, [r4, #8]
 8013eca:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8013ece:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	f040 808d 	bne.w	8013ff2 <rmw_wait+0x23e>
 8013ed8:	6864      	ldr	r4, [r4, #4]
 8013eda:	2c00      	cmp	r4, #0
 8013edc:	d1f4      	bne.n	8013ec8 <rmw_wait+0x114>
 8013ede:	f1b9 0f00 	cmp.w	r9, #0
 8013ee2:	f000 80a1 	beq.w	8014028 <rmw_wait+0x274>
 8013ee6:	f8d9 7000 	ldr.w	r7, [r9]
 8013eea:	2f00      	cmp	r7, #0
 8013eec:	f000 80a4 	beq.w	8014038 <rmw_wait+0x284>
 8013ef0:	2400      	movs	r4, #0
 8013ef2:	4627      	mov	r7, r4
 8013ef4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013ef8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013efc:	f7f7 fa6a 	bl	800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d03b      	beq.n	8013f7c <rmw_wait+0x1c8>
 8013f04:	3401      	adds	r4, #1
 8013f06:	f8d9 3000 	ldr.w	r3, [r9]
 8013f0a:	2701      	movs	r7, #1
 8013f0c:	42a3      	cmp	r3, r4
 8013f0e:	d8f1      	bhi.n	8013ef4 <rmw_wait+0x140>
 8013f10:	2701      	movs	r7, #1
 8013f12:	f1b8 0f00 	cmp.w	r8, #0
 8013f16:	d010      	beq.n	8013f3a <rmw_wait+0x186>
 8013f18:	f8d8 3000 	ldr.w	r3, [r8]
 8013f1c:	b16b      	cbz	r3, 8013f3a <rmw_wait+0x186>
 8013f1e:	2400      	movs	r4, #0
 8013f20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f28:	f7f7 fa54 	bl	800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f2c:	b370      	cbz	r0, 8013f8c <rmw_wait+0x1d8>
 8013f2e:	3401      	adds	r4, #1
 8013f30:	f8d8 3000 	ldr.w	r3, [r8]
 8013f34:	2701      	movs	r7, #1
 8013f36:	42a3      	cmp	r3, r4
 8013f38:	d8f2      	bhi.n	8013f20 <rmw_wait+0x16c>
 8013f3a:	2d00      	cmp	r5, #0
 8013f3c:	d035      	beq.n	8013faa <rmw_wait+0x1f6>
 8013f3e:	682b      	ldr	r3, [r5, #0]
 8013f40:	b39b      	cbz	r3, 8013faa <rmw_wait+0x1f6>
 8013f42:	2400      	movs	r4, #0
 8013f44:	686b      	ldr	r3, [r5, #4]
 8013f46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f4a:	f7f7 fa43 	bl	800b3d4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f4e:	b328      	cbz	r0, 8013f9c <rmw_wait+0x1e8>
 8013f50:	3401      	adds	r4, #1
 8013f52:	682b      	ldr	r3, [r5, #0]
 8013f54:	2701      	movs	r7, #1
 8013f56:	42a3      	cmp	r3, r4
 8013f58:	d8f4      	bhi.n	8013f44 <rmw_wait+0x190>
 8013f5a:	2e00      	cmp	r6, #0
 8013f5c:	d03c      	beq.n	8013fd8 <rmw_wait+0x224>
 8013f5e:	6834      	ldr	r4, [r6, #0]
 8013f60:	2c00      	cmp	r4, #0
 8013f62:	d039      	beq.n	8013fd8 <rmw_wait+0x224>
 8013f64:	2701      	movs	r7, #1
 8013f66:	e023      	b.n	8013fb0 <rmw_wait+0x1fc>
 8013f68:	68a0      	ldr	r0, [r4, #8]
 8013f6a:	2100      	movs	r1, #0
 8013f6c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013f70:	f7f9 fc0c 	bl	800d78c <uxr_run_session_timeout>
 8013f74:	6864      	ldr	r4, [r4, #4]
 8013f76:	2c00      	cmp	r4, #0
 8013f78:	d1f6      	bne.n	8013f68 <rmw_wait+0x1b4>
 8013f7a:	e7b0      	b.n	8013ede <rmw_wait+0x12a>
 8013f7c:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013f80:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013f84:	3401      	adds	r4, #1
 8013f86:	42a3      	cmp	r3, r4
 8013f88:	d8b4      	bhi.n	8013ef4 <rmw_wait+0x140>
 8013f8a:	e7c2      	b.n	8013f12 <rmw_wait+0x15e>
 8013f8c:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013f90:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013f94:	3401      	adds	r4, #1
 8013f96:	429c      	cmp	r4, r3
 8013f98:	d3c2      	bcc.n	8013f20 <rmw_wait+0x16c>
 8013f9a:	e7ce      	b.n	8013f3a <rmw_wait+0x186>
 8013f9c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013fa0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013fa4:	3401      	adds	r4, #1
 8013fa6:	42a3      	cmp	r3, r4
 8013fa8:	d8cc      	bhi.n	8013f44 <rmw_wait+0x190>
 8013faa:	b1a6      	cbz	r6, 8013fd6 <rmw_wait+0x222>
 8013fac:	6834      	ldr	r4, [r6, #0]
 8013fae:	b194      	cbz	r4, 8013fd6 <rmw_wait+0x222>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	461d      	mov	r5, r3
 8013fb4:	e004      	b.n	8013fc0 <rmw_wait+0x20c>
 8013fb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	42a3      	cmp	r3, r4
 8013fbe:	d00a      	beq.n	8013fd6 <rmw_wait+0x222>
 8013fc0:	6870      	ldr	r0, [r6, #4]
 8013fc2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013fc6:	7c0a      	ldrb	r2, [r1, #16]
 8013fc8:	2a00      	cmp	r2, #0
 8013fca:	d0f4      	beq.n	8013fb6 <rmw_wait+0x202>
 8013fcc:	3301      	adds	r3, #1
 8013fce:	4617      	mov	r7, r2
 8013fd0:	740d      	strb	r5, [r1, #16]
 8013fd2:	42a3      	cmp	r3, r4
 8013fd4:	d1f4      	bne.n	8013fc0 <rmw_wait+0x20c>
 8013fd6:	b147      	cbz	r7, 8013fea <rmw_wait+0x236>
 8013fd8:	2000      	movs	r0, #0
 8013fda:	b009      	add	sp, #36	; 0x24
 8013fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fe0:	b11e      	cbz	r6, 8013fea <rmw_wait+0x236>
 8013fe2:	6834      	ldr	r4, [r6, #0]
 8013fe4:	462f      	mov	r7, r5
 8013fe6:	2c00      	cmp	r4, #0
 8013fe8:	d1e2      	bne.n	8013fb0 <rmw_wait+0x1fc>
 8013fea:	2002      	movs	r0, #2
 8013fec:	b009      	add	sp, #36	; 0x24
 8013fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ff2:	4639      	mov	r1, r7
 8013ff4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ff8:	f7f9 fbe2 	bl	800d7c0 <uxr_run_session_until_data>
 8013ffc:	6864      	ldr	r4, [r4, #4]
 8013ffe:	2c00      	cmp	r4, #0
 8014000:	f47f af62 	bne.w	8013ec8 <rmw_wait+0x114>
 8014004:	e76b      	b.n	8013ede <rmw_wait+0x12a>
 8014006:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801400a:	f7fe fd83 	bl	8012b14 <rmw_time_total_nsec>
 801400e:	2300      	movs	r3, #0
 8014010:	4a19      	ldr	r2, [pc, #100]	; (8014078 <rmw_wait+0x2c4>)
 8014012:	f7ec f9b5 	bl	8000380 <__aeabi_uldivmod>
 8014016:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801401a:	4607      	mov	r7, r0
 801401c:	f171 0300 	sbcs.w	r3, r1, #0
 8014020:	bfa8      	it	ge
 8014022:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8014026:	e6e5      	b.n	8013df4 <rmw_wait+0x40>
 8014028:	f1b8 0f00 	cmp.w	r8, #0
 801402c:	d00f      	beq.n	801404e <rmw_wait+0x29a>
 801402e:	f8d8 3000 	ldr.w	r3, [r8]
 8014032:	b193      	cbz	r3, 801405a <rmw_wait+0x2a6>
 8014034:	464f      	mov	r7, r9
 8014036:	e772      	b.n	8013f1e <rmw_wait+0x16a>
 8014038:	f1b8 0f00 	cmp.w	r8, #0
 801403c:	d007      	beq.n	801404e <rmw_wait+0x29a>
 801403e:	f8d8 3000 	ldr.w	r3, [r8]
 8014042:	2b00      	cmp	r3, #0
 8014044:	f47f af6b 	bne.w	8013f1e <rmw_wait+0x16a>
 8014048:	b155      	cbz	r5, 8014060 <rmw_wait+0x2ac>
 801404a:	461f      	mov	r7, r3
 801404c:	e777      	b.n	8013f3e <rmw_wait+0x18a>
 801404e:	2d00      	cmp	r5, #0
 8014050:	d0c6      	beq.n	8013fe0 <rmw_wait+0x22c>
 8014052:	682b      	ldr	r3, [r5, #0]
 8014054:	b143      	cbz	r3, 8014068 <rmw_wait+0x2b4>
 8014056:	4647      	mov	r7, r8
 8014058:	e773      	b.n	8013f42 <rmw_wait+0x18e>
 801405a:	b10d      	cbz	r5, 8014060 <rmw_wait+0x2ac>
 801405c:	464f      	mov	r7, r9
 801405e:	e76e      	b.n	8013f3e <rmw_wait+0x18a>
 8014060:	462f      	mov	r7, r5
 8014062:	2e00      	cmp	r6, #0
 8014064:	d1a2      	bne.n	8013fac <rmw_wait+0x1f8>
 8014066:	e7c0      	b.n	8013fea <rmw_wait+0x236>
 8014068:	4647      	mov	r7, r8
 801406a:	2e00      	cmp	r6, #0
 801406c:	d19e      	bne.n	8013fac <rmw_wait+0x1f8>
 801406e:	e7bc      	b.n	8013fea <rmw_wait+0x236>
 8014070:	08017da0 	.word	0x08017da0
 8014074:	20013498 	.word	0x20013498
 8014078:	000f4240 	.word	0x000f4240

0801407c <rmw_create_wait_set>:
 801407c:	b508      	push	{r3, lr}
 801407e:	4803      	ldr	r0, [pc, #12]	; (801408c <rmw_create_wait_set+0x10>)
 8014080:	f7fe fed0 	bl	8012e24 <get_memory>
 8014084:	b108      	cbz	r0, 801408a <rmw_create_wait_set+0xe>
 8014086:	6880      	ldr	r0, [r0, #8]
 8014088:	3010      	adds	r0, #16
 801408a:	bd08      	pop	{r3, pc}
 801408c:	200134d8 	.word	0x200134d8

08014090 <rmw_destroy_wait_set>:
 8014090:	b508      	push	{r3, lr}
 8014092:	4b08      	ldr	r3, [pc, #32]	; (80140b4 <rmw_destroy_wait_set+0x24>)
 8014094:	6819      	ldr	r1, [r3, #0]
 8014096:	b911      	cbnz	r1, 801409e <rmw_destroy_wait_set+0xe>
 8014098:	e00a      	b.n	80140b0 <rmw_destroy_wait_set+0x20>
 801409a:	6849      	ldr	r1, [r1, #4]
 801409c:	b141      	cbz	r1, 80140b0 <rmw_destroy_wait_set+0x20>
 801409e:	688b      	ldr	r3, [r1, #8]
 80140a0:	3310      	adds	r3, #16
 80140a2:	4298      	cmp	r0, r3
 80140a4:	d1f9      	bne.n	801409a <rmw_destroy_wait_set+0xa>
 80140a6:	4803      	ldr	r0, [pc, #12]	; (80140b4 <rmw_destroy_wait_set+0x24>)
 80140a8:	f7fe fecc 	bl	8012e44 <put_memory>
 80140ac:	2000      	movs	r0, #0
 80140ae:	bd08      	pop	{r3, pc}
 80140b0:	2001      	movs	r0, #1
 80140b2:	bd08      	pop	{r3, pc}
 80140b4:	200134d8 	.word	0x200134d8

080140b8 <rmw_uros_epoch_nanos>:
 80140b8:	4b05      	ldr	r3, [pc, #20]	; (80140d0 <rmw_uros_epoch_nanos+0x18>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	b123      	cbz	r3, 80140c8 <rmw_uros_epoch_nanos+0x10>
 80140be:	6898      	ldr	r0, [r3, #8]
 80140c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80140c4:	f7f8 bfd8 	b.w	800d078 <uxr_epoch_nanos>
 80140c8:	2000      	movs	r0, #0
 80140ca:	2100      	movs	r1, #0
 80140cc:	4770      	bx	lr
 80140ce:	bf00      	nop
 80140d0:	20013498 	.word	0x20013498

080140d4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80140d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d8:	6805      	ldr	r5, [r0, #0]
 80140da:	4604      	mov	r4, r0
 80140dc:	460e      	mov	r6, r1
 80140de:	4628      	mov	r0, r5
 80140e0:	f7ec f896 	bl	8000210 <strcmp>
 80140e4:	b1c8      	cbz	r0, 801411a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80140e6:	4b11      	ldr	r3, [pc, #68]	; (801412c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	429d      	cmp	r5, r3
 80140ec:	d112      	bne.n	8014114 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80140ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80140f2:	f8d8 4000 	ldr.w	r4, [r8]
 80140f6:	b16c      	cbz	r4, 8014114 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80140f8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80140fc:	2700      	movs	r7, #0
 80140fe:	3d04      	subs	r5, #4
 8014100:	4631      	mov	r1, r6
 8014102:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014106:	f7ec f883 	bl	8000210 <strcmp>
 801410a:	00bb      	lsls	r3, r7, #2
 801410c:	b140      	cbz	r0, 8014120 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801410e:	3701      	adds	r7, #1
 8014110:	42bc      	cmp	r4, r7
 8014112:	d1f5      	bne.n	8014100 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014114:	2000      	movs	r0, #0
 8014116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801411a:	4620      	mov	r0, r4
 801411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014120:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014128:	58d3      	ldr	r3, [r2, r3]
 801412a:	4718      	bx	r3
 801412c:	200000ac 	.word	0x200000ac

08014130 <std_msgs__msg__Float32__init>:
 8014130:	3800      	subs	r0, #0
 8014132:	bf18      	it	ne
 8014134:	2001      	movne	r0, #1
 8014136:	4770      	bx	lr

08014138 <std_msgs__msg__Float32__fini>:
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop

0801413c <ucdr_serialize_endian_array_char>:
 801413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014140:	4619      	mov	r1, r3
 8014142:	461f      	mov	r7, r3
 8014144:	4605      	mov	r5, r0
 8014146:	4690      	mov	r8, r2
 8014148:	f7f8 fb86 	bl	800c858 <ucdr_check_buffer_available_for>
 801414c:	b9e0      	cbnz	r0, 8014188 <ucdr_serialize_endian_array_char+0x4c>
 801414e:	463e      	mov	r6, r7
 8014150:	e00b      	b.n	801416a <ucdr_serialize_endian_array_char+0x2e>
 8014152:	4441      	add	r1, r8
 8014154:	68a8      	ldr	r0, [r5, #8]
 8014156:	4622      	mov	r2, r4
 8014158:	1b36      	subs	r6, r6, r4
 801415a:	f002 fe66 	bl	8016e2a <memcpy>
 801415e:	68ab      	ldr	r3, [r5, #8]
 8014160:	6928      	ldr	r0, [r5, #16]
 8014162:	4423      	add	r3, r4
 8014164:	4420      	add	r0, r4
 8014166:	60ab      	str	r3, [r5, #8]
 8014168:	6128      	str	r0, [r5, #16]
 801416a:	4631      	mov	r1, r6
 801416c:	2201      	movs	r2, #1
 801416e:	4628      	mov	r0, r5
 8014170:	f7f8 fbfc 	bl	800c96c <ucdr_check_final_buffer_behavior_array>
 8014174:	1bb9      	subs	r1, r7, r6
 8014176:	4604      	mov	r4, r0
 8014178:	2800      	cmp	r0, #0
 801417a:	d1ea      	bne.n	8014152 <ucdr_serialize_endian_array_char+0x16>
 801417c:	2301      	movs	r3, #1
 801417e:	7da8      	ldrb	r0, [r5, #22]
 8014180:	756b      	strb	r3, [r5, #21]
 8014182:	4058      	eors	r0, r3
 8014184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014188:	463a      	mov	r2, r7
 801418a:	4641      	mov	r1, r8
 801418c:	68a8      	ldr	r0, [r5, #8]
 801418e:	f002 fe4c 	bl	8016e2a <memcpy>
 8014192:	68aa      	ldr	r2, [r5, #8]
 8014194:	692b      	ldr	r3, [r5, #16]
 8014196:	443a      	add	r2, r7
 8014198:	443b      	add	r3, r7
 801419a:	60aa      	str	r2, [r5, #8]
 801419c:	612b      	str	r3, [r5, #16]
 801419e:	e7ed      	b.n	801417c <ucdr_serialize_endian_array_char+0x40>

080141a0 <ucdr_deserialize_endian_array_char>:
 80141a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141a4:	4619      	mov	r1, r3
 80141a6:	461f      	mov	r7, r3
 80141a8:	4605      	mov	r5, r0
 80141aa:	4690      	mov	r8, r2
 80141ac:	f7f8 fb54 	bl	800c858 <ucdr_check_buffer_available_for>
 80141b0:	b9e8      	cbnz	r0, 80141ee <ucdr_deserialize_endian_array_char+0x4e>
 80141b2:	463e      	mov	r6, r7
 80141b4:	e00c      	b.n	80141d0 <ucdr_deserialize_endian_array_char+0x30>
 80141b6:	eb08 0003 	add.w	r0, r8, r3
 80141ba:	68a9      	ldr	r1, [r5, #8]
 80141bc:	4622      	mov	r2, r4
 80141be:	1b36      	subs	r6, r6, r4
 80141c0:	f002 fe33 	bl	8016e2a <memcpy>
 80141c4:	68ab      	ldr	r3, [r5, #8]
 80141c6:	6928      	ldr	r0, [r5, #16]
 80141c8:	4423      	add	r3, r4
 80141ca:	4420      	add	r0, r4
 80141cc:	60ab      	str	r3, [r5, #8]
 80141ce:	6128      	str	r0, [r5, #16]
 80141d0:	4631      	mov	r1, r6
 80141d2:	2201      	movs	r2, #1
 80141d4:	4628      	mov	r0, r5
 80141d6:	f7f8 fbc9 	bl	800c96c <ucdr_check_final_buffer_behavior_array>
 80141da:	1bbb      	subs	r3, r7, r6
 80141dc:	4604      	mov	r4, r0
 80141de:	2800      	cmp	r0, #0
 80141e0:	d1e9      	bne.n	80141b6 <ucdr_deserialize_endian_array_char+0x16>
 80141e2:	2301      	movs	r3, #1
 80141e4:	7da8      	ldrb	r0, [r5, #22]
 80141e6:	756b      	strb	r3, [r5, #21]
 80141e8:	4058      	eors	r0, r3
 80141ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ee:	463a      	mov	r2, r7
 80141f0:	68a9      	ldr	r1, [r5, #8]
 80141f2:	4640      	mov	r0, r8
 80141f4:	f002 fe19 	bl	8016e2a <memcpy>
 80141f8:	68aa      	ldr	r2, [r5, #8]
 80141fa:	692b      	ldr	r3, [r5, #16]
 80141fc:	443a      	add	r2, r7
 80141fe:	443b      	add	r3, r7
 8014200:	60aa      	str	r2, [r5, #8]
 8014202:	612b      	str	r3, [r5, #16]
 8014204:	e7ed      	b.n	80141e2 <ucdr_deserialize_endian_array_char+0x42>
 8014206:	bf00      	nop

08014208 <ucdr_serialize_array_uint8_t>:
 8014208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801420c:	4688      	mov	r8, r1
 801420e:	4611      	mov	r1, r2
 8014210:	4617      	mov	r7, r2
 8014212:	4605      	mov	r5, r0
 8014214:	f7f8 fb20 	bl	800c858 <ucdr_check_buffer_available_for>
 8014218:	b9e0      	cbnz	r0, 8014254 <ucdr_serialize_array_uint8_t+0x4c>
 801421a:	463e      	mov	r6, r7
 801421c:	e00b      	b.n	8014236 <ucdr_serialize_array_uint8_t+0x2e>
 801421e:	4441      	add	r1, r8
 8014220:	68a8      	ldr	r0, [r5, #8]
 8014222:	4622      	mov	r2, r4
 8014224:	1b36      	subs	r6, r6, r4
 8014226:	f002 fe00 	bl	8016e2a <memcpy>
 801422a:	68ab      	ldr	r3, [r5, #8]
 801422c:	6928      	ldr	r0, [r5, #16]
 801422e:	4423      	add	r3, r4
 8014230:	4420      	add	r0, r4
 8014232:	60ab      	str	r3, [r5, #8]
 8014234:	6128      	str	r0, [r5, #16]
 8014236:	4631      	mov	r1, r6
 8014238:	2201      	movs	r2, #1
 801423a:	4628      	mov	r0, r5
 801423c:	f7f8 fb96 	bl	800c96c <ucdr_check_final_buffer_behavior_array>
 8014240:	1bb9      	subs	r1, r7, r6
 8014242:	4604      	mov	r4, r0
 8014244:	2800      	cmp	r0, #0
 8014246:	d1ea      	bne.n	801421e <ucdr_serialize_array_uint8_t+0x16>
 8014248:	2301      	movs	r3, #1
 801424a:	7da8      	ldrb	r0, [r5, #22]
 801424c:	756b      	strb	r3, [r5, #21]
 801424e:	4058      	eors	r0, r3
 8014250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014254:	463a      	mov	r2, r7
 8014256:	4641      	mov	r1, r8
 8014258:	68a8      	ldr	r0, [r5, #8]
 801425a:	f002 fde6 	bl	8016e2a <memcpy>
 801425e:	68aa      	ldr	r2, [r5, #8]
 8014260:	692b      	ldr	r3, [r5, #16]
 8014262:	443a      	add	r2, r7
 8014264:	443b      	add	r3, r7
 8014266:	60aa      	str	r2, [r5, #8]
 8014268:	612b      	str	r3, [r5, #16]
 801426a:	e7ed      	b.n	8014248 <ucdr_serialize_array_uint8_t+0x40>

0801426c <ucdr_serialize_endian_array_uint8_t>:
 801426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014270:	4619      	mov	r1, r3
 8014272:	461f      	mov	r7, r3
 8014274:	4605      	mov	r5, r0
 8014276:	4690      	mov	r8, r2
 8014278:	f7f8 faee 	bl	800c858 <ucdr_check_buffer_available_for>
 801427c:	b9e0      	cbnz	r0, 80142b8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801427e:	463e      	mov	r6, r7
 8014280:	e00b      	b.n	801429a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8014282:	4441      	add	r1, r8
 8014284:	68a8      	ldr	r0, [r5, #8]
 8014286:	4622      	mov	r2, r4
 8014288:	1b36      	subs	r6, r6, r4
 801428a:	f002 fdce 	bl	8016e2a <memcpy>
 801428e:	68ab      	ldr	r3, [r5, #8]
 8014290:	6928      	ldr	r0, [r5, #16]
 8014292:	4423      	add	r3, r4
 8014294:	4420      	add	r0, r4
 8014296:	60ab      	str	r3, [r5, #8]
 8014298:	6128      	str	r0, [r5, #16]
 801429a:	4631      	mov	r1, r6
 801429c:	2201      	movs	r2, #1
 801429e:	4628      	mov	r0, r5
 80142a0:	f7f8 fb64 	bl	800c96c <ucdr_check_final_buffer_behavior_array>
 80142a4:	1bb9      	subs	r1, r7, r6
 80142a6:	4604      	mov	r4, r0
 80142a8:	2800      	cmp	r0, #0
 80142aa:	d1ea      	bne.n	8014282 <ucdr_serialize_endian_array_uint8_t+0x16>
 80142ac:	2301      	movs	r3, #1
 80142ae:	7da8      	ldrb	r0, [r5, #22]
 80142b0:	756b      	strb	r3, [r5, #21]
 80142b2:	4058      	eors	r0, r3
 80142b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142b8:	463a      	mov	r2, r7
 80142ba:	4641      	mov	r1, r8
 80142bc:	68a8      	ldr	r0, [r5, #8]
 80142be:	f002 fdb4 	bl	8016e2a <memcpy>
 80142c2:	68aa      	ldr	r2, [r5, #8]
 80142c4:	692b      	ldr	r3, [r5, #16]
 80142c6:	443a      	add	r2, r7
 80142c8:	443b      	add	r3, r7
 80142ca:	60aa      	str	r2, [r5, #8]
 80142cc:	612b      	str	r3, [r5, #16]
 80142ce:	e7ed      	b.n	80142ac <ucdr_serialize_endian_array_uint8_t+0x40>

080142d0 <ucdr_deserialize_array_uint8_t>:
 80142d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142d4:	4688      	mov	r8, r1
 80142d6:	4611      	mov	r1, r2
 80142d8:	4617      	mov	r7, r2
 80142da:	4605      	mov	r5, r0
 80142dc:	f7f8 fabc 	bl	800c858 <ucdr_check_buffer_available_for>
 80142e0:	b9e8      	cbnz	r0, 801431e <ucdr_deserialize_array_uint8_t+0x4e>
 80142e2:	463e      	mov	r6, r7
 80142e4:	e00c      	b.n	8014300 <ucdr_deserialize_array_uint8_t+0x30>
 80142e6:	eb08 0003 	add.w	r0, r8, r3
 80142ea:	68a9      	ldr	r1, [r5, #8]
 80142ec:	4622      	mov	r2, r4
 80142ee:	1b36      	subs	r6, r6, r4
 80142f0:	f002 fd9b 	bl	8016e2a <memcpy>
 80142f4:	68ab      	ldr	r3, [r5, #8]
 80142f6:	6928      	ldr	r0, [r5, #16]
 80142f8:	4423      	add	r3, r4
 80142fa:	4420      	add	r0, r4
 80142fc:	60ab      	str	r3, [r5, #8]
 80142fe:	6128      	str	r0, [r5, #16]
 8014300:	4631      	mov	r1, r6
 8014302:	2201      	movs	r2, #1
 8014304:	4628      	mov	r0, r5
 8014306:	f7f8 fb31 	bl	800c96c <ucdr_check_final_buffer_behavior_array>
 801430a:	1bbb      	subs	r3, r7, r6
 801430c:	4604      	mov	r4, r0
 801430e:	2800      	cmp	r0, #0
 8014310:	d1e9      	bne.n	80142e6 <ucdr_deserialize_array_uint8_t+0x16>
 8014312:	2301      	movs	r3, #1
 8014314:	7da8      	ldrb	r0, [r5, #22]
 8014316:	756b      	strb	r3, [r5, #21]
 8014318:	4058      	eors	r0, r3
 801431a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801431e:	463a      	mov	r2, r7
 8014320:	68a9      	ldr	r1, [r5, #8]
 8014322:	4640      	mov	r0, r8
 8014324:	f002 fd81 	bl	8016e2a <memcpy>
 8014328:	68aa      	ldr	r2, [r5, #8]
 801432a:	692b      	ldr	r3, [r5, #16]
 801432c:	443a      	add	r2, r7
 801432e:	443b      	add	r3, r7
 8014330:	60aa      	str	r2, [r5, #8]
 8014332:	612b      	str	r3, [r5, #16]
 8014334:	e7ed      	b.n	8014312 <ucdr_deserialize_array_uint8_t+0x42>
 8014336:	bf00      	nop

08014338 <ucdr_deserialize_endian_array_uint8_t>:
 8014338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801433c:	4619      	mov	r1, r3
 801433e:	461f      	mov	r7, r3
 8014340:	4605      	mov	r5, r0
 8014342:	4690      	mov	r8, r2
 8014344:	f7f8 fa88 	bl	800c858 <ucdr_check_buffer_available_for>
 8014348:	b9e8      	cbnz	r0, 8014386 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801434a:	463e      	mov	r6, r7
 801434c:	e00c      	b.n	8014368 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801434e:	eb08 0003 	add.w	r0, r8, r3
 8014352:	68a9      	ldr	r1, [r5, #8]
 8014354:	4622      	mov	r2, r4
 8014356:	1b36      	subs	r6, r6, r4
 8014358:	f002 fd67 	bl	8016e2a <memcpy>
 801435c:	68ab      	ldr	r3, [r5, #8]
 801435e:	6928      	ldr	r0, [r5, #16]
 8014360:	4423      	add	r3, r4
 8014362:	4420      	add	r0, r4
 8014364:	60ab      	str	r3, [r5, #8]
 8014366:	6128      	str	r0, [r5, #16]
 8014368:	4631      	mov	r1, r6
 801436a:	2201      	movs	r2, #1
 801436c:	4628      	mov	r0, r5
 801436e:	f7f8 fafd 	bl	800c96c <ucdr_check_final_buffer_behavior_array>
 8014372:	1bbb      	subs	r3, r7, r6
 8014374:	4604      	mov	r4, r0
 8014376:	2800      	cmp	r0, #0
 8014378:	d1e9      	bne.n	801434e <ucdr_deserialize_endian_array_uint8_t+0x16>
 801437a:	2301      	movs	r3, #1
 801437c:	7da8      	ldrb	r0, [r5, #22]
 801437e:	756b      	strb	r3, [r5, #21]
 8014380:	4058      	eors	r0, r3
 8014382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014386:	463a      	mov	r2, r7
 8014388:	68a9      	ldr	r1, [r5, #8]
 801438a:	4640      	mov	r0, r8
 801438c:	f002 fd4d 	bl	8016e2a <memcpy>
 8014390:	68aa      	ldr	r2, [r5, #8]
 8014392:	692b      	ldr	r3, [r5, #16]
 8014394:	443a      	add	r2, r7
 8014396:	443b      	add	r3, r7
 8014398:	60aa      	str	r2, [r5, #8]
 801439a:	612b      	str	r3, [r5, #16]
 801439c:	e7ed      	b.n	801437a <ucdr_deserialize_endian_array_uint8_t+0x42>
 801439e:	bf00      	nop

080143a0 <ucdr_serialize_sequence_char>:
 80143a0:	b570      	push	{r4, r5, r6, lr}
 80143a2:	4615      	mov	r5, r2
 80143a4:	460e      	mov	r6, r1
 80143a6:	7d01      	ldrb	r1, [r0, #20]
 80143a8:	4604      	mov	r4, r0
 80143aa:	f7f7 fc83 	bl	800bcb4 <ucdr_serialize_endian_uint32_t>
 80143ae:	b90d      	cbnz	r5, 80143b4 <ucdr_serialize_sequence_char+0x14>
 80143b0:	2001      	movs	r0, #1
 80143b2:	bd70      	pop	{r4, r5, r6, pc}
 80143b4:	462b      	mov	r3, r5
 80143b6:	4632      	mov	r2, r6
 80143b8:	7d21      	ldrb	r1, [r4, #20]
 80143ba:	4620      	mov	r0, r4
 80143bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143c0:	f7ff bebc 	b.w	801413c <ucdr_serialize_endian_array_char>

080143c4 <ucdr_deserialize_sequence_char>:
 80143c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143c8:	461d      	mov	r5, r3
 80143ca:	4616      	mov	r6, r2
 80143cc:	460f      	mov	r7, r1
 80143ce:	461a      	mov	r2, r3
 80143d0:	7d01      	ldrb	r1, [r0, #20]
 80143d2:	4604      	mov	r4, r0
 80143d4:	f7f7 fd96 	bl	800bf04 <ucdr_deserialize_endian_uint32_t>
 80143d8:	682b      	ldr	r3, [r5, #0]
 80143da:	429e      	cmp	r6, r3
 80143dc:	d201      	bcs.n	80143e2 <ucdr_deserialize_sequence_char+0x1e>
 80143de:	2201      	movs	r2, #1
 80143e0:	75a2      	strb	r2, [r4, #22]
 80143e2:	b913      	cbnz	r3, 80143ea <ucdr_deserialize_sequence_char+0x26>
 80143e4:	2001      	movs	r0, #1
 80143e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ea:	463a      	mov	r2, r7
 80143ec:	7d21      	ldrb	r1, [r4, #20]
 80143ee:	4620      	mov	r0, r4
 80143f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143f4:	f7ff bed4 	b.w	80141a0 <ucdr_deserialize_endian_array_char>

080143f8 <ucdr_serialize_sequence_uint8_t>:
 80143f8:	b570      	push	{r4, r5, r6, lr}
 80143fa:	4615      	mov	r5, r2
 80143fc:	460e      	mov	r6, r1
 80143fe:	7d01      	ldrb	r1, [r0, #20]
 8014400:	4604      	mov	r4, r0
 8014402:	f7f7 fc57 	bl	800bcb4 <ucdr_serialize_endian_uint32_t>
 8014406:	b90d      	cbnz	r5, 801440c <ucdr_serialize_sequence_uint8_t+0x14>
 8014408:	2001      	movs	r0, #1
 801440a:	bd70      	pop	{r4, r5, r6, pc}
 801440c:	462b      	mov	r3, r5
 801440e:	4632      	mov	r2, r6
 8014410:	7d21      	ldrb	r1, [r4, #20]
 8014412:	4620      	mov	r0, r4
 8014414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014418:	f7ff bf28 	b.w	801426c <ucdr_serialize_endian_array_uint8_t>

0801441c <ucdr_deserialize_sequence_uint8_t>:
 801441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014420:	461d      	mov	r5, r3
 8014422:	4616      	mov	r6, r2
 8014424:	460f      	mov	r7, r1
 8014426:	461a      	mov	r2, r3
 8014428:	7d01      	ldrb	r1, [r0, #20]
 801442a:	4604      	mov	r4, r0
 801442c:	f7f7 fd6a 	bl	800bf04 <ucdr_deserialize_endian_uint32_t>
 8014430:	682b      	ldr	r3, [r5, #0]
 8014432:	429e      	cmp	r6, r3
 8014434:	d201      	bcs.n	801443a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8014436:	2201      	movs	r2, #1
 8014438:	75a2      	strb	r2, [r4, #22]
 801443a:	b913      	cbnz	r3, 8014442 <ucdr_deserialize_sequence_uint8_t+0x26>
 801443c:	2001      	movs	r0, #1
 801443e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014442:	463a      	mov	r2, r7
 8014444:	7d21      	ldrb	r1, [r4, #20]
 8014446:	4620      	mov	r0, r4
 8014448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801444c:	f7ff bf74 	b.w	8014338 <ucdr_deserialize_endian_array_uint8_t>

08014450 <ucdr_serialize_string>:
 8014450:	b510      	push	{r4, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	4604      	mov	r4, r0
 8014456:	4608      	mov	r0, r1
 8014458:	9101      	str	r1, [sp, #4]
 801445a:	f7eb fee3 	bl	8000224 <strlen>
 801445e:	4602      	mov	r2, r0
 8014460:	9901      	ldr	r1, [sp, #4]
 8014462:	4620      	mov	r0, r4
 8014464:	3201      	adds	r2, #1
 8014466:	b002      	add	sp, #8
 8014468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801446c:	f7ff bf98 	b.w	80143a0 <ucdr_serialize_sequence_char>

08014470 <ucdr_deserialize_string>:
 8014470:	b500      	push	{lr}
 8014472:	b083      	sub	sp, #12
 8014474:	ab01      	add	r3, sp, #4
 8014476:	f7ff ffa5 	bl	80143c4 <ucdr_deserialize_sequence_char>
 801447a:	b003      	add	sp, #12
 801447c:	f85d fb04 	ldr.w	pc, [sp], #4

08014480 <get_custom_error>:
 8014480:	4b01      	ldr	r3, [pc, #4]	; (8014488 <get_custom_error+0x8>)
 8014482:	7818      	ldrb	r0, [r3, #0]
 8014484:	4770      	bx	lr
 8014486:	bf00      	nop
 8014488:	20013658 	.word	0x20013658

0801448c <recv_custom_msg>:
 801448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014490:	4693      	mov	fp, r2
 8014492:	b089      	sub	sp, #36	; 0x24
 8014494:	2200      	movs	r2, #0
 8014496:	4604      	mov	r4, r0
 8014498:	468a      	mov	sl, r1
 801449a:	9305      	str	r3, [sp, #20]
 801449c:	f88d 201e 	strb.w	r2, [sp, #30]
 80144a0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80144a4:	b322      	cbz	r2, 80144f0 <recv_custom_msg+0x64>
 80144a6:	f200 2902 	addw	r9, r0, #514	; 0x202
 80144aa:	f10d 081f 	add.w	r8, sp, #31
 80144ae:	af05      	add	r7, sp, #20
 80144b0:	f10d 061e 	add.w	r6, sp, #30
 80144b4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80144b8:	e002      	b.n	80144c0 <recv_custom_msg+0x34>
 80144ba:	9b05      	ldr	r3, [sp, #20]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	dd0f      	ble.n	80144e0 <recv_custom_msg+0x54>
 80144c0:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80144c4:	4623      	mov	r3, r4
 80144c6:	4622      	mov	r2, r4
 80144c8:	4648      	mov	r0, r9
 80144ca:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80144ce:	e9cd 5600 	strd	r5, r6, [sp]
 80144d2:	f001 f911 	bl	80156f8 <uxr_read_framed_msg>
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d0ef      	beq.n	80144ba <recv_custom_msg+0x2e>
 80144da:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80144de:	b1b3      	cbz	r3, 801450e <recv_custom_msg+0x82>
 80144e0:	4b0f      	ldr	r3, [pc, #60]	; (8014520 <recv_custom_msg+0x94>)
 80144e2:	2000      	movs	r0, #0
 80144e4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80144e8:	701a      	strb	r2, [r3, #0]
 80144ea:	b009      	add	sp, #36	; 0x24
 80144ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f0:	f10d 021f 	add.w	r2, sp, #31
 80144f4:	4601      	mov	r1, r0
 80144f6:	9200      	str	r2, [sp, #0]
 80144f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144fc:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8014500:	47a8      	blx	r5
 8014502:	2800      	cmp	r0, #0
 8014504:	d0ec      	beq.n	80144e0 <recv_custom_msg+0x54>
 8014506:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d1e8      	bne.n	80144e0 <recv_custom_msg+0x54>
 801450e:	f8cb 0000 	str.w	r0, [fp]
 8014512:	2001      	movs	r0, #1
 8014514:	f8ca 4000 	str.w	r4, [sl]
 8014518:	b009      	add	sp, #36	; 0x24
 801451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801451e:	bf00      	nop
 8014520:	20013658 	.word	0x20013658

08014524 <send_custom_msg>:
 8014524:	b530      	push	{r4, r5, lr}
 8014526:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801452a:	b087      	sub	sp, #28
 801452c:	4614      	mov	r4, r2
 801452e:	b995      	cbnz	r5, 8014556 <send_custom_msg+0x32>
 8014530:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8014534:	f10d 0317 	add.w	r3, sp, #23
 8014538:	47a8      	blx	r5
 801453a:	1e03      	subs	r3, r0, #0
 801453c:	bf18      	it	ne
 801453e:	2301      	movne	r3, #1
 8014540:	42a0      	cmp	r0, r4
 8014542:	bf18      	it	ne
 8014544:	2300      	movne	r3, #0
 8014546:	b91b      	cbnz	r3, 8014550 <send_custom_msg+0x2c>
 8014548:	4a0a      	ldr	r2, [pc, #40]	; (8014574 <send_custom_msg+0x50>)
 801454a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801454e:	7011      	strb	r1, [r2, #0]
 8014550:	4618      	mov	r0, r3
 8014552:	b007      	add	sp, #28
 8014554:	bd30      	pop	{r4, r5, pc}
 8014556:	460b      	mov	r3, r1
 8014558:	2200      	movs	r2, #0
 801455a:	f10d 0117 	add.w	r1, sp, #23
 801455e:	9400      	str	r4, [sp, #0]
 8014560:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014564:	4602      	mov	r2, r0
 8014566:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801456a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801456e:	f000 fee5 	bl	801533c <uxr_write_framed_msg>
 8014572:	e7e2      	b.n	801453a <send_custom_msg+0x16>
 8014574:	20013658 	.word	0x20013658

08014578 <uxr_set_custom_transport_callbacks>:
 8014578:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801457c:	9901      	ldr	r1, [sp, #4]
 801457e:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8014582:	9b00      	ldr	r3, [sp, #0]
 8014584:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop

0801458c <uxr_init_custom_transport>:
 801458c:	b538      	push	{r3, r4, r5, lr}
 801458e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014592:	b303      	cbz	r3, 80145d6 <uxr_init_custom_transport+0x4a>
 8014594:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8014598:	4604      	mov	r4, r0
 801459a:	b1e2      	cbz	r2, 80145d6 <uxr_init_custom_transport+0x4a>
 801459c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80145a0:	b1ca      	cbz	r2, 80145d6 <uxr_init_custom_transport+0x4a>
 80145a2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80145a6:	b1b2      	cbz	r2, 80145d6 <uxr_init_custom_transport+0x4a>
 80145a8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80145ac:	4798      	blx	r3
 80145ae:	4605      	mov	r5, r0
 80145b0:	b188      	cbz	r0, 80145d6 <uxr_init_custom_transport+0x4a>
 80145b2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80145b6:	b98b      	cbnz	r3, 80145dc <uxr_init_custom_transport+0x50>
 80145b8:	4b0b      	ldr	r3, [pc, #44]	; (80145e8 <uxr_init_custom_transport+0x5c>)
 80145ba:	4628      	mov	r0, r5
 80145bc:	490b      	ldr	r1, [pc, #44]	; (80145ec <uxr_init_custom_transport+0x60>)
 80145be:	4a0c      	ldr	r2, [pc, #48]	; (80145f0 <uxr_init_custom_transport+0x64>)
 80145c0:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80145c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145c8:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80145cc:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80145d0:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80145d4:	bd38      	pop	{r3, r4, r5, pc}
 80145d6:	2500      	movs	r5, #0
 80145d8:	4628      	mov	r0, r5
 80145da:	bd38      	pop	{r3, r4, r5, pc}
 80145dc:	2100      	movs	r1, #0
 80145de:	f204 2002 	addw	r0, r4, #514	; 0x202
 80145e2:	f000 fea5 	bl	8015330 <uxr_init_framing_io>
 80145e6:	e7e7      	b.n	80145b8 <uxr_init_custom_transport+0x2c>
 80145e8:	0801448d 	.word	0x0801448d
 80145ec:	08014525 	.word	0x08014525
 80145f0:	08014481 	.word	0x08014481

080145f4 <uxr_close_custom_transport>:
 80145f4:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80145f8:	4718      	bx	r3
 80145fa:	bf00      	nop

080145fc <uxr_init_input_best_effort_stream>:
 80145fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014600:	8003      	strh	r3, [r0, #0]
 8014602:	4770      	bx	lr

08014604 <uxr_reset_input_best_effort_stream>:
 8014604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014608:	8003      	strh	r3, [r0, #0]
 801460a:	4770      	bx	lr

0801460c <uxr_receive_best_effort_message>:
 801460c:	b538      	push	{r3, r4, r5, lr}
 801460e:	4604      	mov	r4, r0
 8014610:	8800      	ldrh	r0, [r0, #0]
 8014612:	460d      	mov	r5, r1
 8014614:	f000 fe74 	bl	8015300 <uxr_seq_num_cmp>
 8014618:	4603      	mov	r3, r0
 801461a:	0fc0      	lsrs	r0, r0, #31
 801461c:	2b00      	cmp	r3, #0
 801461e:	bfb8      	it	lt
 8014620:	8025      	strhlt	r5, [r4, #0]
 8014622:	bd38      	pop	{r3, r4, r5, pc}

08014624 <on_full_input_buffer>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	460c      	mov	r4, r1
 8014628:	4605      	mov	r5, r0
 801462a:	8908      	ldrh	r0, [r1, #8]
 801462c:	682b      	ldr	r3, [r5, #0]
 801462e:	7d26      	ldrb	r6, [r4, #20]
 8014630:	e9d1 1200 	ldrd	r1, r2, [r1]
 8014634:	fbb2 f2f0 	udiv	r2, r2, r0
 8014638:	eba3 0c01 	sub.w	ip, r3, r1
 801463c:	fbbc fcf2 	udiv	ip, ip, r2
 8014640:	f10c 0c01 	add.w	ip, ip, #1
 8014644:	fa1f f38c 	uxth.w	r3, ip
 8014648:	fbb3 fcf0 	udiv	ip, r3, r0
 801464c:	fb00 331c 	mls	r3, r0, ip, r3
 8014650:	b29b      	uxth	r3, r3
 8014652:	fb02 f303 	mul.w	r3, r2, r3
 8014656:	1d18      	adds	r0, r3, #4
 8014658:	4408      	add	r0, r1
 801465a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801465e:	b116      	cbz	r6, 8014666 <on_full_input_buffer+0x42>
 8014660:	2600      	movs	r6, #0
 8014662:	f840 6c04 	str.w	r6, [r0, #-4]
 8014666:	2a03      	cmp	r2, #3
 8014668:	d801      	bhi.n	801466e <on_full_input_buffer+0x4a>
 801466a:	2001      	movs	r0, #1
 801466c:	bd70      	pop	{r4, r5, r6, pc}
 801466e:	3308      	adds	r3, #8
 8014670:	4628      	mov	r0, r5
 8014672:	3a04      	subs	r2, #4
 8014674:	4419      	add	r1, r3
 8014676:	692b      	ldr	r3, [r5, #16]
 8014678:	f7f8 f93a 	bl	800c8f0 <ucdr_init_buffer_origin>
 801467c:	4628      	mov	r0, r5
 801467e:	4622      	mov	r2, r4
 8014680:	4902      	ldr	r1, [pc, #8]	; (801468c <on_full_input_buffer+0x68>)
 8014682:	f7f8 f911 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 8014686:	2000      	movs	r0, #0
 8014688:	bd70      	pop	{r4, r5, r6, pc}
 801468a:	bf00      	nop
 801468c:	08014625 	.word	0x08014625

08014690 <uxr_init_input_reliable_stream>:
 8014690:	b510      	push	{r4, lr}
 8014692:	e9c0 1200 	strd	r1, r2, [r0]
 8014696:	2400      	movs	r4, #0
 8014698:	9a02      	ldr	r2, [sp, #8]
 801469a:	8103      	strh	r3, [r0, #8]
 801469c:	6102      	str	r2, [r0, #16]
 801469e:	7504      	strb	r4, [r0, #20]
 80146a0:	b1c3      	cbz	r3, 80146d4 <uxr_init_input_reliable_stream+0x44>
 80146a2:	600c      	str	r4, [r1, #0]
 80146a4:	8901      	ldrh	r1, [r0, #8]
 80146a6:	2901      	cmp	r1, #1
 80146a8:	d914      	bls.n	80146d4 <uxr_init_input_reliable_stream+0x44>
 80146aa:	f04f 0c01 	mov.w	ip, #1
 80146ae:	6843      	ldr	r3, [r0, #4]
 80146b0:	f10c 0e01 	add.w	lr, ip, #1
 80146b4:	fbbc f2f1 	udiv	r2, ip, r1
 80146b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80146bc:	fb01 c212 	mls	r2, r1, r2, ip
 80146c0:	fa1f fc8e 	uxth.w	ip, lr
 80146c4:	b292      	uxth	r2, r2
 80146c6:	fb02 f303 	mul.w	r3, r2, r3
 80146ca:	6802      	ldr	r2, [r0, #0]
 80146cc:	50d4      	str	r4, [r2, r3]
 80146ce:	8901      	ldrh	r1, [r0, #8]
 80146d0:	4561      	cmp	r1, ip
 80146d2:	d8ec      	bhi.n	80146ae <uxr_init_input_reliable_stream+0x1e>
 80146d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146d8:	60c3      	str	r3, [r0, #12]
 80146da:	bd10      	pop	{r4, pc}

080146dc <uxr_reset_input_reliable_stream>:
 80146dc:	8901      	ldrh	r1, [r0, #8]
 80146de:	b1d9      	cbz	r1, 8014718 <uxr_reset_input_reliable_stream+0x3c>
 80146e0:	b510      	push	{r4, lr}
 80146e2:	f04f 0e00 	mov.w	lr, #0
 80146e6:	46f4      	mov	ip, lr
 80146e8:	4674      	mov	r4, lr
 80146ea:	6843      	ldr	r3, [r0, #4]
 80146ec:	f10e 0e01 	add.w	lr, lr, #1
 80146f0:	fbbc f2f1 	udiv	r2, ip, r1
 80146f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80146f8:	fb01 c212 	mls	r2, r1, r2, ip
 80146fc:	fa1f fc8e 	uxth.w	ip, lr
 8014700:	b292      	uxth	r2, r2
 8014702:	fb02 f303 	mul.w	r3, r2, r3
 8014706:	6802      	ldr	r2, [r0, #0]
 8014708:	50d4      	str	r4, [r2, r3]
 801470a:	8901      	ldrh	r1, [r0, #8]
 801470c:	4561      	cmp	r1, ip
 801470e:	d8ec      	bhi.n	80146ea <uxr_reset_input_reliable_stream+0xe>
 8014710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014714:	60c3      	str	r3, [r0, #12]
 8014716:	bd10      	pop	{r4, pc}
 8014718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801471c:	60c3      	str	r3, [r0, #12]
 801471e:	4770      	bx	lr

08014720 <uxr_receive_reliable_message>:
 8014720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014724:	4604      	mov	r4, r0
 8014726:	460d      	mov	r5, r1
 8014728:	8901      	ldrh	r1, [r0, #8]
 801472a:	4617      	mov	r7, r2
 801472c:	8980      	ldrh	r0, [r0, #12]
 801472e:	4698      	mov	r8, r3
 8014730:	f000 fdde 	bl	80152f0 <uxr_seq_num_add>
 8014734:	4629      	mov	r1, r5
 8014736:	4606      	mov	r6, r0
 8014738:	89a0      	ldrh	r0, [r4, #12]
 801473a:	f000 fde1 	bl	8015300 <uxr_seq_num_cmp>
 801473e:	2800      	cmp	r0, #0
 8014740:	db0a      	blt.n	8014758 <uxr_receive_reliable_message+0x38>
 8014742:	2600      	movs	r6, #0
 8014744:	4629      	mov	r1, r5
 8014746:	89e0      	ldrh	r0, [r4, #14]
 8014748:	f000 fdda 	bl	8015300 <uxr_seq_num_cmp>
 801474c:	2800      	cmp	r0, #0
 801474e:	da00      	bge.n	8014752 <uxr_receive_reliable_message+0x32>
 8014750:	81e5      	strh	r5, [r4, #14]
 8014752:	4630      	mov	r0, r6
 8014754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014758:	4630      	mov	r0, r6
 801475a:	4629      	mov	r1, r5
 801475c:	f000 fdd0 	bl	8015300 <uxr_seq_num_cmp>
 8014760:	2800      	cmp	r0, #0
 8014762:	dbee      	blt.n	8014742 <uxr_receive_reliable_message+0x22>
 8014764:	6923      	ldr	r3, [r4, #16]
 8014766:	4638      	mov	r0, r7
 8014768:	4798      	blx	r3
 801476a:	4681      	mov	r9, r0
 801476c:	2101      	movs	r1, #1
 801476e:	89a0      	ldrh	r0, [r4, #12]
 8014770:	f000 fdbe 	bl	80152f0 <uxr_seq_num_add>
 8014774:	f1b9 0f00 	cmp.w	r9, #0
 8014778:	bf08      	it	eq
 801477a:	4285      	cmpeq	r5, r0
 801477c:	bf0c      	ite	eq
 801477e:	2601      	moveq	r6, #1
 8014780:	2600      	movne	r6, #0
 8014782:	d104      	bne.n	801478e <uxr_receive_reliable_message+0x6e>
 8014784:	2300      	movs	r3, #0
 8014786:	9a08      	ldr	r2, [sp, #32]
 8014788:	81a0      	strh	r0, [r4, #12]
 801478a:	7013      	strb	r3, [r2, #0]
 801478c:	e7da      	b.n	8014744 <uxr_receive_reliable_message+0x24>
 801478e:	8922      	ldrh	r2, [r4, #8]
 8014790:	6863      	ldr	r3, [r4, #4]
 8014792:	fbb5 f0f2 	udiv	r0, r5, r2
 8014796:	fbb3 f3f2 	udiv	r3, r3, r2
 801479a:	fb02 5010 	mls	r0, r2, r0, r5
 801479e:	b280      	uxth	r0, r0
 80147a0:	fb03 f000 	mul.w	r0, r3, r0
 80147a4:	6823      	ldr	r3, [r4, #0]
 80147a6:	3004      	adds	r0, #4
 80147a8:	4418      	add	r0, r3
 80147aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d1c7      	bne.n	8014742 <uxr_receive_reliable_message+0x22>
 80147b2:	4639      	mov	r1, r7
 80147b4:	4642      	mov	r2, r8
 80147b6:	f002 fb38 	bl	8016e2a <memcpy>
 80147ba:	8921      	ldrh	r1, [r4, #8]
 80147bc:	6863      	ldr	r3, [r4, #4]
 80147be:	fbb5 f2f1 	udiv	r2, r5, r1
 80147c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80147c6:	fb01 5212 	mls	r2, r1, r2, r5
 80147ca:	b292      	uxth	r2, r2
 80147cc:	fb02 f303 	mul.w	r3, r2, r3
 80147d0:	6822      	ldr	r2, [r4, #0]
 80147d2:	f842 8003 	str.w	r8, [r2, r3]
 80147d6:	2301      	movs	r3, #1
 80147d8:	9a08      	ldr	r2, [sp, #32]
 80147da:	7013      	strb	r3, [r2, #0]
 80147dc:	f1b9 0f00 	cmp.w	r9, #0
 80147e0:	d0af      	beq.n	8014742 <uxr_receive_reliable_message+0x22>
 80147e2:	89a6      	ldrh	r6, [r4, #12]
 80147e4:	2101      	movs	r1, #1
 80147e6:	4630      	mov	r0, r6
 80147e8:	f000 fd82 	bl	80152f0 <uxr_seq_num_add>
 80147ec:	8921      	ldrh	r1, [r4, #8]
 80147ee:	6863      	ldr	r3, [r4, #4]
 80147f0:	4606      	mov	r6, r0
 80147f2:	fbb0 f2f1 	udiv	r2, r0, r1
 80147f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80147fa:	fb01 0212 	mls	r2, r1, r2, r0
 80147fe:	6820      	ldr	r0, [r4, #0]
 8014800:	b292      	uxth	r2, r2
 8014802:	fb02 f303 	mul.w	r3, r2, r3
 8014806:	3304      	adds	r3, #4
 8014808:	4418      	add	r0, r3
 801480a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d097      	beq.n	8014742 <uxr_receive_reliable_message+0x22>
 8014812:	6923      	ldr	r3, [r4, #16]
 8014814:	4798      	blx	r3
 8014816:	2802      	cmp	r0, #2
 8014818:	d002      	beq.n	8014820 <uxr_receive_reliable_message+0x100>
 801481a:	2801      	cmp	r0, #1
 801481c:	d0e2      	beq.n	80147e4 <uxr_receive_reliable_message+0xc4>
 801481e:	e790      	b.n	8014742 <uxr_receive_reliable_message+0x22>
 8014820:	2601      	movs	r6, #1
 8014822:	e78f      	b.n	8014744 <uxr_receive_reliable_message+0x24>

08014824 <uxr_next_input_reliable_buffer_available>:
 8014824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014828:	4604      	mov	r4, r0
 801482a:	460f      	mov	r7, r1
 801482c:	8980      	ldrh	r0, [r0, #12]
 801482e:	2101      	movs	r1, #1
 8014830:	4690      	mov	r8, r2
 8014832:	f000 fd5d 	bl	80152f0 <uxr_seq_num_add>
 8014836:	8922      	ldrh	r2, [r4, #8]
 8014838:	6866      	ldr	r6, [r4, #4]
 801483a:	fbb0 f3f2 	udiv	r3, r0, r2
 801483e:	fbb6 f6f2 	udiv	r6, r6, r2
 8014842:	fb02 0313 	mls	r3, r2, r3, r0
 8014846:	b29b      	uxth	r3, r3
 8014848:	fb03 f606 	mul.w	r6, r3, r6
 801484c:	6823      	ldr	r3, [r4, #0]
 801484e:	3604      	adds	r6, #4
 8014850:	441e      	add	r6, r3
 8014852:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014856:	f1b9 0f00 	cmp.w	r9, #0
 801485a:	d023      	beq.n	80148a4 <uxr_next_input_reliable_buffer_available+0x80>
 801485c:	4605      	mov	r5, r0
 801485e:	6923      	ldr	r3, [r4, #16]
 8014860:	4630      	mov	r0, r6
 8014862:	4798      	blx	r3
 8014864:	4682      	mov	sl, r0
 8014866:	b300      	cbz	r0, 80148aa <uxr_next_input_reliable_buffer_available+0x86>
 8014868:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801486c:	2101      	movs	r1, #1
 801486e:	4650      	mov	r0, sl
 8014870:	f000 fd3e 	bl	80152f0 <uxr_seq_num_add>
 8014874:	8921      	ldrh	r1, [r4, #8]
 8014876:	4682      	mov	sl, r0
 8014878:	6863      	ldr	r3, [r4, #4]
 801487a:	6820      	ldr	r0, [r4, #0]
 801487c:	fbba f2f1 	udiv	r2, sl, r1
 8014880:	fbb3 f3f1 	udiv	r3, r3, r1
 8014884:	fb01 a212 	mls	r2, r1, r2, sl
 8014888:	b292      	uxth	r2, r2
 801488a:	fb02 f303 	mul.w	r3, r2, r3
 801488e:	3304      	adds	r3, #4
 8014890:	4418      	add	r0, r3
 8014892:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014896:	b12b      	cbz	r3, 80148a4 <uxr_next_input_reliable_buffer_available+0x80>
 8014898:	6923      	ldr	r3, [r4, #16]
 801489a:	4798      	blx	r3
 801489c:	2802      	cmp	r0, #2
 801489e:	d01b      	beq.n	80148d8 <uxr_next_input_reliable_buffer_available+0xb4>
 80148a0:	2801      	cmp	r0, #1
 80148a2:	d0e3      	beq.n	801486c <uxr_next_input_reliable_buffer_available+0x48>
 80148a4:	2000      	movs	r0, #0
 80148a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148aa:	464a      	mov	r2, r9
 80148ac:	4631      	mov	r1, r6
 80148ae:	4638      	mov	r0, r7
 80148b0:	f7f8 f826 	bl	800c900 <ucdr_init_buffer>
 80148b4:	8921      	ldrh	r1, [r4, #8]
 80148b6:	6863      	ldr	r3, [r4, #4]
 80148b8:	2001      	movs	r0, #1
 80148ba:	fbb5 f2f1 	udiv	r2, r5, r1
 80148be:	fbb3 f3f1 	udiv	r3, r3, r1
 80148c2:	fb01 5212 	mls	r2, r1, r2, r5
 80148c6:	b292      	uxth	r2, r2
 80148c8:	fb02 f303 	mul.w	r3, r2, r3
 80148cc:	6822      	ldr	r2, [r4, #0]
 80148ce:	f842 a003 	str.w	sl, [r2, r3]
 80148d2:	81a5      	strh	r5, [r4, #12]
 80148d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148d8:	8920      	ldrh	r0, [r4, #8]
 80148da:	eb06 0108 	add.w	r1, r6, r8
 80148de:	6863      	ldr	r3, [r4, #4]
 80148e0:	eba9 0208 	sub.w	r2, r9, r8
 80148e4:	fbb5 f6f0 	udiv	r6, r5, r0
 80148e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80148ec:	fb00 5516 	mls	r5, r0, r6, r5
 80148f0:	2000      	movs	r0, #0
 80148f2:	b2ad      	uxth	r5, r5
 80148f4:	fb03 f505 	mul.w	r5, r3, r5
 80148f8:	6823      	ldr	r3, [r4, #0]
 80148fa:	5158      	str	r0, [r3, r5]
 80148fc:	4638      	mov	r0, r7
 80148fe:	f7f7 ffff 	bl	800c900 <ucdr_init_buffer>
 8014902:	4638      	mov	r0, r7
 8014904:	4622      	mov	r2, r4
 8014906:	4903      	ldr	r1, [pc, #12]	; (8014914 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014908:	f7f7 ffce 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 801490c:	2001      	movs	r0, #1
 801490e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014912:	e7c8      	b.n	80148a6 <uxr_next_input_reliable_buffer_available+0x82>
 8014914:	08014625 	.word	0x08014625

08014918 <uxr_process_heartbeat>:
 8014918:	b538      	push	{r3, r4, r5, lr}
 801491a:	4611      	mov	r1, r2
 801491c:	4604      	mov	r4, r0
 801491e:	89c0      	ldrh	r0, [r0, #14]
 8014920:	4615      	mov	r5, r2
 8014922:	f000 fced 	bl	8015300 <uxr_seq_num_cmp>
 8014926:	2800      	cmp	r0, #0
 8014928:	bfb8      	it	lt
 801492a:	81e5      	strhlt	r5, [r4, #14]
 801492c:	bd38      	pop	{r3, r4, r5, pc}
 801492e:	bf00      	nop

08014930 <uxr_compute_acknack>:
 8014930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014934:	8903      	ldrh	r3, [r0, #8]
 8014936:	4604      	mov	r4, r0
 8014938:	460f      	mov	r7, r1
 801493a:	8985      	ldrh	r5, [r0, #12]
 801493c:	b1db      	cbz	r3, 8014976 <uxr_compute_acknack+0x46>
 801493e:	4628      	mov	r0, r5
 8014940:	2601      	movs	r6, #1
 8014942:	e004      	b.n	801494e <uxr_compute_acknack+0x1e>
 8014944:	4566      	cmp	r6, ip
 8014946:	f106 0601 	add.w	r6, r6, #1
 801494a:	d214      	bcs.n	8014976 <uxr_compute_acknack+0x46>
 801494c:	89a0      	ldrh	r0, [r4, #12]
 801494e:	b2b1      	uxth	r1, r6
 8014950:	f000 fcce 	bl	80152f0 <uxr_seq_num_add>
 8014954:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014958:	fbb0 f2fc 	udiv	r2, r0, ip
 801495c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014960:	fb0c 0212 	mls	r2, ip, r2, r0
 8014964:	fbb3 f3fc 	udiv	r3, r3, ip
 8014968:	b292      	uxth	r2, r2
 801496a:	fb02 f303 	mul.w	r3, r2, r3
 801496e:	58cb      	ldr	r3, [r1, r3]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1e7      	bne.n	8014944 <uxr_compute_acknack+0x14>
 8014974:	4605      	mov	r5, r0
 8014976:	803d      	strh	r5, [r7, #0]
 8014978:	2101      	movs	r1, #1
 801497a:	89e6      	ldrh	r6, [r4, #14]
 801497c:	4628      	mov	r0, r5
 801497e:	f000 fcbb 	bl	80152f8 <uxr_seq_num_sub>
 8014982:	4601      	mov	r1, r0
 8014984:	4630      	mov	r0, r6
 8014986:	f000 fcb7 	bl	80152f8 <uxr_seq_num_sub>
 801498a:	4606      	mov	r6, r0
 801498c:	b328      	cbz	r0, 80149da <uxr_compute_acknack+0xaa>
 801498e:	f04f 0900 	mov.w	r9, #0
 8014992:	f04f 0801 	mov.w	r8, #1
 8014996:	464d      	mov	r5, r9
 8014998:	fa1f f189 	uxth.w	r1, r9
 801499c:	8838      	ldrh	r0, [r7, #0]
 801499e:	f000 fca7 	bl	80152f0 <uxr_seq_num_add>
 80149a2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80149a6:	6861      	ldr	r1, [r4, #4]
 80149a8:	fa08 fe09 	lsl.w	lr, r8, r9
 80149ac:	6822      	ldr	r2, [r4, #0]
 80149ae:	f109 0901 	add.w	r9, r9, #1
 80149b2:	ea4e 0e05 	orr.w	lr, lr, r5
 80149b6:	fbb0 f3fc 	udiv	r3, r0, ip
 80149ba:	fbb1 f1fc 	udiv	r1, r1, ip
 80149be:	fb03 001c 	mls	r0, r3, ip, r0
 80149c2:	b283      	uxth	r3, r0
 80149c4:	fb01 f303 	mul.w	r3, r1, r3
 80149c8:	58d3      	ldr	r3, [r2, r3]
 80149ca:	b90b      	cbnz	r3, 80149d0 <uxr_compute_acknack+0xa0>
 80149cc:	fa1f f58e 	uxth.w	r5, lr
 80149d0:	454e      	cmp	r6, r9
 80149d2:	d1e1      	bne.n	8014998 <uxr_compute_acknack+0x68>
 80149d4:	4628      	mov	r0, r5
 80149d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149da:	4605      	mov	r5, r0
 80149dc:	4628      	mov	r0, r5
 80149de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149e2:	bf00      	nop

080149e4 <uxr_init_output_best_effort_stream>:
 80149e4:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80149e8:	6001      	str	r1, [r0, #0]
 80149ea:	7303      	strb	r3, [r0, #12]
 80149ec:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80149f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80149f4:	4770      	bx	lr
 80149f6:	bf00      	nop

080149f8 <uxr_reset_output_best_effort_stream>:
 80149f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149fc:	7b03      	ldrb	r3, [r0, #12]
 80149fe:	81c2      	strh	r2, [r0, #14]
 8014a00:	6043      	str	r3, [r0, #4]
 8014a02:	4770      	bx	lr

08014a04 <uxr_prepare_best_effort_buffer_to_write>:
 8014a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a06:	4604      	mov	r4, r0
 8014a08:	b083      	sub	sp, #12
 8014a0a:	6840      	ldr	r0, [r0, #4]
 8014a0c:	460d      	mov	r5, r1
 8014a0e:	4616      	mov	r6, r2
 8014a10:	f7f9 fc32 	bl	800e278 <uxr_submessage_padding>
 8014a14:	6863      	ldr	r3, [r4, #4]
 8014a16:	4418      	add	r0, r3
 8014a18:	68a3      	ldr	r3, [r4, #8]
 8014a1a:	1942      	adds	r2, r0, r5
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	bf2c      	ite	cs
 8014a20:	2701      	movcs	r7, #1
 8014a22:	2700      	movcc	r7, #0
 8014a24:	d202      	bcs.n	8014a2c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014a26:	4638      	mov	r0, r7
 8014a28:	b003      	add	sp, #12
 8014a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a2c:	9000      	str	r0, [sp, #0]
 8014a2e:	2300      	movs	r3, #0
 8014a30:	4630      	mov	r0, r6
 8014a32:	6821      	ldr	r1, [r4, #0]
 8014a34:	f7f7 ff52 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 8014a38:	6861      	ldr	r1, [r4, #4]
 8014a3a:	4638      	mov	r0, r7
 8014a3c:	4429      	add	r1, r5
 8014a3e:	6061      	str	r1, [r4, #4]
 8014a40:	b003      	add	sp, #12
 8014a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014a44 <uxr_prepare_best_effort_buffer_to_send>:
 8014a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a48:	4604      	mov	r4, r0
 8014a4a:	461d      	mov	r5, r3
 8014a4c:	6840      	ldr	r0, [r0, #4]
 8014a4e:	7b23      	ldrb	r3, [r4, #12]
 8014a50:	4298      	cmp	r0, r3
 8014a52:	bf8c      	ite	hi
 8014a54:	2601      	movhi	r6, #1
 8014a56:	2600      	movls	r6, #0
 8014a58:	d802      	bhi.n	8014a60 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a60:	4688      	mov	r8, r1
 8014a62:	89e0      	ldrh	r0, [r4, #14]
 8014a64:	2101      	movs	r1, #1
 8014a66:	4617      	mov	r7, r2
 8014a68:	f000 fc42 	bl	80152f0 <uxr_seq_num_add>
 8014a6c:	6823      	ldr	r3, [r4, #0]
 8014a6e:	81e0      	strh	r0, [r4, #14]
 8014a70:	8028      	strh	r0, [r5, #0]
 8014a72:	4630      	mov	r0, r6
 8014a74:	f8c8 3000 	str.w	r3, [r8]
 8014a78:	6863      	ldr	r3, [r4, #4]
 8014a7a:	603b      	str	r3, [r7, #0]
 8014a7c:	7b23      	ldrb	r3, [r4, #12]
 8014a7e:	6063      	str	r3, [r4, #4]
 8014a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a84 <on_full_output_buffer>:
 8014a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a86:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8014a8a:	460c      	mov	r4, r1
 8014a8c:	6803      	ldr	r3, [r0, #0]
 8014a8e:	4605      	mov	r5, r0
 8014a90:	7b26      	ldrb	r6, [r4, #12]
 8014a92:	e9d1 1200 	ldrd	r1, r2, [r1]
 8014a96:	fbb2 f2fc 	udiv	r2, r2, ip
 8014a9a:	eba3 0e01 	sub.w	lr, r3, r1
 8014a9e:	6903      	ldr	r3, [r0, #16]
 8014aa0:	fbbe fef2 	udiv	lr, lr, r2
 8014aa4:	f10e 0e01 	add.w	lr, lr, #1
 8014aa8:	fa1f fe8e 	uxth.w	lr, lr
 8014aac:	fbbe f7fc 	udiv	r7, lr, ip
 8014ab0:	fb0c ec17 	mls	ip, ip, r7, lr
 8014ab4:	fa1f fc8c 	uxth.w	ip, ip
 8014ab8:	fb02 fc0c 	mul.w	ip, r2, ip
 8014abc:	f851 200c 	ldr.w	r2, [r1, ip]
 8014ac0:	44b4      	add	ip, r6
 8014ac2:	1b92      	subs	r2, r2, r6
 8014ac4:	f10c 0c08 	add.w	ip, ip, #8
 8014ac8:	3a04      	subs	r2, #4
 8014aca:	4461      	add	r1, ip
 8014acc:	f7f7 ff10 	bl	800c8f0 <ucdr_init_buffer_origin>
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	4622      	mov	r2, r4
 8014ad4:	4902      	ldr	r1, [pc, #8]	; (8014ae0 <on_full_output_buffer+0x5c>)
 8014ad6:	f7f7 fee7 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 8014ada:	2000      	movs	r0, #0
 8014adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	08014a85 	.word	0x08014a85

08014ae4 <uxr_init_output_reliable_stream>:
 8014ae4:	b530      	push	{r4, r5, lr}
 8014ae6:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8014aea:	8103      	strh	r3, [r0, #8]
 8014aec:	7304      	strb	r4, [r0, #12]
 8014aee:	e9c0 1200 	strd	r1, r2, [r0]
 8014af2:	b1e3      	cbz	r3, 8014b2e <uxr_init_output_reliable_stream+0x4a>
 8014af4:	600c      	str	r4, [r1, #0]
 8014af6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014afa:	f1bc 0f01 	cmp.w	ip, #1
 8014afe:	d916      	bls.n	8014b2e <uxr_init_output_reliable_stream+0x4a>
 8014b00:	f04f 0e01 	mov.w	lr, #1
 8014b04:	6843      	ldr	r3, [r0, #4]
 8014b06:	f10e 0501 	add.w	r5, lr, #1
 8014b0a:	7b04      	ldrb	r4, [r0, #12]
 8014b0c:	6801      	ldr	r1, [r0, #0]
 8014b0e:	fbbe f2fc 	udiv	r2, lr, ip
 8014b12:	fbb3 f3fc 	udiv	r3, r3, ip
 8014b16:	fb0c e212 	mls	r2, ip, r2, lr
 8014b1a:	fa1f fe85 	uxth.w	lr, r5
 8014b1e:	b292      	uxth	r2, r2
 8014b20:	fb02 f303 	mul.w	r3, r2, r3
 8014b24:	50cc      	str	r4, [r1, r3]
 8014b26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014b2a:	45f4      	cmp	ip, lr
 8014b2c:	d8ea      	bhi.n	8014b04 <uxr_init_output_reliable_stream+0x20>
 8014b2e:	4b07      	ldr	r3, [pc, #28]	; (8014b4c <uxr_init_output_reliable_stream+0x68>)
 8014b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014b38:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8014b3c:	f8c0 300e 	str.w	r3, [r0, #14]
 8014b40:	2300      	movs	r3, #0
 8014b42:	8242      	strh	r2, [r0, #18]
 8014b44:	8403      	strh	r3, [r0, #32]
 8014b46:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8014b4a:	bd30      	pop	{r4, r5, pc}
 8014b4c:	ffff0000 	.word	0xffff0000

08014b50 <uxr_reset_output_reliable_stream>:
 8014b50:	8901      	ldrh	r1, [r0, #8]
 8014b52:	b510      	push	{r4, lr}
 8014b54:	b1b1      	cbz	r1, 8014b84 <uxr_reset_output_reliable_stream+0x34>
 8014b56:	f04f 0e00 	mov.w	lr, #0
 8014b5a:	46f4      	mov	ip, lr
 8014b5c:	6843      	ldr	r3, [r0, #4]
 8014b5e:	f10e 0e01 	add.w	lr, lr, #1
 8014b62:	7b04      	ldrb	r4, [r0, #12]
 8014b64:	fbbc f2f1 	udiv	r2, ip, r1
 8014b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b6c:	fb01 c212 	mls	r2, r1, r2, ip
 8014b70:	fa1f fc8e 	uxth.w	ip, lr
 8014b74:	b292      	uxth	r2, r2
 8014b76:	fb02 f303 	mul.w	r3, r2, r3
 8014b7a:	6802      	ldr	r2, [r0, #0]
 8014b7c:	50d4      	str	r4, [r2, r3]
 8014b7e:	8901      	ldrh	r1, [r0, #8]
 8014b80:	4561      	cmp	r1, ip
 8014b82:	d8eb      	bhi.n	8014b5c <uxr_reset_output_reliable_stream+0xc>
 8014b84:	4b08      	ldr	r3, [pc, #32]	; (8014ba8 <uxr_reset_output_reliable_stream+0x58>)
 8014b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b8a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8014ba0 <uxr_reset_output_reliable_stream+0x50>
 8014b8e:	f8c0 300e 	str.w	r3, [r0, #14]
 8014b92:	2300      	movs	r3, #0
 8014b94:	8242      	strh	r2, [r0, #18]
 8014b96:	8403      	strh	r3, [r0, #32]
 8014b98:	ed80 7b06 	vstr	d7, [r0, #24]
 8014b9c:	bd10      	pop	{r4, pc}
 8014b9e:	bf00      	nop
 8014ba0:	ffffffff 	.word	0xffffffff
 8014ba4:	7fffffff 	.word	0x7fffffff
 8014ba8:	ffff0000 	.word	0xffff0000

08014bac <uxr_prepare_reliable_buffer_to_write>:
 8014bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	b091      	sub	sp, #68	; 0x44
 8014bb4:	8900      	ldrh	r0, [r0, #8]
 8014bb6:	468b      	mov	fp, r1
 8014bb8:	89e6      	ldrh	r6, [r4, #14]
 8014bba:	9204      	str	r2, [sp, #16]
 8014bbc:	6865      	ldr	r5, [r4, #4]
 8014bbe:	6823      	ldr	r3, [r4, #0]
 8014bc0:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014bc4:	fbb6 f2f0 	udiv	r2, r6, r0
 8014bc8:	fbb5 f5f0 	udiv	r5, r5, r0
 8014bcc:	fb00 6212 	mls	r2, r0, r2, r6
 8014bd0:	1f2f      	subs	r7, r5, #4
 8014bd2:	b292      	uxth	r2, r2
 8014bd4:	fb05 3202 	mla	r2, r5, r2, r3
 8014bd8:	1d11      	adds	r1, r2, #4
 8014bda:	f8d2 8000 	ldr.w	r8, [r2]
 8014bde:	9103      	str	r1, [sp, #12]
 8014be0:	2800      	cmp	r0, #0
 8014be2:	f000 814a 	beq.w	8014e7a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8014be6:	f04f 0c00 	mov.w	ip, #0
 8014bea:	46e2      	mov	sl, ip
 8014bec:	4661      	mov	r1, ip
 8014bee:	f10c 0c01 	add.w	ip, ip, #1
 8014bf2:	fbb1 f2f0 	udiv	r2, r1, r0
 8014bf6:	fb00 1212 	mls	r2, r0, r2, r1
 8014bfa:	fa1f f18c 	uxth.w	r1, ip
 8014bfe:	b292      	uxth	r2, r2
 8014c00:	fb05 f202 	mul.w	r2, r5, r2
 8014c04:	589a      	ldr	r2, [r3, r2]
 8014c06:	454a      	cmp	r2, r9
 8014c08:	d103      	bne.n	8014c12 <uxr_prepare_reliable_buffer_to_write+0x66>
 8014c0a:	f10a 0a01 	add.w	sl, sl, #1
 8014c0e:	fa1f fa8a 	uxth.w	sl, sl
 8014c12:	4281      	cmp	r1, r0
 8014c14:	d3eb      	bcc.n	8014bee <uxr_prepare_reliable_buffer_to_write+0x42>
 8014c16:	4640      	mov	r0, r8
 8014c18:	2104      	movs	r1, #4
 8014c1a:	f8cd a014 	str.w	sl, [sp, #20]
 8014c1e:	f7f7 fe73 	bl	800c908 <ucdr_alignment>
 8014c22:	4480      	add	r8, r0
 8014c24:	eb08 020b 	add.w	r2, r8, fp
 8014c28:	42ba      	cmp	r2, r7
 8014c2a:	f240 80ca 	bls.w	8014dc2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014c2e:	7b22      	ldrb	r2, [r4, #12]
 8014c30:	445a      	add	r2, fp
 8014c32:	42ba      	cmp	r2, r7
 8014c34:	f240 80b2 	bls.w	8014d9c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8014c38:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014c3c:	b2bb      	uxth	r3, r7
 8014c3e:	eba2 0209 	sub.w	r2, r2, r9
 8014c42:	441a      	add	r2, r3
 8014c44:	b292      	uxth	r2, r2
 8014c46:	fb0a f902 	mul.w	r9, sl, r2
 8014c4a:	9205      	str	r2, [sp, #20]
 8014c4c:	45d9      	cmp	r9, fp
 8014c4e:	9206      	str	r2, [sp, #24]
 8014c50:	f0c0 80b3 	bcc.w	8014dba <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014c54:	f108 0204 	add.w	r2, r8, #4
 8014c58:	42ba      	cmp	r2, r7
 8014c5a:	f080 80da 	bcs.w	8014e12 <uxr_prepare_reliable_buffer_to_write+0x266>
 8014c5e:	f1a3 0904 	sub.w	r9, r3, #4
 8014c62:	9b05      	ldr	r3, [sp, #20]
 8014c64:	eba9 0908 	sub.w	r9, r9, r8
 8014c68:	fa1f f989 	uxth.w	r9, r9
 8014c6c:	ebab 0b09 	sub.w	fp, fp, r9
 8014c70:	fbbb f2f3 	udiv	r2, fp, r3
 8014c74:	fb03 b312 	mls	r3, r3, r2, fp
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f040 80c4 	bne.w	8014e06 <uxr_prepare_reliable_buffer_to_write+0x25a>
 8014c7e:	b293      	uxth	r3, r2
 8014c80:	4553      	cmp	r3, sl
 8014c82:	f200 809a 	bhi.w	8014dba <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	f000 80f9 	beq.w	8014e7e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014c8c:	f8cd 801c 	str.w	r8, [sp, #28]
 8014c90:	f04f 0a00 	mov.w	sl, #0
 8014c94:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014c98:	f10d 0b20 	add.w	fp, sp, #32
 8014c9c:	9505      	str	r5, [sp, #20]
 8014c9e:	461d      	mov	r5, r3
 8014ca0:	e000      	b.n	8014ca4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8014ca2:	46c1      	mov	r9, r8
 8014ca4:	8922      	ldrh	r2, [r4, #8]
 8014ca6:	4658      	mov	r0, fp
 8014ca8:	6863      	ldr	r3, [r4, #4]
 8014caa:	f10a 0a01 	add.w	sl, sl, #1
 8014cae:	fbb6 f1f2 	udiv	r1, r6, r2
 8014cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cb6:	fb02 6111 	mls	r1, r2, r1, r6
 8014cba:	463a      	mov	r2, r7
 8014cbc:	b289      	uxth	r1, r1
 8014cbe:	fb03 f101 	mul.w	r1, r3, r1
 8014cc2:	6823      	ldr	r3, [r4, #0]
 8014cc4:	3104      	adds	r1, #4
 8014cc6:	4419      	add	r1, r3
 8014cc8:	2300      	movs	r3, #0
 8014cca:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8014cce:	f8cd c000 	str.w	ip, [sp]
 8014cd2:	f7f7 fe03 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 8014cd6:	464a      	mov	r2, r9
 8014cd8:	2300      	movs	r3, #0
 8014cda:	210d      	movs	r1, #13
 8014cdc:	4658      	mov	r0, fp
 8014cde:	f7f9 fa8b 	bl	800e1f8 <uxr_buffer_submessage_header>
 8014ce2:	8921      	ldrh	r1, [r4, #8]
 8014ce4:	6863      	ldr	r3, [r4, #4]
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	fbb6 f2f1 	udiv	r2, r6, r1
 8014cec:	fbb3 f3f1 	udiv	r3, r3, r1
 8014cf0:	fb01 6212 	mls	r2, r1, r2, r6
 8014cf4:	2101      	movs	r1, #1
 8014cf6:	b292      	uxth	r2, r2
 8014cf8:	fb02 f303 	mul.w	r3, r2, r3
 8014cfc:	6822      	ldr	r2, [r4, #0]
 8014cfe:	50d7      	str	r7, [r2, r3]
 8014d00:	f000 faf6 	bl	80152f0 <uxr_seq_num_add>
 8014d04:	4606      	mov	r6, r0
 8014d06:	fa1f f38a 	uxth.w	r3, sl
 8014d0a:	429d      	cmp	r5, r3
 8014d0c:	d8c9      	bhi.n	8014ca2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 8014d0e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014d12:	9d05      	ldr	r5, [sp, #20]
 8014d14:	8920      	ldrh	r0, [r4, #8]
 8014d16:	463a      	mov	r2, r7
 8014d18:	6863      	ldr	r3, [r4, #4]
 8014d1a:	fbb6 f1f0 	udiv	r1, r6, r0
 8014d1e:	fbb3 f3f0 	udiv	r3, r3, r0
 8014d22:	fb00 6111 	mls	r1, r0, r1, r6
 8014d26:	4658      	mov	r0, fp
 8014d28:	b289      	uxth	r1, r1
 8014d2a:	fb01 f303 	mul.w	r3, r1, r3
 8014d2e:	6821      	ldr	r1, [r4, #0]
 8014d30:	3304      	adds	r3, #4
 8014d32:	4419      	add	r1, r3
 8014d34:	2300      	movs	r3, #0
 8014d36:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8014d3a:	9700      	str	r7, [sp, #0]
 8014d3c:	f7f7 fdce 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 8014d40:	9f06      	ldr	r7, [sp, #24]
 8014d42:	4658      	mov	r0, fp
 8014d44:	2302      	movs	r3, #2
 8014d46:	b2ba      	uxth	r2, r7
 8014d48:	210d      	movs	r1, #13
 8014d4a:	f7f9 fa55 	bl	800e1f8 <uxr_buffer_submessage_header>
 8014d4e:	f108 0104 	add.w	r1, r8, #4
 8014d52:	9b03      	ldr	r3, [sp, #12]
 8014d54:	f1a5 0208 	sub.w	r2, r5, #8
 8014d58:	8925      	ldrh	r5, [r4, #8]
 8014d5a:	440b      	add	r3, r1
 8014d5c:	eba2 0208 	sub.w	r2, r2, r8
 8014d60:	fbb6 f0f5 	udiv	r0, r6, r5
 8014d64:	4619      	mov	r1, r3
 8014d66:	6863      	ldr	r3, [r4, #4]
 8014d68:	fb05 6010 	mls	r0, r5, r0, r6
 8014d6c:	fbb3 f3f5 	udiv	r3, r3, r5
 8014d70:	b280      	uxth	r0, r0
 8014d72:	6825      	ldr	r5, [r4, #0]
 8014d74:	fb00 f303 	mul.w	r3, r0, r3
 8014d78:	7b20      	ldrb	r0, [r4, #12]
 8014d7a:	3004      	adds	r0, #4
 8014d7c:	4438      	add	r0, r7
 8014d7e:	50e8      	str	r0, [r5, r3]
 8014d80:	9d04      	ldr	r5, [sp, #16]
 8014d82:	4628      	mov	r0, r5
 8014d84:	f7f7 fdbc 	bl	800c900 <ucdr_init_buffer>
 8014d88:	4628      	mov	r0, r5
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	493d      	ldr	r1, [pc, #244]	; (8014e84 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014d8e:	f7f7 fd8b 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 8014d92:	2001      	movs	r0, #1
 8014d94:	81e6      	strh	r6, [r4, #14]
 8014d96:	b011      	add	sp, #68	; 0x44
 8014d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	89e0      	ldrh	r0, [r4, #14]
 8014da0:	f000 faa6 	bl	80152f0 <uxr_seq_num_add>
 8014da4:	4605      	mov	r5, r0
 8014da6:	8921      	ldrh	r1, [r4, #8]
 8014da8:	8a60      	ldrh	r0, [r4, #18]
 8014daa:	f000 faa1 	bl	80152f0 <uxr_seq_num_add>
 8014dae:	4601      	mov	r1, r0
 8014db0:	4628      	mov	r0, r5
 8014db2:	f000 faa5 	bl	8015300 <uxr_seq_num_cmp>
 8014db6:	2800      	cmp	r0, #0
 8014db8:	dd44      	ble.n	8014e44 <uxr_prepare_reliable_buffer_to_write+0x298>
 8014dba:	2000      	movs	r0, #0
 8014dbc:	b011      	add	sp, #68	; 0x44
 8014dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dc2:	8921      	ldrh	r1, [r4, #8]
 8014dc4:	8a60      	ldrh	r0, [r4, #18]
 8014dc6:	9205      	str	r2, [sp, #20]
 8014dc8:	f000 fa92 	bl	80152f0 <uxr_seq_num_add>
 8014dcc:	4601      	mov	r1, r0
 8014dce:	4630      	mov	r0, r6
 8014dd0:	f000 fa96 	bl	8015300 <uxr_seq_num_cmp>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	9a05      	ldr	r2, [sp, #20]
 8014dd8:	dcef      	bgt.n	8014dba <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014dda:	8925      	ldrh	r5, [r4, #8]
 8014ddc:	e9d4 7300 	ldrd	r7, r3, [r4]
 8014de0:	fbb6 f4f5 	udiv	r4, r6, r5
 8014de4:	fbb3 f3f5 	udiv	r3, r3, r5
 8014de8:	fb05 6414 	mls	r4, r5, r4, r6
 8014dec:	b2a4      	uxth	r4, r4
 8014dee:	fb04 f303 	mul.w	r3, r4, r3
 8014df2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014df6:	50fa      	str	r2, [r7, r3]
 8014df8:	2300      	movs	r3, #0
 8014dfa:	f8cd 8000 	str.w	r8, [sp]
 8014dfe:	f7f7 fd6d 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 8014e02:	2001      	movs	r0, #1
 8014e04:	e7da      	b.n	8014dbc <uxr_prepare_reliable_buffer_to_write+0x210>
 8014e06:	3201      	adds	r2, #1
 8014e08:	9306      	str	r3, [sp, #24]
 8014e0a:	b293      	uxth	r3, r2
 8014e0c:	4553      	cmp	r3, sl
 8014e0e:	d8d4      	bhi.n	8014dba <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014e10:	e739      	b.n	8014c86 <uxr_prepare_reliable_buffer_to_write+0xda>
 8014e12:	4630      	mov	r0, r6
 8014e14:	2101      	movs	r1, #1
 8014e16:	9307      	str	r3, [sp, #28]
 8014e18:	f000 fa6a 	bl	80152f0 <uxr_seq_num_add>
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	8920      	ldrh	r0, [r4, #8]
 8014e20:	6862      	ldr	r2, [r4, #4]
 8014e22:	fbb6 f1f0 	udiv	r1, r6, r0
 8014e26:	fbb2 f2f0 	udiv	r2, r2, r0
 8014e2a:	fb00 6111 	mls	r1, r0, r1, r6
 8014e2e:	b289      	uxth	r1, r1
 8014e30:	fb01 f202 	mul.w	r2, r1, r2
 8014e34:	6821      	ldr	r1, [r4, #0]
 8014e36:	3204      	adds	r2, #4
 8014e38:	188b      	adds	r3, r1, r2
 8014e3a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014e3e:	9303      	str	r3, [sp, #12]
 8014e40:	9b07      	ldr	r3, [sp, #28]
 8014e42:	e70c      	b.n	8014c5e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014e44:	8921      	ldrh	r1, [r4, #8]
 8014e46:	6863      	ldr	r3, [r4, #4]
 8014e48:	9804      	ldr	r0, [sp, #16]
 8014e4a:	fbb5 f2f1 	udiv	r2, r5, r1
 8014e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e52:	fb01 5212 	mls	r2, r1, r2, r5
 8014e56:	6821      	ldr	r1, [r4, #0]
 8014e58:	b292      	uxth	r2, r2
 8014e5a:	fb02 f303 	mul.w	r3, r2, r3
 8014e5e:	7b22      	ldrb	r2, [r4, #12]
 8014e60:	3304      	adds	r3, #4
 8014e62:	445a      	add	r2, fp
 8014e64:	4419      	add	r1, r3
 8014e66:	f841 2c04 	str.w	r2, [r1, #-4]
 8014e6a:	7b23      	ldrb	r3, [r4, #12]
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	2300      	movs	r3, #0
 8014e70:	f7f7 fd34 	bl	800c8dc <ucdr_init_buffer_origin_offset>
 8014e74:	2001      	movs	r0, #1
 8014e76:	81e5      	strh	r5, [r4, #14]
 8014e78:	e7a0      	b.n	8014dbc <uxr_prepare_reliable_buffer_to_write+0x210>
 8014e7a:	4682      	mov	sl, r0
 8014e7c:	e6cb      	b.n	8014c16 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8014e7e:	f10d 0b20 	add.w	fp, sp, #32
 8014e82:	e747      	b.n	8014d14 <uxr_prepare_reliable_buffer_to_write+0x168>
 8014e84:	08014a85 	.word	0x08014a85

08014e88 <uxr_prepare_next_reliable_buffer_to_send>:
 8014e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e8a:	4604      	mov	r4, r0
 8014e8c:	461d      	mov	r5, r3
 8014e8e:	460f      	mov	r7, r1
 8014e90:	8a00      	ldrh	r0, [r0, #16]
 8014e92:	2101      	movs	r1, #1
 8014e94:	4616      	mov	r6, r2
 8014e96:	f000 fa2b 	bl	80152f0 <uxr_seq_num_add>
 8014e9a:	8028      	strh	r0, [r5, #0]
 8014e9c:	8922      	ldrh	r2, [r4, #8]
 8014e9e:	6863      	ldr	r3, [r4, #4]
 8014ea0:	fbb0 f1f2 	udiv	r1, r0, r2
 8014ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ea8:	fb02 0c11 	mls	ip, r2, r1, r0
 8014eac:	89e1      	ldrh	r1, [r4, #14]
 8014eae:	fa1f fc8c 	uxth.w	ip, ip
 8014eb2:	fb0c fc03 	mul.w	ip, ip, r3
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	f10c 0c04 	add.w	ip, ip, #4
 8014ebc:	4463      	add	r3, ip
 8014ebe:	603b      	str	r3, [r7, #0]
 8014ec0:	6823      	ldr	r3, [r4, #0]
 8014ec2:	449c      	add	ip, r3
 8014ec4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014ec8:	6033      	str	r3, [r6, #0]
 8014eca:	f000 fa19 	bl	8015300 <uxr_seq_num_cmp>
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	dd01      	ble.n	8014ed6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014ed2:	2000      	movs	r0, #0
 8014ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ed6:	7b23      	ldrb	r3, [r4, #12]
 8014ed8:	6832      	ldr	r2, [r6, #0]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d9f9      	bls.n	8014ed2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014ede:	8a61      	ldrh	r1, [r4, #18]
 8014ee0:	8a20      	ldrh	r0, [r4, #16]
 8014ee2:	f000 fa09 	bl	80152f8 <uxr_seq_num_sub>
 8014ee6:	8923      	ldrh	r3, [r4, #8]
 8014ee8:	4283      	cmp	r3, r0
 8014eea:	d0f2      	beq.n	8014ed2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014eec:	8828      	ldrh	r0, [r5, #0]
 8014eee:	89e3      	ldrh	r3, [r4, #14]
 8014ef0:	8220      	strh	r0, [r4, #16]
 8014ef2:	4298      	cmp	r0, r3
 8014ef4:	d001      	beq.n	8014efa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014ef6:	2001      	movs	r0, #1
 8014ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014efa:	2101      	movs	r1, #1
 8014efc:	f000 f9f8 	bl	80152f0 <uxr_seq_num_add>
 8014f00:	4603      	mov	r3, r0
 8014f02:	2001      	movs	r0, #1
 8014f04:	81e3      	strh	r3, [r4, #14]
 8014f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f08 <uxr_update_output_stream_heartbeat_timestamp>:
 8014f08:	b570      	push	{r4, r5, r6, lr}
 8014f0a:	8a01      	ldrh	r1, [r0, #16]
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	8a40      	ldrh	r0, [r0, #18]
 8014f10:	4615      	mov	r5, r2
 8014f12:	461e      	mov	r6, r3
 8014f14:	f000 f9f4 	bl	8015300 <uxr_seq_num_cmp>
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	db07      	blt.n	8014f2c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014f24:	2000      	movs	r0, #0
 8014f26:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014f30:	b940      	cbnz	r0, 8014f44 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014f32:	2301      	movs	r3, #1
 8014f34:	f884 3020 	strb.w	r3, [r4, #32]
 8014f38:	3564      	adds	r5, #100	; 0x64
 8014f3a:	f146 0600 	adc.w	r6, r6, #0
 8014f3e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014f42:	bd70      	pop	{r4, r5, r6, pc}
 8014f44:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014f48:	4295      	cmp	r5, r2
 8014f4a:	eb76 0303 	sbcs.w	r3, r6, r3
 8014f4e:	db04      	blt.n	8014f5a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8014f50:	1c43      	adds	r3, r0, #1
 8014f52:	2001      	movs	r0, #1
 8014f54:	f884 3020 	strb.w	r3, [r4, #32]
 8014f58:	e7ee      	b.n	8014f38 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014f5a:	2000      	movs	r0, #0
 8014f5c:	e7ec      	b.n	8014f38 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014f5e:	bf00      	nop

08014f60 <uxr_begin_output_nack_buffer_it>:
 8014f60:	8a40      	ldrh	r0, [r0, #18]
 8014f62:	4770      	bx	lr

08014f64 <uxr_next_reliable_nack_buffer_to_send>:
 8014f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f68:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 8014f6c:	b197      	cbz	r7, 8014f94 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8014f6e:	4680      	mov	r8, r0
 8014f70:	460d      	mov	r5, r1
 8014f72:	4616      	mov	r6, r2
 8014f74:	461c      	mov	r4, r3
 8014f76:	8818      	ldrh	r0, [r3, #0]
 8014f78:	2101      	movs	r1, #1
 8014f7a:	f000 f9b9 	bl	80152f0 <uxr_seq_num_add>
 8014f7e:	8020      	strh	r0, [r4, #0]
 8014f80:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8014f84:	f000 f9bc 	bl	8015300 <uxr_seq_num_cmp>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	dd06      	ble.n	8014f9a <uxr_next_reliable_nack_buffer_to_send+0x36>
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	461f      	mov	r7, r3
 8014f90:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 8014f94:	4638      	mov	r0, r7
 8014f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f9a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8014f9e:	8820      	ldrh	r0, [r4, #0]
 8014fa0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014fa4:	fbb0 f3f2 	udiv	r3, r0, r2
 8014fa8:	fbb1 fcf2 	udiv	ip, r1, r2
 8014fac:	fb02 0313 	mls	r3, r2, r3, r0
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8014fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8014fba:	f10c 0c04 	add.w	ip, ip, #4
 8014fbe:	4463      	add	r3, ip
 8014fc0:	602b      	str	r3, [r5, #0]
 8014fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8014fc6:	4463      	add	r3, ip
 8014fc8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014fcc:	6033      	str	r3, [r6, #0]
 8014fce:	f898 200c 	ldrb.w	r2, [r8, #12]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d0d0      	beq.n	8014f78 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8014fd6:	e7dd      	b.n	8014f94 <uxr_next_reliable_nack_buffer_to_send+0x30>

08014fd8 <uxr_process_acknack>:
 8014fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fda:	4604      	mov	r4, r0
 8014fdc:	460e      	mov	r6, r1
 8014fde:	4610      	mov	r0, r2
 8014fe0:	2101      	movs	r1, #1
 8014fe2:	f000 f989 	bl	80152f8 <uxr_seq_num_sub>
 8014fe6:	8a61      	ldrh	r1, [r4, #18]
 8014fe8:	f000 f986 	bl	80152f8 <uxr_seq_num_sub>
 8014fec:	b1c8      	cbz	r0, 8015022 <uxr_process_acknack+0x4a>
 8014fee:	4605      	mov	r5, r0
 8014ff0:	2700      	movs	r7, #0
 8014ff2:	2101      	movs	r1, #1
 8014ff4:	8a60      	ldrh	r0, [r4, #18]
 8014ff6:	f000 f97b 	bl	80152f0 <uxr_seq_num_add>
 8014ffa:	8923      	ldrh	r3, [r4, #8]
 8014ffc:	6862      	ldr	r2, [r4, #4]
 8014ffe:	3701      	adds	r7, #1
 8015000:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015004:	6821      	ldr	r1, [r4, #0]
 8015006:	42bd      	cmp	r5, r7
 8015008:	8260      	strh	r0, [r4, #18]
 801500a:	fbb0 fef3 	udiv	lr, r0, r3
 801500e:	fbb2 f2f3 	udiv	r2, r2, r3
 8015012:	fb03 031e 	mls	r3, r3, lr, r0
 8015016:	b29b      	uxth	r3, r3
 8015018:	fb02 f303 	mul.w	r3, r2, r3
 801501c:	f841 c003 	str.w	ip, [r1, r3]
 8015020:	d1e7      	bne.n	8014ff2 <uxr_process_acknack+0x1a>
 8015022:	3e00      	subs	r6, #0
 8015024:	f04f 0300 	mov.w	r3, #0
 8015028:	bf18      	it	ne
 801502a:	2601      	movne	r6, #1
 801502c:	f884 3020 	strb.w	r3, [r4, #32]
 8015030:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8015034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015036:	bf00      	nop

08015038 <uxr_is_output_up_to_date>:
 8015038:	8a01      	ldrh	r1, [r0, #16]
 801503a:	8a40      	ldrh	r0, [r0, #18]
 801503c:	b508      	push	{r3, lr}
 801503e:	f000 f95f 	bl	8015300 <uxr_seq_num_cmp>
 8015042:	fab0 f080 	clz	r0, r0
 8015046:	0940      	lsrs	r0, r0, #5
 8015048:	bd08      	pop	{r3, pc}
 801504a:	bf00      	nop

0801504c <get_available_free_slots>:
 801504c:	8901      	ldrh	r1, [r0, #8]
 801504e:	b1e1      	cbz	r1, 801508a <get_available_free_slots+0x3e>
 8015050:	6843      	ldr	r3, [r0, #4]
 8015052:	f04f 0c00 	mov.w	ip, #0
 8015056:	b530      	push	{r4, r5, lr}
 8015058:	fbb3 fef1 	udiv	lr, r3, r1
 801505c:	6805      	ldr	r5, [r0, #0]
 801505e:	4662      	mov	r2, ip
 8015060:	7b04      	ldrb	r4, [r0, #12]
 8015062:	4660      	mov	r0, ip
 8015064:	f10c 0c01 	add.w	ip, ip, #1
 8015068:	fbb2 f3f1 	udiv	r3, r2, r1
 801506c:	fb01 2313 	mls	r3, r1, r3, r2
 8015070:	fa1f f28c 	uxth.w	r2, ip
 8015074:	b29b      	uxth	r3, r3
 8015076:	fb0e f303 	mul.w	r3, lr, r3
 801507a:	58eb      	ldr	r3, [r5, r3]
 801507c:	429c      	cmp	r4, r3
 801507e:	d101      	bne.n	8015084 <get_available_free_slots+0x38>
 8015080:	3001      	adds	r0, #1
 8015082:	b280      	uxth	r0, r0
 8015084:	428a      	cmp	r2, r1
 8015086:	d3ed      	bcc.n	8015064 <get_available_free_slots+0x18>
 8015088:	bd30      	pop	{r4, r5, pc}
 801508a:	4608      	mov	r0, r1
 801508c:	4770      	bx	lr
 801508e:	bf00      	nop

08015090 <uxr_buffer_request_data>:
 8015090:	b530      	push	{r4, r5, lr}
 8015092:	b095      	sub	sp, #84	; 0x54
 8015094:	4604      	mov	r4, r0
 8015096:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8015098:	9303      	str	r3, [sp, #12]
 801509a:	2d00      	cmp	r5, #0
 801509c:	f88d 301c 	strb.w	r3, [sp, #28]
 80150a0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80150a4:	f04f 0200 	mov.w	r2, #0
 80150a8:	bf14      	ite	ne
 80150aa:	2101      	movne	r1, #1
 80150ac:	4611      	moveq	r1, r2
 80150ae:	f88d 201d 	strb.w	r2, [sp, #29]
 80150b2:	f88d 201e 	strb.w	r2, [sp, #30]
 80150b6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80150ba:	d021      	beq.n	8015100 <uxr_buffer_request_data+0x70>
 80150bc:	686b      	ldr	r3, [r5, #4]
 80150be:	2210      	movs	r2, #16
 80150c0:	6829      	ldr	r1, [r5, #0]
 80150c2:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80150c6:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 80150ca:	2308      	movs	r3, #8
 80150cc:	2100      	movs	r1, #0
 80150ce:	4620      	mov	r0, r4
 80150d0:	e9cd 3100 	strd	r3, r1, [sp]
 80150d4:	ab0c      	add	r3, sp, #48	; 0x30
 80150d6:	9905      	ldr	r1, [sp, #20]
 80150d8:	f7f8 fde2 	bl	800dca0 <uxr_prepare_stream_to_write_submessage>
 80150dc:	b918      	cbnz	r0, 80150e6 <uxr_buffer_request_data+0x56>
 80150de:	4604      	mov	r4, r0
 80150e0:	4620      	mov	r0, r4
 80150e2:	b015      	add	sp, #84	; 0x54
 80150e4:	bd30      	pop	{r4, r5, pc}
 80150e6:	9904      	ldr	r1, [sp, #16]
 80150e8:	aa06      	add	r2, sp, #24
 80150ea:	4620      	mov	r0, r4
 80150ec:	f7f8 ff14 	bl	800df18 <uxr_init_base_object_request>
 80150f0:	4604      	mov	r4, r0
 80150f2:	a906      	add	r1, sp, #24
 80150f4:	a80c      	add	r0, sp, #48	; 0x30
 80150f6:	f7fa fa13 	bl	800f520 <uxr_serialize_READ_DATA_Payload>
 80150fa:	4620      	mov	r0, r4
 80150fc:	b015      	add	sp, #84	; 0x54
 80150fe:	bd30      	pop	{r4, r5, pc}
 8015100:	2208      	movs	r2, #8
 8015102:	e7e2      	b.n	80150ca <uxr_buffer_request_data+0x3a>

08015104 <uxr_buffer_cancel_data>:
 8015104:	b510      	push	{r4, lr}
 8015106:	2300      	movs	r3, #0
 8015108:	b094      	sub	sp, #80	; 0x50
 801510a:	4604      	mov	r4, r0
 801510c:	9205      	str	r2, [sp, #20]
 801510e:	9301      	str	r3, [sp, #4]
 8015110:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015114:	f88d 301e 	strb.w	r3, [sp, #30]
 8015118:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801511c:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8015120:	2308      	movs	r3, #8
 8015122:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015126:	2201      	movs	r2, #1
 8015128:	9300      	str	r3, [sp, #0]
 801512a:	ab0c      	add	r3, sp, #48	; 0x30
 801512c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8015130:	2210      	movs	r2, #16
 8015132:	f7f8 fdb5 	bl	800dca0 <uxr_prepare_stream_to_write_submessage>
 8015136:	b918      	cbnz	r0, 8015140 <uxr_buffer_cancel_data+0x3c>
 8015138:	4604      	mov	r4, r0
 801513a:	4620      	mov	r0, r4
 801513c:	b014      	add	sp, #80	; 0x50
 801513e:	bd10      	pop	{r4, pc}
 8015140:	9905      	ldr	r1, [sp, #20]
 8015142:	aa06      	add	r2, sp, #24
 8015144:	4620      	mov	r0, r4
 8015146:	f7f8 fee7 	bl	800df18 <uxr_init_base_object_request>
 801514a:	4604      	mov	r4, r0
 801514c:	a906      	add	r1, sp, #24
 801514e:	a80c      	add	r0, sp, #48	; 0x30
 8015150:	f7fa f9e6 	bl	800f520 <uxr_serialize_READ_DATA_Payload>
 8015154:	4620      	mov	r0, r4
 8015156:	b014      	add	sp, #80	; 0x50
 8015158:	bd10      	pop	{r4, pc}
 801515a:	bf00      	nop

0801515c <read_submessage_format>:
 801515c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015160:	b095      	sub	sp, #84	; 0x54
 8015162:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8015166:	b113      	cbz	r3, 801516e <read_submessage_format+0x12>
 8015168:	b015      	add	sp, #84	; 0x54
 801516a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801516e:	4606      	mov	r6, r0
 8015170:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015172:	460c      	mov	r4, r1
 8015174:	4615      	mov	r5, r2
 8015176:	9004      	str	r0, [sp, #16]
 8015178:	4699      	mov	r9, r3
 801517a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801517c:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8015180:	9005      	str	r0, [sp, #20]
 8015182:	a80c      	add	r0, sp, #48	; 0x30
 8015184:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015188:	1a52      	subs	r2, r2, r1
 801518a:	f7f7 fbb9 	bl	800c900 <ucdr_init_buffer>
 801518e:	a80c      	add	r0, sp, #48	; 0x30
 8015190:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015194:	f7f7 fb88 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 8015198:	69e2      	ldr	r2, [r4, #28]
 801519a:	b19a      	cbz	r2, 80151c4 <read_submessage_format+0x68>
 801519c:	f1b8 0f07 	cmp.w	r8, #7
 80151a0:	f882 9014 	strb.w	r9, [r2, #20]
 80151a4:	d040      	beq.n	8015228 <read_submessage_format+0xcc>
 80151a6:	f1b8 0f08 	cmp.w	r8, #8
 80151aa:	d02e      	beq.n	801520a <read_submessage_format+0xae>
 80151ac:	f1b8 0f06 	cmp.w	r8, #6
 80151b0:	d011      	beq.n	80151d6 <read_submessage_format+0x7a>
 80151b2:	2301      	movs	r3, #1
 80151b4:	7513      	strb	r3, [r2, #20]
 80151b6:	4629      	mov	r1, r5
 80151b8:	4620      	mov	r0, r4
 80151ba:	f7f7 fbf5 	bl	800c9a8 <ucdr_advance_buffer>
 80151be:	b015      	add	sp, #84	; 0x54
 80151c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151c4:	f1b8 0f07 	cmp.w	r8, #7
 80151c8:	d02e      	beq.n	8015228 <read_submessage_format+0xcc>
 80151ca:	f1b8 0f08 	cmp.w	r8, #8
 80151ce:	d01c      	beq.n	801520a <read_submessage_format+0xae>
 80151d0:	f1b8 0f06 	cmp.w	r8, #6
 80151d4:	d1ef      	bne.n	80151b6 <read_submessage_format+0x5a>
 80151d6:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 80151da:	f1b8 0f00 	cmp.w	r8, #0
 80151de:	d011      	beq.n	8015204 <read_submessage_format+0xa8>
 80151e0:	ab0c      	add	r3, sp, #48	; 0x30
 80151e2:	9501      	str	r5, [sp, #4]
 80151e4:	463a      	mov	r2, r7
 80151e6:	4630      	mov	r0, r6
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	2306      	movs	r3, #6
 80151ec:	f88d 3016 	strb.w	r3, [sp, #22]
 80151f0:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80151f4:	9302      	str	r3, [sp, #8]
 80151f6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80151fa:	47c0      	blx	r8
 80151fc:	2301      	movs	r3, #1
 80151fe:	69e2      	ldr	r2, [r4, #28]
 8015200:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8015204:	2a00      	cmp	r2, #0
 8015206:	d1d4      	bne.n	80151b2 <read_submessage_format+0x56>
 8015208:	e7d5      	b.n	80151b6 <read_submessage_format+0x5a>
 801520a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801520e:	2b00      	cmp	r3, #0
 8015210:	d0f8      	beq.n	8015204 <read_submessage_format+0xa8>
 8015212:	a80c      	add	r0, sp, #48	; 0x30
 8015214:	a906      	add	r1, sp, #24
 8015216:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801521a:	f7fa fa4d 	bl	800f6b8 <uxr_deserialize_SampleIdentity>
 801521e:	b9a0      	cbnz	r0, 801524a <read_submessage_format+0xee>
 8015220:	69e2      	ldr	r2, [r4, #28]
 8015222:	2a00      	cmp	r2, #0
 8015224:	d1c5      	bne.n	80151b2 <read_submessage_format+0x56>
 8015226:	e7c6      	b.n	80151b6 <read_submessage_format+0x5a>
 8015228:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801522c:	b13b      	cbz	r3, 801523e <read_submessage_format+0xe2>
 801522e:	a906      	add	r1, sp, #24
 8015230:	a80c      	add	r0, sp, #48	; 0x30
 8015232:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015236:	f7f9 ff13 	bl	800f060 <uxr_deserialize_BaseObjectRequest>
 801523a:	bb60      	cbnz	r0, 8015296 <read_submessage_format+0x13a>
 801523c:	69e2      	ldr	r2, [r4, #28]
 801523e:	68a3      	ldr	r3, [r4, #8]
 8015240:	442b      	add	r3, r5
 8015242:	60a3      	str	r3, [r4, #8]
 8015244:	2a00      	cmp	r2, #0
 8015246:	d1b4      	bne.n	80151b2 <read_submessage_format+0x56>
 8015248:	e7b5      	b.n	80151b6 <read_submessage_format+0x5a>
 801524a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801524c:	a80c      	add	r0, sp, #48	; 0x30
 801524e:	eba8 0803 	sub.w	r8, r8, r3
 8015252:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8015256:	44a8      	add	r8, r5
 8015258:	1a52      	subs	r2, r2, r1
 801525a:	f7f7 fb51 	bl	800c900 <ucdr_init_buffer>
 801525e:	a80c      	add	r0, sp, #48	; 0x30
 8015260:	fa1f f888 	uxth.w	r8, r8
 8015264:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015268:	f7f7 fb1e 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 801526c:	ab0c      	add	r3, sp, #48	; 0x30
 801526e:	2108      	movs	r1, #8
 8015270:	f8cd 8004 	str.w	r8, [sp, #4]
 8015274:	9300      	str	r3, [sp, #0]
 8015276:	463a      	mov	r2, r7
 8015278:	f88d 1016 	strb.w	r1, [sp, #22]
 801527c:	ab06      	add	r3, sp, #24
 801527e:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8015282:	4630      	mov	r0, r6
 8015284:	9102      	str	r1, [sp, #8]
 8015286:	9905      	ldr	r1, [sp, #20]
 8015288:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801528c:	47b8      	blx	r7
 801528e:	2301      	movs	r3, #1
 8015290:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8015294:	e7c4      	b.n	8015220 <read_submessage_format+0xc4>
 8015296:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801529a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801529c:	a80c      	add	r0, sp, #48	; 0x30
 801529e:	1a52      	subs	r2, r2, r1
 80152a0:	eba8 0803 	sub.w	r8, r8, r3
 80152a4:	f7f7 fb2c 	bl	800c900 <ucdr_init_buffer>
 80152a8:	a80c      	add	r0, sp, #48	; 0x30
 80152aa:	44a8      	add	r8, r5
 80152ac:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80152b0:	f7f7 fafa 	bl	800c8a8 <ucdr_set_on_full_buffer_callback>
 80152b4:	ab0c      	add	r3, sp, #48	; 0x30
 80152b6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80152ba:	fa1f f888 	uxth.w	r8, r8
 80152be:	9300      	str	r3, [sp, #0]
 80152c0:	463a      	mov	r2, r7
 80152c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80152c6:	4630      	mov	r0, r6
 80152c8:	f8cd 8004 	str.w	r8, [sp, #4]
 80152cc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80152d0:	2107      	movs	r1, #7
 80152d2:	f88d 1016 	strb.w	r1, [sp, #22]
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80152dc:	9102      	str	r1, [sp, #8]
 80152de:	9905      	ldr	r1, [sp, #20]
 80152e0:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80152e4:	47b8      	blx	r7
 80152e6:	2301      	movs	r3, #1
 80152e8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80152ec:	e7a6      	b.n	801523c <read_submessage_format+0xe0>
 80152ee:	bf00      	nop

080152f0 <uxr_seq_num_add>:
 80152f0:	4408      	add	r0, r1
 80152f2:	b280      	uxth	r0, r0
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop

080152f8 <uxr_seq_num_sub>:
 80152f8:	1a40      	subs	r0, r0, r1
 80152fa:	b280      	uxth	r0, r0
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop

08015300 <uxr_seq_num_cmp>:
 8015300:	4288      	cmp	r0, r1
 8015302:	d011      	beq.n	8015328 <uxr_seq_num_cmp+0x28>
 8015304:	d309      	bcc.n	801531a <uxr_seq_num_cmp+0x1a>
 8015306:	4288      	cmp	r0, r1
 8015308:	d910      	bls.n	801532c <uxr_seq_num_cmp+0x2c>
 801530a:	1a40      	subs	r0, r0, r1
 801530c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015310:	bfd4      	ite	le
 8015312:	2001      	movle	r0, #1
 8015314:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8015318:	4770      	bx	lr
 801531a:	1a0b      	subs	r3, r1, r0
 801531c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015320:	daf1      	bge.n	8015306 <uxr_seq_num_cmp+0x6>
 8015322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015326:	4770      	bx	lr
 8015328:	2000      	movs	r0, #0
 801532a:	4770      	bx	lr
 801532c:	2001      	movs	r0, #1
 801532e:	4770      	bx	lr

08015330 <uxr_init_framing_io>:
 8015330:	2300      	movs	r3, #0
 8015332:	7041      	strb	r1, [r0, #1]
 8015334:	7003      	strb	r3, [r0, #0]
 8015336:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop

0801533c <uxr_write_framed_msg>:
 801533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	4617      	mov	r7, r2
 8015342:	7842      	ldrb	r2, [r0, #1]
 8015344:	460e      	mov	r6, r1
 8015346:	b083      	sub	sp, #12
 8015348:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801534c:	469b      	mov	fp, r3
 801534e:	237e      	movs	r3, #126	; 0x7e
 8015350:	4604      	mov	r4, r0
 8015352:	2901      	cmp	r1, #1
 8015354:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8015358:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801535c:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8015360:	f240 8115 	bls.w	801558e <uxr_write_framed_msg+0x252>
 8015364:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015368:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801536c:	2202      	movs	r2, #2
 801536e:	2901      	cmp	r1, #1
 8015370:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015374:	d952      	bls.n	801541c <uxr_write_framed_msg+0xe0>
 8015376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015378:	2103      	movs	r1, #3
 801537a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801537e:	b2dd      	uxtb	r5, r3
 8015380:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015384:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8015388:	2a01      	cmp	r2, #1
 801538a:	d95c      	bls.n	8015446 <uxr_write_framed_msg+0x10a>
 801538c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801538e:	1862      	adds	r2, r4, r1
 8015390:	3101      	adds	r1, #1
 8015392:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8015396:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801539a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801539e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80153a2:	2a01      	cmp	r2, #1
 80153a4:	d961      	bls.n	801546a <uxr_write_framed_msg+0x12e>
 80153a6:	1c4a      	adds	r2, r1, #1
 80153a8:	4421      	add	r1, r4
 80153aa:	b2d2      	uxtb	r2, r2
 80153ac:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80153b0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d06a      	beq.n	801548e <uxr_write_framed_msg+0x152>
 80153b8:	f04f 0800 	mov.w	r8, #0
 80153bc:	46c1      	mov	r9, r8
 80153be:	e016      	b.n	80153ee <uxr_write_framed_msg+0xb2>
 80153c0:	2a29      	cmp	r2, #41	; 0x29
 80153c2:	d868      	bhi.n	8015496 <uxr_write_framed_msg+0x15a>
 80153c4:	18a0      	adds	r0, r4, r2
 80153c6:	3201      	adds	r2, #1
 80153c8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80153cc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80153d0:	ea88 0101 	eor.w	r1, r8, r1
 80153d4:	4b7d      	ldr	r3, [pc, #500]	; (80155cc <uxr_write_framed_msg+0x290>)
 80153d6:	f109 0901 	add.w	r9, r9, #1
 80153da:	b2c9      	uxtb	r1, r1
 80153dc:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80153e0:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80153e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153e6:	454b      	cmp	r3, r9
 80153e8:	d969      	bls.n	80154be <uxr_write_framed_msg+0x182>
 80153ea:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80153ee:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80153f2:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80153f6:	2801      	cmp	r0, #1
 80153f8:	d8e2      	bhi.n	80153c0 <uxr_write_framed_msg+0x84>
 80153fa:	1c50      	adds	r0, r2, #1
 80153fc:	b2c0      	uxtb	r0, r0
 80153fe:	2829      	cmp	r0, #41	; 0x29
 8015400:	d849      	bhi.n	8015496 <uxr_write_framed_msg+0x15a>
 8015402:	18a0      	adds	r0, r4, r2
 8015404:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8015408:	3202      	adds	r2, #2
 801540a:	f081 0520 	eor.w	r5, r1, #32
 801540e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015412:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8015416:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801541a:	e7d9      	b.n	80153d0 <uxr_write_framed_msg+0x94>
 801541c:	2104      	movs	r1, #4
 801541e:	f04f 0c03 	mov.w	ip, #3
 8015422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015424:	4422      	add	r2, r4
 8015426:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801542a:	44a4      	add	ip, r4
 801542c:	b2dd      	uxtb	r5, r3
 801542e:	f080 0020 	eor.w	r0, r0, #32
 8015432:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8015436:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801543a:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801543e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015442:	2a01      	cmp	r2, #1
 8015444:	d8a2      	bhi.n	801538c <uxr_write_framed_msg+0x50>
 8015446:	1862      	adds	r2, r4, r1
 8015448:	207d      	movs	r0, #125	; 0x7d
 801544a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801544c:	f085 0520 	eor.w	r5, r5, #32
 8015450:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8015454:	3102      	adds	r1, #2
 8015456:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801545a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801545e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015462:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8015466:	2a01      	cmp	r2, #1
 8015468:	d89d      	bhi.n	80153a6 <uxr_write_framed_msg+0x6a>
 801546a:	1c4d      	adds	r5, r1, #1
 801546c:	1c8a      	adds	r2, r1, #2
 801546e:	f080 0020 	eor.w	r0, r0, #32
 8015472:	4421      	add	r1, r4
 8015474:	fa54 f585 	uxtab	r5, r4, r5
 8015478:	b2d2      	uxtb	r2, r2
 801547a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801547e:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8015482:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8015486:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801548a:	2b00      	cmp	r3, #0
 801548c:	d194      	bne.n	80153b8 <uxr_write_framed_msg+0x7c>
 801548e:	4619      	mov	r1, r3
 8015490:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015494:	e019      	b.n	80154ca <uxr_write_framed_msg+0x18e>
 8015496:	2500      	movs	r5, #0
 8015498:	e000      	b.n	801549c <uxr_write_framed_msg+0x160>
 801549a:	b160      	cbz	r0, 80154b6 <uxr_write_framed_msg+0x17a>
 801549c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80154a0:	1b52      	subs	r2, r2, r5
 80154a2:	4653      	mov	r3, sl
 80154a4:	4638      	mov	r0, r7
 80154a6:	4421      	add	r1, r4
 80154a8:	47b0      	blx	r6
 80154aa:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80154ae:	4405      	add	r5, r0
 80154b0:	4295      	cmp	r5, r2
 80154b2:	d3f2      	bcc.n	801549a <uxr_write_framed_msg+0x15e>
 80154b4:	d066      	beq.n	8015584 <uxr_write_framed_msg+0x248>
 80154b6:	2000      	movs	r0, #0
 80154b8:	b003      	add	sp, #12
 80154ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154be:	fa5f f188 	uxtb.w	r1, r8
 80154c2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80154c6:	f8ad 8004 	strh.w	r8, [sp, #4]
 80154ca:	f04f 0900 	mov.w	r9, #0
 80154ce:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80154d2:	46c8      	mov	r8, r9
 80154d4:	e013      	b.n	80154fe <uxr_write_framed_msg+0x1c2>
 80154d6:	2a29      	cmp	r2, #41	; 0x29
 80154d8:	d824      	bhi.n	8015524 <uxr_write_framed_msg+0x1e8>
 80154da:	18a3      	adds	r3, r4, r2
 80154dc:	3201      	adds	r2, #1
 80154de:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80154e2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80154e6:	f109 0901 	add.w	r9, r9, #1
 80154ea:	f1b9 0f02 	cmp.w	r9, #2
 80154ee:	d02d      	beq.n	801554c <uxr_write_framed_msg+0x210>
 80154f0:	f109 0308 	add.w	r3, r9, #8
 80154f4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80154f8:	446b      	add	r3, sp
 80154fa:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80154fe:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015502:	2b01      	cmp	r3, #1
 8015504:	d8e7      	bhi.n	80154d6 <uxr_write_framed_msg+0x19a>
 8015506:	1c53      	adds	r3, r2, #1
 8015508:	b2db      	uxtb	r3, r3
 801550a:	2b29      	cmp	r3, #41	; 0x29
 801550c:	d80a      	bhi.n	8015524 <uxr_write_framed_msg+0x1e8>
 801550e:	18a3      	adds	r3, r4, r2
 8015510:	f081 0120 	eor.w	r1, r1, #32
 8015514:	3202      	adds	r2, #2
 8015516:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801551a:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801551e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015522:	e7e0      	b.n	80154e6 <uxr_write_framed_msg+0x1aa>
 8015524:	2500      	movs	r5, #0
 8015526:	e001      	b.n	801552c <uxr_write_framed_msg+0x1f0>
 8015528:	2800      	cmp	r0, #0
 801552a:	d0c4      	beq.n	80154b6 <uxr_write_framed_msg+0x17a>
 801552c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015530:	1b52      	subs	r2, r2, r5
 8015532:	4653      	mov	r3, sl
 8015534:	4638      	mov	r0, r7
 8015536:	4421      	add	r1, r4
 8015538:	47b0      	blx	r6
 801553a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801553e:	4405      	add	r5, r0
 8015540:	4295      	cmp	r5, r2
 8015542:	d3f1      	bcc.n	8015528 <uxr_write_framed_msg+0x1ec>
 8015544:	d1b7      	bne.n	80154b6 <uxr_write_framed_msg+0x17a>
 8015546:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801554a:	e7d1      	b.n	80154f0 <uxr_write_framed_msg+0x1b4>
 801554c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015550:	b19a      	cbz	r2, 801557a <uxr_write_framed_msg+0x23e>
 8015552:	2500      	movs	r5, #0
 8015554:	e001      	b.n	801555a <uxr_write_framed_msg+0x21e>
 8015556:	2800      	cmp	r0, #0
 8015558:	d0ad      	beq.n	80154b6 <uxr_write_framed_msg+0x17a>
 801555a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801555e:	1b52      	subs	r2, r2, r5
 8015560:	4653      	mov	r3, sl
 8015562:	4638      	mov	r0, r7
 8015564:	4421      	add	r1, r4
 8015566:	47b0      	blx	r6
 8015568:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801556c:	4405      	add	r5, r0
 801556e:	4295      	cmp	r5, r2
 8015570:	d3f1      	bcc.n	8015556 <uxr_write_framed_msg+0x21a>
 8015572:	d1a0      	bne.n	80154b6 <uxr_write_framed_msg+0x17a>
 8015574:	2300      	movs	r3, #0
 8015576:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801557a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801557c:	b298      	uxth	r0, r3
 801557e:	b003      	add	sp, #12
 8015580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015584:	f04f 0300 	mov.w	r3, #0
 8015588:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801558c:	e72a      	b.n	80153e4 <uxr_write_framed_msg+0xa8>
 801558e:	217d      	movs	r1, #125	; 0x7d
 8015590:	f082 0220 	eor.w	r2, r2, #32
 8015594:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8015598:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801559c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80155a0:	2203      	movs	r2, #3
 80155a2:	2901      	cmp	r1, #1
 80155a4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80155a8:	d803      	bhi.n	80155b2 <uxr_write_framed_msg+0x276>
 80155aa:	2105      	movs	r1, #5
 80155ac:	f04f 0c04 	mov.w	ip, #4
 80155b0:	e737      	b.n	8015422 <uxr_write_framed_msg+0xe6>
 80155b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155b4:	2104      	movs	r1, #4
 80155b6:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80155ba:	b2dd      	uxtb	r5, r3
 80155bc:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80155c0:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80155c4:	2a01      	cmp	r2, #1
 80155c6:	f63f aee1 	bhi.w	801538c <uxr_write_framed_msg+0x50>
 80155ca:	e73c      	b.n	8015446 <uxr_write_framed_msg+0x10a>
 80155cc:	080186f8 	.word	0x080186f8

080155d0 <uxr_framing_read_transport>:
 80155d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d4:	4604      	mov	r4, r0
 80155d6:	b085      	sub	sp, #20
 80155d8:	4692      	mov	sl, r2
 80155da:	4689      	mov	r9, r1
 80155dc:	461d      	mov	r5, r3
 80155de:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80155e0:	f7f8 fe50 	bl	800e284 <uxr_millis>
 80155e4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80155e8:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80155ec:	4680      	mov	r8, r0
 80155ee:	42ba      	cmp	r2, r7
 80155f0:	d05f      	beq.n	80156b2 <uxr_framing_read_transport+0xe2>
 80155f2:	d817      	bhi.n	8015624 <uxr_framing_read_transport+0x54>
 80155f4:	3f01      	subs	r7, #1
 80155f6:	1aba      	subs	r2, r7, r2
 80155f8:	2700      	movs	r7, #0
 80155fa:	b2d2      	uxtb	r2, r2
 80155fc:	42b2      	cmp	r2, r6
 80155fe:	d81a      	bhi.n	8015636 <uxr_framing_read_transport+0x66>
 8015600:	19d3      	adds	r3, r2, r7
 8015602:	42b3      	cmp	r3, r6
 8015604:	d852      	bhi.n	80156ac <uxr_framing_read_transport+0xdc>
 8015606:	b9d2      	cbnz	r2, 801563e <uxr_framing_read_transport+0x6e>
 8015608:	2600      	movs	r6, #0
 801560a:	f7f8 fe3b 	bl	800e284 <uxr_millis>
 801560e:	682b      	ldr	r3, [r5, #0]
 8015610:	eba0 0008 	sub.w	r0, r0, r8
 8015614:	1a1b      	subs	r3, r3, r0
 8015616:	4630      	mov	r0, r6
 8015618:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801561c:	602b      	str	r3, [r5, #0]
 801561e:	b005      	add	sp, #20
 8015620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015624:	2f00      	cmp	r7, #0
 8015626:	d060      	beq.n	80156ea <uxr_framing_read_transport+0x11a>
 8015628:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801562c:	3f01      	subs	r7, #1
 801562e:	b2d2      	uxtb	r2, r2
 8015630:	b2ff      	uxtb	r7, r7
 8015632:	42b2      	cmp	r2, r6
 8015634:	d9e4      	bls.n	8015600 <uxr_framing_read_transport+0x30>
 8015636:	b2f2      	uxtb	r2, r6
 8015638:	2700      	movs	r7, #0
 801563a:	2a00      	cmp	r2, #0
 801563c:	d0e4      	beq.n	8015608 <uxr_framing_read_transport+0x38>
 801563e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015640:	4650      	mov	r0, sl
 8015642:	9203      	str	r2, [sp, #12]
 8015644:	9300      	str	r3, [sp, #0]
 8015646:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801564a:	682b      	ldr	r3, [r5, #0]
 801564c:	3102      	adds	r1, #2
 801564e:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80156f4 <uxr_framing_read_transport+0x124>
 8015652:	4421      	add	r1, r4
 8015654:	47c8      	blx	r9
 8015656:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801565a:	4606      	mov	r6, r0
 801565c:	4403      	add	r3, r0
 801565e:	0859      	lsrs	r1, r3, #1
 8015660:	fbab 2101 	umull	r2, r1, fp, r1
 8015664:	222a      	movs	r2, #42	; 0x2a
 8015666:	0889      	lsrs	r1, r1, #2
 8015668:	fb02 3111 	mls	r1, r2, r1, r3
 801566c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015670:	2800      	cmp	r0, #0
 8015672:	d0c9      	beq.n	8015608 <uxr_framing_read_transport+0x38>
 8015674:	9a03      	ldr	r2, [sp, #12]
 8015676:	4290      	cmp	r0, r2
 8015678:	d1c7      	bne.n	801560a <uxr_framing_read_transport+0x3a>
 801567a:	2f00      	cmp	r7, #0
 801567c:	d0c5      	beq.n	801560a <uxr_framing_read_transport+0x3a>
 801567e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015680:	3102      	adds	r1, #2
 8015682:	463a      	mov	r2, r7
 8015684:	4650      	mov	r0, sl
 8015686:	4421      	add	r1, r4
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	2300      	movs	r3, #0
 801568c:	47c8      	blx	r9
 801568e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015692:	4406      	add	r6, r0
 8015694:	1813      	adds	r3, r2, r0
 8015696:	085a      	lsrs	r2, r3, #1
 8015698:	fbab 1b02 	umull	r1, fp, fp, r2
 801569c:	222a      	movs	r2, #42	; 0x2a
 801569e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80156a2:	fb02 331b 	mls	r3, r2, fp, r3
 80156a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80156aa:	e7ae      	b.n	801560a <uxr_framing_read_transport+0x3a>
 80156ac:	1ab6      	subs	r6, r6, r2
 80156ae:	b2f7      	uxtb	r7, r6
 80156b0:	e7a9      	b.n	8015606 <uxr_framing_read_transport+0x36>
 80156b2:	2300      	movs	r3, #0
 80156b4:	2e28      	cmp	r6, #40	; 0x28
 80156b6:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80156b8:	d9bd      	bls.n	8015636 <uxr_framing_read_transport+0x66>
 80156ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156bc:	2229      	movs	r2, #41	; 0x29
 80156be:	1ca1      	adds	r1, r4, #2
 80156c0:	4650      	mov	r0, sl
 80156c2:	9300      	str	r3, [sp, #0]
 80156c4:	682b      	ldr	r3, [r5, #0]
 80156c6:	47c8      	blx	r9
 80156c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80156cc:	4606      	mov	r6, r0
 80156ce:	212a      	movs	r1, #42	; 0x2a
 80156d0:	4403      	add	r3, r0
 80156d2:	4808      	ldr	r0, [pc, #32]	; (80156f4 <uxr_framing_read_transport+0x124>)
 80156d4:	085a      	lsrs	r2, r3, #1
 80156d6:	fba0 0202 	umull	r0, r2, r0, r2
 80156da:	0892      	lsrs	r2, r2, #2
 80156dc:	fb01 3312 	mls	r3, r1, r2, r3
 80156e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80156e4:	2e00      	cmp	r6, #0
 80156e6:	d08f      	beq.n	8015608 <uxr_framing_read_transport+0x38>
 80156e8:	e78f      	b.n	801560a <uxr_framing_read_transport+0x3a>
 80156ea:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 80156ee:	b2d2      	uxtb	r2, r2
 80156f0:	e784      	b.n	80155fc <uxr_framing_read_transport+0x2c>
 80156f2:	bf00      	nop
 80156f4:	30c30c31 	.word	0x30c30c31

080156f8 <uxr_read_framed_msg>:
 80156f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156fc:	461e      	mov	r6, r3
 80156fe:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015702:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8015706:	b083      	sub	sp, #12
 8015708:	4604      	mov	r4, r0
 801570a:	4688      	mov	r8, r1
 801570c:	429d      	cmp	r5, r3
 801570e:	4691      	mov	r9, r2
 8015710:	f000 818c 	beq.w	8015a2c <uxr_read_framed_msg+0x334>
 8015714:	7823      	ldrb	r3, [r4, #0]
 8015716:	4dc3      	ldr	r5, [pc, #780]	; (8015a24 <uxr_read_framed_msg+0x32c>)
 8015718:	4fc3      	ldr	r7, [pc, #780]	; (8015a28 <uxr_read_framed_msg+0x330>)
 801571a:	2b07      	cmp	r3, #7
 801571c:	d8fd      	bhi.n	801571a <uxr_read_framed_msg+0x22>
 801571e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015722:	011c      	.short	0x011c
 8015724:	00d900fb 	.word	0x00d900fb
 8015728:	008f00ba 	.word	0x008f00ba
 801572c:	00320051 	.word	0x00320051
 8015730:	0008      	.short	0x0008
 8015732:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015736:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801573a:	4299      	cmp	r1, r3
 801573c:	f000 814d 	beq.w	80159da <uxr_read_framed_msg+0x2e2>
 8015740:	18e2      	adds	r2, r4, r3
 8015742:	7892      	ldrb	r2, [r2, #2]
 8015744:	2a7d      	cmp	r2, #125	; 0x7d
 8015746:	f000 81b8 	beq.w	8015aba <uxr_read_framed_msg+0x3c2>
 801574a:	3301      	adds	r3, #1
 801574c:	212a      	movs	r1, #42	; 0x2a
 801574e:	2a7e      	cmp	r2, #126	; 0x7e
 8015750:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015754:	fba5 c000 	umull	ip, r0, r5, r0
 8015758:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801575c:	fb01 3310 	mls	r3, r1, r0, r3
 8015760:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015764:	f000 8257 	beq.w	8015c16 <uxr_read_framed_msg+0x51e>
 8015768:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801576a:	2000      	movs	r0, #0
 801576c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801576e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015772:	7020      	strb	r0, [r4, #0]
 8015774:	b29b      	uxth	r3, r3
 8015776:	4299      	cmp	r1, r3
 8015778:	86a3      	strh	r3, [r4, #52]	; 0x34
 801577a:	f000 8178 	beq.w	8015a6e <uxr_read_framed_msg+0x376>
 801577e:	2000      	movs	r0, #0
 8015780:	b003      	add	sp, #12
 8015782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015786:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801578a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801578e:	4298      	cmp	r0, r3
 8015790:	f000 8132 	beq.w	80159f8 <uxr_read_framed_msg+0x300>
 8015794:	18e2      	adds	r2, r4, r3
 8015796:	7891      	ldrb	r1, [r2, #2]
 8015798:	297d      	cmp	r1, #125	; 0x7d
 801579a:	f000 8170 	beq.w	8015a7e <uxr_read_framed_msg+0x386>
 801579e:	3301      	adds	r3, #1
 80157a0:	202a      	movs	r0, #42	; 0x2a
 80157a2:	297e      	cmp	r1, #126	; 0x7e
 80157a4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80157a8:	fba5 c202 	umull	ip, r2, r5, r2
 80157ac:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80157b0:	fb00 3312 	mls	r3, r0, r2, r3
 80157b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80157b8:	f000 821d 	beq.w	8015bf6 <uxr_read_framed_msg+0x4fe>
 80157bc:	2307      	movs	r3, #7
 80157be:	86a1      	strh	r1, [r4, #52]	; 0x34
 80157c0:	7023      	strb	r3, [r4, #0]
 80157c2:	e7aa      	b.n	801571a <uxr_read_framed_msg+0x22>
 80157c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80157c6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80157ca:	459e      	cmp	lr, r3
 80157cc:	d827      	bhi.n	801581e <uxr_read_framed_msg+0x126>
 80157ce:	e032      	b.n	8015836 <uxr_read_framed_msg+0x13e>
 80157d0:	fba5 b101 	umull	fp, r1, r5, r1
 80157d4:	f89c c002 	ldrb.w	ip, [ip, #2]
 80157d8:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80157dc:	0889      	lsrs	r1, r1, #2
 80157de:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80157e2:	fb0b 0111 	mls	r1, fp, r1, r0
 80157e6:	f000 80d4 	beq.w	8015992 <uxr_read_framed_msg+0x29a>
 80157ea:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80157ee:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80157f2:	f000 80cb 	beq.w	801598c <uxr_read_framed_msg+0x294>
 80157f6:	f806 c003 	strb.w	ip, [r6, r3]
 80157fa:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80157fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80157fe:	ea80 010c 	eor.w	r1, r0, ip
 8015802:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015806:	3301      	adds	r3, #1
 8015808:	b2c9      	uxtb	r1, r1
 801580a:	b29b      	uxth	r3, r3
 801580c:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015810:	4573      	cmp	r3, lr
 8015812:	8663      	strh	r3, [r4, #50]	; 0x32
 8015814:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015818:	86e2      	strh	r2, [r4, #54]	; 0x36
 801581a:	f080 811d 	bcs.w	8015a58 <uxr_read_framed_msg+0x360>
 801581e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015822:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015826:	1c50      	adds	r0, r2, #1
 8015828:	eb04 0c02 	add.w	ip, r4, r2
 801582c:	4592      	cmp	sl, r2
 801582e:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015832:	d1cd      	bne.n	80157d0 <uxr_read_framed_msg+0xd8>
 8015834:	459e      	cmp	lr, r3
 8015836:	f040 8114 	bne.w	8015a62 <uxr_read_framed_msg+0x36a>
 801583a:	2306      	movs	r3, #6
 801583c:	7023      	strb	r3, [r4, #0]
 801583e:	e76c      	b.n	801571a <uxr_read_framed_msg+0x22>
 8015840:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015844:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015848:	4298      	cmp	r0, r3
 801584a:	f000 80c6 	beq.w	80159da <uxr_read_framed_msg+0x2e2>
 801584e:	18e2      	adds	r2, r4, r3
 8015850:	7891      	ldrb	r1, [r2, #2]
 8015852:	297d      	cmp	r1, #125	; 0x7d
 8015854:	f000 8193 	beq.w	8015b7e <uxr_read_framed_msg+0x486>
 8015858:	3301      	adds	r3, #1
 801585a:	202a      	movs	r0, #42	; 0x2a
 801585c:	297e      	cmp	r1, #126	; 0x7e
 801585e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015862:	fba5 c202 	umull	ip, r2, r5, r2
 8015866:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801586a:	fb00 3312 	mls	r3, r0, r2, r3
 801586e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015872:	f000 81d0 	beq.w	8015c16 <uxr_read_framed_msg+0x51e>
 8015876:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015878:	2000      	movs	r0, #0
 801587a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801587e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015880:	8660      	strh	r0, [r4, #50]	; 0x32
 8015882:	b29b      	uxth	r3, r3
 8015884:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015886:	428b      	cmp	r3, r1
 8015888:	8623      	strh	r3, [r4, #48]	; 0x30
 801588a:	f240 80e2 	bls.w	8015a52 <uxr_read_framed_msg+0x35a>
 801588e:	7020      	strb	r0, [r4, #0]
 8015890:	b003      	add	sp, #12
 8015892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015896:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801589a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801589e:	4298      	cmp	r0, r3
 80158a0:	f000 80aa 	beq.w	80159f8 <uxr_read_framed_msg+0x300>
 80158a4:	18e2      	adds	r2, r4, r3
 80158a6:	7891      	ldrb	r1, [r2, #2]
 80158a8:	297d      	cmp	r1, #125	; 0x7d
 80158aa:	f000 8186 	beq.w	8015bba <uxr_read_framed_msg+0x4c2>
 80158ae:	3301      	adds	r3, #1
 80158b0:	202a      	movs	r0, #42	; 0x2a
 80158b2:	297e      	cmp	r1, #126	; 0x7e
 80158b4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80158b8:	fba5 c202 	umull	ip, r2, r5, r2
 80158bc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80158c0:	fb00 3312 	mls	r3, r0, r2, r3
 80158c4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80158c8:	f000 8195 	beq.w	8015bf6 <uxr_read_framed_msg+0x4fe>
 80158cc:	2304      	movs	r3, #4
 80158ce:	8621      	strh	r1, [r4, #48]	; 0x30
 80158d0:	7023      	strb	r3, [r4, #0]
 80158d2:	e722      	b.n	801571a <uxr_read_framed_msg+0x22>
 80158d4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80158d8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80158dc:	4290      	cmp	r0, r2
 80158de:	f000 80b4 	beq.w	8015a4a <uxr_read_framed_msg+0x352>
 80158e2:	18a3      	adds	r3, r4, r2
 80158e4:	7899      	ldrb	r1, [r3, #2]
 80158e6:	297d      	cmp	r1, #125	; 0x7d
 80158e8:	f000 8107 	beq.w	8015afa <uxr_read_framed_msg+0x402>
 80158ec:	3201      	adds	r2, #1
 80158ee:	232a      	movs	r3, #42	; 0x2a
 80158f0:	297e      	cmp	r1, #126	; 0x7e
 80158f2:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80158f6:	fba5 c000 	umull	ip, r0, r5, r0
 80158fa:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80158fe:	fb03 2210 	mls	r2, r3, r0, r2
 8015902:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015906:	f000 818a 	beq.w	8015c1e <uxr_read_framed_msg+0x526>
 801590a:	7863      	ldrb	r3, [r4, #1]
 801590c:	428b      	cmp	r3, r1
 801590e:	bf0c      	ite	eq
 8015910:	2303      	moveq	r3, #3
 8015912:	2300      	movne	r3, #0
 8015914:	7023      	strb	r3, [r4, #0]
 8015916:	e700      	b.n	801571a <uxr_read_framed_msg+0x22>
 8015918:	2300      	movs	r3, #0
 801591a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801591e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8015922:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015926:	4299      	cmp	r1, r3
 8015928:	d06a      	beq.n	8015a00 <uxr_read_framed_msg+0x308>
 801592a:	18e2      	adds	r2, r4, r3
 801592c:	7890      	ldrb	r0, [r2, #2]
 801592e:	287d      	cmp	r0, #125	; 0x7d
 8015930:	f000 8100 	beq.w	8015b34 <uxr_read_framed_msg+0x43c>
 8015934:	3301      	adds	r3, #1
 8015936:	212a      	movs	r1, #42	; 0x2a
 8015938:	287e      	cmp	r0, #126	; 0x7e
 801593a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801593e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015942:	fba5 c202 	umull	ip, r2, r5, r2
 8015946:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801594a:	fb01 3312 	mls	r3, r1, r2, r3
 801594e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015952:	d055      	beq.n	8015a00 <uxr_read_framed_msg+0x308>
 8015954:	2302      	movs	r3, #2
 8015956:	7023      	strb	r3, [r4, #0]
 8015958:	e6df      	b.n	801571a <uxr_read_framed_msg+0x22>
 801595a:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801595e:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015962:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015966:	1c5a      	adds	r2, r3, #1
 8015968:	459c      	cmp	ip, r3
 801596a:	eb04 0103 	add.w	r1, r4, r3
 801596e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015972:	f43f af04 	beq.w	801577e <uxr_read_framed_msg+0x86>
 8015976:	fba5 0303 	umull	r0, r3, r5, r3
 801597a:	7889      	ldrb	r1, [r1, #2]
 801597c:	089b      	lsrs	r3, r3, #2
 801597e:	297e      	cmp	r1, #126	; 0x7e
 8015980:	fb0e 2313 	mls	r3, lr, r3, r2
 8015984:	b2db      	uxtb	r3, r3
 8015986:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801598a:	d1ec      	bne.n	8015966 <uxr_read_framed_msg+0x26e>
 801598c:	2301      	movs	r3, #1
 801598e:	7023      	strb	r3, [r4, #0]
 8015990:	e6c3      	b.n	801571a <uxr_read_framed_msg+0x22>
 8015992:	1c50      	adds	r0, r2, #1
 8015994:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015998:	3202      	adds	r2, #2
 801599a:	0841      	lsrs	r1, r0, #1
 801599c:	fba5 c101 	umull	ip, r1, r5, r1
 80159a0:	0889      	lsrs	r1, r1, #2
 80159a2:	fb0b 0111 	mls	r1, fp, r1, r0
 80159a6:	1860      	adds	r0, r4, r1
 80159a8:	b2c9      	uxtb	r1, r1
 80159aa:	458a      	cmp	sl, r1
 80159ac:	f43f af42 	beq.w	8015834 <uxr_read_framed_msg+0x13c>
 80159b0:	0851      	lsrs	r1, r2, #1
 80159b2:	7880      	ldrb	r0, [r0, #2]
 80159b4:	fba5 a101 	umull	sl, r1, r5, r1
 80159b8:	287e      	cmp	r0, #126	; 0x7e
 80159ba:	f080 0c20 	eor.w	ip, r0, #32
 80159be:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80159c2:	fb0b 2211 	mls	r2, fp, r1, r2
 80159c6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80159ca:	f47f af14 	bne.w	80157f6 <uxr_read_framed_msg+0xfe>
 80159ce:	459e      	cmp	lr, r3
 80159d0:	f43f af33 	beq.w	801583a <uxr_read_framed_msg+0x142>
 80159d4:	2301      	movs	r3, #1
 80159d6:	7023      	strb	r3, [r4, #0]
 80159d8:	e69f      	b.n	801571a <uxr_read_framed_msg+0x22>
 80159da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159dc:	9300      	str	r3, [sp, #0]
 80159de:	2301      	movs	r3, #1
 80159e0:	9301      	str	r3, [sp, #4]
 80159e2:	464a      	mov	r2, r9
 80159e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159e6:	4641      	mov	r1, r8
 80159e8:	4620      	mov	r0, r4
 80159ea:	f7ff fdf1 	bl	80155d0 <uxr_framing_read_transport>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	f43f aec5 	beq.w	801577e <uxr_read_framed_msg+0x86>
 80159f4:	7823      	ldrb	r3, [r4, #0]
 80159f6:	e690      	b.n	801571a <uxr_read_framed_msg+0x22>
 80159f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159fa:	9300      	str	r3, [sp, #0]
 80159fc:	2302      	movs	r3, #2
 80159fe:	e7ef      	b.n	80159e0 <uxr_read_framed_msg+0x2e8>
 8015a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a02:	464a      	mov	r2, r9
 8015a04:	4641      	mov	r1, r8
 8015a06:	4620      	mov	r0, r4
 8015a08:	9300      	str	r3, [sp, #0]
 8015a0a:	2304      	movs	r3, #4
 8015a0c:	9301      	str	r3, [sp, #4]
 8015a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a10:	f7ff fdde 	bl	80155d0 <uxr_framing_read_transport>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d1ed      	bne.n	80159f4 <uxr_read_framed_msg+0x2fc>
 8015a18:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015a1c:	2b7e      	cmp	r3, #126	; 0x7e
 8015a1e:	d0e9      	beq.n	80159f4 <uxr_read_framed_msg+0x2fc>
 8015a20:	e6ad      	b.n	801577e <uxr_read_framed_msg+0x86>
 8015a22:	bf00      	nop
 8015a24:	30c30c31 	.word	0x30c30c31
 8015a28:	080186f8 	.word	0x080186f8
 8015a2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a2e:	9300      	str	r3, [sp, #0]
 8015a30:	2305      	movs	r3, #5
 8015a32:	9301      	str	r3, [sp, #4]
 8015a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a36:	f7ff fdcb 	bl	80155d0 <uxr_framing_read_transport>
 8015a3a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015a3e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015a42:	429a      	cmp	r2, r3
 8015a44:	f43f ae9b 	beq.w	801577e <uxr_read_framed_msg+0x86>
 8015a48:	e664      	b.n	8015714 <uxr_read_framed_msg+0x1c>
 8015a4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a4c:	9300      	str	r3, [sp, #0]
 8015a4e:	2303      	movs	r3, #3
 8015a50:	e7c6      	b.n	80159e0 <uxr_read_framed_msg+0x2e8>
 8015a52:	2305      	movs	r3, #5
 8015a54:	7023      	strb	r3, [r4, #0]
 8015a56:	e660      	b.n	801571a <uxr_read_framed_msg+0x22>
 8015a58:	f43f aeef 	beq.w	801583a <uxr_read_framed_msg+0x142>
 8015a5c:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015a60:	d094      	beq.n	801598c <uxr_read_framed_msg+0x294>
 8015a62:	ebae 0303 	sub.w	r3, lr, r3
 8015a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a68:	3302      	adds	r3, #2
 8015a6a:	9200      	str	r2, [sp, #0]
 8015a6c:	e7b8      	b.n	80159e0 <uxr_read_framed_msg+0x2e8>
 8015a6e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a74:	7013      	strb	r3, [r2, #0]
 8015a76:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015a78:	b003      	add	sp, #12
 8015a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a7e:	1c59      	adds	r1, r3, #1
 8015a80:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015a84:	084a      	lsrs	r2, r1, #1
 8015a86:	fba5 e202 	umull	lr, r2, r5, r2
 8015a8a:	0892      	lsrs	r2, r2, #2
 8015a8c:	fb0c 1212 	mls	r2, ip, r2, r1
 8015a90:	b2d1      	uxtb	r1, r2
 8015a92:	4288      	cmp	r0, r1
 8015a94:	d0b0      	beq.n	80159f8 <uxr_read_framed_msg+0x300>
 8015a96:	3302      	adds	r3, #2
 8015a98:	4422      	add	r2, r4
 8015a9a:	7891      	ldrb	r1, [r2, #2]
 8015a9c:	085a      	lsrs	r2, r3, #1
 8015a9e:	fba5 0202 	umull	r0, r2, r5, r2
 8015aa2:	297e      	cmp	r1, #126	; 0x7e
 8015aa4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015aa8:	fb0c 3312 	mls	r3, ip, r2, r3
 8015aac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015ab0:	f000 80a1 	beq.w	8015bf6 <uxr_read_framed_msg+0x4fe>
 8015ab4:	f081 0120 	eor.w	r1, r1, #32
 8015ab8:	e680      	b.n	80157bc <uxr_read_framed_msg+0xc4>
 8015aba:	f103 0c01 	add.w	ip, r3, #1
 8015abe:	202a      	movs	r0, #42	; 0x2a
 8015ac0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015ac4:	fba5 e202 	umull	lr, r2, r5, r2
 8015ac8:	0892      	lsrs	r2, r2, #2
 8015aca:	fb00 c212 	mls	r2, r0, r2, ip
 8015ace:	fa5f fc82 	uxtb.w	ip, r2
 8015ad2:	4561      	cmp	r1, ip
 8015ad4:	d081      	beq.n	80159da <uxr_read_framed_msg+0x2e2>
 8015ad6:	3302      	adds	r3, #2
 8015ad8:	4422      	add	r2, r4
 8015ada:	0859      	lsrs	r1, r3, #1
 8015adc:	7892      	ldrb	r2, [r2, #2]
 8015ade:	fba5 c101 	umull	ip, r1, r5, r1
 8015ae2:	2a7e      	cmp	r2, #126	; 0x7e
 8015ae4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015ae8:	fb00 3311 	mls	r3, r0, r1, r3
 8015aec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015af0:	f000 8091 	beq.w	8015c16 <uxr_read_framed_msg+0x51e>
 8015af4:	f082 0220 	eor.w	r2, r2, #32
 8015af8:	e636      	b.n	8015768 <uxr_read_framed_msg+0x70>
 8015afa:	1c51      	adds	r1, r2, #1
 8015afc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015b00:	084b      	lsrs	r3, r1, #1
 8015b02:	fba5 e303 	umull	lr, r3, r5, r3
 8015b06:	089b      	lsrs	r3, r3, #2
 8015b08:	fb0c 1313 	mls	r3, ip, r3, r1
 8015b0c:	b2d9      	uxtb	r1, r3
 8015b0e:	4288      	cmp	r0, r1
 8015b10:	d09b      	beq.n	8015a4a <uxr_read_framed_msg+0x352>
 8015b12:	3202      	adds	r2, #2
 8015b14:	4423      	add	r3, r4
 8015b16:	0850      	lsrs	r0, r2, #1
 8015b18:	789b      	ldrb	r3, [r3, #2]
 8015b1a:	fba5 1000 	umull	r1, r0, r5, r0
 8015b1e:	2b7e      	cmp	r3, #126	; 0x7e
 8015b20:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015b24:	fb0c 2210 	mls	r2, ip, r0, r2
 8015b28:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015b2c:	d077      	beq.n	8015c1e <uxr_read_framed_msg+0x526>
 8015b2e:	f083 0120 	eor.w	r1, r3, #32
 8015b32:	e6ea      	b.n	801590a <uxr_read_framed_msg+0x212>
 8015b34:	f103 0c01 	add.w	ip, r3, #1
 8015b38:	202a      	movs	r0, #42	; 0x2a
 8015b3a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015b3e:	fba5 e202 	umull	lr, r2, r5, r2
 8015b42:	0892      	lsrs	r2, r2, #2
 8015b44:	fb00 c212 	mls	r2, r0, r2, ip
 8015b48:	fa5f fc82 	uxtb.w	ip, r2
 8015b4c:	4561      	cmp	r1, ip
 8015b4e:	f43f af57 	beq.w	8015a00 <uxr_read_framed_msg+0x308>
 8015b52:	3302      	adds	r3, #2
 8015b54:	4422      	add	r2, r4
 8015b56:	7891      	ldrb	r1, [r2, #2]
 8015b58:	085a      	lsrs	r2, r3, #1
 8015b5a:	fba5 c202 	umull	ip, r2, r5, r2
 8015b5e:	297e      	cmp	r1, #126	; 0x7e
 8015b60:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015b64:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015b68:	fb00 3312 	mls	r3, r0, r2, r3
 8015b6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015b70:	f43f af46 	beq.w	8015a00 <uxr_read_framed_msg+0x308>
 8015b74:	f081 0120 	eor.w	r1, r1, #32
 8015b78:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015b7c:	e6ea      	b.n	8015954 <uxr_read_framed_msg+0x25c>
 8015b7e:	1c59      	adds	r1, r3, #1
 8015b80:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015b84:	084a      	lsrs	r2, r1, #1
 8015b86:	fba5 e202 	umull	lr, r2, r5, r2
 8015b8a:	0892      	lsrs	r2, r2, #2
 8015b8c:	fb0c 1212 	mls	r2, ip, r2, r1
 8015b90:	b2d1      	uxtb	r1, r2
 8015b92:	4288      	cmp	r0, r1
 8015b94:	f43f af21 	beq.w	80159da <uxr_read_framed_msg+0x2e2>
 8015b98:	3302      	adds	r3, #2
 8015b9a:	4422      	add	r2, r4
 8015b9c:	7891      	ldrb	r1, [r2, #2]
 8015b9e:	085a      	lsrs	r2, r3, #1
 8015ba0:	fba5 0202 	umull	r0, r2, r5, r2
 8015ba4:	297e      	cmp	r1, #126	; 0x7e
 8015ba6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015baa:	fb0c 3312 	mls	r3, ip, r2, r3
 8015bae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015bb2:	d030      	beq.n	8015c16 <uxr_read_framed_msg+0x51e>
 8015bb4:	f081 0120 	eor.w	r1, r1, #32
 8015bb8:	e65d      	b.n	8015876 <uxr_read_framed_msg+0x17e>
 8015bba:	1c59      	adds	r1, r3, #1
 8015bbc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015bc0:	084a      	lsrs	r2, r1, #1
 8015bc2:	fba5 e202 	umull	lr, r2, r5, r2
 8015bc6:	0892      	lsrs	r2, r2, #2
 8015bc8:	fb0c 1212 	mls	r2, ip, r2, r1
 8015bcc:	b2d1      	uxtb	r1, r2
 8015bce:	4288      	cmp	r0, r1
 8015bd0:	f43f af12 	beq.w	80159f8 <uxr_read_framed_msg+0x300>
 8015bd4:	3302      	adds	r3, #2
 8015bd6:	4422      	add	r2, r4
 8015bd8:	7891      	ldrb	r1, [r2, #2]
 8015bda:	085a      	lsrs	r2, r3, #1
 8015bdc:	fba5 0202 	umull	r0, r2, r5, r2
 8015be0:	297e      	cmp	r1, #126	; 0x7e
 8015be2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015be6:	fb0c 3312 	mls	r3, ip, r2, r3
 8015bea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015bee:	d002      	beq.n	8015bf6 <uxr_read_framed_msg+0x4fe>
 8015bf0:	f081 0120 	eor.w	r1, r1, #32
 8015bf4:	e66a      	b.n	80158cc <uxr_read_framed_msg+0x1d4>
 8015bf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bf8:	9300      	str	r3, [sp, #0]
 8015bfa:	2302      	movs	r3, #2
 8015bfc:	9301      	str	r3, [sp, #4]
 8015bfe:	464a      	mov	r2, r9
 8015c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c02:	4641      	mov	r1, r8
 8015c04:	4620      	mov	r0, r4
 8015c06:	f7ff fce3 	bl	80155d0 <uxr_framing_read_transport>
 8015c0a:	2800      	cmp	r0, #0
 8015c0c:	f47f aef2 	bne.w	80159f4 <uxr_read_framed_msg+0x2fc>
 8015c10:	2301      	movs	r3, #1
 8015c12:	7023      	strb	r3, [r4, #0]
 8015c14:	e581      	b.n	801571a <uxr_read_framed_msg+0x22>
 8015c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c18:	9300      	str	r3, [sp, #0]
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	e7ee      	b.n	8015bfc <uxr_read_framed_msg+0x504>
 8015c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c20:	9300      	str	r3, [sp, #0]
 8015c22:	2303      	movs	r3, #3
 8015c24:	e7ea      	b.n	8015bfc <uxr_read_framed_msg+0x504>
 8015c26:	bf00      	nop

08015c28 <rcl_get_default_domain_id>:
 8015c28:	b530      	push	{r4, r5, lr}
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	b083      	sub	sp, #12
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	b1d0      	cbz	r0, 8015c68 <rcl_get_default_domain_id+0x40>
 8015c32:	4604      	mov	r4, r0
 8015c34:	4669      	mov	r1, sp
 8015c36:	4815      	ldr	r0, [pc, #84]	; (8015c8c <rcl_get_default_domain_id+0x64>)
 8015c38:	f7fc fbfe 	bl	8012438 <rcutils_get_env>
 8015c3c:	4602      	mov	r2, r0
 8015c3e:	b110      	cbz	r0, 8015c46 <rcl_get_default_domain_id+0x1e>
 8015c40:	2001      	movs	r0, #1
 8015c42:	b003      	add	sp, #12
 8015c44:	bd30      	pop	{r4, r5, pc}
 8015c46:	9b00      	ldr	r3, [sp, #0]
 8015c48:	b18b      	cbz	r3, 8015c6e <rcl_get_default_domain_id+0x46>
 8015c4a:	7818      	ldrb	r0, [r3, #0]
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	d0f8      	beq.n	8015c42 <rcl_get_default_domain_id+0x1a>
 8015c50:	a901      	add	r1, sp, #4
 8015c52:	4618      	mov	r0, r3
 8015c54:	9201      	str	r2, [sp, #4]
 8015c56:	f000 fe67 	bl	8016928 <strtoul>
 8015c5a:	4605      	mov	r5, r0
 8015c5c:	b150      	cbz	r0, 8015c74 <rcl_get_default_domain_id+0x4c>
 8015c5e:	1c43      	adds	r3, r0, #1
 8015c60:	d00d      	beq.n	8015c7e <rcl_get_default_domain_id+0x56>
 8015c62:	2000      	movs	r0, #0
 8015c64:	6025      	str	r5, [r4, #0]
 8015c66:	e7ec      	b.n	8015c42 <rcl_get_default_domain_id+0x1a>
 8015c68:	200b      	movs	r0, #11
 8015c6a:	b003      	add	sp, #12
 8015c6c:	bd30      	pop	{r4, r5, pc}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	b003      	add	sp, #12
 8015c72:	bd30      	pop	{r4, r5, pc}
 8015c74:	9b01      	ldr	r3, [sp, #4]
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d0f2      	beq.n	8015c62 <rcl_get_default_domain_id+0x3a>
 8015c7c:	e7e0      	b.n	8015c40 <rcl_get_default_domain_id+0x18>
 8015c7e:	f001 f89f 	bl	8016dc0 <__errno>
 8015c82:	6803      	ldr	r3, [r0, #0]
 8015c84:	2b22      	cmp	r3, #34	; 0x22
 8015c86:	d1ec      	bne.n	8015c62 <rcl_get_default_domain_id+0x3a>
 8015c88:	e7da      	b.n	8015c40 <rcl_get_default_domain_id+0x18>
 8015c8a:	bf00      	nop
 8015c8c:	080188f8 	.word	0x080188f8

08015c90 <rcl_expand_topic_name>:
 8015c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c94:	b08d      	sub	sp, #52	; 0x34
 8015c96:	4698      	mov	r8, r3
 8015c98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c9a:	9207      	str	r2, [sp, #28]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	bf18      	it	ne
 8015ca0:	f1b8 0f00 	cmpne.w	r8, #0
 8015ca4:	bf0c      	ite	eq
 8015ca6:	2301      	moveq	r3, #1
 8015ca8:	2300      	movne	r3, #0
 8015caa:	2a00      	cmp	r2, #0
 8015cac:	bf08      	it	eq
 8015cae:	f043 0301 	orreq.w	r3, r3, #1
 8015cb2:	2900      	cmp	r1, #0
 8015cb4:	bf08      	it	eq
 8015cb6:	f043 0301 	orreq.w	r3, r3, #1
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d13d      	bne.n	8015d3a <rcl_expand_topic_name+0xaa>
 8015cbe:	fab0 f280 	clz	r2, r0
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	0952      	lsrs	r2, r2, #5
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	d037      	beq.n	8015d3a <rcl_expand_topic_name+0xaa>
 8015cca:	460f      	mov	r7, r1
 8015ccc:	a90b      	add	r1, sp, #44	; 0x2c
 8015cce:	f000 f9f3 	bl	80160b8 <rcl_validate_topic_name>
 8015cd2:	4605      	mov	r5, r0
 8015cd4:	bb68      	cbnz	r0, 8015d32 <rcl_expand_topic_name+0xa2>
 8015cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d137      	bne.n	8015d4c <rcl_expand_topic_name+0xbc>
 8015cdc:	4602      	mov	r2, r0
 8015cde:	a90b      	add	r1, sp, #44	; 0x2c
 8015ce0:	4638      	mov	r0, r7
 8015ce2:	f7fd f83f 	bl	8012d64 <rmw_validate_node_name>
 8015ce6:	bb68      	cbnz	r0, 8015d44 <rcl_expand_topic_name+0xb4>
 8015ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d133      	bne.n	8015d56 <rcl_expand_topic_name+0xc6>
 8015cee:	462a      	mov	r2, r5
 8015cf0:	a90b      	add	r1, sp, #44	; 0x2c
 8015cf2:	9807      	ldr	r0, [sp, #28]
 8015cf4:	f7fd f818 	bl	8012d28 <rmw_validate_namespace>
 8015cf8:	bb20      	cbnz	r0, 8015d44 <rcl_expand_topic_name+0xb4>
 8015cfa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015cfc:	2d00      	cmp	r5, #0
 8015cfe:	f040 80a2 	bne.w	8015e46 <rcl_expand_topic_name+0x1b6>
 8015d02:	217b      	movs	r1, #123	; 0x7b
 8015d04:	4620      	mov	r0, r4
 8015d06:	f000 ffcf 	bl	8016ca8 <strchr>
 8015d0a:	7823      	ldrb	r3, [r4, #0]
 8015d0c:	4681      	mov	r9, r0
 8015d0e:	bb20      	cbnz	r0, 8015d5a <rcl_expand_topic_name+0xca>
 8015d10:	2b2f      	cmp	r3, #47	; 0x2f
 8015d12:	d122      	bne.n	8015d5a <rcl_expand_topic_name+0xca>
 8015d14:	ab19      	add	r3, sp, #100	; 0x64
 8015d16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d1a:	ab16      	add	r3, sp, #88	; 0x58
 8015d1c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015d20:	4620      	mov	r0, r4
 8015d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015d24:	f7fc fcea 	bl	80126fc <rcutils_strdup>
 8015d28:	2800      	cmp	r0, #0
 8015d2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d2c:	bf08      	it	eq
 8015d2e:	250a      	moveq	r5, #10
 8015d30:	6018      	str	r0, [r3, #0]
 8015d32:	4628      	mov	r0, r5
 8015d34:	b00d      	add	sp, #52	; 0x34
 8015d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d3a:	250b      	movs	r5, #11
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	b00d      	add	sp, #52	; 0x34
 8015d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d44:	f7f9 fd72 	bl	800f82c <rcl_convert_rmw_ret_to_rcl_ret>
 8015d48:	4605      	mov	r5, r0
 8015d4a:	e7f2      	b.n	8015d32 <rcl_expand_topic_name+0xa2>
 8015d4c:	2567      	movs	r5, #103	; 0x67
 8015d4e:	4628      	mov	r0, r5
 8015d50:	b00d      	add	sp, #52	; 0x34
 8015d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d56:	25c9      	movs	r5, #201	; 0xc9
 8015d58:	e7eb      	b.n	8015d32 <rcl_expand_topic_name+0xa2>
 8015d5a:	2b7e      	cmp	r3, #126	; 0x7e
 8015d5c:	d075      	beq.n	8015e4a <rcl_expand_topic_name+0x1ba>
 8015d5e:	f1b9 0f00 	cmp.w	r9, #0
 8015d62:	f000 80c2 	beq.w	8015eea <rcl_expand_topic_name+0x25a>
 8015d66:	2300      	movs	r3, #0
 8015d68:	46a2      	mov	sl, r4
 8015d6a:	461e      	mov	r6, r3
 8015d6c:	9508      	str	r5, [sp, #32]
 8015d6e:	4655      	mov	r5, sl
 8015d70:	9409      	str	r4, [sp, #36]	; 0x24
 8015d72:	46b2      	mov	sl, r6
 8015d74:	464c      	mov	r4, r9
 8015d76:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8015d7a:	2c00      	cmp	r4, #0
 8015d7c:	f000 80ae 	beq.w	8015edc <rcl_expand_topic_name+0x24c>
 8015d80:	217d      	movs	r1, #125	; 0x7d
 8015d82:	4628      	mov	r0, r5
 8015d84:	f000 ff90 	bl	8016ca8 <strchr>
 8015d88:	eba0 0904 	sub.w	r9, r0, r4
 8015d8c:	4621      	mov	r1, r4
 8015d8e:	4869      	ldr	r0, [pc, #420]	; (8015f34 <rcl_expand_topic_name+0x2a4>)
 8015d90:	f109 0601 	add.w	r6, r9, #1
 8015d94:	4632      	mov	r2, r6
 8015d96:	f000 ff94 	bl	8016cc2 <strncmp>
 8015d9a:	2800      	cmp	r0, #0
 8015d9c:	d051      	beq.n	8015e42 <rcl_expand_topic_name+0x1b2>
 8015d9e:	4632      	mov	r2, r6
 8015da0:	4621      	mov	r1, r4
 8015da2:	4865      	ldr	r0, [pc, #404]	; (8015f38 <rcl_expand_topic_name+0x2a8>)
 8015da4:	f000 ff8d 	bl	8016cc2 <strncmp>
 8015da8:	b128      	cbz	r0, 8015db6 <rcl_expand_topic_name+0x126>
 8015daa:	4632      	mov	r2, r6
 8015dac:	4621      	mov	r1, r4
 8015dae:	4863      	ldr	r0, [pc, #396]	; (8015f3c <rcl_expand_topic_name+0x2ac>)
 8015db0:	f000 ff87 	bl	8016cc2 <strncmp>
 8015db4:	bb38      	cbnz	r0, 8015e06 <rcl_expand_topic_name+0x176>
 8015db6:	46d9      	mov	r9, fp
 8015db8:	ab18      	add	r3, sp, #96	; 0x60
 8015dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015dbe:	ab16      	add	r3, sp, #88	; 0x58
 8015dc0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	4631      	mov	r1, r6
 8015dc8:	cb0c      	ldmia	r3, {r2, r3}
 8015dca:	f7fc fcb9 	bl	8012740 <rcutils_strndup>
 8015dce:	4604      	mov	r4, r0
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	f000 80a3 	beq.w	8015f1c <rcl_expand_topic_name+0x28c>
 8015dd6:	464a      	mov	r2, r9
 8015dd8:	4628      	mov	r0, r5
 8015dda:	ab16      	add	r3, sp, #88	; 0x58
 8015ddc:	4621      	mov	r1, r4
 8015dde:	f7fc fb8d 	bl	80124fc <rcutils_repl_str>
 8015de2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015de4:	4605      	mov	r5, r0
 8015de6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015de8:	4620      	mov	r0, r4
 8015dea:	4798      	blx	r3
 8015dec:	4650      	mov	r0, sl
 8015dee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015df0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015df2:	4798      	blx	r3
 8015df4:	2d00      	cmp	r5, #0
 8015df6:	d06c      	beq.n	8015ed2 <rcl_expand_topic_name+0x242>
 8015df8:	217b      	movs	r1, #123	; 0x7b
 8015dfa:	4628      	mov	r0, r5
 8015dfc:	f000 ff54 	bl	8016ca8 <strchr>
 8015e00:	46aa      	mov	sl, r5
 8015e02:	4604      	mov	r4, r0
 8015e04:	e7b9      	b.n	8015d7a <rcl_expand_topic_name+0xea>
 8015e06:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8015e0a:	1c61      	adds	r1, r4, #1
 8015e0c:	4640      	mov	r0, r8
 8015e0e:	f7fc fdaf 	bl	8012970 <rcutils_string_map_getn>
 8015e12:	4681      	mov	r9, r0
 8015e14:	2800      	cmp	r0, #0
 8015e16:	d1cf      	bne.n	8015db8 <rcl_expand_topic_name+0x128>
 8015e18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e1a:	aa18      	add	r2, sp, #96	; 0x60
 8015e1c:	2569      	movs	r5, #105	; 0x69
 8015e1e:	6018      	str	r0, [r3, #0]
 8015e20:	ab16      	add	r3, sp, #88	; 0x58
 8015e22:	ca07      	ldmia	r2, {r0, r1, r2}
 8015e24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015e28:	4631      	mov	r1, r6
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	cb0c      	ldmia	r3, {r2, r3}
 8015e2e:	f7fc fc87 	bl	8012740 <rcutils_strndup>
 8015e32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015e34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e36:	4798      	blx	r3
 8015e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015e3c:	4650      	mov	r0, sl
 8015e3e:	4798      	blx	r3
 8015e40:	e777      	b.n	8015d32 <rcl_expand_topic_name+0xa2>
 8015e42:	46b9      	mov	r9, r7
 8015e44:	e7b8      	b.n	8015db8 <rcl_expand_topic_name+0x128>
 8015e46:	25ca      	movs	r5, #202	; 0xca
 8015e48:	e773      	b.n	8015d32 <rcl_expand_topic_name+0xa2>
 8015e4a:	9e07      	ldr	r6, [sp, #28]
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	f7ea f9e9 	bl	8000224 <strlen>
 8015e52:	4a3b      	ldr	r2, [pc, #236]	; (8015f40 <rcl_expand_topic_name+0x2b0>)
 8015e54:	4b3b      	ldr	r3, [pc, #236]	; (8015f44 <rcl_expand_topic_name+0x2b4>)
 8015e56:	9603      	str	r6, [sp, #12]
 8015e58:	2801      	cmp	r0, #1
 8015e5a:	bf18      	it	ne
 8015e5c:	4613      	movne	r3, r2
 8015e5e:	9704      	str	r7, [sp, #16]
 8015e60:	9302      	str	r3, [sp, #8]
 8015e62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015e64:	9300      	str	r3, [sp, #0]
 8015e66:	1c63      	adds	r3, r4, #1
 8015e68:	9305      	str	r3, [sp, #20]
 8015e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e6e:	9301      	str	r3, [sp, #4]
 8015e70:	ab16      	add	r3, sp, #88	; 0x58
 8015e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e74:	f7fc fb08 	bl	8012488 <rcutils_format_string_limit>
 8015e78:	4606      	mov	r6, r0
 8015e7a:	b350      	cbz	r0, 8015ed2 <rcl_expand_topic_name+0x242>
 8015e7c:	f1b9 0f00 	cmp.w	r9, #0
 8015e80:	d005      	beq.n	8015e8e <rcl_expand_topic_name+0x1fe>
 8015e82:	217b      	movs	r1, #123	; 0x7b
 8015e84:	46b2      	mov	sl, r6
 8015e86:	f000 ff0f 	bl	8016ca8 <strchr>
 8015e8a:	4681      	mov	r9, r0
 8015e8c:	e76e      	b.n	8015d6c <rcl_expand_topic_name+0xdc>
 8015e8e:	7833      	ldrb	r3, [r6, #0]
 8015e90:	2b2f      	cmp	r3, #47	; 0x2f
 8015e92:	d01b      	beq.n	8015ecc <rcl_expand_topic_name+0x23c>
 8015e94:	9c07      	ldr	r4, [sp, #28]
 8015e96:	4620      	mov	r0, r4
 8015e98:	f7ea f9c4 	bl	8000224 <strlen>
 8015e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015ea0:	4a29      	ldr	r2, [pc, #164]	; (8015f48 <rcl_expand_topic_name+0x2b8>)
 8015ea2:	9301      	str	r3, [sp, #4]
 8015ea4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015ea6:	9604      	str	r6, [sp, #16]
 8015ea8:	9300      	str	r3, [sp, #0]
 8015eaa:	4b28      	ldr	r3, [pc, #160]	; (8015f4c <rcl_expand_topic_name+0x2bc>)
 8015eac:	9403      	str	r4, [sp, #12]
 8015eae:	2801      	cmp	r0, #1
 8015eb0:	bf18      	it	ne
 8015eb2:	4613      	movne	r3, r2
 8015eb4:	9302      	str	r3, [sp, #8]
 8015eb6:	ab16      	add	r3, sp, #88	; 0x58
 8015eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015eba:	f7fc fae5 	bl	8012488 <rcutils_format_string_limit>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015ec6:	461e      	mov	r6, r3
 8015ec8:	4790      	blx	r2
 8015eca:	b116      	cbz	r6, 8015ed2 <rcl_expand_topic_name+0x242>
 8015ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ece:	601e      	str	r6, [r3, #0]
 8015ed0:	e72f      	b.n	8015d32 <rcl_expand_topic_name+0xa2>
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015ed6:	250a      	movs	r5, #10
 8015ed8:	6013      	str	r3, [r2, #0]
 8015eda:	e72a      	b.n	8015d32 <rcl_expand_topic_name+0xa2>
 8015edc:	4653      	mov	r3, sl
 8015ede:	4656      	mov	r6, sl
 8015ee0:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1d2      	bne.n	8015e8e <rcl_expand_topic_name+0x1fe>
 8015ee8:	7823      	ldrb	r3, [r4, #0]
 8015eea:	2b2f      	cmp	r3, #47	; 0x2f
 8015eec:	d01e      	beq.n	8015f2c <rcl_expand_topic_name+0x29c>
 8015eee:	9e07      	ldr	r6, [sp, #28]
 8015ef0:	4630      	mov	r0, r6
 8015ef2:	f7ea f997 	bl	8000224 <strlen>
 8015ef6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015efc:	9603      	str	r6, [sp, #12]
 8015efe:	9404      	str	r4, [sp, #16]
 8015f00:	e9cd 2300 	strd	r2, r3, [sp]
 8015f04:	4a10      	ldr	r2, [pc, #64]	; (8015f48 <rcl_expand_topic_name+0x2b8>)
 8015f06:	4b11      	ldr	r3, [pc, #68]	; (8015f4c <rcl_expand_topic_name+0x2bc>)
 8015f08:	2801      	cmp	r0, #1
 8015f0a:	bf18      	it	ne
 8015f0c:	4613      	movne	r3, r2
 8015f0e:	9302      	str	r3, [sp, #8]
 8015f10:	ab16      	add	r3, sp, #88	; 0x58
 8015f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f14:	f7fc fab8 	bl	8012488 <rcutils_format_string_limit>
 8015f18:	4606      	mov	r6, r0
 8015f1a:	e7d6      	b.n	8015eca <rcl_expand_topic_name+0x23a>
 8015f1c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8015f20:	4650      	mov	r0, sl
 8015f22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f24:	6014      	str	r4, [r2, #0]
 8015f26:	250a      	movs	r5, #10
 8015f28:	4798      	blx	r3
 8015f2a:	e702      	b.n	8015d32 <rcl_expand_topic_name+0xa2>
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	461e      	mov	r6, r3
 8015f30:	e7cc      	b.n	8015ecc <rcl_expand_topic_name+0x23c>
 8015f32:	bf00      	nop
 8015f34:	08018910 	.word	0x08018910
 8015f38:	08018918 	.word	0x08018918
 8015f3c:	08018920 	.word	0x08018920
 8015f40:	08018908 	.word	0x08018908
 8015f44:	08017fb8 	.word	0x08017fb8
 8015f48:	0801814c 	.word	0x0801814c
 8015f4c:	08017fc8 	.word	0x08017fc8

08015f50 <rcl_get_default_topic_name_substitutions>:
 8015f50:	2800      	cmp	r0, #0
 8015f52:	bf0c      	ite	eq
 8015f54:	200b      	moveq	r0, #11
 8015f56:	2000      	movne	r0, #0
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop

08015f5c <rcl_get_zero_initialized_guard_condition>:
 8015f5c:	4a03      	ldr	r2, [pc, #12]	; (8015f6c <rcl_get_zero_initialized_guard_condition+0x10>)
 8015f5e:	4603      	mov	r3, r0
 8015f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f64:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	4770      	bx	lr
 8015f6c:	0801892c 	.word	0x0801892c

08015f70 <rcl_guard_condition_init_from_rmw>:
 8015f70:	b082      	sub	sp, #8
 8015f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f76:	b086      	sub	sp, #24
 8015f78:	4604      	mov	r4, r0
 8015f7a:	460e      	mov	r6, r1
 8015f7c:	4615      	mov	r5, r2
 8015f7e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015f82:	f10d 0e04 	add.w	lr, sp, #4
 8015f86:	f84c 3f04 	str.w	r3, [ip, #4]!
 8015f8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f92:	f8dc 3000 	ldr.w	r3, [ip]
 8015f96:	a801      	add	r0, sp, #4
 8015f98:	f8ce 3000 	str.w	r3, [lr]
 8015f9c:	f7f4 fd86 	bl	800aaac <rcutils_allocator_is_valid>
 8015fa0:	f080 0301 	eor.w	r3, r0, #1
 8015fa4:	b2db      	uxtb	r3, r3
 8015fa6:	bb3b      	cbnz	r3, 8015ff8 <rcl_guard_condition_init_from_rmw+0x88>
 8015fa8:	b334      	cbz	r4, 8015ff8 <rcl_guard_condition_init_from_rmw+0x88>
 8015faa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015fae:	f1b8 0f00 	cmp.w	r8, #0
 8015fb2:	d11a      	bne.n	8015fea <rcl_guard_condition_init_from_rmw+0x7a>
 8015fb4:	b305      	cbz	r5, 8015ff8 <rcl_guard_condition_init_from_rmw+0x88>
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	f7f9 fc56 	bl	800f868 <rcl_context_is_valid>
 8015fbc:	b1f0      	cbz	r0, 8015ffc <rcl_guard_condition_init_from_rmw+0x8c>
 8015fbe:	9b01      	ldr	r3, [sp, #4]
 8015fc0:	201c      	movs	r0, #28
 8015fc2:	9905      	ldr	r1, [sp, #20]
 8015fc4:	4798      	blx	r3
 8015fc6:	4607      	mov	r7, r0
 8015fc8:	6060      	str	r0, [r4, #4]
 8015fca:	b320      	cbz	r0, 8016016 <rcl_guard_condition_init_from_rmw+0xa6>
 8015fcc:	b1c6      	cbz	r6, 8016000 <rcl_guard_condition_init_from_rmw+0x90>
 8015fce:	6006      	str	r6, [r0, #0]
 8015fd0:	f880 8004 	strb.w	r8, [r0, #4]
 8015fd4:	ac01      	add	r4, sp, #4
 8015fd6:	f107 0c08 	add.w	ip, r7, #8
 8015fda:	2500      	movs	r5, #0
 8015fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fe2:	6823      	ldr	r3, [r4, #0]
 8015fe4:	f8cc 3000 	str.w	r3, [ip]
 8015fe8:	e000      	b.n	8015fec <rcl_guard_condition_init_from_rmw+0x7c>
 8015fea:	2564      	movs	r5, #100	; 0x64
 8015fec:	4628      	mov	r0, r5
 8015fee:	b006      	add	sp, #24
 8015ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ff4:	b002      	add	sp, #8
 8015ff6:	4770      	bx	lr
 8015ff8:	250b      	movs	r5, #11
 8015ffa:	e7f7      	b.n	8015fec <rcl_guard_condition_init_from_rmw+0x7c>
 8015ffc:	2565      	movs	r5, #101	; 0x65
 8015ffe:	e7f5      	b.n	8015fec <rcl_guard_condition_init_from_rmw+0x7c>
 8016000:	6828      	ldr	r0, [r5, #0]
 8016002:	3028      	adds	r0, #40	; 0x28
 8016004:	f000 fa2e 	bl	8016464 <rmw_create_guard_condition>
 8016008:	6038      	str	r0, [r7, #0]
 801600a:	6867      	ldr	r7, [r4, #4]
 801600c:	683e      	ldr	r6, [r7, #0]
 801600e:	b126      	cbz	r6, 801601a <rcl_guard_condition_init_from_rmw+0xaa>
 8016010:	2301      	movs	r3, #1
 8016012:	713b      	strb	r3, [r7, #4]
 8016014:	e7de      	b.n	8015fd4 <rcl_guard_condition_init_from_rmw+0x64>
 8016016:	250a      	movs	r5, #10
 8016018:	e7e8      	b.n	8015fec <rcl_guard_condition_init_from_rmw+0x7c>
 801601a:	9b02      	ldr	r3, [sp, #8]
 801601c:	4638      	mov	r0, r7
 801601e:	9905      	ldr	r1, [sp, #20]
 8016020:	2501      	movs	r5, #1
 8016022:	4798      	blx	r3
 8016024:	6066      	str	r6, [r4, #4]
 8016026:	e7e1      	b.n	8015fec <rcl_guard_condition_init_from_rmw+0x7c>

08016028 <rcl_guard_condition_fini>:
 8016028:	b570      	push	{r4, r5, r6, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	b1f0      	cbz	r0, 801606c <rcl_guard_condition_fini+0x44>
 801602e:	6843      	ldr	r3, [r0, #4]
 8016030:	4604      	mov	r4, r0
 8016032:	b163      	cbz	r3, 801604e <rcl_guard_condition_fini+0x26>
 8016034:	6818      	ldr	r0, [r3, #0]
 8016036:	68de      	ldr	r6, [r3, #12]
 8016038:	6999      	ldr	r1, [r3, #24]
 801603a:	b160      	cbz	r0, 8016056 <rcl_guard_condition_fini+0x2e>
 801603c:	791d      	ldrb	r5, [r3, #4]
 801603e:	b965      	cbnz	r5, 801605a <rcl_guard_condition_fini+0x32>
 8016040:	4618      	mov	r0, r3
 8016042:	47b0      	blx	r6
 8016044:	2300      	movs	r3, #0
 8016046:	4628      	mov	r0, r5
 8016048:	6063      	str	r3, [r4, #4]
 801604a:	b002      	add	sp, #8
 801604c:	bd70      	pop	{r4, r5, r6, pc}
 801604e:	461d      	mov	r5, r3
 8016050:	4628      	mov	r0, r5
 8016052:	b002      	add	sp, #8
 8016054:	bd70      	pop	{r4, r5, r6, pc}
 8016056:	4605      	mov	r5, r0
 8016058:	e7f2      	b.n	8016040 <rcl_guard_condition_fini+0x18>
 801605a:	9101      	str	r1, [sp, #4]
 801605c:	f000 fa18 	bl	8016490 <rmw_destroy_guard_condition>
 8016060:	1e05      	subs	r5, r0, #0
 8016062:	6863      	ldr	r3, [r4, #4]
 8016064:	9901      	ldr	r1, [sp, #4]
 8016066:	bf18      	it	ne
 8016068:	2501      	movne	r5, #1
 801606a:	e7e9      	b.n	8016040 <rcl_guard_condition_fini+0x18>
 801606c:	250b      	movs	r5, #11
 801606e:	4628      	mov	r0, r5
 8016070:	b002      	add	sp, #8
 8016072:	bd70      	pop	{r4, r5, r6, pc}

08016074 <rcl_guard_condition_get_default_options>:
 8016074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016076:	b087      	sub	sp, #28
 8016078:	4606      	mov	r6, r0
 801607a:	4c0b      	ldr	r4, [pc, #44]	; (80160a8 <rcl_guard_condition_get_default_options+0x34>)
 801607c:	4668      	mov	r0, sp
 801607e:	f7f4 fd07 	bl	800aa90 <rcutils_get_default_allocator>
 8016082:	46ee      	mov	lr, sp
 8016084:	46a4      	mov	ip, r4
 8016086:	4625      	mov	r5, r4
 8016088:	4634      	mov	r4, r6
 801608a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801608e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016094:	f8de 7000 	ldr.w	r7, [lr]
 8016098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801609a:	4630      	mov	r0, r6
 801609c:	f8cc 7000 	str.w	r7, [ip]
 80160a0:	6027      	str	r7, [r4, #0]
 80160a2:	b007      	add	sp, #28
 80160a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160a6:	bf00      	nop
 80160a8:	2001365c 	.word	0x2001365c

080160ac <rcl_guard_condition_get_rmw_handle>:
 80160ac:	b110      	cbz	r0, 80160b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80160ae:	6840      	ldr	r0, [r0, #4]
 80160b0:	b100      	cbz	r0, 80160b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80160b2:	6800      	ldr	r0, [r0, #0]
 80160b4:	4770      	bx	lr
 80160b6:	bf00      	nop

080160b8 <rcl_validate_topic_name>:
 80160b8:	2800      	cmp	r0, #0
 80160ba:	f000 8089 	beq.w	80161d0 <rcl_validate_topic_name+0x118>
 80160be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160c2:	460e      	mov	r6, r1
 80160c4:	2900      	cmp	r1, #0
 80160c6:	f000 8085 	beq.w	80161d4 <rcl_validate_topic_name+0x11c>
 80160ca:	4604      	mov	r4, r0
 80160cc:	4617      	mov	r7, r2
 80160ce:	f7ea f8a9 	bl	8000224 <strlen>
 80160d2:	b1b0      	cbz	r0, 8016102 <rcl_validate_topic_name+0x4a>
 80160d4:	f894 e000 	ldrb.w	lr, [r4]
 80160d8:	f8df c160 	ldr.w	ip, [pc, #352]	; 801623c <rcl_validate_topic_name+0x184>
 80160dc:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80160e0:	f013 0304 	ands.w	r3, r3, #4
 80160e4:	d139      	bne.n	801615a <rcl_validate_topic_name+0xa2>
 80160e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80160ea:	f814 2008 	ldrb.w	r2, [r4, r8]
 80160ee:	2a2f      	cmp	r2, #47	; 0x2f
 80160f0:	d10f      	bne.n	8016112 <rcl_validate_topic_name+0x5a>
 80160f2:	2202      	movs	r2, #2
 80160f4:	6032      	str	r2, [r6, #0]
 80160f6:	b3a7      	cbz	r7, 8016162 <rcl_validate_topic_name+0xaa>
 80160f8:	4618      	mov	r0, r3
 80160fa:	f8c7 8000 	str.w	r8, [r7]
 80160fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016102:	2301      	movs	r3, #1
 8016104:	6033      	str	r3, [r6, #0]
 8016106:	b367      	cbz	r7, 8016162 <rcl_validate_topic_name+0xaa>
 8016108:	2300      	movs	r3, #0
 801610a:	4618      	mov	r0, r3
 801610c:	603b      	str	r3, [r7, #0]
 801610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016112:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8016116:	461d      	mov	r5, r3
 8016118:	4619      	mov	r1, r3
 801611a:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801611e:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8016122:	f1b9 0f09 	cmp.w	r9, #9
 8016126:	d91f      	bls.n	8016168 <rcl_validate_topic_name+0xb0>
 8016128:	f022 0920 	bic.w	r9, r2, #32
 801612c:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8016130:	f1b9 0f19 	cmp.w	r9, #25
 8016134:	d918      	bls.n	8016168 <rcl_validate_topic_name+0xb0>
 8016136:	2a5f      	cmp	r2, #95	; 0x5f
 8016138:	d024      	beq.n	8016184 <rcl_validate_topic_name+0xcc>
 801613a:	2a2f      	cmp	r2, #47	; 0x2f
 801613c:	d058      	beq.n	80161f0 <rcl_validate_topic_name+0x138>
 801613e:	2a7e      	cmp	r2, #126	; 0x7e
 8016140:	d04a      	beq.n	80161d8 <rcl_validate_topic_name+0x120>
 8016142:	2a7b      	cmp	r2, #123	; 0x7b
 8016144:	d05b      	beq.n	80161fe <rcl_validate_topic_name+0x146>
 8016146:	2a7d      	cmp	r2, #125	; 0x7d
 8016148:	d169      	bne.n	801621e <rcl_validate_topic_name+0x166>
 801614a:	2d00      	cmp	r5, #0
 801614c:	d15c      	bne.n	8016208 <rcl_validate_topic_name+0x150>
 801614e:	2305      	movs	r3, #5
 8016150:	6033      	str	r3, [r6, #0]
 8016152:	b137      	cbz	r7, 8016162 <rcl_validate_topic_name+0xaa>
 8016154:	2000      	movs	r0, #0
 8016156:	6039      	str	r1, [r7, #0]
 8016158:	e7d9      	b.n	801610e <rcl_validate_topic_name+0x56>
 801615a:	2304      	movs	r3, #4
 801615c:	6033      	str	r3, [r6, #0]
 801615e:	2f00      	cmp	r7, #0
 8016160:	d1d2      	bne.n	8016108 <rcl_validate_topic_name+0x50>
 8016162:	2000      	movs	r0, #0
 8016164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016168:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801616c:	0752      	lsls	r2, r2, #29
 801616e:	d509      	bpl.n	8016184 <rcl_validate_topic_name+0xcc>
 8016170:	2900      	cmp	r1, #0
 8016172:	bf0c      	ite	eq
 8016174:	2200      	moveq	r2, #0
 8016176:	f005 0201 	andne.w	r2, r5, #1
 801617a:	b11a      	cbz	r2, 8016184 <rcl_validate_topic_name+0xcc>
 801617c:	1e4d      	subs	r5, r1, #1
 801617e:	429d      	cmp	r5, r3
 8016180:	d031      	beq.n	80161e6 <rcl_validate_topic_name+0x12e>
 8016182:	4615      	mov	r5, r2
 8016184:	3101      	adds	r1, #1
 8016186:	4288      	cmp	r0, r1
 8016188:	d1c7      	bne.n	801611a <rcl_validate_topic_name+0x62>
 801618a:	2d00      	cmp	r5, #0
 801618c:	d142      	bne.n	8016214 <rcl_validate_topic_name+0x15c>
 801618e:	4628      	mov	r0, r5
 8016190:	2301      	movs	r3, #1
 8016192:	e00c      	b.n	80161ae <rcl_validate_topic_name+0xf6>
 8016194:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8016198:	d101      	bne.n	801619e <rcl_validate_topic_name+0xe6>
 801619a:	2801      	cmp	r0, #1
 801619c:	d047      	beq.n	801622e <rcl_validate_topic_name+0x176>
 801619e:	1c5a      	adds	r2, r3, #1
 80161a0:	428b      	cmp	r3, r1
 80161a2:	f100 0001 	add.w	r0, r0, #1
 80161a6:	f104 0401 	add.w	r4, r4, #1
 80161aa:	4613      	mov	r3, r2
 80161ac:	d22e      	bcs.n	801620c <rcl_validate_topic_name+0x154>
 80161ae:	4580      	cmp	r8, r0
 80161b0:	d0f5      	beq.n	801619e <rcl_validate_topic_name+0xe6>
 80161b2:	7822      	ldrb	r2, [r4, #0]
 80161b4:	2a2f      	cmp	r2, #47	; 0x2f
 80161b6:	d1ed      	bne.n	8016194 <rcl_validate_topic_name+0xdc>
 80161b8:	7862      	ldrb	r2, [r4, #1]
 80161ba:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80161be:	0752      	lsls	r2, r2, #29
 80161c0:	d5ed      	bpl.n	801619e <rcl_validate_topic_name+0xe6>
 80161c2:	2204      	movs	r2, #4
 80161c4:	6032      	str	r2, [r6, #0]
 80161c6:	2f00      	cmp	r7, #0
 80161c8:	d0cb      	beq.n	8016162 <rcl_validate_topic_name+0xaa>
 80161ca:	2000      	movs	r0, #0
 80161cc:	603b      	str	r3, [r7, #0]
 80161ce:	e79e      	b.n	801610e <rcl_validate_topic_name+0x56>
 80161d0:	200b      	movs	r0, #11
 80161d2:	4770      	bx	lr
 80161d4:	200b      	movs	r0, #11
 80161d6:	e79a      	b.n	801610e <rcl_validate_topic_name+0x56>
 80161d8:	2900      	cmp	r1, #0
 80161da:	d0d3      	beq.n	8016184 <rcl_validate_topic_name+0xcc>
 80161dc:	2306      	movs	r3, #6
 80161de:	6033      	str	r3, [r6, #0]
 80161e0:	2f00      	cmp	r7, #0
 80161e2:	d1b7      	bne.n	8016154 <rcl_validate_topic_name+0x9c>
 80161e4:	e7bd      	b.n	8016162 <rcl_validate_topic_name+0xaa>
 80161e6:	2309      	movs	r3, #9
 80161e8:	6033      	str	r3, [r6, #0]
 80161ea:	2f00      	cmp	r7, #0
 80161ec:	d1b2      	bne.n	8016154 <rcl_validate_topic_name+0x9c>
 80161ee:	e7b8      	b.n	8016162 <rcl_validate_topic_name+0xaa>
 80161f0:	2d00      	cmp	r5, #0
 80161f2:	d0c7      	beq.n	8016184 <rcl_validate_topic_name+0xcc>
 80161f4:	2308      	movs	r3, #8
 80161f6:	6033      	str	r3, [r6, #0]
 80161f8:	2f00      	cmp	r7, #0
 80161fa:	d1ab      	bne.n	8016154 <rcl_validate_topic_name+0x9c>
 80161fc:	e7b1      	b.n	8016162 <rcl_validate_topic_name+0xaa>
 80161fe:	2d00      	cmp	r5, #0
 8016200:	d1f8      	bne.n	80161f4 <rcl_validate_topic_name+0x13c>
 8016202:	460b      	mov	r3, r1
 8016204:	2501      	movs	r5, #1
 8016206:	e7bd      	b.n	8016184 <rcl_validate_topic_name+0xcc>
 8016208:	2500      	movs	r5, #0
 801620a:	e7bb      	b.n	8016184 <rcl_validate_topic_name+0xcc>
 801620c:	2300      	movs	r3, #0
 801620e:	4618      	mov	r0, r3
 8016210:	6033      	str	r3, [r6, #0]
 8016212:	e77c      	b.n	801610e <rcl_validate_topic_name+0x56>
 8016214:	2205      	movs	r2, #5
 8016216:	6032      	str	r2, [r6, #0]
 8016218:	2f00      	cmp	r7, #0
 801621a:	d1d6      	bne.n	80161ca <rcl_validate_topic_name+0x112>
 801621c:	e7a1      	b.n	8016162 <rcl_validate_topic_name+0xaa>
 801621e:	2d00      	cmp	r5, #0
 8016220:	bf14      	ite	ne
 8016222:	2308      	movne	r3, #8
 8016224:	2303      	moveq	r3, #3
 8016226:	6033      	str	r3, [r6, #0]
 8016228:	2f00      	cmp	r7, #0
 801622a:	d193      	bne.n	8016154 <rcl_validate_topic_name+0x9c>
 801622c:	e799      	b.n	8016162 <rcl_validate_topic_name+0xaa>
 801622e:	2307      	movs	r3, #7
 8016230:	6033      	str	r3, [r6, #0]
 8016232:	2f00      	cmp	r7, #0
 8016234:	d095      	beq.n	8016162 <rcl_validate_topic_name+0xaa>
 8016236:	2301      	movs	r3, #1
 8016238:	e7c7      	b.n	80161ca <rcl_validate_topic_name+0x112>
 801623a:	bf00      	nop
 801623c:	080189a4 	.word	0x080189a4

08016240 <rcutils_string_array_fini>:
 8016240:	b328      	cbz	r0, 801628e <rcutils_string_array_fini+0x4e>
 8016242:	b570      	push	{r4, r5, r6, lr}
 8016244:	4604      	mov	r4, r0
 8016246:	6840      	ldr	r0, [r0, #4]
 8016248:	b1e0      	cbz	r0, 8016284 <rcutils_string_array_fini+0x44>
 801624a:	f104 0008 	add.w	r0, r4, #8
 801624e:	f7f4 fc2d 	bl	800aaac <rcutils_allocator_is_valid>
 8016252:	b1c0      	cbz	r0, 8016286 <rcutils_string_array_fini+0x46>
 8016254:	6823      	ldr	r3, [r4, #0]
 8016256:	b1c3      	cbz	r3, 801628a <rcutils_string_array_fini+0x4a>
 8016258:	2500      	movs	r5, #0
 801625a:	6860      	ldr	r0, [r4, #4]
 801625c:	462e      	mov	r6, r5
 801625e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016262:	68e3      	ldr	r3, [r4, #12]
 8016264:	69a1      	ldr	r1, [r4, #24]
 8016266:	4798      	blx	r3
 8016268:	e9d4 3000 	ldrd	r3, r0, [r4]
 801626c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016270:	3501      	adds	r5, #1
 8016272:	429d      	cmp	r5, r3
 8016274:	d3f3      	bcc.n	801625e <rcutils_string_array_fini+0x1e>
 8016276:	68e3      	ldr	r3, [r4, #12]
 8016278:	69a1      	ldr	r1, [r4, #24]
 801627a:	4798      	blx	r3
 801627c:	2300      	movs	r3, #0
 801627e:	4618      	mov	r0, r3
 8016280:	e9c4 3300 	strd	r3, r3, [r4]
 8016284:	bd70      	pop	{r4, r5, r6, pc}
 8016286:	200b      	movs	r0, #11
 8016288:	bd70      	pop	{r4, r5, r6, pc}
 801628a:	6860      	ldr	r0, [r4, #4]
 801628c:	e7f3      	b.n	8016276 <rcutils_string_array_fini+0x36>
 801628e:	200b      	movs	r0, #11
 8016290:	4770      	bx	lr
 8016292:	bf00      	nop

08016294 <on_status>:
 8016294:	b082      	sub	sp, #8
 8016296:	b002      	add	sp, #8
 8016298:	4770      	bx	lr
 801629a:	bf00      	nop

0801629c <on_topic>:
 801629c:	4a23      	ldr	r2, [pc, #140]	; (801632c <on_topic+0x90>)
 801629e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a2:	6812      	ldr	r2, [r2, #0]
 80162a4:	b094      	sub	sp, #80	; 0x50
 80162a6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80162a8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80162ac:	9113      	str	r1, [sp, #76]	; 0x4c
 80162ae:	9312      	str	r3, [sp, #72]	; 0x48
 80162b0:	b3c2      	cbz	r2, 8016324 <on_topic+0x88>
 80162b2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80162b6:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80162ba:	e001      	b.n	80162c0 <on_topic+0x24>
 80162bc:	6852      	ldr	r2, [r2, #4]
 80162be:	b38a      	cbz	r2, 8016324 <on_topic+0x88>
 80162c0:	6894      	ldr	r4, [r2, #8]
 80162c2:	8aa3      	ldrh	r3, [r4, #20]
 80162c4:	428b      	cmp	r3, r1
 80162c6:	d1f9      	bne.n	80162bc <on_topic+0x20>
 80162c8:	7da3      	ldrb	r3, [r4, #22]
 80162ca:	4283      	cmp	r3, r0
 80162cc:	d1f6      	bne.n	80162bc <on_topic+0x20>
 80162ce:	2248      	movs	r2, #72	; 0x48
 80162d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80162d4:	4668      	mov	r0, sp
 80162d6:	f000 fda8 	bl	8016e2a <memcpy>
 80162da:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80162de:	4620      	mov	r0, r4
 80162e0:	cb0c      	ldmia	r3, {r2, r3}
 80162e2:	f7f5 f81d 	bl	800b320 <rmw_uxrce_get_static_input_buffer_for_entity>
 80162e6:	4607      	mov	r7, r0
 80162e8:	b1e0      	cbz	r0, 8016324 <on_topic+0x88>
 80162ea:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80162ee:	462a      	mov	r2, r5
 80162f0:	4630      	mov	r0, r6
 80162f2:	f108 0110 	add.w	r1, r8, #16
 80162f6:	f7fd ffeb 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 80162fa:	b930      	cbnz	r0, 801630a <on_topic+0x6e>
 80162fc:	4639      	mov	r1, r7
 80162fe:	480c      	ldr	r0, [pc, #48]	; (8016330 <on_topic+0x94>)
 8016300:	b014      	add	sp, #80	; 0x50
 8016302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016306:	f7fc bd9d 	b.w	8012e44 <put_memory>
 801630a:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801630e:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8016312:	f7fd fed1 	bl	80140b8 <rmw_uros_epoch_nanos>
 8016316:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801631a:	2305      	movs	r3, #5
 801631c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016320:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8016324:	b014      	add	sp, #80	; 0x50
 8016326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801632a:	bf00      	nop
 801632c:	200134b8 	.word	0x200134b8
 8016330:	200134a8 	.word	0x200134a8

08016334 <on_request>:
 8016334:	4824      	ldr	r0, [pc, #144]	; (80163c8 <on_request+0x94>)
 8016336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801633a:	6800      	ldr	r0, [r0, #0]
 801633c:	b094      	sub	sp, #80	; 0x50
 801633e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016340:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8016344:	9113      	str	r1, [sp, #76]	; 0x4c
 8016346:	2800      	cmp	r0, #0
 8016348:	d03b      	beq.n	80163c2 <on_request+0x8e>
 801634a:	461d      	mov	r5, r3
 801634c:	e001      	b.n	8016352 <on_request+0x1e>
 801634e:	6840      	ldr	r0, [r0, #4]
 8016350:	b3b8      	cbz	r0, 80163c2 <on_request+0x8e>
 8016352:	6884      	ldr	r4, [r0, #8]
 8016354:	8b21      	ldrh	r1, [r4, #24]
 8016356:	4291      	cmp	r1, r2
 8016358:	d1f9      	bne.n	801634e <on_request+0x1a>
 801635a:	2248      	movs	r2, #72	; 0x48
 801635c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016360:	4668      	mov	r0, sp
 8016362:	f000 fd62 	bl	8016e2a <memcpy>
 8016366:	f104 0320 	add.w	r3, r4, #32
 801636a:	4620      	mov	r0, r4
 801636c:	cb0c      	ldmia	r3, {r2, r3}
 801636e:	f7f4 ffd7 	bl	800b320 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016372:	4680      	mov	r8, r0
 8016374:	b328      	cbz	r0, 80163c2 <on_request+0x8e>
 8016376:	4630      	mov	r0, r6
 8016378:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801637c:	463a      	mov	r2, r7
 801637e:	f106 0110 	add.w	r1, r6, #16
 8016382:	f7fd ffa5 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 8016386:	b930      	cbnz	r0, 8016396 <on_request+0x62>
 8016388:	4641      	mov	r1, r8
 801638a:	4810      	ldr	r0, [pc, #64]	; (80163cc <on_request+0x98>)
 801638c:	b014      	add	sp, #80	; 0x50
 801638e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016392:	f7fc bd57 	b.w	8012e44 <put_memory>
 8016396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016398:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801639c:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80163a0:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80163a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80163ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80163b0:	f7fd fe82 	bl	80140b8 <rmw_uros_epoch_nanos>
 80163b4:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 80163b8:	2303      	movs	r3, #3
 80163ba:	e942 0102 	strd	r0, r1, [r2, #-8]
 80163be:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80163c2:	b014      	add	sp, #80	; 0x50
 80163c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163c8:	20013488 	.word	0x20013488
 80163cc:	200134a8 	.word	0x200134a8

080163d0 <on_reply>:
 80163d0:	4822      	ldr	r0, [pc, #136]	; (801645c <on_reply+0x8c>)
 80163d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d6:	6800      	ldr	r0, [r0, #0]
 80163d8:	b094      	sub	sp, #80	; 0x50
 80163da:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80163dc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80163e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80163e2:	b3b8      	cbz	r0, 8016454 <on_reply+0x84>
 80163e4:	461d      	mov	r5, r3
 80163e6:	e001      	b.n	80163ec <on_reply+0x1c>
 80163e8:	6840      	ldr	r0, [r0, #4]
 80163ea:	b398      	cbz	r0, 8016454 <on_reply+0x84>
 80163ec:	6884      	ldr	r4, [r0, #8]
 80163ee:	8b21      	ldrh	r1, [r4, #24]
 80163f0:	4291      	cmp	r1, r2
 80163f2:	d1f9      	bne.n	80163e8 <on_reply+0x18>
 80163f4:	2248      	movs	r2, #72	; 0x48
 80163f6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80163fa:	4668      	mov	r0, sp
 80163fc:	f000 fd15 	bl	8016e2a <memcpy>
 8016400:	f104 0320 	add.w	r3, r4, #32
 8016404:	4620      	mov	r0, r4
 8016406:	cb0c      	ldmia	r3, {r2, r3}
 8016408:	f7f4 ff8a 	bl	800b320 <rmw_uxrce_get_static_input_buffer_for_entity>
 801640c:	4680      	mov	r8, r0
 801640e:	b308      	cbz	r0, 8016454 <on_reply+0x84>
 8016410:	4630      	mov	r0, r6
 8016412:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8016416:	463a      	mov	r2, r7
 8016418:	f106 0110 	add.w	r1, r6, #16
 801641c:	f7fd ff58 	bl	80142d0 <ucdr_deserialize_array_uint8_t>
 8016420:	b930      	cbnz	r0, 8016430 <on_reply+0x60>
 8016422:	4641      	mov	r1, r8
 8016424:	480e      	ldr	r0, [pc, #56]	; (8016460 <on_reply+0x90>)
 8016426:	b014      	add	sp, #80	; 0x50
 8016428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801642c:	f7fc bd0a 	b.w	8012e44 <put_memory>
 8016430:	2200      	movs	r2, #0
 8016432:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8016436:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801643a:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801643e:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 8016442:	f7fd fe39 	bl	80140b8 <rmw_uros_epoch_nanos>
 8016446:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801644a:	2304      	movs	r3, #4
 801644c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016450:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8016454:	b014      	add	sp, #80	; 0x50
 8016456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801645a:	bf00      	nop
 801645c:	2000e6d8 	.word	0x2000e6d8
 8016460:	200134a8 	.word	0x200134a8

08016464 <rmw_create_guard_condition>:
 8016464:	b538      	push	{r3, r4, r5, lr}
 8016466:	4605      	mov	r5, r0
 8016468:	4808      	ldr	r0, [pc, #32]	; (801648c <rmw_create_guard_condition+0x28>)
 801646a:	f7fc fcdb 	bl	8012e24 <get_memory>
 801646e:	4603      	mov	r3, r0
 8016470:	b148      	cbz	r0, 8016486 <rmw_create_guard_condition+0x22>
 8016472:	6884      	ldr	r4, [r0, #8]
 8016474:	2300      	movs	r3, #0
 8016476:	61e5      	str	r5, [r4, #28]
 8016478:	7423      	strb	r3, [r4, #16]
 801647a:	f7fc fd3b 	bl	8012ef4 <rmw_get_implementation_identifier>
 801647e:	f104 0314 	add.w	r3, r4, #20
 8016482:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016486:	4618      	mov	r0, r3
 8016488:	bd38      	pop	{r3, r4, r5, pc}
 801648a:	bf00      	nop
 801648c:	20013448 	.word	0x20013448

08016490 <rmw_destroy_guard_condition>:
 8016490:	b508      	push	{r3, lr}
 8016492:	4b08      	ldr	r3, [pc, #32]	; (80164b4 <rmw_destroy_guard_condition+0x24>)
 8016494:	6819      	ldr	r1, [r3, #0]
 8016496:	b911      	cbnz	r1, 801649e <rmw_destroy_guard_condition+0xe>
 8016498:	e00a      	b.n	80164b0 <rmw_destroy_guard_condition+0x20>
 801649a:	6849      	ldr	r1, [r1, #4]
 801649c:	b141      	cbz	r1, 80164b0 <rmw_destroy_guard_condition+0x20>
 801649e:	688b      	ldr	r3, [r1, #8]
 80164a0:	3314      	adds	r3, #20
 80164a2:	4298      	cmp	r0, r3
 80164a4:	d1f9      	bne.n	801649a <rmw_destroy_guard_condition+0xa>
 80164a6:	4803      	ldr	r0, [pc, #12]	; (80164b4 <rmw_destroy_guard_condition+0x24>)
 80164a8:	f7fc fccc 	bl	8012e44 <put_memory>
 80164ac:	2000      	movs	r0, #0
 80164ae:	bd08      	pop	{r3, pc}
 80164b0:	2001      	movs	r0, #1
 80164b2:	bd08      	pop	{r3, pc}
 80164b4:	20013448 	.word	0x20013448

080164b8 <calloc>:
 80164b8:	4b02      	ldr	r3, [pc, #8]	; (80164c4 <calloc+0xc>)
 80164ba:	460a      	mov	r2, r1
 80164bc:	4601      	mov	r1, r0
 80164be:	6818      	ldr	r0, [r3, #0]
 80164c0:	f000 b802 	b.w	80164c8 <_calloc_r>
 80164c4:	2000010c 	.word	0x2000010c

080164c8 <_calloc_r>:
 80164c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164ca:	fba1 2402 	umull	r2, r4, r1, r2
 80164ce:	b94c      	cbnz	r4, 80164e4 <_calloc_r+0x1c>
 80164d0:	4611      	mov	r1, r2
 80164d2:	9201      	str	r2, [sp, #4]
 80164d4:	f000 f886 	bl	80165e4 <_malloc_r>
 80164d8:	9a01      	ldr	r2, [sp, #4]
 80164da:	4605      	mov	r5, r0
 80164dc:	b930      	cbnz	r0, 80164ec <_calloc_r+0x24>
 80164de:	4628      	mov	r0, r5
 80164e0:	b003      	add	sp, #12
 80164e2:	bd30      	pop	{r4, r5, pc}
 80164e4:	220c      	movs	r2, #12
 80164e6:	6002      	str	r2, [r0, #0]
 80164e8:	2500      	movs	r5, #0
 80164ea:	e7f8      	b.n	80164de <_calloc_r+0x16>
 80164ec:	4621      	mov	r1, r4
 80164ee:	f000 fbd3 	bl	8016c98 <memset>
 80164f2:	e7f4      	b.n	80164de <_calloc_r+0x16>

080164f4 <getenv>:
 80164f4:	b507      	push	{r0, r1, r2, lr}
 80164f6:	4b04      	ldr	r3, [pc, #16]	; (8016508 <getenv+0x14>)
 80164f8:	4601      	mov	r1, r0
 80164fa:	aa01      	add	r2, sp, #4
 80164fc:	6818      	ldr	r0, [r3, #0]
 80164fe:	f000 f805 	bl	801650c <_findenv_r>
 8016502:	b003      	add	sp, #12
 8016504:	f85d fb04 	ldr.w	pc, [sp], #4
 8016508:	2000010c 	.word	0x2000010c

0801650c <_findenv_r>:
 801650c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016510:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016580 <_findenv_r+0x74>
 8016514:	4607      	mov	r7, r0
 8016516:	4689      	mov	r9, r1
 8016518:	4616      	mov	r6, r2
 801651a:	f000 fcb3 	bl	8016e84 <__env_lock>
 801651e:	f8da 4000 	ldr.w	r4, [sl]
 8016522:	b134      	cbz	r4, 8016532 <_findenv_r+0x26>
 8016524:	464b      	mov	r3, r9
 8016526:	4698      	mov	r8, r3
 8016528:	f813 2b01 	ldrb.w	r2, [r3], #1
 801652c:	b13a      	cbz	r2, 801653e <_findenv_r+0x32>
 801652e:	2a3d      	cmp	r2, #61	; 0x3d
 8016530:	d1f9      	bne.n	8016526 <_findenv_r+0x1a>
 8016532:	4638      	mov	r0, r7
 8016534:	f000 fcac 	bl	8016e90 <__env_unlock>
 8016538:	2000      	movs	r0, #0
 801653a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653e:	eba8 0809 	sub.w	r8, r8, r9
 8016542:	46a3      	mov	fp, r4
 8016544:	f854 0b04 	ldr.w	r0, [r4], #4
 8016548:	2800      	cmp	r0, #0
 801654a:	d0f2      	beq.n	8016532 <_findenv_r+0x26>
 801654c:	4642      	mov	r2, r8
 801654e:	4649      	mov	r1, r9
 8016550:	f000 fbb7 	bl	8016cc2 <strncmp>
 8016554:	2800      	cmp	r0, #0
 8016556:	d1f4      	bne.n	8016542 <_findenv_r+0x36>
 8016558:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801655c:	eb03 0508 	add.w	r5, r3, r8
 8016560:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016564:	2b3d      	cmp	r3, #61	; 0x3d
 8016566:	d1ec      	bne.n	8016542 <_findenv_r+0x36>
 8016568:	f8da 3000 	ldr.w	r3, [sl]
 801656c:	ebab 0303 	sub.w	r3, fp, r3
 8016570:	109b      	asrs	r3, r3, #2
 8016572:	4638      	mov	r0, r7
 8016574:	6033      	str	r3, [r6, #0]
 8016576:	f000 fc8b 	bl	8016e90 <__env_unlock>
 801657a:	1c68      	adds	r0, r5, #1
 801657c:	e7dd      	b.n	801653a <_findenv_r+0x2e>
 801657e:	bf00      	nop
 8016580:	20000000 	.word	0x20000000

08016584 <malloc>:
 8016584:	4b02      	ldr	r3, [pc, #8]	; (8016590 <malloc+0xc>)
 8016586:	4601      	mov	r1, r0
 8016588:	6818      	ldr	r0, [r3, #0]
 801658a:	f000 b82b 	b.w	80165e4 <_malloc_r>
 801658e:	bf00      	nop
 8016590:	2000010c 	.word	0x2000010c

08016594 <free>:
 8016594:	4b02      	ldr	r3, [pc, #8]	; (80165a0 <free+0xc>)
 8016596:	4601      	mov	r1, r0
 8016598:	6818      	ldr	r0, [r3, #0]
 801659a:	f000 bc7f 	b.w	8016e9c <_free_r>
 801659e:	bf00      	nop
 80165a0:	2000010c 	.word	0x2000010c

080165a4 <sbrk_aligned>:
 80165a4:	b570      	push	{r4, r5, r6, lr}
 80165a6:	4e0e      	ldr	r6, [pc, #56]	; (80165e0 <sbrk_aligned+0x3c>)
 80165a8:	460c      	mov	r4, r1
 80165aa:	6831      	ldr	r1, [r6, #0]
 80165ac:	4605      	mov	r5, r0
 80165ae:	b911      	cbnz	r1, 80165b6 <sbrk_aligned+0x12>
 80165b0:	f000 fbe4 	bl	8016d7c <_sbrk_r>
 80165b4:	6030      	str	r0, [r6, #0]
 80165b6:	4621      	mov	r1, r4
 80165b8:	4628      	mov	r0, r5
 80165ba:	f000 fbdf 	bl	8016d7c <_sbrk_r>
 80165be:	1c43      	adds	r3, r0, #1
 80165c0:	d00a      	beq.n	80165d8 <sbrk_aligned+0x34>
 80165c2:	1cc4      	adds	r4, r0, #3
 80165c4:	f024 0403 	bic.w	r4, r4, #3
 80165c8:	42a0      	cmp	r0, r4
 80165ca:	d007      	beq.n	80165dc <sbrk_aligned+0x38>
 80165cc:	1a21      	subs	r1, r4, r0
 80165ce:	4628      	mov	r0, r5
 80165d0:	f000 fbd4 	bl	8016d7c <_sbrk_r>
 80165d4:	3001      	adds	r0, #1
 80165d6:	d101      	bne.n	80165dc <sbrk_aligned+0x38>
 80165d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80165dc:	4620      	mov	r0, r4
 80165de:	bd70      	pop	{r4, r5, r6, pc}
 80165e0:	20013674 	.word	0x20013674

080165e4 <_malloc_r>:
 80165e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165e8:	1ccd      	adds	r5, r1, #3
 80165ea:	f025 0503 	bic.w	r5, r5, #3
 80165ee:	3508      	adds	r5, #8
 80165f0:	2d0c      	cmp	r5, #12
 80165f2:	bf38      	it	cc
 80165f4:	250c      	movcc	r5, #12
 80165f6:	2d00      	cmp	r5, #0
 80165f8:	4607      	mov	r7, r0
 80165fa:	db01      	blt.n	8016600 <_malloc_r+0x1c>
 80165fc:	42a9      	cmp	r1, r5
 80165fe:	d905      	bls.n	801660c <_malloc_r+0x28>
 8016600:	230c      	movs	r3, #12
 8016602:	603b      	str	r3, [r7, #0]
 8016604:	2600      	movs	r6, #0
 8016606:	4630      	mov	r0, r6
 8016608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801660c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80166e0 <_malloc_r+0xfc>
 8016610:	f000 f868 	bl	80166e4 <__malloc_lock>
 8016614:	f8d8 3000 	ldr.w	r3, [r8]
 8016618:	461c      	mov	r4, r3
 801661a:	bb5c      	cbnz	r4, 8016674 <_malloc_r+0x90>
 801661c:	4629      	mov	r1, r5
 801661e:	4638      	mov	r0, r7
 8016620:	f7ff ffc0 	bl	80165a4 <sbrk_aligned>
 8016624:	1c43      	adds	r3, r0, #1
 8016626:	4604      	mov	r4, r0
 8016628:	d155      	bne.n	80166d6 <_malloc_r+0xf2>
 801662a:	f8d8 4000 	ldr.w	r4, [r8]
 801662e:	4626      	mov	r6, r4
 8016630:	2e00      	cmp	r6, #0
 8016632:	d145      	bne.n	80166c0 <_malloc_r+0xdc>
 8016634:	2c00      	cmp	r4, #0
 8016636:	d048      	beq.n	80166ca <_malloc_r+0xe6>
 8016638:	6823      	ldr	r3, [r4, #0]
 801663a:	4631      	mov	r1, r6
 801663c:	4638      	mov	r0, r7
 801663e:	eb04 0903 	add.w	r9, r4, r3
 8016642:	f000 fb9b 	bl	8016d7c <_sbrk_r>
 8016646:	4581      	cmp	r9, r0
 8016648:	d13f      	bne.n	80166ca <_malloc_r+0xe6>
 801664a:	6821      	ldr	r1, [r4, #0]
 801664c:	1a6d      	subs	r5, r5, r1
 801664e:	4629      	mov	r1, r5
 8016650:	4638      	mov	r0, r7
 8016652:	f7ff ffa7 	bl	80165a4 <sbrk_aligned>
 8016656:	3001      	adds	r0, #1
 8016658:	d037      	beq.n	80166ca <_malloc_r+0xe6>
 801665a:	6823      	ldr	r3, [r4, #0]
 801665c:	442b      	add	r3, r5
 801665e:	6023      	str	r3, [r4, #0]
 8016660:	f8d8 3000 	ldr.w	r3, [r8]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d038      	beq.n	80166da <_malloc_r+0xf6>
 8016668:	685a      	ldr	r2, [r3, #4]
 801666a:	42a2      	cmp	r2, r4
 801666c:	d12b      	bne.n	80166c6 <_malloc_r+0xe2>
 801666e:	2200      	movs	r2, #0
 8016670:	605a      	str	r2, [r3, #4]
 8016672:	e00f      	b.n	8016694 <_malloc_r+0xb0>
 8016674:	6822      	ldr	r2, [r4, #0]
 8016676:	1b52      	subs	r2, r2, r5
 8016678:	d41f      	bmi.n	80166ba <_malloc_r+0xd6>
 801667a:	2a0b      	cmp	r2, #11
 801667c:	d917      	bls.n	80166ae <_malloc_r+0xca>
 801667e:	1961      	adds	r1, r4, r5
 8016680:	42a3      	cmp	r3, r4
 8016682:	6025      	str	r5, [r4, #0]
 8016684:	bf18      	it	ne
 8016686:	6059      	strne	r1, [r3, #4]
 8016688:	6863      	ldr	r3, [r4, #4]
 801668a:	bf08      	it	eq
 801668c:	f8c8 1000 	streq.w	r1, [r8]
 8016690:	5162      	str	r2, [r4, r5]
 8016692:	604b      	str	r3, [r1, #4]
 8016694:	4638      	mov	r0, r7
 8016696:	f104 060b 	add.w	r6, r4, #11
 801669a:	f000 f829 	bl	80166f0 <__malloc_unlock>
 801669e:	f026 0607 	bic.w	r6, r6, #7
 80166a2:	1d23      	adds	r3, r4, #4
 80166a4:	1af2      	subs	r2, r6, r3
 80166a6:	d0ae      	beq.n	8016606 <_malloc_r+0x22>
 80166a8:	1b9b      	subs	r3, r3, r6
 80166aa:	50a3      	str	r3, [r4, r2]
 80166ac:	e7ab      	b.n	8016606 <_malloc_r+0x22>
 80166ae:	42a3      	cmp	r3, r4
 80166b0:	6862      	ldr	r2, [r4, #4]
 80166b2:	d1dd      	bne.n	8016670 <_malloc_r+0x8c>
 80166b4:	f8c8 2000 	str.w	r2, [r8]
 80166b8:	e7ec      	b.n	8016694 <_malloc_r+0xb0>
 80166ba:	4623      	mov	r3, r4
 80166bc:	6864      	ldr	r4, [r4, #4]
 80166be:	e7ac      	b.n	801661a <_malloc_r+0x36>
 80166c0:	4634      	mov	r4, r6
 80166c2:	6876      	ldr	r6, [r6, #4]
 80166c4:	e7b4      	b.n	8016630 <_malloc_r+0x4c>
 80166c6:	4613      	mov	r3, r2
 80166c8:	e7cc      	b.n	8016664 <_malloc_r+0x80>
 80166ca:	230c      	movs	r3, #12
 80166cc:	603b      	str	r3, [r7, #0]
 80166ce:	4638      	mov	r0, r7
 80166d0:	f000 f80e 	bl	80166f0 <__malloc_unlock>
 80166d4:	e797      	b.n	8016606 <_malloc_r+0x22>
 80166d6:	6025      	str	r5, [r4, #0]
 80166d8:	e7dc      	b.n	8016694 <_malloc_r+0xb0>
 80166da:	605b      	str	r3, [r3, #4]
 80166dc:	deff      	udf	#255	; 0xff
 80166de:	bf00      	nop
 80166e0:	20013670 	.word	0x20013670

080166e4 <__malloc_lock>:
 80166e4:	4801      	ldr	r0, [pc, #4]	; (80166ec <__malloc_lock+0x8>)
 80166e6:	f000 bb96 	b.w	8016e16 <__retarget_lock_acquire_recursive>
 80166ea:	bf00      	nop
 80166ec:	200137b9 	.word	0x200137b9

080166f0 <__malloc_unlock>:
 80166f0:	4801      	ldr	r0, [pc, #4]	; (80166f8 <__malloc_unlock+0x8>)
 80166f2:	f000 bb91 	b.w	8016e18 <__retarget_lock_release_recursive>
 80166f6:	bf00      	nop
 80166f8:	200137b9 	.word	0x200137b9

080166fc <srand>:
 80166fc:	b538      	push	{r3, r4, r5, lr}
 80166fe:	4b10      	ldr	r3, [pc, #64]	; (8016740 <srand+0x44>)
 8016700:	681d      	ldr	r5, [r3, #0]
 8016702:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016704:	4604      	mov	r4, r0
 8016706:	b9b3      	cbnz	r3, 8016736 <srand+0x3a>
 8016708:	2018      	movs	r0, #24
 801670a:	f7ff ff3b 	bl	8016584 <malloc>
 801670e:	4602      	mov	r2, r0
 8016710:	6328      	str	r0, [r5, #48]	; 0x30
 8016712:	b920      	cbnz	r0, 801671e <srand+0x22>
 8016714:	4b0b      	ldr	r3, [pc, #44]	; (8016744 <srand+0x48>)
 8016716:	480c      	ldr	r0, [pc, #48]	; (8016748 <srand+0x4c>)
 8016718:	2146      	movs	r1, #70	; 0x46
 801671a:	f000 fb95 	bl	8016e48 <__assert_func>
 801671e:	490b      	ldr	r1, [pc, #44]	; (801674c <srand+0x50>)
 8016720:	4b0b      	ldr	r3, [pc, #44]	; (8016750 <srand+0x54>)
 8016722:	e9c0 1300 	strd	r1, r3, [r0]
 8016726:	4b0b      	ldr	r3, [pc, #44]	; (8016754 <srand+0x58>)
 8016728:	6083      	str	r3, [r0, #8]
 801672a:	230b      	movs	r3, #11
 801672c:	8183      	strh	r3, [r0, #12]
 801672e:	2100      	movs	r1, #0
 8016730:	2001      	movs	r0, #1
 8016732:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016736:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016738:	2200      	movs	r2, #0
 801673a:	611c      	str	r4, [r3, #16]
 801673c:	615a      	str	r2, [r3, #20]
 801673e:	bd38      	pop	{r3, r4, r5, pc}
 8016740:	2000010c 	.word	0x2000010c
 8016744:	08018934 	.word	0x08018934
 8016748:	0801894b 	.word	0x0801894b
 801674c:	abcd330e 	.word	0xabcd330e
 8016750:	e66d1234 	.word	0xe66d1234
 8016754:	0005deec 	.word	0x0005deec

08016758 <rand>:
 8016758:	4b16      	ldr	r3, [pc, #88]	; (80167b4 <rand+0x5c>)
 801675a:	b510      	push	{r4, lr}
 801675c:	681c      	ldr	r4, [r3, #0]
 801675e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016760:	b9b3      	cbnz	r3, 8016790 <rand+0x38>
 8016762:	2018      	movs	r0, #24
 8016764:	f7ff ff0e 	bl	8016584 <malloc>
 8016768:	4602      	mov	r2, r0
 801676a:	6320      	str	r0, [r4, #48]	; 0x30
 801676c:	b920      	cbnz	r0, 8016778 <rand+0x20>
 801676e:	4b12      	ldr	r3, [pc, #72]	; (80167b8 <rand+0x60>)
 8016770:	4812      	ldr	r0, [pc, #72]	; (80167bc <rand+0x64>)
 8016772:	2152      	movs	r1, #82	; 0x52
 8016774:	f000 fb68 	bl	8016e48 <__assert_func>
 8016778:	4911      	ldr	r1, [pc, #68]	; (80167c0 <rand+0x68>)
 801677a:	4b12      	ldr	r3, [pc, #72]	; (80167c4 <rand+0x6c>)
 801677c:	e9c0 1300 	strd	r1, r3, [r0]
 8016780:	4b11      	ldr	r3, [pc, #68]	; (80167c8 <rand+0x70>)
 8016782:	6083      	str	r3, [r0, #8]
 8016784:	230b      	movs	r3, #11
 8016786:	8183      	strh	r3, [r0, #12]
 8016788:	2100      	movs	r1, #0
 801678a:	2001      	movs	r0, #1
 801678c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016790:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016792:	480e      	ldr	r0, [pc, #56]	; (80167cc <rand+0x74>)
 8016794:	690b      	ldr	r3, [r1, #16]
 8016796:	694c      	ldr	r4, [r1, #20]
 8016798:	4a0d      	ldr	r2, [pc, #52]	; (80167d0 <rand+0x78>)
 801679a:	4358      	muls	r0, r3
 801679c:	fb02 0004 	mla	r0, r2, r4, r0
 80167a0:	fba3 3202 	umull	r3, r2, r3, r2
 80167a4:	3301      	adds	r3, #1
 80167a6:	eb40 0002 	adc.w	r0, r0, r2
 80167aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80167ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80167b2:	bd10      	pop	{r4, pc}
 80167b4:	2000010c 	.word	0x2000010c
 80167b8:	08018934 	.word	0x08018934
 80167bc:	0801894b 	.word	0x0801894b
 80167c0:	abcd330e 	.word	0xabcd330e
 80167c4:	e66d1234 	.word	0xe66d1234
 80167c8:	0005deec 	.word	0x0005deec
 80167cc:	5851f42d 	.word	0x5851f42d
 80167d0:	4c957f2d 	.word	0x4c957f2d

080167d4 <realloc>:
 80167d4:	4b02      	ldr	r3, [pc, #8]	; (80167e0 <realloc+0xc>)
 80167d6:	460a      	mov	r2, r1
 80167d8:	4601      	mov	r1, r0
 80167da:	6818      	ldr	r0, [r3, #0]
 80167dc:	f000 b802 	b.w	80167e4 <_realloc_r>
 80167e0:	2000010c 	.word	0x2000010c

080167e4 <_realloc_r>:
 80167e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e8:	4680      	mov	r8, r0
 80167ea:	4614      	mov	r4, r2
 80167ec:	460e      	mov	r6, r1
 80167ee:	b921      	cbnz	r1, 80167fa <_realloc_r+0x16>
 80167f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167f4:	4611      	mov	r1, r2
 80167f6:	f7ff bef5 	b.w	80165e4 <_malloc_r>
 80167fa:	b92a      	cbnz	r2, 8016808 <_realloc_r+0x24>
 80167fc:	f000 fb4e 	bl	8016e9c <_free_r>
 8016800:	4625      	mov	r5, r4
 8016802:	4628      	mov	r0, r5
 8016804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016808:	f000 fb94 	bl	8016f34 <_malloc_usable_size_r>
 801680c:	4284      	cmp	r4, r0
 801680e:	4607      	mov	r7, r0
 8016810:	d802      	bhi.n	8016818 <_realloc_r+0x34>
 8016812:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016816:	d812      	bhi.n	801683e <_realloc_r+0x5a>
 8016818:	4621      	mov	r1, r4
 801681a:	4640      	mov	r0, r8
 801681c:	f7ff fee2 	bl	80165e4 <_malloc_r>
 8016820:	4605      	mov	r5, r0
 8016822:	2800      	cmp	r0, #0
 8016824:	d0ed      	beq.n	8016802 <_realloc_r+0x1e>
 8016826:	42bc      	cmp	r4, r7
 8016828:	4622      	mov	r2, r4
 801682a:	4631      	mov	r1, r6
 801682c:	bf28      	it	cs
 801682e:	463a      	movcs	r2, r7
 8016830:	f000 fafb 	bl	8016e2a <memcpy>
 8016834:	4631      	mov	r1, r6
 8016836:	4640      	mov	r0, r8
 8016838:	f000 fb30 	bl	8016e9c <_free_r>
 801683c:	e7e1      	b.n	8016802 <_realloc_r+0x1e>
 801683e:	4635      	mov	r5, r6
 8016840:	e7df      	b.n	8016802 <_realloc_r+0x1e>
	...

08016844 <_strtoul_l.constprop.0>:
 8016844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016848:	4f36      	ldr	r7, [pc, #216]	; (8016924 <_strtoul_l.constprop.0+0xe0>)
 801684a:	4686      	mov	lr, r0
 801684c:	460d      	mov	r5, r1
 801684e:	4628      	mov	r0, r5
 8016850:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016854:	5d3e      	ldrb	r6, [r7, r4]
 8016856:	f016 0608 	ands.w	r6, r6, #8
 801685a:	d1f8      	bne.n	801684e <_strtoul_l.constprop.0+0xa>
 801685c:	2c2d      	cmp	r4, #45	; 0x2d
 801685e:	d130      	bne.n	80168c2 <_strtoul_l.constprop.0+0x7e>
 8016860:	782c      	ldrb	r4, [r5, #0]
 8016862:	2601      	movs	r6, #1
 8016864:	1c85      	adds	r5, r0, #2
 8016866:	2b00      	cmp	r3, #0
 8016868:	d057      	beq.n	801691a <_strtoul_l.constprop.0+0xd6>
 801686a:	2b10      	cmp	r3, #16
 801686c:	d109      	bne.n	8016882 <_strtoul_l.constprop.0+0x3e>
 801686e:	2c30      	cmp	r4, #48	; 0x30
 8016870:	d107      	bne.n	8016882 <_strtoul_l.constprop.0+0x3e>
 8016872:	7828      	ldrb	r0, [r5, #0]
 8016874:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016878:	2858      	cmp	r0, #88	; 0x58
 801687a:	d149      	bne.n	8016910 <_strtoul_l.constprop.0+0xcc>
 801687c:	786c      	ldrb	r4, [r5, #1]
 801687e:	2310      	movs	r3, #16
 8016880:	3502      	adds	r5, #2
 8016882:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016886:	2700      	movs	r7, #0
 8016888:	fbb8 f8f3 	udiv	r8, r8, r3
 801688c:	fb03 f908 	mul.w	r9, r3, r8
 8016890:	ea6f 0909 	mvn.w	r9, r9
 8016894:	4638      	mov	r0, r7
 8016896:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801689a:	f1bc 0f09 	cmp.w	ip, #9
 801689e:	d815      	bhi.n	80168cc <_strtoul_l.constprop.0+0x88>
 80168a0:	4664      	mov	r4, ip
 80168a2:	42a3      	cmp	r3, r4
 80168a4:	dd23      	ble.n	80168ee <_strtoul_l.constprop.0+0xaa>
 80168a6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80168aa:	d007      	beq.n	80168bc <_strtoul_l.constprop.0+0x78>
 80168ac:	4580      	cmp	r8, r0
 80168ae:	d31b      	bcc.n	80168e8 <_strtoul_l.constprop.0+0xa4>
 80168b0:	d101      	bne.n	80168b6 <_strtoul_l.constprop.0+0x72>
 80168b2:	45a1      	cmp	r9, r4
 80168b4:	db18      	blt.n	80168e8 <_strtoul_l.constprop.0+0xa4>
 80168b6:	fb00 4003 	mla	r0, r0, r3, r4
 80168ba:	2701      	movs	r7, #1
 80168bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168c0:	e7e9      	b.n	8016896 <_strtoul_l.constprop.0+0x52>
 80168c2:	2c2b      	cmp	r4, #43	; 0x2b
 80168c4:	bf04      	itt	eq
 80168c6:	782c      	ldrbeq	r4, [r5, #0]
 80168c8:	1c85      	addeq	r5, r0, #2
 80168ca:	e7cc      	b.n	8016866 <_strtoul_l.constprop.0+0x22>
 80168cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80168d0:	f1bc 0f19 	cmp.w	ip, #25
 80168d4:	d801      	bhi.n	80168da <_strtoul_l.constprop.0+0x96>
 80168d6:	3c37      	subs	r4, #55	; 0x37
 80168d8:	e7e3      	b.n	80168a2 <_strtoul_l.constprop.0+0x5e>
 80168da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80168de:	f1bc 0f19 	cmp.w	ip, #25
 80168e2:	d804      	bhi.n	80168ee <_strtoul_l.constprop.0+0xaa>
 80168e4:	3c57      	subs	r4, #87	; 0x57
 80168e6:	e7dc      	b.n	80168a2 <_strtoul_l.constprop.0+0x5e>
 80168e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80168ec:	e7e6      	b.n	80168bc <_strtoul_l.constprop.0+0x78>
 80168ee:	1c7b      	adds	r3, r7, #1
 80168f0:	d106      	bne.n	8016900 <_strtoul_l.constprop.0+0xbc>
 80168f2:	2322      	movs	r3, #34	; 0x22
 80168f4:	f8ce 3000 	str.w	r3, [lr]
 80168f8:	4638      	mov	r0, r7
 80168fa:	b932      	cbnz	r2, 801690a <_strtoul_l.constprop.0+0xc6>
 80168fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016900:	b106      	cbz	r6, 8016904 <_strtoul_l.constprop.0+0xc0>
 8016902:	4240      	negs	r0, r0
 8016904:	2a00      	cmp	r2, #0
 8016906:	d0f9      	beq.n	80168fc <_strtoul_l.constprop.0+0xb8>
 8016908:	b107      	cbz	r7, 801690c <_strtoul_l.constprop.0+0xc8>
 801690a:	1e69      	subs	r1, r5, #1
 801690c:	6011      	str	r1, [r2, #0]
 801690e:	e7f5      	b.n	80168fc <_strtoul_l.constprop.0+0xb8>
 8016910:	2430      	movs	r4, #48	; 0x30
 8016912:	2b00      	cmp	r3, #0
 8016914:	d1b5      	bne.n	8016882 <_strtoul_l.constprop.0+0x3e>
 8016916:	2308      	movs	r3, #8
 8016918:	e7b3      	b.n	8016882 <_strtoul_l.constprop.0+0x3e>
 801691a:	2c30      	cmp	r4, #48	; 0x30
 801691c:	d0a9      	beq.n	8016872 <_strtoul_l.constprop.0+0x2e>
 801691e:	230a      	movs	r3, #10
 8016920:	e7af      	b.n	8016882 <_strtoul_l.constprop.0+0x3e>
 8016922:	bf00      	nop
 8016924:	080189a4 	.word	0x080189a4

08016928 <strtoul>:
 8016928:	4613      	mov	r3, r2
 801692a:	460a      	mov	r2, r1
 801692c:	4601      	mov	r1, r0
 801692e:	4802      	ldr	r0, [pc, #8]	; (8016938 <strtoul+0x10>)
 8016930:	6800      	ldr	r0, [r0, #0]
 8016932:	f7ff bf87 	b.w	8016844 <_strtoul_l.constprop.0>
 8016936:	bf00      	nop
 8016938:	2000010c 	.word	0x2000010c

0801693c <std>:
 801693c:	2300      	movs	r3, #0
 801693e:	b510      	push	{r4, lr}
 8016940:	4604      	mov	r4, r0
 8016942:	e9c0 3300 	strd	r3, r3, [r0]
 8016946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801694a:	6083      	str	r3, [r0, #8]
 801694c:	8181      	strh	r1, [r0, #12]
 801694e:	6643      	str	r3, [r0, #100]	; 0x64
 8016950:	81c2      	strh	r2, [r0, #14]
 8016952:	6183      	str	r3, [r0, #24]
 8016954:	4619      	mov	r1, r3
 8016956:	2208      	movs	r2, #8
 8016958:	305c      	adds	r0, #92	; 0x5c
 801695a:	f000 f99d 	bl	8016c98 <memset>
 801695e:	4b0d      	ldr	r3, [pc, #52]	; (8016994 <std+0x58>)
 8016960:	6263      	str	r3, [r4, #36]	; 0x24
 8016962:	4b0d      	ldr	r3, [pc, #52]	; (8016998 <std+0x5c>)
 8016964:	62a3      	str	r3, [r4, #40]	; 0x28
 8016966:	4b0d      	ldr	r3, [pc, #52]	; (801699c <std+0x60>)
 8016968:	62e3      	str	r3, [r4, #44]	; 0x2c
 801696a:	4b0d      	ldr	r3, [pc, #52]	; (80169a0 <std+0x64>)
 801696c:	6323      	str	r3, [r4, #48]	; 0x30
 801696e:	4b0d      	ldr	r3, [pc, #52]	; (80169a4 <std+0x68>)
 8016970:	6224      	str	r4, [r4, #32]
 8016972:	429c      	cmp	r4, r3
 8016974:	d006      	beq.n	8016984 <std+0x48>
 8016976:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801697a:	4294      	cmp	r4, r2
 801697c:	d002      	beq.n	8016984 <std+0x48>
 801697e:	33d0      	adds	r3, #208	; 0xd0
 8016980:	429c      	cmp	r4, r3
 8016982:	d105      	bne.n	8016990 <std+0x54>
 8016984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801698c:	f000 ba42 	b.w	8016e14 <__retarget_lock_init_recursive>
 8016990:	bd10      	pop	{r4, pc}
 8016992:	bf00      	nop
 8016994:	08016b4d 	.word	0x08016b4d
 8016998:	08016b6f 	.word	0x08016b6f
 801699c:	08016ba7 	.word	0x08016ba7
 80169a0:	08016bcb 	.word	0x08016bcb
 80169a4:	20013678 	.word	0x20013678

080169a8 <stdio_exit_handler>:
 80169a8:	4a02      	ldr	r2, [pc, #8]	; (80169b4 <stdio_exit_handler+0xc>)
 80169aa:	4903      	ldr	r1, [pc, #12]	; (80169b8 <stdio_exit_handler+0x10>)
 80169ac:	4803      	ldr	r0, [pc, #12]	; (80169bc <stdio_exit_handler+0x14>)
 80169ae:	f000 b869 	b.w	8016a84 <_fwalk_sglue>
 80169b2:	bf00      	nop
 80169b4:	200000b4 	.word	0x200000b4
 80169b8:	080178a9 	.word	0x080178a9
 80169bc:	200000c0 	.word	0x200000c0

080169c0 <cleanup_stdio>:
 80169c0:	6841      	ldr	r1, [r0, #4]
 80169c2:	4b0c      	ldr	r3, [pc, #48]	; (80169f4 <cleanup_stdio+0x34>)
 80169c4:	4299      	cmp	r1, r3
 80169c6:	b510      	push	{r4, lr}
 80169c8:	4604      	mov	r4, r0
 80169ca:	d001      	beq.n	80169d0 <cleanup_stdio+0x10>
 80169cc:	f000 ff6c 	bl	80178a8 <_fflush_r>
 80169d0:	68a1      	ldr	r1, [r4, #8]
 80169d2:	4b09      	ldr	r3, [pc, #36]	; (80169f8 <cleanup_stdio+0x38>)
 80169d4:	4299      	cmp	r1, r3
 80169d6:	d002      	beq.n	80169de <cleanup_stdio+0x1e>
 80169d8:	4620      	mov	r0, r4
 80169da:	f000 ff65 	bl	80178a8 <_fflush_r>
 80169de:	68e1      	ldr	r1, [r4, #12]
 80169e0:	4b06      	ldr	r3, [pc, #24]	; (80169fc <cleanup_stdio+0x3c>)
 80169e2:	4299      	cmp	r1, r3
 80169e4:	d004      	beq.n	80169f0 <cleanup_stdio+0x30>
 80169e6:	4620      	mov	r0, r4
 80169e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169ec:	f000 bf5c 	b.w	80178a8 <_fflush_r>
 80169f0:	bd10      	pop	{r4, pc}
 80169f2:	bf00      	nop
 80169f4:	20013678 	.word	0x20013678
 80169f8:	200136e0 	.word	0x200136e0
 80169fc:	20013748 	.word	0x20013748

08016a00 <global_stdio_init.part.0>:
 8016a00:	b510      	push	{r4, lr}
 8016a02:	4b0b      	ldr	r3, [pc, #44]	; (8016a30 <global_stdio_init.part.0+0x30>)
 8016a04:	4c0b      	ldr	r4, [pc, #44]	; (8016a34 <global_stdio_init.part.0+0x34>)
 8016a06:	4a0c      	ldr	r2, [pc, #48]	; (8016a38 <global_stdio_init.part.0+0x38>)
 8016a08:	601a      	str	r2, [r3, #0]
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	2104      	movs	r1, #4
 8016a10:	f7ff ff94 	bl	801693c <std>
 8016a14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016a18:	2201      	movs	r2, #1
 8016a1a:	2109      	movs	r1, #9
 8016a1c:	f7ff ff8e 	bl	801693c <std>
 8016a20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016a24:	2202      	movs	r2, #2
 8016a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a2a:	2112      	movs	r1, #18
 8016a2c:	f7ff bf86 	b.w	801693c <std>
 8016a30:	200137b0 	.word	0x200137b0
 8016a34:	20013678 	.word	0x20013678
 8016a38:	080169a9 	.word	0x080169a9

08016a3c <__sfp_lock_acquire>:
 8016a3c:	4801      	ldr	r0, [pc, #4]	; (8016a44 <__sfp_lock_acquire+0x8>)
 8016a3e:	f000 b9ea 	b.w	8016e16 <__retarget_lock_acquire_recursive>
 8016a42:	bf00      	nop
 8016a44:	200137ba 	.word	0x200137ba

08016a48 <__sfp_lock_release>:
 8016a48:	4801      	ldr	r0, [pc, #4]	; (8016a50 <__sfp_lock_release+0x8>)
 8016a4a:	f000 b9e5 	b.w	8016e18 <__retarget_lock_release_recursive>
 8016a4e:	bf00      	nop
 8016a50:	200137ba 	.word	0x200137ba

08016a54 <__sinit>:
 8016a54:	b510      	push	{r4, lr}
 8016a56:	4604      	mov	r4, r0
 8016a58:	f7ff fff0 	bl	8016a3c <__sfp_lock_acquire>
 8016a5c:	6a23      	ldr	r3, [r4, #32]
 8016a5e:	b11b      	cbz	r3, 8016a68 <__sinit+0x14>
 8016a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a64:	f7ff bff0 	b.w	8016a48 <__sfp_lock_release>
 8016a68:	4b04      	ldr	r3, [pc, #16]	; (8016a7c <__sinit+0x28>)
 8016a6a:	6223      	str	r3, [r4, #32]
 8016a6c:	4b04      	ldr	r3, [pc, #16]	; (8016a80 <__sinit+0x2c>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d1f5      	bne.n	8016a60 <__sinit+0xc>
 8016a74:	f7ff ffc4 	bl	8016a00 <global_stdio_init.part.0>
 8016a78:	e7f2      	b.n	8016a60 <__sinit+0xc>
 8016a7a:	bf00      	nop
 8016a7c:	080169c1 	.word	0x080169c1
 8016a80:	200137b0 	.word	0x200137b0

08016a84 <_fwalk_sglue>:
 8016a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a88:	4607      	mov	r7, r0
 8016a8a:	4688      	mov	r8, r1
 8016a8c:	4614      	mov	r4, r2
 8016a8e:	2600      	movs	r6, #0
 8016a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a94:	f1b9 0901 	subs.w	r9, r9, #1
 8016a98:	d505      	bpl.n	8016aa6 <_fwalk_sglue+0x22>
 8016a9a:	6824      	ldr	r4, [r4, #0]
 8016a9c:	2c00      	cmp	r4, #0
 8016a9e:	d1f7      	bne.n	8016a90 <_fwalk_sglue+0xc>
 8016aa0:	4630      	mov	r0, r6
 8016aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016aa6:	89ab      	ldrh	r3, [r5, #12]
 8016aa8:	2b01      	cmp	r3, #1
 8016aaa:	d907      	bls.n	8016abc <_fwalk_sglue+0x38>
 8016aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	d003      	beq.n	8016abc <_fwalk_sglue+0x38>
 8016ab4:	4629      	mov	r1, r5
 8016ab6:	4638      	mov	r0, r7
 8016ab8:	47c0      	blx	r8
 8016aba:	4306      	orrs	r6, r0
 8016abc:	3568      	adds	r5, #104	; 0x68
 8016abe:	e7e9      	b.n	8016a94 <_fwalk_sglue+0x10>

08016ac0 <iprintf>:
 8016ac0:	b40f      	push	{r0, r1, r2, r3}
 8016ac2:	b507      	push	{r0, r1, r2, lr}
 8016ac4:	4906      	ldr	r1, [pc, #24]	; (8016ae0 <iprintf+0x20>)
 8016ac6:	ab04      	add	r3, sp, #16
 8016ac8:	6808      	ldr	r0, [r1, #0]
 8016aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ace:	6881      	ldr	r1, [r0, #8]
 8016ad0:	9301      	str	r3, [sp, #4]
 8016ad2:	f000 fbb9 	bl	8017248 <_vfiprintf_r>
 8016ad6:	b003      	add	sp, #12
 8016ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016adc:	b004      	add	sp, #16
 8016ade:	4770      	bx	lr
 8016ae0:	2000010c 	.word	0x2000010c

08016ae4 <sniprintf>:
 8016ae4:	b40c      	push	{r2, r3}
 8016ae6:	b530      	push	{r4, r5, lr}
 8016ae8:	4b17      	ldr	r3, [pc, #92]	; (8016b48 <sniprintf+0x64>)
 8016aea:	1e0c      	subs	r4, r1, #0
 8016aec:	681d      	ldr	r5, [r3, #0]
 8016aee:	b09d      	sub	sp, #116	; 0x74
 8016af0:	da08      	bge.n	8016b04 <sniprintf+0x20>
 8016af2:	238b      	movs	r3, #139	; 0x8b
 8016af4:	602b      	str	r3, [r5, #0]
 8016af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016afa:	b01d      	add	sp, #116	; 0x74
 8016afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b00:	b002      	add	sp, #8
 8016b02:	4770      	bx	lr
 8016b04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016b08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b0c:	bf14      	ite	ne
 8016b0e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016b12:	4623      	moveq	r3, r4
 8016b14:	9304      	str	r3, [sp, #16]
 8016b16:	9307      	str	r3, [sp, #28]
 8016b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b1c:	9002      	str	r0, [sp, #8]
 8016b1e:	9006      	str	r0, [sp, #24]
 8016b20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016b24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b26:	ab21      	add	r3, sp, #132	; 0x84
 8016b28:	a902      	add	r1, sp, #8
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	9301      	str	r3, [sp, #4]
 8016b2e:	f000 fa63 	bl	8016ff8 <_svfiprintf_r>
 8016b32:	1c43      	adds	r3, r0, #1
 8016b34:	bfbc      	itt	lt
 8016b36:	238b      	movlt	r3, #139	; 0x8b
 8016b38:	602b      	strlt	r3, [r5, #0]
 8016b3a:	2c00      	cmp	r4, #0
 8016b3c:	d0dd      	beq.n	8016afa <sniprintf+0x16>
 8016b3e:	9b02      	ldr	r3, [sp, #8]
 8016b40:	2200      	movs	r2, #0
 8016b42:	701a      	strb	r2, [r3, #0]
 8016b44:	e7d9      	b.n	8016afa <sniprintf+0x16>
 8016b46:	bf00      	nop
 8016b48:	2000010c 	.word	0x2000010c

08016b4c <__sread>:
 8016b4c:	b510      	push	{r4, lr}
 8016b4e:	460c      	mov	r4, r1
 8016b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b54:	f000 f900 	bl	8016d58 <_read_r>
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	bfab      	itete	ge
 8016b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8016b60:	181b      	addge	r3, r3, r0
 8016b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b66:	bfac      	ite	ge
 8016b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b6a:	81a3      	strhlt	r3, [r4, #12]
 8016b6c:	bd10      	pop	{r4, pc}

08016b6e <__swrite>:
 8016b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b72:	461f      	mov	r7, r3
 8016b74:	898b      	ldrh	r3, [r1, #12]
 8016b76:	05db      	lsls	r3, r3, #23
 8016b78:	4605      	mov	r5, r0
 8016b7a:	460c      	mov	r4, r1
 8016b7c:	4616      	mov	r6, r2
 8016b7e:	d505      	bpl.n	8016b8c <__swrite+0x1e>
 8016b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b84:	2302      	movs	r3, #2
 8016b86:	2200      	movs	r2, #0
 8016b88:	f000 f8d4 	bl	8016d34 <_lseek_r>
 8016b8c:	89a3      	ldrh	r3, [r4, #12]
 8016b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b96:	81a3      	strh	r3, [r4, #12]
 8016b98:	4632      	mov	r2, r6
 8016b9a:	463b      	mov	r3, r7
 8016b9c:	4628      	mov	r0, r5
 8016b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba2:	f000 b8fb 	b.w	8016d9c <_write_r>

08016ba6 <__sseek>:
 8016ba6:	b510      	push	{r4, lr}
 8016ba8:	460c      	mov	r4, r1
 8016baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bae:	f000 f8c1 	bl	8016d34 <_lseek_r>
 8016bb2:	1c43      	adds	r3, r0, #1
 8016bb4:	89a3      	ldrh	r3, [r4, #12]
 8016bb6:	bf15      	itete	ne
 8016bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016bc2:	81a3      	strheq	r3, [r4, #12]
 8016bc4:	bf18      	it	ne
 8016bc6:	81a3      	strhne	r3, [r4, #12]
 8016bc8:	bd10      	pop	{r4, pc}

08016bca <__sclose>:
 8016bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bce:	f000 b8a1 	b.w	8016d14 <_close_r>

08016bd2 <_vsniprintf_r>:
 8016bd2:	b530      	push	{r4, r5, lr}
 8016bd4:	4614      	mov	r4, r2
 8016bd6:	2c00      	cmp	r4, #0
 8016bd8:	b09b      	sub	sp, #108	; 0x6c
 8016bda:	4605      	mov	r5, r0
 8016bdc:	461a      	mov	r2, r3
 8016bde:	da05      	bge.n	8016bec <_vsniprintf_r+0x1a>
 8016be0:	238b      	movs	r3, #139	; 0x8b
 8016be2:	6003      	str	r3, [r0, #0]
 8016be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016be8:	b01b      	add	sp, #108	; 0x6c
 8016bea:	bd30      	pop	{r4, r5, pc}
 8016bec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016bf0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016bf4:	bf14      	ite	ne
 8016bf6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016bfa:	4623      	moveq	r3, r4
 8016bfc:	9302      	str	r3, [sp, #8]
 8016bfe:	9305      	str	r3, [sp, #20]
 8016c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c04:	9100      	str	r1, [sp, #0]
 8016c06:	9104      	str	r1, [sp, #16]
 8016c08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016c0c:	4669      	mov	r1, sp
 8016c0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016c10:	f000 f9f2 	bl	8016ff8 <_svfiprintf_r>
 8016c14:	1c43      	adds	r3, r0, #1
 8016c16:	bfbc      	itt	lt
 8016c18:	238b      	movlt	r3, #139	; 0x8b
 8016c1a:	602b      	strlt	r3, [r5, #0]
 8016c1c:	2c00      	cmp	r4, #0
 8016c1e:	d0e3      	beq.n	8016be8 <_vsniprintf_r+0x16>
 8016c20:	9b00      	ldr	r3, [sp, #0]
 8016c22:	2200      	movs	r2, #0
 8016c24:	701a      	strb	r2, [r3, #0]
 8016c26:	e7df      	b.n	8016be8 <_vsniprintf_r+0x16>

08016c28 <vsniprintf>:
 8016c28:	b507      	push	{r0, r1, r2, lr}
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	4613      	mov	r3, r2
 8016c2e:	460a      	mov	r2, r1
 8016c30:	4601      	mov	r1, r0
 8016c32:	4803      	ldr	r0, [pc, #12]	; (8016c40 <vsniprintf+0x18>)
 8016c34:	6800      	ldr	r0, [r0, #0]
 8016c36:	f7ff ffcc 	bl	8016bd2 <_vsniprintf_r>
 8016c3a:	b003      	add	sp, #12
 8016c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c40:	2000010c 	.word	0x2000010c

08016c44 <memcmp>:
 8016c44:	b510      	push	{r4, lr}
 8016c46:	3901      	subs	r1, #1
 8016c48:	4402      	add	r2, r0
 8016c4a:	4290      	cmp	r0, r2
 8016c4c:	d101      	bne.n	8016c52 <memcmp+0xe>
 8016c4e:	2000      	movs	r0, #0
 8016c50:	e005      	b.n	8016c5e <memcmp+0x1a>
 8016c52:	7803      	ldrb	r3, [r0, #0]
 8016c54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c58:	42a3      	cmp	r3, r4
 8016c5a:	d001      	beq.n	8016c60 <memcmp+0x1c>
 8016c5c:	1b18      	subs	r0, r3, r4
 8016c5e:	bd10      	pop	{r4, pc}
 8016c60:	3001      	adds	r0, #1
 8016c62:	e7f2      	b.n	8016c4a <memcmp+0x6>

08016c64 <memmove>:
 8016c64:	4288      	cmp	r0, r1
 8016c66:	b510      	push	{r4, lr}
 8016c68:	eb01 0402 	add.w	r4, r1, r2
 8016c6c:	d902      	bls.n	8016c74 <memmove+0x10>
 8016c6e:	4284      	cmp	r4, r0
 8016c70:	4623      	mov	r3, r4
 8016c72:	d807      	bhi.n	8016c84 <memmove+0x20>
 8016c74:	1e43      	subs	r3, r0, #1
 8016c76:	42a1      	cmp	r1, r4
 8016c78:	d008      	beq.n	8016c8c <memmove+0x28>
 8016c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016c82:	e7f8      	b.n	8016c76 <memmove+0x12>
 8016c84:	4402      	add	r2, r0
 8016c86:	4601      	mov	r1, r0
 8016c88:	428a      	cmp	r2, r1
 8016c8a:	d100      	bne.n	8016c8e <memmove+0x2a>
 8016c8c:	bd10      	pop	{r4, pc}
 8016c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016c96:	e7f7      	b.n	8016c88 <memmove+0x24>

08016c98 <memset>:
 8016c98:	4402      	add	r2, r0
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	d100      	bne.n	8016ca2 <memset+0xa>
 8016ca0:	4770      	bx	lr
 8016ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8016ca6:	e7f9      	b.n	8016c9c <memset+0x4>

08016ca8 <strchr>:
 8016ca8:	b2c9      	uxtb	r1, r1
 8016caa:	4603      	mov	r3, r0
 8016cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cb0:	b11a      	cbz	r2, 8016cba <strchr+0x12>
 8016cb2:	428a      	cmp	r2, r1
 8016cb4:	d1f9      	bne.n	8016caa <strchr+0x2>
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	4770      	bx	lr
 8016cba:	2900      	cmp	r1, #0
 8016cbc:	bf18      	it	ne
 8016cbe:	2300      	movne	r3, #0
 8016cc0:	e7f9      	b.n	8016cb6 <strchr+0xe>

08016cc2 <strncmp>:
 8016cc2:	b510      	push	{r4, lr}
 8016cc4:	b16a      	cbz	r2, 8016ce2 <strncmp+0x20>
 8016cc6:	3901      	subs	r1, #1
 8016cc8:	1884      	adds	r4, r0, r2
 8016cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d103      	bne.n	8016cde <strncmp+0x1c>
 8016cd6:	42a0      	cmp	r0, r4
 8016cd8:	d001      	beq.n	8016cde <strncmp+0x1c>
 8016cda:	2a00      	cmp	r2, #0
 8016cdc:	d1f5      	bne.n	8016cca <strncmp+0x8>
 8016cde:	1ad0      	subs	r0, r2, r3
 8016ce0:	bd10      	pop	{r4, pc}
 8016ce2:	4610      	mov	r0, r2
 8016ce4:	e7fc      	b.n	8016ce0 <strncmp+0x1e>

08016ce6 <strstr>:
 8016ce6:	780a      	ldrb	r2, [r1, #0]
 8016ce8:	b570      	push	{r4, r5, r6, lr}
 8016cea:	b96a      	cbnz	r2, 8016d08 <strstr+0x22>
 8016cec:	bd70      	pop	{r4, r5, r6, pc}
 8016cee:	429a      	cmp	r2, r3
 8016cf0:	d109      	bne.n	8016d06 <strstr+0x20>
 8016cf2:	460c      	mov	r4, r1
 8016cf4:	4605      	mov	r5, r0
 8016cf6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d0f6      	beq.n	8016cec <strstr+0x6>
 8016cfe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016d02:	429e      	cmp	r6, r3
 8016d04:	d0f7      	beq.n	8016cf6 <strstr+0x10>
 8016d06:	3001      	adds	r0, #1
 8016d08:	7803      	ldrb	r3, [r0, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d1ef      	bne.n	8016cee <strstr+0x8>
 8016d0e:	4618      	mov	r0, r3
 8016d10:	e7ec      	b.n	8016cec <strstr+0x6>
	...

08016d14 <_close_r>:
 8016d14:	b538      	push	{r3, r4, r5, lr}
 8016d16:	4d06      	ldr	r5, [pc, #24]	; (8016d30 <_close_r+0x1c>)
 8016d18:	2300      	movs	r3, #0
 8016d1a:	4604      	mov	r4, r0
 8016d1c:	4608      	mov	r0, r1
 8016d1e:	602b      	str	r3, [r5, #0]
 8016d20:	f7eb f855 	bl	8001dce <_close>
 8016d24:	1c43      	adds	r3, r0, #1
 8016d26:	d102      	bne.n	8016d2e <_close_r+0x1a>
 8016d28:	682b      	ldr	r3, [r5, #0]
 8016d2a:	b103      	cbz	r3, 8016d2e <_close_r+0x1a>
 8016d2c:	6023      	str	r3, [r4, #0]
 8016d2e:	bd38      	pop	{r3, r4, r5, pc}
 8016d30:	200137b4 	.word	0x200137b4

08016d34 <_lseek_r>:
 8016d34:	b538      	push	{r3, r4, r5, lr}
 8016d36:	4d07      	ldr	r5, [pc, #28]	; (8016d54 <_lseek_r+0x20>)
 8016d38:	4604      	mov	r4, r0
 8016d3a:	4608      	mov	r0, r1
 8016d3c:	4611      	mov	r1, r2
 8016d3e:	2200      	movs	r2, #0
 8016d40:	602a      	str	r2, [r5, #0]
 8016d42:	461a      	mov	r2, r3
 8016d44:	f7eb f86a 	bl	8001e1c <_lseek>
 8016d48:	1c43      	adds	r3, r0, #1
 8016d4a:	d102      	bne.n	8016d52 <_lseek_r+0x1e>
 8016d4c:	682b      	ldr	r3, [r5, #0]
 8016d4e:	b103      	cbz	r3, 8016d52 <_lseek_r+0x1e>
 8016d50:	6023      	str	r3, [r4, #0]
 8016d52:	bd38      	pop	{r3, r4, r5, pc}
 8016d54:	200137b4 	.word	0x200137b4

08016d58 <_read_r>:
 8016d58:	b538      	push	{r3, r4, r5, lr}
 8016d5a:	4d07      	ldr	r5, [pc, #28]	; (8016d78 <_read_r+0x20>)
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	4608      	mov	r0, r1
 8016d60:	4611      	mov	r1, r2
 8016d62:	2200      	movs	r2, #0
 8016d64:	602a      	str	r2, [r5, #0]
 8016d66:	461a      	mov	r2, r3
 8016d68:	f7ea fff8 	bl	8001d5c <_read>
 8016d6c:	1c43      	adds	r3, r0, #1
 8016d6e:	d102      	bne.n	8016d76 <_read_r+0x1e>
 8016d70:	682b      	ldr	r3, [r5, #0]
 8016d72:	b103      	cbz	r3, 8016d76 <_read_r+0x1e>
 8016d74:	6023      	str	r3, [r4, #0]
 8016d76:	bd38      	pop	{r3, r4, r5, pc}
 8016d78:	200137b4 	.word	0x200137b4

08016d7c <_sbrk_r>:
 8016d7c:	b538      	push	{r3, r4, r5, lr}
 8016d7e:	4d06      	ldr	r5, [pc, #24]	; (8016d98 <_sbrk_r+0x1c>)
 8016d80:	2300      	movs	r3, #0
 8016d82:	4604      	mov	r4, r0
 8016d84:	4608      	mov	r0, r1
 8016d86:	602b      	str	r3, [r5, #0]
 8016d88:	f7eb f856 	bl	8001e38 <_sbrk>
 8016d8c:	1c43      	adds	r3, r0, #1
 8016d8e:	d102      	bne.n	8016d96 <_sbrk_r+0x1a>
 8016d90:	682b      	ldr	r3, [r5, #0]
 8016d92:	b103      	cbz	r3, 8016d96 <_sbrk_r+0x1a>
 8016d94:	6023      	str	r3, [r4, #0]
 8016d96:	bd38      	pop	{r3, r4, r5, pc}
 8016d98:	200137b4 	.word	0x200137b4

08016d9c <_write_r>:
 8016d9c:	b538      	push	{r3, r4, r5, lr}
 8016d9e:	4d07      	ldr	r5, [pc, #28]	; (8016dbc <_write_r+0x20>)
 8016da0:	4604      	mov	r4, r0
 8016da2:	4608      	mov	r0, r1
 8016da4:	4611      	mov	r1, r2
 8016da6:	2200      	movs	r2, #0
 8016da8:	602a      	str	r2, [r5, #0]
 8016daa:	461a      	mov	r2, r3
 8016dac:	f7ea fff3 	bl	8001d96 <_write>
 8016db0:	1c43      	adds	r3, r0, #1
 8016db2:	d102      	bne.n	8016dba <_write_r+0x1e>
 8016db4:	682b      	ldr	r3, [r5, #0]
 8016db6:	b103      	cbz	r3, 8016dba <_write_r+0x1e>
 8016db8:	6023      	str	r3, [r4, #0]
 8016dba:	bd38      	pop	{r3, r4, r5, pc}
 8016dbc:	200137b4 	.word	0x200137b4

08016dc0 <__errno>:
 8016dc0:	4b01      	ldr	r3, [pc, #4]	; (8016dc8 <__errno+0x8>)
 8016dc2:	6818      	ldr	r0, [r3, #0]
 8016dc4:	4770      	bx	lr
 8016dc6:	bf00      	nop
 8016dc8:	2000010c 	.word	0x2000010c

08016dcc <__libc_init_array>:
 8016dcc:	b570      	push	{r4, r5, r6, lr}
 8016dce:	4d0d      	ldr	r5, [pc, #52]	; (8016e04 <__libc_init_array+0x38>)
 8016dd0:	4c0d      	ldr	r4, [pc, #52]	; (8016e08 <__libc_init_array+0x3c>)
 8016dd2:	1b64      	subs	r4, r4, r5
 8016dd4:	10a4      	asrs	r4, r4, #2
 8016dd6:	2600      	movs	r6, #0
 8016dd8:	42a6      	cmp	r6, r4
 8016dda:	d109      	bne.n	8016df0 <__libc_init_array+0x24>
 8016ddc:	4d0b      	ldr	r5, [pc, #44]	; (8016e0c <__libc_init_array+0x40>)
 8016dde:	4c0c      	ldr	r4, [pc, #48]	; (8016e10 <__libc_init_array+0x44>)
 8016de0:	f000 ff02 	bl	8017be8 <_init>
 8016de4:	1b64      	subs	r4, r4, r5
 8016de6:	10a4      	asrs	r4, r4, #2
 8016de8:	2600      	movs	r6, #0
 8016dea:	42a6      	cmp	r6, r4
 8016dec:	d105      	bne.n	8016dfa <__libc_init_array+0x2e>
 8016dee:	bd70      	pop	{r4, r5, r6, pc}
 8016df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016df4:	4798      	blx	r3
 8016df6:	3601      	adds	r6, #1
 8016df8:	e7ee      	b.n	8016dd8 <__libc_init_array+0xc>
 8016dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dfe:	4798      	blx	r3
 8016e00:	3601      	adds	r6, #1
 8016e02:	e7f2      	b.n	8016dea <__libc_init_array+0x1e>
 8016e04:	08018b1c 	.word	0x08018b1c
 8016e08:	08018b1c 	.word	0x08018b1c
 8016e0c:	08018b1c 	.word	0x08018b1c
 8016e10:	08018b24 	.word	0x08018b24

08016e14 <__retarget_lock_init_recursive>:
 8016e14:	4770      	bx	lr

08016e16 <__retarget_lock_acquire_recursive>:
 8016e16:	4770      	bx	lr

08016e18 <__retarget_lock_release_recursive>:
 8016e18:	4770      	bx	lr

08016e1a <strcpy>:
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e20:	f803 2b01 	strb.w	r2, [r3], #1
 8016e24:	2a00      	cmp	r2, #0
 8016e26:	d1f9      	bne.n	8016e1c <strcpy+0x2>
 8016e28:	4770      	bx	lr

08016e2a <memcpy>:
 8016e2a:	440a      	add	r2, r1
 8016e2c:	4291      	cmp	r1, r2
 8016e2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016e32:	d100      	bne.n	8016e36 <memcpy+0xc>
 8016e34:	4770      	bx	lr
 8016e36:	b510      	push	{r4, lr}
 8016e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e40:	4291      	cmp	r1, r2
 8016e42:	d1f9      	bne.n	8016e38 <memcpy+0xe>
 8016e44:	bd10      	pop	{r4, pc}
	...

08016e48 <__assert_func>:
 8016e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016e4a:	4614      	mov	r4, r2
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	4b09      	ldr	r3, [pc, #36]	; (8016e74 <__assert_func+0x2c>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	4605      	mov	r5, r0
 8016e54:	68d8      	ldr	r0, [r3, #12]
 8016e56:	b14c      	cbz	r4, 8016e6c <__assert_func+0x24>
 8016e58:	4b07      	ldr	r3, [pc, #28]	; (8016e78 <__assert_func+0x30>)
 8016e5a:	9100      	str	r1, [sp, #0]
 8016e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016e60:	4906      	ldr	r1, [pc, #24]	; (8016e7c <__assert_func+0x34>)
 8016e62:	462b      	mov	r3, r5
 8016e64:	f000 fd48 	bl	80178f8 <fiprintf>
 8016e68:	f000 fdee 	bl	8017a48 <abort>
 8016e6c:	4b04      	ldr	r3, [pc, #16]	; (8016e80 <__assert_func+0x38>)
 8016e6e:	461c      	mov	r4, r3
 8016e70:	e7f3      	b.n	8016e5a <__assert_func+0x12>
 8016e72:	bf00      	nop
 8016e74:	2000010c 	.word	0x2000010c
 8016e78:	08018aa4 	.word	0x08018aa4
 8016e7c:	08018ab1 	.word	0x08018ab1
 8016e80:	08018adf 	.word	0x08018adf

08016e84 <__env_lock>:
 8016e84:	4801      	ldr	r0, [pc, #4]	; (8016e8c <__env_lock+0x8>)
 8016e86:	f7ff bfc6 	b.w	8016e16 <__retarget_lock_acquire_recursive>
 8016e8a:	bf00      	nop
 8016e8c:	200137b8 	.word	0x200137b8

08016e90 <__env_unlock>:
 8016e90:	4801      	ldr	r0, [pc, #4]	; (8016e98 <__env_unlock+0x8>)
 8016e92:	f7ff bfc1 	b.w	8016e18 <__retarget_lock_release_recursive>
 8016e96:	bf00      	nop
 8016e98:	200137b8 	.word	0x200137b8

08016e9c <_free_r>:
 8016e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e9e:	2900      	cmp	r1, #0
 8016ea0:	d044      	beq.n	8016f2c <_free_r+0x90>
 8016ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ea6:	9001      	str	r0, [sp, #4]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8016eae:	bfb8      	it	lt
 8016eb0:	18e4      	addlt	r4, r4, r3
 8016eb2:	f7ff fc17 	bl	80166e4 <__malloc_lock>
 8016eb6:	4a1e      	ldr	r2, [pc, #120]	; (8016f30 <_free_r+0x94>)
 8016eb8:	9801      	ldr	r0, [sp, #4]
 8016eba:	6813      	ldr	r3, [r2, #0]
 8016ebc:	b933      	cbnz	r3, 8016ecc <_free_r+0x30>
 8016ebe:	6063      	str	r3, [r4, #4]
 8016ec0:	6014      	str	r4, [r2, #0]
 8016ec2:	b003      	add	sp, #12
 8016ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ec8:	f7ff bc12 	b.w	80166f0 <__malloc_unlock>
 8016ecc:	42a3      	cmp	r3, r4
 8016ece:	d908      	bls.n	8016ee2 <_free_r+0x46>
 8016ed0:	6825      	ldr	r5, [r4, #0]
 8016ed2:	1961      	adds	r1, r4, r5
 8016ed4:	428b      	cmp	r3, r1
 8016ed6:	bf01      	itttt	eq
 8016ed8:	6819      	ldreq	r1, [r3, #0]
 8016eda:	685b      	ldreq	r3, [r3, #4]
 8016edc:	1949      	addeq	r1, r1, r5
 8016ede:	6021      	streq	r1, [r4, #0]
 8016ee0:	e7ed      	b.n	8016ebe <_free_r+0x22>
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	b10b      	cbz	r3, 8016eec <_free_r+0x50>
 8016ee8:	42a3      	cmp	r3, r4
 8016eea:	d9fa      	bls.n	8016ee2 <_free_r+0x46>
 8016eec:	6811      	ldr	r1, [r2, #0]
 8016eee:	1855      	adds	r5, r2, r1
 8016ef0:	42a5      	cmp	r5, r4
 8016ef2:	d10b      	bne.n	8016f0c <_free_r+0x70>
 8016ef4:	6824      	ldr	r4, [r4, #0]
 8016ef6:	4421      	add	r1, r4
 8016ef8:	1854      	adds	r4, r2, r1
 8016efa:	42a3      	cmp	r3, r4
 8016efc:	6011      	str	r1, [r2, #0]
 8016efe:	d1e0      	bne.n	8016ec2 <_free_r+0x26>
 8016f00:	681c      	ldr	r4, [r3, #0]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	6053      	str	r3, [r2, #4]
 8016f06:	440c      	add	r4, r1
 8016f08:	6014      	str	r4, [r2, #0]
 8016f0a:	e7da      	b.n	8016ec2 <_free_r+0x26>
 8016f0c:	d902      	bls.n	8016f14 <_free_r+0x78>
 8016f0e:	230c      	movs	r3, #12
 8016f10:	6003      	str	r3, [r0, #0]
 8016f12:	e7d6      	b.n	8016ec2 <_free_r+0x26>
 8016f14:	6825      	ldr	r5, [r4, #0]
 8016f16:	1961      	adds	r1, r4, r5
 8016f18:	428b      	cmp	r3, r1
 8016f1a:	bf04      	itt	eq
 8016f1c:	6819      	ldreq	r1, [r3, #0]
 8016f1e:	685b      	ldreq	r3, [r3, #4]
 8016f20:	6063      	str	r3, [r4, #4]
 8016f22:	bf04      	itt	eq
 8016f24:	1949      	addeq	r1, r1, r5
 8016f26:	6021      	streq	r1, [r4, #0]
 8016f28:	6054      	str	r4, [r2, #4]
 8016f2a:	e7ca      	b.n	8016ec2 <_free_r+0x26>
 8016f2c:	b003      	add	sp, #12
 8016f2e:	bd30      	pop	{r4, r5, pc}
 8016f30:	20013670 	.word	0x20013670

08016f34 <_malloc_usable_size_r>:
 8016f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f38:	1f18      	subs	r0, r3, #4
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	bfbc      	itt	lt
 8016f3e:	580b      	ldrlt	r3, [r1, r0]
 8016f40:	18c0      	addlt	r0, r0, r3
 8016f42:	4770      	bx	lr

08016f44 <__ssputs_r>:
 8016f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f48:	688e      	ldr	r6, [r1, #8]
 8016f4a:	461f      	mov	r7, r3
 8016f4c:	42be      	cmp	r6, r7
 8016f4e:	680b      	ldr	r3, [r1, #0]
 8016f50:	4682      	mov	sl, r0
 8016f52:	460c      	mov	r4, r1
 8016f54:	4690      	mov	r8, r2
 8016f56:	d82c      	bhi.n	8016fb2 <__ssputs_r+0x6e>
 8016f58:	898a      	ldrh	r2, [r1, #12]
 8016f5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016f5e:	d026      	beq.n	8016fae <__ssputs_r+0x6a>
 8016f60:	6965      	ldr	r5, [r4, #20]
 8016f62:	6909      	ldr	r1, [r1, #16]
 8016f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f68:	eba3 0901 	sub.w	r9, r3, r1
 8016f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f70:	1c7b      	adds	r3, r7, #1
 8016f72:	444b      	add	r3, r9
 8016f74:	106d      	asrs	r5, r5, #1
 8016f76:	429d      	cmp	r5, r3
 8016f78:	bf38      	it	cc
 8016f7a:	461d      	movcc	r5, r3
 8016f7c:	0553      	lsls	r3, r2, #21
 8016f7e:	d527      	bpl.n	8016fd0 <__ssputs_r+0x8c>
 8016f80:	4629      	mov	r1, r5
 8016f82:	f7ff fb2f 	bl	80165e4 <_malloc_r>
 8016f86:	4606      	mov	r6, r0
 8016f88:	b360      	cbz	r0, 8016fe4 <__ssputs_r+0xa0>
 8016f8a:	6921      	ldr	r1, [r4, #16]
 8016f8c:	464a      	mov	r2, r9
 8016f8e:	f7ff ff4c 	bl	8016e2a <memcpy>
 8016f92:	89a3      	ldrh	r3, [r4, #12]
 8016f94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f9c:	81a3      	strh	r3, [r4, #12]
 8016f9e:	6126      	str	r6, [r4, #16]
 8016fa0:	6165      	str	r5, [r4, #20]
 8016fa2:	444e      	add	r6, r9
 8016fa4:	eba5 0509 	sub.w	r5, r5, r9
 8016fa8:	6026      	str	r6, [r4, #0]
 8016faa:	60a5      	str	r5, [r4, #8]
 8016fac:	463e      	mov	r6, r7
 8016fae:	42be      	cmp	r6, r7
 8016fb0:	d900      	bls.n	8016fb4 <__ssputs_r+0x70>
 8016fb2:	463e      	mov	r6, r7
 8016fb4:	6820      	ldr	r0, [r4, #0]
 8016fb6:	4632      	mov	r2, r6
 8016fb8:	4641      	mov	r1, r8
 8016fba:	f7ff fe53 	bl	8016c64 <memmove>
 8016fbe:	68a3      	ldr	r3, [r4, #8]
 8016fc0:	1b9b      	subs	r3, r3, r6
 8016fc2:	60a3      	str	r3, [r4, #8]
 8016fc4:	6823      	ldr	r3, [r4, #0]
 8016fc6:	4433      	add	r3, r6
 8016fc8:	6023      	str	r3, [r4, #0]
 8016fca:	2000      	movs	r0, #0
 8016fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fd0:	462a      	mov	r2, r5
 8016fd2:	f7ff fc07 	bl	80167e4 <_realloc_r>
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d1e0      	bne.n	8016f9e <__ssputs_r+0x5a>
 8016fdc:	6921      	ldr	r1, [r4, #16]
 8016fde:	4650      	mov	r0, sl
 8016fe0:	f7ff ff5c 	bl	8016e9c <_free_r>
 8016fe4:	230c      	movs	r3, #12
 8016fe6:	f8ca 3000 	str.w	r3, [sl]
 8016fea:	89a3      	ldrh	r3, [r4, #12]
 8016fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ff0:	81a3      	strh	r3, [r4, #12]
 8016ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ff6:	e7e9      	b.n	8016fcc <__ssputs_r+0x88>

08016ff8 <_svfiprintf_r>:
 8016ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	4698      	mov	r8, r3
 8016ffe:	898b      	ldrh	r3, [r1, #12]
 8017000:	061b      	lsls	r3, r3, #24
 8017002:	b09d      	sub	sp, #116	; 0x74
 8017004:	4607      	mov	r7, r0
 8017006:	460d      	mov	r5, r1
 8017008:	4614      	mov	r4, r2
 801700a:	d50e      	bpl.n	801702a <_svfiprintf_r+0x32>
 801700c:	690b      	ldr	r3, [r1, #16]
 801700e:	b963      	cbnz	r3, 801702a <_svfiprintf_r+0x32>
 8017010:	2140      	movs	r1, #64	; 0x40
 8017012:	f7ff fae7 	bl	80165e4 <_malloc_r>
 8017016:	6028      	str	r0, [r5, #0]
 8017018:	6128      	str	r0, [r5, #16]
 801701a:	b920      	cbnz	r0, 8017026 <_svfiprintf_r+0x2e>
 801701c:	230c      	movs	r3, #12
 801701e:	603b      	str	r3, [r7, #0]
 8017020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017024:	e0d0      	b.n	80171c8 <_svfiprintf_r+0x1d0>
 8017026:	2340      	movs	r3, #64	; 0x40
 8017028:	616b      	str	r3, [r5, #20]
 801702a:	2300      	movs	r3, #0
 801702c:	9309      	str	r3, [sp, #36]	; 0x24
 801702e:	2320      	movs	r3, #32
 8017030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017034:	f8cd 800c 	str.w	r8, [sp, #12]
 8017038:	2330      	movs	r3, #48	; 0x30
 801703a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80171e0 <_svfiprintf_r+0x1e8>
 801703e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017042:	f04f 0901 	mov.w	r9, #1
 8017046:	4623      	mov	r3, r4
 8017048:	469a      	mov	sl, r3
 801704a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801704e:	b10a      	cbz	r2, 8017054 <_svfiprintf_r+0x5c>
 8017050:	2a25      	cmp	r2, #37	; 0x25
 8017052:	d1f9      	bne.n	8017048 <_svfiprintf_r+0x50>
 8017054:	ebba 0b04 	subs.w	fp, sl, r4
 8017058:	d00b      	beq.n	8017072 <_svfiprintf_r+0x7a>
 801705a:	465b      	mov	r3, fp
 801705c:	4622      	mov	r2, r4
 801705e:	4629      	mov	r1, r5
 8017060:	4638      	mov	r0, r7
 8017062:	f7ff ff6f 	bl	8016f44 <__ssputs_r>
 8017066:	3001      	adds	r0, #1
 8017068:	f000 80a9 	beq.w	80171be <_svfiprintf_r+0x1c6>
 801706c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801706e:	445a      	add	r2, fp
 8017070:	9209      	str	r2, [sp, #36]	; 0x24
 8017072:	f89a 3000 	ldrb.w	r3, [sl]
 8017076:	2b00      	cmp	r3, #0
 8017078:	f000 80a1 	beq.w	80171be <_svfiprintf_r+0x1c6>
 801707c:	2300      	movs	r3, #0
 801707e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017086:	f10a 0a01 	add.w	sl, sl, #1
 801708a:	9304      	str	r3, [sp, #16]
 801708c:	9307      	str	r3, [sp, #28]
 801708e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017092:	931a      	str	r3, [sp, #104]	; 0x68
 8017094:	4654      	mov	r4, sl
 8017096:	2205      	movs	r2, #5
 8017098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801709c:	4850      	ldr	r0, [pc, #320]	; (80171e0 <_svfiprintf_r+0x1e8>)
 801709e:	f7e9 f8cf 	bl	8000240 <memchr>
 80170a2:	9a04      	ldr	r2, [sp, #16]
 80170a4:	b9d8      	cbnz	r0, 80170de <_svfiprintf_r+0xe6>
 80170a6:	06d0      	lsls	r0, r2, #27
 80170a8:	bf44      	itt	mi
 80170aa:	2320      	movmi	r3, #32
 80170ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80170b0:	0711      	lsls	r1, r2, #28
 80170b2:	bf44      	itt	mi
 80170b4:	232b      	movmi	r3, #43	; 0x2b
 80170b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80170ba:	f89a 3000 	ldrb.w	r3, [sl]
 80170be:	2b2a      	cmp	r3, #42	; 0x2a
 80170c0:	d015      	beq.n	80170ee <_svfiprintf_r+0xf6>
 80170c2:	9a07      	ldr	r2, [sp, #28]
 80170c4:	4654      	mov	r4, sl
 80170c6:	2000      	movs	r0, #0
 80170c8:	f04f 0c0a 	mov.w	ip, #10
 80170cc:	4621      	mov	r1, r4
 80170ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170d2:	3b30      	subs	r3, #48	; 0x30
 80170d4:	2b09      	cmp	r3, #9
 80170d6:	d94d      	bls.n	8017174 <_svfiprintf_r+0x17c>
 80170d8:	b1b0      	cbz	r0, 8017108 <_svfiprintf_r+0x110>
 80170da:	9207      	str	r2, [sp, #28]
 80170dc:	e014      	b.n	8017108 <_svfiprintf_r+0x110>
 80170de:	eba0 0308 	sub.w	r3, r0, r8
 80170e2:	fa09 f303 	lsl.w	r3, r9, r3
 80170e6:	4313      	orrs	r3, r2
 80170e8:	9304      	str	r3, [sp, #16]
 80170ea:	46a2      	mov	sl, r4
 80170ec:	e7d2      	b.n	8017094 <_svfiprintf_r+0x9c>
 80170ee:	9b03      	ldr	r3, [sp, #12]
 80170f0:	1d19      	adds	r1, r3, #4
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	9103      	str	r1, [sp, #12]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	bfbb      	ittet	lt
 80170fa:	425b      	neglt	r3, r3
 80170fc:	f042 0202 	orrlt.w	r2, r2, #2
 8017100:	9307      	strge	r3, [sp, #28]
 8017102:	9307      	strlt	r3, [sp, #28]
 8017104:	bfb8      	it	lt
 8017106:	9204      	strlt	r2, [sp, #16]
 8017108:	7823      	ldrb	r3, [r4, #0]
 801710a:	2b2e      	cmp	r3, #46	; 0x2e
 801710c:	d10c      	bne.n	8017128 <_svfiprintf_r+0x130>
 801710e:	7863      	ldrb	r3, [r4, #1]
 8017110:	2b2a      	cmp	r3, #42	; 0x2a
 8017112:	d134      	bne.n	801717e <_svfiprintf_r+0x186>
 8017114:	9b03      	ldr	r3, [sp, #12]
 8017116:	1d1a      	adds	r2, r3, #4
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	9203      	str	r2, [sp, #12]
 801711c:	2b00      	cmp	r3, #0
 801711e:	bfb8      	it	lt
 8017120:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017124:	3402      	adds	r4, #2
 8017126:	9305      	str	r3, [sp, #20]
 8017128:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80171f0 <_svfiprintf_r+0x1f8>
 801712c:	7821      	ldrb	r1, [r4, #0]
 801712e:	2203      	movs	r2, #3
 8017130:	4650      	mov	r0, sl
 8017132:	f7e9 f885 	bl	8000240 <memchr>
 8017136:	b138      	cbz	r0, 8017148 <_svfiprintf_r+0x150>
 8017138:	9b04      	ldr	r3, [sp, #16]
 801713a:	eba0 000a 	sub.w	r0, r0, sl
 801713e:	2240      	movs	r2, #64	; 0x40
 8017140:	4082      	lsls	r2, r0
 8017142:	4313      	orrs	r3, r2
 8017144:	3401      	adds	r4, #1
 8017146:	9304      	str	r3, [sp, #16]
 8017148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801714c:	4825      	ldr	r0, [pc, #148]	; (80171e4 <_svfiprintf_r+0x1ec>)
 801714e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017152:	2206      	movs	r2, #6
 8017154:	f7e9 f874 	bl	8000240 <memchr>
 8017158:	2800      	cmp	r0, #0
 801715a:	d038      	beq.n	80171ce <_svfiprintf_r+0x1d6>
 801715c:	4b22      	ldr	r3, [pc, #136]	; (80171e8 <_svfiprintf_r+0x1f0>)
 801715e:	bb1b      	cbnz	r3, 80171a8 <_svfiprintf_r+0x1b0>
 8017160:	9b03      	ldr	r3, [sp, #12]
 8017162:	3307      	adds	r3, #7
 8017164:	f023 0307 	bic.w	r3, r3, #7
 8017168:	3308      	adds	r3, #8
 801716a:	9303      	str	r3, [sp, #12]
 801716c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801716e:	4433      	add	r3, r6
 8017170:	9309      	str	r3, [sp, #36]	; 0x24
 8017172:	e768      	b.n	8017046 <_svfiprintf_r+0x4e>
 8017174:	fb0c 3202 	mla	r2, ip, r2, r3
 8017178:	460c      	mov	r4, r1
 801717a:	2001      	movs	r0, #1
 801717c:	e7a6      	b.n	80170cc <_svfiprintf_r+0xd4>
 801717e:	2300      	movs	r3, #0
 8017180:	3401      	adds	r4, #1
 8017182:	9305      	str	r3, [sp, #20]
 8017184:	4619      	mov	r1, r3
 8017186:	f04f 0c0a 	mov.w	ip, #10
 801718a:	4620      	mov	r0, r4
 801718c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017190:	3a30      	subs	r2, #48	; 0x30
 8017192:	2a09      	cmp	r2, #9
 8017194:	d903      	bls.n	801719e <_svfiprintf_r+0x1a6>
 8017196:	2b00      	cmp	r3, #0
 8017198:	d0c6      	beq.n	8017128 <_svfiprintf_r+0x130>
 801719a:	9105      	str	r1, [sp, #20]
 801719c:	e7c4      	b.n	8017128 <_svfiprintf_r+0x130>
 801719e:	fb0c 2101 	mla	r1, ip, r1, r2
 80171a2:	4604      	mov	r4, r0
 80171a4:	2301      	movs	r3, #1
 80171a6:	e7f0      	b.n	801718a <_svfiprintf_r+0x192>
 80171a8:	ab03      	add	r3, sp, #12
 80171aa:	9300      	str	r3, [sp, #0]
 80171ac:	462a      	mov	r2, r5
 80171ae:	4b0f      	ldr	r3, [pc, #60]	; (80171ec <_svfiprintf_r+0x1f4>)
 80171b0:	a904      	add	r1, sp, #16
 80171b2:	4638      	mov	r0, r7
 80171b4:	f3af 8000 	nop.w
 80171b8:	1c42      	adds	r2, r0, #1
 80171ba:	4606      	mov	r6, r0
 80171bc:	d1d6      	bne.n	801716c <_svfiprintf_r+0x174>
 80171be:	89ab      	ldrh	r3, [r5, #12]
 80171c0:	065b      	lsls	r3, r3, #25
 80171c2:	f53f af2d 	bmi.w	8017020 <_svfiprintf_r+0x28>
 80171c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171c8:	b01d      	add	sp, #116	; 0x74
 80171ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ce:	ab03      	add	r3, sp, #12
 80171d0:	9300      	str	r3, [sp, #0]
 80171d2:	462a      	mov	r2, r5
 80171d4:	4b05      	ldr	r3, [pc, #20]	; (80171ec <_svfiprintf_r+0x1f4>)
 80171d6:	a904      	add	r1, sp, #16
 80171d8:	4638      	mov	r0, r7
 80171da:	f000 f9bd 	bl	8017558 <_printf_i>
 80171de:	e7eb      	b.n	80171b8 <_svfiprintf_r+0x1c0>
 80171e0:	08018ae0 	.word	0x08018ae0
 80171e4:	08018aea 	.word	0x08018aea
 80171e8:	00000000 	.word	0x00000000
 80171ec:	08016f45 	.word	0x08016f45
 80171f0:	08018ae6 	.word	0x08018ae6

080171f4 <__sfputc_r>:
 80171f4:	6893      	ldr	r3, [r2, #8]
 80171f6:	3b01      	subs	r3, #1
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	b410      	push	{r4}
 80171fc:	6093      	str	r3, [r2, #8]
 80171fe:	da08      	bge.n	8017212 <__sfputc_r+0x1e>
 8017200:	6994      	ldr	r4, [r2, #24]
 8017202:	42a3      	cmp	r3, r4
 8017204:	db01      	blt.n	801720a <__sfputc_r+0x16>
 8017206:	290a      	cmp	r1, #10
 8017208:	d103      	bne.n	8017212 <__sfputc_r+0x1e>
 801720a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801720e:	f000 bb85 	b.w	801791c <__swbuf_r>
 8017212:	6813      	ldr	r3, [r2, #0]
 8017214:	1c58      	adds	r0, r3, #1
 8017216:	6010      	str	r0, [r2, #0]
 8017218:	7019      	strb	r1, [r3, #0]
 801721a:	4608      	mov	r0, r1
 801721c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017220:	4770      	bx	lr

08017222 <__sfputs_r>:
 8017222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017224:	4606      	mov	r6, r0
 8017226:	460f      	mov	r7, r1
 8017228:	4614      	mov	r4, r2
 801722a:	18d5      	adds	r5, r2, r3
 801722c:	42ac      	cmp	r4, r5
 801722e:	d101      	bne.n	8017234 <__sfputs_r+0x12>
 8017230:	2000      	movs	r0, #0
 8017232:	e007      	b.n	8017244 <__sfputs_r+0x22>
 8017234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017238:	463a      	mov	r2, r7
 801723a:	4630      	mov	r0, r6
 801723c:	f7ff ffda 	bl	80171f4 <__sfputc_r>
 8017240:	1c43      	adds	r3, r0, #1
 8017242:	d1f3      	bne.n	801722c <__sfputs_r+0xa>
 8017244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017248 <_vfiprintf_r>:
 8017248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801724c:	460d      	mov	r5, r1
 801724e:	b09d      	sub	sp, #116	; 0x74
 8017250:	4614      	mov	r4, r2
 8017252:	4698      	mov	r8, r3
 8017254:	4606      	mov	r6, r0
 8017256:	b118      	cbz	r0, 8017260 <_vfiprintf_r+0x18>
 8017258:	6a03      	ldr	r3, [r0, #32]
 801725a:	b90b      	cbnz	r3, 8017260 <_vfiprintf_r+0x18>
 801725c:	f7ff fbfa 	bl	8016a54 <__sinit>
 8017260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017262:	07d9      	lsls	r1, r3, #31
 8017264:	d405      	bmi.n	8017272 <_vfiprintf_r+0x2a>
 8017266:	89ab      	ldrh	r3, [r5, #12]
 8017268:	059a      	lsls	r2, r3, #22
 801726a:	d402      	bmi.n	8017272 <_vfiprintf_r+0x2a>
 801726c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801726e:	f7ff fdd2 	bl	8016e16 <__retarget_lock_acquire_recursive>
 8017272:	89ab      	ldrh	r3, [r5, #12]
 8017274:	071b      	lsls	r3, r3, #28
 8017276:	d501      	bpl.n	801727c <_vfiprintf_r+0x34>
 8017278:	692b      	ldr	r3, [r5, #16]
 801727a:	b99b      	cbnz	r3, 80172a4 <_vfiprintf_r+0x5c>
 801727c:	4629      	mov	r1, r5
 801727e:	4630      	mov	r0, r6
 8017280:	f000 fb8a 	bl	8017998 <__swsetup_r>
 8017284:	b170      	cbz	r0, 80172a4 <_vfiprintf_r+0x5c>
 8017286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017288:	07dc      	lsls	r4, r3, #31
 801728a:	d504      	bpl.n	8017296 <_vfiprintf_r+0x4e>
 801728c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017290:	b01d      	add	sp, #116	; 0x74
 8017292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017296:	89ab      	ldrh	r3, [r5, #12]
 8017298:	0598      	lsls	r0, r3, #22
 801729a:	d4f7      	bmi.n	801728c <_vfiprintf_r+0x44>
 801729c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801729e:	f7ff fdbb 	bl	8016e18 <__retarget_lock_release_recursive>
 80172a2:	e7f3      	b.n	801728c <_vfiprintf_r+0x44>
 80172a4:	2300      	movs	r3, #0
 80172a6:	9309      	str	r3, [sp, #36]	; 0x24
 80172a8:	2320      	movs	r3, #32
 80172aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80172b2:	2330      	movs	r3, #48	; 0x30
 80172b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017468 <_vfiprintf_r+0x220>
 80172b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172bc:	f04f 0901 	mov.w	r9, #1
 80172c0:	4623      	mov	r3, r4
 80172c2:	469a      	mov	sl, r3
 80172c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172c8:	b10a      	cbz	r2, 80172ce <_vfiprintf_r+0x86>
 80172ca:	2a25      	cmp	r2, #37	; 0x25
 80172cc:	d1f9      	bne.n	80172c2 <_vfiprintf_r+0x7a>
 80172ce:	ebba 0b04 	subs.w	fp, sl, r4
 80172d2:	d00b      	beq.n	80172ec <_vfiprintf_r+0xa4>
 80172d4:	465b      	mov	r3, fp
 80172d6:	4622      	mov	r2, r4
 80172d8:	4629      	mov	r1, r5
 80172da:	4630      	mov	r0, r6
 80172dc:	f7ff ffa1 	bl	8017222 <__sfputs_r>
 80172e0:	3001      	adds	r0, #1
 80172e2:	f000 80a9 	beq.w	8017438 <_vfiprintf_r+0x1f0>
 80172e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172e8:	445a      	add	r2, fp
 80172ea:	9209      	str	r2, [sp, #36]	; 0x24
 80172ec:	f89a 3000 	ldrb.w	r3, [sl]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	f000 80a1 	beq.w	8017438 <_vfiprintf_r+0x1f0>
 80172f6:	2300      	movs	r3, #0
 80172f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80172fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017300:	f10a 0a01 	add.w	sl, sl, #1
 8017304:	9304      	str	r3, [sp, #16]
 8017306:	9307      	str	r3, [sp, #28]
 8017308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801730c:	931a      	str	r3, [sp, #104]	; 0x68
 801730e:	4654      	mov	r4, sl
 8017310:	2205      	movs	r2, #5
 8017312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017316:	4854      	ldr	r0, [pc, #336]	; (8017468 <_vfiprintf_r+0x220>)
 8017318:	f7e8 ff92 	bl	8000240 <memchr>
 801731c:	9a04      	ldr	r2, [sp, #16]
 801731e:	b9d8      	cbnz	r0, 8017358 <_vfiprintf_r+0x110>
 8017320:	06d1      	lsls	r1, r2, #27
 8017322:	bf44      	itt	mi
 8017324:	2320      	movmi	r3, #32
 8017326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801732a:	0713      	lsls	r3, r2, #28
 801732c:	bf44      	itt	mi
 801732e:	232b      	movmi	r3, #43	; 0x2b
 8017330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017334:	f89a 3000 	ldrb.w	r3, [sl]
 8017338:	2b2a      	cmp	r3, #42	; 0x2a
 801733a:	d015      	beq.n	8017368 <_vfiprintf_r+0x120>
 801733c:	9a07      	ldr	r2, [sp, #28]
 801733e:	4654      	mov	r4, sl
 8017340:	2000      	movs	r0, #0
 8017342:	f04f 0c0a 	mov.w	ip, #10
 8017346:	4621      	mov	r1, r4
 8017348:	f811 3b01 	ldrb.w	r3, [r1], #1
 801734c:	3b30      	subs	r3, #48	; 0x30
 801734e:	2b09      	cmp	r3, #9
 8017350:	d94d      	bls.n	80173ee <_vfiprintf_r+0x1a6>
 8017352:	b1b0      	cbz	r0, 8017382 <_vfiprintf_r+0x13a>
 8017354:	9207      	str	r2, [sp, #28]
 8017356:	e014      	b.n	8017382 <_vfiprintf_r+0x13a>
 8017358:	eba0 0308 	sub.w	r3, r0, r8
 801735c:	fa09 f303 	lsl.w	r3, r9, r3
 8017360:	4313      	orrs	r3, r2
 8017362:	9304      	str	r3, [sp, #16]
 8017364:	46a2      	mov	sl, r4
 8017366:	e7d2      	b.n	801730e <_vfiprintf_r+0xc6>
 8017368:	9b03      	ldr	r3, [sp, #12]
 801736a:	1d19      	adds	r1, r3, #4
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	9103      	str	r1, [sp, #12]
 8017370:	2b00      	cmp	r3, #0
 8017372:	bfbb      	ittet	lt
 8017374:	425b      	neglt	r3, r3
 8017376:	f042 0202 	orrlt.w	r2, r2, #2
 801737a:	9307      	strge	r3, [sp, #28]
 801737c:	9307      	strlt	r3, [sp, #28]
 801737e:	bfb8      	it	lt
 8017380:	9204      	strlt	r2, [sp, #16]
 8017382:	7823      	ldrb	r3, [r4, #0]
 8017384:	2b2e      	cmp	r3, #46	; 0x2e
 8017386:	d10c      	bne.n	80173a2 <_vfiprintf_r+0x15a>
 8017388:	7863      	ldrb	r3, [r4, #1]
 801738a:	2b2a      	cmp	r3, #42	; 0x2a
 801738c:	d134      	bne.n	80173f8 <_vfiprintf_r+0x1b0>
 801738e:	9b03      	ldr	r3, [sp, #12]
 8017390:	1d1a      	adds	r2, r3, #4
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	9203      	str	r2, [sp, #12]
 8017396:	2b00      	cmp	r3, #0
 8017398:	bfb8      	it	lt
 801739a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801739e:	3402      	adds	r4, #2
 80173a0:	9305      	str	r3, [sp, #20]
 80173a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017478 <_vfiprintf_r+0x230>
 80173a6:	7821      	ldrb	r1, [r4, #0]
 80173a8:	2203      	movs	r2, #3
 80173aa:	4650      	mov	r0, sl
 80173ac:	f7e8 ff48 	bl	8000240 <memchr>
 80173b0:	b138      	cbz	r0, 80173c2 <_vfiprintf_r+0x17a>
 80173b2:	9b04      	ldr	r3, [sp, #16]
 80173b4:	eba0 000a 	sub.w	r0, r0, sl
 80173b8:	2240      	movs	r2, #64	; 0x40
 80173ba:	4082      	lsls	r2, r0
 80173bc:	4313      	orrs	r3, r2
 80173be:	3401      	adds	r4, #1
 80173c0:	9304      	str	r3, [sp, #16]
 80173c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173c6:	4829      	ldr	r0, [pc, #164]	; (801746c <_vfiprintf_r+0x224>)
 80173c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173cc:	2206      	movs	r2, #6
 80173ce:	f7e8 ff37 	bl	8000240 <memchr>
 80173d2:	2800      	cmp	r0, #0
 80173d4:	d03f      	beq.n	8017456 <_vfiprintf_r+0x20e>
 80173d6:	4b26      	ldr	r3, [pc, #152]	; (8017470 <_vfiprintf_r+0x228>)
 80173d8:	bb1b      	cbnz	r3, 8017422 <_vfiprintf_r+0x1da>
 80173da:	9b03      	ldr	r3, [sp, #12]
 80173dc:	3307      	adds	r3, #7
 80173de:	f023 0307 	bic.w	r3, r3, #7
 80173e2:	3308      	adds	r3, #8
 80173e4:	9303      	str	r3, [sp, #12]
 80173e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173e8:	443b      	add	r3, r7
 80173ea:	9309      	str	r3, [sp, #36]	; 0x24
 80173ec:	e768      	b.n	80172c0 <_vfiprintf_r+0x78>
 80173ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80173f2:	460c      	mov	r4, r1
 80173f4:	2001      	movs	r0, #1
 80173f6:	e7a6      	b.n	8017346 <_vfiprintf_r+0xfe>
 80173f8:	2300      	movs	r3, #0
 80173fa:	3401      	adds	r4, #1
 80173fc:	9305      	str	r3, [sp, #20]
 80173fe:	4619      	mov	r1, r3
 8017400:	f04f 0c0a 	mov.w	ip, #10
 8017404:	4620      	mov	r0, r4
 8017406:	f810 2b01 	ldrb.w	r2, [r0], #1
 801740a:	3a30      	subs	r2, #48	; 0x30
 801740c:	2a09      	cmp	r2, #9
 801740e:	d903      	bls.n	8017418 <_vfiprintf_r+0x1d0>
 8017410:	2b00      	cmp	r3, #0
 8017412:	d0c6      	beq.n	80173a2 <_vfiprintf_r+0x15a>
 8017414:	9105      	str	r1, [sp, #20]
 8017416:	e7c4      	b.n	80173a2 <_vfiprintf_r+0x15a>
 8017418:	fb0c 2101 	mla	r1, ip, r1, r2
 801741c:	4604      	mov	r4, r0
 801741e:	2301      	movs	r3, #1
 8017420:	e7f0      	b.n	8017404 <_vfiprintf_r+0x1bc>
 8017422:	ab03      	add	r3, sp, #12
 8017424:	9300      	str	r3, [sp, #0]
 8017426:	462a      	mov	r2, r5
 8017428:	4b12      	ldr	r3, [pc, #72]	; (8017474 <_vfiprintf_r+0x22c>)
 801742a:	a904      	add	r1, sp, #16
 801742c:	4630      	mov	r0, r6
 801742e:	f3af 8000 	nop.w
 8017432:	4607      	mov	r7, r0
 8017434:	1c78      	adds	r0, r7, #1
 8017436:	d1d6      	bne.n	80173e6 <_vfiprintf_r+0x19e>
 8017438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801743a:	07d9      	lsls	r1, r3, #31
 801743c:	d405      	bmi.n	801744a <_vfiprintf_r+0x202>
 801743e:	89ab      	ldrh	r3, [r5, #12]
 8017440:	059a      	lsls	r2, r3, #22
 8017442:	d402      	bmi.n	801744a <_vfiprintf_r+0x202>
 8017444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017446:	f7ff fce7 	bl	8016e18 <__retarget_lock_release_recursive>
 801744a:	89ab      	ldrh	r3, [r5, #12]
 801744c:	065b      	lsls	r3, r3, #25
 801744e:	f53f af1d 	bmi.w	801728c <_vfiprintf_r+0x44>
 8017452:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017454:	e71c      	b.n	8017290 <_vfiprintf_r+0x48>
 8017456:	ab03      	add	r3, sp, #12
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	462a      	mov	r2, r5
 801745c:	4b05      	ldr	r3, [pc, #20]	; (8017474 <_vfiprintf_r+0x22c>)
 801745e:	a904      	add	r1, sp, #16
 8017460:	4630      	mov	r0, r6
 8017462:	f000 f879 	bl	8017558 <_printf_i>
 8017466:	e7e4      	b.n	8017432 <_vfiprintf_r+0x1ea>
 8017468:	08018ae0 	.word	0x08018ae0
 801746c:	08018aea 	.word	0x08018aea
 8017470:	00000000 	.word	0x00000000
 8017474:	08017223 	.word	0x08017223
 8017478:	08018ae6 	.word	0x08018ae6

0801747c <_printf_common>:
 801747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017480:	4616      	mov	r6, r2
 8017482:	4699      	mov	r9, r3
 8017484:	688a      	ldr	r2, [r1, #8]
 8017486:	690b      	ldr	r3, [r1, #16]
 8017488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801748c:	4293      	cmp	r3, r2
 801748e:	bfb8      	it	lt
 8017490:	4613      	movlt	r3, r2
 8017492:	6033      	str	r3, [r6, #0]
 8017494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017498:	4607      	mov	r7, r0
 801749a:	460c      	mov	r4, r1
 801749c:	b10a      	cbz	r2, 80174a2 <_printf_common+0x26>
 801749e:	3301      	adds	r3, #1
 80174a0:	6033      	str	r3, [r6, #0]
 80174a2:	6823      	ldr	r3, [r4, #0]
 80174a4:	0699      	lsls	r1, r3, #26
 80174a6:	bf42      	ittt	mi
 80174a8:	6833      	ldrmi	r3, [r6, #0]
 80174aa:	3302      	addmi	r3, #2
 80174ac:	6033      	strmi	r3, [r6, #0]
 80174ae:	6825      	ldr	r5, [r4, #0]
 80174b0:	f015 0506 	ands.w	r5, r5, #6
 80174b4:	d106      	bne.n	80174c4 <_printf_common+0x48>
 80174b6:	f104 0a19 	add.w	sl, r4, #25
 80174ba:	68e3      	ldr	r3, [r4, #12]
 80174bc:	6832      	ldr	r2, [r6, #0]
 80174be:	1a9b      	subs	r3, r3, r2
 80174c0:	42ab      	cmp	r3, r5
 80174c2:	dc26      	bgt.n	8017512 <_printf_common+0x96>
 80174c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80174c8:	1e13      	subs	r3, r2, #0
 80174ca:	6822      	ldr	r2, [r4, #0]
 80174cc:	bf18      	it	ne
 80174ce:	2301      	movne	r3, #1
 80174d0:	0692      	lsls	r2, r2, #26
 80174d2:	d42b      	bmi.n	801752c <_printf_common+0xb0>
 80174d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80174d8:	4649      	mov	r1, r9
 80174da:	4638      	mov	r0, r7
 80174dc:	47c0      	blx	r8
 80174de:	3001      	adds	r0, #1
 80174e0:	d01e      	beq.n	8017520 <_printf_common+0xa4>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	6922      	ldr	r2, [r4, #16]
 80174e6:	f003 0306 	and.w	r3, r3, #6
 80174ea:	2b04      	cmp	r3, #4
 80174ec:	bf02      	ittt	eq
 80174ee:	68e5      	ldreq	r5, [r4, #12]
 80174f0:	6833      	ldreq	r3, [r6, #0]
 80174f2:	1aed      	subeq	r5, r5, r3
 80174f4:	68a3      	ldr	r3, [r4, #8]
 80174f6:	bf0c      	ite	eq
 80174f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174fc:	2500      	movne	r5, #0
 80174fe:	4293      	cmp	r3, r2
 8017500:	bfc4      	itt	gt
 8017502:	1a9b      	subgt	r3, r3, r2
 8017504:	18ed      	addgt	r5, r5, r3
 8017506:	2600      	movs	r6, #0
 8017508:	341a      	adds	r4, #26
 801750a:	42b5      	cmp	r5, r6
 801750c:	d11a      	bne.n	8017544 <_printf_common+0xc8>
 801750e:	2000      	movs	r0, #0
 8017510:	e008      	b.n	8017524 <_printf_common+0xa8>
 8017512:	2301      	movs	r3, #1
 8017514:	4652      	mov	r2, sl
 8017516:	4649      	mov	r1, r9
 8017518:	4638      	mov	r0, r7
 801751a:	47c0      	blx	r8
 801751c:	3001      	adds	r0, #1
 801751e:	d103      	bne.n	8017528 <_printf_common+0xac>
 8017520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017528:	3501      	adds	r5, #1
 801752a:	e7c6      	b.n	80174ba <_printf_common+0x3e>
 801752c:	18e1      	adds	r1, r4, r3
 801752e:	1c5a      	adds	r2, r3, #1
 8017530:	2030      	movs	r0, #48	; 0x30
 8017532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017536:	4422      	add	r2, r4
 8017538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801753c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017540:	3302      	adds	r3, #2
 8017542:	e7c7      	b.n	80174d4 <_printf_common+0x58>
 8017544:	2301      	movs	r3, #1
 8017546:	4622      	mov	r2, r4
 8017548:	4649      	mov	r1, r9
 801754a:	4638      	mov	r0, r7
 801754c:	47c0      	blx	r8
 801754e:	3001      	adds	r0, #1
 8017550:	d0e6      	beq.n	8017520 <_printf_common+0xa4>
 8017552:	3601      	adds	r6, #1
 8017554:	e7d9      	b.n	801750a <_printf_common+0x8e>
	...

08017558 <_printf_i>:
 8017558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801755c:	7e0f      	ldrb	r7, [r1, #24]
 801755e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017560:	2f78      	cmp	r7, #120	; 0x78
 8017562:	4691      	mov	r9, r2
 8017564:	4680      	mov	r8, r0
 8017566:	460c      	mov	r4, r1
 8017568:	469a      	mov	sl, r3
 801756a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801756e:	d807      	bhi.n	8017580 <_printf_i+0x28>
 8017570:	2f62      	cmp	r7, #98	; 0x62
 8017572:	d80a      	bhi.n	801758a <_printf_i+0x32>
 8017574:	2f00      	cmp	r7, #0
 8017576:	f000 80d4 	beq.w	8017722 <_printf_i+0x1ca>
 801757a:	2f58      	cmp	r7, #88	; 0x58
 801757c:	f000 80c0 	beq.w	8017700 <_printf_i+0x1a8>
 8017580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017588:	e03a      	b.n	8017600 <_printf_i+0xa8>
 801758a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801758e:	2b15      	cmp	r3, #21
 8017590:	d8f6      	bhi.n	8017580 <_printf_i+0x28>
 8017592:	a101      	add	r1, pc, #4	; (adr r1, 8017598 <_printf_i+0x40>)
 8017594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017598:	080175f1 	.word	0x080175f1
 801759c:	08017605 	.word	0x08017605
 80175a0:	08017581 	.word	0x08017581
 80175a4:	08017581 	.word	0x08017581
 80175a8:	08017581 	.word	0x08017581
 80175ac:	08017581 	.word	0x08017581
 80175b0:	08017605 	.word	0x08017605
 80175b4:	08017581 	.word	0x08017581
 80175b8:	08017581 	.word	0x08017581
 80175bc:	08017581 	.word	0x08017581
 80175c0:	08017581 	.word	0x08017581
 80175c4:	08017709 	.word	0x08017709
 80175c8:	08017631 	.word	0x08017631
 80175cc:	080176c3 	.word	0x080176c3
 80175d0:	08017581 	.word	0x08017581
 80175d4:	08017581 	.word	0x08017581
 80175d8:	0801772b 	.word	0x0801772b
 80175dc:	08017581 	.word	0x08017581
 80175e0:	08017631 	.word	0x08017631
 80175e4:	08017581 	.word	0x08017581
 80175e8:	08017581 	.word	0x08017581
 80175ec:	080176cb 	.word	0x080176cb
 80175f0:	682b      	ldr	r3, [r5, #0]
 80175f2:	1d1a      	adds	r2, r3, #4
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	602a      	str	r2, [r5, #0]
 80175f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017600:	2301      	movs	r3, #1
 8017602:	e09f      	b.n	8017744 <_printf_i+0x1ec>
 8017604:	6820      	ldr	r0, [r4, #0]
 8017606:	682b      	ldr	r3, [r5, #0]
 8017608:	0607      	lsls	r7, r0, #24
 801760a:	f103 0104 	add.w	r1, r3, #4
 801760e:	6029      	str	r1, [r5, #0]
 8017610:	d501      	bpl.n	8017616 <_printf_i+0xbe>
 8017612:	681e      	ldr	r6, [r3, #0]
 8017614:	e003      	b.n	801761e <_printf_i+0xc6>
 8017616:	0646      	lsls	r6, r0, #25
 8017618:	d5fb      	bpl.n	8017612 <_printf_i+0xba>
 801761a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801761e:	2e00      	cmp	r6, #0
 8017620:	da03      	bge.n	801762a <_printf_i+0xd2>
 8017622:	232d      	movs	r3, #45	; 0x2d
 8017624:	4276      	negs	r6, r6
 8017626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801762a:	485a      	ldr	r0, [pc, #360]	; (8017794 <_printf_i+0x23c>)
 801762c:	230a      	movs	r3, #10
 801762e:	e012      	b.n	8017656 <_printf_i+0xfe>
 8017630:	682b      	ldr	r3, [r5, #0]
 8017632:	6820      	ldr	r0, [r4, #0]
 8017634:	1d19      	adds	r1, r3, #4
 8017636:	6029      	str	r1, [r5, #0]
 8017638:	0605      	lsls	r5, r0, #24
 801763a:	d501      	bpl.n	8017640 <_printf_i+0xe8>
 801763c:	681e      	ldr	r6, [r3, #0]
 801763e:	e002      	b.n	8017646 <_printf_i+0xee>
 8017640:	0641      	lsls	r1, r0, #25
 8017642:	d5fb      	bpl.n	801763c <_printf_i+0xe4>
 8017644:	881e      	ldrh	r6, [r3, #0]
 8017646:	4853      	ldr	r0, [pc, #332]	; (8017794 <_printf_i+0x23c>)
 8017648:	2f6f      	cmp	r7, #111	; 0x6f
 801764a:	bf0c      	ite	eq
 801764c:	2308      	moveq	r3, #8
 801764e:	230a      	movne	r3, #10
 8017650:	2100      	movs	r1, #0
 8017652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017656:	6865      	ldr	r5, [r4, #4]
 8017658:	60a5      	str	r5, [r4, #8]
 801765a:	2d00      	cmp	r5, #0
 801765c:	bfa2      	ittt	ge
 801765e:	6821      	ldrge	r1, [r4, #0]
 8017660:	f021 0104 	bicge.w	r1, r1, #4
 8017664:	6021      	strge	r1, [r4, #0]
 8017666:	b90e      	cbnz	r6, 801766c <_printf_i+0x114>
 8017668:	2d00      	cmp	r5, #0
 801766a:	d04b      	beq.n	8017704 <_printf_i+0x1ac>
 801766c:	4615      	mov	r5, r2
 801766e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017672:	fb03 6711 	mls	r7, r3, r1, r6
 8017676:	5dc7      	ldrb	r7, [r0, r7]
 8017678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801767c:	4637      	mov	r7, r6
 801767e:	42bb      	cmp	r3, r7
 8017680:	460e      	mov	r6, r1
 8017682:	d9f4      	bls.n	801766e <_printf_i+0x116>
 8017684:	2b08      	cmp	r3, #8
 8017686:	d10b      	bne.n	80176a0 <_printf_i+0x148>
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	07de      	lsls	r6, r3, #31
 801768c:	d508      	bpl.n	80176a0 <_printf_i+0x148>
 801768e:	6923      	ldr	r3, [r4, #16]
 8017690:	6861      	ldr	r1, [r4, #4]
 8017692:	4299      	cmp	r1, r3
 8017694:	bfde      	ittt	le
 8017696:	2330      	movle	r3, #48	; 0x30
 8017698:	f805 3c01 	strble.w	r3, [r5, #-1]
 801769c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80176a0:	1b52      	subs	r2, r2, r5
 80176a2:	6122      	str	r2, [r4, #16]
 80176a4:	f8cd a000 	str.w	sl, [sp]
 80176a8:	464b      	mov	r3, r9
 80176aa:	aa03      	add	r2, sp, #12
 80176ac:	4621      	mov	r1, r4
 80176ae:	4640      	mov	r0, r8
 80176b0:	f7ff fee4 	bl	801747c <_printf_common>
 80176b4:	3001      	adds	r0, #1
 80176b6:	d14a      	bne.n	801774e <_printf_i+0x1f6>
 80176b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80176bc:	b004      	add	sp, #16
 80176be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176c2:	6823      	ldr	r3, [r4, #0]
 80176c4:	f043 0320 	orr.w	r3, r3, #32
 80176c8:	6023      	str	r3, [r4, #0]
 80176ca:	4833      	ldr	r0, [pc, #204]	; (8017798 <_printf_i+0x240>)
 80176cc:	2778      	movs	r7, #120	; 0x78
 80176ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80176d2:	6823      	ldr	r3, [r4, #0]
 80176d4:	6829      	ldr	r1, [r5, #0]
 80176d6:	061f      	lsls	r7, r3, #24
 80176d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80176dc:	d402      	bmi.n	80176e4 <_printf_i+0x18c>
 80176de:	065f      	lsls	r7, r3, #25
 80176e0:	bf48      	it	mi
 80176e2:	b2b6      	uxthmi	r6, r6
 80176e4:	07df      	lsls	r7, r3, #31
 80176e6:	bf48      	it	mi
 80176e8:	f043 0320 	orrmi.w	r3, r3, #32
 80176ec:	6029      	str	r1, [r5, #0]
 80176ee:	bf48      	it	mi
 80176f0:	6023      	strmi	r3, [r4, #0]
 80176f2:	b91e      	cbnz	r6, 80176fc <_printf_i+0x1a4>
 80176f4:	6823      	ldr	r3, [r4, #0]
 80176f6:	f023 0320 	bic.w	r3, r3, #32
 80176fa:	6023      	str	r3, [r4, #0]
 80176fc:	2310      	movs	r3, #16
 80176fe:	e7a7      	b.n	8017650 <_printf_i+0xf8>
 8017700:	4824      	ldr	r0, [pc, #144]	; (8017794 <_printf_i+0x23c>)
 8017702:	e7e4      	b.n	80176ce <_printf_i+0x176>
 8017704:	4615      	mov	r5, r2
 8017706:	e7bd      	b.n	8017684 <_printf_i+0x12c>
 8017708:	682b      	ldr	r3, [r5, #0]
 801770a:	6826      	ldr	r6, [r4, #0]
 801770c:	6961      	ldr	r1, [r4, #20]
 801770e:	1d18      	adds	r0, r3, #4
 8017710:	6028      	str	r0, [r5, #0]
 8017712:	0635      	lsls	r5, r6, #24
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	d501      	bpl.n	801771c <_printf_i+0x1c4>
 8017718:	6019      	str	r1, [r3, #0]
 801771a:	e002      	b.n	8017722 <_printf_i+0x1ca>
 801771c:	0670      	lsls	r0, r6, #25
 801771e:	d5fb      	bpl.n	8017718 <_printf_i+0x1c0>
 8017720:	8019      	strh	r1, [r3, #0]
 8017722:	2300      	movs	r3, #0
 8017724:	6123      	str	r3, [r4, #16]
 8017726:	4615      	mov	r5, r2
 8017728:	e7bc      	b.n	80176a4 <_printf_i+0x14c>
 801772a:	682b      	ldr	r3, [r5, #0]
 801772c:	1d1a      	adds	r2, r3, #4
 801772e:	602a      	str	r2, [r5, #0]
 8017730:	681d      	ldr	r5, [r3, #0]
 8017732:	6862      	ldr	r2, [r4, #4]
 8017734:	2100      	movs	r1, #0
 8017736:	4628      	mov	r0, r5
 8017738:	f7e8 fd82 	bl	8000240 <memchr>
 801773c:	b108      	cbz	r0, 8017742 <_printf_i+0x1ea>
 801773e:	1b40      	subs	r0, r0, r5
 8017740:	6060      	str	r0, [r4, #4]
 8017742:	6863      	ldr	r3, [r4, #4]
 8017744:	6123      	str	r3, [r4, #16]
 8017746:	2300      	movs	r3, #0
 8017748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801774c:	e7aa      	b.n	80176a4 <_printf_i+0x14c>
 801774e:	6923      	ldr	r3, [r4, #16]
 8017750:	462a      	mov	r2, r5
 8017752:	4649      	mov	r1, r9
 8017754:	4640      	mov	r0, r8
 8017756:	47d0      	blx	sl
 8017758:	3001      	adds	r0, #1
 801775a:	d0ad      	beq.n	80176b8 <_printf_i+0x160>
 801775c:	6823      	ldr	r3, [r4, #0]
 801775e:	079b      	lsls	r3, r3, #30
 8017760:	d413      	bmi.n	801778a <_printf_i+0x232>
 8017762:	68e0      	ldr	r0, [r4, #12]
 8017764:	9b03      	ldr	r3, [sp, #12]
 8017766:	4298      	cmp	r0, r3
 8017768:	bfb8      	it	lt
 801776a:	4618      	movlt	r0, r3
 801776c:	e7a6      	b.n	80176bc <_printf_i+0x164>
 801776e:	2301      	movs	r3, #1
 8017770:	4632      	mov	r2, r6
 8017772:	4649      	mov	r1, r9
 8017774:	4640      	mov	r0, r8
 8017776:	47d0      	blx	sl
 8017778:	3001      	adds	r0, #1
 801777a:	d09d      	beq.n	80176b8 <_printf_i+0x160>
 801777c:	3501      	adds	r5, #1
 801777e:	68e3      	ldr	r3, [r4, #12]
 8017780:	9903      	ldr	r1, [sp, #12]
 8017782:	1a5b      	subs	r3, r3, r1
 8017784:	42ab      	cmp	r3, r5
 8017786:	dcf2      	bgt.n	801776e <_printf_i+0x216>
 8017788:	e7eb      	b.n	8017762 <_printf_i+0x20a>
 801778a:	2500      	movs	r5, #0
 801778c:	f104 0619 	add.w	r6, r4, #25
 8017790:	e7f5      	b.n	801777e <_printf_i+0x226>
 8017792:	bf00      	nop
 8017794:	08018af1 	.word	0x08018af1
 8017798:	08018b02 	.word	0x08018b02

0801779c <__sflush_r>:
 801779c:	898a      	ldrh	r2, [r1, #12]
 801779e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177a2:	4605      	mov	r5, r0
 80177a4:	0710      	lsls	r0, r2, #28
 80177a6:	460c      	mov	r4, r1
 80177a8:	d458      	bmi.n	801785c <__sflush_r+0xc0>
 80177aa:	684b      	ldr	r3, [r1, #4]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	dc05      	bgt.n	80177bc <__sflush_r+0x20>
 80177b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	dc02      	bgt.n	80177bc <__sflush_r+0x20>
 80177b6:	2000      	movs	r0, #0
 80177b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177be:	2e00      	cmp	r6, #0
 80177c0:	d0f9      	beq.n	80177b6 <__sflush_r+0x1a>
 80177c2:	2300      	movs	r3, #0
 80177c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80177c8:	682f      	ldr	r7, [r5, #0]
 80177ca:	6a21      	ldr	r1, [r4, #32]
 80177cc:	602b      	str	r3, [r5, #0]
 80177ce:	d032      	beq.n	8017836 <__sflush_r+0x9a>
 80177d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80177d2:	89a3      	ldrh	r3, [r4, #12]
 80177d4:	075a      	lsls	r2, r3, #29
 80177d6:	d505      	bpl.n	80177e4 <__sflush_r+0x48>
 80177d8:	6863      	ldr	r3, [r4, #4]
 80177da:	1ac0      	subs	r0, r0, r3
 80177dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80177de:	b10b      	cbz	r3, 80177e4 <__sflush_r+0x48>
 80177e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80177e2:	1ac0      	subs	r0, r0, r3
 80177e4:	2300      	movs	r3, #0
 80177e6:	4602      	mov	r2, r0
 80177e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177ea:	6a21      	ldr	r1, [r4, #32]
 80177ec:	4628      	mov	r0, r5
 80177ee:	47b0      	blx	r6
 80177f0:	1c43      	adds	r3, r0, #1
 80177f2:	89a3      	ldrh	r3, [r4, #12]
 80177f4:	d106      	bne.n	8017804 <__sflush_r+0x68>
 80177f6:	6829      	ldr	r1, [r5, #0]
 80177f8:	291d      	cmp	r1, #29
 80177fa:	d82b      	bhi.n	8017854 <__sflush_r+0xb8>
 80177fc:	4a29      	ldr	r2, [pc, #164]	; (80178a4 <__sflush_r+0x108>)
 80177fe:	410a      	asrs	r2, r1
 8017800:	07d6      	lsls	r6, r2, #31
 8017802:	d427      	bmi.n	8017854 <__sflush_r+0xb8>
 8017804:	2200      	movs	r2, #0
 8017806:	6062      	str	r2, [r4, #4]
 8017808:	04d9      	lsls	r1, r3, #19
 801780a:	6922      	ldr	r2, [r4, #16]
 801780c:	6022      	str	r2, [r4, #0]
 801780e:	d504      	bpl.n	801781a <__sflush_r+0x7e>
 8017810:	1c42      	adds	r2, r0, #1
 8017812:	d101      	bne.n	8017818 <__sflush_r+0x7c>
 8017814:	682b      	ldr	r3, [r5, #0]
 8017816:	b903      	cbnz	r3, 801781a <__sflush_r+0x7e>
 8017818:	6560      	str	r0, [r4, #84]	; 0x54
 801781a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801781c:	602f      	str	r7, [r5, #0]
 801781e:	2900      	cmp	r1, #0
 8017820:	d0c9      	beq.n	80177b6 <__sflush_r+0x1a>
 8017822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017826:	4299      	cmp	r1, r3
 8017828:	d002      	beq.n	8017830 <__sflush_r+0x94>
 801782a:	4628      	mov	r0, r5
 801782c:	f7ff fb36 	bl	8016e9c <_free_r>
 8017830:	2000      	movs	r0, #0
 8017832:	6360      	str	r0, [r4, #52]	; 0x34
 8017834:	e7c0      	b.n	80177b8 <__sflush_r+0x1c>
 8017836:	2301      	movs	r3, #1
 8017838:	4628      	mov	r0, r5
 801783a:	47b0      	blx	r6
 801783c:	1c41      	adds	r1, r0, #1
 801783e:	d1c8      	bne.n	80177d2 <__sflush_r+0x36>
 8017840:	682b      	ldr	r3, [r5, #0]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d0c5      	beq.n	80177d2 <__sflush_r+0x36>
 8017846:	2b1d      	cmp	r3, #29
 8017848:	d001      	beq.n	801784e <__sflush_r+0xb2>
 801784a:	2b16      	cmp	r3, #22
 801784c:	d101      	bne.n	8017852 <__sflush_r+0xb6>
 801784e:	602f      	str	r7, [r5, #0]
 8017850:	e7b1      	b.n	80177b6 <__sflush_r+0x1a>
 8017852:	89a3      	ldrh	r3, [r4, #12]
 8017854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017858:	81a3      	strh	r3, [r4, #12]
 801785a:	e7ad      	b.n	80177b8 <__sflush_r+0x1c>
 801785c:	690f      	ldr	r7, [r1, #16]
 801785e:	2f00      	cmp	r7, #0
 8017860:	d0a9      	beq.n	80177b6 <__sflush_r+0x1a>
 8017862:	0793      	lsls	r3, r2, #30
 8017864:	680e      	ldr	r6, [r1, #0]
 8017866:	bf08      	it	eq
 8017868:	694b      	ldreq	r3, [r1, #20]
 801786a:	600f      	str	r7, [r1, #0]
 801786c:	bf18      	it	ne
 801786e:	2300      	movne	r3, #0
 8017870:	eba6 0807 	sub.w	r8, r6, r7
 8017874:	608b      	str	r3, [r1, #8]
 8017876:	f1b8 0f00 	cmp.w	r8, #0
 801787a:	dd9c      	ble.n	80177b6 <__sflush_r+0x1a>
 801787c:	6a21      	ldr	r1, [r4, #32]
 801787e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017880:	4643      	mov	r3, r8
 8017882:	463a      	mov	r2, r7
 8017884:	4628      	mov	r0, r5
 8017886:	47b0      	blx	r6
 8017888:	2800      	cmp	r0, #0
 801788a:	dc06      	bgt.n	801789a <__sflush_r+0xfe>
 801788c:	89a3      	ldrh	r3, [r4, #12]
 801788e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017892:	81a3      	strh	r3, [r4, #12]
 8017894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017898:	e78e      	b.n	80177b8 <__sflush_r+0x1c>
 801789a:	4407      	add	r7, r0
 801789c:	eba8 0800 	sub.w	r8, r8, r0
 80178a0:	e7e9      	b.n	8017876 <__sflush_r+0xda>
 80178a2:	bf00      	nop
 80178a4:	dfbffffe 	.word	0xdfbffffe

080178a8 <_fflush_r>:
 80178a8:	b538      	push	{r3, r4, r5, lr}
 80178aa:	690b      	ldr	r3, [r1, #16]
 80178ac:	4605      	mov	r5, r0
 80178ae:	460c      	mov	r4, r1
 80178b0:	b913      	cbnz	r3, 80178b8 <_fflush_r+0x10>
 80178b2:	2500      	movs	r5, #0
 80178b4:	4628      	mov	r0, r5
 80178b6:	bd38      	pop	{r3, r4, r5, pc}
 80178b8:	b118      	cbz	r0, 80178c2 <_fflush_r+0x1a>
 80178ba:	6a03      	ldr	r3, [r0, #32]
 80178bc:	b90b      	cbnz	r3, 80178c2 <_fflush_r+0x1a>
 80178be:	f7ff f8c9 	bl	8016a54 <__sinit>
 80178c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d0f3      	beq.n	80178b2 <_fflush_r+0xa>
 80178ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80178cc:	07d0      	lsls	r0, r2, #31
 80178ce:	d404      	bmi.n	80178da <_fflush_r+0x32>
 80178d0:	0599      	lsls	r1, r3, #22
 80178d2:	d402      	bmi.n	80178da <_fflush_r+0x32>
 80178d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178d6:	f7ff fa9e 	bl	8016e16 <__retarget_lock_acquire_recursive>
 80178da:	4628      	mov	r0, r5
 80178dc:	4621      	mov	r1, r4
 80178de:	f7ff ff5d 	bl	801779c <__sflush_r>
 80178e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80178e4:	07da      	lsls	r2, r3, #31
 80178e6:	4605      	mov	r5, r0
 80178e8:	d4e4      	bmi.n	80178b4 <_fflush_r+0xc>
 80178ea:	89a3      	ldrh	r3, [r4, #12]
 80178ec:	059b      	lsls	r3, r3, #22
 80178ee:	d4e1      	bmi.n	80178b4 <_fflush_r+0xc>
 80178f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178f2:	f7ff fa91 	bl	8016e18 <__retarget_lock_release_recursive>
 80178f6:	e7dd      	b.n	80178b4 <_fflush_r+0xc>

080178f8 <fiprintf>:
 80178f8:	b40e      	push	{r1, r2, r3}
 80178fa:	b503      	push	{r0, r1, lr}
 80178fc:	4601      	mov	r1, r0
 80178fe:	ab03      	add	r3, sp, #12
 8017900:	4805      	ldr	r0, [pc, #20]	; (8017918 <fiprintf+0x20>)
 8017902:	f853 2b04 	ldr.w	r2, [r3], #4
 8017906:	6800      	ldr	r0, [r0, #0]
 8017908:	9301      	str	r3, [sp, #4]
 801790a:	f7ff fc9d 	bl	8017248 <_vfiprintf_r>
 801790e:	b002      	add	sp, #8
 8017910:	f85d eb04 	ldr.w	lr, [sp], #4
 8017914:	b003      	add	sp, #12
 8017916:	4770      	bx	lr
 8017918:	2000010c 	.word	0x2000010c

0801791c <__swbuf_r>:
 801791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801791e:	460e      	mov	r6, r1
 8017920:	4614      	mov	r4, r2
 8017922:	4605      	mov	r5, r0
 8017924:	b118      	cbz	r0, 801792e <__swbuf_r+0x12>
 8017926:	6a03      	ldr	r3, [r0, #32]
 8017928:	b90b      	cbnz	r3, 801792e <__swbuf_r+0x12>
 801792a:	f7ff f893 	bl	8016a54 <__sinit>
 801792e:	69a3      	ldr	r3, [r4, #24]
 8017930:	60a3      	str	r3, [r4, #8]
 8017932:	89a3      	ldrh	r3, [r4, #12]
 8017934:	071a      	lsls	r2, r3, #28
 8017936:	d525      	bpl.n	8017984 <__swbuf_r+0x68>
 8017938:	6923      	ldr	r3, [r4, #16]
 801793a:	b31b      	cbz	r3, 8017984 <__swbuf_r+0x68>
 801793c:	6823      	ldr	r3, [r4, #0]
 801793e:	6922      	ldr	r2, [r4, #16]
 8017940:	1a98      	subs	r0, r3, r2
 8017942:	6963      	ldr	r3, [r4, #20]
 8017944:	b2f6      	uxtb	r6, r6
 8017946:	4283      	cmp	r3, r0
 8017948:	4637      	mov	r7, r6
 801794a:	dc04      	bgt.n	8017956 <__swbuf_r+0x3a>
 801794c:	4621      	mov	r1, r4
 801794e:	4628      	mov	r0, r5
 8017950:	f7ff ffaa 	bl	80178a8 <_fflush_r>
 8017954:	b9e0      	cbnz	r0, 8017990 <__swbuf_r+0x74>
 8017956:	68a3      	ldr	r3, [r4, #8]
 8017958:	3b01      	subs	r3, #1
 801795a:	60a3      	str	r3, [r4, #8]
 801795c:	6823      	ldr	r3, [r4, #0]
 801795e:	1c5a      	adds	r2, r3, #1
 8017960:	6022      	str	r2, [r4, #0]
 8017962:	701e      	strb	r6, [r3, #0]
 8017964:	6962      	ldr	r2, [r4, #20]
 8017966:	1c43      	adds	r3, r0, #1
 8017968:	429a      	cmp	r2, r3
 801796a:	d004      	beq.n	8017976 <__swbuf_r+0x5a>
 801796c:	89a3      	ldrh	r3, [r4, #12]
 801796e:	07db      	lsls	r3, r3, #31
 8017970:	d506      	bpl.n	8017980 <__swbuf_r+0x64>
 8017972:	2e0a      	cmp	r6, #10
 8017974:	d104      	bne.n	8017980 <__swbuf_r+0x64>
 8017976:	4621      	mov	r1, r4
 8017978:	4628      	mov	r0, r5
 801797a:	f7ff ff95 	bl	80178a8 <_fflush_r>
 801797e:	b938      	cbnz	r0, 8017990 <__swbuf_r+0x74>
 8017980:	4638      	mov	r0, r7
 8017982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017984:	4621      	mov	r1, r4
 8017986:	4628      	mov	r0, r5
 8017988:	f000 f806 	bl	8017998 <__swsetup_r>
 801798c:	2800      	cmp	r0, #0
 801798e:	d0d5      	beq.n	801793c <__swbuf_r+0x20>
 8017990:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017994:	e7f4      	b.n	8017980 <__swbuf_r+0x64>
	...

08017998 <__swsetup_r>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4b2a      	ldr	r3, [pc, #168]	; (8017a44 <__swsetup_r+0xac>)
 801799c:	4605      	mov	r5, r0
 801799e:	6818      	ldr	r0, [r3, #0]
 80179a0:	460c      	mov	r4, r1
 80179a2:	b118      	cbz	r0, 80179ac <__swsetup_r+0x14>
 80179a4:	6a03      	ldr	r3, [r0, #32]
 80179a6:	b90b      	cbnz	r3, 80179ac <__swsetup_r+0x14>
 80179a8:	f7ff f854 	bl	8016a54 <__sinit>
 80179ac:	89a3      	ldrh	r3, [r4, #12]
 80179ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179b2:	0718      	lsls	r0, r3, #28
 80179b4:	d422      	bmi.n	80179fc <__swsetup_r+0x64>
 80179b6:	06d9      	lsls	r1, r3, #27
 80179b8:	d407      	bmi.n	80179ca <__swsetup_r+0x32>
 80179ba:	2309      	movs	r3, #9
 80179bc:	602b      	str	r3, [r5, #0]
 80179be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80179c2:	81a3      	strh	r3, [r4, #12]
 80179c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179c8:	e034      	b.n	8017a34 <__swsetup_r+0x9c>
 80179ca:	0758      	lsls	r0, r3, #29
 80179cc:	d512      	bpl.n	80179f4 <__swsetup_r+0x5c>
 80179ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179d0:	b141      	cbz	r1, 80179e4 <__swsetup_r+0x4c>
 80179d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179d6:	4299      	cmp	r1, r3
 80179d8:	d002      	beq.n	80179e0 <__swsetup_r+0x48>
 80179da:	4628      	mov	r0, r5
 80179dc:	f7ff fa5e 	bl	8016e9c <_free_r>
 80179e0:	2300      	movs	r3, #0
 80179e2:	6363      	str	r3, [r4, #52]	; 0x34
 80179e4:	89a3      	ldrh	r3, [r4, #12]
 80179e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80179ea:	81a3      	strh	r3, [r4, #12]
 80179ec:	2300      	movs	r3, #0
 80179ee:	6063      	str	r3, [r4, #4]
 80179f0:	6923      	ldr	r3, [r4, #16]
 80179f2:	6023      	str	r3, [r4, #0]
 80179f4:	89a3      	ldrh	r3, [r4, #12]
 80179f6:	f043 0308 	orr.w	r3, r3, #8
 80179fa:	81a3      	strh	r3, [r4, #12]
 80179fc:	6923      	ldr	r3, [r4, #16]
 80179fe:	b94b      	cbnz	r3, 8017a14 <__swsetup_r+0x7c>
 8017a00:	89a3      	ldrh	r3, [r4, #12]
 8017a02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a0a:	d003      	beq.n	8017a14 <__swsetup_r+0x7c>
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	4628      	mov	r0, r5
 8017a10:	f000 f847 	bl	8017aa2 <__smakebuf_r>
 8017a14:	89a0      	ldrh	r0, [r4, #12]
 8017a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a1a:	f010 0301 	ands.w	r3, r0, #1
 8017a1e:	d00a      	beq.n	8017a36 <__swsetup_r+0x9e>
 8017a20:	2300      	movs	r3, #0
 8017a22:	60a3      	str	r3, [r4, #8]
 8017a24:	6963      	ldr	r3, [r4, #20]
 8017a26:	425b      	negs	r3, r3
 8017a28:	61a3      	str	r3, [r4, #24]
 8017a2a:	6923      	ldr	r3, [r4, #16]
 8017a2c:	b943      	cbnz	r3, 8017a40 <__swsetup_r+0xa8>
 8017a2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a32:	d1c4      	bne.n	80179be <__swsetup_r+0x26>
 8017a34:	bd38      	pop	{r3, r4, r5, pc}
 8017a36:	0781      	lsls	r1, r0, #30
 8017a38:	bf58      	it	pl
 8017a3a:	6963      	ldrpl	r3, [r4, #20]
 8017a3c:	60a3      	str	r3, [r4, #8]
 8017a3e:	e7f4      	b.n	8017a2a <__swsetup_r+0x92>
 8017a40:	2000      	movs	r0, #0
 8017a42:	e7f7      	b.n	8017a34 <__swsetup_r+0x9c>
 8017a44:	2000010c 	.word	0x2000010c

08017a48 <abort>:
 8017a48:	b508      	push	{r3, lr}
 8017a4a:	2006      	movs	r0, #6
 8017a4c:	f000 f88e 	bl	8017b6c <raise>
 8017a50:	2001      	movs	r0, #1
 8017a52:	f7ea f979 	bl	8001d48 <_exit>

08017a56 <__swhatbuf_r>:
 8017a56:	b570      	push	{r4, r5, r6, lr}
 8017a58:	460c      	mov	r4, r1
 8017a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a5e:	2900      	cmp	r1, #0
 8017a60:	b096      	sub	sp, #88	; 0x58
 8017a62:	4615      	mov	r5, r2
 8017a64:	461e      	mov	r6, r3
 8017a66:	da0d      	bge.n	8017a84 <__swhatbuf_r+0x2e>
 8017a68:	89a3      	ldrh	r3, [r4, #12]
 8017a6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017a6e:	f04f 0100 	mov.w	r1, #0
 8017a72:	bf0c      	ite	eq
 8017a74:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017a78:	2340      	movne	r3, #64	; 0x40
 8017a7a:	2000      	movs	r0, #0
 8017a7c:	6031      	str	r1, [r6, #0]
 8017a7e:	602b      	str	r3, [r5, #0]
 8017a80:	b016      	add	sp, #88	; 0x58
 8017a82:	bd70      	pop	{r4, r5, r6, pc}
 8017a84:	466a      	mov	r2, sp
 8017a86:	f000 f879 	bl	8017b7c <_fstat_r>
 8017a8a:	2800      	cmp	r0, #0
 8017a8c:	dbec      	blt.n	8017a68 <__swhatbuf_r+0x12>
 8017a8e:	9901      	ldr	r1, [sp, #4]
 8017a90:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017a94:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017a98:	4259      	negs	r1, r3
 8017a9a:	4159      	adcs	r1, r3
 8017a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017aa0:	e7eb      	b.n	8017a7a <__swhatbuf_r+0x24>

08017aa2 <__smakebuf_r>:
 8017aa2:	898b      	ldrh	r3, [r1, #12]
 8017aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017aa6:	079d      	lsls	r5, r3, #30
 8017aa8:	4606      	mov	r6, r0
 8017aaa:	460c      	mov	r4, r1
 8017aac:	d507      	bpl.n	8017abe <__smakebuf_r+0x1c>
 8017aae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017ab2:	6023      	str	r3, [r4, #0]
 8017ab4:	6123      	str	r3, [r4, #16]
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	6163      	str	r3, [r4, #20]
 8017aba:	b002      	add	sp, #8
 8017abc:	bd70      	pop	{r4, r5, r6, pc}
 8017abe:	ab01      	add	r3, sp, #4
 8017ac0:	466a      	mov	r2, sp
 8017ac2:	f7ff ffc8 	bl	8017a56 <__swhatbuf_r>
 8017ac6:	9900      	ldr	r1, [sp, #0]
 8017ac8:	4605      	mov	r5, r0
 8017aca:	4630      	mov	r0, r6
 8017acc:	f7fe fd8a 	bl	80165e4 <_malloc_r>
 8017ad0:	b948      	cbnz	r0, 8017ae6 <__smakebuf_r+0x44>
 8017ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ad6:	059a      	lsls	r2, r3, #22
 8017ad8:	d4ef      	bmi.n	8017aba <__smakebuf_r+0x18>
 8017ada:	f023 0303 	bic.w	r3, r3, #3
 8017ade:	f043 0302 	orr.w	r3, r3, #2
 8017ae2:	81a3      	strh	r3, [r4, #12]
 8017ae4:	e7e3      	b.n	8017aae <__smakebuf_r+0xc>
 8017ae6:	89a3      	ldrh	r3, [r4, #12]
 8017ae8:	6020      	str	r0, [r4, #0]
 8017aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017aee:	81a3      	strh	r3, [r4, #12]
 8017af0:	9b00      	ldr	r3, [sp, #0]
 8017af2:	6163      	str	r3, [r4, #20]
 8017af4:	9b01      	ldr	r3, [sp, #4]
 8017af6:	6120      	str	r0, [r4, #16]
 8017af8:	b15b      	cbz	r3, 8017b12 <__smakebuf_r+0x70>
 8017afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017afe:	4630      	mov	r0, r6
 8017b00:	f000 f84e 	bl	8017ba0 <_isatty_r>
 8017b04:	b128      	cbz	r0, 8017b12 <__smakebuf_r+0x70>
 8017b06:	89a3      	ldrh	r3, [r4, #12]
 8017b08:	f023 0303 	bic.w	r3, r3, #3
 8017b0c:	f043 0301 	orr.w	r3, r3, #1
 8017b10:	81a3      	strh	r3, [r4, #12]
 8017b12:	89a3      	ldrh	r3, [r4, #12]
 8017b14:	431d      	orrs	r5, r3
 8017b16:	81a5      	strh	r5, [r4, #12]
 8017b18:	e7cf      	b.n	8017aba <__smakebuf_r+0x18>

08017b1a <_raise_r>:
 8017b1a:	291f      	cmp	r1, #31
 8017b1c:	b538      	push	{r3, r4, r5, lr}
 8017b1e:	4604      	mov	r4, r0
 8017b20:	460d      	mov	r5, r1
 8017b22:	d904      	bls.n	8017b2e <_raise_r+0x14>
 8017b24:	2316      	movs	r3, #22
 8017b26:	6003      	str	r3, [r0, #0]
 8017b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b2c:	bd38      	pop	{r3, r4, r5, pc}
 8017b2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017b30:	b112      	cbz	r2, 8017b38 <_raise_r+0x1e>
 8017b32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017b36:	b94b      	cbnz	r3, 8017b4c <_raise_r+0x32>
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f000 f853 	bl	8017be4 <_getpid_r>
 8017b3e:	462a      	mov	r2, r5
 8017b40:	4601      	mov	r1, r0
 8017b42:	4620      	mov	r0, r4
 8017b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b48:	f000 b83a 	b.w	8017bc0 <_kill_r>
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	d00a      	beq.n	8017b66 <_raise_r+0x4c>
 8017b50:	1c59      	adds	r1, r3, #1
 8017b52:	d103      	bne.n	8017b5c <_raise_r+0x42>
 8017b54:	2316      	movs	r3, #22
 8017b56:	6003      	str	r3, [r0, #0]
 8017b58:	2001      	movs	r0, #1
 8017b5a:	e7e7      	b.n	8017b2c <_raise_r+0x12>
 8017b5c:	2400      	movs	r4, #0
 8017b5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017b62:	4628      	mov	r0, r5
 8017b64:	4798      	blx	r3
 8017b66:	2000      	movs	r0, #0
 8017b68:	e7e0      	b.n	8017b2c <_raise_r+0x12>
	...

08017b6c <raise>:
 8017b6c:	4b02      	ldr	r3, [pc, #8]	; (8017b78 <raise+0xc>)
 8017b6e:	4601      	mov	r1, r0
 8017b70:	6818      	ldr	r0, [r3, #0]
 8017b72:	f7ff bfd2 	b.w	8017b1a <_raise_r>
 8017b76:	bf00      	nop
 8017b78:	2000010c 	.word	0x2000010c

08017b7c <_fstat_r>:
 8017b7c:	b538      	push	{r3, r4, r5, lr}
 8017b7e:	4d07      	ldr	r5, [pc, #28]	; (8017b9c <_fstat_r+0x20>)
 8017b80:	2300      	movs	r3, #0
 8017b82:	4604      	mov	r4, r0
 8017b84:	4608      	mov	r0, r1
 8017b86:	4611      	mov	r1, r2
 8017b88:	602b      	str	r3, [r5, #0]
 8017b8a:	f7ea f92c 	bl	8001de6 <_fstat>
 8017b8e:	1c43      	adds	r3, r0, #1
 8017b90:	d102      	bne.n	8017b98 <_fstat_r+0x1c>
 8017b92:	682b      	ldr	r3, [r5, #0]
 8017b94:	b103      	cbz	r3, 8017b98 <_fstat_r+0x1c>
 8017b96:	6023      	str	r3, [r4, #0]
 8017b98:	bd38      	pop	{r3, r4, r5, pc}
 8017b9a:	bf00      	nop
 8017b9c:	200137b4 	.word	0x200137b4

08017ba0 <_isatty_r>:
 8017ba0:	b538      	push	{r3, r4, r5, lr}
 8017ba2:	4d06      	ldr	r5, [pc, #24]	; (8017bbc <_isatty_r+0x1c>)
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	4604      	mov	r4, r0
 8017ba8:	4608      	mov	r0, r1
 8017baa:	602b      	str	r3, [r5, #0]
 8017bac:	f7ea f92b 	bl	8001e06 <_isatty>
 8017bb0:	1c43      	adds	r3, r0, #1
 8017bb2:	d102      	bne.n	8017bba <_isatty_r+0x1a>
 8017bb4:	682b      	ldr	r3, [r5, #0]
 8017bb6:	b103      	cbz	r3, 8017bba <_isatty_r+0x1a>
 8017bb8:	6023      	str	r3, [r4, #0]
 8017bba:	bd38      	pop	{r3, r4, r5, pc}
 8017bbc:	200137b4 	.word	0x200137b4

08017bc0 <_kill_r>:
 8017bc0:	b538      	push	{r3, r4, r5, lr}
 8017bc2:	4d07      	ldr	r5, [pc, #28]	; (8017be0 <_kill_r+0x20>)
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	4604      	mov	r4, r0
 8017bc8:	4608      	mov	r0, r1
 8017bca:	4611      	mov	r1, r2
 8017bcc:	602b      	str	r3, [r5, #0]
 8017bce:	f7ea f8ab 	bl	8001d28 <_kill>
 8017bd2:	1c43      	adds	r3, r0, #1
 8017bd4:	d102      	bne.n	8017bdc <_kill_r+0x1c>
 8017bd6:	682b      	ldr	r3, [r5, #0]
 8017bd8:	b103      	cbz	r3, 8017bdc <_kill_r+0x1c>
 8017bda:	6023      	str	r3, [r4, #0]
 8017bdc:	bd38      	pop	{r3, r4, r5, pc}
 8017bde:	bf00      	nop
 8017be0:	200137b4 	.word	0x200137b4

08017be4 <_getpid_r>:
 8017be4:	f7ea b898 	b.w	8001d18 <_getpid>

08017be8 <_init>:
 8017be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bea:	bf00      	nop
 8017bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bee:	bc08      	pop	{r3}
 8017bf0:	469e      	mov	lr, r3
 8017bf2:	4770      	bx	lr

08017bf4 <_fini>:
 8017bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bf6:	bf00      	nop
 8017bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bfa:	bc08      	pop	{r3}
 8017bfc:	469e      	mov	lr, r3
 8017bfe:	4770      	bx	lr
