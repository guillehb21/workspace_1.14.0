
Ros2_v_0_0_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017510  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee4  080176e0  080176e0  000276e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185c4  080185c4  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  080185c4  080185c4  000285c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185cc  080185cc  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080185cc  080185cc  000285cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185d4  080185d4  000285d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080185d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000110  080186e8  00030110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001b0  08018788  000301b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001309c  20000250  08018828  00030250  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200132ec  08018828  000332ec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 14 .comment      00000076  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024825  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004ab1  00000000  00000000  00054b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001bf0  00000000  00000000  000595d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000015ab  00000000  00000000  0005b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000972c  00000000  00000000  0005c76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000223c3  00000000  00000000  00065e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010eb99  00000000  00000000  0008825a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000841c  00000000  00000000  00196df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0019f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000250 	.word	0x20000250
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080176c8 	.word	0x080176c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000254 	.word	0x20000254
 800020c:	080176c8 	.word	0x080176c8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bb 	b.w	8000678 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000688:	f007 fb62 	bl	8007d50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800068c:	4b5b      	ldr	r3, [pc, #364]	; (80007fc <pvPortMallocMicroROS+0x180>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000694:	f000 f98a 	bl	80009ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <pvPortMallocMicroROS+0x184>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 8092 	bne.w	80007ca <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01f      	beq.n	80006ec <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80006ac:	2208      	movs	r2, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d016      	beq.n	80006ec <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	3308      	adds	r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00c      	beq.n	80006ec <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	b672      	cpsid	i
 80006d8:	f383 8811 	msr	BASEPRI, r3
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	b662      	cpsie	i
 80006e6:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e8:	bf00      	nop
 80006ea:	e7fe      	b.n	80006ea <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d06b      	beq.n	80007ca <pvPortMallocMicroROS+0x14e>
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d866      	bhi.n	80007ca <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <pvPortMallocMicroROS+0x18c>)
 80006fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000700:	4b41      	ldr	r3, [pc, #260]	; (8000808 <pvPortMallocMicroROS+0x18c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000706:	e004      	b.n	8000712 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	d903      	bls.n	8000724 <pvPortMallocMicroROS+0xa8>
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f1      	bne.n	8000708 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000724:	4b35      	ldr	r3, [pc, #212]	; (80007fc <pvPortMallocMicroROS+0x180>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072a:	429a      	cmp	r2, r3
 800072c:	d04d      	beq.n	80007ca <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2208      	movs	r2, #8
 8000734:	4413      	add	r3, r2
 8000736:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1ad2      	subs	r2, r2, r3
 8000748:	2308      	movs	r3, #8
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	429a      	cmp	r2, r3
 800074e:	d921      	bls.n	8000794 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00c      	beq.n	800077c <pvPortMallocMicroROS+0x100>
	__asm volatile
 8000762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000766:	b672      	cpsid	i
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	b662      	cpsie	i
 8000776:	613b      	str	r3, [r7, #16]
}
 8000778:	bf00      	nop
 800077a:	e7fe      	b.n	800077a <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1ad2      	subs	r2, r2, r3
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800078e:	69b8      	ldr	r0, [r7, #24]
 8000790:	f000 f96e 	bl	8000a70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <pvPortMallocMicroROS+0x188>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80007a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <pvPortMallocMicroROS+0x190>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d203      	bcs.n	80007b6 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <pvPortMallocMicroROS+0x188>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <pvPortMallocMicroROS+0x190>)
 80007b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	431a      	orrs	r2, r3
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007ca:	f007 facf 	bl	8007d6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00c      	beq.n	80007f2 <pvPortMallocMicroROS+0x176>
	__asm volatile
 80007d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007dc:	b672      	cpsid	i
 80007de:	f383 8811 	msr	BASEPRI, r3
 80007e2:	f3bf 8f6f 	isb	sy
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	b662      	cpsie	i
 80007ec:	60fb      	str	r3, [r7, #12]
}
 80007ee:	bf00      	nop
 80007f0:	e7fe      	b.n	80007f0 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 80007f2:	69fb      	ldr	r3, [r7, #28]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20003e74 	.word	0x20003e74
 8000800:	20003e80 	.word	0x20003e80
 8000804:	20003e78 	.word	0x20003e78
 8000808:	20003e6c 	.word	0x20003e6c
 800080c:	20003e7c 	.word	0x20003e7c

08000810 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d04c      	beq.n	80008bc <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000822:	2308      	movs	r3, #8
 8000824:	425b      	negs	r3, r3
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4413      	add	r3, r2
 800082a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <vPortFreeMicroROS+0xb4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4013      	ands	r3, r2
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10c      	bne.n	8000858 <vPortFreeMicroROS+0x48>
	__asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000842:	b672      	cpsid	i
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	b662      	cpsie	i
 8000852:	60fb      	str	r3, [r7, #12]
}
 8000854:	bf00      	nop
 8000856:	e7fe      	b.n	8000856 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00c      	beq.n	800087a <vPortFreeMicroROS+0x6a>
	__asm volatile
 8000860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000864:	b672      	cpsid	i
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	b662      	cpsie	i
 8000874:	60bb      	str	r3, [r7, #8]
}
 8000876:	bf00      	nop
 8000878:	e7fe      	b.n	8000878 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <vPortFreeMicroROS+0xb4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4013      	ands	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d019      	beq.n	80008bc <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d115      	bne.n	80008bc <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <vPortFreeMicroROS+0xb4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	43db      	mvns	r3, r3
 800089a:	401a      	ands	r2, r3
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008a0:	f007 fa56 	bl	8007d50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <vPortFreeMicroROS+0xb8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <vPortFreeMicroROS+0xb8>)
 80008b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008b2:	6938      	ldr	r0, [r7, #16]
 80008b4:	f000 f8dc 	bl	8000a70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008b8:	f007 fa58 	bl	8007d6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20003e80 	.word	0x20003e80
 80008c8:	20003e78 	.word	0x20003e78

080008cc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008d8:	2308      	movs	r3, #8
 80008da:	425b      	negs	r3, r3
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <getBlockSize+0x38>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	43db      	mvns	r3, r3
 80008f0:	4013      	ands	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]

	return count;
 80008f4:	68fb      	ldr	r3, [r7, #12]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20003e80 	.word	0x20003e80

08000908 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000912:	f007 fa1d 	bl	8007d50 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000916:	6838      	ldr	r0, [r7, #0]
 8000918:	f7ff feb0 	bl	800067c <pvPortMallocMicroROS>
 800091c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d017      	beq.n	8000954 <pvPortReallocMicroROS+0x4c>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d014      	beq.n	8000954 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffce 	bl	80008cc <getBlockSize>
 8000930:	4603      	mov	r3, r0
 8000932:	2208      	movs	r2, #8
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d201      	bcs.n	8000944 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	68b8      	ldr	r0, [r7, #8]
 800094a:	f015 ffde 	bl	801690a <memcpy>

		vPortFreeMicroROS(pv);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff5e 	bl	8000810 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000954:	f007 fa0a 	bl	8007d6c <xTaskResumeAll>

	return newmem;
 8000958:	68bb      	ldr	r3, [r7, #8]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096c:	f007 f9f0 	bl	8007d50 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	fb02 f303 	mul.w	r3, r2, r3
 8000978:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff fe7e 	bl	800067c <pvPortMallocMicroROS>
 8000980:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000986:	e004      	b.n	8000992 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	613a      	str	r2, [r7, #16]
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	617a      	str	r2, [r7, #20]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f5      	bne.n	8000988 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800099c:	f007 f9e6 	bl	8007d6c <xTaskResumeAll>
  	return mem;
 80009a0:	68fb      	ldr	r3, [r7, #12]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <prvHeapInit+0xac>)
 80009ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00c      	beq.n	80009e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3307      	adds	r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f023 0307 	bic.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <prvHeapInit+0xac>)
 80009dc:	4413      	add	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <prvHeapInit+0xb0>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <prvHeapInit+0xb0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009f8:	2208      	movs	r2, #8
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f023 0307 	bic.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <prvHeapInit+0xb4>)
 8000a0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <prvHeapInit+0xb4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	1ad2      	subs	r2, r2, r3
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <prvHeapInit+0xb4>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <prvHeapInit+0xb8>)
 8000a3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <prvHeapInit+0xbc>)
 8000a42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <prvHeapInit+0xc0>)
 8000a46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	2000026c 	.word	0x2000026c
 8000a5c:	20003e6c 	.word	0x20003e6c
 8000a60:	20003e74 	.word	0x20003e74
 8000a64:	20003e7c 	.word	0x20003e7c
 8000a68:	20003e78 	.word	0x20003e78
 8000a6c:	20003e80 	.word	0x20003e80

08000a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <prvInsertBlockIntoFreeList+0xac>)
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e002      	b.n	8000a84 <prvInsertBlockIntoFreeList+0x14>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d8f7      	bhi.n	8000a7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d108      	bne.n	8000ab2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	441a      	add	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d118      	bne.n	8000af8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <prvInsertBlockIntoFreeList+0xb0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d00d      	beq.n	8000aee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	441a      	add	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e008      	b.n	8000b00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <prvInsertBlockIntoFreeList+0xb0>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e003      	b.n	8000b00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d002      	beq.n	8000b0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20003e6c 	.word	0x20003e6c
 8000b20:	20003e74 	.word	0x20003e74

08000b24 <subscription_callback>:
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


void subscription_callback(const void * msgin)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	//const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
	//printf("Received: %f\n", msg->data);
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f001 f9cf 	bl	8001ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f81e 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 f956 	bl	8000df4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b48:	f000 f92e 	bl	8000da8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b4c:	f000 f8ce 	bl	8000cec <MX_USART3_UART_Init>
  MX_ETH_Init();
 8000b50:	f000 f87e 	bl	8000c50 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b54:	f000 f8fa 	bl	8000d4c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b58:	f005 ff80 	bl	8006a5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b5c:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <main+0x3c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <main+0x40>)
 8000b62:	f005 ffe5 	bl	8006b30 <osThreadNew>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <main+0x44>)
 8000b6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b6c:	f005 ffaa 	bl	8006ac4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <main+0x38>
 8000b72:	bf00      	nop
 8000b74:	08017860 	.word	0x08017860
 8000b78:	08000f39 	.word	0x08000f39
 8000b7c:	200045ec 	.word	0x200045ec

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f015 fdf2 	bl	8016778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ba4:	f002 fd18 	bl	80035d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <SystemClock_Config+0xc8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <SystemClock_Config+0xc8>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <SystemClock_Config+0xc8>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bf4:	2348      	movs	r3, #72	; 0x48
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fcf7 	bl	80035f8 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c10:	f000 fb76 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 ff85 	bl	8003b40 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c3c:	f000 fb60 	bl	8001300 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3750      	adds	r7, #80	; 0x50
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ETH_Init+0x84>)
 8000c56:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <MX_ETH_Init+0x88>)
 8000c58:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_ETH_Init+0x8c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_ETH_Init+0x8c>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_ETH_Init+0x8c>)
 8000c68:	22e1      	movs	r2, #225	; 0xe1
 8000c6a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_ETH_Init+0x8c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_ETH_Init+0x8c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_ETH_Init+0x8c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_ETH_Init+0x84>)
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <MX_ETH_Init+0x8c>)
 8000c82:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_ETH_Init+0x84>)
 8000c86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c8a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_ETH_Init+0x84>)
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <MX_ETH_Init+0x90>)
 8000c90:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <MX_ETH_Init+0x84>)
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <MX_ETH_Init+0x94>)
 8000c96:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_ETH_Init+0x84>)
 8000c9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c9e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_ETH_Init+0x84>)
 8000ca2:	f001 fe65 	bl	8002970 <HAL_ETH_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000cac:	f000 fb28 	bl	8001300 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cb0:	2238      	movs	r2, #56	; 0x38
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_ETH_Init+0x98>)
 8000cb6:	f015 fd5f 	bl	8016778 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_ETH_Init+0x98>)
 8000cbc:	2221      	movs	r2, #33	; 0x21
 8000cbe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_ETH_Init+0x98>)
 8000cc2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000cc6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_ETH_Init+0x98>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20003eec 	.word	0x20003eec
 8000cd8:	40028000 	.word	0x40028000
 8000cdc:	2000946c 	.word	0x2000946c
 8000ce0:	200001b0 	.word	0x200001b0
 8000ce4:	20000110 	.word	0x20000110
 8000ce8:	20003eb4 	.word	0x20003eb4

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_USART3_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d30:	f004 f82e 	bl	8004d90 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 fae1 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20003f9c 	.word	0x20003f9c
 8000d48:	40004800 	.word	0x40004800

08000d4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d90:	f002 fad9 	bl	8003346 <HAL_PCD_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f000 fab1 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200040e4 	.word	0x200040e4

08000da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_DMA_Init+0x48>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <MX_DMA_Init+0x48>)
 8000db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_DMA_Init+0x48>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	200c      	movs	r0, #12
 8000dcc:	f001 f990 	bl	80020f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dd0:	200c      	movs	r0, #12
 8000dd2:	f001 f9a9 	bl	8002128 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2105      	movs	r1, #5
 8000dda:	200e      	movs	r0, #14
 8000ddc:	f001 f988 	bl	80020f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000de0:	200e      	movs	r0, #14
 8000de2:	f001 f9a1 	bl	8002128 <HAL_NVIC_EnableIRQ>

}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a46      	ldr	r2, [pc, #280]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a40      	ldr	r2, [pc, #256]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a3a      	ldr	r2, [pc, #232]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a34      	ldr	r2, [pc, #208]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a2e      	ldr	r2, [pc, #184]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_GPIO_Init+0x134>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ea0:	4822      	ldr	r0, [pc, #136]	; (8000f2c <MX_GPIO_Init+0x138>)
 8000ea2:	f002 fa37 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	4821      	ldr	r0, [pc, #132]	; (8000f30 <MX_GPIO_Init+0x13c>)
 8000eac:	f002 fa32 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481b      	ldr	r0, [pc, #108]	; (8000f34 <MX_GPIO_Init+0x140>)
 8000ec8:	f002 f878 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ecc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_GPIO_Init+0x138>)
 8000ee6:	f002 f869 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <MX_GPIO_Init+0x13c>)
 8000f02:	f002 f85b 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_GPIO_Init+0x13c>)
 8000f1a:	f002 f84f 	bl	8002fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40020800 	.word	0x40020800

08000f38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b0d2      	sub	sp, #328	; 0x148
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f42:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f46:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000f48:	4bbf      	ldr	r3, [pc, #764]	; (8001248 <StartDefaultTask+0x310>)
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	4bbf      	ldr	r3, [pc, #764]	; (800124c <StartDefaultTask+0x314>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4bbf      	ldr	r3, [pc, #764]	; (8001250 <StartDefaultTask+0x318>)
 8000f52:	4ac0      	ldr	r2, [pc, #768]	; (8001254 <StartDefaultTask+0x31c>)
 8000f54:	49c0      	ldr	r1, [pc, #768]	; (8001258 <StartDefaultTask+0x320>)
 8000f56:	2001      	movs	r0, #1
 8000f58:	f009 fc5e 	bl	800a818 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000f5c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f009 fb8b 	bl	800a67c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000f66:	4bbd      	ldr	r3, [pc, #756]	; (800125c <StartDefaultTask+0x324>)
 8000f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000f6c:	4bbc      	ldr	r3, [pc, #752]	; (8001260 <StartDefaultTask+0x328>)
 8000f6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000f72:	4bbc      	ldr	r3, [pc, #752]	; (8001264 <StartDefaultTask+0x32c>)
 8000f74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000f78:	4bbb      	ldr	r3, [pc, #748]	; (8001268 <StartDefaultTask+0x330>)
 8000f7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f7e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000f82:	4618      	mov	r0, r3
 8000f84:	f009 fb88 	bl	800a698 <rcutils_set_default_allocator>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000f94:	f240 2135 	movw	r1, #565	; 0x235
 8000f98:	48b4      	ldr	r0, [pc, #720]	; (800126c <StartDefaultTask+0x334>)
 8000f9a:	f015 fb01 	bl	80165a0 <iprintf>



	  //mensajes subcriptor

	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor() ;
 8000f9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f008 ffa2 	bl	8009eec <rclc_executor_get_zero_initialized_executor>
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8000fa8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fac:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f009 fb8e 	bl	800a6d4 <rcutils_get_default_allocator>
 8000fb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000fc0:	461d      	mov	r5, r3
 8000fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f009 fa5b 	bl	800a490 <rclc_support_init>
	  // create node
	   rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000fda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fde:	f107 0020 	add.w	r0, r7, #32
 8000fe2:	4aa3      	ldr	r2, [pc, #652]	; (8001270 <StartDefaultTask+0x338>)
 8000fe4:	49a3      	ldr	r1, [pc, #652]	; (8001274 <StartDefaultTask+0x33c>)
 8000fe6:	f009 fa9d 	bl	800a524 <rclc_node_init_default>

	 // create publisher

	  rclc_publisher_init_default(
 8000fea:	f00a f941 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f107 0120 	add.w	r1, r7, #32
 8000ff4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8000ff8:	4b9f      	ldr	r3, [pc, #636]	; (8001278 <StartDefaultTask+0x340>)
 8000ffa:	f009 facf 	bl	800a59c <rclc_publisher_init_default>
	    &publisher_ancle_left_current,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	    "ancle_left_current");

	  rclc_publisher_init_default(
 8000ffe:	f00a f937 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001002:	4602      	mov	r2, r0
 8001004:	f107 0120 	add.w	r1, r7, #32
 8001008:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800100c:	4b9b      	ldr	r3, [pc, #620]	; (800127c <StartDefaultTask+0x344>)
 800100e:	f009 fac5 	bl	800a59c <rclc_publisher_init_default>
	    &publisher_ancle_right_current,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	    "ancle_right_current");

	  rclc_publisher_init_default(
 8001012:	f00a f92d 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001016:	4602      	mov	r2, r0
 8001018:	f107 0120 	add.w	r1, r7, #32
 800101c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001020:	4b97      	ldr	r3, [pc, #604]	; (8001280 <StartDefaultTask+0x348>)
 8001022:	f009 fabb 	bl	800a59c <rclc_publisher_init_default>
	      &publisher_knee_left_current,
	      &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	      "knee_left_current");

	  rclc_publisher_init_default(
 8001026:	f00a f923 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800102a:	4602      	mov	r2, r0
 800102c:	f107 0120 	add.w	r1, r7, #32
 8001030:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8001034:	4b93      	ldr	r3, [pc, #588]	; (8001284 <StartDefaultTask+0x34c>)
 8001036:	f009 fab1 	bl	800a59c <rclc_publisher_init_default>
	      &publisher_knee_right_current,
	      &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	      "knee_right_current");
	  rclc_publisher_init_default(
 800103a:	f00a f919 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800103e:	4602      	mov	r2, r0
 8001040:	f107 0120 	add.w	r1, r7, #32
 8001044:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001048:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <StartDefaultTask+0x350>)
 800104a:	f009 faa7 	bl	800a59c <rclc_publisher_init_default>
	        &publisher_heap_left_current,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	        "heap_left_current");

	 rclc_publisher_init_default(
 800104e:	f00a f90f 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001052:	4602      	mov	r2, r0
 8001054:	f107 0120 	add.w	r1, r7, #32
 8001058:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800105c:	4b8b      	ldr	r3, [pc, #556]	; (800128c <StartDefaultTask+0x354>)
 800105e:	f009 fa9d 	bl	800a59c <rclc_publisher_init_default>
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	        "heap_right_current");



	   msg_ancle_left_current.data = 0;
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	   msg_ancle_right_current.data = 0;
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	   msg_knee_left_current.data=0;
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	   msg_knee_right_current.data=0;
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	   msg_heap_left_current.data=0;
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	   msg_heap_right_current.data=0;
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	//subcriptor
	   rclc_subscription_init_best_effort(
 8001092:	f00a f8ed 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001096:	4602      	mov	r2, r0
 8001098:	f107 0120 	add.w	r1, r7, #32
 800109c:	4b7c      	ldr	r3, [pc, #496]	; (8001290 <StartDefaultTask+0x358>)
 800109e:	487d      	ldr	r0, [pc, #500]	; (8001294 <StartDefaultTask+0x35c>)
 80010a0:	f009 fab0 	bl	800a604 <rclc_subscription_init_best_effort>
	   		&subscription_ancle_left_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/ancle_left_reference");

	   rclc_subscription_init_best_effort(
 80010a4:	f00a f8e4 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f107 0120 	add.w	r1, r7, #32
 80010ae:	4b7a      	ldr	r3, [pc, #488]	; (8001298 <StartDefaultTask+0x360>)
 80010b0:	487a      	ldr	r0, [pc, #488]	; (800129c <StartDefaultTask+0x364>)
 80010b2:	f009 faa7 	bl	800a604 <rclc_subscription_init_best_effort>
	   		&subscription_ancle_right_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/ancle_right_reference");

	   rclc_subscription_init_best_effort(
 80010b6:	f00a f8db 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010ba:	4602      	mov	r2, r0
 80010bc:	f107 0120 	add.w	r1, r7, #32
 80010c0:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <StartDefaultTask+0x368>)
 80010c2:	4878      	ldr	r0, [pc, #480]	; (80012a4 <StartDefaultTask+0x36c>)
 80010c4:	f009 fa9e 	bl	800a604 <rclc_subscription_init_best_effort>
	   		&subscription_knee_left_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/knee_left_reference");

	   rclc_subscription_init_best_effort(
 80010c8:	f00a f8d2 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f107 0120 	add.w	r1, r7, #32
 80010d2:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <StartDefaultTask+0x370>)
 80010d4:	4875      	ldr	r0, [pc, #468]	; (80012ac <StartDefaultTask+0x374>)
 80010d6:	f009 fa95 	bl	800a604 <rclc_subscription_init_best_effort>
	   		&subscription_knee_right_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/knee_right_reference");

	   rclc_subscription_init_best_effort(
 80010da:	f00a f8c9 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010de:	4602      	mov	r2, r0
 80010e0:	f107 0120 	add.w	r1, r7, #32
 80010e4:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <StartDefaultTask+0x378>)
 80010e6:	4873      	ldr	r0, [pc, #460]	; (80012b4 <StartDefaultTask+0x37c>)
 80010e8:	f009 fa8c 	bl	800a604 <rclc_subscription_init_best_effort>
	   		&subscription_heap_left_reference,
	   		&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	   		"/heap_left_reference");
	   HAL_Delay(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f000 ff23 	bl	8001f38 <HAL_Delay>
	   rclc_subscription_init_best_effort(
 80010f2:	f00a f8bd 	bl	800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80010f6:	4602      	mov	r2, r0
 80010f8:	f107 0120 	add.w	r1, r7, #32
 80010fc:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <StartDefaultTask+0x380>)
 80010fe:	486f      	ldr	r0, [pc, #444]	; (80012bc <StartDefaultTask+0x384>)
 8001100:	f009 fa80 	bl	800a604 <rclc_subscription_init_best_effort>



	   //create executor

	   rclc_executor_init(&executor, &support.context, 6, &allocator);
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800110c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001110:	2206      	movs	r2, #6
 8001112:	f008 fef5 	bl	8009f00 <rclc_executor_init>

	   rclc_executor_add_subscription(&executor,
 8001116:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <StartDefaultTask+0x388>)
 8001120:	4a68      	ldr	r2, [pc, #416]	; (80012c4 <StartDefaultTask+0x38c>)
 8001122:	495c      	ldr	r1, [pc, #368]	; (8001294 <StartDefaultTask+0x35c>)
 8001124:	f008 ff5c 	bl	8009fe0 <rclc_executor_add_subscription>
			   	   	   	   	   	   	  &subscription_ancle_left_reference,
									  &msg_ancle_left_reference,
									  &subscription_callback, ON_NEW_DATA);
	   	   	   	   	   	   	   	   	 //&subscription_callback_ancle_left_reference, ON_NEW_DATA);

	   rclc_executor_add_subscription(&executor,
 8001128:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <StartDefaultTask+0x388>)
 8001132:	4a65      	ldr	r2, [pc, #404]	; (80012c8 <StartDefaultTask+0x390>)
 8001134:	4959      	ldr	r1, [pc, #356]	; (800129c <StartDefaultTask+0x364>)
 8001136:	f008 ff53 	bl	8009fe0 <rclc_executor_add_subscription>
									  &msg_ancle_right_reference,
									  &subscription_callback, ON_NEW_DATA);
//									  &subscription_callback_ancle_right_reference, ON_NEW_DATA);


	   rclc_executor_add_subscription(&executor,
 800113a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <StartDefaultTask+0x388>)
 8001144:	4a61      	ldr	r2, [pc, #388]	; (80012cc <StartDefaultTask+0x394>)
 8001146:	4957      	ldr	r1, [pc, #348]	; (80012a4 <StartDefaultTask+0x36c>)
 8001148:	f008 ff4a 	bl	8009fe0 <rclc_executor_add_subscription>
			   	   	   	   	   	   	  &subscription_knee_left_reference,
									  &msg_knee_left_reference,
									  &subscription_callback, ON_NEW_DATA);
//									  &subscription_callback_knee_left_reference, ON_NEW_DATA);

	   rclc_executor_add_subscription(&executor,
 800114c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <StartDefaultTask+0x388>)
 8001156:	4a5e      	ldr	r2, [pc, #376]	; (80012d0 <StartDefaultTask+0x398>)
 8001158:	4954      	ldr	r1, [pc, #336]	; (80012ac <StartDefaultTask+0x374>)
 800115a:	f008 ff41 	bl	8009fe0 <rclc_executor_add_subscription>
									  &msg_knee_right_reference,
									  &subscription_callback, ON_NEW_DATA);
//									  &subscription_callback_knee_right_reference, ON_NEW_DATA);


	   rclc_executor_add_subscription(&executor,
 800115e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001162:	2300      	movs	r3, #0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <StartDefaultTask+0x388>)
 8001168:	4a5a      	ldr	r2, [pc, #360]	; (80012d4 <StartDefaultTask+0x39c>)
 800116a:	4952      	ldr	r1, [pc, #328]	; (80012b4 <StartDefaultTask+0x37c>)
 800116c:	f008 ff38 	bl	8009fe0 <rclc_executor_add_subscription>
			   	   	   	   	   	   	  &subscription_heap_left_reference,
									  &msg_heap_left_reference,
									  &subscription_callback, ON_NEW_DATA);
	   //							  &subscription_callback_heap_left_reference, ON_NEW_DATA);
	  HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f000 fee1 	bl	8001f38 <HAL_Delay>
	   rclc_executor_add_subscription(&executor,
 8001176:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800117a:	2300      	movs	r3, #0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <StartDefaultTask+0x388>)
 8001180:	4a55      	ldr	r2, [pc, #340]	; (80012d8 <StartDefaultTask+0x3a0>)
 8001182:	494e      	ldr	r1, [pc, #312]	; (80012bc <StartDefaultTask+0x384>)
 8001184:	f008 ff2c 	bl	8009fe0 <rclc_executor_add_subscription>

	///
	  for(;;)
	  {

		  rcl_publish(&publisher_ancle_left_current, &msg_ancle_left_current, NULL);
 8001188:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800118c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001190:	2200      	movs	r2, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fb1c 	bl	80097d0 <rcl_publish>

		  rcl_publish(&publisher_ancle_right_current, &msg_ancle_right_current, NULL);
 8001198:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800119c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80011a0:	2200      	movs	r2, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f008 fb14 	bl	80097d0 <rcl_publish>

		  rcl_publish(&publisher_knee_left_current, &msg_knee_left_current, NULL);
 80011a8:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80011ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011b0:	2200      	movs	r2, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f008 fb0c 	bl	80097d0 <rcl_publish>

		  rcl_publish(&publisher_knee_right_current, &msg_knee_right_current, NULL);
 80011b8:	f507 7182 	add.w	r1, r7, #260	; 0x104
 80011bc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011c0:	2200      	movs	r2, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f008 fb04 	bl	80097d0 <rcl_publish>

		  rcl_publish(&publisher_heap_left_current, &msg_heap_left_current, NULL);
 80011c8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80011cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011d0:	2200      	movs	r2, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 fafc 	bl	80097d0 <rcl_publish>

		  rcl_publish(&publisher_heap_right_current, &msg_heap_right_current, NULL);
 80011d8:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80011dc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80011e0:	2200      	movs	r2, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 faf4 	bl	80097d0 <rcl_publish>


		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		msg_ancle_left_current.data=msg_ancle_left_reference.data;
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <StartDefaultTask+0x38c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		msg_ancle_right_current.data=msg_ancle_right_reference.data;
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <StartDefaultTask+0x390>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		msg_knee_left_current.data=msg_knee_left_reference.data;
 80011f8:	4b34      	ldr	r3, [pc, #208]	; (80012cc <StartDefaultTask+0x394>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		msg_knee_right_current.data=msg_knee_right_reference.data;
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <StartDefaultTask+0x398>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		msg_heap_left_current.data=msg_heap_left_reference.data;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <StartDefaultTask+0x39c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		msg_heap_right_current.data++;
 8001210:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8001214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800121c:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc

		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	    osDelay(1000);
 8001220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001224:	f005 fd2a 	bl	8006c7c <osDelay>
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(200));
 8001228:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800122c:	a304      	add	r3, pc, #16	; (adr r3, 8001240 <StartDefaultTask+0x308>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	4608      	mov	r0, r1
 8001234:	f009 f8f4 	bl	800a420 <rclc_executor_spin_some>
		  rcl_publish(&publisher_ancle_left_current, &msg_ancle_left_current, NULL);
 8001238:	e7a6      	b.n	8001188 <StartDefaultTask+0x250>
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w
 8001240:	0bebc200 	.word	0x0bebc200
 8001244:	00000000 	.word	0x00000000
 8001248:	08001de5 	.word	0x08001de5
 800124c:	08001d85 	.word	0x08001d85
 8001250:	08001d65 	.word	0x08001d65
 8001254:	08001d39 	.word	0x08001d39
 8001258:	20003f9c 	.word	0x20003f9c
 800125c:	0800130d 	.word	0x0800130d
 8001260:	08001351 	.word	0x08001351
 8001264:	08001389 	.word	0x08001389
 8001268:	080013f5 	.word	0x080013f5
 800126c:	080176ec 	.word	0x080176ec
 8001270:	08017714 	.word	0x08017714
 8001274:	08017718 	.word	0x08017718
 8001278:	08017724 	.word	0x08017724
 800127c:	08017738 	.word	0x08017738
 8001280:	0801774c 	.word	0x0801774c
 8001284:	08017760 	.word	0x08017760
 8001288:	08017774 	.word	0x08017774
 800128c:	08017788 	.word	0x08017788
 8001290:	0801779c 	.word	0x0801779c
 8001294:	20003e84 	.word	0x20003e84
 8001298:	080177b4 	.word	0x080177b4
 800129c:	20003e88 	.word	0x20003e88
 80012a0:	080177cc 	.word	0x080177cc
 80012a4:	20003e8c 	.word	0x20003e8c
 80012a8:	080177e4 	.word	0x080177e4
 80012ac:	20003e90 	.word	0x20003e90
 80012b0:	080177fc 	.word	0x080177fc
 80012b4:	20003e94 	.word	0x20003e94
 80012b8:	08017814 	.word	0x08017814
 80012bc:	20003e98 	.word	0x20003e98
 80012c0:	08000b25 	.word	0x08000b25
 80012c4:	20003e9c 	.word	0x20003e9c
 80012c8:	20003ea0 	.word	0x20003ea0
 80012cc:	20003ea4 	.word	0x20003ea4
 80012d0:	20003ea8 	.word	0x20003ea8
 80012d4:	20003eac 	.word	0x20003eac
 80012d8:	20003eb0 	.word	0x20003eb0

080012dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ee:	f000 fe03 	bl	8001ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40010000 	.word	0x40010000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <microros_allocate+0x3c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <microros_allocate+0x3c>)
 8001324:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <microros_allocate+0x40>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <microros_allocate+0x40>)
 8001334:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff f9a0 	bl	800067c <pvPortMallocMicroROS>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20009474 	.word	0x20009474
 800134c:	20009478 	.word	0x20009478

08001350 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fab3 	bl	80008cc <getBlockSize>
 8001366:	4603      	mov	r3, r0
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <microros_deallocate+0x34>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	461a      	mov	r2, r3
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <microros_deallocate+0x34>)
 8001372:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fa4b 	bl	8000810 <vPortFreeMicroROS>
  }
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20009478 	.word	0x20009478

08001388 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <microros_reallocate+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4413      	add	r3, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <microros_reallocate+0x64>)
 80013a2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <microros_reallocate+0x68>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <microros_reallocate+0x68>)
 80013b2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d104      	bne.n	80013c4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7ff f95e 	bl	800067c <pvPortMallocMicroROS>
 80013c0:	4603      	mov	r3, r0
 80013c2:	e00e      	b.n	80013e2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff fa81 	bl	80008cc <getBlockSize>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <microros_reallocate+0x68>)
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <microros_reallocate+0x68>)
 80013d6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff fa94 	bl	8000908 <pvPortReallocMicroROS>
 80013e0:	4603      	mov	r3, r0
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20009474 	.word	0x20009474
 80013f0:	20009478 	.word	0x20009478

080013f4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <microros_zero_allocate+0x48>)
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	4413      	add	r3, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <microros_zero_allocate+0x48>)
 8001412:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <microros_zero_allocate+0x4c>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4413      	add	r3, r2
 8001422:	461a      	mov	r2, r3
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <microros_zero_allocate+0x4c>)
 8001426:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff fa99 	bl	8000962 <pvPortCallocMicroROS>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20009474 	.word	0x20009474
 8001440:	20009478 	.word	0x20009478
 8001444:	00000000 	.word	0x00000000

08001448 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800145a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800145e:	a320      	add	r3, pc, #128	; (adr r3, 80014e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7fe ff3c 	bl	80002e0 <__aeabi_ldivmod>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001476:	a31a      	add	r3, pc, #104	; (adr r3, 80014e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7fe ff30 	bl	80002e0 <__aeabi_ldivmod>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da20      	bge.n	80014ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <UTILS_NanosecondsToTimespec+0x90>)
 8001492:	fb82 1203 	smull	r1, r2, r2, r3
 8001496:	1712      	asrs	r2, r2, #28
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	6979      	ldr	r1, [r7, #20]
 80014a8:	17c8      	asrs	r0, r1, #31
 80014aa:	460c      	mov	r4, r1
 80014ac:	4605      	mov	r5, r0
 80014ae:	ebb2 0804 	subs.w	r8, r2, r4
 80014b2:	eb63 0905 	sbc.w	r9, r3, r5
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	4906      	ldr	r1, [pc, #24]	; (80014dc <UTILS_NanosecondsToTimespec+0x94>)
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	441a      	add	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]
    }
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014d8:	44b82fa1 	.word	0x44b82fa1
 80014dc:	3b9aca00 	.word	0x3b9aca00
 80014e0:	3b9aca00 	.word	0x3b9aca00
 80014e4:	00000000 	.word	0x00000000

080014e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80014e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ec:	b08e      	sub	sp, #56	; 0x38
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6278      	str	r0, [r7, #36]	; 0x24
 80014f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80014f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014f8:	2300      	movs	r3, #0
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	4618      	mov	r0, r3
 8001510:	f006 feb2 	bl	8008278 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	17da      	asrs	r2, r3, #31
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	61fa      	str	r2, [r7, #28]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	69b9      	ldr	r1, [r7, #24]
 8001526:	000b      	movs	r3, r1
 8001528:	2200      	movs	r2, #0
 800152a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	2200      	movs	r2, #0
 8001532:	461c      	mov	r4, r3
 8001534:	4615      	mov	r5, r2
 8001536:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800153a:	1911      	adds	r1, r2, r4
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	416b      	adcs	r3, r5
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001546:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800154a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	f04f 0500 	mov.w	r5, #0
 800155a:	015d      	lsls	r5, r3, #5
 800155c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001560:	0154      	lsls	r4, r2, #5
 8001562:	4622      	mov	r2, r4
 8001564:	462b      	mov	r3, r5
 8001566:	ebb2 0800 	subs.w	r8, r2, r0
 800156a:	eb63 0901 	sbc.w	r9, r3, r1
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800157a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800157e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001582:	4690      	mov	r8, r2
 8001584:	4699      	mov	r9, r3
 8001586:	eb18 0a00 	adds.w	sl, r8, r0
 800158a:	eb49 0b01 	adc.w	fp, r9, r1
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800159a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800159e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015a2:	ebb2 040a 	subs.w	r4, r2, sl
 80015a6:	603c      	str	r4, [r7, #0]
 80015a8:	eb63 030b 	sbc.w	r3, r3, fp
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015b2:	4623      	mov	r3, r4
 80015b4:	181b      	adds	r3, r3, r0
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	462b      	mov	r3, r5
 80015ba:	eb41 0303 	adc.w	r3, r1, r3
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015c6:	f7ff ff3f 	bl	8001448 <UTILS_NanosecondsToTimespec>

    return 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_MspInit+0x4c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_MspInit+0x4c>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	210f      	movs	r1, #15
 8001612:	f06f 0001 	mvn.w	r0, #1
 8001616:	f000 fd6b 	bl	80020f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a4e      	ldr	r2, [pc, #312]	; (8001780 <HAL_ETH_MspInit+0x158>)
 8001646:	4293      	cmp	r3, r2
 8001648:	f040 8096 	bne.w	8001778 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800164c:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 8001652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 800166a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b44      	ldr	r3, [pc, #272]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 8001682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a3a      	ldr	r2, [pc, #232]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a34      	ldr	r2, [pc, #208]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a28      	ldr	r2, [pc, #160]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_ETH_MspInit+0x15c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016f4:	2332      	movs	r3, #50	; 0x32
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001704:	230b      	movs	r3, #11
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <HAL_ETH_MspInit+0x160>)
 8001710:	f001 fc54 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001714:	2386      	movs	r3, #134	; 0x86
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001724:	230b      	movs	r3, #11
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4817      	ldr	r0, [pc, #92]	; (800178c <HAL_ETH_MspInit+0x164>)
 8001730:	f001 fc44 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001746:	230b      	movs	r3, #11
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <HAL_ETH_MspInit+0x168>)
 8001752:	f001 fc33 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001756:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001768:	230b      	movs	r3, #11
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <HAL_ETH_MspInit+0x16c>)
 8001774:	f001 fc22 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3738      	adds	r7, #56	; 0x38
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40028000 	.word	0x40028000
 8001784:	40023800 	.word	0x40023800
 8001788:	40020800 	.word	0x40020800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020400 	.word	0x40020400
 8001794:	40021800 	.word	0x40021800

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0aa      	sub	sp, #168	; 0xa8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2284      	movs	r2, #132	; 0x84
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f014 ffdd 	bl	8016778 <memset>
  if(huart->Instance==USART3)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_UART_MspInit+0x184>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	f040 80a4 	bne.w	8001912 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fc09 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80017e4:	f7ff fd8c 	bl	8001300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e8:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_UART_MspInit+0x188>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_UART_MspInit+0x188>)
 80017ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
 80017f4:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_UART_MspInit+0x188>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_UART_MspInit+0x188>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_UART_MspInit+0x188>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6313      	str	r3, [r2, #48]	; 0x30
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_UART_MspInit+0x188>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001818:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001832:	2307      	movs	r3, #7
 8001834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001838:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800183c:	4619      	mov	r1, r3
 800183e:	4839      	ldr	r0, [pc, #228]	; (8001924 <HAL_UART_MspInit+0x18c>)
 8001840:	f001 fbbc 	bl	8002fbc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001844:	4b38      	ldr	r3, [pc, #224]	; (8001928 <HAL_UART_MspInit+0x190>)
 8001846:	4a39      	ldr	r2, [pc, #228]	; (800192c <HAL_UART_MspInit+0x194>)
 8001848:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <HAL_UART_MspInit+0x190>)
 800184c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001850:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001852:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_UART_MspInit+0x190>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <HAL_UART_MspInit+0x190>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_UART_MspInit+0x190>)
 8001860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001864:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_UART_MspInit+0x190>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_UART_MspInit+0x190>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_UART_MspInit+0x190>)
 8001874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001878:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800187a:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_UART_MspInit+0x190>)
 800187c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001880:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_UART_MspInit+0x190>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001888:	4827      	ldr	r0, [pc, #156]	; (8001928 <HAL_UART_MspInit+0x190>)
 800188a:	f000 fc5b 	bl	8002144 <HAL_DMA_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001894:	f7ff fd34 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <HAL_UART_MspInit+0x190>)
 800189c:	675a      	str	r2, [r3, #116]	; 0x74
 800189e:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_UART_MspInit+0x190>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_UART_MspInit+0x19c>)
 80018a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018b4:	2240      	movs	r2, #64	; 0x40
 80018b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018de:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018e8:	f000 fc2c 	bl	8002144 <HAL_DMA_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80018f2:	f7ff fd05 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018fa:	671a      	str	r2, [r3, #112]	; 0x70
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_UART_MspInit+0x198>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2105      	movs	r1, #5
 8001906:	2027      	movs	r0, #39	; 0x27
 8001908:	f000 fbf2 	bl	80020f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800190c:	2027      	movs	r0, #39	; 0x27
 800190e:	f000 fc0b 	bl	8002128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	37a8      	adds	r7, #168	; 0xa8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004800 	.word	0x40004800
 8001920:	40023800 	.word	0x40023800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	20004024 	.word	0x20004024
 800192c:	40026028 	.word	0x40026028
 8001930:	20004084 	.word	0x20004084
 8001934:	40026058 	.word	0x40026058

08001938 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0ac      	sub	sp, #176	; 0xb0
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	2284      	movs	r2, #132	; 0x84
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f014 ff0d 	bl	8016778 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001966:	d159      	bne.n	8001a1c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800196c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	4618      	mov	r0, r3
 800197a:	f002 fb39 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001984:	f7ff fcbc 	bl	8001300 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019ba:	230a      	movs	r3, #10
 80019bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019c4:	4619      	mov	r1, r3
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <HAL_PCD_MspInit+0xf0>)
 80019c8:	f001 faf8 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e4:	4619      	mov	r1, r3
 80019e6:	4810      	ldr	r0, [pc, #64]	; (8001a28 <HAL_PCD_MspInit+0xf0>)
 80019e8:	f001 fae8 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 80019f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f6:	6353      	str	r3, [r2, #52]	; 0x34
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 80019fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_PCD_MspInit+0xec>)
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	37b0      	adds	r7, #176	; 0xb0
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000

08001a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_InitTick+0xcc>)
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	4a2d      	ldr	r2, [pc, #180]	; (8001af8 <HAL_InitTick+0xcc>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6453      	str	r3, [r2, #68]	; 0x44
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_InitTick+0xcc>)
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a54:	f107 020c 	add.w	r2, r7, #12
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fa94 	bl	8003f8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a64:	f002 fa7e 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 8001a68:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_InitTick+0xd0>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0c9b      	lsrs	r3, r3, #18
 8001a74:	3b01      	subs	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_InitTick+0xd8>)
 8001a7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a9e:	4818      	ldr	r0, [pc, #96]	; (8001b00 <HAL_InitTick+0xd4>)
 8001aa0:	f002 fe96 	bl	80047d0 <HAL_TIM_Base_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d11b      	bne.n	8001aea <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ab2:	4813      	ldr	r0, [pc, #76]	; (8001b00 <HAL_InitTick+0xd4>)
 8001ab4:	f002 feee 	bl	8004894 <HAL_TIM_Base_Start_IT>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d111      	bne.n	8001aea <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ac6:	2019      	movs	r0, #25
 8001ac8:	f000 fb2e 	bl	8002128 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	d808      	bhi.n	8001ae4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	2019      	movs	r0, #25
 8001ad8:	f000 fb0a 	bl	80020f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_InitTick+0xdc>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e002      	b.n	8001aea <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3730      	adds	r7, #48	; 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	431bde83 	.word	0x431bde83
 8001b00:	2000947c 	.word	0x2000947c
 8001b04:	40010000 	.word	0x40010000
 8001b08:	20000008 	.word	0x20000008

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <DMA1_Stream1_IRQHandler+0x10>)
 8001b3e:	f000 fca1 	bl	8002484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20004024 	.word	0x20004024

08001b4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DMA1_Stream3_IRQHandler+0x10>)
 8001b52:	f000 fc97 	bl	8002484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20004084 	.word	0x20004084

08001b60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b66:	f002 ff0d 	bl	8004984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000947c 	.word	0x2000947c

08001b74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART3_IRQHandler+0x10>)
 8001b7a:	f003 faa9 	bl	80050d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20003f9c 	.word	0x20003f9c

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba2:	f014 fe7d 	bl	80168a0 <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bca:	e7fe      	b.n	8001bca <_exit+0x12>

08001bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e00a      	b.n	8001bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bde:	f3af 8000 	nop.w
 8001be2:	4601      	mov	r1, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf0      	blt.n	8001bde <_read+0x12>
  }

  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e009      	b.n	8001c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf1      	blt.n	8001c18 <_write+0x12>
  }
  return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_close>:

int _close(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	605a      	str	r2, [r3, #4]
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_isatty>:

int _isatty(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f014 fde2 	bl	80168a0 <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20050000 	.word	0x20050000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	200094cc 	.word	0x200094cc
 8001d10:	200132f0 	.word	0x200132f0

08001d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d46:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4c:	4904      	ldr	r1, [pc, #16]	; (8001d60 <cubemx_transport_open+0x28>)
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f003 f8e8 	bl	8004f24 <HAL_UART_Receive_DMA>
    return true;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200094d0 	.word	0x200094d0

08001d64 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d72:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f003 f919 	bl	8004fac <HAL_UART_DMAStop>
    return true;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d98:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d11a      	bne.n	8001dd8 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f003 f83e 	bl	8004e2c <HAL_UART_Transmit_DMA>
 8001db0:	4603      	mov	r3, r0
 8001db2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001db4:	e002      	b.n	8001dbc <cubemx_transport_write+0x38>
            osDelay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f004 ff60 	bl	8006c7c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <cubemx_transport_write+0x46>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d1f5      	bne.n	8001db6 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001dca:	7cfb      	ldrb	r3, [r7, #19]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <cubemx_transport_write+0x50>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	e002      	b.n	8001dda <cubemx_transport_write+0x56>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001dd8:	2300      	movs	r3, #0
    }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001df8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfe:	b672      	cpsid	i
}
 8001e00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <cubemx_transport_read+0x9c>)
 8001e10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e12:	b662      	cpsie	i
}
 8001e14:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f004 ff2d 	bl	8006c7c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <cubemx_transport_read+0xa0>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <cubemx_transport_read+0x9c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d103      	bne.n	8001e36 <cubemx_transport_read+0x52>
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbe3      	blt.n	8001dfe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e3a:	e011      	b.n	8001e60 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <cubemx_transport_read+0xa0>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	440b      	add	r3, r1
 8001e46:	4910      	ldr	r1, [pc, #64]	; (8001e88 <cubemx_transport_read+0xa4>)
 8001e48:	5c8a      	ldrb	r2, [r1, r2]
 8001e4a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <cubemx_transport_read+0xa0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <cubemx_transport_read+0xa0>)
 8001e58:	6013      	str	r3, [r2, #0]
        wrote++;
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <cubemx_transport_read+0xa0>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <cubemx_transport_read+0x9c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d003      	beq.n	8001e74 <cubemx_transport_read+0x90>
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3e3      	bcc.n	8001e3c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001e74:	69bb      	ldr	r3, [r7, #24]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20009cd4 	.word	0x20009cd4
 8001e84:	20009cd0 	.word	0x20009cd0
 8001e88:	200094d0 	.word	0x200094d0

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e92:	490e      	ldr	r1, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea8:	4c0b      	ldr	r4, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eb6:	f7ff ff2d 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f014 fcf7 	bl	80168ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7fe fe3b 	bl	8000b38 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001ed0:	080185d8 	.word	0x080185d8
  ldr r2, =_sbss
 8001ed4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8001ed8:	200132ec 	.word	0x200132ec

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>

08001ede <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f000 f8f9 	bl	80020da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee8:	200f      	movs	r0, #15
 8001eea:	f7ff fd9f 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eee:	f7ff fb73 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000000c 	.word	0x2000000c
 8001f1c:	20009cd8 	.word	0x20009cd8

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20009cd8 	.word	0x20009cd8

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000000c 	.word	0x2000000c

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00
 8001fc4:	05fa0000 	.word	0x05fa0000

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <__NVIC_EnableIRQ+0x38>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff4c 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002102:	f7ff ff61 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 8002106:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	6978      	ldr	r0, [r7, #20]
 800210e:	f7ff ffb1 	bl	8002074 <NVIC_EncodePriority>
 8002112:	4602      	mov	r2, r0
 8002114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff80 	bl	8002020 <__NVIC_SetPriority>
}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff54 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff fee6 	bl	8001f20 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e099      	b.n	8002294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002180:	e00f      	b.n	80021a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002182:	f7ff fecd 	bl	8001f20 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b05      	cmp	r3, #5
 800218e:	d908      	bls.n	80021a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2203      	movs	r2, #3
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e078      	b.n	8002294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e8      	bne.n	8002182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_DMA_Init+0x158>)
 80021bc:	4013      	ands	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d107      	bne.n	800220c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4313      	orrs	r3, r2
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f023 0307 	bic.w	r3, r3, #7
 8002222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2b04      	cmp	r3, #4
 8002234:	d117      	bne.n	8002266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fb15 	bl	8002878 <DMA_CheckFifoParam>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002262:	2301      	movs	r3, #1
 8002264:	e016      	b.n	8002294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 facc 	bl	800280c <DMA_CalcBaseAndBitshift>
 8002274:	4603      	mov	r3, r0
 8002276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	223f      	movs	r2, #63	; 0x3f
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	f010803f 	.word	0xf010803f

080022a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_DMA_Start_IT+0x26>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e048      	b.n	8002358 <HAL_DMA_Start_IT+0xb8>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d137      	bne.n	800234a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fa5e 	bl	80027b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	223f      	movs	r2, #63	; 0x3f
 80022fa:	409a      	lsls	r2, r3
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0216 	orr.w	r2, r2, #22
 800230e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800231e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e005      	b.n	8002356 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800236e:	f7ff fdd7 	bl	8001f20 <HAL_GetTick>
 8002372:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e052      	b.n	8002438 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0216 	bic.w	r2, r2, #22
 80023a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <HAL_DMA_Abort+0x62>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	e013      	b.n	800240c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e4:	f7ff fd9c 	bl	8001f20 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d90c      	bls.n	800240c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2203      	movs	r2, #3
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e015      	b.n	8002438 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e4      	bne.n	80023e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	223f      	movs	r2, #63	; 0x3f
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d004      	beq.n	800245e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00c      	b.n	8002478 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002490:	4b8e      	ldr	r3, [pc, #568]	; (80026cc <HAL_DMA_IRQHandler+0x248>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a8e      	ldr	r2, [pc, #568]	; (80026d0 <HAL_DMA_IRQHandler+0x24c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0a9b      	lsrs	r3, r3, #10
 800249c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2208      	movs	r2, #8
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01a      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2208      	movs	r2, #8
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2201      	movs	r2, #1
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2201      	movs	r2, #1
 8002514:	409a      	lsls	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0202 	orr.w	r2, r3, #2
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2204      	movs	r2, #4
 800252c:	409a      	lsls	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d012      	beq.n	800255c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2204      	movs	r2, #4
 800254a:	409a      	lsls	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2210      	movs	r2, #16
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d043      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03c      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2210      	movs	r2, #16
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d018      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d024      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
 80025b2:	e01f      	b.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01b      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
 80025c4:	e016      	b.n	80025f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0208 	bic.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2220      	movs	r2, #32
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 808f 	beq.w	8002724 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8087 	beq.w	8002724 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2220      	movs	r2, #32
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b05      	cmp	r3, #5
 800262c:	d136      	bne.n	800269c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0216 	bic.w	r2, r2, #22
 800263c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800264c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_DMA_IRQHandler+0x1da>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	223f      	movs	r2, #63	; 0x3f
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268e:	2b00      	cmp	r3, #0
 8002690:	d07e      	beq.n	8002790 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
        }
        return;
 800269a:	e079      	b.n	8002790 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d031      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
 80026c8:	e02c      	b.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
 80026ca:	bf00      	nop
 80026cc:	20000004 	.word	0x20000004
 80026d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d023      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e01e      	b.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10f      	bne.n	8002714 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0210 	bic.w	r2, r2, #16
 8002702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	2b00      	cmp	r3, #0
 800272a:	d032      	beq.n	8002792 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d022      	beq.n	800277e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2205      	movs	r2, #5
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3301      	adds	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	d307      	bcc.n	800276c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f2      	bne.n	8002750 <HAL_DMA_IRQHandler+0x2cc>
 800276a:	e000      	b.n	800276e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800276c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002790:	bf00      	nop
    }
  }
}
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d108      	bne.n	80027f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ee:	e007      	b.n	8002800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3b10      	subs	r3, #16
 800281c:	4a13      	ldr	r2, [pc, #76]	; (800286c <DMA_CalcBaseAndBitshift+0x60>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <DMA_CalcBaseAndBitshift+0x64>)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d908      	bls.n	800284c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <DMA_CalcBaseAndBitshift+0x68>)
 8002842:	4013      	ands	r3, r2
 8002844:	1d1a      	adds	r2, r3, #4
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	659a      	str	r2, [r3, #88]	; 0x58
 800284a:	e006      	b.n	800285a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <DMA_CalcBaseAndBitshift+0x68>)
 8002854:	4013      	ands	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	aaaaaaab 	.word	0xaaaaaaab
 8002870:	0801789c 	.word	0x0801789c
 8002874:	fffffc00 	.word	0xfffffc00

08002878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11f      	bne.n	80028d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d856      	bhi.n	8002946 <DMA_CheckFifoParam+0xce>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <DMA_CheckFifoParam+0x28>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028c3 	.word	0x080028c3
 80028a8:	080028b1 	.word	0x080028b1
 80028ac:	08002947 	.word	0x08002947
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d046      	beq.n	800294a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c0:	e043      	b.n	800294a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ca:	d140      	bne.n	800294e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e03d      	b.n	800294e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028da:	d121      	bne.n	8002920 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d837      	bhi.n	8002952 <DMA_CheckFifoParam+0xda>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <DMA_CheckFifoParam+0x70>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	080028ff 	.word	0x080028ff
 80028f0:	080028f9 	.word	0x080028f9
 80028f4:	08002911 	.word	0x08002911
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
      break;
 80028fc:	e030      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d025      	beq.n	8002956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290e:	e022      	b.n	8002956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800291e:	e01c      	b.n	800295a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d903      	bls.n	800292e <DMA_CheckFifoParam+0xb6>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d003      	beq.n	8002934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800292c:	e018      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      break;
 8002932:	e015      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e00b      	b.n	800295e <DMA_CheckFifoParam+0xe6>
      break;
 8002946:	bf00      	nop
 8002948:	e00a      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
 800294c:	e008      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e006      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 8002952:	bf00      	nop
 8002954:	e004      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;   
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
    }
  } 
  
  return status; 
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06a      	b.n	8002a58 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2223      	movs	r2, #35	; 0x23
 8002990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fe fe47 	bl	8001628 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_ETH_Init+0xf0>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a30      	ldr	r2, [pc, #192]	; (8002a60 <HAL_ETH_Init+0xf0>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <HAL_ETH_Init+0xf0>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <HAL_ETH_Init+0xf4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <HAL_ETH_Init+0xf4>)
 80029b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80029be:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_ETH_Init+0xf4>)
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	4927      	ldr	r1, [pc, #156]	; (8002a64 <HAL_ETH_Init+0xf4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_ETH_Init+0xf4>)
 80029ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e8:	f7ff fa9a 	bl	8001f20 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029ee:	e011      	b.n	8002a14 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029f0:	f7ff fa96 	bl	8001f20 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029fe:	d909      	bls.n	8002a14 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	22e0      	movs	r2, #224	; 0xe0
 8002a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e021      	b.n	8002a58 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e4      	bne.n	80029f0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f958 	bl	8002cdc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9ff 	bl	8002e30 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fa55 	bl	8002ee2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f9bd 	bl	8002dc0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2210      	movs	r2, #16
 8002a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800

08002a68 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <ETH_SetMACConfig+0x15c>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	7c1b      	ldrb	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <ETH_SetMACConfig+0x28>
 8002a8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a8e:	e000      	b.n	8002a92 <ETH_SetMACConfig+0x2a>
 8002a90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	7c5b      	ldrb	r3, [r3, #17]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <ETH_SetMACConfig+0x38>
 8002a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a9e:	e000      	b.n	8002aa2 <ETH_SetMACConfig+0x3a>
 8002aa0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aa2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002aa8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	7fdb      	ldrb	r3, [r3, #31]
 8002aae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ab0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ab6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	7f92      	ldrb	r2, [r2, #30]
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d102      	bne.n	8002ac6 <ETH_SetMACConfig+0x5e>
 8002ac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac4:	e000      	b.n	8002ac8 <ETH_SetMACConfig+0x60>
 8002ac6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ac8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	7f1b      	ldrb	r3, [r3, #28]
 8002ace:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ad0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ad6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ade:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ae6:	2a00      	cmp	r2, #0
 8002ae8:	d102      	bne.n	8002af0 <ETH_SetMACConfig+0x88>
 8002aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aee:	e000      	b.n	8002af2 <ETH_SetMACConfig+0x8a>
 8002af0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002af2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	7bdb      	ldrb	r3, [r3, #15]
 8002af8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002afa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7ff fa08 	bl	8001f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b46:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b4e:	2a00      	cmp	r2, #0
 8002b50:	d101      	bne.n	8002b56 <ETH_SetMACConfig+0xee>
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	e000      	b.n	8002b58 <ETH_SetMACConfig+0xf0>
 8002b56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b58:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b66:	2a01      	cmp	r2, #1
 8002b68:	d101      	bne.n	8002b6e <ETH_SetMACConfig+0x106>
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	e000      	b.n	8002b70 <ETH_SetMACConfig+0x108>
 8002b6e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b78:	2a01      	cmp	r2, #1
 8002b7a:	d101      	bne.n	8002b80 <ETH_SetMACConfig+0x118>
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	e000      	b.n	8002b82 <ETH_SetMACConfig+0x11a>
 8002b80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b8a:	2a01      	cmp	r2, #1
 8002b8c:	d101      	bne.n	8002b92 <ETH_SetMACConfig+0x12a>
 8002b8e:	2202      	movs	r2, #2
 8002b90:	e000      	b.n	8002b94 <ETH_SetMACConfig+0x12c>
 8002b92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b94:	4313      	orrs	r3, r2
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bac:	2001      	movs	r0, #1
 8002bae:	f7ff f9c3 	bl	8001f38 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	ff20810f 	.word	0xff20810f

08002bc8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <ETH_SetDMAConfig+0x110>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7b1b      	ldrb	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <ETH_SetDMAConfig+0x2c>
 8002bee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bf2:	e000      	b.n	8002bf6 <ETH_SetDMAConfig+0x2e>
 8002bf4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	7b5b      	ldrb	r3, [r3, #13]
 8002bfa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bfc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	7f52      	ldrb	r2, [r2, #29]
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d102      	bne.n	8002c0c <ETH_SetDMAConfig+0x44>
 8002c06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c0a:	e000      	b.n	8002c0e <ETH_SetDMAConfig+0x46>
 8002c0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	7b9b      	ldrb	r3, [r3, #14]
 8002c14:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c16:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	7f1b      	ldrb	r3, [r3, #28]
 8002c22:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7f9b      	ldrb	r3, [r3, #30]
 8002c2a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c2c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c3a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7ff f96a 	bl	8001f38 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	791b      	ldrb	r3, [r3, #4]
 8002c76:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c7c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c82:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c88:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c90:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c92:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c9a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ca0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002caa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7ff f93b 	bl	8001f38 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	f8de3f23 	.word	0xf8de3f23

08002cdc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b0a6      	sub	sp, #152	; 0x98
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fe86 	bl	8002a68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d90:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d96:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d9c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dac:	f107 0308 	add.w	r3, r7, #8
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ff08 	bl	8002bc8 <ETH_SetDMAConfig>
}
 8002db8:	bf00      	nop
 8002dba:	3798      	adds	r7, #152	; 0x98
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3305      	adds	r3, #5
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	3204      	adds	r2, #4
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <ETH_MACAddressConfig+0x68>)
 8002de2:	4413      	add	r3, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3303      	adds	r3, #3
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	061a      	lsls	r2, r3, #24
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3302      	adds	r3, #2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	4313      	orrs	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <ETH_MACAddressConfig+0x6c>)
 8002e12:	4413      	add	r3, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6013      	str	r3, [r2, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40028040 	.word	0x40028040
 8002e2c:	40028044 	.word	0x40028044

08002e30 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e03e      	b.n	8002ebc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68d9      	ldr	r1, [r3, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	3206      	adds	r2, #6
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d80c      	bhi.n	8002ea0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	e004      	b.n	8002eaa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d9bd      	bls.n	8002e3e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed4:	611a      	str	r2, [r3, #16]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e046      	b.n	8002f7e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6919      	ldr	r1, [r3, #16]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f34:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	3212      	adds	r2, #18
 8002f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d80c      	bhi.n	8002f6e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6919      	ldr	r1, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	e004      	b.n	8002f78 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d9b5      	bls.n	8002ef0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fae:	60da      	str	r2, [r3, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e175      	b.n	80032c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8164 	bne.w	80032c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d005      	beq.n	8003012 <HAL_GPIO_Init+0x56>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d130      	bne.n	8003074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 0201 	and.w	r2, r3, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b03      	cmp	r3, #3
 800307e:	d017      	beq.n	80030b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d123      	bne.n	8003104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3208      	adds	r2, #8
 80030c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	08da      	lsrs	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3208      	adds	r2, #8
 80030fe:	69b9      	ldr	r1, [r7, #24]
 8003100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0203 	and.w	r2, r3, #3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80be 	beq.w	80032c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_GPIO_Init+0x324>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_GPIO_Init+0x324>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_GPIO_Init+0x324>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800315e:	4a61      	ldr	r2, [pc, #388]	; (80032e4 <HAL_GPIO_Init+0x328>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_GPIO_Init+0x32c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d037      	beq.n	80031fa <HAL_GPIO_Init+0x23e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_GPIO_Init+0x330>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_GPIO_Init+0x23a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d02b      	beq.n	80031f2 <HAL_GPIO_Init+0x236>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a55      	ldr	r2, [pc, #340]	; (80032f4 <HAL_GPIO_Init+0x338>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d025      	beq.n	80031ee <HAL_GPIO_Init+0x232>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a54      	ldr	r2, [pc, #336]	; (80032f8 <HAL_GPIO_Init+0x33c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01f      	beq.n	80031ea <HAL_GPIO_Init+0x22e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a53      	ldr	r2, [pc, #332]	; (80032fc <HAL_GPIO_Init+0x340>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d019      	beq.n	80031e6 <HAL_GPIO_Init+0x22a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_GPIO_Init+0x344>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0x226>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_GPIO_Init+0x348>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00d      	beq.n	80031de <HAL_GPIO_Init+0x222>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_GPIO_Init+0x34c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <HAL_GPIO_Init+0x21e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4f      	ldr	r2, [pc, #316]	; (800330c <HAL_GPIO_Init+0x350>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_GPIO_Init+0x21a>
 80031d2:	2309      	movs	r3, #9
 80031d4:	e012      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031d6:	230a      	movs	r3, #10
 80031d8:	e010      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031da:	2308      	movs	r3, #8
 80031dc:	e00e      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031de:	2307      	movs	r3, #7
 80031e0:	e00c      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031e2:	2306      	movs	r3, #6
 80031e4:	e00a      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031e6:	2305      	movs	r3, #5
 80031e8:	e008      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e004      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031fa:	2300      	movs	r3, #0
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4093      	lsls	r3, r2
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800320c:	4935      	ldr	r1, [pc, #212]	; (80032e4 <HAL_GPIO_Init+0x328>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_GPIO_Init+0x354>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323e:	4a34      	ldr	r2, [pc, #208]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003268:	4a29      	ldr	r2, [pc, #164]	; (8003310 <HAL_GPIO_Init+0x354>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003292:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_GPIO_Init+0x354>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032bc:	4a14      	ldr	r2, [pc, #80]	; (8003310 <HAL_GPIO_Init+0x354>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3301      	adds	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	f67f ae86 	bls.w	8002fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40021400 	.word	0x40021400
 8003300:	40021800 	.word	0x40021800
 8003304:	40021c00 	.word	0x40021c00
 8003308:	40022000 	.word	0x40022000
 800330c:	40022400 	.word	0x40022400
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	041a      	lsls	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003348:	b08f      	sub	sp, #60	; 0x3c
 800334a:	af0a      	add	r7, sp, #40	; 0x28
 800334c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e116      	b.n	8003586 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe fae0 	bl	8001938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2203      	movs	r2, #3
 800337c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f003 f8bc 	bl	8006514 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	687e      	ldr	r6, [r7, #4]
 80033a4:	466d      	mov	r5, sp
 80033a6:	f106 0410 	add.w	r4, r6, #16
 80033aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ba:	1d33      	adds	r3, r6, #4
 80033bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033be:	6838      	ldr	r0, [r7, #0]
 80033c0:	f003 f850 	bl	8006464 <USB_CoreInit>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e0d7      	b.n	8003586 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 f8aa 	bl	8006536 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e04a      	b.n	800347e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	333d      	adds	r3, #61	; 0x3d
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	333c      	adds	r3, #60	; 0x3c
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	b298      	uxth	r0, r3
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3344      	adds	r3, #68	; 0x44
 8003424:	4602      	mov	r2, r0
 8003426:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3340      	adds	r3, #64	; 0x40
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3348      	adds	r3, #72	; 0x48
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	334c      	adds	r3, #76	; 0x4c
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3354      	adds	r3, #84	; 0x54
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	3301      	adds	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d3af      	bcc.n	80033e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e044      	b.n	8003518 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	3301      	adds	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d3b5      	bcc.n	800348e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	687e      	ldr	r6, [r7, #4]
 800352a:	466d      	mov	r5, sp
 800352c:	f106 0410 	add.w	r4, r6, #16
 8003530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800353c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003540:	1d33      	adds	r3, r6, #4
 8003542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003544:	6838      	ldr	r0, [r7, #0]
 8003546:	f003 f843 	bl	80065d0 <USB_DevInit>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e014      	b.n	8003586 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f80b 	bl	8003590 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fa01 	bl	8006986 <USB_DevDisconnect>

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003590 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	10000003 	.word	0x10000003

080035d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40007000 	.word	0x40007000

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e291      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8087 	beq.w	800372a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800361c:	4b96      	ldr	r3, [pc, #600]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b04      	cmp	r3, #4
 8003626:	d00c      	beq.n	8003642 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003628:	4b93      	ldr	r3, [pc, #588]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b08      	cmp	r3, #8
 8003632:	d112      	bne.n	800365a <HAL_RCC_OscConfig+0x62>
 8003634:	4b90      	ldr	r3, [pc, #576]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003640:	d10b      	bne.n	800365a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003642:	4b8d      	ldr	r3, [pc, #564]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d06c      	beq.n	8003728 <HAL_RCC_OscConfig+0x130>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d168      	bne.n	8003728 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e26b      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x7a>
 8003664:	4b84      	ldr	r3, [pc, #528]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a83      	ldr	r2, [pc, #524]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800366a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	e02e      	b.n	80036d0 <HAL_RCC_OscConfig+0xd8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x9c>
 800367a:	4b7f      	ldr	r3, [pc, #508]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7e      	ldr	r2, [pc, #504]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7b      	ldr	r2, [pc, #492]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800368c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e01d      	b.n	80036d0 <HAL_RCC_OscConfig+0xd8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0xc0>
 800369e:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a75      	ldr	r2, [pc, #468]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b73      	ldr	r3, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a72      	ldr	r2, [pc, #456]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0xd8>
 80036b8:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6e      	ldr	r2, [pc, #440]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6b      	ldr	r2, [pc, #428]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe fc22 	bl	8001f20 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fe fc1e 	bl	8001f20 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e21f      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0xe8>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fc0e 	bl	8001f20 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003708:	f7fe fc0a 	bl	8001f20 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e20b      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	4b57      	ldr	r3, [pc, #348]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x110>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d069      	beq.n	800380a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003736:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b4d      	ldr	r3, [pc, #308]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b08      	cmp	r3, #8
 800374c:	d11c      	bne.n	8003788 <HAL_RCC_OscConfig+0x190>
 800374e:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x17a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e1df      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	493d      	ldr	r1, [pc, #244]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	e040      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe fbc0 	bl	8001f20 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fe fbbc 	bl	8001f20 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e1bd      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4929      	ldr	r1, [pc, #164]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
 80037d6:	e018      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe fb9c 	bl	8001f20 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ec:	f7fe fb98 	bl	8001f20 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e199      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d038      	beq.n	8003888 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	4a15      	ldr	r2, [pc, #84]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe fb79 	bl	8001f20 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe fb75 	bl	8001f20 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e176      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x23a>
 8003850:	e01a      	b.n	8003888 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe fb5f 	bl	8001f20 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe fb5b 	bl	8001f20 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d903      	bls.n	800387c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e15c      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
 8003878:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	4b91      	ldr	r3, [pc, #580]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ee      	bne.n	8003866 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a4 	beq.w	80039de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a87      	ldr	r2, [pc, #540]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038ca:	4b7f      	ldr	r3, [pc, #508]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7e      	ldr	r2, [pc, #504]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fb23 	bl	8001f20 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fe fb1f 	bl	8001f20 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e120      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b75      	ldr	r3, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x31a>
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	e02d      	b.n	800396e <HAL_RCC_OscConfig+0x376>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x33c>
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a69      	ldr	r2, [pc, #420]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a66      	ldr	r2, [pc, #408]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x376>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x35e>
 800393c:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a60      	ldr	r2, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a5d      	ldr	r2, [pc, #372]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x376>
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fe fad3 	bl	8001f20 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fe facf 	bl	8001f20 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0ce      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x386>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fe fabd 	bl	8001f20 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe fab9 	bl	8001f20 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0b8      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80a4 	beq.w	8003b30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d06b      	beq.n	8003acc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d149      	bne.n	8003a90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a30      	ldr	r2, [pc, #192]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe fa8a 	bl	8001f20 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe fa86 	bl	8001f20 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e087      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	3b01      	subs	r3, #1
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	4313      	orrs	r3, r2
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe fa5a 	bl	8001f20 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe fa56 	bl	8001f20 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e057      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x478>
 8003a8e:	e04f      	b.n	8003b30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fa40 	bl	8001f20 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe fa3c 	bl	8001f20 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e03d      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4ac>
 8003ac2:	e035      	b.n	8003b30 <HAL_RCC_OscConfig+0x538>
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x544>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d028      	beq.n	8003b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d121      	bne.n	8003b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d11a      	bne.n	8003b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d111      	bne.n	8003b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800

08003b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0d0      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d910      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 020f 	bic.w	r2, r3, #15
 8003b6e:	4965      	ldr	r1, [pc, #404]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0b8      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a58      	ldr	r2, [pc, #352]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003baa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4a52      	ldr	r2, [pc, #328]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc4:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	494d      	ldr	r1, [pc, #308]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d040      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d115      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e073      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06b      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c22:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4936      	ldr	r1, [pc, #216]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c34:	f7fe f974 	bl	8001f20 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7fe f970 	bl	8001f20 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e053      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1eb      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d210      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 020f 	bic.w	r2, r3, #15
 8003c7a:	4922      	ldr	r1, [pc, #136]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e032      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	490e      	ldr	r1, [pc, #56]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cd2:	f000 f821 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	490a      	ldr	r1, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ce4:	5ccb      	ldrb	r3, [r1, r3]
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1d0>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1d4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fe9a 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023c00 	.word	0x40023c00
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	08017884 	.word	0x08017884
 8003d10:	20000004 	.word	0x20000004
 8003d14:	20000008 	.word	0x20000008

08003d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b094      	sub	sp, #80	; 0x50
 8003d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
 8003d24:	2300      	movs	r3, #0
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d28:	2300      	movs	r3, #0
 8003d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d30:	4b79      	ldr	r3, [pc, #484]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d00d      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x40>
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	f200 80e1 	bhi.w	8003f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x34>
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d4a:	e0db      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b73      	ldr	r3, [pc, #460]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d50:	e0db      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d52:	4b73      	ldr	r3, [pc, #460]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d56:	e0d8      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d62:	4b6d      	ldr	r3, [pc, #436]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d063      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	2200      	movs	r2, #0
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d80:	633b      	str	r3, [r7, #48]	; 0x30
 8003d82:	2300      	movs	r3, #0
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
 8003d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	f04f 0000 	mov.w	r0, #0
 8003d92:	f04f 0100 	mov.w	r1, #0
 8003d96:	0159      	lsls	r1, r3, #5
 8003d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d9c:	0150      	lsls	r0, r2, #5
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4621      	mov	r1, r4
 8003da4:	1a51      	subs	r1, r2, r1
 8003da6:	6139      	str	r1, [r7, #16]
 8003da8:	4629      	mov	r1, r5
 8003daa:	eb63 0301 	sbc.w	r3, r3, r1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	018b      	lsls	r3, r1, #6
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	018a      	lsls	r2, r1, #6
 8003dca:	4651      	mov	r1, sl
 8003dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd0:	4659      	mov	r1, fp
 8003dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dea:	4690      	mov	r8, r2
 8003dec:	4699      	mov	r9, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	eb18 0303 	adds.w	r3, r8, r3
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	462b      	mov	r3, r5
 8003df8:	eb49 0303 	adc.w	r3, r9, r3
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	024b      	lsls	r3, r1, #9
 8003e0e:	4621      	mov	r1, r4
 8003e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e14:	4621      	mov	r1, r4
 8003e16:	024a      	lsls	r2, r1, #9
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1e:	2200      	movs	r2, #0
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e28:	f7fc faaa 	bl	8000380 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4613      	mov	r3, r2
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	e058      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e36:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	4611      	mov	r1, r2
 8003e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e46:	623b      	str	r3, [r7, #32]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	0159      	lsls	r1, r3, #5
 8003e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e62:	0150      	lsls	r0, r2, #5
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4641      	mov	r1, r8
 8003e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e6e:	4649      	mov	r1, r9
 8003e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e88:	ebb2 040a 	subs.w	r4, r2, sl
 8003e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	00eb      	lsls	r3, r5, #3
 8003e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e9e:	00e2      	lsls	r2, r4, #3
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	461d      	mov	r5, r3
 8003ea4:	4643      	mov	r3, r8
 8003ea6:	18e3      	adds	r3, r4, r3
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	464b      	mov	r3, r9
 8003eac:	eb45 0303 	adc.w	r3, r5, r3
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	028b      	lsls	r3, r1, #10
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec8:	4621      	mov	r1, r4
 8003eca:	028a      	lsls	r2, r1, #10
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	61fa      	str	r2, [r7, #28]
 8003ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003edc:	f7fc fa50 	bl	8000380 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3750      	adds	r7, #80	; 0x50
 8003f10:	46bd      	mov	sp, r7
 8003f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	00f42400 	.word	0x00f42400
 8003f20:	007a1200 	.word	0x007a1200

08003f24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000004 	.word	0x20000004

08003f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f40:	f7ff fff0 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	0a9b      	lsrs	r3, r3, #10
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4903      	ldr	r1, [pc, #12]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	08017894 	.word	0x08017894

08003f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f68:	f7ff ffdc 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0b5b      	lsrs	r3, r3, #13
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	08017894 	.word	0x08017894

08003f8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	220f      	movs	r2, #15
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCC_GetClockConfig+0x60>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40023c00 	.word	0x40023c00

08003ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d012      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004018:	4b69      	ldr	r3, [pc, #420]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004022:	6093      	str	r3, [r2, #8]
 8004024:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	4964      	ldr	r1, [pc, #400]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d017      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800404a:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	4959      	ldr	r1, [pc, #356]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004068:	d101      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004076:	2301      	movs	r3, #1
 8004078:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d017      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004086:	4b4e      	ldr	r3, [pc, #312]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	494a      	ldr	r1, [pc, #296]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d101      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 808b 	beq.w	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040d4:	4b3a      	ldr	r3, [pc, #232]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	4a39      	ldr	r2, [pc, #228]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	6413      	str	r3, [r2, #64]	; 0x40
 80040e0:	4b37      	ldr	r3, [pc, #220]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040ec:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a34      	ldr	r2, [pc, #208]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f8:	f7fd ff12 	bl	8001f20 <HAL_GetTick>
 80040fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004100:	f7fd ff0e 	bl	8001f20 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e357      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004112:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800411e:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d035      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	429a      	cmp	r2, r3
 800413a:	d02e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800413c:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800415e:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d114      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fed6 	bl	8001f20 <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	e00a      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fd fed2 	bl	8001f20 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e319      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ee      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a6:	d111      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	4901      	ldr	r1, [pc, #4]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
 80041be:	e00b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40007000 	.word	0x40007000
 80041c8:	0ffffcff 	.word	0x0ffffcff
 80041cc:	4baa      	ldr	r3, [pc, #680]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4aa9      	ldr	r2, [pc, #676]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041d6:	6093      	str	r3, [r2, #8]
 80041d8:	4ba7      	ldr	r3, [pc, #668]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e4:	49a4      	ldr	r1, [pc, #656]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d010      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041f6:	4ba0      	ldr	r3, [pc, #640]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fc:	4a9e      	ldr	r2, [pc, #632]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004202:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004206:	4b9c      	ldr	r3, [pc, #624]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004208:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	4999      	ldr	r1, [pc, #612]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004224:	4b94      	ldr	r3, [pc, #592]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004232:	4991      	ldr	r1, [pc, #580]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004246:	4b8c      	ldr	r3, [pc, #560]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004254:	4988      	ldr	r1, [pc, #544]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004268:	4b83      	ldr	r3, [pc, #524]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004276:	4980      	ldr	r1, [pc, #512]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800428a:	4b7b      	ldr	r3, [pc, #492]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4977      	ldr	r1, [pc, #476]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ac:	4b72      	ldr	r3, [pc, #456]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	496f      	ldr	r1, [pc, #444]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ce:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	f023 020c 	bic.w	r2, r3, #12
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	4966      	ldr	r1, [pc, #408]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042f0:	4b61      	ldr	r3, [pc, #388]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	495e      	ldr	r1, [pc, #376]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004312:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	4955      	ldr	r1, [pc, #340]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004334:	4b50      	ldr	r3, [pc, #320]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	494d      	ldr	r1, [pc, #308]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004356:	4b48      	ldr	r3, [pc, #288]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	4944      	ldr	r1, [pc, #272]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004378:	4b3f      	ldr	r3, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	493c      	ldr	r1, [pc, #240]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800439a:	4b37      	ldr	r3, [pc, #220]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a8:	4933      	ldr	r1, [pc, #204]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043bc:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ca:	492b      	ldr	r1, [pc, #172]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d011      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043de:	4b26      	ldr	r3, [pc, #152]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ec:	4922      	ldr	r1, [pc, #136]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043fc:	d101      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800440e:	2301      	movs	r3, #1
 8004410:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442c:	4912      	ldr	r1, [pc, #72]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004440:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004450:	4909      	ldr	r1, [pc, #36]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d006      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80d9 	beq.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a01      	ldr	r2, [pc, #4]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004478:	40023800 	.word	0x40023800
 800447c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447e:	f7fd fd4f 	bl	8001f20 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004486:	f7fd fd4b 	bl	8001f20 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b64      	cmp	r3, #100	; 0x64
 8004492:	d901      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e194      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004498:	4b6c      	ldr	r3, [pc, #432]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d021      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11d      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044b8:	4b64      	ldr	r3, [pc, #400]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c6:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	019a      	lsls	r2, r3, #6
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	431a      	orrs	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	071b      	lsls	r3, r3, #28
 80044ec:	4957      	ldr	r1, [pc, #348]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004512:	2b00      	cmp	r3, #0
 8004514:	d02e      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451e:	d129      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004520:	4b4a      	ldr	r3, [pc, #296]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004534:	0f1b      	lsrs	r3, r3, #28
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	019a      	lsls	r2, r3, #6
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	041b      	lsls	r3, r3, #16
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	061b      	lsls	r3, r3, #24
 800454e:	431a      	orrs	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	071b      	lsls	r3, r3, #28
 8004554:	493d      	ldr	r1, [pc, #244]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800455c:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004562:	f023 021f 	bic.w	r2, r3, #31
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	3b01      	subs	r3, #1
 800456c:	4937      	ldr	r1, [pc, #220]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01d      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004580:	4b32      	ldr	r3, [pc, #200]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004586:	0e1b      	lsrs	r3, r3, #24
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800458e:	4b2f      	ldr	r3, [pc, #188]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	0f1b      	lsrs	r3, r3, #28
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	019a      	lsls	r2, r3, #6
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	071b      	lsls	r3, r3, #28
 80045b4:	4925      	ldr	r1, [pc, #148]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d011      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	019a      	lsls	r2, r3, #6
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	041b      	lsls	r3, r3, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	071b      	lsls	r3, r3, #28
 80045e4:	4919      	ldr	r1, [pc, #100]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a16      	ldr	r2, [pc, #88]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fd fc92 	bl	8001f20 <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004600:	f7fd fc8e 	bl	8001f20 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e0d7      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004612:	4b0e      	ldr	r3, [pc, #56]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 80cd 	bne.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004632:	f7fd fc75 	bl	8001f20 <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004638:	e00a      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800463a:	f7fd fc71 	bl	8001f20 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b64      	cmp	r3, #100	; 0x64
 8004646:	d903      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0ba      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800464c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004650:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800465c:	d0ed      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02e      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d12a      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004686:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004694:	4b4d      	ldr	r3, [pc, #308]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	0f1b      	lsrs	r3, r3, #28
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	019a      	lsls	r2, r3, #6
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	4944      	ldr	r1, [pc, #272]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046c2:	4b42      	ldr	r3, [pc, #264]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	493d      	ldr	r1, [pc, #244]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d022      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f0:	d11d      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	0e1b      	lsrs	r3, r3, #24
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004700:	4b32      	ldr	r3, [pc, #200]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	0f1b      	lsrs	r3, r3, #28
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	019a      	lsls	r2, r3, #6
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	071b      	lsls	r3, r3, #28
 8004726:	4929      	ldr	r1, [pc, #164]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d028      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	0e1b      	lsrs	r3, r3, #24
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	019a      	lsls	r2, r3, #6
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	431a      	orrs	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	071b      	lsls	r3, r3, #28
 800476e:	4917      	ldr	r1, [pc, #92]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	4911      	ldr	r1, [pc, #68]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004798:	f7fd fbc2 	bl	8001f20 <HAL_GetTick>
 800479c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047a0:	f7fd fbbe 	bl	8001f20 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e007      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047be:	d1ef      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e049      	b.n	8004876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f841 	bl	800487e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 fa00 	bl	8004c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d001      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e054      	b.n	8004956 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d022      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x80>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d6:	d01d      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x80>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a22      	ldr	r2, [pc, #136]	; (8004968 <HAL_TIM_Base_Start_IT+0xd4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x80>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a21      	ldr	r2, [pc, #132]	; (800496c <HAL_TIM_Base_Start_IT+0xd8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x80>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1f      	ldr	r2, [pc, #124]	; (8004970 <HAL_TIM_Base_Start_IT+0xdc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x80>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <HAL_TIM_Base_Start_IT+0xe0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x80>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_TIM_Base_Start_IT+0xe4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x80>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1b      	ldr	r2, [pc, #108]	; (800497c <HAL_TIM_Base_Start_IT+0xe8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d115      	bne.n	8004940 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_TIM_Base_Start_IT+0xec>)
 800491c:	4013      	ands	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b06      	cmp	r3, #6
 8004924:	d015      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0xbe>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d011      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493e:	e008      	b.n	8004952 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e000      	b.n	8004954 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40010400 	.word	0x40010400
 8004978:	40014000 	.word	0x40014000
 800497c:	40001800 	.word	0x40001800
 8004980:	00010007 	.word	0x00010007

08004984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0202 	mvn.w	r2, #2
 80049b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f905 	bl	8004bd6 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8f7 	bl	8004bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f908 	bl	8004bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0204 	mvn.w	r2, #4
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8db 	bl	8004bd6 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8cd 	bl	8004bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f8de 	bl	8004bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0208 	mvn.w	r2, #8
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8b1 	bl	8004bd6 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8a3 	bl	8004bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f8b4 	bl	8004bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0210 	mvn.w	r2, #16
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f887 	bl	8004bd6 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f879 	bl	8004bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f88a 	bl	8004bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0201 	mvn.w	r2, #1
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc fbea 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f91a 	bl	8004d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d10e      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d107      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f90d 	bl	8004d7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d10e      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d107      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f838 	bl	8004bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d10e      	bne.n	8004bba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d107      	bne.n	8004bba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0220 	mvn.w	r2, #32
 8004bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8cd 	bl	8004d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a40      	ldr	r2, [pc, #256]	; (8004d28 <TIM_Base_SetConfig+0x114>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c32:	d00f      	beq.n	8004c54 <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3d      	ldr	r2, [pc, #244]	; (8004d2c <TIM_Base_SetConfig+0x118>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3c      	ldr	r2, [pc, #240]	; (8004d30 <TIM_Base_SetConfig+0x11c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d007      	beq.n	8004c54 <TIM_Base_SetConfig+0x40>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a3b      	ldr	r2, [pc, #236]	; (8004d34 <TIM_Base_SetConfig+0x120>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_Base_SetConfig+0x40>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <TIM_Base_SetConfig+0x124>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d108      	bne.n	8004c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2f      	ldr	r2, [pc, #188]	; (8004d28 <TIM_Base_SetConfig+0x114>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d02b      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c74:	d027      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <TIM_Base_SetConfig+0x118>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d023      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2b      	ldr	r2, [pc, #172]	; (8004d30 <TIM_Base_SetConfig+0x11c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01f      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <TIM_Base_SetConfig+0x120>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01b      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <TIM_Base_SetConfig+0x124>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d017      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a28      	ldr	r2, [pc, #160]	; (8004d3c <TIM_Base_SetConfig+0x128>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a27      	ldr	r2, [pc, #156]	; (8004d40 <TIM_Base_SetConfig+0x12c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00f      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a26      	ldr	r2, [pc, #152]	; (8004d44 <TIM_Base_SetConfig+0x130>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <TIM_Base_SetConfig+0x134>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a24      	ldr	r2, [pc, #144]	; (8004d4c <TIM_Base_SetConfig+0x138>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <TIM_Base_SetConfig+0x13c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a0a      	ldr	r2, [pc, #40]	; (8004d28 <TIM_Base_SetConfig+0x114>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_Base_SetConfig+0xf8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <TIM_Base_SetConfig+0x124>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40010400 	.word	0x40010400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	40001800 	.word	0x40001800
 8004d4c:	40001c00 	.word	0x40001c00
 8004d50:	40002000 	.word	0x40002000

08004d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e040      	b.n	8004e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc fcf0 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fc8e 	bl	80056f0 <UART_SetConfig>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e022      	b.n	8004e24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fee6 	bl	8005bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 ff6d 	bl	8005cfc <UART_CheckIdleState>
 8004e22:	4603      	mov	r3, r0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d165      	bne.n	8004f0e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_UART_Transmit_DMA+0x22>
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e05e      	b.n	8004f10 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2221      	movs	r2, #33	; 0x21
 8004e74:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d027      	beq.n	8004ece <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <HAL_UART_Transmit_DMA+0xec>)
 8004e84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <HAL_UART_Transmit_DMA+0xf0>)
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <HAL_UART_Transmit_DMA+0xf4>)
 8004e94:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3328      	adds	r3, #40	; 0x28
 8004eae:	461a      	mov	r2, r3
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	f7fd f9f5 	bl	80022a0 <HAL_DMA_Start_IT>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e020      	b.n	8004f10 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2240      	movs	r2, #64	; 0x40
 8004ed4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef6:	623a      	str	r2, [r7, #32]
 8004ef8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	69f9      	ldr	r1, [r7, #28]
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3728      	adds	r7, #40	; 0x28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	0800614d 	.word	0x0800614d
 8004f1c:	080061e3 	.word	0x080061e3
 8004f20:	08006365 	.word	0x08006365

08004f24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d132      	bne.n	8004fa2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_UART_Receive_DMA+0x24>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e02b      	b.n	8004fa4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d018      	beq.n	8004f92 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e6      	bne.n	8004f60 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 ffad 	bl	8005ef8 <UART_Start_Receive_DMA>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	e000      	b.n	8004fa4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3728      	adds	r7, #40	; 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b090      	sub	sp, #64	; 0x40
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d139      	bne.n	8005044 <HAL_UART_DMAStop+0x98>
 8004fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd2:	2b21      	cmp	r3, #33	; 0x21
 8004fd4:	d136      	bne.n	8005044 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e5      	bne.n	8004fd6 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	2b00      	cmp	r3, #0
 8005010:	d015      	beq.n	800503e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd f9a2 	bl	8002360 <HAL_DMA_Abort>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd fbb6 	bl	8002798 <HAL_DMA_GetError>
 800502c:	4603      	mov	r3, r0
 800502e:	2b20      	cmp	r3, #32
 8005030:	d105      	bne.n	800503e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2210      	movs	r2, #16
 8005036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e044      	b.n	80050c8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fffa 	bl	8006038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d139      	bne.n	80050c6 <HAL_UART_DMAStop+0x11a>
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2b22      	cmp	r3, #34	; 0x22
 8005056:	d136      	bne.n	80050c6 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60bb      	str	r3, [r7, #8]
   return(result);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005078:	61ba      	str	r2, [r7, #24]
 800507a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	613b      	str	r3, [r7, #16]
   return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005098:	4618      	mov	r0, r3
 800509a:	f7fd f961 	bl	8002360 <HAL_DMA_Abort>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fd fb75 	bl	8002798 <HAL_DMA_GetError>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d105      	bne.n	80050c0 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2210      	movs	r2, #16
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e003      	b.n	80050c8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 ffdf 	bl	8006084 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3740      	adds	r7, #64	; 0x40
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b0ba      	sub	sp, #232	; 0xe8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80050fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80050fe:	4013      	ands	r3, r2
 8005100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d115      	bne.n	8005138 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00f      	beq.n	8005138 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8297 	beq.w	800565c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	4798      	blx	r3
      }
      return;
 8005136:	e291      	b.n	800565c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8117 	beq.w	8005370 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800514e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005152:	4b85      	ldr	r3, [pc, #532]	; (8005368 <HAL_UART_IRQHandler+0x298>)
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 810a 	beq.w	8005370 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d011      	beq.n	800518c <HAL_UART_IRQHandler+0xbc>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2201      	movs	r2, #1
 800517a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005182:	f043 0201 	orr.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d011      	beq.n	80051bc <HAL_UART_IRQHandler+0xec>
 8005198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2202      	movs	r2, #2
 80051aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d011      	beq.n	80051ec <HAL_UART_IRQHandler+0x11c>
 80051c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2204      	movs	r2, #4
 80051da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e2:	f043 0202 	orr.w	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005208:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521e:	f043 0208 	orr.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005230:	2b00      	cmp	r3, #0
 8005232:	d012      	beq.n	800525a <HAL_UART_IRQHandler+0x18a>
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00c      	beq.n	800525a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 81fd 	beq.w	8005660 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d005      	beq.n	80052b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04f      	beq.n	8005352 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fee6 	bl	8006084 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d141      	bne.n	800534a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800530a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1d9      	bne.n	80052c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005316:	2b00      	cmp	r3, #0
 8005318:	d013      	beq.n	8005342 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <HAL_UART_IRQHandler+0x29c>)
 8005320:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd f88a 	bl	8002440 <HAL_DMA_Abort_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d017      	beq.n	8005362 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	e00f      	b.n	8005362 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f9be 	bl	80056c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	e00b      	b.n	8005362 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f9ba 	bl	80056c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	e007      	b.n	8005362 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9b6 	bl	80056c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005360:	e17e      	b.n	8005660 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005362:	bf00      	nop
    return;
 8005364:	e17c      	b.n	8005660 <HAL_UART_IRQHandler+0x590>
 8005366:	bf00      	nop
 8005368:	04000120 	.word	0x04000120
 800536c:	080063e3 	.word	0x080063e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005374:	2b01      	cmp	r3, #1
 8005376:	f040 814c 	bne.w	8005612 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800537a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 8145 	beq.w	8005612 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 813e 	beq.w	8005612 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2210      	movs	r2, #16
 800539c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	f040 80b6 	bne.w	800551a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8150 	beq.w	8005664 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ce:	429a      	cmp	r2, r3
 80053d0:	f080 8148 	bcs.w	8005664 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e8:	f000 8086 	beq.w	80054f8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800541a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800542e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1da      	bne.n	80053ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800545a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800545e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005462:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800546c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e1      	bne.n	8005436 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3308      	adds	r3, #8
 8005492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800549c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e3      	bne.n	8005472 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c8:	f023 0310 	bic.w	r3, r3, #16
 80054cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054da:	65bb      	str	r3, [r7, #88]	; 0x58
 80054dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e4      	bne.n	80054b8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fc ff34 	bl	8002360 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800550a:	b29b      	uxth	r3, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	b29b      	uxth	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8e0 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005518:	e0a4      	b.n	8005664 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005526:	b29b      	uxth	r3, r3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8096 	beq.w	8005668 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800553c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8091 	beq.w	8005668 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800555a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
 800556a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800556e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e4      	bne.n	8005546 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	623b      	str	r3, [r7, #32]
   return(result);
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055a0:	633a      	str	r2, [r7, #48]	; 0x30
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e3      	bne.n	800557c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f023 0310 	bic.w	r3, r3, #16
 80055dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	69b9      	ldr	r1, [r7, #24]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	617b      	str	r3, [r7, #20]
   return(result);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e4      	bne.n	80055c8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f864 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005610:	e02a      	b.n	8005668 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00e      	beq.n	800563c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800561e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01c      	beq.n	800566c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
    }
    return;
 800563a:	e017      	b.n	800566c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d012      	beq.n	800566e <HAL_UART_IRQHandler+0x59e>
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 feda 	bl	800640e <UART_EndTransmit_IT>
    return;
 800565a:	e008      	b.n	800566e <HAL_UART_IRQHandler+0x59e>
      return;
 800565c:	bf00      	nop
 800565e:	e006      	b.n	800566e <HAL_UART_IRQHandler+0x59e>
    return;
 8005660:	bf00      	nop
 8005662:	e004      	b.n	800566e <HAL_UART_IRQHandler+0x59e>
      return;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_UART_IRQHandler+0x59e>
      return;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_UART_IRQHandler+0x59e>
    return;
 800566c:	bf00      	nop
  }

}
 800566e:	37e8      	adds	r7, #232	; 0xe8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4ba6      	ldr	r3, [pc, #664]	; (80059b4 <UART_SetConfig+0x2c4>)
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	430b      	orrs	r3, r1
 8005726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	430a      	orrs	r2, r1
 8005760:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a94      	ldr	r2, [pc, #592]	; (80059b8 <UART_SetConfig+0x2c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d120      	bne.n	80057ae <UART_SetConfig+0xbe>
 800576c:	4b93      	ldr	r3, [pc, #588]	; (80059bc <UART_SetConfig+0x2cc>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b03      	cmp	r3, #3
 8005778:	d816      	bhi.n	80057a8 <UART_SetConfig+0xb8>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x90>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	08005791 	.word	0x08005791
 8005784:	0800579d 	.word	0x0800579d
 8005788:	08005797 	.word	0x08005797
 800578c:	080057a3 	.word	0x080057a3
 8005790:	2301      	movs	r3, #1
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e150      	b.n	8005a38 <UART_SetConfig+0x348>
 8005796:	2302      	movs	r3, #2
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e14d      	b.n	8005a38 <UART_SetConfig+0x348>
 800579c:	2304      	movs	r3, #4
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e14a      	b.n	8005a38 <UART_SetConfig+0x348>
 80057a2:	2308      	movs	r3, #8
 80057a4:	77fb      	strb	r3, [r7, #31]
 80057a6:	e147      	b.n	8005a38 <UART_SetConfig+0x348>
 80057a8:	2310      	movs	r3, #16
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e144      	b.n	8005a38 <UART_SetConfig+0x348>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a83      	ldr	r2, [pc, #524]	; (80059c0 <UART_SetConfig+0x2d0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d132      	bne.n	800581e <UART_SetConfig+0x12e>
 80057b8:	4b80      	ldr	r3, [pc, #512]	; (80059bc <UART_SetConfig+0x2cc>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b0c      	cmp	r3, #12
 80057c4:	d828      	bhi.n	8005818 <UART_SetConfig+0x128>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0xdc>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005819 	.word	0x08005819
 80057d4:	08005819 	.word	0x08005819
 80057d8:	08005819 	.word	0x08005819
 80057dc:	0800580d 	.word	0x0800580d
 80057e0:	08005819 	.word	0x08005819
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005819 	.word	0x08005819
 80057ec:	08005807 	.word	0x08005807
 80057f0:	08005819 	.word	0x08005819
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005819 	.word	0x08005819
 80057fc:	08005813 	.word	0x08005813
 8005800:	2300      	movs	r3, #0
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e118      	b.n	8005a38 <UART_SetConfig+0x348>
 8005806:	2302      	movs	r3, #2
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e115      	b.n	8005a38 <UART_SetConfig+0x348>
 800580c:	2304      	movs	r3, #4
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e112      	b.n	8005a38 <UART_SetConfig+0x348>
 8005812:	2308      	movs	r3, #8
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e10f      	b.n	8005a38 <UART_SetConfig+0x348>
 8005818:	2310      	movs	r3, #16
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e10c      	b.n	8005a38 <UART_SetConfig+0x348>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a68      	ldr	r2, [pc, #416]	; (80059c4 <UART_SetConfig+0x2d4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d120      	bne.n	800586a <UART_SetConfig+0x17a>
 8005828:	4b64      	ldr	r3, [pc, #400]	; (80059bc <UART_SetConfig+0x2cc>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005832:	2b30      	cmp	r3, #48	; 0x30
 8005834:	d013      	beq.n	800585e <UART_SetConfig+0x16e>
 8005836:	2b30      	cmp	r3, #48	; 0x30
 8005838:	d814      	bhi.n	8005864 <UART_SetConfig+0x174>
 800583a:	2b20      	cmp	r3, #32
 800583c:	d009      	beq.n	8005852 <UART_SetConfig+0x162>
 800583e:	2b20      	cmp	r3, #32
 8005840:	d810      	bhi.n	8005864 <UART_SetConfig+0x174>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <UART_SetConfig+0x15c>
 8005846:	2b10      	cmp	r3, #16
 8005848:	d006      	beq.n	8005858 <UART_SetConfig+0x168>
 800584a:	e00b      	b.n	8005864 <UART_SetConfig+0x174>
 800584c:	2300      	movs	r3, #0
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e0f2      	b.n	8005a38 <UART_SetConfig+0x348>
 8005852:	2302      	movs	r3, #2
 8005854:	77fb      	strb	r3, [r7, #31]
 8005856:	e0ef      	b.n	8005a38 <UART_SetConfig+0x348>
 8005858:	2304      	movs	r3, #4
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e0ec      	b.n	8005a38 <UART_SetConfig+0x348>
 800585e:	2308      	movs	r3, #8
 8005860:	77fb      	strb	r3, [r7, #31]
 8005862:	e0e9      	b.n	8005a38 <UART_SetConfig+0x348>
 8005864:	2310      	movs	r3, #16
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e0e6      	b.n	8005a38 <UART_SetConfig+0x348>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a56      	ldr	r2, [pc, #344]	; (80059c8 <UART_SetConfig+0x2d8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d120      	bne.n	80058b6 <UART_SetConfig+0x1c6>
 8005874:	4b51      	ldr	r3, [pc, #324]	; (80059bc <UART_SetConfig+0x2cc>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800587e:	2bc0      	cmp	r3, #192	; 0xc0
 8005880:	d013      	beq.n	80058aa <UART_SetConfig+0x1ba>
 8005882:	2bc0      	cmp	r3, #192	; 0xc0
 8005884:	d814      	bhi.n	80058b0 <UART_SetConfig+0x1c0>
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d009      	beq.n	800589e <UART_SetConfig+0x1ae>
 800588a:	2b80      	cmp	r3, #128	; 0x80
 800588c:	d810      	bhi.n	80058b0 <UART_SetConfig+0x1c0>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <UART_SetConfig+0x1a8>
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d006      	beq.n	80058a4 <UART_SetConfig+0x1b4>
 8005896:	e00b      	b.n	80058b0 <UART_SetConfig+0x1c0>
 8005898:	2300      	movs	r3, #0
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e0cc      	b.n	8005a38 <UART_SetConfig+0x348>
 800589e:	2302      	movs	r3, #2
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e0c9      	b.n	8005a38 <UART_SetConfig+0x348>
 80058a4:	2304      	movs	r3, #4
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e0c6      	b.n	8005a38 <UART_SetConfig+0x348>
 80058aa:	2308      	movs	r3, #8
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e0c3      	b.n	8005a38 <UART_SetConfig+0x348>
 80058b0:	2310      	movs	r3, #16
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e0c0      	b.n	8005a38 <UART_SetConfig+0x348>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a44      	ldr	r2, [pc, #272]	; (80059cc <UART_SetConfig+0x2dc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d125      	bne.n	800590c <UART_SetConfig+0x21c>
 80058c0:	4b3e      	ldr	r3, [pc, #248]	; (80059bc <UART_SetConfig+0x2cc>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ce:	d017      	beq.n	8005900 <UART_SetConfig+0x210>
 80058d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d4:	d817      	bhi.n	8005906 <UART_SetConfig+0x216>
 80058d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058da:	d00b      	beq.n	80058f4 <UART_SetConfig+0x204>
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e0:	d811      	bhi.n	8005906 <UART_SetConfig+0x216>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <UART_SetConfig+0x1fe>
 80058e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ea:	d006      	beq.n	80058fa <UART_SetConfig+0x20a>
 80058ec:	e00b      	b.n	8005906 <UART_SetConfig+0x216>
 80058ee:	2300      	movs	r3, #0
 80058f0:	77fb      	strb	r3, [r7, #31]
 80058f2:	e0a1      	b.n	8005a38 <UART_SetConfig+0x348>
 80058f4:	2302      	movs	r3, #2
 80058f6:	77fb      	strb	r3, [r7, #31]
 80058f8:	e09e      	b.n	8005a38 <UART_SetConfig+0x348>
 80058fa:	2304      	movs	r3, #4
 80058fc:	77fb      	strb	r3, [r7, #31]
 80058fe:	e09b      	b.n	8005a38 <UART_SetConfig+0x348>
 8005900:	2308      	movs	r3, #8
 8005902:	77fb      	strb	r3, [r7, #31]
 8005904:	e098      	b.n	8005a38 <UART_SetConfig+0x348>
 8005906:	2310      	movs	r3, #16
 8005908:	77fb      	strb	r3, [r7, #31]
 800590a:	e095      	b.n	8005a38 <UART_SetConfig+0x348>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a2f      	ldr	r2, [pc, #188]	; (80059d0 <UART_SetConfig+0x2e0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d125      	bne.n	8005962 <UART_SetConfig+0x272>
 8005916:	4b29      	ldr	r3, [pc, #164]	; (80059bc <UART_SetConfig+0x2cc>)
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005924:	d017      	beq.n	8005956 <UART_SetConfig+0x266>
 8005926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800592a:	d817      	bhi.n	800595c <UART_SetConfig+0x26c>
 800592c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005930:	d00b      	beq.n	800594a <UART_SetConfig+0x25a>
 8005932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005936:	d811      	bhi.n	800595c <UART_SetConfig+0x26c>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <UART_SetConfig+0x254>
 800593c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005940:	d006      	beq.n	8005950 <UART_SetConfig+0x260>
 8005942:	e00b      	b.n	800595c <UART_SetConfig+0x26c>
 8005944:	2301      	movs	r3, #1
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e076      	b.n	8005a38 <UART_SetConfig+0x348>
 800594a:	2302      	movs	r3, #2
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e073      	b.n	8005a38 <UART_SetConfig+0x348>
 8005950:	2304      	movs	r3, #4
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e070      	b.n	8005a38 <UART_SetConfig+0x348>
 8005956:	2308      	movs	r3, #8
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e06d      	b.n	8005a38 <UART_SetConfig+0x348>
 800595c:	2310      	movs	r3, #16
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e06a      	b.n	8005a38 <UART_SetConfig+0x348>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <UART_SetConfig+0x2e4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d138      	bne.n	80059de <UART_SetConfig+0x2ee>
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <UART_SetConfig+0x2cc>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800597a:	d017      	beq.n	80059ac <UART_SetConfig+0x2bc>
 800597c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005980:	d82a      	bhi.n	80059d8 <UART_SetConfig+0x2e8>
 8005982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005986:	d00b      	beq.n	80059a0 <UART_SetConfig+0x2b0>
 8005988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598c:	d824      	bhi.n	80059d8 <UART_SetConfig+0x2e8>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <UART_SetConfig+0x2aa>
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005996:	d006      	beq.n	80059a6 <UART_SetConfig+0x2b6>
 8005998:	e01e      	b.n	80059d8 <UART_SetConfig+0x2e8>
 800599a:	2300      	movs	r3, #0
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e04b      	b.n	8005a38 <UART_SetConfig+0x348>
 80059a0:	2302      	movs	r3, #2
 80059a2:	77fb      	strb	r3, [r7, #31]
 80059a4:	e048      	b.n	8005a38 <UART_SetConfig+0x348>
 80059a6:	2304      	movs	r3, #4
 80059a8:	77fb      	strb	r3, [r7, #31]
 80059aa:	e045      	b.n	8005a38 <UART_SetConfig+0x348>
 80059ac:	2308      	movs	r3, #8
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e042      	b.n	8005a38 <UART_SetConfig+0x348>
 80059b2:	bf00      	nop
 80059b4:	efff69f3 	.word	0xefff69f3
 80059b8:	40011000 	.word	0x40011000
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40004400 	.word	0x40004400
 80059c4:	40004800 	.word	0x40004800
 80059c8:	40004c00 	.word	0x40004c00
 80059cc:	40005000 	.word	0x40005000
 80059d0:	40011400 	.word	0x40011400
 80059d4:	40007800 	.word	0x40007800
 80059d8:	2310      	movs	r3, #16
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e02c      	b.n	8005a38 <UART_SetConfig+0x348>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a72      	ldr	r2, [pc, #456]	; (8005bac <UART_SetConfig+0x4bc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d125      	bne.n	8005a34 <UART_SetConfig+0x344>
 80059e8:	4b71      	ldr	r3, [pc, #452]	; (8005bb0 <UART_SetConfig+0x4c0>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059f6:	d017      	beq.n	8005a28 <UART_SetConfig+0x338>
 80059f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059fc:	d817      	bhi.n	8005a2e <UART_SetConfig+0x33e>
 80059fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a02:	d00b      	beq.n	8005a1c <UART_SetConfig+0x32c>
 8005a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a08:	d811      	bhi.n	8005a2e <UART_SetConfig+0x33e>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <UART_SetConfig+0x326>
 8005a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a12:	d006      	beq.n	8005a22 <UART_SetConfig+0x332>
 8005a14:	e00b      	b.n	8005a2e <UART_SetConfig+0x33e>
 8005a16:	2300      	movs	r3, #0
 8005a18:	77fb      	strb	r3, [r7, #31]
 8005a1a:	e00d      	b.n	8005a38 <UART_SetConfig+0x348>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e00a      	b.n	8005a38 <UART_SetConfig+0x348>
 8005a22:	2304      	movs	r3, #4
 8005a24:	77fb      	strb	r3, [r7, #31]
 8005a26:	e007      	b.n	8005a38 <UART_SetConfig+0x348>
 8005a28:	2308      	movs	r3, #8
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e004      	b.n	8005a38 <UART_SetConfig+0x348>
 8005a2e:	2310      	movs	r3, #16
 8005a30:	77fb      	strb	r3, [r7, #31]
 8005a32:	e001      	b.n	8005a38 <UART_SetConfig+0x348>
 8005a34:	2310      	movs	r3, #16
 8005a36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a40:	d15b      	bne.n	8005afa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005a42:	7ffb      	ldrb	r3, [r7, #31]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d828      	bhi.n	8005a9a <UART_SetConfig+0x3aa>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x360>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	08005a9b 	.word	0x08005a9b
 8005a60:	08005a8b 	.word	0x08005a8b
 8005a64:	08005a9b 	.word	0x08005a9b
 8005a68:	08005a9b 	.word	0x08005a9b
 8005a6c:	08005a9b 	.word	0x08005a9b
 8005a70:	08005a93 	.word	0x08005a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe fa62 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005a78:	61b8      	str	r0, [r7, #24]
        break;
 8005a7a:	e013      	b.n	8005aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7fe fa72 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 8005a80:	61b8      	str	r0, [r7, #24]
        break;
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a84:	4b4b      	ldr	r3, [pc, #300]	; (8005bb4 <UART_SetConfig+0x4c4>)
 8005a86:	61bb      	str	r3, [r7, #24]
        break;
 8005a88:	e00c      	b.n	8005aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8a:	f7fe f945 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8005a8e:	61b8      	str	r0, [r7, #24]
        break;
 8005a90:	e008      	b.n	8005aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a96:	61bb      	str	r3, [r7, #24]
        break;
 8005a98:	e004      	b.n	8005aa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8005aa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d074      	beq.n	8005b94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	005a      	lsls	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b0f      	cmp	r3, #15
 8005ac4:	d916      	bls.n	8005af4 <UART_SetConfig+0x404>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d212      	bcs.n	8005af4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f023 030f 	bic.w	r3, r3, #15
 8005ad6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	89fb      	ldrh	r3, [r7, #14]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	89fa      	ldrh	r2, [r7, #14]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	e04f      	b.n	8005b94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	77bb      	strb	r3, [r7, #30]
 8005af8:	e04c      	b.n	8005b94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005afa:	7ffb      	ldrb	r3, [r7, #31]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d828      	bhi.n	8005b52 <UART_SetConfig+0x462>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x418>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b53 	.word	0x08005b53
 8005b18:	08005b43 	.word	0x08005b43
 8005b1c:	08005b53 	.word	0x08005b53
 8005b20:	08005b53 	.word	0x08005b53
 8005b24:	08005b53 	.word	0x08005b53
 8005b28:	08005b4b 	.word	0x08005b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fe fa06 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005b30:	61b8      	str	r0, [r7, #24]
        break;
 8005b32:	e013      	b.n	8005b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b34:	f7fe fa16 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 8005b38:	61b8      	str	r0, [r7, #24]
        break;
 8005b3a:	e00f      	b.n	8005b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <UART_SetConfig+0x4c4>)
 8005b3e:	61bb      	str	r3, [r7, #24]
        break;
 8005b40:	e00c      	b.n	8005b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fe f8e9 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8005b46:	61b8      	str	r0, [r7, #24]
        break;
 8005b48:	e008      	b.n	8005b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e004      	b.n	8005b5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	77bb      	strb	r3, [r7, #30]
        break;
 8005b5a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	085a      	lsrs	r2, r3, #1
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	441a      	add	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b0f      	cmp	r3, #15
 8005b7a:	d909      	bls.n	8005b90 <UART_SetConfig+0x4a0>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b82:	d205      	bcs.n	8005b90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60da      	str	r2, [r3, #12]
 8005b8e:	e001      	b.n	8005b94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ba0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40007c00 	.word	0x40007c00
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	00f42400 	.word	0x00f42400

08005bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01a      	beq.n	8005cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb6:	d10a      	bne.n	8005cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d0c:	f7fc f908 	bl	8001f20 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d10e      	bne.n	8005d3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f81b 	bl	8005d6a <UART_WaitOnFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e011      	b.n	8005d62 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b09c      	sub	sp, #112	; 0x70
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	603b      	str	r3, [r7, #0]
 8005d76:	4613      	mov	r3, r2
 8005d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7a:	e0a7      	b.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d82:	f000 80a3 	beq.w	8005ecc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fc f8cb 	bl	8001f20 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d13f      	bne.n	8005e1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005db0:	667b      	str	r3, [r7, #100]	; 0x64
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e6      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	663b      	str	r3, [r7, #96]	; 0x60
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3308      	adds	r3, #8
 8005dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e068      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d050      	beq.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e38:	d148      	bne.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
 8005e64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e6      	bne.n	8005e44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	613b      	str	r3, [r7, #16]
   return(result);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3308      	adds	r3, #8
 8005e94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e96:	623a      	str	r2, [r7, #32]
 8005e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	69f9      	ldr	r1, [r7, #28]
 8005e9c:	6a3a      	ldr	r2, [r7, #32]
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e5      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e010      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	f43f af48 	beq.w	8005d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3770      	adds	r7, #112	; 0x70
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b096      	sub	sp, #88	; 0x58
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2222      	movs	r2, #34	; 0x22
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d028      	beq.n	8005f7e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f30:	4a3e      	ldr	r2, [pc, #248]	; (800602c <UART_Start_Receive_DMA+0x134>)
 8005f32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f38:	4a3d      	ldr	r2, [pc, #244]	; (8006030 <UART_Start_Receive_DMA+0x138>)
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f40:	4a3c      	ldr	r2, [pc, #240]	; (8006034 <UART_Start_Receive_DMA+0x13c>)
 8005f42:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f48:	2200      	movs	r2, #0
 8005f4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3324      	adds	r3, #36	; 0x24
 8005f56:	4619      	mov	r1, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	f7fc f99e 	bl	80022a0 <HAL_DMA_Start_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e051      	b.n	8006022 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d018      	beq.n	8005fb8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e6      	bne.n	8005f86 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fd8:	637a      	str	r2, [r7, #52]	; 0x34
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3308      	adds	r3, #8
 800600a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800600c:	623a      	str	r2, [r7, #32]
 800600e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	61bb      	str	r3, [r7, #24]
   return(result);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e5      	bne.n	8005fec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3758      	adds	r7, #88	; 0x58
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	080061ff 	.word	0x080061ff
 8006030:	08006327 	.word	0x08006327
 8006034:	08006365 	.word	0x08006365

08006038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	60bb      	str	r3, [r7, #8]
   return(result);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6979      	ldr	r1, [r7, #20]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	613b      	str	r3, [r7, #16]
   return(result);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e6      	bne.n	8006040 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006078:	bf00      	nop
 800607a:	3724      	adds	r7, #36	; 0x24
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b095      	sub	sp, #84	; 0x54
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060aa:	643b      	str	r3, [r7, #64]	; 0x40
 80060ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e6      	bne.n	800608c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d118      	bne.n	800612c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	60bb      	str	r3, [r7, #8]
   return(result);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f023 0310 	bic.w	r3, r3, #16
 800610e:	647b      	str	r3, [r7, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6979      	ldr	r1, [r7, #20]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	613b      	str	r3, [r7, #16]
   return(result);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006140:	bf00      	nop
 8006142:	3754      	adds	r7, #84	; 0x54
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b090      	sub	sp, #64	; 0x40
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006162:	d037      	beq.n	80061d4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006166:	2200      	movs	r2, #0
 8006168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800616c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3308      	adds	r3, #8
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	623b      	str	r3, [r7, #32]
   return(result);
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006182:	63bb      	str	r3, [r7, #56]	; 0x38
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3308      	adds	r3, #8
 800618a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618c:	633a      	str	r2, [r7, #48]	; 0x30
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e5      	bne.n	800616c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	69b9      	ldr	r1, [r7, #24]
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	617b      	str	r3, [r7, #20]
   return(result);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e6      	bne.n	80061a0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061d2:	e002      	b.n	80061da <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80061d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80061d6:	f7ff fa4d 	bl	8005674 <HAL_UART_TxCpltCallback>
}
 80061da:	bf00      	nop
 80061dc:	3740      	adds	r7, #64	; 0x40
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fa49 	bl	8005688 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b09c      	sub	sp, #112	; 0x70
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006214:	d071      	beq.n	80062fa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006218:	2200      	movs	r2, #0
 800621a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800622c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006232:	66bb      	str	r3, [r7, #104]	; 0x68
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800623c:	65bb      	str	r3, [r7, #88]	; 0x58
 800623e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800624a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	667b      	str	r3, [r7, #100]	; 0x64
 8006268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3308      	adds	r3, #8
 800626e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006270:	647a      	str	r2, [r7, #68]	; 0x44
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800627e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	623b      	str	r3, [r7, #32]
   return(result);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629a:	663b      	str	r3, [r7, #96]	; 0x60
 800629c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062a4:	633a      	str	r2, [r7, #48]	; 0x30
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ba:	2220      	movs	r2, #32
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d118      	bne.n	80062fa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f023 0310 	bic.w	r3, r3, #16
 80062dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	69b9      	ldr	r1, [r7, #24]
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	617b      	str	r3, [r7, #20]
   return(result);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fc:	2200      	movs	r2, #0
 80062fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800630e:	4619      	mov	r1, r3
 8006310:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006312:	f7ff f9e1 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006316:	e002      	b.n	800631e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006318:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800631a:	f7ff f9bf 	bl	800569c <HAL_UART_RxCpltCallback>
}
 800631e:	bf00      	nop
 8006320:	3770      	adds	r7, #112	; 0x70
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633e:	2b01      	cmp	r3, #1
 8006340:	d109      	bne.n	8006356 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	b29b      	uxth	r3, r3
 800634c:	4619      	mov	r1, r3
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f7ff f9c2 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006354:	e002      	b.n	800635c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff f9aa 	bl	80056b0 <HAL_UART_RxHalfCpltCallback>
}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006376:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b80      	cmp	r3, #128	; 0x80
 800638c:	d109      	bne.n	80063a2 <UART_DMAError+0x3e>
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b21      	cmp	r3, #33	; 0x21
 8006392:	d106      	bne.n	80063a2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2200      	movs	r2, #0
 8006398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800639c:	6978      	ldr	r0, [r7, #20]
 800639e:	f7ff fe4b 	bl	8006038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d109      	bne.n	80063c4 <UART_DMAError+0x60>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b22      	cmp	r3, #34	; 0x22
 80063b4:	d106      	bne.n	80063c4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80063be:	6978      	ldr	r0, [r7, #20]
 80063c0:	f7ff fe60 	bl	8006084 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ca:	f043 0210 	orr.w	r2, r3, #16
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063d4:	6978      	ldr	r0, [r7, #20]
 80063d6:	f7ff f975 	bl	80056c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063da:	bf00      	nop
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff f95f 	bl	80056c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b088      	sub	sp, #32
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	60bb      	str	r3, [r7, #8]
   return(result);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	613b      	str	r3, [r7, #16]
   return(result);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff f90d 	bl	8005674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645a:	bf00      	nop
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006464:	b084      	sub	sp, #16
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	f107 001c 	add.w	r0, r7, #28
 8006472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	2b01      	cmp	r3, #1
 800647a:	d120      	bne.n	80064be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	4b20      	ldr	r3, [pc, #128]	; (8006510 <USB_CoreInit+0xac>)
 800648e:	4013      	ands	r3, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa96 	bl	80069e4 <USB_CoreReset>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	e010      	b.n	80064e0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa8a 	bl	80069e4 <USB_CoreReset>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10b      	bne.n	80064fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f043 0206 	orr.w	r2, r3, #6
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800650a:	b004      	add	sp, #16
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	ffbdffbf 	.word	0xffbdffbf

08006514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f023 0201 	bic.w	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d115      	bne.n	8006584 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006564:	2001      	movs	r0, #1
 8006566:	f7fb fce7 	bl	8001f38 <HAL_Delay>
      ms++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa29 	bl	80069c8 <USB_GetMode>
 8006576:	4603      	mov	r3, r0
 8006578:	2b01      	cmp	r3, #1
 800657a:	d01e      	beq.n	80065ba <USB_SetCurrentMode+0x84>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b31      	cmp	r3, #49	; 0x31
 8006580:	d9f0      	bls.n	8006564 <USB_SetCurrentMode+0x2e>
 8006582:	e01a      	b.n	80065ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d115      	bne.n	80065b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006596:	2001      	movs	r0, #1
 8006598:	f7fb fcce 	bl	8001f38 <HAL_Delay>
      ms++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa10 	bl	80069c8 <USB_GetMode>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <USB_SetCurrentMode+0x84>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b31      	cmp	r3, #49	; 0x31
 80065b2:	d9f0      	bls.n	8006596 <USB_SetCurrentMode+0x60>
 80065b4:	e001      	b.n	80065ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e005      	b.n	80065c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b32      	cmp	r3, #50	; 0x32
 80065be:	d101      	bne.n	80065c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d0:	b084      	sub	sp, #16
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	e009      	b.n	8006604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3340      	adds	r3, #64	; 0x40
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b0e      	cmp	r3, #14
 8006608:	d9f2      	bls.n	80065f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11c      	bne.n	800664a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800661e:	f043 0302 	orr.w	r3, r3, #2
 8006622:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e005      	b.n	8006656 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800665c:	461a      	mov	r2, r3
 800665e:	2300      	movs	r3, #0
 8006660:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006668:	4619      	mov	r1, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006670:	461a      	mov	r2, r3
 8006672:	680b      	ldr	r3, [r1, #0]
 8006674:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10c      	bne.n	8006696 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006682:	2100      	movs	r1, #0
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f965 	bl	8006954 <USB_SetDevSpeed>
 800668a:	e008      	b.n	800669e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800668c:	2101      	movs	r1, #1
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f960 	bl	8006954 <USB_SetDevSpeed>
 8006694:	e003      	b.n	800669e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006696:	2103      	movs	r1, #3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f95b 	bl	8006954 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800669e:	2110      	movs	r1, #16
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f8f3 	bl	800688c <USB_FlushTxFifo>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f91f 	bl	80068f4 <USB_FlushRxFifo>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	461a      	mov	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	461a      	mov	r2, r3
 80066d4:	2300      	movs	r3, #0
 80066d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	461a      	mov	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	e043      	b.n	8006772 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006700:	d118      	bne.n	8006734 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	461a      	mov	r2, r3
 8006716:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e013      	b.n	8006746 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	461a      	mov	r2, r3
 800672c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e008      	b.n	8006746 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	461a      	mov	r2, r3
 8006742:	2300      	movs	r3, #0
 8006744:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	461a      	mov	r2, r3
 8006754:	2300      	movs	r3, #0
 8006756:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	461a      	mov	r2, r3
 8006766:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800676a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3301      	adds	r3, #1
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	429a      	cmp	r2, r3
 8006778:	d3b7      	bcc.n	80066ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	e043      	b.n	8006808 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006796:	d118      	bne.n	80067ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	461a      	mov	r2, r3
 80067ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e013      	b.n	80067dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c0:	461a      	mov	r2, r3
 80067c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	e008      	b.n	80067dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	461a      	mov	r2, r3
 80067d8:	2300      	movs	r3, #0
 80067da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	461a      	mov	r2, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	461a      	mov	r2, r3
 80067fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006800:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	3301      	adds	r3, #1
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	429a      	cmp	r2, r3
 800680e:	d3b7      	bcc.n	8006780 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006822:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006830:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	2b00      	cmp	r3, #0
 8006836:	d105      	bne.n	8006844 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f043 0210 	orr.w	r2, r3, #16
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	4b0e      	ldr	r3, [pc, #56]	; (8006884 <USB_DevInit+0x2b4>)
 800684a:	4313      	orrs	r3, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f043 0208 	orr.w	r2, r3, #8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d105      	bne.n	8006874 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <USB_DevInit+0x2b8>)
 800686e:	4313      	orrs	r3, r2
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006880:	b004      	add	sp, #16
 8006882:	4770      	bx	lr
 8006884:	803c3800 	.word	0x803c3800
 8006888:	40000004 	.word	0x40000004

0800688c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <USB_FlushTxFifo+0x64>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d901      	bls.n	80068ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e01b      	b.n	80068e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	daf2      	bge.n	800689a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	019b      	lsls	r3, r3, #6
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a08      	ldr	r2, [pc, #32]	; (80068f0 <USB_FlushTxFifo+0x64>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e006      	b.n	80068e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d0f0      	beq.n	80068c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	00030d40 	.word	0x00030d40

080068f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a11      	ldr	r2, [pc, #68]	; (8006950 <USB_FlushRxFifo+0x5c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e018      	b.n	8006944 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	daf2      	bge.n	8006900 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2210      	movs	r2, #16
 8006922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a08      	ldr	r2, [pc, #32]	; (8006950 <USB_FlushRxFifo+0x5c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e006      	b.n	8006944 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b10      	cmp	r3, #16
 8006940:	d0f0      	beq.n	8006924 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	00030d40 	.word	0x00030d40

08006954 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	68f9      	ldr	r1, [r7, #12]
 8006970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006974:	4313      	orrs	r3, r2
 8006976:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069a0:	f023 0303 	bic.w	r3, r3, #3
 80069a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069b4:	f043 0302 	orr.w	r3, r3, #2
 80069b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f003 0301 	and.w	r3, r3, #1
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a13      	ldr	r2, [pc, #76]	; (8006a48 <USB_CoreReset+0x64>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d901      	bls.n	8006a02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e01b      	b.n	8006a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	daf2      	bge.n	80069f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f043 0201 	orr.w	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <USB_CoreReset+0x64>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e006      	b.n	8006a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d0f0      	beq.n	8006a1a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	00030d40 	.word	0x00030d40

08006a4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a62:	f3ef 8305 	mrs	r3, IPSR
 8006a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10f      	bne.n	8006a8e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a72:	607b      	str	r3, [r7, #4]
  return(result);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <osKernelInitialize+0x3a>
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <osKernelInitialize+0x64>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d103      	bne.n	8006a96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a8e:	f06f 0305 	mvn.w	r3, #5
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e00c      	b.n	8006ab0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <osKernelInitialize+0x64>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <osKernelInitialize+0x64>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e002      	b.n	8006ab0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20009cdc 	.word	0x20009cdc

08006ac4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aca:	f3ef 8305 	mrs	r3, IPSR
 8006ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10f      	bne.n	8006af6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8006ada:	607b      	str	r3, [r7, #4]
  return(result);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <osKernelStart+0x3a>
 8006aee:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <osKernelStart+0x68>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d103      	bne.n	8006afe <osKernelStart+0x3a>
    stat = osErrorISR;
 8006af6:	f06f 0305 	mvn.w	r3, #5
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e010      	b.n	8006b20 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <osKernelStart+0x68>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d109      	bne.n	8006b1a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b06:	f7ff ffa1 	bl	8006a4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b0a:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <osKernelStart+0x68>)
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b10:	f001 f8b4 	bl	8007c7c <vTaskStartScheduler>
      stat = osOK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e002      	b.n	8006b20 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b20:	68fb      	ldr	r3, [r7, #12]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20009cdc 	.word	0x20009cdc

08006b30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b090      	sub	sp, #64	; 0x40
 8006b34:	af04      	add	r7, sp, #16
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b40:	f3ef 8305 	mrs	r3, IPSR
 8006b44:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b46:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f040 808f 	bne.w	8006c6c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b52:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d105      	bne.n	8006b66 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b5e:	617b      	str	r3, [r7, #20]
  return(result);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <osThreadNew+0x3e>
 8006b66:	4b44      	ldr	r3, [pc, #272]	; (8006c78 <osThreadNew+0x148>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d07e      	beq.n	8006c6c <osThreadNew+0x13c>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d07b      	beq.n	8006c6c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006b78:	2318      	movs	r3, #24
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d045      	beq.n	8006c18 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <osThreadNew+0x6a>
        name = attr->name;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <osThreadNew+0x90>
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	2b38      	cmp	r3, #56	; 0x38
 8006bb2:	d805      	bhi.n	8006bc0 <osThreadNew+0x90>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <osThreadNew+0x94>
        return (NULL);
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e054      	b.n	8006c6e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	089b      	lsrs	r3, r3, #2
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00e      	beq.n	8006bfa <osThreadNew+0xca>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b5b      	cmp	r3, #91	; 0x5b
 8006be2:	d90a      	bls.n	8006bfa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <osThreadNew+0xca>
        mem = 1;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	623b      	str	r3, [r7, #32]
 8006bf8:	e010      	b.n	8006c1c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10c      	bne.n	8006c1c <osThreadNew+0xec>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d108      	bne.n	8006c1c <osThreadNew+0xec>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <osThreadNew+0xec>
          mem = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	e001      	b.n	8006c1c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d110      	bne.n	8006c44 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c2a:	9202      	str	r2, [sp, #8]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fe3f 	bl	80078bc <xTaskCreateStatic>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e013      	b.n	8006c6c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d110      	bne.n	8006c6c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f107 0310 	add.w	r3, r7, #16
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fe90 	bl	8007982 <xTaskCreate>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d001      	beq.n	8006c6c <osThreadNew+0x13c>
          hTask = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c6c:	693b      	ldr	r3, [r7, #16]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3730      	adds	r7, #48	; 0x30
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20009cdc 	.word	0x20009cdc

08006c7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c84:	f3ef 8305 	mrs	r3, IPSR
 8006c88:	613b      	str	r3, [r7, #16]
  return(result);
 8006c8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10f      	bne.n	8006cb0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c90:	f3ef 8310 	mrs	r3, PRIMASK
 8006c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <osDelay+0x3c>
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <osDelay+0x58>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d103      	bne.n	8006cb8 <osDelay+0x3c>
    stat = osErrorISR;
 8006cb0:	f06f 0305 	mvn.w	r3, #5
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	e007      	b.n	8006cc8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 ffa4 	bl	8007c10 <vTaskDelay>
    }
  }

  return (stat);
 8006cc8:	697b      	ldr	r3, [r7, #20]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20009cdc 	.word	0x20009cdc

08006cd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4a06      	ldr	r2, [pc, #24]	; (8006d08 <vApplicationGetIdleTaskMemory+0x30>)
 8006cee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	601a      	str	r2, [r3, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20009ce0 	.word	0x20009ce0
 8006d08:	20009d3c 	.word	0x20009d3c

08006d0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4a06      	ldr	r2, [pc, #24]	; (8006d3c <vApplicationGetTimerTaskMemory+0x30>)
 8006d22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d2a:	601a      	str	r2, [r3, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20009f3c 	.word	0x20009f3c
 8006d3c:	20009f98 	.word	0x20009f98

08006d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f103 0208 	add.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f103 0208 	add.w	r2, r3, #8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df8:	d103      	bne.n	8006e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e00c      	b.n	8006e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3308      	adds	r3, #8
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e002      	b.n	8006e10 <vListInsert+0x2e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d2f6      	bcs.n	8006e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6892      	ldr	r2, [r2, #8]
 8006e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6852      	ldr	r2, [r2, #4]
 8006e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d103      	bne.n	8006e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10c      	bne.n	8006ed6 <xQueueGenericReset+0x2e>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	b672      	cpsid	i
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	b662      	cpsie	i
 8006ed0:	60bb      	str	r3, [r7, #8]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006ed6:	f002 f8a1 	bl	800901c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	68f9      	ldr	r1, [r7, #12]
 8006ee4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee6:	fb01 f303 	mul.w	r3, r1, r3
 8006eea:	441a      	add	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	3b01      	subs	r3, #1
 8006f08:	68f9      	ldr	r1, [r7, #12]
 8006f0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	22ff      	movs	r2, #255	; 0xff
 8006f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	22ff      	movs	r2, #255	; 0xff
 8006f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d114      	bne.n	8006f56 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01a      	beq.n	8006f6a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3310      	adds	r3, #16
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 f937 	bl	80081ac <xTaskRemoveFromEventList>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d012      	beq.n	8006f6a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <xQueueGenericReset+0xd0>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	e009      	b.n	8006f6a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3310      	adds	r3, #16
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fef0 	bl	8006d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff feeb 	bl	8006d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f6a:	f002 f88b 	bl	8009084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f6e:	2301      	movs	r3, #1
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08e      	sub	sp, #56	; 0x38
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10c      	bne.n	8006faa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10c      	bne.n	8006fca <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	b672      	cpsid	i
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	b662      	cpsie	i
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <xQueueGenericCreateStatic+0x5a>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <xQueueGenericCreateStatic+0x5e>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <xQueueGenericCreateStatic+0x60>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10c      	bne.n	8006ffa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	b672      	cpsid	i
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	b662      	cpsie	i
 8006ff4:	623b      	str	r3, [r7, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <xQueueGenericCreateStatic+0x8a>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <xQueueGenericCreateStatic+0x8e>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <xQueueGenericCreateStatic+0x90>
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10c      	bne.n	800702a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	b672      	cpsid	i
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	b662      	cpsie	i
 8007024:	61fb      	str	r3, [r7, #28]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800702a:	2350      	movs	r3, #80	; 0x50
 800702c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b50      	cmp	r3, #80	; 0x50
 8007032:	d00c      	beq.n	800704e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	b672      	cpsid	i
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	b662      	cpsie	i
 8007048:	61bb      	str	r3, [r7, #24]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800704e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00d      	beq.n	8007076 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007062:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f805 	bl	8007080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007078:	4618      	mov	r0, r3
 800707a:	3730      	adds	r7, #48	; 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e002      	b.n	80070a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070ae:	2101      	movs	r1, #1
 80070b0:	69b8      	ldr	r0, [r7, #24]
 80070b2:	f7ff fef9 	bl	8006ea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10c      	bne.n	80070fe <xQueueGenericSend+0x36>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <xQueueGenericSend+0x44>
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <xQueueGenericSend+0x48>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <xQueueGenericSend+0x4a>
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10c      	bne.n	8007130 <xQueueGenericSend+0x68>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	b672      	cpsid	i
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	b662      	cpsie	i
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d103      	bne.n	800713e <xQueueGenericSend+0x76>
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <xQueueGenericSend+0x7a>
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <xQueueGenericSend+0x7c>
 8007142:	2300      	movs	r3, #0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10c      	bne.n	8007162 <xQueueGenericSend+0x9a>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	b672      	cpsid	i
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	b662      	cpsie	i
 800715c:	623b      	str	r3, [r7, #32]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007162:	f001 fa11 	bl	8008588 <xTaskGetSchedulerState>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <xQueueGenericSend+0xaa>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <xQueueGenericSend+0xae>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <xQueueGenericSend+0xb0>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10c      	bne.n	8007196 <xQueueGenericSend+0xce>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	b672      	cpsid	i
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	b662      	cpsie	i
 8007190:	61fb      	str	r3, [r7, #28]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007196:	f001 ff41 	bl	800901c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <xQueueGenericSend+0xe4>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d129      	bne.n	8007200 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b2:	f000 fa15 	bl	80075e0 <prvCopyDataToQueue>
 80071b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	3324      	adds	r3, #36	; 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fff1 	bl	80081ac <xTaskRemoveFromEventList>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d013      	beq.n	80071f8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071d0:	4b3f      	ldr	r3, [pc, #252]	; (80072d0 <xQueueGenericSend+0x208>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	e00a      	b.n	80071f8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071e8:	4b39      	ldr	r3, [pc, #228]	; (80072d0 <xQueueGenericSend+0x208>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071f8:	f001 ff44 	bl	8009084 <vPortExitCritical>
				return pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e063      	b.n	80072c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d103      	bne.n	800720e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007206:	f001 ff3d 	bl	8009084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800720a:	2300      	movs	r3, #0
 800720c:	e05c      	b.n	80072c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	4618      	mov	r0, r3
 800721a:	f001 f855 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800721e:	2301      	movs	r3, #1
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007222:	f001 ff2f 	bl	8009084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007226:	f000 fd93 	bl	8007d50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800722a:	f001 fef7 	bl	800901c <vPortEnterCritical>
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800723a:	d103      	bne.n	8007244 <xQueueGenericSend+0x17c>
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007250:	d103      	bne.n	800725a <xQueueGenericSend+0x192>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800725a:	f001 ff13 	bl	8009084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800725e:	1d3a      	adds	r2, r7, #4
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f001 f844 	bl	80082f4 <xTaskCheckForTimeOut>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d124      	bne.n	80072bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007274:	f000 faac 	bl	80077d0 <prvIsQueueFull>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	3310      	adds	r3, #16
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f000 ff3c 	bl	8008104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800728c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728e:	f000 fa37 	bl	8007700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007292:	f000 fd6b 	bl	8007d6c <xTaskResumeAll>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f47f af7c 	bne.w	8007196 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <xQueueGenericSend+0x208>)
 80072a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	e772      	b.n	8007196 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fa25 	bl	8007700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072b6:	f000 fd59 	bl	8007d6c <xTaskResumeAll>
 80072ba:	e76c      	b.n	8007196 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072be:	f000 fa1f 	bl	8007700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c2:	f000 fd53 	bl	8007d6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3738      	adds	r7, #56	; 0x38
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08e      	sub	sp, #56	; 0x38
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10c      	bne.n	8007306 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	b672      	cpsid	i
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	b662      	cpsie	i
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <xQueueGenericSendFromISR+0x40>
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <xQueueGenericSendFromISR+0x44>
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <xQueueGenericSendFromISR+0x46>
 8007318:	2300      	movs	r3, #0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10c      	bne.n	8007338 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	b672      	cpsid	i
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	b662      	cpsie	i
 8007332:	623b      	str	r3, [r7, #32]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d103      	bne.n	8007346 <xQueueGenericSendFromISR+0x72>
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <xQueueGenericSendFromISR+0x76>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <xQueueGenericSendFromISR+0x78>
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10c      	bne.n	800736a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	b672      	cpsid	i
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	b662      	cpsie	i
 8007364:	61fb      	str	r3, [r7, #28]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800736a:	f001 ff3f 	bl	80091ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800736e:	f3ef 8211 	mrs	r2, BASEPRI
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	b672      	cpsid	i
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	b662      	cpsie	i
 8007386:	61ba      	str	r2, [r7, #24]
 8007388:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800738a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <xQueueGenericSendFromISR+0xcc>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d12c      	bne.n	80073fa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073b0:	f000 f916 	bl	80075e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073bc:	d112      	bne.n	80073e4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d016      	beq.n	80073f4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 feee 	bl	80081ac <xTaskRemoveFromEventList>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00e      	beq.n	80073f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	e007      	b.n	80073f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073e8:	3301      	adds	r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	b25a      	sxtb	r2, r3
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073f4:	2301      	movs	r3, #1
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073f8:	e001      	b.n	80073fe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007408:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800740c:	4618      	mov	r0, r3
 800740e:	3738      	adds	r7, #56	; 0x38
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08c      	sub	sp, #48	; 0x30
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007420:	2300      	movs	r3, #0
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <xQueueReceive+0x34>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	b672      	cpsid	i
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	b662      	cpsie	i
 8007442:	623b      	str	r3, [r7, #32]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <xQueueReceive+0x42>
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <xQueueReceive+0x46>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <xQueueReceive+0x48>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10c      	bne.n	800747a <xQueueReceive+0x66>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	61fb      	str	r3, [r7, #28]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800747a:	f001 f885 	bl	8008588 <xTaskGetSchedulerState>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <xQueueReceive+0x76>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <xQueueReceive+0x7a>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <xQueueReceive+0x7c>
 800748e:	2300      	movs	r3, #0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10c      	bne.n	80074ae <xQueueReceive+0x9a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	b672      	cpsid	i
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	b662      	cpsie	i
 80074a8:	61bb      	str	r3, [r7, #24]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ae:	f001 fdb5 	bl	800901c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d01f      	beq.n	80074fe <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c2:	f000 f8f7 	bl	80076b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	1e5a      	subs	r2, r3, #1
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00f      	beq.n	80074f6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	3310      	adds	r3, #16
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fe66 	bl	80081ac <xTaskRemoveFromEventList>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074e6:	4b3d      	ldr	r3, [pc, #244]	; (80075dc <xQueueReceive+0x1c8>)
 80074e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074f6:	f001 fdc5 	bl	8009084 <vPortExitCritical>
				return pdPASS;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e069      	b.n	80075d2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d103      	bne.n	800750c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007504:	f001 fdbe 	bl	8009084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007508:	2300      	movs	r3, #0
 800750a:	e062      	b.n	80075d2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007512:	f107 0310 	add.w	r3, r7, #16
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fed6 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800751c:	2301      	movs	r3, #1
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007520:	f001 fdb0 	bl	8009084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007524:	f000 fc14 	bl	8007d50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007528:	f001 fd78 	bl	800901c <vPortEnterCritical>
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007532:	b25b      	sxtb	r3, r3
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007538:	d103      	bne.n	8007542 <xQueueReceive+0x12e>
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007548:	b25b      	sxtb	r3, r3
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754e:	d103      	bne.n	8007558 <xQueueReceive+0x144>
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007558:	f001 fd94 	bl	8009084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800755c:	1d3a      	adds	r2, r7, #4
 800755e:	f107 0310 	add.w	r3, r7, #16
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fec5 	bl	80082f4 <xTaskCheckForTimeOut>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d123      	bne.n	80075b8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007572:	f000 f917 	bl	80077a4 <prvIsQueueEmpty>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d017      	beq.n	80075ac <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	3324      	adds	r3, #36	; 0x24
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fdbd 	bl	8008104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800758a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758c:	f000 f8b8 	bl	8007700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007590:	f000 fbec 	bl	8007d6c <xTaskResumeAll>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d189      	bne.n	80074ae <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800759a:	4b10      	ldr	r3, [pc, #64]	; (80075dc <xQueueReceive+0x1c8>)
 800759c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	e780      	b.n	80074ae <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ae:	f000 f8a7 	bl	8007700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075b2:	f000 fbdb 	bl	8007d6c <xTaskResumeAll>
 80075b6:	e77a      	b.n	80074ae <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ba:	f000 f8a1 	bl	8007700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075be:	f000 fbd5 	bl	8007d6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c4:	f000 f8ee 	bl	80077a4 <prvIsQueueEmpty>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f43f af6f 	beq.w	80074ae <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3730      	adds	r7, #48	; 0x30
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10d      	bne.n	800761a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d14d      	bne.n	80076a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 ffda 	bl	80085c4 <xTaskPriorityDisinherit>
 8007610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	609a      	str	r2, [r3, #8]
 8007618:	e043      	b.n	80076a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d119      	bne.n	8007654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6858      	ldr	r0, [r3, #4]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	461a      	mov	r2, r3
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	f00f f96d 	bl	801690a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	441a      	add	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	429a      	cmp	r2, r3
 8007648:	d32b      	bcc.n	80076a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	605a      	str	r2, [r3, #4]
 8007652:	e026      	b.n	80076a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68d8      	ldr	r0, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	461a      	mov	r2, r3
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	f00f f953 	bl	801690a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	425b      	negs	r3, r3
 800766e:	441a      	add	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d207      	bcs.n	8007690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	425b      	negs	r3, r3
 800768a:	441a      	add	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d105      	bne.n	80076a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	3b01      	subs	r3, #1
 80076a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076aa:	697b      	ldr	r3, [r7, #20]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d018      	beq.n	80076f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	441a      	add	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d303      	bcc.n	80076e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68d9      	ldr	r1, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	461a      	mov	r2, r3
 80076f2:	6838      	ldr	r0, [r7, #0]
 80076f4:	f00f f909 	bl	801690a <memcpy>
	}
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007708:	f001 fc88 	bl	800901c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007714:	e011      	b.n	800773a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d012      	beq.n	8007744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3324      	adds	r3, #36	; 0x24
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fd42 	bl	80081ac <xTaskRemoveFromEventList>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800772e:	f000 fe47 	bl	80083c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	3b01      	subs	r3, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800773a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	dce9      	bgt.n	8007716 <prvUnlockQueue+0x16>
 8007742:	e000      	b.n	8007746 <prvUnlockQueue+0x46>
					break;
 8007744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	22ff      	movs	r2, #255	; 0xff
 800774a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800774e:	f001 fc99 	bl	8009084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007752:	f001 fc63 	bl	800901c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800775c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800775e:	e011      	b.n	8007784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3310      	adds	r3, #16
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fd1d 	bl	80081ac <xTaskRemoveFromEventList>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007778:	f000 fe22 	bl	80083c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	3b01      	subs	r3, #1
 8007780:	b2db      	uxtb	r3, r3
 8007782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	dce9      	bgt.n	8007760 <prvUnlockQueue+0x60>
 800778c:	e000      	b.n	8007790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800778e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	22ff      	movs	r2, #255	; 0xff
 8007794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007798:	f001 fc74 	bl	8009084 <vPortExitCritical>
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077ac:	f001 fc36 	bl	800901c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077b8:	2301      	movs	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	e001      	b.n	80077c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077c2:	f001 fc5f 	bl	8009084 <vPortExitCritical>

	return xReturn;
 80077c6:	68fb      	ldr	r3, [r7, #12]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077d8:	f001 fc20 	bl	800901c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d102      	bne.n	80077ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e001      	b.n	80077f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077f2:	f001 fc47 	bl	8009084 <vPortExitCritical>

	return xReturn;
 80077f6:	68fb      	ldr	r3, [r7, #12]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	e014      	b.n	800783a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007810:	4a0f      	ldr	r2, [pc, #60]	; (8007850 <vQueueAddToRegistry+0x50>)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800781c:	490c      	ldr	r1, [pc, #48]	; (8007850 <vQueueAddToRegistry+0x50>)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007826:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <vQueueAddToRegistry+0x50>)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4413      	add	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007832:	e006      	b.n	8007842 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b07      	cmp	r3, #7
 800783e:	d9e7      	bls.n	8007810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	2000a398 	.word	0x2000a398

08007854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007864:	f001 fbda 	bl	800901c <vPortEnterCritical>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800786e:	b25b      	sxtb	r3, r3
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007874:	d103      	bne.n	800787e <vQueueWaitForMessageRestricted+0x2a>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007884:	b25b      	sxtb	r3, r3
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788a:	d103      	bne.n	8007894 <vQueueWaitForMessageRestricted+0x40>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007894:	f001 fbf6 	bl	8009084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fc51 	bl	8008150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7ff ff26 	bl	8007700 <prvUnlockQueue>
	}
 80078b4:	bf00      	nop
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10c      	bne.n	80078ea <xTaskCreateStatic+0x2e>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	b672      	cpsid	i
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	b662      	cpsie	i
 80078e4:	623b      	str	r3, [r7, #32]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <xTaskCreateStatic+0x4e>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	b672      	cpsid	i
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	b662      	cpsie	i
 8007904:	61fb      	str	r3, [r7, #28]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800790a:	235c      	movs	r3, #92	; 0x5c
 800790c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b5c      	cmp	r3, #92	; 0x5c
 8007912:	d00c      	beq.n	800792e <xTaskCreateStatic+0x72>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	b672      	cpsid	i
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	b662      	cpsie	i
 8007928:	61bb      	str	r3, [r7, #24]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800792e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01e      	beq.n	8007974 <xTaskCreateStatic+0xb8>
 8007936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01b      	beq.n	8007974 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007944:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	2202      	movs	r2, #2
 800794a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800794e:	2300      	movs	r3, #0
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9302      	str	r3, [sp, #8]
 8007956:	f107 0314 	add.w	r3, r7, #20
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f850 	bl	8007a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800796c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800796e:	f000 f8df 	bl	8007b30 <prvAddNewTaskToReadyList>
 8007972:	e001      	b.n	8007978 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007978:	697b      	ldr	r3, [r7, #20]
	}
 800797a:	4618      	mov	r0, r3
 800797c:	3728      	adds	r7, #40	; 0x28
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007982:	b580      	push	{r7, lr}
 8007984:	b08c      	sub	sp, #48	; 0x30
 8007986:	af04      	add	r7, sp, #16
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007992:	88fb      	ldrh	r3, [r7, #6]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fc6c 	bl	8009274 <pvPortMalloc>
 800799c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00e      	beq.n	80079c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079a4:	205c      	movs	r0, #92	; 0x5c
 80079a6:	f001 fc65 	bl	8009274 <pvPortMalloc>
 80079aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30
 80079b8:	e005      	b.n	80079c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	f001 fd24 	bl	8009408 <vPortFree>
 80079c0:	e001      	b.n	80079c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9303      	str	r3, [sp, #12]
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	9302      	str	r3, [sp, #8]
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f80e 	bl	8007a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079f0:	69f8      	ldr	r0, [r7, #28]
 80079f2:	f000 f89d 	bl	8007b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079f6:	2301      	movs	r3, #1
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	e002      	b.n	8007a02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a02:	69bb      	ldr	r3, [r7, #24]
	}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	461a      	mov	r2, r3
 8007a24:	21a5      	movs	r1, #165	; 0xa5
 8007a26:	f00e fea7 	bl	8016778 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a34:	440b      	add	r3, r1
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f023 0307 	bic.w	r3, r3, #7
 8007a42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00c      	beq.n	8007a68 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	b672      	cpsid	i
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	b662      	cpsie	i
 8007a62:	617b      	str	r3, [r7, #20]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01f      	beq.n	8007aae <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	e012      	b.n	8007a9a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	7819      	ldrb	r1, [r3, #0]
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	4413      	add	r3, r2
 8007a82:	3334      	adds	r3, #52	; 0x34
 8007a84:	460a      	mov	r2, r1
 8007a86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d006      	beq.n	8007aa2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	2b0f      	cmp	r3, #15
 8007a9e:	d9e9      	bls.n	8007a74 <prvInitialiseNewTask+0x68>
 8007aa0:	e000      	b.n	8007aa4 <prvInitialiseNewTask+0x98>
			{
				break;
 8007aa2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007aac:	e003      	b.n	8007ab6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	2b37      	cmp	r3, #55	; 0x37
 8007aba:	d901      	bls.n	8007ac0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007abc:	2337      	movs	r3, #55	; 0x37
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2200      	movs	r2, #0
 8007ad0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff f952 	bl	8006d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	3318      	adds	r3, #24
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff f94d 	bl	8006d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	2200      	movs	r2, #0
 8007b00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	68f9      	ldr	r1, [r7, #12]
 8007b0e:	69b8      	ldr	r0, [r7, #24]
 8007b10:	f001 f97a 	bl	8008e08 <pxPortInitialiseStack>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b26:	bf00      	nop
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b38:	f001 fa70 	bl	800901c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b3c:	4b2d      	ldr	r3, [pc, #180]	; (8007bf4 <prvAddNewTaskToReadyList+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	4a2c      	ldr	r2, [pc, #176]	; (8007bf4 <prvAddNewTaskToReadyList+0xc4>)
 8007b44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b46:	4b2c      	ldr	r3, [pc, #176]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d109      	bne.n	8007b62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b4e:	4a2a      	ldr	r2, [pc, #168]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b54:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <prvAddNewTaskToReadyList+0xc4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d110      	bne.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b5c:	f000 fc54 	bl	8008408 <prvInitialiseTaskLists>
 8007b60:	e00d      	b.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b62:	4b26      	ldr	r3, [pc, #152]	; (8007bfc <prvAddNewTaskToReadyList+0xcc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b6a:	4b23      	ldr	r3, [pc, #140]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d802      	bhi.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b78:	4a1f      	ldr	r2, [pc, #124]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b7e:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <prvAddNewTaskToReadyList+0xd0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <prvAddNewTaskToReadyList+0xd0>)
 8007b86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <prvAddNewTaskToReadyList+0xd0>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	4b1b      	ldr	r3, [pc, #108]	; (8007c04 <prvAddNewTaskToReadyList+0xd4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d903      	bls.n	8007ba4 <prvAddNewTaskToReadyList+0x74>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a18      	ldr	r2, [pc, #96]	; (8007c04 <prvAddNewTaskToReadyList+0xd4>)
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <prvAddNewTaskToReadyList+0xd8>)
 8007bb2:	441a      	add	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7ff f8ed 	bl	8006d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bc0:	f001 fa60 	bl	8009084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bc4:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <prvAddNewTaskToReadyList+0xcc>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00e      	beq.n	8007bea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d207      	bcs.n	8007bea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <prvAddNewTaskToReadyList+0xdc>)
 8007bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	2000a8ac 	.word	0x2000a8ac
 8007bf8:	2000a3d8 	.word	0x2000a3d8
 8007bfc:	2000a8b8 	.word	0x2000a8b8
 8007c00:	2000a8c8 	.word	0x2000a8c8
 8007c04:	2000a8b4 	.word	0x2000a8b4
 8007c08:	2000a3dc 	.word	0x2000a3dc
 8007c0c:	e000ed04 	.word	0xe000ed04

08007c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d019      	beq.n	8007c56 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <vTaskDelay+0x64>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00c      	beq.n	8007c44 <vTaskDelay+0x34>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	b672      	cpsid	i
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	b662      	cpsie	i
 8007c3e:	60bb      	str	r3, [r7, #8]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007c44:	f000 f884 	bl	8007d50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c48:	2100      	movs	r1, #0
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fd2c 	bl	80086a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c50:	f000 f88c 	bl	8007d6c <xTaskResumeAll>
 8007c54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d107      	bne.n	8007c6c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <vTaskDelay+0x68>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	2000a8d4 	.word	0x2000a8d4
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08a      	sub	sp, #40	; 0x28
 8007c80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c8a:	463a      	mov	r2, r7
 8007c8c:	1d39      	adds	r1, r7, #4
 8007c8e:	f107 0308 	add.w	r3, r7, #8
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff f820 	bl	8006cd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	9202      	str	r2, [sp, #8]
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	460a      	mov	r2, r1
 8007caa:	4923      	ldr	r1, [pc, #140]	; (8007d38 <vTaskStartScheduler+0xbc>)
 8007cac:	4823      	ldr	r0, [pc, #140]	; (8007d3c <vTaskStartScheduler+0xc0>)
 8007cae:	f7ff fe05 	bl	80078bc <xTaskCreateStatic>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4a22      	ldr	r2, [pc, #136]	; (8007d40 <vTaskStartScheduler+0xc4>)
 8007cb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cb8:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <vTaskStartScheduler+0xc4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e001      	b.n	8007cca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d102      	bne.n	8007cd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cd0:	f000 fd3e 	bl	8008750 <xTimerCreateTimerTask>
 8007cd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d118      	bne.n	8007d0e <vTaskStartScheduler+0x92>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	b672      	cpsid	i
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	b662      	cpsie	i
 8007cf0:	613b      	str	r3, [r7, #16]
}
 8007cf2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cf4:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <vTaskStartScheduler+0xc8>)
 8007cf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cfc:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <vTaskStartScheduler+0xcc>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <vTaskStartScheduler+0xd0>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d08:	f001 f90a 	bl	8008f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d0c:	e010      	b.n	8007d30 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d14:	d10c      	bne.n	8007d30 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	b672      	cpsid	i
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	b662      	cpsie	i
 8007d2a:	60fb      	str	r3, [r7, #12]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <vTaskStartScheduler+0xb2>
}
 8007d30:	bf00      	nop
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	0801782c 	.word	0x0801782c
 8007d3c:	080083d9 	.word	0x080083d9
 8007d40:	2000a8d0 	.word	0x2000a8d0
 8007d44:	2000a8cc 	.word	0x2000a8cc
 8007d48:	2000a8b8 	.word	0x2000a8b8
 8007d4c:	2000a8b0 	.word	0x2000a8b0

08007d50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <vTaskSuspendAll+0x18>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4a03      	ldr	r2, [pc, #12]	; (8007d68 <vTaskSuspendAll+0x18>)
 8007d5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007d5e:	bf00      	nop
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	2000a8d4 	.word	0x2000a8d4

08007d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d7a:	4b43      	ldr	r3, [pc, #268]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10c      	bne.n	8007d9c <xTaskResumeAll+0x30>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	b672      	cpsid	i
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	b662      	cpsie	i
 8007d96:	603b      	str	r3, [r7, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d9c:	f001 f93e 	bl	800901c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007da0:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007da8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007daa:	4b37      	ldr	r3, [pc, #220]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d162      	bne.n	8007e78 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007db2:	4b36      	ldr	r3, [pc, #216]	; (8007e8c <xTaskResumeAll+0x120>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d05e      	beq.n	8007e78 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dba:	e02f      	b.n	8007e1c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dbc:	4b34      	ldr	r3, [pc, #208]	; (8007e90 <xTaskResumeAll+0x124>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff f843 	bl	8006e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff f83e 	bl	8006e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ddc:	4b2d      	ldr	r3, [pc, #180]	; (8007e94 <xTaskResumeAll+0x128>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d903      	bls.n	8007dec <xTaskResumeAll+0x80>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	4a2a      	ldr	r2, [pc, #168]	; (8007e94 <xTaskResumeAll+0x128>)
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4a27      	ldr	r2, [pc, #156]	; (8007e98 <xTaskResumeAll+0x12c>)
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fe ffc9 	bl	8006d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0c:	4b23      	ldr	r3, [pc, #140]	; (8007e9c <xTaskResumeAll+0x130>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d302      	bcc.n	8007e1c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <xTaskResumeAll+0x134>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <xTaskResumeAll+0x124>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1cb      	bne.n	8007dbc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e2a:	f000 fb8d 	bl	8008548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <xTaskResumeAll+0x138>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d010      	beq.n	8007e5c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e3a:	f000 f847 	bl	8007ecc <xTaskIncrementTick>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007e44:	4b16      	ldr	r3, [pc, #88]	; (8007ea0 <xTaskResumeAll+0x134>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f1      	bne.n	8007e3a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007e56:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <xTaskResumeAll+0x138>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e5c:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <xTaskResumeAll+0x134>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e64:	2301      	movs	r3, #1
 8007e66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <xTaskResumeAll+0x13c>)
 8007e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e78:	f001 f904 	bl	8009084 <vPortExitCritical>

	return xAlreadyYielded;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	2000a8d4 	.word	0x2000a8d4
 8007e8c:	2000a8ac 	.word	0x2000a8ac
 8007e90:	2000a86c 	.word	0x2000a86c
 8007e94:	2000a8b4 	.word	0x2000a8b4
 8007e98:	2000a3dc 	.word	0x2000a3dc
 8007e9c:	2000a3d8 	.word	0x2000a3d8
 8007ea0:	2000a8c0 	.word	0x2000a8c0
 8007ea4:	2000a8bc 	.word	0x2000a8bc
 8007ea8:	e000ed04 	.word	0xe000ed04

08007eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <xTaskGetTickCount+0x1c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007eb8:	687b      	ldr	r3, [r7, #4]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	2000a8b0 	.word	0x2000a8b0

08007ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed6:	4b50      	ldr	r3, [pc, #320]	; (8008018 <xTaskIncrementTick+0x14c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f040 808b 	bne.w	8007ff6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ee0:	4b4e      	ldr	r3, [pc, #312]	; (800801c <xTaskIncrementTick+0x150>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ee8:	4a4c      	ldr	r2, [pc, #304]	; (800801c <xTaskIncrementTick+0x150>)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d122      	bne.n	8007f3a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ef4:	4b4a      	ldr	r3, [pc, #296]	; (8008020 <xTaskIncrementTick+0x154>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00c      	beq.n	8007f18 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	b672      	cpsid	i
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	b662      	cpsie	i
 8007f12:	603b      	str	r3, [r7, #0]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <xTaskIncrementTick+0x4a>
 8007f18:	4b41      	ldr	r3, [pc, #260]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	4b41      	ldr	r3, [pc, #260]	; (8008024 <xTaskIncrementTick+0x158>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a3f      	ldr	r2, [pc, #252]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4a3f      	ldr	r2, [pc, #252]	; (8008024 <xTaskIncrementTick+0x158>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	4b3e      	ldr	r3, [pc, #248]	; (8008028 <xTaskIncrementTick+0x15c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	4a3d      	ldr	r2, [pc, #244]	; (8008028 <xTaskIncrementTick+0x15c>)
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	f000 fb07 	bl	8008548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f3a:	4b3c      	ldr	r3, [pc, #240]	; (800802c <xTaskIncrementTick+0x160>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d349      	bcc.n	8007fd8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4e:	4b37      	ldr	r3, [pc, #220]	; (800802c <xTaskIncrementTick+0x160>)
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f54:	601a      	str	r2, [r3, #0]
					break;
 8007f56:	e03f      	b.n	8007fd8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f58:	4b31      	ldr	r3, [pc, #196]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d203      	bcs.n	8007f78 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f70:	4a2e      	ldr	r2, [pc, #184]	; (800802c <xTaskIncrementTick+0x160>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f76:	e02f      	b.n	8007fd8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe ff69 	bl	8006e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3318      	adds	r3, #24
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe ff60 	bl	8006e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f98:	4b25      	ldr	r3, [pc, #148]	; (8008030 <xTaskIncrementTick+0x164>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d903      	bls.n	8007fa8 <xTaskIncrementTick+0xdc>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	4a22      	ldr	r2, [pc, #136]	; (8008030 <xTaskIncrementTick+0x164>)
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	; (8008034 <xTaskIncrementTick+0x168>)
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7fe feeb 	bl	8006d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <xTaskIncrementTick+0x16c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d3b8      	bcc.n	8007f44 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd6:	e7b5      	b.n	8007f44 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <xTaskIncrementTick+0x16c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4915      	ldr	r1, [pc, #84]	; (8008034 <xTaskIncrementTick+0x168>)
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d907      	bls.n	8008000 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e004      	b.n	8008000 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <xTaskIncrementTick+0x170>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <xTaskIncrementTick+0x170>)
 8007ffe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <xTaskIncrementTick+0x174>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800800c:	697b      	ldr	r3, [r7, #20]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	2000a8d4 	.word	0x2000a8d4
 800801c:	2000a8b0 	.word	0x2000a8b0
 8008020:	2000a864 	.word	0x2000a864
 8008024:	2000a868 	.word	0x2000a868
 8008028:	2000a8c4 	.word	0x2000a8c4
 800802c:	2000a8cc 	.word	0x2000a8cc
 8008030:	2000a8b4 	.word	0x2000a8b4
 8008034:	2000a3dc 	.word	0x2000a3dc
 8008038:	2000a3d8 	.word	0x2000a3d8
 800803c:	2000a8bc 	.word	0x2000a8bc
 8008040:	2000a8c0 	.word	0x2000a8c0

08008044 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800804a:	4b29      	ldr	r3, [pc, #164]	; (80080f0 <vTaskSwitchContext+0xac>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008052:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <vTaskSwitchContext+0xb0>)
 8008054:	2201      	movs	r2, #1
 8008056:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008058:	e043      	b.n	80080e2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800805a:	4b26      	ldr	r3, [pc, #152]	; (80080f4 <vTaskSwitchContext+0xb0>)
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008060:	4b25      	ldr	r3, [pc, #148]	; (80080f8 <vTaskSwitchContext+0xb4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	e012      	b.n	800808e <vTaskSwitchContext+0x4a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10c      	bne.n	8008088 <vTaskSwitchContext+0x44>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	b672      	cpsid	i
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	b662      	cpsie	i
 8008082:	607b      	str	r3, [r7, #4]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vTaskSwitchContext+0x42>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3b01      	subs	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	491b      	ldr	r1, [pc, #108]	; (80080fc <vTaskSwitchContext+0xb8>)
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0e2      	beq.n	8008068 <vTaskSwitchContext+0x24>
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4a13      	ldr	r2, [pc, #76]	; (80080fc <vTaskSwitchContext+0xb8>)
 80080ae:	4413      	add	r3, r2
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3308      	adds	r3, #8
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d104      	bne.n	80080d2 <vTaskSwitchContext+0x8e>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <vTaskSwitchContext+0xbc>)
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4a06      	ldr	r2, [pc, #24]	; (80080f8 <vTaskSwitchContext+0xb4>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6013      	str	r3, [r2, #0]
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	2000a8d4 	.word	0x2000a8d4
 80080f4:	2000a8c0 	.word	0x2000a8c0
 80080f8:	2000a8b4 	.word	0x2000a8b4
 80080fc:	2000a3dc 	.word	0x2000a3dc
 8008100:	2000a3d8 	.word	0x2000a3d8

08008104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10c      	bne.n	800812e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	b672      	cpsid	i
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	b662      	cpsie	i
 8008128:	60fb      	str	r3, [r7, #12]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <vTaskPlaceOnEventList+0x48>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3318      	adds	r3, #24
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fe fe53 	bl	8006de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800813c:	2101      	movs	r1, #1
 800813e:	6838      	ldr	r0, [r7, #0]
 8008140:	f000 fab2 	bl	80086a8 <prvAddCurrentTaskToDelayedList>
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	2000a3d8 	.word	0x2000a3d8

08008150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10c      	bne.n	800817c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	b672      	cpsid	i
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	b662      	cpsie	i
 8008176:	617b      	str	r3, [r7, #20]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <vTaskPlaceOnEventListRestricted+0x58>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3318      	adds	r3, #24
 8008182:	4619      	mov	r1, r3
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7fe fe08 	bl	8006d9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008194:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	68b8      	ldr	r0, [r7, #8]
 800819a:	f000 fa85 	bl	80086a8 <prvAddCurrentTaskToDelayedList>
	}
 800819e:	bf00      	nop
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	2000a3d8 	.word	0x2000a3d8

080081ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10c      	bne.n	80081dc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	60fb      	str	r3, [r7, #12]
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	3318      	adds	r3, #24
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fe fe37 	bl	8006e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e6:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <xTaskRemoveFromEventList+0xb4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d11d      	bne.n	800822a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fe2e 	bl	8006e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4b19      	ldr	r3, [pc, #100]	; (8008264 <xTaskRemoveFromEventList+0xb8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <xTaskRemoveFromEventList+0x60>
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a16      	ldr	r2, [pc, #88]	; (8008264 <xTaskRemoveFromEventList+0xb8>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4a13      	ldr	r2, [pc, #76]	; (8008268 <xTaskRemoveFromEventList+0xbc>)
 800821a:	441a      	add	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe fdb9 	bl	8006d9a <vListInsertEnd>
 8008228:	e005      	b.n	8008236 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3318      	adds	r3, #24
 800822e:	4619      	mov	r1, r3
 8008230:	480e      	ldr	r0, [pc, #56]	; (800826c <xTaskRemoveFromEventList+0xc0>)
 8008232:	f7fe fdb2 	bl	8006d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823a:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <xTaskRemoveFromEventList+0xc4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	429a      	cmp	r2, r3
 8008242:	d905      	bls.n	8008250 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008244:	2301      	movs	r3, #1
 8008246:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <xTaskRemoveFromEventList+0xc8>)
 800824a:	2201      	movs	r2, #1
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	e001      	b.n	8008254 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008254:	697b      	ldr	r3, [r7, #20]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	2000a8d4 	.word	0x2000a8d4
 8008264:	2000a8b4 	.word	0x2000a8b4
 8008268:	2000a3dc 	.word	0x2000a3dc
 800826c:	2000a86c 	.word	0x2000a86c
 8008270:	2000a3d8 	.word	0x2000a3d8
 8008274:	2000a8c0 	.word	0x2000a8c0

08008278 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10c      	bne.n	80082a0 <vTaskSetTimeOutState+0x28>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	60fb      	str	r3, [r7, #12]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 80082a0:	f000 febc 	bl	800901c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082a4:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <vTaskSetTimeOutState+0x48>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <vTaskSetTimeOutState+0x4c>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80082b4:	f000 fee6 	bl	8009084 <vPortExitCritical>
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	2000a8c4 	.word	0x2000a8c4
 80082c4:	2000a8b0 	.word	0x2000a8b0

080082c8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <vTaskInternalSetTimeOutState+0x24>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <vTaskInternalSetTimeOutState+0x28>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	2000a8c4 	.word	0x2000a8c4
 80082f0:	2000a8b0 	.word	0x2000a8b0

080082f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10c      	bne.n	800831e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	b672      	cpsid	i
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	b662      	cpsie	i
 8008318:	613b      	str	r3, [r7, #16]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10c      	bne.n	800833e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	b672      	cpsid	i
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	b662      	cpsie	i
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800833e:	f000 fe6d 	bl	800901c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008342:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <xTaskCheckForTimeOut+0xc4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800835a:	d102      	bne.n	8008362 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800835c:	2300      	movs	r3, #0
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	e023      	b.n	80083aa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b15      	ldr	r3, [pc, #84]	; (80083bc <xTaskCheckForTimeOut+0xc8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d007      	beq.n	800837e <xTaskCheckForTimeOut+0x8a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	429a      	cmp	r2, r3
 8008376:	d302      	bcc.n	800837e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	61fb      	str	r3, [r7, #28]
 800837c:	e015      	b.n	80083aa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d20b      	bcs.n	80083a0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ff97 	bl	80082c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	e004      	b.n	80083aa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083aa:	f000 fe6b 	bl	8009084 <vPortExitCritical>

	return xReturn;
 80083ae:	69fb      	ldr	r3, [r7, #28]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	2000a8b0 	.word	0x2000a8b0
 80083bc:	2000a8c4 	.word	0x2000a8c4

080083c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083c4:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <vTaskMissedYield+0x14>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
}
 80083ca:	bf00      	nop
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	2000a8c0 	.word	0x2000a8c0

080083d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083e0:	f000 f852 	bl	8008488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083e4:	4b06      	ldr	r3, [pc, #24]	; (8008400 <prvIdleTask+0x28>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d9f9      	bls.n	80083e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <prvIdleTask+0x2c>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083fc:	e7f0      	b.n	80083e0 <prvIdleTask+0x8>
 80083fe:	bf00      	nop
 8008400:	2000a3dc 	.word	0x2000a3dc
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
 8008412:	e00c      	b.n	800842e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4a12      	ldr	r2, [pc, #72]	; (8008468 <prvInitialiseTaskLists+0x60>)
 8008420:	4413      	add	r3, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fc8c 	bl	8006d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3301      	adds	r3, #1
 800842c:	607b      	str	r3, [r7, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b37      	cmp	r3, #55	; 0x37
 8008432:	d9ef      	bls.n	8008414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008434:	480d      	ldr	r0, [pc, #52]	; (800846c <prvInitialiseTaskLists+0x64>)
 8008436:	f7fe fc83 	bl	8006d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800843a:	480d      	ldr	r0, [pc, #52]	; (8008470 <prvInitialiseTaskLists+0x68>)
 800843c:	f7fe fc80 	bl	8006d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008440:	480c      	ldr	r0, [pc, #48]	; (8008474 <prvInitialiseTaskLists+0x6c>)
 8008442:	f7fe fc7d 	bl	8006d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008446:	480c      	ldr	r0, [pc, #48]	; (8008478 <prvInitialiseTaskLists+0x70>)
 8008448:	f7fe fc7a 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800844c:	480b      	ldr	r0, [pc, #44]	; (800847c <prvInitialiseTaskLists+0x74>)
 800844e:	f7fe fc77 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008452:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <prvInitialiseTaskLists+0x78>)
 8008454:	4a05      	ldr	r2, [pc, #20]	; (800846c <prvInitialiseTaskLists+0x64>)
 8008456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <prvInitialiseTaskLists+0x7c>)
 800845a:	4a05      	ldr	r2, [pc, #20]	; (8008470 <prvInitialiseTaskLists+0x68>)
 800845c:	601a      	str	r2, [r3, #0]
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	2000a3dc 	.word	0x2000a3dc
 800846c:	2000a83c 	.word	0x2000a83c
 8008470:	2000a850 	.word	0x2000a850
 8008474:	2000a86c 	.word	0x2000a86c
 8008478:	2000a880 	.word	0x2000a880
 800847c:	2000a898 	.word	0x2000a898
 8008480:	2000a864 	.word	0x2000a864
 8008484:	2000a868 	.word	0x2000a868

08008488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800848e:	e019      	b.n	80084c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008490:	f000 fdc4 	bl	800901c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008494:	4b10      	ldr	r3, [pc, #64]	; (80084d8 <prvCheckTasksWaitingTermination+0x50>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fcd7 	bl	8006e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <prvCheckTasksWaitingTermination+0x54>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	4a0b      	ldr	r2, [pc, #44]	; (80084dc <prvCheckTasksWaitingTermination+0x54>)
 80084ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	4a0a      	ldr	r2, [pc, #40]	; (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084ba:	f000 fde3 	bl	8009084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f810 	bl	80084e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084c4:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e1      	bne.n	8008490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000a880 	.word	0x2000a880
 80084dc:	2000a8ac 	.word	0x2000a8ac
 80084e0:	2000a894 	.word	0x2000a894

080084e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d108      	bne.n	8008508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 ff84 	bl	8009408 <vPortFree>
				vPortFree( pxTCB );
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 ff81 	bl	8009408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008506:	e01a      	b.n	800853e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800850e:	2b01      	cmp	r3, #1
 8008510:	d103      	bne.n	800851a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 ff78 	bl	8009408 <vPortFree>
	}
 8008518:	e011      	b.n	800853e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008520:	2b02      	cmp	r3, #2
 8008522:	d00c      	beq.n	800853e <prvDeleteTCB+0x5a>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	b672      	cpsid	i
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	b662      	cpsie	i
 8008538:	60fb      	str	r3, [r7, #12]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <prvDeleteTCB+0x58>
	}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800854e:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <prvResetNextTaskUnblockTime+0x38>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d104      	bne.n	8008562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <prvResetNextTaskUnblockTime+0x3c>)
 800855a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800855e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008560:	e008      	b.n	8008574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008562:	4b07      	ldr	r3, [pc, #28]	; (8008580 <prvResetNextTaskUnblockTime+0x38>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	4a04      	ldr	r2, [pc, #16]	; (8008584 <prvResetNextTaskUnblockTime+0x3c>)
 8008572:	6013      	str	r3, [r2, #0]
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	2000a864 	.word	0x2000a864
 8008584:	2000a8cc 	.word	0x2000a8cc

08008588 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800858e:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <xTaskGetSchedulerState+0x34>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d102      	bne.n	800859c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008596:	2301      	movs	r3, #1
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	e008      	b.n	80085ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859c:	4b08      	ldr	r3, [pc, #32]	; (80085c0 <xTaskGetSchedulerState+0x38>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085a4:	2302      	movs	r3, #2
 80085a6:	607b      	str	r3, [r7, #4]
 80085a8:	e001      	b.n	80085ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085aa:	2300      	movs	r3, #0
 80085ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085ae:	687b      	ldr	r3, [r7, #4]
	}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	2000a8b8 	.word	0x2000a8b8
 80085c0:	2000a8d4 	.word	0x2000a8d4

080085c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d05a      	beq.n	8008690 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085da:	4b30      	ldr	r3, [pc, #192]	; (800869c <xTaskPriorityDisinherit+0xd8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d00c      	beq.n	80085fe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	b672      	cpsid	i
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	b662      	cpsie	i
 80085f8:	60fb      	str	r3, [r7, #12]
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10c      	bne.n	8008620 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	b672      	cpsid	i
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	b662      	cpsie	i
 800861a:	60bb      	str	r3, [r7, #8]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008624:	1e5a      	subs	r2, r3, #1
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008632:	429a      	cmp	r2, r3
 8008634:	d02c      	beq.n	8008690 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863a:	2b00      	cmp	r3, #0
 800863c:	d128      	bne.n	8008690 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	3304      	adds	r3, #4
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fc06 	bl	8006e54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <xTaskPriorityDisinherit+0xdc>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d903      	bls.n	8008670 <xTaskPriorityDisinherit+0xac>
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	4a0c      	ldr	r2, [pc, #48]	; (80086a0 <xTaskPriorityDisinherit+0xdc>)
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <xTaskPriorityDisinherit+0xe0>)
 800867e:	441a      	add	r2, r3
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	3304      	adds	r3, #4
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f7fe fb87 	bl	8006d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008690:	697b      	ldr	r3, [r7, #20]
	}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	2000a3d8 	.word	0x2000a3d8
 80086a0:	2000a8b4 	.word	0x2000a8b4
 80086a4:	2000a3dc 	.word	0x2000a3dc

080086a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086b2:	4b21      	ldr	r3, [pc, #132]	; (8008738 <prvAddCurrentTaskToDelayedList+0x90>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086b8:	4b20      	ldr	r3, [pc, #128]	; (800873c <prvAddCurrentTaskToDelayedList+0x94>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3304      	adds	r3, #4
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fbc8 	bl	8006e54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ca:	d10a      	bne.n	80086e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d007      	beq.n	80086e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d2:	4b1a      	ldr	r3, [pc, #104]	; (800873c <prvAddCurrentTaskToDelayedList+0x94>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4819      	ldr	r0, [pc, #100]	; (8008740 <prvAddCurrentTaskToDelayedList+0x98>)
 80086dc:	f7fe fb5d 	bl	8006d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086e0:	e026      	b.n	8008730 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086ea:	4b14      	ldr	r3, [pc, #80]	; (800873c <prvAddCurrentTaskToDelayedList+0x94>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d209      	bcs.n	800870e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <prvAddCurrentTaskToDelayedList+0x94>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe fb6b 	bl	8006de2 <vListInsert>
}
 800870c:	e010      	b.n	8008730 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800870e:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <prvAddCurrentTaskToDelayedList+0x94>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3304      	adds	r3, #4
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fb61 	bl	8006de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	429a      	cmp	r2, r3
 8008728:	d202      	bcs.n	8008730 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800872a:	4a08      	ldr	r2, [pc, #32]	; (800874c <prvAddCurrentTaskToDelayedList+0xa4>)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6013      	str	r3, [r2, #0]
}
 8008730:	bf00      	nop
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	2000a8b0 	.word	0x2000a8b0
 800873c:	2000a3d8 	.word	0x2000a3d8
 8008740:	2000a898 	.word	0x2000a898
 8008744:	2000a868 	.word	0x2000a868
 8008748:	2000a864 	.word	0x2000a864
 800874c:	2000a8cc 	.word	0x2000a8cc

08008750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08a      	sub	sp, #40	; 0x28
 8008754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800875a:	f000 fb15 	bl	8008d88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800875e:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <xTimerCreateTimerTask+0x84>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d021      	beq.n	80087aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800876e:	1d3a      	adds	r2, r7, #4
 8008770:	f107 0108 	add.w	r1, r7, #8
 8008774:	f107 030c 	add.w	r3, r7, #12
 8008778:	4618      	mov	r0, r3
 800877a:	f7fe fac7 	bl	8006d0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	9202      	str	r2, [sp, #8]
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	2302      	movs	r3, #2
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	2300      	movs	r3, #0
 800878e:	460a      	mov	r2, r1
 8008790:	4911      	ldr	r1, [pc, #68]	; (80087d8 <xTimerCreateTimerTask+0x88>)
 8008792:	4812      	ldr	r0, [pc, #72]	; (80087dc <xTimerCreateTimerTask+0x8c>)
 8008794:	f7ff f892 	bl	80078bc <xTaskCreateStatic>
 8008798:	4603      	mov	r3, r0
 800879a:	4a11      	ldr	r2, [pc, #68]	; (80087e0 <xTimerCreateTimerTask+0x90>)
 800879c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800879e:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <xTimerCreateTimerTask+0x90>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087a6:	2301      	movs	r3, #1
 80087a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10c      	bne.n	80087ca <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	b672      	cpsid	i
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	b662      	cpsie	i
 80087c4:	613b      	str	r3, [r7, #16]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80087ca:	697b      	ldr	r3, [r7, #20]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	2000a908 	.word	0x2000a908
 80087d8:	08017834 	.word	0x08017834
 80087dc:	08008921 	.word	0x08008921
 80087e0:	2000a90c 	.word	0x2000a90c

080087e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08a      	sub	sp, #40	; 0x28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10c      	bne.n	8008816 <xTimerGenericCommand+0x32>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	b672      	cpsid	i
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	b662      	cpsie	i
 8008810:	623b      	str	r3, [r7, #32]
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008816:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <xTimerGenericCommand+0x9c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d02a      	beq.n	8008874 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b05      	cmp	r3, #5
 800882e:	dc18      	bgt.n	8008862 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008830:	f7ff feaa 	bl	8008588 <xTaskGetSchedulerState>
 8008834:	4603      	mov	r3, r0
 8008836:	2b02      	cmp	r3, #2
 8008838:	d109      	bne.n	800884e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800883a:	4b11      	ldr	r3, [pc, #68]	; (8008880 <xTimerGenericCommand+0x9c>)
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	f107 0110 	add.w	r1, r7, #16
 8008842:	2300      	movs	r3, #0
 8008844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008846:	f7fe fc3f 	bl	80070c8 <xQueueGenericSend>
 800884a:	6278      	str	r0, [r7, #36]	; 0x24
 800884c:	e012      	b.n	8008874 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800884e:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <xTimerGenericCommand+0x9c>)
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	f107 0110 	add.w	r1, r7, #16
 8008856:	2300      	movs	r3, #0
 8008858:	2200      	movs	r2, #0
 800885a:	f7fe fc35 	bl	80070c8 <xQueueGenericSend>
 800885e:	6278      	str	r0, [r7, #36]	; 0x24
 8008860:	e008      	b.n	8008874 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <xTimerGenericCommand+0x9c>)
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	f107 0110 	add.w	r1, r7, #16
 800886a:	2300      	movs	r3, #0
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	f7fe fd31 	bl	80072d4 <xQueueGenericSendFromISR>
 8008872:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008876:	4618      	mov	r0, r3
 8008878:	3728      	adds	r7, #40	; 0x28
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	2000a908 	.word	0x2000a908

08008884 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af02      	add	r7, sp, #8
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888e:	4b23      	ldr	r3, [pc, #140]	; (800891c <prvProcessExpiredTimer+0x98>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fad9 	bl	8006e54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d024      	beq.n	80088fa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	699a      	ldr	r2, [r3, #24]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	18d1      	adds	r1, r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	6978      	ldr	r0, [r7, #20]
 80088be:	f000 f8d3 	bl	8008a68 <prvInsertTimerInActiveList>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d021      	beq.n	800890c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088c8:	2300      	movs	r3, #0
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	2100      	movs	r1, #0
 80088d2:	6978      	ldr	r0, [r7, #20]
 80088d4:	f7ff ff86 	bl	80087e4 <xTimerGenericCommand>
 80088d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d115      	bne.n	800890c <prvProcessExpiredTimer+0x88>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	b672      	cpsid	i
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	b662      	cpsie	i
 80088f4:	60fb      	str	r3, [r7, #12]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008900:	f023 0301 	bic.w	r3, r3, #1
 8008904:	b2da      	uxtb	r2, r3
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	6978      	ldr	r0, [r7, #20]
 8008912:	4798      	blx	r3
}
 8008914:	bf00      	nop
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	2000a900 	.word	0x2000a900

08008920 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008928:	f107 0308 	add.w	r3, r7, #8
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f857 	bl	80089e0 <prvGetNextExpireTime>
 8008932:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4619      	mov	r1, r3
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f803 	bl	8008944 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800893e:	f000 f8d5 	bl	8008aec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008942:	e7f1      	b.n	8008928 <prvTimerTask+0x8>

08008944 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800894e:	f7ff f9ff 	bl	8007d50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f866 	bl	8008a28 <prvSampleTimeNow>
 800895c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d130      	bne.n	80089c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <prvProcessTimerOrBlockTask+0x3c>
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	429a      	cmp	r2, r3
 8008970:	d806      	bhi.n	8008980 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008972:	f7ff f9fb 	bl	8007d6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff ff83 	bl	8008884 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800897e:	e024      	b.n	80089ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d008      	beq.n	8008998 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008986:	4b13      	ldr	r3, [pc, #76]	; (80089d4 <prvProcessTimerOrBlockTask+0x90>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <prvProcessTimerOrBlockTask+0x50>
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <prvProcessTimerOrBlockTask+0x52>
 8008994:	2300      	movs	r3, #0
 8008996:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008998:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <prvProcessTimerOrBlockTask+0x94>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	4619      	mov	r1, r3
 80089a6:	f7fe ff55 	bl	8007854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089aa:	f7ff f9df 	bl	8007d6c <xTaskResumeAll>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10a      	bne.n	80089ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089b4:	4b09      	ldr	r3, [pc, #36]	; (80089dc <prvProcessTimerOrBlockTask+0x98>)
 80089b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	f3bf 8f6f 	isb	sy
}
 80089c4:	e001      	b.n	80089ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089c6:	f7ff f9d1 	bl	8007d6c <xTaskResumeAll>
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	2000a904 	.word	0x2000a904
 80089d8:	2000a908 	.word	0x2000a908
 80089dc:	e000ed04 	.word	0xe000ed04

080089e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089e8:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <prvGetNextExpireTime+0x44>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <prvGetNextExpireTime+0x16>
 80089f2:	2201      	movs	r2, #1
 80089f4:	e000      	b.n	80089f8 <prvGetNextExpireTime+0x18>
 80089f6:	2200      	movs	r2, #0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a04:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <prvGetNextExpireTime+0x44>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	e001      	b.n	8008a14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a14:	68fb      	ldr	r3, [r7, #12]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	2000a900 	.word	0x2000a900

08008a28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a30:	f7ff fa3c 	bl	8007eac <xTaskGetTickCount>
 8008a34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <prvSampleTimeNow+0x3c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d205      	bcs.n	8008a4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a40:	f000 f93c 	bl	8008cbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e002      	b.n	8008a52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a52:	4a04      	ldr	r2, [pc, #16]	; (8008a64 <prvSampleTimeNow+0x3c>)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a58:	68fb      	ldr	r3, [r7, #12]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	2000a910 	.word	0x2000a910

08008a68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a76:	2300      	movs	r3, #0
 8008a78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d812      	bhi.n	8008ab4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	1ad2      	subs	r2, r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d302      	bcc.n	8008aa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	e01b      	b.n	8008ada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008aa2:	4b10      	ldr	r3, [pc, #64]	; (8008ae4 <prvInsertTimerInActiveList+0x7c>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f7fe f998 	bl	8006de2 <vListInsert>
 8008ab2:	e012      	b.n	8008ada <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d206      	bcs.n	8008aca <prvInsertTimerInActiveList+0x62>
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d302      	bcc.n	8008aca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	e007      	b.n	8008ada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aca:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <prvInsertTimerInActiveList+0x80>)
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f7fe f984 	bl	8006de2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ada:	697b      	ldr	r3, [r7, #20]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	2000a904 	.word	0x2000a904
 8008ae8:	2000a900 	.word	0x2000a900

08008aec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08e      	sub	sp, #56	; 0x38
 8008af0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008af2:	e0d0      	b.n	8008c96 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	da1a      	bge.n	8008b30 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	3304      	adds	r3, #4
 8008afe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10c      	bne.n	8008b20 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	b672      	cpsid	i
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	b662      	cpsie	i
 8008b1a:	61fb      	str	r3, [r7, #28]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b26:	6850      	ldr	r0, [r2, #4]
 8008b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b2a:	6892      	ldr	r2, [r2, #8]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f2c0 80af 	blt.w	8008c96 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d004      	beq.n	8008b4e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	3304      	adds	r3, #4
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe f983 	bl	8006e54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b4e:	463b      	mov	r3, r7
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff ff69 	bl	8008a28 <prvSampleTimeNow>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b09      	cmp	r3, #9
 8008b5c:	f200 809a 	bhi.w	8008c94 <prvProcessReceivedCommands+0x1a8>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <prvProcessReceivedCommands+0x7c>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b91 	.word	0x08008b91
 8008b6c:	08008b91 	.word	0x08008b91
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	08008c09 	.word	0x08008c09
 8008b78:	08008c1d 	.word	0x08008c1d
 8008b7c:	08008c6b 	.word	0x08008c6b
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008b91 	.word	0x08008b91
 8008b88:	08008c09 	.word	0x08008c09
 8008b8c:	08008c1d 	.word	0x08008c1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	18d1      	adds	r1, r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb0:	f7ff ff5a 	bl	8008a68 <prvInsertTimerInActiveList>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d06d      	beq.n	8008c96 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d062      	beq.n	8008c96 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	441a      	add	r2, r3
 8008bd8:	2300      	movs	r3, #0
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2100      	movs	r1, #0
 8008be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be2:	f7ff fdff 	bl	80087e4 <xTimerGenericCommand>
 8008be6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d153      	bne.n	8008c96 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	b672      	cpsid	i
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	b662      	cpsie	i
 8008c02:	61bb      	str	r3, [r7, #24]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c0e:	f023 0301 	bic.w	r3, r3, #1
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c1a:	e03c      	b.n	8008c96 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10c      	bne.n	8008c56 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	b672      	cpsid	i
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	b662      	cpsie	i
 8008c50:	617b      	str	r3, [r7, #20]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	699a      	ldr	r2, [r3, #24]
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	18d1      	adds	r1, r2, r3
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c64:	f7ff ff00 	bl	8008a68 <prvInsertTimerInActiveList>
					break;
 8008c68:	e015      	b.n	8008c96 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d103      	bne.n	8008c80 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c7a:	f000 fbc5 	bl	8009408 <vPortFree>
 8008c7e:	e00a      	b.n	8008c96 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c86:	f023 0301 	bic.w	r3, r3, #1
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c92:	e000      	b.n	8008c96 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008c94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c96:	4b08      	ldr	r3, [pc, #32]	; (8008cb8 <prvProcessReceivedCommands+0x1cc>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1d39      	adds	r1, r7, #4
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fbb8 	bl	8007414 <xQueueReceive>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f47f af24 	bne.w	8008af4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	3730      	adds	r7, #48	; 0x30
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	2000a908 	.word	0x2000a908

08008cbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cc2:	e04a      	b.n	8008d5a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cc4:	4b2e      	ldr	r3, [pc, #184]	; (8008d80 <prvSwitchTimerLists+0xc4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cce:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <prvSwitchTimerLists+0xc4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe f8b9 	bl	8006e54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d030      	beq.n	8008d5a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d90e      	bls.n	8008d28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d16:	4b1a      	ldr	r3, [pc, #104]	; (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fe f85e 	bl	8006de2 <vListInsert>
 8008d26:	e018      	b.n	8008d5a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	2100      	movs	r1, #0
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fd56 	bl	80087e4 <xTimerGenericCommand>
 8008d38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10c      	bne.n	8008d5a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	b672      	cpsid	i
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	b662      	cpsie	i
 8008d54:	603b      	str	r3, [r7, #0]
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d5a:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1af      	bne.n	8008cc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d6a:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a04      	ldr	r2, [pc, #16]	; (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d72:	4a04      	ldr	r2, [pc, #16]	; (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	6013      	str	r3, [r2, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	2000a900 	.word	0x2000a900
 8008d84:	2000a904 	.word	0x2000a904

08008d88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d8e:	f000 f945 	bl	800901c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d92:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d120      	bne.n	8008ddc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d9a:	4814      	ldr	r0, [pc, #80]	; (8008dec <prvCheckForValidListAndQueue+0x64>)
 8008d9c:	f7fd ffd0 	bl	8006d40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008da0:	4813      	ldr	r0, [pc, #76]	; (8008df0 <prvCheckForValidListAndQueue+0x68>)
 8008da2:	f7fd ffcd 	bl	8006d40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008da6:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <prvCheckForValidListAndQueue+0x6c>)
 8008da8:	4a10      	ldr	r2, [pc, #64]	; (8008dec <prvCheckForValidListAndQueue+0x64>)
 8008daa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <prvCheckForValidListAndQueue+0x70>)
 8008dae:	4a10      	ldr	r2, [pc, #64]	; (8008df0 <prvCheckForValidListAndQueue+0x68>)
 8008db0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008db2:	2300      	movs	r3, #0
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	4b11      	ldr	r3, [pc, #68]	; (8008dfc <prvCheckForValidListAndQueue+0x74>)
 8008db8:	4a11      	ldr	r2, [pc, #68]	; (8008e00 <prvCheckForValidListAndQueue+0x78>)
 8008dba:	2110      	movs	r1, #16
 8008dbc:	200a      	movs	r0, #10
 8008dbe:	f7fe f8dd 	bl	8006f7c <xQueueGenericCreateStatic>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4a08      	ldr	r2, [pc, #32]	; (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008dc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008dc8:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	490b      	ldr	r1, [pc, #44]	; (8008e04 <prvCheckForValidListAndQueue+0x7c>)
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fd12 	bl	8007800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ddc:	f000 f952 	bl	8009084 <vPortExitCritical>
}
 8008de0:	bf00      	nop
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	2000a908 	.word	0x2000a908
 8008dec:	2000a8d8 	.word	0x2000a8d8
 8008df0:	2000a8ec 	.word	0x2000a8ec
 8008df4:	2000a900 	.word	0x2000a900
 8008df8:	2000a904 	.word	0x2000a904
 8008dfc:	2000a9b4 	.word	0x2000a9b4
 8008e00:	2000a914 	.word	0x2000a914
 8008e04:	0801783c 	.word	0x0801783c

08008e08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3b04      	subs	r3, #4
 8008e18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3b04      	subs	r3, #4
 8008e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f023 0201 	bic.w	r2, r3, #1
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3b04      	subs	r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e38:	4a0c      	ldr	r2, [pc, #48]	; (8008e6c <pxPortInitialiseStack+0x64>)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b14      	subs	r3, #20
 8008e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f06f 0202 	mvn.w	r2, #2
 8008e56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3b20      	subs	r3, #32
 8008e5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	08008e71 	.word	0x08008e71

08008e70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e7a:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <prvTaskExitError+0x5c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e82:	d00c      	beq.n	8008e9e <prvTaskExitError+0x2e>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	b672      	cpsid	i
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	b662      	cpsie	i
 8008e98:	60fb      	str	r3, [r7, #12]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <prvTaskExitError+0x2c>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	b672      	cpsid	i
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	b662      	cpsie	i
 8008eb2:	60bb      	str	r3, [r7, #8]
}
 8008eb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008eb6:	bf00      	nop
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0fc      	beq.n	8008eb8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	20000010 	.word	0x20000010

08008ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pxCurrentTCBConst2>)
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	f380 8809 	msr	PSP, r0
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	4770      	bx	lr
 8008eec:	f3af 8000 	nop.w

08008ef0 <pxCurrentTCBConst2>:
 8008ef0:	2000a3d8 	.word	0x2000a3d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ef8:	4808      	ldr	r0, [pc, #32]	; (8008f1c <prvPortStartFirstTask+0x24>)
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f380 8808 	msr	MSP, r0
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8814 	msr	CONTROL, r0
 8008f0a:	b662      	cpsie	i
 8008f0c:	b661      	cpsie	f
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	df00      	svc	0
 8008f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f1a:	bf00      	nop
 8008f1c:	e000ed08 	.word	0xe000ed08

08008f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f26:	4b37      	ldr	r3, [pc, #220]	; (8009004 <xPortStartScheduler+0xe4>)
 8008f28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	22ff      	movs	r2, #255	; 0xff
 8008f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <xPortStartScheduler+0xe8>)
 8008f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f4e:	4b2f      	ldr	r3, [pc, #188]	; (800900c <xPortStartScheduler+0xec>)
 8008f50:	2207      	movs	r2, #7
 8008f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f54:	e009      	b.n	8008f6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f56:	4b2d      	ldr	r3, [pc, #180]	; (800900c <xPortStartScheduler+0xec>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	4a2b      	ldr	r2, [pc, #172]	; (800900c <xPortStartScheduler+0xec>)
 8008f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f72:	2b80      	cmp	r3, #128	; 0x80
 8008f74:	d0ef      	beq.n	8008f56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f76:	4b25      	ldr	r3, [pc, #148]	; (800900c <xPortStartScheduler+0xec>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f1c3 0307 	rsb	r3, r3, #7
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d00c      	beq.n	8008f9c <xPortStartScheduler+0x7c>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	b672      	cpsid	i
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	b662      	cpsie	i
 8008f96:	60bb      	str	r3, [r7, #8]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f9c:	4b1b      	ldr	r3, [pc, #108]	; (800900c <xPortStartScheduler+0xec>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	021b      	lsls	r3, r3, #8
 8008fa2:	4a1a      	ldr	r2, [pc, #104]	; (800900c <xPortStartScheduler+0xec>)
 8008fa4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fa6:	4b19      	ldr	r3, [pc, #100]	; (800900c <xPortStartScheduler+0xec>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fae:	4a17      	ldr	r2, [pc, #92]	; (800900c <xPortStartScheduler+0xec>)
 8008fb0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fba:	4b15      	ldr	r3, [pc, #84]	; (8009010 <xPortStartScheduler+0xf0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a14      	ldr	r2, [pc, #80]	; (8009010 <xPortStartScheduler+0xf0>)
 8008fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <xPortStartScheduler+0xf0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a11      	ldr	r2, [pc, #68]	; (8009010 <xPortStartScheduler+0xf0>)
 8008fcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fd0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fd2:	f000 f8dd 	bl	8009190 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <xPortStartScheduler+0xf4>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fdc:	f000 f8fc 	bl	80091d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <xPortStartScheduler+0xf8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a0c      	ldr	r2, [pc, #48]	; (8009018 <xPortStartScheduler+0xf8>)
 8008fe6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fec:	f7ff ff84 	bl	8008ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ff0:	f7ff f828 	bl	8008044 <vTaskSwitchContext>
	prvTaskExitError();
 8008ff4:	f7ff ff3c 	bl	8008e70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	e000e400 	.word	0xe000e400
 8009008:	2000aa04 	.word	0x2000aa04
 800900c:	2000aa08 	.word	0x2000aa08
 8009010:	e000ed20 	.word	0xe000ed20
 8009014:	20000010 	.word	0x20000010
 8009018:	e000ef34 	.word	0xe000ef34

0800901c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	b672      	cpsid	i
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	b662      	cpsie	i
 8009036:	607b      	str	r3, [r7, #4]
}
 8009038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800903a:	4b10      	ldr	r3, [pc, #64]	; (800907c <vPortEnterCritical+0x60>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3301      	adds	r3, #1
 8009040:	4a0e      	ldr	r2, [pc, #56]	; (800907c <vPortEnterCritical+0x60>)
 8009042:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009044:	4b0d      	ldr	r3, [pc, #52]	; (800907c <vPortEnterCritical+0x60>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d111      	bne.n	8009070 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800904c:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <vPortEnterCritical+0x64>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00c      	beq.n	8009070 <vPortEnterCritical+0x54>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	b672      	cpsid	i
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	b662      	cpsie	i
 800906a:	603b      	str	r3, [r7, #0]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <vPortEnterCritical+0x52>
	}
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	20000010 	.word	0x20000010
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800908a:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <vPortExitCritical+0x54>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10c      	bne.n	80090ac <vPortExitCritical+0x28>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	b672      	cpsid	i
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	b662      	cpsie	i
 80090a6:	607b      	str	r3, [r7, #4]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <vPortExitCritical+0x54>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	4a09      	ldr	r2, [pc, #36]	; (80090d8 <vPortExitCritical+0x54>)
 80090b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <vPortExitCritical+0x54>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d105      	bne.n	80090ca <vPortExitCritical+0x46>
 80090be:	2300      	movs	r3, #0
 80090c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f383 8811 	msr	BASEPRI, r3
}
 80090c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000010 	.word	0x20000010
 80090dc:	00000000 	.word	0x00000000

080090e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090e0:	f3ef 8009 	mrs	r0, PSP
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	4b15      	ldr	r3, [pc, #84]	; (8009140 <pxCurrentTCBConst>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	f01e 0f10 	tst.w	lr, #16
 80090f0:	bf08      	it	eq
 80090f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	6010      	str	r0, [r2, #0]
 80090fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009104:	b672      	cpsid	i
 8009106:	f380 8811 	msr	BASEPRI, r0
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	b662      	cpsie	i
 8009114:	f7fe ff96 	bl	8008044 <vTaskSwitchContext>
 8009118:	f04f 0000 	mov.w	r0, #0
 800911c:	f380 8811 	msr	BASEPRI, r0
 8009120:	bc09      	pop	{r0, r3}
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	6808      	ldr	r0, [r1, #0]
 8009126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912a:	f01e 0f10 	tst.w	lr, #16
 800912e:	bf08      	it	eq
 8009130:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009134:	f380 8809 	msr	PSP, r0
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop

08009140 <pxCurrentTCBConst>:
 8009140:	2000a3d8 	.word	0x2000a3d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop

08009148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	b672      	cpsid	i
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	b662      	cpsie	i
 8009162:	607b      	str	r3, [r7, #4]
}
 8009164:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009166:	f7fe feb1 	bl	8007ecc <xTaskIncrementTick>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <SysTick_Handler+0x44>)
 8009172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	2300      	movs	r3, #0
 800917a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	f383 8811 	msr	BASEPRI, r3
}
 8009182:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009184:	bf00      	nop
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	e000ed04 	.word	0xe000ed04

08009190 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009194:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <vPortSetupTimerInterrupt+0x34>)
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800919a:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <vPortSetupTimerInterrupt+0x38>)
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <vPortSetupTimerInterrupt+0x3c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a0a      	ldr	r2, [pc, #40]	; (80091d0 <vPortSetupTimerInterrupt+0x40>)
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	099b      	lsrs	r3, r3, #6
 80091ac:	4a09      	ldr	r2, [pc, #36]	; (80091d4 <vPortSetupTimerInterrupt+0x44>)
 80091ae:	3b01      	subs	r3, #1
 80091b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091b2:	4b04      	ldr	r3, [pc, #16]	; (80091c4 <vPortSetupTimerInterrupt+0x34>)
 80091b4:	2207      	movs	r2, #7
 80091b6:	601a      	str	r2, [r3, #0]
}
 80091b8:	bf00      	nop
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	e000e010 	.word	0xe000e010
 80091c8:	e000e018 	.word	0xe000e018
 80091cc:	20000004 	.word	0x20000004
 80091d0:	10624dd3 	.word	0x10624dd3
 80091d4:	e000e014 	.word	0xe000e014

080091d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091e8 <vPortEnableVFP+0x10>
 80091dc:	6801      	ldr	r1, [r0, #0]
 80091de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091e2:	6001      	str	r1, [r0, #0]
 80091e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091e6:	bf00      	nop
 80091e8:	e000ed88 	.word	0xe000ed88

080091ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091f2:	f3ef 8305 	mrs	r3, IPSR
 80091f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b0f      	cmp	r3, #15
 80091fc:	d916      	bls.n	800922c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091fe:	4a19      	ldr	r2, [pc, #100]	; (8009264 <vPortValidateInterruptPriority+0x78>)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009208:	4b17      	ldr	r3, [pc, #92]	; (8009268 <vPortValidateInterruptPriority+0x7c>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	7afa      	ldrb	r2, [r7, #11]
 800920e:	429a      	cmp	r2, r3
 8009210:	d20c      	bcs.n	800922c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	b672      	cpsid	i
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	b662      	cpsie	i
 8009226:	607b      	str	r3, [r7, #4]
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <vPortValidateInterruptPriority+0x80>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009234:	4b0e      	ldr	r3, [pc, #56]	; (8009270 <vPortValidateInterruptPriority+0x84>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d90c      	bls.n	8009256 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	b672      	cpsid	i
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	b662      	cpsie	i
 8009250:	603b      	str	r3, [r7, #0]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <vPortValidateInterruptPriority+0x68>
	}
 8009256:	bf00      	nop
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	e000e3f0 	.word	0xe000e3f0
 8009268:	2000aa04 	.word	0x2000aa04
 800926c:	e000ed0c 	.word	0xe000ed0c
 8009270:	2000aa08 	.word	0x2000aa08

08009274 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009280:	f7fe fd66 	bl	8007d50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009284:	4b5b      	ldr	r3, [pc, #364]	; (80093f4 <pvPortMalloc+0x180>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800928c:	f000 f91a 	bl	80094c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009290:	4b59      	ldr	r3, [pc, #356]	; (80093f8 <pvPortMalloc+0x184>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4013      	ands	r3, r2
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 8092 	bne.w	80093c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01f      	beq.n	80092e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80092a4:	2208      	movs	r2, #8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d016      	beq.n	80092e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f023 0307 	bic.w	r3, r3, #7
 80092bc:	3308      	adds	r3, #8
 80092be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00c      	beq.n	80092e4 <pvPortMalloc+0x70>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	b672      	cpsid	i
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	b662      	cpsie	i
 80092de:	617b      	str	r3, [r7, #20]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d06b      	beq.n	80093c2 <pvPortMalloc+0x14e>
 80092ea:	4b44      	ldr	r3, [pc, #272]	; (80093fc <pvPortMalloc+0x188>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d866      	bhi.n	80093c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092f4:	4b42      	ldr	r3, [pc, #264]	; (8009400 <pvPortMalloc+0x18c>)
 80092f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092f8:	4b41      	ldr	r3, [pc, #260]	; (8009400 <pvPortMalloc+0x18c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092fe:	e004      	b.n	800930a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d903      	bls.n	800931c <pvPortMalloc+0xa8>
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1f1      	bne.n	8009300 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800931c:	4b35      	ldr	r3, [pc, #212]	; (80093f4 <pvPortMalloc+0x180>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009322:	429a      	cmp	r2, r3
 8009324:	d04d      	beq.n	80093c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2208      	movs	r2, #8
 800932c:	4413      	add	r3, r2
 800932e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	2308      	movs	r3, #8
 8009342:	005b      	lsls	r3, r3, #1
 8009344:	429a      	cmp	r2, r3
 8009346:	d921      	bls.n	800938c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4413      	add	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00c      	beq.n	8009374 <pvPortMalloc+0x100>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	b672      	cpsid	i
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	b662      	cpsie	i
 800936e:	613b      	str	r3, [r7, #16]
}
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	1ad2      	subs	r2, r2, r3
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009386:	69b8      	ldr	r0, [r7, #24]
 8009388:	f000 f8fe 	bl	8009588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <pvPortMalloc+0x188>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	4a19      	ldr	r2, [pc, #100]	; (80093fc <pvPortMalloc+0x188>)
 8009398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800939a:	4b18      	ldr	r3, [pc, #96]	; (80093fc <pvPortMalloc+0x188>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b19      	ldr	r3, [pc, #100]	; (8009404 <pvPortMalloc+0x190>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d203      	bcs.n	80093ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093a6:	4b15      	ldr	r3, [pc, #84]	; (80093fc <pvPortMalloc+0x188>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a16      	ldr	r2, [pc, #88]	; (8009404 <pvPortMalloc+0x190>)
 80093ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	4b11      	ldr	r3, [pc, #68]	; (80093f8 <pvPortMalloc+0x184>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	431a      	orrs	r2, r3
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093c2:	f7fe fcd3 	bl	8007d6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00c      	beq.n	80093ea <pvPortMalloc+0x176>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	b672      	cpsid	i
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	b662      	cpsie	i
 80093e4:	60fb      	str	r3, [r7, #12]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <pvPortMalloc+0x174>
	return pvReturn;
 80093ea:	69fb      	ldr	r3, [r7, #28]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3728      	adds	r7, #40	; 0x28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	2000e614 	.word	0x2000e614
 80093f8:	2000e620 	.word	0x2000e620
 80093fc:	2000e618 	.word	0x2000e618
 8009400:	2000e60c 	.word	0x2000e60c
 8009404:	2000e61c 	.word	0x2000e61c

08009408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d04c      	beq.n	80094b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800941a:	2308      	movs	r3, #8
 800941c:	425b      	negs	r3, r3
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4413      	add	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4b23      	ldr	r3, [pc, #140]	; (80094bc <vPortFree+0xb4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4013      	ands	r3, r2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10c      	bne.n	8009450 <vPortFree+0x48>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	b672      	cpsid	i
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	b662      	cpsie	i
 800944a:	60fb      	str	r3, [r7, #12]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00c      	beq.n	8009472 <vPortFree+0x6a>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	b672      	cpsid	i
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	b662      	cpsie	i
 800946c:	60bb      	str	r3, [r7, #8]
}
 800946e:	bf00      	nop
 8009470:	e7fe      	b.n	8009470 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	4b11      	ldr	r3, [pc, #68]	; (80094bc <vPortFree+0xb4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4013      	ands	r3, r2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d019      	beq.n	80094b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d115      	bne.n	80094b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <vPortFree+0xb4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	43db      	mvns	r3, r3
 8009492:	401a      	ands	r2, r3
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009498:	f7fe fc5a 	bl	8007d50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <vPortFree+0xb8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4413      	add	r3, r2
 80094a6:	4a06      	ldr	r2, [pc, #24]	; (80094c0 <vPortFree+0xb8>)
 80094a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094aa:	6938      	ldr	r0, [r7, #16]
 80094ac:	f000 f86c 	bl	8009588 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094b0:	f7fe fc5c 	bl	8007d6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094b4:	bf00      	nop
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	2000e620 	.word	0x2000e620
 80094c0:	2000e618 	.word	0x2000e618

080094c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094d0:	4b27      	ldr	r3, [pc, #156]	; (8009570 <prvHeapInit+0xac>)
 80094d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00c      	beq.n	80094f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3307      	adds	r3, #7
 80094e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0307 	bic.w	r3, r3, #7
 80094ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	4a1f      	ldr	r2, [pc, #124]	; (8009570 <prvHeapInit+0xac>)
 80094f4:	4413      	add	r3, r2
 80094f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094fc:	4a1d      	ldr	r2, [pc, #116]	; (8009574 <prvHeapInit+0xb0>)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009502:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <prvHeapInit+0xb0>)
 8009504:	2200      	movs	r2, #0
 8009506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	4413      	add	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009510:	2208      	movs	r2, #8
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f023 0307 	bic.w	r3, r3, #7
 800951e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a15      	ldr	r2, [pc, #84]	; (8009578 <prvHeapInit+0xb4>)
 8009524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <prvHeapInit+0xb4>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2200      	movs	r2, #0
 800952c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800952e:	4b12      	ldr	r3, [pc, #72]	; (8009578 <prvHeapInit+0xb4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <prvHeapInit+0xb4>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	4a0a      	ldr	r2, [pc, #40]	; (800957c <prvHeapInit+0xb8>)
 8009552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4a09      	ldr	r2, [pc, #36]	; (8009580 <prvHeapInit+0xbc>)
 800955a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800955c:	4b09      	ldr	r3, [pc, #36]	; (8009584 <prvHeapInit+0xc0>)
 800955e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009562:	601a      	str	r2, [r3, #0]
}
 8009564:	bf00      	nop
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	2000aa0c 	.word	0x2000aa0c
 8009574:	2000e60c 	.word	0x2000e60c
 8009578:	2000e614 	.word	0x2000e614
 800957c:	2000e61c 	.word	0x2000e61c
 8009580:	2000e618 	.word	0x2000e618
 8009584:	2000e620 	.word	0x2000e620

08009588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009590:	4b28      	ldr	r3, [pc, #160]	; (8009634 <prvInsertBlockIntoFreeList+0xac>)
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	e002      	b.n	800959c <prvInsertBlockIntoFreeList+0x14>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d8f7      	bhi.n	8009596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	4413      	add	r3, r2
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d108      	bne.n	80095ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	441a      	add	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	441a      	add	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d118      	bne.n	8009610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <prvInsertBlockIntoFreeList+0xb0>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d00d      	beq.n	8009606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	441a      	add	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	e008      	b.n	8009618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009606:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <prvInsertBlockIntoFreeList+0xb0>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	e003      	b.n	8009618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	429a      	cmp	r2, r3
 800961e:	d002      	beq.n	8009626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	2000e60c 	.word	0x2000e60c
 8009638:	2000e614 	.word	0x2000e614

0800963c <rcl_get_zero_initialized_publisher>:
 800963c:	4b01      	ldr	r3, [pc, #4]	; (8009644 <rcl_get_zero_initialized_publisher+0x8>)
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	080178a4 	.word	0x080178a4

08009648 <rcl_publisher_init>:
 8009648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800964c:	b088      	sub	sp, #32
 800964e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009650:	2d00      	cmp	r5, #0
 8009652:	d069      	beq.n	8009728 <rcl_publisher_init+0xe0>
 8009654:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8009658:	4604      	mov	r4, r0
 800965a:	4648      	mov	r0, r9
 800965c:	460e      	mov	r6, r1
 800965e:	4690      	mov	r8, r2
 8009660:	461f      	mov	r7, r3
 8009662:	f001 f845 	bl	800a6f0 <rcutils_allocator_is_valid>
 8009666:	2800      	cmp	r0, #0
 8009668:	d05e      	beq.n	8009728 <rcl_publisher_init+0xe0>
 800966a:	2c00      	cmp	r4, #0
 800966c:	d05c      	beq.n	8009728 <rcl_publisher_init+0xe0>
 800966e:	f8d4 a000 	ldr.w	sl, [r4]
 8009672:	f1ba 0f00 	cmp.w	sl, #0
 8009676:	d004      	beq.n	8009682 <rcl_publisher_init+0x3a>
 8009678:	2764      	movs	r7, #100	; 0x64
 800967a:	4638      	mov	r0, r7
 800967c:	b008      	add	sp, #32
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	4630      	mov	r0, r6
 8009684:	f006 faca 	bl	800fc1c <rcl_node_is_valid>
 8009688:	2800      	cmp	r0, #0
 800968a:	d052      	beq.n	8009732 <rcl_publisher_init+0xea>
 800968c:	f1b8 0f00 	cmp.w	r8, #0
 8009690:	d04a      	beq.n	8009728 <rcl_publisher_init+0xe0>
 8009692:	2f00      	cmp	r7, #0
 8009694:	d048      	beq.n	8009728 <rcl_publisher_init+0xe0>
 8009696:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800969a:	aa07      	add	r2, sp, #28
 800969c:	9205      	str	r2, [sp, #20]
 800969e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80096a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80096aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80096ae:	4639      	mov	r1, r7
 80096b0:	e899 000c 	ldmia.w	r9, {r2, r3}
 80096b4:	4630      	mov	r0, r6
 80096b6:	f006 fb05 	bl	800fcc4 <rcl_node_resolve_name>
 80096ba:	4607      	mov	r7, r0
 80096bc:	2800      	cmp	r0, #0
 80096be:	d14f      	bne.n	8009760 <rcl_publisher_init+0x118>
 80096c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80096c2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80096c4:	20c8      	movs	r0, #200	; 0xc8
 80096c6:	4798      	blx	r3
 80096c8:	6020      	str	r0, [r4, #0]
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d04e      	beq.n	800976c <rcl_publisher_init+0x124>
 80096ce:	4630      	mov	r0, r6
 80096d0:	f006 fac6 	bl	800fc60 <rcl_node_get_rmw_handle>
 80096d4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	9a07      	ldr	r2, [sp, #28]
 80096dc:	6827      	ldr	r7, [r4, #0]
 80096de:	462b      	mov	r3, r5
 80096e0:	4641      	mov	r1, r8
 80096e2:	f001 f913 	bl	800a90c <rmw_create_publisher>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80096ec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80096f0:	b370      	cbz	r0, 8009750 <rcl_publisher_init+0x108>
 80096f2:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80096f6:	f001 f9e7 	bl	800aac8 <rmw_publisher_get_actual_qos>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	4607      	mov	r7, r0
 80096fe:	b9d0      	cbnz	r0, 8009736 <rcl_publisher_init+0xee>
 8009700:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8009704:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009708:	4629      	mov	r1, r5
 800970a:	2270      	movs	r2, #112	; 0x70
 800970c:	4618      	mov	r0, r3
 800970e:	f00d f8fc 	bl	801690a <memcpy>
 8009712:	6832      	ldr	r2, [r6, #0]
 8009714:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8009718:	9807      	ldr	r0, [sp, #28]
 800971a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800971c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800971e:	4798      	blx	r3
 8009720:	4638      	mov	r0, r7
 8009722:	b008      	add	sp, #32
 8009724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009728:	270b      	movs	r7, #11
 800972a:	4638      	mov	r0, r7
 800972c:	b008      	add	sp, #32
 800972e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009732:	27c8      	movs	r7, #200	; 0xc8
 8009734:	e7a1      	b.n	800967a <rcl_publisher_init+0x32>
 8009736:	b18b      	cbz	r3, 800975c <rcl_publisher_init+0x114>
 8009738:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800973c:	b142      	cbz	r2, 8009750 <rcl_publisher_init+0x108>
 800973e:	4630      	mov	r0, r6
 8009740:	f006 fa8e 	bl	800fc60 <rcl_node_get_rmw_handle>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800974a:	f001 f9cd 	bl	800aae8 <rmw_destroy_publisher>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8009752:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009754:	4618      	mov	r0, r3
 8009756:	4790      	blx	r2
 8009758:	2300      	movs	r3, #0
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	2701      	movs	r7, #1
 800975e:	e7db      	b.n	8009718 <rcl_publisher_init+0xd0>
 8009760:	2867      	cmp	r0, #103	; 0x67
 8009762:	d0d9      	beq.n	8009718 <rcl_publisher_init+0xd0>
 8009764:	2869      	cmp	r0, #105	; 0x69
 8009766:	d003      	beq.n	8009770 <rcl_publisher_init+0x128>
 8009768:	280a      	cmp	r0, #10
 800976a:	d1f7      	bne.n	800975c <rcl_publisher_init+0x114>
 800976c:	270a      	movs	r7, #10
 800976e:	e7d3      	b.n	8009718 <rcl_publisher_init+0xd0>
 8009770:	2767      	movs	r7, #103	; 0x67
 8009772:	e7d1      	b.n	8009718 <rcl_publisher_init+0xd0>

08009774 <rcl_publisher_get_default_options>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	4d14      	ldr	r5, [pc, #80]	; (80097c8 <rcl_publisher_get_default_options+0x54>)
 8009778:	4914      	ldr	r1, [pc, #80]	; (80097cc <rcl_publisher_get_default_options+0x58>)
 800977a:	b088      	sub	sp, #32
 800977c:	4604      	mov	r4, r0
 800977e:	2250      	movs	r2, #80	; 0x50
 8009780:	4628      	mov	r0, r5
 8009782:	f00d f8c2 	bl	801690a <memcpy>
 8009786:	a802      	add	r0, sp, #8
 8009788:	f000 ffa4 	bl	800a6d4 <rcutils_get_default_allocator>
 800978c:	f10d 0c08 	add.w	ip, sp, #8
 8009790:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009794:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8009798:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800979c:	466e      	mov	r6, sp
 800979e:	f8dc 3000 	ldr.w	r3, [ip]
 80097a2:	f8ce 3000 	str.w	r3, [lr]
 80097a6:	4630      	mov	r0, r6
 80097a8:	f001 f832 	bl	800a810 <rmw_get_default_publisher_options>
 80097ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 80097b0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80097b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80097b8:	2270      	movs	r2, #112	; 0x70
 80097ba:	4629      	mov	r1, r5
 80097bc:	4620      	mov	r0, r4
 80097be:	f00d f8a4 	bl	801690a <memcpy>
 80097c2:	4620      	mov	r0, r4
 80097c4:	b008      	add	sp, #32
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	2000e628 	.word	0x2000e628
 80097cc:	080178a8 	.word	0x080178a8

080097d0 <rcl_publish>:
 80097d0:	b1f8      	cbz	r0, 8009812 <rcl_publish+0x42>
 80097d2:	6803      	ldr	r3, [r0, #0]
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	b1b3      	cbz	r3, 8009808 <rcl_publish+0x38>
 80097da:	4616      	mov	r6, r2
 80097dc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80097e0:	b192      	cbz	r2, 8009808 <rcl_publish+0x38>
 80097e2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80097e6:	460d      	mov	r5, r1
 80097e8:	f005 fe3e 	bl	800f468 <rcl_context_is_valid>
 80097ec:	b160      	cbz	r0, 8009808 <rcl_publish+0x38>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80097f4:	b140      	cbz	r0, 8009808 <rcl_publish+0x38>
 80097f6:	b155      	cbz	r5, 800980e <rcl_publish+0x3e>
 80097f8:	4632      	mov	r2, r6
 80097fa:	4629      	mov	r1, r5
 80097fc:	f001 f826 	bl	800a84c <rmw_publish>
 8009800:	3800      	subs	r0, #0
 8009802:	bf18      	it	ne
 8009804:	2001      	movne	r0, #1
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800980c:	bd70      	pop	{r4, r5, r6, pc}
 800980e:	200b      	movs	r0, #11
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009816:	4770      	bx	lr

08009818 <rcl_publisher_is_valid>:
 8009818:	b1a0      	cbz	r0, 8009844 <rcl_publisher_is_valid+0x2c>
 800981a:	6803      	ldr	r3, [r0, #0]
 800981c:	b510      	push	{r4, lr}
 800981e:	4604      	mov	r4, r0
 8009820:	b173      	cbz	r3, 8009840 <rcl_publisher_is_valid+0x28>
 8009822:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009826:	b15a      	cbz	r2, 8009840 <rcl_publisher_is_valid+0x28>
 8009828:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800982c:	f005 fe1c 	bl	800f468 <rcl_context_is_valid>
 8009830:	b130      	cbz	r0, 8009840 <rcl_publisher_is_valid+0x28>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009838:	3800      	subs	r0, #0
 800983a:	bf18      	it	ne
 800983c:	2001      	movne	r0, #1
 800983e:	bd10      	pop	{r4, pc}
 8009840:	2000      	movs	r0, #0
 8009842:	bd10      	pop	{r4, pc}
 8009844:	2000      	movs	r0, #0
 8009846:	4770      	bx	lr

08009848 <rcl_publisher_is_valid_except_context>:
 8009848:	b130      	cbz	r0, 8009858 <rcl_publisher_is_valid_except_context+0x10>
 800984a:	6800      	ldr	r0, [r0, #0]
 800984c:	b120      	cbz	r0, 8009858 <rcl_publisher_is_valid_except_context+0x10>
 800984e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8009852:	3800      	subs	r0, #0
 8009854:	bf18      	it	ne
 8009856:	2001      	movne	r0, #1
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop

0800985c <_rclc_check_for_new_data>:
 800985c:	2800      	cmp	r0, #0
 800985e:	d046      	beq.n	80098ee <_rclc_check_for_new_data+0x92>
 8009860:	b510      	push	{r4, lr}
 8009862:	7802      	ldrb	r2, [r0, #0]
 8009864:	b084      	sub	sp, #16
 8009866:	4603      	mov	r3, r0
 8009868:	2a0a      	cmp	r2, #10
 800986a:	d842      	bhi.n	80098f2 <_rclc_check_for_new_data+0x96>
 800986c:	e8df f002 	tbb	[pc, r2]
 8009870:	14181212 	.word	0x14181212
 8009874:	06060614 	.word	0x06060614
 8009878:	2e1a      	.short	0x2e1a
 800987a:	16          	.byte	0x16
 800987b:	00          	.byte	0x00
 800987c:	6a0a      	ldr	r2, [r1, #32]
 800987e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009880:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009884:	2000      	movs	r0, #0
 8009886:	1a12      	subs	r2, r2, r0
 8009888:	bf18      	it	ne
 800988a:	2201      	movne	r2, #1
 800988c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009890:	b004      	add	sp, #16
 8009892:	bd10      	pop	{r4, pc}
 8009894:	680a      	ldr	r2, [r1, #0]
 8009896:	e7f2      	b.n	800987e <_rclc_check_for_new_data+0x22>
 8009898:	698a      	ldr	r2, [r1, #24]
 800989a:	e7f0      	b.n	800987e <_rclc_check_for_new_data+0x22>
 800989c:	688a      	ldr	r2, [r1, #8]
 800989e:	e7ee      	b.n	800987e <_rclc_check_for_new_data+0x22>
 80098a0:	690a      	ldr	r2, [r1, #16]
 80098a2:	e7ec      	b.n	800987e <_rclc_check_for_new_data+0x22>
 80098a4:	685c      	ldr	r4, [r3, #4]
 80098a6:	4608      	mov	r0, r1
 80098a8:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80098ac:	f104 0143 	add.w	r1, r4, #67	; 0x43
 80098b0:	f104 0342 	add.w	r3, r4, #66	; 0x42
 80098b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80098be:	f104 0341 	add.w	r3, r4, #65	; 0x41
 80098c2:	f104 0110 	add.w	r1, r4, #16
 80098c6:	f007 fecb 	bl	8011660 <rcl_action_client_wait_set_get_entities_ready>
 80098ca:	e7e1      	b.n	8009890 <_rclc_check_for_new_data+0x34>
 80098cc:	685c      	ldr	r4, [r3, #4]
 80098ce:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80098d2:	f104 0322 	add.w	r3, r4, #34	; 0x22
 80098d6:	e9cd 3200 	strd	r3, r2, [sp]
 80098da:	4608      	mov	r0, r1
 80098dc:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80098e0:	f104 0220 	add.w	r2, r4, #32
 80098e4:	f104 0110 	add.w	r1, r4, #16
 80098e8:	f008 f8d0 	bl	8011a8c <rcl_action_server_wait_set_get_entities_ready>
 80098ec:	e7d0      	b.n	8009890 <_rclc_check_for_new_data+0x34>
 80098ee:	200b      	movs	r0, #11
 80098f0:	4770      	bx	lr
 80098f2:	2001      	movs	r0, #1
 80098f4:	e7cc      	b.n	8009890 <_rclc_check_for_new_data+0x34>
 80098f6:	bf00      	nop

080098f8 <_rclc_take_new_data>:
 80098f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098fa:	b09b      	sub	sp, #108	; 0x6c
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f000 8088 	beq.w	8009a12 <_rclc_take_new_data+0x11a>
 8009902:	7803      	ldrb	r3, [r0, #0]
 8009904:	4604      	mov	r4, r0
 8009906:	2b0a      	cmp	r3, #10
 8009908:	f200 8167 	bhi.w	8009bda <_rclc_take_new_data+0x2e2>
 800990c:	e8df f003 	tbb	[pc, r3]
 8009910:	44152d2d 	.word	0x44152d2d
 8009914:	19191944 	.word	0x19191944
 8009918:	065a      	.short	0x065a
 800991a:	15          	.byte	0x15
 800991b:	00          	.byte	0x00
 800991c:	6840      	ldr	r0, [r0, #4]
 800991e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 80b2 	bne.w	8009a8c <_rclc_take_new_data+0x194>
 8009928:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800992c:	2b00      	cmp	r3, #0
 800992e:	f040 80e4 	bne.w	8009afa <_rclc_take_new_data+0x202>
 8009932:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009936:	2b00      	cmp	r3, #0
 8009938:	d16f      	bne.n	8009a1a <_rclc_take_new_data+0x122>
 800993a:	2500      	movs	r5, #0
 800993c:	4628      	mov	r0, r5
 800993e:	b01b      	add	sp, #108	; 0x6c
 8009940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009942:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009944:	6a0b      	ldr	r3, [r1, #32]
 8009946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0f5      	beq.n	800993a <_rclc_take_new_data+0x42>
 800994e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009952:	f104 0110 	add.w	r1, r4, #16
 8009956:	f006 fb5f 	bl	8010018 <rcl_take_request>
 800995a:	4605      	mov	r5, r0
 800995c:	2800      	cmp	r0, #0
 800995e:	d0ec      	beq.n	800993a <_rclc_take_new_data+0x42>
 8009960:	f240 2359 	movw	r3, #601	; 0x259
 8009964:	4298      	cmp	r0, r3
 8009966:	d013      	beq.n	8009990 <_rclc_take_new_data+0x98>
 8009968:	e029      	b.n	80099be <_rclc_take_new_data+0xc6>
 800996a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800996c:	680b      	ldr	r3, [r1, #0]
 800996e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0e1      	beq.n	800993a <_rclc_take_new_data+0x42>
 8009976:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800997a:	2300      	movs	r3, #0
 800997c:	aa0a      	add	r2, sp, #40	; 0x28
 800997e:	f006 fc89 	bl	8010294 <rcl_take>
 8009982:	4605      	mov	r5, r0
 8009984:	2800      	cmp	r0, #0
 8009986:	d0d9      	beq.n	800993c <_rclc_take_new_data+0x44>
 8009988:	f240 1391 	movw	r3, #401	; 0x191
 800998c:	4298      	cmp	r0, r3
 800998e:	d116      	bne.n	80099be <_rclc_take_new_data+0xc6>
 8009990:	2300      	movs	r3, #0
 8009992:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009996:	e7d1      	b.n	800993c <_rclc_take_new_data+0x44>
 8009998:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800999a:	698b      	ldr	r3, [r1, #24]
 800999c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0ca      	beq.n	800993a <_rclc_take_new_data+0x42>
 80099a4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80099a8:	f104 0110 	add.w	r1, r4, #16
 80099ac:	f005 fcec 	bl	800f388 <rcl_take_response>
 80099b0:	4605      	mov	r5, r0
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0c1      	beq.n	800993a <_rclc_take_new_data+0x42>
 80099b6:	f240 13f5 	movw	r3, #501	; 0x1f5
 80099ba:	4298      	cmp	r0, r3
 80099bc:	d0be      	beq.n	800993c <_rclc_take_new_data+0x44>
 80099be:	f000 febb 	bl	800a738 <rcutils_reset_error>
 80099c2:	e7bb      	b.n	800993c <_rclc_take_new_data+0x44>
 80099c4:	6840      	ldr	r0, [r0, #4]
 80099c6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d17d      	bne.n	8009aca <_rclc_take_new_data+0x1d2>
 80099ce:	69c3      	ldr	r3, [r0, #28]
 80099d0:	b11b      	cbz	r3, 80099da <_rclc_take_new_data+0xe2>
 80099d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d144      	bne.n	8009a64 <_rclc_take_new_data+0x16c>
 80099da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f040 80ac 	bne.w	8009b3c <_rclc_take_new_data+0x244>
 80099e4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0a6      	beq.n	800993a <_rclc_take_new_data+0x42>
 80099ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80099ee:	a90a      	add	r1, sp, #40	; 0x28
 80099f0:	3010      	adds	r0, #16
 80099f2:	f007 fd0d 	bl	8011410 <rcl_action_take_result_response>
 80099f6:	4605      	mov	r5, r0
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d1e0      	bne.n	80099be <_rclc_take_new_data+0xc6>
 80099fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009a00:	6860      	ldr	r0, [r4, #4]
 8009a02:	f008 f967 	bl	8011cd4 <rclc_action_find_handle_by_result_request_sequence_number>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d098      	beq.n	800993c <_rclc_take_new_data+0x44>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8009a10:	e794      	b.n	800993c <_rclc_take_new_data+0x44>
 8009a12:	250b      	movs	r5, #11
 8009a14:	4628      	mov	r0, r5
 8009a16:	b01b      	add	sp, #108	; 0x6c
 8009a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a1a:	ae04      	add	r6, sp, #16
 8009a1c:	aa0a      	add	r2, sp, #40	; 0x28
 8009a1e:	3010      	adds	r0, #16
 8009a20:	4631      	mov	r1, r6
 8009a22:	f007 ff67 	bl	80118f4 <rcl_action_take_cancel_request>
 8009a26:	4605      	mov	r5, r0
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d1c8      	bne.n	80099be <_rclc_take_new_data+0xc6>
 8009a2c:	6860      	ldr	r0, [r4, #4]
 8009a2e:	a90a      	add	r1, sp, #40	; 0x28
 8009a30:	f008 f90e 	bl	8011c50 <rclc_action_find_goal_handle_by_uuid>
 8009a34:	4607      	mov	r7, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f000 80bb 	beq.w	8009bb2 <_rclc_take_new_data+0x2ba>
 8009a3c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009a40:	2101      	movs	r1, #1
 8009a42:	f008 f88f 	bl	8011b64 <rcl_action_transition_goal_state>
 8009a46:	2803      	cmp	r0, #3
 8009a48:	4684      	mov	ip, r0
 8009a4a:	f040 80a7 	bne.w	8009b9c <_rclc_take_new_data+0x2a4>
 8009a4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009a50:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a56:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009a5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8009a5e:	f887 c008 	strb.w	ip, [r7, #8]
 8009a62:	e76b      	b.n	800993c <_rclc_take_new_data+0x44>
 8009a64:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009a66:	3010      	adds	r0, #16
 8009a68:	f007 fd52 	bl	8011510 <rcl_action_take_feedback>
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d1a5      	bne.n	80099be <_rclc_take_new_data+0xc6>
 8009a72:	6860      	ldr	r0, [r4, #4]
 8009a74:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009a76:	f008 f8eb 	bl	8011c50 <rclc_action_find_goal_handle_by_uuid>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f000 80a3 	beq.w	8009bc8 <_rclc_take_new_data+0x2d0>
 8009a82:	2201      	movs	r2, #1
 8009a84:	6860      	ldr	r0, [r4, #4]
 8009a86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8009a8a:	e7a6      	b.n	80099da <_rclc_take_new_data+0xe2>
 8009a8c:	f008 f8ba 	bl	8011c04 <rclc_action_take_goal_handle>
 8009a90:	4606      	mov	r6, r0
 8009a92:	6860      	ldr	r0, [r4, #4]
 8009a94:	2e00      	cmp	r6, #0
 8009a96:	f43f af47 	beq.w	8009928 <_rclc_take_new_data+0x30>
 8009a9a:	6070      	str	r0, [r6, #4]
 8009a9c:	69f2      	ldr	r2, [r6, #28]
 8009a9e:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009aa2:	3010      	adds	r0, #16
 8009aa4:	f007 fe70 	bl	8011788 <rcl_action_take_goal_request>
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f040 808e 	bne.w	8009bcc <_rclc_take_new_data+0x2d4>
 8009ab0:	69f7      	ldr	r7, [r6, #28]
 8009ab2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ab4:	7235      	strb	r5, [r6, #8]
 8009ab6:	f8c6 0009 	str.w	r0, [r6, #9]
 8009aba:	f8c6 100d 	str.w	r1, [r6, #13]
 8009abe:	6860      	ldr	r0, [r4, #4]
 8009ac0:	f8c6 2011 	str.w	r2, [r6, #17]
 8009ac4:	f8c6 3015 	str.w	r3, [r6, #21]
 8009ac8:	e72e      	b.n	8009928 <_rclc_take_new_data+0x30>
 8009aca:	aa04      	add	r2, sp, #16
 8009acc:	a90a      	add	r1, sp, #40	; 0x28
 8009ace:	3010      	adds	r0, #16
 8009ad0:	f007 fc26 	bl	8011320 <rcl_action_take_goal_response>
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f47f af71 	bne.w	80099be <_rclc_take_new_data+0xc6>
 8009adc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ae0:	6860      	ldr	r0, [r4, #4]
 8009ae2:	f008 f8e5 	bl	8011cb0 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009ae6:	b130      	cbz	r0, 8009af6 <_rclc_take_new_data+0x1fe>
 8009ae8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009aec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009af0:	2201      	movs	r2, #1
 8009af2:	f880 2020 	strb.w	r2, [r0, #32]
 8009af6:	6860      	ldr	r0, [r4, #4]
 8009af8:	e769      	b.n	80099ce <_rclc_take_new_data+0xd6>
 8009afa:	aa04      	add	r2, sp, #16
 8009afc:	3010      	adds	r0, #16
 8009afe:	a90a      	add	r1, sp, #40	; 0x28
 8009b00:	f007 feb8 	bl	8011874 <rcl_action_take_result_request>
 8009b04:	4605      	mov	r5, r0
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f47f af59 	bne.w	80099be <_rclc_take_new_data+0xc6>
 8009b0c:	6860      	ldr	r0, [r4, #4]
 8009b0e:	a904      	add	r1, sp, #16
 8009b10:	f008 f89e 	bl	8011c50 <rclc_action_find_goal_handle_by_uuid>
 8009b14:	4607      	mov	r7, r0
 8009b16:	b160      	cbz	r0, 8009b32 <_rclc_take_new_data+0x23a>
 8009b18:	ad0a      	add	r5, sp, #40	; 0x28
 8009b1a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8009b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009b22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b26:	f04f 0c02 	mov.w	ip, #2
 8009b2a:	e886 0003 	stmia.w	r6, {r0, r1}
 8009b2e:	f887 c008 	strb.w	ip, [r7, #8]
 8009b32:	6860      	ldr	r0, [r4, #4]
 8009b34:	2300      	movs	r3, #0
 8009b36:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8009b3a:	e6fa      	b.n	8009932 <_rclc_take_new_data+0x3a>
 8009b3c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8009b40:	a90a      	add	r1, sp, #40	; 0x28
 8009b42:	3010      	adds	r0, #16
 8009b44:	f007 fca4 	bl	8011490 <rcl_action_take_cancel_response>
 8009b48:	4605      	mov	r5, r0
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f47f af37 	bne.w	80099be <_rclc_take_new_data+0xc6>
 8009b50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009b54:	6860      	ldr	r0, [r4, #4]
 8009b56:	f008 f8cf 	bl	8011cf8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	6860      	ldr	r0, [r4, #4]
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	f43f af40 	beq.w	80099e4 <_rclc_take_new_data+0xec>
 8009b64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b66:	2701      	movs	r7, #1
 8009b68:	84b7      	strh	r7, [r6, #36]	; 0x24
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f43f af3a 	beq.w	80099e4 <_rclc_take_new_data+0xec>
 8009b70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b72:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009b76:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b7a:	f008 f869 	bl	8011c50 <rclc_action_find_goal_handle_by_uuid>
 8009b7e:	b138      	cbz	r0, 8009b90 <_rclc_take_new_data+0x298>
 8009b80:	6860      	ldr	r0, [r4, #4]
 8009b82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b84:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8009b88:	3501      	adds	r5, #1
 8009b8a:	42ab      	cmp	r3, r5
 8009b8c:	d8f0      	bhi.n	8009b70 <_rclc_take_new_data+0x278>
 8009b8e:	e729      	b.n	80099e4 <_rclc_take_new_data+0xec>
 8009b90:	6860      	ldr	r0, [r4, #4]
 8009b92:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b94:	3501      	adds	r5, #1
 8009b96:	42ab      	cmp	r3, r5
 8009b98:	d8ea      	bhi.n	8009b70 <_rclc_take_new_data+0x278>
 8009b9a:	e723      	b.n	80099e4 <_rclc_take_new_data+0xec>
 8009b9c:	ab06      	add	r3, sp, #24
 8009b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ba0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009ba4:	2103      	movs	r1, #3
 8009ba6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009baa:	6860      	ldr	r0, [r4, #4]
 8009bac:	f008 f918 	bl	8011de0 <rclc_action_server_goal_cancel_reject>
 8009bb0:	e6c4      	b.n	800993c <_rclc_take_new_data+0x44>
 8009bb2:	ab06      	add	r3, sp, #24
 8009bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009bb6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009bba:	2102      	movs	r1, #2
 8009bbc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009bc0:	6860      	ldr	r0, [r4, #4]
 8009bc2:	f008 f90d 	bl	8011de0 <rclc_action_server_goal_cancel_reject>
 8009bc6:	e6b9      	b.n	800993c <_rclc_take_new_data+0x44>
 8009bc8:	6860      	ldr	r0, [r4, #4]
 8009bca:	e706      	b.n	80099da <_rclc_take_new_data+0xe2>
 8009bcc:	6860      	ldr	r0, [r4, #4]
 8009bce:	4631      	mov	r1, r6
 8009bd0:	f008 f828 	bl	8011c24 <rclc_action_remove_used_goal_handle>
 8009bd4:	f000 fdb0 	bl	800a738 <rcutils_reset_error>
 8009bd8:	e6b0      	b.n	800993c <_rclc_take_new_data+0x44>
 8009bda:	2501      	movs	r5, #1
 8009bdc:	e6ae      	b.n	800993c <_rclc_take_new_data+0x44>
 8009bde:	bf00      	nop

08009be0 <_rclc_execute.part.0>:
 8009be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be2:	7803      	ldrb	r3, [r0, #0]
 8009be4:	b087      	sub	sp, #28
 8009be6:	4604      	mov	r4, r0
 8009be8:	2b0a      	cmp	r3, #10
 8009bea:	f200 8136 	bhi.w	8009e5a <_rclc_execute.part.0+0x27a>
 8009bee:	e8df f003 	tbb	[pc, r3]
 8009bf2:	435e      	.short	0x435e
 8009bf4:	06a1664f 	.word	0x06a1664f
 8009bf8:	6c1e0606 	.word	0x6c1e0606
 8009bfc:	59          	.byte	0x59
 8009bfd:	00          	.byte	0x00
 8009bfe:	2b06      	cmp	r3, #6
 8009c00:	f000 8122 	beq.w	8009e48 <_rclc_execute.part.0+0x268>
 8009c04:	2b07      	cmp	r3, #7
 8009c06:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009c08:	f040 8118 	bne.w	8009e3c <_rclc_execute.part.0+0x25c>
 8009c0c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8009c10:	6880      	ldr	r0, [r0, #8]
 8009c12:	4798      	blx	r3
 8009c14:	f104 0110 	add.w	r1, r4, #16
 8009c18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009c1a:	6860      	ldr	r0, [r4, #4]
 8009c1c:	f006 fa3c 	bl	8010098 <rcl_send_response>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d033      	beq.n	8009c8c <_rclc_execute.part.0+0xac>
 8009c24:	9005      	str	r0, [sp, #20]
 8009c26:	f000 fd87 	bl	800a738 <rcutils_reset_error>
 8009c2a:	9805      	ldr	r0, [sp, #20]
 8009c2c:	e02e      	b.n	8009c8c <_rclc_execute.part.0+0xac>
 8009c2e:	6840      	ldr	r0, [r0, #4]
 8009c30:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8086 	beq.w	8009d46 <_rclc_execute.part.0+0x166>
 8009c3a:	2600      	movs	r6, #0
 8009c3c:	2701      	movs	r7, #1
 8009c3e:	e004      	b.n	8009c4a <_rclc_execute.part.0+0x6a>
 8009c40:	f007 ffba 	bl	8011bb8 <rclc_action_send_result_request>
 8009c44:	b998      	cbnz	r0, 8009c6e <_rclc_execute.part.0+0x8e>
 8009c46:	722f      	strb	r7, [r5, #8]
 8009c48:	6860      	ldr	r0, [r4, #4]
 8009c4a:	f008 f867 	bl	8011d1c <rclc_action_find_first_handle_with_goal_response>
 8009c4e:	4605      	mov	r5, r0
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d077      	beq.n	8009d44 <_rclc_execute.part.0+0x164>
 8009c54:	6863      	ldr	r3, [r4, #4]
 8009c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009c5e:	f885 6020 	strb.w	r6, [r5, #32]
 8009c62:	4798      	blx	r3
 8009c64:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009c68:	4628      	mov	r0, r5
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e8      	bne.n	8009c40 <_rclc_execute.part.0+0x60>
 8009c6e:	6860      	ldr	r0, [r4, #4]
 8009c70:	4629      	mov	r1, r5
 8009c72:	f007 ffd7 	bl	8011c24 <rclc_action_remove_used_goal_handle>
 8009c76:	e7e7      	b.n	8009c48 <_rclc_execute.part.0+0x68>
 8009c78:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009c7c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	f000 80c9 	beq.w	8009e18 <_rclc_execute.part.0+0x238>
 8009c86:	6880      	ldr	r0, [r0, #8]
 8009c88:	4798      	blx	r3
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	b007      	add	sp, #28
 8009c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c90:	6840      	ldr	r0, [r0, #4]
 8009c92:	f006 fc03 	bl	801049c <rcl_timer_call>
 8009c96:	f240 3321 	movw	r3, #801	; 0x321
 8009c9a:	4298      	cmp	r0, r3
 8009c9c:	d004      	beq.n	8009ca8 <_rclc_execute.part.0+0xc8>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d0f4      	beq.n	8009c8c <_rclc_execute.part.0+0xac>
 8009ca2:	e7bf      	b.n	8009c24 <_rclc_execute.part.0+0x44>
 8009ca4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009ca6:	4798      	blx	r3
 8009ca8:	2000      	movs	r0, #0
 8009caa:	b007      	add	sp, #28
 8009cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cae:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009cb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009cb4:	b925      	cbnz	r5, 8009cc0 <_rclc_execute.part.0+0xe0>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	4798      	blx	r3
 8009cba:	4628      	mov	r0, r5
 8009cbc:	e7e6      	b.n	8009c8c <_rclc_execute.part.0+0xac>
 8009cbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009cc0:	68a0      	ldr	r0, [r4, #8]
 8009cc2:	4798      	blx	r3
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	b007      	add	sp, #28
 8009cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cca:	6840      	ldr	r0, [r0, #4]
 8009ccc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009cd0:	bb3b      	cbnz	r3, 8009d22 <_rclc_execute.part.0+0x142>
 8009cd2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d07b      	beq.n	8009dd2 <_rclc_execute.part.0+0x1f2>
 8009cda:	f640 0634 	movw	r6, #2100	; 0x834
 8009cde:	2701      	movs	r7, #1
 8009ce0:	e007      	b.n	8009cf2 <_rclc_execute.part.0+0x112>
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f008 f832 	bl	8011d4c <rclc_action_server_response_goal_request>
 8009ce8:	6860      	ldr	r0, [r4, #4]
 8009cea:	4629      	mov	r1, r5
 8009cec:	f007 ff9a 	bl	8011c24 <rclc_action_remove_used_goal_handle>
 8009cf0:	6860      	ldr	r0, [r4, #4]
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	f007 ffc4 	bl	8011c80 <rclc_action_find_first_handle_by_status>
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d066      	beq.n	8009dcc <_rclc_execute.part.0+0x1ec>
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	4798      	blx	r3
 8009d06:	42b0      	cmp	r0, r6
 8009d08:	f04f 0100 	mov.w	r1, #0
 8009d0c:	d1e9      	bne.n	8009ce2 <_rclc_execute.part.0+0x102>
 8009d0e:	2101      	movs	r1, #1
 8009d10:	4628      	mov	r0, r5
 8009d12:	f008 f81b 	bl	8011d4c <rclc_action_server_response_goal_request>
 8009d16:	722f      	strb	r7, [r5, #8]
 8009d18:	e7ea      	b.n	8009cf0 <_rclc_execute.part.0+0x110>
 8009d1a:	6848      	ldr	r0, [r1, #4]
 8009d1c:	f007 ff82 	bl	8011c24 <rclc_action_remove_used_goal_handle>
 8009d20:	6860      	ldr	r0, [r4, #4]
 8009d22:	f007 ffb9 	bl	8011c98 <rclc_action_find_first_terminated_handle>
 8009d26:	4601      	mov	r1, r0
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d1f6      	bne.n	8009d1a <_rclc_execute.part.0+0x13a>
 8009d2c:	6860      	ldr	r0, [r4, #4]
 8009d2e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8009d32:	e7ce      	b.n	8009cd2 <_rclc_execute.part.0+0xf2>
 8009d34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009d36:	6880      	ldr	r0, [r0, #8]
 8009d38:	f104 0110 	add.w	r1, r4, #16
 8009d3c:	4798      	blx	r3
 8009d3e:	2000      	movs	r0, #0
 8009d40:	b007      	add	sp, #28
 8009d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d44:	6860      	ldr	r0, [r4, #4]
 8009d46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009d4a:	b18b      	cbz	r3, 8009d70 <_rclc_execute.part.0+0x190>
 8009d4c:	68c5      	ldr	r5, [r0, #12]
 8009d4e:	b32d      	cbz	r5, 8009d9c <_rclc_execute.part.0+0x1bc>
 8009d50:	2600      	movs	r6, #0
 8009d52:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009d56:	b143      	cbz	r3, 8009d6a <_rclc_execute.part.0+0x18a>
 8009d58:	69c3      	ldr	r3, [r0, #28]
 8009d5a:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8009d5e:	b123      	cbz	r3, 8009d6a <_rclc_execute.part.0+0x18a>
 8009d60:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009d62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009d64:	4628      	mov	r0, r5
 8009d66:	4798      	blx	r3
 8009d68:	6860      	ldr	r0, [r4, #4]
 8009d6a:	682d      	ldr	r5, [r5, #0]
 8009d6c:	2d00      	cmp	r5, #0
 8009d6e:	d1f0      	bne.n	8009d52 <_rclc_execute.part.0+0x172>
 8009d70:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009d74:	b193      	cbz	r3, 8009d9c <_rclc_execute.part.0+0x1bc>
 8009d76:	68c5      	ldr	r5, [r0, #12]
 8009d78:	b185      	cbz	r5, 8009d9c <_rclc_execute.part.0+0x1bc>
 8009d7a:	2600      	movs	r6, #0
 8009d7c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8009d80:	b14b      	cbz	r3, 8009d96 <_rclc_execute.part.0+0x1b6>
 8009d82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d84:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8009d88:	b12b      	cbz	r3, 8009d96 <_rclc_execute.part.0+0x1b6>
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8009d90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009d92:	4798      	blx	r3
 8009d94:	6860      	ldr	r0, [r4, #4]
 8009d96:	682d      	ldr	r5, [r5, #0]
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	d1ef      	bne.n	8009d7c <_rclc_execute.part.0+0x19c>
 8009d9c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d081      	beq.n	8009ca8 <_rclc_execute.part.0+0xc8>
 8009da4:	2700      	movs	r7, #0
 8009da6:	e00b      	b.n	8009dc0 <_rclc_execute.part.0+0x1e0>
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009dae:	6a1e      	ldr	r6, [r3, #32]
 8009db0:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8009db4:	47b0      	blx	r6
 8009db6:	6860      	ldr	r0, [r4, #4]
 8009db8:	4629      	mov	r1, r5
 8009dba:	f007 ff33 	bl	8011c24 <rclc_action_remove_used_goal_handle>
 8009dbe:	6860      	ldr	r0, [r4, #4]
 8009dc0:	f007 ffb8 	bl	8011d34 <rclc_action_find_first_handle_with_result_response>
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d1ee      	bne.n	8009da8 <_rclc_execute.part.0+0x1c8>
 8009dca:	e76d      	b.n	8009ca8 <_rclc_execute.part.0+0xc8>
 8009dcc:	6860      	ldr	r0, [r4, #4]
 8009dce:	f880 5020 	strb.w	r5, [r0, #32]
 8009dd2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f43f af66 	beq.w	8009ca8 <_rclc_execute.part.0+0xc8>
 8009ddc:	68c5      	ldr	r5, [r0, #12]
 8009dde:	b1b5      	cbz	r5, 8009e0e <_rclc_execute.part.0+0x22e>
 8009de0:	2602      	movs	r6, #2
 8009de2:	e001      	b.n	8009de8 <_rclc_execute.part.0+0x208>
 8009de4:	682d      	ldr	r5, [r5, #0]
 8009de6:	b195      	cbz	r5, 8009e0e <_rclc_execute.part.0+0x22e>
 8009de8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d1f9      	bne.n	8009de4 <_rclc_execute.part.0+0x204>
 8009df0:	69c3      	ldr	r3, [r0, #28]
 8009df2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009df4:	4628      	mov	r0, r5
 8009df6:	4798      	blx	r3
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8009e04:	b163      	cbz	r3, 8009e20 <_rclc_execute.part.0+0x240>
 8009e06:	f007 ffbf 	bl	8011d88 <rclc_action_server_goal_cancel_accept>
 8009e0a:	6860      	ldr	r0, [r4, #4]
 8009e0c:	e7ea      	b.n	8009de4 <_rclc_execute.part.0+0x204>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009e14:	4618      	mov	r0, r3
 8009e16:	e739      	b.n	8009c8c <_rclc_execute.part.0+0xac>
 8009e18:	4628      	mov	r0, r5
 8009e1a:	4798      	blx	r3
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e735      	b.n	8009c8c <_rclc_execute.part.0+0xac>
 8009e20:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009e22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009e26:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8009e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e2e:	6860      	ldr	r0, [r4, #4]
 8009e30:	2101      	movs	r1, #1
 8009e32:	f007 ffd5 	bl	8011de0 <rclc_action_server_goal_cancel_reject>
 8009e36:	722e      	strb	r6, [r5, #8]
 8009e38:	6860      	ldr	r0, [r4, #4]
 8009e3a:	e7d3      	b.n	8009de4 <_rclc_execute.part.0+0x204>
 8009e3c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009e3e:	6880      	ldr	r0, [r0, #8]
 8009e40:	4798      	blx	r3
 8009e42:	f104 0110 	add.w	r1, r4, #16
 8009e46:	e6e7      	b.n	8009c18 <_rclc_execute.part.0+0x38>
 8009e48:	f100 0110 	add.w	r1, r0, #16
 8009e4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009e4e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009e50:	6880      	ldr	r0, [r0, #8]
 8009e52:	9105      	str	r1, [sp, #20]
 8009e54:	4798      	blx	r3
 8009e56:	9905      	ldr	r1, [sp, #20]
 8009e58:	e6de      	b.n	8009c18 <_rclc_execute.part.0+0x38>
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	e716      	b.n	8009c8c <_rclc_execute.part.0+0xac>
 8009e5e:	bf00      	nop

08009e60 <rclc_executor_trigger_any>:
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d03f      	beq.n	8009ee4 <rclc_executor_trigger_any+0x84>
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d03e      	beq.n	8009ee6 <rclc_executor_trigger_any+0x86>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d037      	beq.n	8009ee4 <rclc_executor_trigger_any+0x84>
 8009e74:	b430      	push	{r4, r5}
 8009e76:	f893 c000 	ldrb.w	ip, [r3]
 8009e7a:	f1bc 0f08 	cmp.w	ip, #8
 8009e7e:	d11e      	bne.n	8009ebe <rclc_executor_trigger_any+0x5e>
 8009e80:	685c      	ldr	r4, [r3, #4]
 8009e82:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009e84:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8009e88:	d105      	bne.n	8009e96 <rclc_executor_trigger_any+0x36>
 8009e8a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8009e8e:	b910      	cbnz	r0, 8009e96 <rclc_executor_trigger_any+0x36>
 8009e90:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8009e94:	b128      	cbz	r0, 8009ea2 <rclc_executor_trigger_any+0x42>
 8009e96:	bc30      	pop	{r4, r5}
 8009e98:	4770      	bx	lr
 8009e9a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1f9      	bne.n	8009e96 <rclc_executor_trigger_any+0x36>
 8009ea2:	3201      	adds	r2, #1
 8009ea4:	4291      	cmp	r1, r2
 8009ea6:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009eaa:	d018      	beq.n	8009ede <rclc_executor_trigger_any+0x7e>
 8009eac:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d0f0      	beq.n	8009e96 <rclc_executor_trigger_any+0x36>
 8009eb4:	f893 c000 	ldrb.w	ip, [r3]
 8009eb8:	f1bc 0f08 	cmp.w	ip, #8
 8009ebc:	d0e0      	beq.n	8009e80 <rclc_executor_trigger_any+0x20>
 8009ebe:	f1bc 0f09 	cmp.w	ip, #9
 8009ec2:	d1ea      	bne.n	8009e9a <rclc_executor_trigger_any+0x3a>
 8009ec4:	685c      	ldr	r4, [r3, #4]
 8009ec6:	6a25      	ldr	r5, [r4, #32]
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	d1e4      	bne.n	8009e96 <rclc_executor_trigger_any+0x36>
 8009ecc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d1e0      	bne.n	8009e96 <rclc_executor_trigger_any+0x36>
 8009ed4:	3201      	adds	r2, #1
 8009ed6:	4291      	cmp	r1, r2
 8009ed8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009edc:	d1e6      	bne.n	8009eac <rclc_executor_trigger_any+0x4c>
 8009ede:	2000      	movs	r0, #0
 8009ee0:	bc30      	pop	{r4, r5}
 8009ee2:	4770      	bx	lr
 8009ee4:	4770      	bx	lr
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop

08009eec <rclc_executor_get_zero_initialized_executor>:
 8009eec:	b510      	push	{r4, lr}
 8009eee:	4903      	ldr	r1, [pc, #12]	; (8009efc <rclc_executor_get_zero_initialized_executor+0x10>)
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	2288      	movs	r2, #136	; 0x88
 8009ef4:	f00c fd09 	bl	801690a <memcpy>
 8009ef8:	4620      	mov	r0, r4
 8009efa:	bd10      	pop	{r4, pc}
 8009efc:	080178f8 	.word	0x080178f8

08009f00 <rclc_executor_init>:
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d05f      	beq.n	8009fc4 <rclc_executor_init+0xc4>
 8009f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f08:	460c      	mov	r4, r1
 8009f0a:	b0b0      	sub	sp, #192	; 0xc0
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d051      	beq.n	8009fb4 <rclc_executor_init+0xb4>
 8009f10:	4605      	mov	r5, r0
 8009f12:	4618      	mov	r0, r3
 8009f14:	4616      	mov	r6, r2
 8009f16:	461f      	mov	r7, r3
 8009f18:	f000 fbea 	bl	800a6f0 <rcutils_allocator_is_valid>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d049      	beq.n	8009fb4 <rclc_executor_init+0xb4>
 8009f20:	2e00      	cmp	r6, #0
 8009f22:	d047      	beq.n	8009fb4 <rclc_executor_init+0xb4>
 8009f24:	492c      	ldr	r1, [pc, #176]	; (8009fd8 <rclc_executor_init+0xd8>)
 8009f26:	2288      	movs	r2, #136	; 0x88
 8009f28:	a80e      	add	r0, sp, #56	; 0x38
 8009f2a:	f00c fcee 	bl	801690a <memcpy>
 8009f2e:	a90e      	add	r1, sp, #56	; 0x38
 8009f30:	2288      	movs	r2, #136	; 0x88
 8009f32:	4628      	mov	r0, r5
 8009f34:	f00c fce9 	bl	801690a <memcpy>
 8009f38:	602c      	str	r4, [r5, #0]
 8009f3a:	4668      	mov	r0, sp
 8009f3c:	60ae      	str	r6, [r5, #8]
 8009f3e:	466c      	mov	r4, sp
 8009f40:	f006 fc1e 	bl	8010780 <rcl_get_zero_initialized_wait_set>
 8009f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f46:	f105 0c14 	add.w	ip, r5, #20
 8009f4a:	f8d7 8000 	ldr.w	r8, [r7]
 8009f4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f5e:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8009fd0 <rclc_executor_init+0xd0>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	f8cc 3000 	str.w	r3, [ip]
 8009f68:	6939      	ldr	r1, [r7, #16]
 8009f6a:	612f      	str	r7, [r5, #16]
 8009f6c:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8009f70:	01b0      	lsls	r0, r6, #6
 8009f72:	47c0      	blx	r8
 8009f74:	6068      	str	r0, [r5, #4]
 8009f76:	b338      	cbz	r0, 8009fc8 <rclc_executor_init+0xc8>
 8009f78:	2400      	movs	r4, #0
 8009f7a:	e000      	b.n	8009f7e <rclc_executor_init+0x7e>
 8009f7c:	6868      	ldr	r0, [r5, #4]
 8009f7e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009f82:	4631      	mov	r1, r6
 8009f84:	3401      	adds	r4, #1
 8009f86:	f000 fa6b 	bl	800a460 <rclc_executor_handle_init>
 8009f8a:	42a6      	cmp	r6, r4
 8009f8c:	d1f6      	bne.n	8009f7c <rclc_executor_init+0x7c>
 8009f8e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8009f92:	f000 fa5b 	bl	800a44c <rclc_executor_handle_counters_zero_init>
 8009f96:	4a11      	ldr	r2, [pc, #68]	; (8009fdc <rclc_executor_init+0xdc>)
 8009f98:	686b      	ldr	r3, [r5, #4]
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 8009fa0:	b163      	cbz	r3, 8009fbc <rclc_executor_init+0xbc>
 8009fa2:	692b      	ldr	r3, [r5, #16]
 8009fa4:	b153      	cbz	r3, 8009fbc <rclc_executor_init+0xbc>
 8009fa6:	68ab      	ldr	r3, [r5, #8]
 8009fa8:	b143      	cbz	r3, 8009fbc <rclc_executor_init+0xbc>
 8009faa:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 8009fae:	b030      	add	sp, #192	; 0xc0
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	200b      	movs	r0, #11
 8009fb6:	b030      	add	sp, #192	; 0xc0
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	b030      	add	sp, #192	; 0xc0
 8009fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc4:	200b      	movs	r0, #11
 8009fc6:	4770      	bx	lr
 8009fc8:	200a      	movs	r0, #10
 8009fca:	e7f4      	b.n	8009fb6 <rclc_executor_init+0xb6>
 8009fcc:	f3af 8000 	nop.w
 8009fd0:	3b9aca00 	.word	0x3b9aca00
 8009fd4:	00000000 	.word	0x00000000
 8009fd8:	080178f8 	.word	0x080178f8
 8009fdc:	08009e61 	.word	0x08009e61

08009fe0 <rclc_executor_add_subscription>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009fe6:	b338      	cbz	r0, 800a038 <rclc_executor_add_subscription+0x58>
 8009fe8:	b331      	cbz	r1, 800a038 <rclc_executor_add_subscription+0x58>
 8009fea:	b32a      	cbz	r2, 800a038 <rclc_executor_add_subscription+0x58>
 8009fec:	b323      	cbz	r3, 800a038 <rclc_executor_add_subscription+0x58>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009ff4:	42a8      	cmp	r0, r5
 8009ff6:	d301      	bcc.n	8009ffc <rclc_executor_add_subscription+0x1c>
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ffc:	6866      	ldr	r6, [r4, #4]
 8009ffe:	0187      	lsls	r7, r0, #6
 800a000:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a004:	2500      	movs	r5, #0
 800a006:	55f5      	strb	r5, [r6, r7]
 800a008:	3001      	adds	r0, #1
 800a00a:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800a00e:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 800a012:	2301      	movs	r3, #1
 800a014:	f104 0514 	add.w	r5, r4, #20
 800a018:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a01c:	f88c e001 	strb.w	lr, [ip, #1]
 800a020:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 800a024:	60e0      	str	r0, [r4, #12]
 800a026:	4628      	mov	r0, r5
 800a028:	f006 fbbe 	bl	80107a8 <rcl_wait_set_is_valid>
 800a02c:	b930      	cbnz	r0, 800a03c <rclc_executor_add_subscription+0x5c>
 800a02e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a030:	3301      	adds	r3, #1
 800a032:	2000      	movs	r0, #0
 800a034:	64a3      	str	r3, [r4, #72]	; 0x48
 800a036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a038:	200b      	movs	r0, #11
 800a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a03c:	4628      	mov	r0, r5
 800a03e:	f006 fbb9 	bl	80107b4 <rcl_wait_set_fini>
 800a042:	2800      	cmp	r0, #0
 800a044:	d0f3      	beq.n	800a02e <rclc_executor_add_subscription+0x4e>
 800a046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a048 <rclc_executor_prepare>:
 800a048:	2800      	cmp	r0, #0
 800a04a:	d044      	beq.n	800a0d6 <rclc_executor_prepare+0x8e>
 800a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04e:	f100 0514 	add.w	r5, r0, #20
 800a052:	b09b      	sub	sp, #108	; 0x6c
 800a054:	4604      	mov	r4, r0
 800a056:	4628      	mov	r0, r5
 800a058:	f006 fba6 	bl	80107a8 <rcl_wait_set_is_valid>
 800a05c:	b110      	cbz	r0, 800a064 <rclc_executor_prepare+0x1c>
 800a05e:	2000      	movs	r0, #0
 800a060:	b01b      	add	sp, #108	; 0x6c
 800a062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a064:	4628      	mov	r0, r5
 800a066:	f006 fba5 	bl	80107b4 <rcl_wait_set_fini>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d130      	bne.n	800a0d0 <rclc_executor_prepare+0x88>
 800a06e:	a80c      	add	r0, sp, #48	; 0x30
 800a070:	f006 fb86 	bl	8010780 <rcl_get_zero_initialized_wait_set>
 800a074:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800a078:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a07c:	46ae      	mov	lr, r5
 800a07e:	6927      	ldr	r7, [r4, #16]
 800a080:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a088:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a08c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a090:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a094:	f8dc 3000 	ldr.w	r3, [ip]
 800a098:	f8ce 3000 	str.w	r3, [lr]
 800a09c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a09e:	ae04      	add	r6, sp, #16
 800a0a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6822      	ldr	r2, [r4, #0]
 800a0a6:	6033      	str	r3, [r6, #0]
 800a0a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0aa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a0ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a0b0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800a0b4:	e9cd 2100 	strd	r2, r1, [sp]
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a0bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a0be:	f006 fe77 	bl	8010db0 <rcl_wait_set_init>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d0cc      	beq.n	800a060 <rclc_executor_prepare+0x18>
 800a0c6:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0c8:	f000 fb36 	bl	800a738 <rcutils_reset_error>
 800a0cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a0ce:	e7c7      	b.n	800a060 <rclc_executor_prepare+0x18>
 800a0d0:	f000 fb32 	bl	800a738 <rcutils_reset_error>
 800a0d4:	e7cb      	b.n	800a06e <rclc_executor_prepare+0x26>
 800a0d6:	200b      	movs	r0, #11
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop

0800a0dc <rclc_executor_spin_some.part.0>:
 800a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	f100 0614 	add.w	r6, r0, #20
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	4691      	mov	r9, r2
 800a0e8:	4698      	mov	r8, r3
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	f7ff ffac 	bl	800a048 <rclc_executor_prepare>
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f006 fc2b 	bl	801094c <rcl_wait_set_clear>
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	f040 80ed 	bne.w	800a2d8 <rclc_executor_spin_some.part.0+0x1fc>
 800a0fe:	68ab      	ldr	r3, [r5, #8]
 800a100:	4604      	mov	r4, r0
 800a102:	b303      	cbz	r3, 800a146 <rclc_executor_spin_some.part.0+0x6a>
 800a104:	6869      	ldr	r1, [r5, #4]
 800a106:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a10a:	01a2      	lsls	r2, r4, #6
 800a10c:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800a110:	b1cb      	cbz	r3, 800a146 <rclc_executor_spin_some.part.0+0x6a>
 800a112:	5c8b      	ldrb	r3, [r1, r2]
 800a114:	2b0a      	cmp	r3, #10
 800a116:	f200 80d8 	bhi.w	800a2ca <rclc_executor_spin_some.part.0+0x1ee>
 800a11a:	e8df f003 	tbb	[pc, r3]
 800a11e:	9c9c      	.short	0x9c9c
 800a120:	068c8ca7 	.word	0x068c8ca7
 800a124:	bdc90606 	.word	0xbdc90606
 800a128:	b2          	.byte	0xb2
 800a129:	00          	.byte	0x00
 800a12a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a12e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a132:	4630      	mov	r0, r6
 800a134:	f006 ff52 	bl	8010fdc <rcl_wait_set_add_service>
 800a138:	2800      	cmp	r0, #0
 800a13a:	f040 8086 	bne.w	800a24a <rclc_executor_spin_some.part.0+0x16e>
 800a13e:	68ab      	ldr	r3, [r5, #8]
 800a140:	3401      	adds	r4, #1
 800a142:	429c      	cmp	r4, r3
 800a144:	d3de      	bcc.n	800a104 <rclc_executor_spin_some.part.0+0x28>
 800a146:	4643      	mov	r3, r8
 800a148:	464a      	mov	r2, r9
 800a14a:	4630      	mov	r0, r6
 800a14c:	f006 ff74 	bl	8011038 <rcl_wait>
 800a150:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 80c7 	beq.w	800a2e8 <rclc_executor_spin_some.part.0+0x20c>
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	f040 80b5 	bne.w	800a2ca <rclc_executor_spin_some.part.0+0x1ee>
 800a160:	68ab      	ldr	r3, [r5, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 8159 	beq.w	800a41a <rclc_executor_spin_some.part.0+0x33e>
 800a168:	2400      	movs	r4, #0
 800a16a:	46a0      	mov	r8, r4
 800a16c:	f240 1991 	movw	r9, #401	; 0x191
 800a170:	e00a      	b.n	800a188 <rclc_executor_spin_some.part.0+0xac>
 800a172:	f7ff fb73 	bl	800985c <_rclc_check_for_new_data>
 800a176:	4604      	mov	r4, r0
 800a178:	b110      	cbz	r0, 800a180 <rclc_executor_spin_some.part.0+0xa4>
 800a17a:	4548      	cmp	r0, r9
 800a17c:	f040 80b2 	bne.w	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a180:	68ab      	ldr	r3, [r5, #8]
 800a182:	4598      	cmp	r8, r3
 800a184:	f080 8126 	bcs.w	800a3d4 <rclc_executor_spin_some.part.0+0x2f8>
 800a188:	686a      	ldr	r2, [r5, #4]
 800a18a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a18e:	4631      	mov	r1, r6
 800a190:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a194:	f108 0801 	add.w	r8, r8, #1
 800a198:	f1bc 0f00 	cmp.w	ip, #0
 800a19c:	d1e9      	bne.n	800a172 <rclc_executor_spin_some.part.0+0x96>
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a1a6:	4798      	blx	r3
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f000 809b 	beq.w	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a1ae:	68ab      	ldr	r3, [r5, #8]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 8097 	beq.w	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a1b6:	f04f 0800 	mov.w	r8, #0
 800a1ba:	f240 1991 	movw	r9, #401	; 0x191
 800a1be:	e009      	b.n	800a1d4 <rclc_executor_spin_some.part.0+0xf8>
 800a1c0:	f7ff fb9a 	bl	80098f8 <_rclc_take_new_data>
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	b110      	cbz	r0, 800a1ce <rclc_executor_spin_some.part.0+0xf2>
 800a1c8:	4548      	cmp	r0, r9
 800a1ca:	f040 808b 	bne.w	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a1ce:	68ab      	ldr	r3, [r5, #8]
 800a1d0:	4598      	cmp	r8, r3
 800a1d2:	d209      	bcs.n	800a1e8 <rclc_executor_spin_some.part.0+0x10c>
 800a1d4:	6868      	ldr	r0, [r5, #4]
 800a1d6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a1da:	4631      	mov	r1, r6
 800a1dc:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a1e0:	f108 0801 	add.w	r8, r8, #1
 800a1e4:	2a00      	cmp	r2, #0
 800a1e6:	d1eb      	bne.n	800a1c0 <rclc_executor_spin_some.part.0+0xe4>
 800a1e8:	2600      	movs	r6, #0
 800a1ea:	b97b      	cbnz	r3, 800a20c <rclc_executor_spin_some.part.0+0x130>
 800a1ec:	e07a      	b.n	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a1ee:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a1f2:	2a08      	cmp	r2, #8
 800a1f4:	f000 80fd 	beq.w	800a3f2 <rclc_executor_spin_some.part.0+0x316>
 800a1f8:	2a09      	cmp	r2, #9
 800a1fa:	f000 80ef 	beq.w	800a3dc <rclc_executor_spin_some.part.0+0x300>
 800a1fe:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800a202:	b98a      	cbnz	r2, 800a228 <rclc_executor_spin_some.part.0+0x14c>
 800a204:	3601      	adds	r6, #1
 800a206:	429e      	cmp	r6, r3
 800a208:	d262      	bcs.n	800a2d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a20a:	2400      	movs	r4, #0
 800a20c:	686a      	ldr	r2, [r5, #4]
 800a20e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a212:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a216:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800a21a:	2900      	cmp	r1, #0
 800a21c:	d062      	beq.n	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a21e:	7841      	ldrb	r1, [r0, #1]
 800a220:	2900      	cmp	r1, #0
 800a222:	d0e4      	beq.n	800a1ee <rclc_executor_spin_some.part.0+0x112>
 800a224:	2901      	cmp	r1, #1
 800a226:	d1ed      	bne.n	800a204 <rclc_executor_spin_some.part.0+0x128>
 800a228:	f7ff fcda 	bl	8009be0 <_rclc_execute.part.0>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	f040 80b6 	bne.w	800a39e <rclc_executor_spin_some.part.0+0x2c2>
 800a232:	68ab      	ldr	r3, [r5, #8]
 800a234:	e7e6      	b.n	800a204 <rclc_executor_spin_some.part.0+0x128>
 800a236:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a23a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a23e:	4630      	mov	r0, r6
 800a240:	f006 fea0 	bl	8010f84 <rcl_wait_set_add_client>
 800a244:	2800      	cmp	r0, #0
 800a246:	f43f af7a 	beq.w	800a13e <rclc_executor_spin_some.part.0+0x62>
 800a24a:	9001      	str	r0, [sp, #4]
 800a24c:	f000 fa74 	bl	800a738 <rcutils_reset_error>
 800a250:	9801      	ldr	r0, [sp, #4]
 800a252:	4607      	mov	r7, r0
 800a254:	e03c      	b.n	800a2d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a256:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a25a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a25e:	4630      	mov	r0, r6
 800a260:	f006 fb48 	bl	80108f4 <rcl_wait_set_add_subscription>
 800a264:	2800      	cmp	r0, #0
 800a266:	f43f af6a 	beq.w	800a13e <rclc_executor_spin_some.part.0+0x62>
 800a26a:	e7ee      	b.n	800a24a <rclc_executor_spin_some.part.0+0x16e>
 800a26c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a270:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a274:	4630      	mov	r0, r6
 800a276:	f006 fe55 	bl	8010f24 <rcl_wait_set_add_timer>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f43f af5f 	beq.w	800a13e <rclc_executor_spin_some.part.0+0x62>
 800a280:	e7e3      	b.n	800a24a <rclc_executor_spin_some.part.0+0x16e>
 800a282:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a286:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a28a:	4630      	mov	r0, r6
 800a28c:	f006 fe1e 	bl	8010ecc <rcl_wait_set_add_guard_condition>
 800a290:	2800      	cmp	r0, #0
 800a292:	f43f af54 	beq.w	800a13e <rclc_executor_spin_some.part.0+0x62>
 800a296:	e7d8      	b.n	800a24a <rclc_executor_spin_some.part.0+0x16e>
 800a298:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a29c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a2a0:	3110      	adds	r1, #16
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f007 fb9e 	bl	80119e4 <rcl_action_wait_set_add_action_server>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f43f af48 	beq.w	800a13e <rclc_executor_spin_some.part.0+0x62>
 800a2ae:	e7cc      	b.n	800a24a <rclc_executor_spin_some.part.0+0x16e>
 800a2b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a2b4:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a2b8:	3110      	adds	r1, #16
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f007 f96b 	bl	8011598 <rcl_action_wait_set_add_action_client>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f43f af3b 	beq.w	800a13e <rclc_executor_spin_some.part.0+0x62>
 800a2c8:	e7bf      	b.n	800a24a <rclc_executor_spin_some.part.0+0x16e>
 800a2ca:	f000 fa35 	bl	800a738 <rcutils_reset_error>
 800a2ce:	2701      	movs	r7, #1
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	b003      	add	sp, #12
 800a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d8:	f000 fa2e 	bl	800a738 <rcutils_reset_error>
 800a2dc:	4638      	mov	r0, r7
 800a2de:	b003      	add	sp, #12
 800a2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e4:	4627      	mov	r7, r4
 800a2e6:	e7f3      	b.n	800a2d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a2e8:	68ab      	ldr	r3, [r5, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 8092 	beq.w	800a414 <rclc_executor_spin_some.part.0+0x338>
 800a2f0:	2400      	movs	r4, #0
 800a2f2:	46a0      	mov	r8, r4
 800a2f4:	f240 1991 	movw	r9, #401	; 0x191
 800a2f8:	e008      	b.n	800a30c <rclc_executor_spin_some.part.0+0x230>
 800a2fa:	f7ff faaf 	bl	800985c <_rclc_check_for_new_data>
 800a2fe:	4604      	mov	r4, r0
 800a300:	b108      	cbz	r0, 800a306 <rclc_executor_spin_some.part.0+0x22a>
 800a302:	4548      	cmp	r0, r9
 800a304:	d1ee      	bne.n	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a306:	68ab      	ldr	r3, [r5, #8]
 800a308:	4598      	cmp	r8, r3
 800a30a:	d265      	bcs.n	800a3d8 <rclc_executor_spin_some.part.0+0x2fc>
 800a30c:	686a      	ldr	r2, [r5, #4]
 800a30e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a312:	4631      	mov	r1, r6
 800a314:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a318:	f108 0801 	add.w	r8, r8, #1
 800a31c:	f1bc 0f00 	cmp.w	ip, #0
 800a320:	d1eb      	bne.n	800a2fa <rclc_executor_spin_some.part.0+0x21e>
 800a322:	4619      	mov	r1, r3
 800a324:	4610      	mov	r0, r2
 800a326:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a32a:	4798      	blx	r3
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d0d9      	beq.n	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a330:	68ab      	ldr	r3, [r5, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0d6      	beq.n	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	f240 1991 	movw	r9, #401	; 0x191
 800a33e:	f240 2a59 	movw	sl, #601	; 0x259
 800a342:	e00e      	b.n	800a362 <rclc_executor_spin_some.part.0+0x286>
 800a344:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d033      	beq.n	800a3b4 <rclc_executor_spin_some.part.0+0x2d8>
 800a34c:	2b09      	cmp	r3, #9
 800a34e:	d028      	beq.n	800a3a2 <rclc_executor_spin_some.part.0+0x2c6>
 800a350:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a354:	b9fb      	cbnz	r3, 800a396 <rclc_executor_spin_some.part.0+0x2ba>
 800a356:	68ab      	ldr	r3, [r5, #8]
 800a358:	f108 0801 	add.w	r8, r8, #1
 800a35c:	4598      	cmp	r8, r3
 800a35e:	d2b7      	bcs.n	800a2d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a360:	2400      	movs	r4, #0
 800a362:	6868      	ldr	r0, [r5, #4]
 800a364:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a368:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a36c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0b7      	beq.n	800a2e4 <rclc_executor_spin_some.part.0+0x208>
 800a374:	4631      	mov	r1, r6
 800a376:	f7ff fabf 	bl	80098f8 <_rclc_take_new_data>
 800a37a:	b118      	cbz	r0, 800a384 <rclc_executor_spin_some.part.0+0x2a8>
 800a37c:	4548      	cmp	r0, r9
 800a37e:	d001      	beq.n	800a384 <rclc_executor_spin_some.part.0+0x2a8>
 800a380:	4550      	cmp	r0, sl
 800a382:	d10c      	bne.n	800a39e <rclc_executor_spin_some.part.0+0x2c2>
 800a384:	686b      	ldr	r3, [r5, #4]
 800a386:	eb13 000b 	adds.w	r0, r3, fp
 800a38a:	d021      	beq.n	800a3d0 <rclc_executor_spin_some.part.0+0x2f4>
 800a38c:	7842      	ldrb	r2, [r0, #1]
 800a38e:	2a00      	cmp	r2, #0
 800a390:	d0d8      	beq.n	800a344 <rclc_executor_spin_some.part.0+0x268>
 800a392:	2a01      	cmp	r2, #1
 800a394:	d1df      	bne.n	800a356 <rclc_executor_spin_some.part.0+0x27a>
 800a396:	f7ff fc23 	bl	8009be0 <_rclc_execute.part.0>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d0db      	beq.n	800a356 <rclc_executor_spin_some.part.0+0x27a>
 800a39e:	4607      	mov	r7, r0
 800a3a0:	e796      	b.n	800a2d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a3a2:	6843      	ldr	r3, [r0, #4]
 800a3a4:	6a1a      	ldr	r2, [r3, #32]
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	d1f5      	bne.n	800a396 <rclc_executor_spin_some.part.0+0x2ba>
 800a3aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0d1      	beq.n	800a356 <rclc_executor_spin_some.part.0+0x27a>
 800a3b2:	e7f0      	b.n	800a396 <rclc_executor_spin_some.part.0+0x2ba>
 800a3b4:	6843      	ldr	r3, [r0, #4]
 800a3b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3b8:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800a3bc:	d1eb      	bne.n	800a396 <rclc_executor_spin_some.part.0+0x2ba>
 800a3be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	d1e7      	bne.n	800a396 <rclc_executor_spin_some.part.0+0x2ba>
 800a3c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0c3      	beq.n	800a356 <rclc_executor_spin_some.part.0+0x27a>
 800a3ce:	e7e2      	b.n	800a396 <rclc_executor_spin_some.part.0+0x2ba>
 800a3d0:	270b      	movs	r7, #11
 800a3d2:	e77d      	b.n	800a2d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a3d4:	686a      	ldr	r2, [r5, #4]
 800a3d6:	e6e2      	b.n	800a19e <rclc_executor_spin_some.part.0+0xc2>
 800a3d8:	686a      	ldr	r2, [r5, #4]
 800a3da:	e7a2      	b.n	800a322 <rclc_executor_spin_some.part.0+0x246>
 800a3dc:	6842      	ldr	r2, [r0, #4]
 800a3de:	6a11      	ldr	r1, [r2, #32]
 800a3e0:	2900      	cmp	r1, #0
 800a3e2:	f47f af21 	bne.w	800a228 <rclc_executor_spin_some.part.0+0x14c>
 800a3e6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	f43f af0a 	beq.w	800a204 <rclc_executor_spin_some.part.0+0x128>
 800a3f0:	e71a      	b.n	800a228 <rclc_executor_spin_some.part.0+0x14c>
 800a3f2:	6842      	ldr	r2, [r0, #4]
 800a3f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a3f6:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800a3fa:	f47f af15 	bne.w	800a228 <rclc_executor_spin_some.part.0+0x14c>
 800a3fe:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800a402:	2900      	cmp	r1, #0
 800a404:	f47f af10 	bne.w	800a228 <rclc_executor_spin_some.part.0+0x14c>
 800a408:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800a40c:	2a00      	cmp	r2, #0
 800a40e:	f43f aef9 	beq.w	800a204 <rclc_executor_spin_some.part.0+0x128>
 800a412:	e709      	b.n	800a228 <rclc_executor_spin_some.part.0+0x14c>
 800a414:	686a      	ldr	r2, [r5, #4]
 800a416:	461c      	mov	r4, r3
 800a418:	e783      	b.n	800a322 <rclc_executor_spin_some.part.0+0x246>
 800a41a:	686a      	ldr	r2, [r5, #4]
 800a41c:	461c      	mov	r4, r3
 800a41e:	e6be      	b.n	800a19e <rclc_executor_spin_some.part.0+0xc2>

0800a420 <rclc_executor_spin_some>:
 800a420:	b190      	cbz	r0, 800a448 <rclc_executor_spin_some+0x28>
 800a422:	b570      	push	{r4, r5, r6, lr}
 800a424:	4604      	mov	r4, r0
 800a426:	6800      	ldr	r0, [r0, #0]
 800a428:	4616      	mov	r6, r2
 800a42a:	461d      	mov	r5, r3
 800a42c:	f005 f81c 	bl	800f468 <rcl_context_is_valid>
 800a430:	b130      	cbz	r0, 800a440 <rclc_executor_spin_some+0x20>
 800a432:	4632      	mov	r2, r6
 800a434:	462b      	mov	r3, r5
 800a436:	4620      	mov	r0, r4
 800a438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a43c:	f7ff be4e 	b.w	800a0dc <rclc_executor_spin_some.part.0>
 800a440:	f000 f97a 	bl	800a738 <rcutils_reset_error>
 800a444:	2001      	movs	r0, #1
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	200b      	movs	r0, #11
 800a44a:	4770      	bx	lr

0800a44c <rclc_executor_handle_counters_zero_init>:
 800a44c:	b130      	cbz	r0, 800a45c <rclc_executor_handle_counters_zero_init+0x10>
 800a44e:	b508      	push	{r3, lr}
 800a450:	2220      	movs	r2, #32
 800a452:	2100      	movs	r1, #0
 800a454:	f00c f990 	bl	8016778 <memset>
 800a458:	2000      	movs	r0, #0
 800a45a:	bd08      	pop	{r3, pc}
 800a45c:	200b      	movs	r0, #11
 800a45e:	4770      	bx	lr

0800a460 <rclc_executor_handle_init>:
 800a460:	b168      	cbz	r0, 800a47e <rclc_executor_handle_init+0x1e>
 800a462:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800a488 <rclc_executor_handle_init+0x28>
 800a466:	2300      	movs	r3, #0
 800a468:	220b      	movs	r2, #11
 800a46a:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800a46e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a472:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800a476:	8002      	strh	r2, [r0, #0]
 800a478:	8703      	strh	r3, [r0, #56]	; 0x38
 800a47a:	4618      	mov	r0, r3
 800a47c:	4770      	bx	lr
 800a47e:	200b      	movs	r0, #11
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	f3af 8000 	nop.w
	...

0800a490 <rclc_support_init>:
 800a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a494:	b086      	sub	sp, #24
 800a496:	b3b8      	cbz	r0, 800a508 <rclc_support_init+0x78>
 800a498:	461c      	mov	r4, r3
 800a49a:	b3ab      	cbz	r3, 800a508 <rclc_support_init+0x78>
 800a49c:	460f      	mov	r7, r1
 800a49e:	4690      	mov	r8, r2
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	f005 f94b 	bl	800f73c <rcl_get_zero_initialized_init_options>
 800a4a6:	f104 030c 	add.w	r3, r4, #12
 800a4aa:	9005      	str	r0, [sp, #20]
 800a4ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a4b0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a4b4:	a805      	add	r0, sp, #20
 800a4b6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a4ba:	f005 f941 	bl	800f740 <rcl_init_options_init>
 800a4be:	4605      	mov	r5, r0
 800a4c0:	b9e0      	cbnz	r0, 800a4fc <rclc_support_init+0x6c>
 800a4c2:	ad02      	add	r5, sp, #8
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f004 ffc5 	bl	800f454 <rcl_get_zero_initialized_context>
 800a4ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a4ce:	4633      	mov	r3, r6
 800a4d0:	e886 0003 	stmia.w	r6, {r0, r1}
 800a4d4:	aa05      	add	r2, sp, #20
 800a4d6:	4641      	mov	r1, r8
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f005 f82b 	bl	800f534 <rcl_init>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	b9b8      	cbnz	r0, 800a512 <rclc_support_init+0x82>
 800a4e2:	60b4      	str	r4, [r6, #8]
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	f106 010c 	add.w	r1, r6, #12
 800a4ea:	2003      	movs	r0, #3
 800a4ec:	f005 ff52 	bl	8010394 <rcl_clock_init>
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	b970      	cbnz	r0, 800a512 <rclc_support_init+0x82>
 800a4f4:	a805      	add	r0, sp, #20
 800a4f6:	f005 f989 	bl	800f80c <rcl_init_options_fini>
 800a4fa:	b108      	cbz	r0, 800a500 <rclc_support_init+0x70>
 800a4fc:	f000 f91c 	bl	800a738 <rcutils_reset_error>
 800a500:	4628      	mov	r0, r5
 800a502:	b006      	add	sp, #24
 800a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a508:	250b      	movs	r5, #11
 800a50a:	4628      	mov	r0, r5
 800a50c:	b006      	add	sp, #24
 800a50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a512:	f000 f911 	bl	800a738 <rcutils_reset_error>
 800a516:	a805      	add	r0, sp, #20
 800a518:	f005 f978 	bl	800f80c <rcl_init_options_fini>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d0ef      	beq.n	800a500 <rclc_support_init+0x70>
 800a520:	e7ec      	b.n	800a4fc <rclc_support_init+0x6c>
 800a522:	bf00      	nop

0800a524 <rclc_node_init_default>:
 800a524:	b3b8      	cbz	r0, 800a596 <rclc_node_init_default+0x72>
 800a526:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a52a:	460d      	mov	r5, r1
 800a52c:	b0a1      	sub	sp, #132	; 0x84
 800a52e:	b329      	cbz	r1, 800a57c <rclc_node_init_default+0x58>
 800a530:	4616      	mov	r6, r2
 800a532:	b31a      	cbz	r2, 800a57c <rclc_node_init_default+0x58>
 800a534:	461f      	mov	r7, r3
 800a536:	b30b      	cbz	r3, 800a57c <rclc_node_init_default+0x58>
 800a538:	f10d 0810 	add.w	r8, sp, #16
 800a53c:	4604      	mov	r4, r0
 800a53e:	4640      	mov	r0, r8
 800a540:	f005 fa1c 	bl	800f97c <rcl_get_zero_initialized_node>
 800a544:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a548:	f10d 0918 	add.w	r9, sp, #24
 800a54c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a550:	4648      	mov	r0, r9
 800a552:	f005 fb8b 	bl	800fc6c <rcl_node_get_default_options>
 800a556:	4640      	mov	r0, r8
 800a558:	f005 fa10 	bl	800f97c <rcl_get_zero_initialized_node>
 800a55c:	f8cd 9000 	str.w	r9, [sp]
 800a560:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a564:	463b      	mov	r3, r7
 800a566:	e884 0003 	stmia.w	r4, {r0, r1}
 800a56a:	4632      	mov	r2, r6
 800a56c:	4629      	mov	r1, r5
 800a56e:	4620      	mov	r0, r4
 800a570:	f005 fa0e 	bl	800f990 <rcl_node_init>
 800a574:	b930      	cbnz	r0, 800a584 <rclc_node_init_default+0x60>
 800a576:	b021      	add	sp, #132	; 0x84
 800a578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a57c:	200b      	movs	r0, #11
 800a57e:	b021      	add	sp, #132	; 0x84
 800a580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a584:	9003      	str	r0, [sp, #12]
 800a586:	f000 f8d7 	bl	800a738 <rcutils_reset_error>
 800a58a:	f000 f8d5 	bl	800a738 <rcutils_reset_error>
 800a58e:	9803      	ldr	r0, [sp, #12]
 800a590:	b021      	add	sp, #132	; 0x84
 800a592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a596:	200b      	movs	r0, #11
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop

0800a59c <rclc_publisher_init_default>:
 800a59c:	b368      	cbz	r0, 800a5fa <rclc_publisher_init_default+0x5e>
 800a59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	b0a0      	sub	sp, #128	; 0x80
 800a5a6:	b321      	cbz	r1, 800a5f2 <rclc_publisher_init_default+0x56>
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	b312      	cbz	r2, 800a5f2 <rclc_publisher_init_default+0x56>
 800a5ac:	461f      	mov	r7, r3
 800a5ae:	b303      	cbz	r3, 800a5f2 <rclc_publisher_init_default+0x56>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	f7ff f843 	bl	800963c <rcl_get_zero_initialized_publisher>
 800a5b6:	f10d 0810 	add.w	r8, sp, #16
 800a5ba:	6020      	str	r0, [r4, #0]
 800a5bc:	4640      	mov	r0, r8
 800a5be:	f7ff f8d9 	bl	8009774 <rcl_publisher_get_default_options>
 800a5c2:	490f      	ldr	r1, [pc, #60]	; (800a600 <rclc_publisher_init_default+0x64>)
 800a5c4:	2250      	movs	r2, #80	; 0x50
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	f00c f99f 	bl	801690a <memcpy>
 800a5cc:	f8cd 8000 	str.w	r8, [sp]
 800a5d0:	463b      	mov	r3, r7
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f7ff f836 	bl	8009648 <rcl_publisher_init>
 800a5dc:	b910      	cbnz	r0, 800a5e4 <rclc_publisher_init_default+0x48>
 800a5de:	b020      	add	sp, #128	; 0x80
 800a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e4:	9003      	str	r0, [sp, #12]
 800a5e6:	f000 f8a7 	bl	800a738 <rcutils_reset_error>
 800a5ea:	9803      	ldr	r0, [sp, #12]
 800a5ec:	b020      	add	sp, #128	; 0x80
 800a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f2:	200b      	movs	r0, #11
 800a5f4:	b020      	add	sp, #128	; 0x80
 800a5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5fa:	200b      	movs	r0, #11
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	08017980 	.word	0x08017980

0800a604 <rclc_subscription_init_best_effort>:
 800a604:	b368      	cbz	r0, 800a662 <rclc_subscription_init_best_effort+0x5e>
 800a606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	460d      	mov	r5, r1
 800a60c:	b0a0      	sub	sp, #128	; 0x80
 800a60e:	b321      	cbz	r1, 800a65a <rclc_subscription_init_best_effort+0x56>
 800a610:	4616      	mov	r6, r2
 800a612:	b312      	cbz	r2, 800a65a <rclc_subscription_init_best_effort+0x56>
 800a614:	461f      	mov	r7, r3
 800a616:	b303      	cbz	r3, 800a65a <rclc_subscription_init_best_effort+0x56>
 800a618:	4604      	mov	r4, r0
 800a61a:	f005 fd5f 	bl	80100dc <rcl_get_zero_initialized_subscription>
 800a61e:	f10d 0810 	add.w	r8, sp, #16
 800a622:	6020      	str	r0, [r4, #0]
 800a624:	4640      	mov	r0, r8
 800a626:	f005 fe07 	bl	8010238 <rcl_subscription_get_default_options>
 800a62a:	490f      	ldr	r1, [pc, #60]	; (800a668 <rclc_subscription_init_best_effort+0x64>)
 800a62c:	2250      	movs	r2, #80	; 0x50
 800a62e:	4640      	mov	r0, r8
 800a630:	f00c f96b 	bl	801690a <memcpy>
 800a634:	f8cd 8000 	str.w	r8, [sp]
 800a638:	463b      	mov	r3, r7
 800a63a:	4632      	mov	r2, r6
 800a63c:	4629      	mov	r1, r5
 800a63e:	4620      	mov	r0, r4
 800a640:	f005 fd52 	bl	80100e8 <rcl_subscription_init>
 800a644:	b910      	cbnz	r0, 800a64c <rclc_subscription_init_best_effort+0x48>
 800a646:	b020      	add	sp, #128	; 0x80
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64c:	9003      	str	r0, [sp, #12]
 800a64e:	f000 f873 	bl	800a738 <rcutils_reset_error>
 800a652:	9803      	ldr	r0, [sp, #12]
 800a654:	b020      	add	sp, #128	; 0x80
 800a656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65a:	200b      	movs	r0, #11
 800a65c:	b020      	add	sp, #128	; 0x80
 800a65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a662:	200b      	movs	r0, #11
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	080179d0 	.word	0x080179d0

0800a66c <__default_zero_allocate>:
 800a66c:	f00b bc94 	b.w	8015f98 <calloc>

0800a670 <__default_reallocate>:
 800a670:	f00b be20 	b.w	80162b4 <realloc>

0800a674 <__default_deallocate>:
 800a674:	f00b bcfe 	b.w	8016074 <free>

0800a678 <__default_allocate>:
 800a678:	f00b bcf4 	b.w	8016064 <malloc>

0800a67c <rcutils_get_zero_initialized_allocator>:
 800a67c:	b510      	push	{r4, lr}
 800a67e:	4c05      	ldr	r4, [pc, #20]	; (800a694 <rcutils_get_zero_initialized_allocator+0x18>)
 800a680:	4686      	mov	lr, r0
 800a682:	4684      	mov	ip, r0
 800a684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	f8cc 3000 	str.w	r3, [ip]
 800a690:	4670      	mov	r0, lr
 800a692:	bd10      	pop	{r4, pc}
 800a694:	08017a20 	.word	0x08017a20

0800a698 <rcutils_set_default_allocator>:
 800a698:	b1a8      	cbz	r0, 800a6c6 <rcutils_set_default_allocator+0x2e>
 800a69a:	6802      	ldr	r2, [r0, #0]
 800a69c:	b1a2      	cbz	r2, 800a6c8 <rcutils_set_default_allocator+0x30>
 800a69e:	6841      	ldr	r1, [r0, #4]
 800a6a0:	b1a1      	cbz	r1, 800a6cc <rcutils_set_default_allocator+0x34>
 800a6a2:	b410      	push	{r4}
 800a6a4:	68c4      	ldr	r4, [r0, #12]
 800a6a6:	b164      	cbz	r4, 800a6c2 <rcutils_set_default_allocator+0x2a>
 800a6a8:	6880      	ldr	r0, [r0, #8]
 800a6aa:	b138      	cbz	r0, 800a6bc <rcutils_set_default_allocator+0x24>
 800a6ac:	4b08      	ldr	r3, [pc, #32]	; (800a6d0 <rcutils_set_default_allocator+0x38>)
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a6b6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a6ba:	2001      	movs	r0, #1
 800a6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	e7fa      	b.n	800a6bc <rcutils_set_default_allocator+0x24>
 800a6c6:	4770      	bx	lr
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	4770      	bx	lr
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	4770      	bx	lr
 800a6d0:	20000014 	.word	0x20000014

0800a6d4 <rcutils_get_default_allocator>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4c05      	ldr	r4, [pc, #20]	; (800a6ec <rcutils_get_default_allocator+0x18>)
 800a6d8:	4686      	mov	lr, r0
 800a6da:	4684      	mov	ip, r0
 800a6dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	f8cc 3000 	str.w	r3, [ip]
 800a6e8:	4670      	mov	r0, lr
 800a6ea:	bd10      	pop	{r4, pc}
 800a6ec:	20000014 	.word	0x20000014

0800a6f0 <rcutils_allocator_is_valid>:
 800a6f0:	b158      	cbz	r0, 800a70a <rcutils_allocator_is_valid+0x1a>
 800a6f2:	6803      	ldr	r3, [r0, #0]
 800a6f4:	b143      	cbz	r3, 800a708 <rcutils_allocator_is_valid+0x18>
 800a6f6:	6843      	ldr	r3, [r0, #4]
 800a6f8:	b133      	cbz	r3, 800a708 <rcutils_allocator_is_valid+0x18>
 800a6fa:	68c3      	ldr	r3, [r0, #12]
 800a6fc:	b123      	cbz	r3, 800a708 <rcutils_allocator_is_valid+0x18>
 800a6fe:	6880      	ldr	r0, [r0, #8]
 800a700:	3800      	subs	r0, #0
 800a702:	bf18      	it	ne
 800a704:	2001      	movne	r0, #1
 800a706:	4770      	bx	lr
 800a708:	4618      	mov	r0, r3
 800a70a:	4770      	bx	lr

0800a70c <rcutils_get_error_string>:
 800a70c:	4b06      	ldr	r3, [pc, #24]	; (800a728 <rcutils_get_error_string+0x1c>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	b13b      	cbz	r3, 800a722 <rcutils_get_error_string+0x16>
 800a712:	4b06      	ldr	r3, [pc, #24]	; (800a72c <rcutils_get_error_string+0x20>)
 800a714:	781a      	ldrb	r2, [r3, #0]
 800a716:	b90a      	cbnz	r2, 800a71c <rcutils_get_error_string+0x10>
 800a718:	2201      	movs	r2, #1
 800a71a:	701a      	strb	r2, [r3, #0]
 800a71c:	4b04      	ldr	r3, [pc, #16]	; (800a730 <rcutils_get_error_string+0x24>)
 800a71e:	7818      	ldrb	r0, [r3, #0]
 800a720:	4770      	bx	lr
 800a722:	4b04      	ldr	r3, [pc, #16]	; (800a734 <rcutils_get_error_string+0x28>)
 800a724:	7818      	ldrb	r0, [r3, #0]
 800a726:	4770      	bx	lr
 800a728:	2000e698 	.word	0x2000e698
 800a72c:	2000e6b1 	.word	0x2000e6b1
 800a730:	2000e6b0 	.word	0x2000e6b0
 800a734:	08017a34 	.word	0x08017a34

0800a738 <rcutils_reset_error>:
 800a738:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a758 <rcutils_reset_error+0x20>
 800a73c:	4a08      	ldr	r2, [pc, #32]	; (800a760 <rcutils_reset_error+0x28>)
 800a73e:	4809      	ldr	r0, [pc, #36]	; (800a764 <rcutils_reset_error+0x2c>)
 800a740:	4909      	ldr	r1, [pc, #36]	; (800a768 <rcutils_reset_error+0x30>)
 800a742:	2300      	movs	r3, #0
 800a744:	8013      	strh	r3, [r2, #0]
 800a746:	ed82 7b02 	vstr	d7, [r2, #8]
 800a74a:	4a08      	ldr	r2, [pc, #32]	; (800a76c <rcutils_reset_error+0x34>)
 800a74c:	7003      	strb	r3, [r0, #0]
 800a74e:	700b      	strb	r3, [r1, #0]
 800a750:	7013      	strb	r3, [r2, #0]
 800a752:	4770      	bx	lr
 800a754:	f3af 8000 	nop.w
	...
 800a760:	2000e6a0 	.word	0x2000e6a0
 800a764:	2000e6b1 	.word	0x2000e6b1
 800a768:	2000e6b0 	.word	0x2000e6b0
 800a76c:	2000e698 	.word	0x2000e698

0800a770 <rcutils_system_time_now>:
 800a770:	b308      	cbz	r0, 800a7b6 <rcutils_system_time_now+0x46>
 800a772:	b570      	push	{r4, r5, r6, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	4604      	mov	r4, r0
 800a778:	4669      	mov	r1, sp
 800a77a:	2001      	movs	r0, #1
 800a77c:	f7f6 feb4 	bl	80014e8 <clock_gettime>
 800a780:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a784:	2d00      	cmp	r5, #0
 800a786:	db13      	blt.n	800a7b0 <rcutils_system_time_now+0x40>
 800a788:	9902      	ldr	r1, [sp, #8]
 800a78a:	2900      	cmp	r1, #0
 800a78c:	db0d      	blt.n	800a7aa <rcutils_system_time_now+0x3a>
 800a78e:	4e0b      	ldr	r6, [pc, #44]	; (800a7bc <rcutils_system_time_now+0x4c>)
 800a790:	fba3 3206 	umull	r3, r2, r3, r6
 800a794:	185b      	adds	r3, r3, r1
 800a796:	fb06 2205 	mla	r2, r6, r5, r2
 800a79a:	f04f 0000 	mov.w	r0, #0
 800a79e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a7a2:	e9c4 3200 	strd	r3, r2, [r4]
 800a7a6:	b004      	add	sp, #16
 800a7a8:	bd70      	pop	{r4, r5, r6, pc}
 800a7aa:	ea53 0205 	orrs.w	r2, r3, r5
 800a7ae:	d1ee      	bne.n	800a78e <rcutils_system_time_now+0x1e>
 800a7b0:	2002      	movs	r0, #2
 800a7b2:	b004      	add	sp, #16
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	200b      	movs	r0, #11
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	3b9aca00 	.word	0x3b9aca00

0800a7c0 <rcutils_steady_time_now>:
 800a7c0:	b308      	cbz	r0, 800a806 <rcutils_steady_time_now+0x46>
 800a7c2:	b570      	push	{r4, r5, r6, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4669      	mov	r1, sp
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f7f6 fe8c 	bl	80014e8 <clock_gettime>
 800a7d0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a7d4:	2d00      	cmp	r5, #0
 800a7d6:	db13      	blt.n	800a800 <rcutils_steady_time_now+0x40>
 800a7d8:	9902      	ldr	r1, [sp, #8]
 800a7da:	2900      	cmp	r1, #0
 800a7dc:	db0d      	blt.n	800a7fa <rcutils_steady_time_now+0x3a>
 800a7de:	4e0b      	ldr	r6, [pc, #44]	; (800a80c <rcutils_steady_time_now+0x4c>)
 800a7e0:	fba3 3206 	umull	r3, r2, r3, r6
 800a7e4:	185b      	adds	r3, r3, r1
 800a7e6:	fb06 2205 	mla	r2, r6, r5, r2
 800a7ea:	f04f 0000 	mov.w	r0, #0
 800a7ee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a7f2:	e9c4 3200 	strd	r3, r2, [r4]
 800a7f6:	b004      	add	sp, #16
 800a7f8:	bd70      	pop	{r4, r5, r6, pc}
 800a7fa:	ea53 0205 	orrs.w	r2, r3, r5
 800a7fe:	d1ee      	bne.n	800a7de <rcutils_steady_time_now+0x1e>
 800a800:	2002      	movs	r0, #2
 800a802:	b004      	add	sp, #16
 800a804:	bd70      	pop	{r4, r5, r6, pc}
 800a806:	200b      	movs	r0, #11
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	3b9aca00 	.word	0x3b9aca00

0800a810 <rmw_get_default_publisher_options>:
 800a810:	2200      	movs	r2, #0
 800a812:	6002      	str	r2, [r0, #0]
 800a814:	7102      	strb	r2, [r0, #4]
 800a816:	4770      	bx	lr

0800a818 <rmw_uros_set_custom_transport>:
 800a818:	b470      	push	{r4, r5, r6}
 800a81a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a81e:	b162      	cbz	r2, 800a83a <rmw_uros_set_custom_transport+0x22>
 800a820:	b15b      	cbz	r3, 800a83a <rmw_uros_set_custom_transport+0x22>
 800a822:	b155      	cbz	r5, 800a83a <rmw_uros_set_custom_transport+0x22>
 800a824:	b14e      	cbz	r6, 800a83a <rmw_uros_set_custom_transport+0x22>
 800a826:	4c06      	ldr	r4, [pc, #24]	; (800a840 <rmw_uros_set_custom_transport+0x28>)
 800a828:	7020      	strb	r0, [r4, #0]
 800a82a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a82e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a832:	6166      	str	r6, [r4, #20]
 800a834:	2000      	movs	r0, #0
 800a836:	bc70      	pop	{r4, r5, r6}
 800a838:	4770      	bx	lr
 800a83a:	200b      	movs	r0, #11
 800a83c:	bc70      	pop	{r4, r5, r6}
 800a83e:	4770      	bx	lr
 800a840:	2000e6b4 	.word	0x2000e6b4

0800a844 <flush_session>:
 800a844:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800a846:	f002 bdef 	b.w	800d428 <uxr_run_session_until_confirm_delivery>
 800a84a:	bf00      	nop

0800a84c <rmw_publish>:
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d053      	beq.n	800a8f8 <rmw_publish+0xac>
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	460d      	mov	r5, r1
 800a854:	b08e      	sub	sp, #56	; 0x38
 800a856:	2900      	cmp	r1, #0
 800a858:	d04b      	beq.n	800a8f2 <rmw_publish+0xa6>
 800a85a:	4604      	mov	r4, r0
 800a85c:	6800      	ldr	r0, [r0, #0]
 800a85e:	f000 fced 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 800a862:	2800      	cmp	r0, #0
 800a864:	d045      	beq.n	800a8f2 <rmw_publish+0xa6>
 800a866:	6866      	ldr	r6, [r4, #4]
 800a868:	2e00      	cmp	r6, #0
 800a86a:	d042      	beq.n	800a8f2 <rmw_publish+0xa6>
 800a86c:	69b4      	ldr	r4, [r6, #24]
 800a86e:	4628      	mov	r0, r5
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	4798      	blx	r3
 800a874:	69f3      	ldr	r3, [r6, #28]
 800a876:	9005      	str	r0, [sp, #20]
 800a878:	b113      	cbz	r3, 800a880 <rmw_publish+0x34>
 800a87a:	a805      	add	r0, sp, #20
 800a87c:	4798      	blx	r3
 800a87e:	9805      	ldr	r0, [sp, #20]
 800a880:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	9000      	str	r0, [sp, #0]
 800a888:	6972      	ldr	r2, [r6, #20]
 800a88a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a88c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a890:	ab06      	add	r3, sp, #24
 800a892:	f003 fbb5 	bl	800e000 <uxr_prepare_output_stream>
 800a896:	b1d8      	cbz	r0, 800a8d0 <rmw_publish+0x84>
 800a898:	68a3      	ldr	r3, [r4, #8]
 800a89a:	a906      	add	r1, sp, #24
 800a89c:	4628      	mov	r0, r5
 800a89e:	4798      	blx	r3
 800a8a0:	6a33      	ldr	r3, [r6, #32]
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	b10b      	cbz	r3, 800a8aa <rmw_publish+0x5e>
 800a8a6:	a806      	add	r0, sp, #24
 800a8a8:	4798      	blx	r3
 800a8aa:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a8b4:	d022      	beq.n	800a8fc <rmw_publish+0xb0>
 800a8b6:	6918      	ldr	r0, [r3, #16]
 800a8b8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800a8ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a8be:	f002 fdb3 	bl	800d428 <uxr_run_session_until_confirm_delivery>
 800a8c2:	4020      	ands	r0, r4
 800a8c4:	b2c4      	uxtb	r4, r0
 800a8c6:	f084 0001 	eor.w	r0, r4, #1
 800a8ca:	b2c0      	uxtb	r0, r0
 800a8cc:	b00e      	add	sp, #56	; 0x38
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a8d4:	6918      	ldr	r0, [r3, #16]
 800a8d6:	9b05      	ldr	r3, [sp, #20]
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	4b0b      	ldr	r3, [pc, #44]	; (800a908 <rmw_publish+0xbc>)
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	9602      	str	r6, [sp, #8]
 800a8e0:	6972      	ldr	r2, [r6, #20]
 800a8e2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a8e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a8e8:	ab06      	add	r3, sp, #24
 800a8ea:	f003 fbb9 	bl	800e060 <uxr_prepare_output_stream_fragmented>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d1d2      	bne.n	800a898 <rmw_publish+0x4c>
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	b00e      	add	sp, #56	; 0x38
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	4770      	bx	lr
 800a8fc:	6918      	ldr	r0, [r3, #16]
 800a8fe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a902:	f002 f9d1 	bl	800cca8 <uxr_flash_output_streams>
 800a906:	e7de      	b.n	800a8c6 <rmw_publish+0x7a>
 800a908:	0800a845 	.word	0x0800a845

0800a90c <rmw_create_publisher>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	b087      	sub	sp, #28
 800a912:	2800      	cmp	r0, #0
 800a914:	f000 80cc 	beq.w	800aab0 <rmw_create_publisher+0x1a4>
 800a918:	460e      	mov	r6, r1
 800a91a:	2900      	cmp	r1, #0
 800a91c:	f000 80c8 	beq.w	800aab0 <rmw_create_publisher+0x1a4>
 800a920:	4604      	mov	r4, r0
 800a922:	6800      	ldr	r0, [r0, #0]
 800a924:	4615      	mov	r5, r2
 800a926:	4698      	mov	r8, r3
 800a928:	f000 fc88 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f000 80bf 	beq.w	800aab0 <rmw_create_publisher+0x1a4>
 800a932:	2d00      	cmp	r5, #0
 800a934:	f000 80bc 	beq.w	800aab0 <rmw_create_publisher+0x1a4>
 800a938:	782b      	ldrb	r3, [r5, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 80b8 	beq.w	800aab0 <rmw_create_publisher+0x1a4>
 800a940:	f1b8 0f00 	cmp.w	r8, #0
 800a944:	f000 80b4 	beq.w	800aab0 <rmw_create_publisher+0x1a4>
 800a948:	485c      	ldr	r0, [pc, #368]	; (800aabc <rmw_create_publisher+0x1b0>)
 800a94a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a94e:	f007 ffc7 	bl	80128e0 <get_memory>
 800a952:	2800      	cmp	r0, #0
 800a954:	f000 80ac 	beq.w	800aab0 <rmw_create_publisher+0x1a4>
 800a958:	6884      	ldr	r4, [r0, #8]
 800a95a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800a95e:	f008 f827 	bl	80129b0 <rmw_get_implementation_identifier>
 800a962:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800a966:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800a96a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800a96e:	4628      	mov	r0, r5
 800a970:	f7f5 fc58 	bl	8000224 <strlen>
 800a974:	3001      	adds	r0, #1
 800a976:	283c      	cmp	r0, #60	; 0x3c
 800a978:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800a97c:	f200 8091 	bhi.w	800aaa2 <rmw_create_publisher+0x196>
 800a980:	4a4f      	ldr	r2, [pc, #316]	; (800aac0 <rmw_create_publisher+0x1b4>)
 800a982:	462b      	mov	r3, r5
 800a984:	213c      	movs	r1, #60	; 0x3c
 800a986:	4650      	mov	r0, sl
 800a988:	f00b fe1c 	bl	80165c4 <sniprintf>
 800a98c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a990:	67e3      	str	r3, [r4, #124]	; 0x7c
 800a992:	4641      	mov	r1, r8
 800a994:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800a998:	2250      	movs	r2, #80	; 0x50
 800a99a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a99e:	f00b ffb4 	bl	801690a <memcpy>
 800a9a2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a9a6:	4947      	ldr	r1, [pc, #284]	; (800aac4 <rmw_create_publisher+0x1b8>)
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9ae:	bf0c      	ite	eq
 800a9b0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800a9b4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800a9b8:	67a3      	str	r3, [r4, #120]	; 0x78
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f000 fc49 	bl	800b258 <get_message_typesupport_handle>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d06b      	beq.n	800aaa2 <rmw_create_publisher+0x196>
 800a9ca:	6842      	ldr	r2, [r0, #4]
 800a9cc:	61a2      	str	r2, [r4, #24]
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	d067      	beq.n	800aaa2 <rmw_create_publisher+0x196>
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4643      	mov	r3, r8
 800a9d6:	4648      	mov	r0, r9
 800a9d8:	f008 fa50 	bl	8012e7c <create_topic>
 800a9dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d063      	beq.n	800aaaa <rmw_create_publisher+0x19e>
 800a9e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ea:	2103      	movs	r1, #3
 800a9ec:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800a9f0:	1c42      	adds	r2, r0, #1
 800a9f2:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800a9f6:	f002 f807 	bl	800ca08 <uxr_object_id>
 800a9fa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a9fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa02:	6120      	str	r0, [r4, #16]
 800aa04:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800aa08:	6910      	ldr	r0, [r2, #16]
 800aa0a:	2506      	movs	r5, #6
 800aa0c:	9500      	str	r5, [sp, #0]
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6922      	ldr	r2, [r4, #16]
 800aa12:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800aa16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aa1a:	f001 fea7 	bl	800c76c <uxr_buffer_create_publisher_bin>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aa24:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800aa28:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800aa2c:	f000 fb86 	bl	800b13c <run_xrce_session>
 800aa30:	b3b8      	cbz	r0, 800aaa2 <rmw_create_publisher+0x196>
 800aa32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa3a:	2105      	movs	r1, #5
 800aa3c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800aa40:	1c42      	adds	r2, r0, #1
 800aa42:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800aa46:	f001 ffdf 	bl	800ca08 <uxr_object_id>
 800aa4a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800aa4e:	6160      	str	r0, [r4, #20]
 800aa50:	691e      	ldr	r6, [r3, #16]
 800aa52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa56:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800aa5a:	f10d 0a10 	add.w	sl, sp, #16
 800aa5e:	4641      	mov	r1, r8
 800aa60:	4650      	mov	r0, sl
 800aa62:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800aa66:	f000 fb85 	bl	800b174 <convert_qos_profile>
 800aa6a:	9503      	str	r5, [sp, #12]
 800aa6c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800aa70:	9001      	str	r0, [sp, #4]
 800aa72:	f8ad 1008 	strh.w	r1, [sp, #8]
 800aa76:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800aa80:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800aa84:	f8d8 1000 	ldr.w	r1, [r8]
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f001 fecf 	bl	800c82c <uxr_buffer_create_datawriter_bin>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aa94:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800aa98:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800aa9c:	f000 fb4e 	bl	800b13c <run_xrce_session>
 800aaa0:	b938      	cbnz	r0, 800aab2 <rmw_create_publisher+0x1a6>
 800aaa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aaa4:	b108      	cbz	r0, 800aaaa <rmw_create_publisher+0x19e>
 800aaa6:	f000 fa47 	bl	800af38 <rmw_uxrce_fini_topic_memory>
 800aaaa:	4638      	mov	r0, r7
 800aaac:	f000 f9ec 	bl	800ae88 <rmw_uxrce_fini_publisher_memory>
 800aab0:	2700      	movs	r7, #0
 800aab2:	4638      	mov	r0, r7
 800aab4:	b007      	add	sp, #28
 800aab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaba:	bf00      	nop
 800aabc:	20012fac 	.word	0x20012fac
 800aac0:	08017a6c 	.word	0x08017a6c
 800aac4:	08017a38 	.word	0x08017a38

0800aac8 <rmw_publisher_get_actual_qos>:
 800aac8:	b150      	cbz	r0, 800aae0 <rmw_publisher_get_actual_qos+0x18>
 800aaca:	b508      	push	{r3, lr}
 800aacc:	460b      	mov	r3, r1
 800aace:	b149      	cbz	r1, 800aae4 <rmw_publisher_get_actual_qos+0x1c>
 800aad0:	6841      	ldr	r1, [r0, #4]
 800aad2:	2250      	movs	r2, #80	; 0x50
 800aad4:	3128      	adds	r1, #40	; 0x28
 800aad6:	4618      	mov	r0, r3
 800aad8:	f00b ff17 	bl	801690a <memcpy>
 800aadc:	2000      	movs	r0, #0
 800aade:	bd08      	pop	{r3, pc}
 800aae0:	200b      	movs	r0, #11
 800aae2:	4770      	bx	lr
 800aae4:	200b      	movs	r0, #11
 800aae6:	bd08      	pop	{r3, pc}

0800aae8 <rmw_destroy_publisher>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	b128      	cbz	r0, 800aaf8 <rmw_destroy_publisher+0x10>
 800aaec:	4604      	mov	r4, r0
 800aaee:	6800      	ldr	r0, [r0, #0]
 800aaf0:	460d      	mov	r5, r1
 800aaf2:	f000 fba3 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 800aaf6:	b910      	cbnz	r0, 800aafe <rmw_destroy_publisher+0x16>
 800aaf8:	2401      	movs	r4, #1
 800aafa:	4620      	mov	r0, r4
 800aafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aafe:	6863      	ldr	r3, [r4, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0f9      	beq.n	800aaf8 <rmw_destroy_publisher+0x10>
 800ab04:	2d00      	cmp	r5, #0
 800ab06:	d0f7      	beq.n	800aaf8 <rmw_destroy_publisher+0x10>
 800ab08:	6828      	ldr	r0, [r5, #0]
 800ab0a:	f000 fb97 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d0f2      	beq.n	800aaf8 <rmw_destroy_publisher+0x10>
 800ab12:	686c      	ldr	r4, [r5, #4]
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	d0ef      	beq.n	800aaf8 <rmw_destroy_publisher+0x10>
 800ab18:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab1a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800ab1e:	f008 f9fd 	bl	8012f1c <destroy_topic>
 800ab22:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ab26:	6962      	ldr	r2, [r4, #20]
 800ab28:	6918      	ldr	r0, [r3, #16]
 800ab2a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ab2e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ab32:	6819      	ldr	r1, [r3, #0]
 800ab34:	f001 fd66 	bl	800c604 <uxr_buffer_delete_entity>
 800ab38:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ab3c:	6922      	ldr	r2, [r4, #16]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800ab44:	4604      	mov	r4, r0
 800ab46:	6809      	ldr	r1, [r1, #0]
 800ab48:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ab4c:	f001 fd5a 	bl	800c604 <uxr_buffer_delete_entity>
 800ab50:	693e      	ldr	r6, [r7, #16]
 800ab52:	4622      	mov	r2, r4
 800ab54:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800ab58:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f000 faec 	bl	800b13c <run_xrce_session>
 800ab64:	693e      	ldr	r6, [r7, #16]
 800ab66:	4622      	mov	r2, r4
 800ab68:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800ab6c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800ab70:	4604      	mov	r4, r0
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 fae2 	bl	800b13c <run_xrce_session>
 800ab78:	b12c      	cbz	r4, 800ab86 <rmw_destroy_publisher+0x9e>
 800ab7a:	b120      	cbz	r0, 800ab86 <rmw_destroy_publisher+0x9e>
 800ab7c:	2400      	movs	r4, #0
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 f982 	bl	800ae88 <rmw_uxrce_fini_publisher_memory>
 800ab84:	e7b9      	b.n	800aafa <rmw_destroy_publisher+0x12>
 800ab86:	2402      	movs	r4, #2
 800ab88:	e7f9      	b.n	800ab7e <rmw_destroy_publisher+0x96>
 800ab8a:	bf00      	nop

0800ab8c <rmw_uxrce_init_service_memory>:
 800ab8c:	b1e2      	cbz	r2, 800abc8 <rmw_uxrce_init_service_memory+0x3c>
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	7b05      	ldrb	r5, [r0, #12]
 800ab94:	4606      	mov	r6, r0
 800ab96:	b9ad      	cbnz	r5, 800abc4 <rmw_uxrce_init_service_memory+0x38>
 800ab98:	23c8      	movs	r3, #200	; 0xc8
 800ab9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab9e:	6083      	str	r3, [r0, #8]
 800aba0:	f240 1301 	movw	r3, #257	; 0x101
 800aba4:	4617      	mov	r7, r2
 800aba6:	8183      	strh	r3, [r0, #12]
 800aba8:	460c      	mov	r4, r1
 800abaa:	46a8      	mov	r8, r5
 800abac:	4621      	mov	r1, r4
 800abae:	4630      	mov	r0, r6
 800abb0:	3501      	adds	r5, #1
 800abb2:	f007 fea5 	bl	8012900 <put_memory>
 800abb6:	42af      	cmp	r7, r5
 800abb8:	60a4      	str	r4, [r4, #8]
 800abba:	f884 800c 	strb.w	r8, [r4, #12]
 800abbe:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800abc2:	d1f3      	bne.n	800abac <rmw_uxrce_init_service_memory+0x20>
 800abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <rmw_uxrce_init_client_memory>:
 800abcc:	b1e2      	cbz	r2, 800ac08 <rmw_uxrce_init_client_memory+0x3c>
 800abce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	7b05      	ldrb	r5, [r0, #12]
 800abd4:	4606      	mov	r6, r0
 800abd6:	b9ad      	cbnz	r5, 800ac04 <rmw_uxrce_init_client_memory+0x38>
 800abd8:	23c8      	movs	r3, #200	; 0xc8
 800abda:	e9c0 5500 	strd	r5, r5, [r0]
 800abde:	6083      	str	r3, [r0, #8]
 800abe0:	f240 1301 	movw	r3, #257	; 0x101
 800abe4:	4617      	mov	r7, r2
 800abe6:	8183      	strh	r3, [r0, #12]
 800abe8:	460c      	mov	r4, r1
 800abea:	46a8      	mov	r8, r5
 800abec:	4621      	mov	r1, r4
 800abee:	4630      	mov	r0, r6
 800abf0:	3501      	adds	r5, #1
 800abf2:	f007 fe85 	bl	8012900 <put_memory>
 800abf6:	42af      	cmp	r7, r5
 800abf8:	60a4      	str	r4, [r4, #8]
 800abfa:	f884 800c 	strb.w	r8, [r4, #12]
 800abfe:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800ac02:	d1f3      	bne.n	800abec <rmw_uxrce_init_client_memory+0x20>
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop

0800ac0c <rmw_uxrce_init_publisher_memory>:
 800ac0c:	b1e2      	cbz	r2, 800ac48 <rmw_uxrce_init_publisher_memory+0x3c>
 800ac0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	7b05      	ldrb	r5, [r0, #12]
 800ac14:	4606      	mov	r6, r0
 800ac16:	b9ad      	cbnz	r5, 800ac44 <rmw_uxrce_init_publisher_memory+0x38>
 800ac18:	23d8      	movs	r3, #216	; 0xd8
 800ac1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac1e:	6083      	str	r3, [r0, #8]
 800ac20:	f240 1301 	movw	r3, #257	; 0x101
 800ac24:	4617      	mov	r7, r2
 800ac26:	8183      	strh	r3, [r0, #12]
 800ac28:	460c      	mov	r4, r1
 800ac2a:	46a8      	mov	r8, r5
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4630      	mov	r0, r6
 800ac30:	3501      	adds	r5, #1
 800ac32:	f007 fe65 	bl	8012900 <put_memory>
 800ac36:	42af      	cmp	r7, r5
 800ac38:	60a4      	str	r4, [r4, #8]
 800ac3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac3e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ac42:	d1f3      	bne.n	800ac2c <rmw_uxrce_init_publisher_memory+0x20>
 800ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop

0800ac4c <rmw_uxrce_init_subscription_memory>:
 800ac4c:	b1e2      	cbz	r2, 800ac88 <rmw_uxrce_init_subscription_memory+0x3c>
 800ac4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac52:	7b05      	ldrb	r5, [r0, #12]
 800ac54:	4606      	mov	r6, r0
 800ac56:	b9ad      	cbnz	r5, 800ac84 <rmw_uxrce_init_subscription_memory+0x38>
 800ac58:	23d8      	movs	r3, #216	; 0xd8
 800ac5a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac5e:	6083      	str	r3, [r0, #8]
 800ac60:	f240 1301 	movw	r3, #257	; 0x101
 800ac64:	4617      	mov	r7, r2
 800ac66:	8183      	strh	r3, [r0, #12]
 800ac68:	460c      	mov	r4, r1
 800ac6a:	46a8      	mov	r8, r5
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	4630      	mov	r0, r6
 800ac70:	3501      	adds	r5, #1
 800ac72:	f007 fe45 	bl	8012900 <put_memory>
 800ac76:	42af      	cmp	r7, r5
 800ac78:	60a4      	str	r4, [r4, #8]
 800ac7a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac7e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ac82:	d1f3      	bne.n	800ac6c <rmw_uxrce_init_subscription_memory+0x20>
 800ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop

0800ac8c <rmw_uxrce_init_node_memory>:
 800ac8c:	b1e2      	cbz	r2, 800acc8 <rmw_uxrce_init_node_memory+0x3c>
 800ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac92:	7b05      	ldrb	r5, [r0, #12]
 800ac94:	4606      	mov	r6, r0
 800ac96:	b9ad      	cbnz	r5, 800acc4 <rmw_uxrce_init_node_memory+0x38>
 800ac98:	23a4      	movs	r3, #164	; 0xa4
 800ac9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac9e:	6083      	str	r3, [r0, #8]
 800aca0:	f240 1301 	movw	r3, #257	; 0x101
 800aca4:	4617      	mov	r7, r2
 800aca6:	8183      	strh	r3, [r0, #12]
 800aca8:	460c      	mov	r4, r1
 800acaa:	46a8      	mov	r8, r5
 800acac:	4621      	mov	r1, r4
 800acae:	4630      	mov	r0, r6
 800acb0:	3501      	adds	r5, #1
 800acb2:	f007 fe25 	bl	8012900 <put_memory>
 800acb6:	42af      	cmp	r7, r5
 800acb8:	60a4      	str	r4, [r4, #8]
 800acba:	f884 800c 	strb.w	r8, [r4, #12]
 800acbe:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800acc2:	d1f3      	bne.n	800acac <rmw_uxrce_init_node_memory+0x20>
 800acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop

0800accc <rmw_uxrce_init_session_memory>:
 800accc:	b1ea      	cbz	r2, 800ad0a <rmw_uxrce_init_session_memory+0x3e>
 800acce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd2:	7b05      	ldrb	r5, [r0, #12]
 800acd4:	4606      	mov	r6, r0
 800acd6:	b9b5      	cbnz	r5, 800ad06 <rmw_uxrce_init_session_memory+0x3a>
 800acd8:	e9c0 5500 	strd	r5, r5, [r0]
 800acdc:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800ace0:	f240 1301 	movw	r3, #257	; 0x101
 800ace4:	4617      	mov	r7, r2
 800ace6:	f8c0 8008 	str.w	r8, [r0, #8]
 800acea:	460c      	mov	r4, r1
 800acec:	8183      	strh	r3, [r0, #12]
 800acee:	46a9      	mov	r9, r5
 800acf0:	4621      	mov	r1, r4
 800acf2:	4630      	mov	r0, r6
 800acf4:	3501      	adds	r5, #1
 800acf6:	f007 fe03 	bl	8012900 <put_memory>
 800acfa:	42af      	cmp	r7, r5
 800acfc:	60a4      	str	r4, [r4, #8]
 800acfe:	f884 900c 	strb.w	r9, [r4, #12]
 800ad02:	4444      	add	r4, r8
 800ad04:	d1f4      	bne.n	800acf0 <rmw_uxrce_init_session_memory+0x24>
 800ad06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0a:	4770      	bx	lr

0800ad0c <rmw_uxrce_init_topic_memory>:
 800ad0c:	b1e2      	cbz	r2, 800ad48 <rmw_uxrce_init_topic_memory+0x3c>
 800ad0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	7b05      	ldrb	r5, [r0, #12]
 800ad14:	4606      	mov	r6, r0
 800ad16:	b9ad      	cbnz	r5, 800ad44 <rmw_uxrce_init_topic_memory+0x38>
 800ad18:	231c      	movs	r3, #28
 800ad1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad1e:	6083      	str	r3, [r0, #8]
 800ad20:	f240 1301 	movw	r3, #257	; 0x101
 800ad24:	4617      	mov	r7, r2
 800ad26:	8183      	strh	r3, [r0, #12]
 800ad28:	460c      	mov	r4, r1
 800ad2a:	46a8      	mov	r8, r5
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	4630      	mov	r0, r6
 800ad30:	3501      	adds	r5, #1
 800ad32:	f007 fde5 	bl	8012900 <put_memory>
 800ad36:	42af      	cmp	r7, r5
 800ad38:	60a4      	str	r4, [r4, #8]
 800ad3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad3e:	f104 041c 	add.w	r4, r4, #28
 800ad42:	d1f3      	bne.n	800ad2c <rmw_uxrce_init_topic_memory+0x20>
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop

0800ad4c <rmw_uxrce_init_static_input_buffer_memory>:
 800ad4c:	b1ea      	cbz	r2, 800ad8a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ad4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad52:	7b05      	ldrb	r5, [r0, #12]
 800ad54:	4606      	mov	r6, r0
 800ad56:	b9b5      	cbnz	r5, 800ad86 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ad58:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800ad5c:	e9c0 5500 	strd	r5, r5, [r0]
 800ad60:	6083      	str	r3, [r0, #8]
 800ad62:	f240 1301 	movw	r3, #257	; 0x101
 800ad66:	4617      	mov	r7, r2
 800ad68:	8183      	strh	r3, [r0, #12]
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	46a8      	mov	r8, r5
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4630      	mov	r0, r6
 800ad72:	3501      	adds	r5, #1
 800ad74:	f007 fdc4 	bl	8012900 <put_memory>
 800ad78:	42af      	cmp	r7, r5
 800ad7a:	60a4      	str	r4, [r4, #8]
 800ad7c:	f884 800c 	strb.w	r8, [r4, #12]
 800ad80:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800ad84:	d1f3      	bne.n	800ad6e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ad86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8a:	4770      	bx	lr

0800ad8c <rmw_uxrce_init_init_options_impl_memory>:
 800ad8c:	b1e2      	cbz	r2, 800adc8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	7b05      	ldrb	r5, [r0, #12]
 800ad94:	4606      	mov	r6, r0
 800ad96:	b9ad      	cbnz	r5, 800adc4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ad98:	232c      	movs	r3, #44	; 0x2c
 800ad9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad9e:	6083      	str	r3, [r0, #8]
 800ada0:	f240 1301 	movw	r3, #257	; 0x101
 800ada4:	4617      	mov	r7, r2
 800ada6:	8183      	strh	r3, [r0, #12]
 800ada8:	460c      	mov	r4, r1
 800adaa:	46a8      	mov	r8, r5
 800adac:	4621      	mov	r1, r4
 800adae:	4630      	mov	r0, r6
 800adb0:	3501      	adds	r5, #1
 800adb2:	f007 fda5 	bl	8012900 <put_memory>
 800adb6:	42af      	cmp	r7, r5
 800adb8:	60a4      	str	r4, [r4, #8]
 800adba:	f884 800c 	strb.w	r8, [r4, #12]
 800adbe:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800adc2:	d1f3      	bne.n	800adac <rmw_uxrce_init_init_options_impl_memory+0x20>
 800adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop

0800adcc <rmw_uxrce_init_wait_set_memory>:
 800adcc:	b1e2      	cbz	r2, 800ae08 <rmw_uxrce_init_wait_set_memory+0x3c>
 800adce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add2:	7b05      	ldrb	r5, [r0, #12]
 800add4:	4606      	mov	r6, r0
 800add6:	b9ad      	cbnz	r5, 800ae04 <rmw_uxrce_init_wait_set_memory+0x38>
 800add8:	231c      	movs	r3, #28
 800adda:	e9c0 5500 	strd	r5, r5, [r0]
 800adde:	6083      	str	r3, [r0, #8]
 800ade0:	f240 1301 	movw	r3, #257	; 0x101
 800ade4:	4617      	mov	r7, r2
 800ade6:	8183      	strh	r3, [r0, #12]
 800ade8:	460c      	mov	r4, r1
 800adea:	46a8      	mov	r8, r5
 800adec:	4621      	mov	r1, r4
 800adee:	4630      	mov	r0, r6
 800adf0:	3501      	adds	r5, #1
 800adf2:	f007 fd85 	bl	8012900 <put_memory>
 800adf6:	42af      	cmp	r7, r5
 800adf8:	60a4      	str	r4, [r4, #8]
 800adfa:	f884 800c 	strb.w	r8, [r4, #12]
 800adfe:	f104 041c 	add.w	r4, r4, #28
 800ae02:	d1f3      	bne.n	800adec <rmw_uxrce_init_wait_set_memory+0x20>
 800ae04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop

0800ae0c <rmw_uxrce_init_guard_condition_memory>:
 800ae0c:	b1e2      	cbz	r2, 800ae48 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ae0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	7b05      	ldrb	r5, [r0, #12]
 800ae14:	4606      	mov	r6, r0
 800ae16:	b9ad      	cbnz	r5, 800ae44 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ae18:	2320      	movs	r3, #32
 800ae1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae1e:	6083      	str	r3, [r0, #8]
 800ae20:	f240 1301 	movw	r3, #257	; 0x101
 800ae24:	4617      	mov	r7, r2
 800ae26:	8183      	strh	r3, [r0, #12]
 800ae28:	460c      	mov	r4, r1
 800ae2a:	46a8      	mov	r8, r5
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4630      	mov	r0, r6
 800ae30:	3501      	adds	r5, #1
 800ae32:	f007 fd65 	bl	8012900 <put_memory>
 800ae36:	42af      	cmp	r7, r5
 800ae38:	60a4      	str	r4, [r4, #8]
 800ae3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae3e:	f104 0420 	add.w	r4, r4, #32
 800ae42:	d1f3      	bne.n	800ae2c <rmw_uxrce_init_guard_condition_memory+0x20>
 800ae44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop

0800ae4c <rmw_uxrce_fini_session_memory>:
 800ae4c:	4601      	mov	r1, r0
 800ae4e:	4801      	ldr	r0, [pc, #4]	; (800ae54 <rmw_uxrce_fini_session_memory+0x8>)
 800ae50:	f007 bd56 	b.w	8012900 <put_memory>
 800ae54:	20012fcc 	.word	0x20012fcc

0800ae58 <rmw_uxrce_fini_node_memory>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	6800      	ldr	r0, [r0, #0]
 800ae5e:	b128      	cbz	r0, 800ae6c <rmw_uxrce_fini_node_memory+0x14>
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <rmw_uxrce_fini_node_memory+0x28>)
 800ae62:	6819      	ldr	r1, [r3, #0]
 800ae64:	f7f5 f9d4 	bl	8000210 <strcmp>
 800ae68:	b940      	cbnz	r0, 800ae7c <rmw_uxrce_fini_node_memory+0x24>
 800ae6a:	6020      	str	r0, [r4, #0]
 800ae6c:	6861      	ldr	r1, [r4, #4]
 800ae6e:	b129      	cbz	r1, 800ae7c <rmw_uxrce_fini_node_memory+0x24>
 800ae70:	2500      	movs	r5, #0
 800ae72:	4804      	ldr	r0, [pc, #16]	; (800ae84 <rmw_uxrce_fini_node_memory+0x2c>)
 800ae74:	610d      	str	r5, [r1, #16]
 800ae76:	f007 fd43 	bl	8012900 <put_memory>
 800ae7a:	6065      	str	r5, [r4, #4]
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	bf00      	nop
 800ae80:	0801818c 	.word	0x0801818c
 800ae84:	20012f9c 	.word	0x20012f9c

0800ae88 <rmw_uxrce_fini_publisher_memory>:
 800ae88:	b510      	push	{r4, lr}
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	6800      	ldr	r0, [r0, #0]
 800ae8e:	b128      	cbz	r0, 800ae9c <rmw_uxrce_fini_publisher_memory+0x14>
 800ae90:	4b06      	ldr	r3, [pc, #24]	; (800aeac <rmw_uxrce_fini_publisher_memory+0x24>)
 800ae92:	6819      	ldr	r1, [r3, #0]
 800ae94:	f7f5 f9bc 	bl	8000210 <strcmp>
 800ae98:	b938      	cbnz	r0, 800aeaa <rmw_uxrce_fini_publisher_memory+0x22>
 800ae9a:	6020      	str	r0, [r4, #0]
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	b121      	cbz	r1, 800aeaa <rmw_uxrce_fini_publisher_memory+0x22>
 800aea0:	4803      	ldr	r0, [pc, #12]	; (800aeb0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800aea2:	f007 fd2d 	bl	8012900 <put_memory>
 800aea6:	2300      	movs	r3, #0
 800aea8:	6063      	str	r3, [r4, #4]
 800aeaa:	bd10      	pop	{r4, pc}
 800aeac:	0801818c 	.word	0x0801818c
 800aeb0:	20012fac 	.word	0x20012fac

0800aeb4 <rmw_uxrce_fini_subscription_memory>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	6800      	ldr	r0, [r0, #0]
 800aeba:	b128      	cbz	r0, 800aec8 <rmw_uxrce_fini_subscription_memory+0x14>
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800aebe:	6819      	ldr	r1, [r3, #0]
 800aec0:	f7f5 f9a6 	bl	8000210 <strcmp>
 800aec4:	b938      	cbnz	r0, 800aed6 <rmw_uxrce_fini_subscription_memory+0x22>
 800aec6:	6020      	str	r0, [r4, #0]
 800aec8:	6861      	ldr	r1, [r4, #4]
 800aeca:	b121      	cbz	r1, 800aed6 <rmw_uxrce_fini_subscription_memory+0x22>
 800aecc:	4803      	ldr	r0, [pc, #12]	; (800aedc <rmw_uxrce_fini_subscription_memory+0x28>)
 800aece:	f007 fd17 	bl	8012900 <put_memory>
 800aed2:	2300      	movs	r3, #0
 800aed4:	6063      	str	r3, [r4, #4]
 800aed6:	bd10      	pop	{r4, pc}
 800aed8:	0801818c 	.word	0x0801818c
 800aedc:	20012fec 	.word	0x20012fec

0800aee0 <rmw_uxrce_fini_service_memory>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	4604      	mov	r4, r0
 800aee4:	6800      	ldr	r0, [r0, #0]
 800aee6:	b128      	cbz	r0, 800aef4 <rmw_uxrce_fini_service_memory+0x14>
 800aee8:	4b06      	ldr	r3, [pc, #24]	; (800af04 <rmw_uxrce_fini_service_memory+0x24>)
 800aeea:	6819      	ldr	r1, [r3, #0]
 800aeec:	f7f5 f990 	bl	8000210 <strcmp>
 800aef0:	b938      	cbnz	r0, 800af02 <rmw_uxrce_fini_service_memory+0x22>
 800aef2:	6020      	str	r0, [r4, #0]
 800aef4:	6861      	ldr	r1, [r4, #4]
 800aef6:	b121      	cbz	r1, 800af02 <rmw_uxrce_fini_service_memory+0x22>
 800aef8:	4803      	ldr	r0, [pc, #12]	; (800af08 <rmw_uxrce_fini_service_memory+0x28>)
 800aefa:	f007 fd01 	bl	8012900 <put_memory>
 800aefe:	2300      	movs	r3, #0
 800af00:	6063      	str	r3, [r4, #4]
 800af02:	bd10      	pop	{r4, pc}
 800af04:	0801818c 	.word	0x0801818c
 800af08:	20012fbc 	.word	0x20012fbc

0800af0c <rmw_uxrce_fini_client_memory>:
 800af0c:	b510      	push	{r4, lr}
 800af0e:	4604      	mov	r4, r0
 800af10:	6800      	ldr	r0, [r0, #0]
 800af12:	b128      	cbz	r0, 800af20 <rmw_uxrce_fini_client_memory+0x14>
 800af14:	4b06      	ldr	r3, [pc, #24]	; (800af30 <rmw_uxrce_fini_client_memory+0x24>)
 800af16:	6819      	ldr	r1, [r3, #0]
 800af18:	f7f5 f97a 	bl	8000210 <strcmp>
 800af1c:	b938      	cbnz	r0, 800af2e <rmw_uxrce_fini_client_memory+0x22>
 800af1e:	6020      	str	r0, [r4, #0]
 800af20:	6861      	ldr	r1, [r4, #4]
 800af22:	b121      	cbz	r1, 800af2e <rmw_uxrce_fini_client_memory+0x22>
 800af24:	4803      	ldr	r0, [pc, #12]	; (800af34 <rmw_uxrce_fini_client_memory+0x28>)
 800af26:	f007 fceb 	bl	8012900 <put_memory>
 800af2a:	2300      	movs	r3, #0
 800af2c:	6063      	str	r3, [r4, #4]
 800af2e:	bd10      	pop	{r4, pc}
 800af30:	0801818c 	.word	0x0801818c
 800af34:	2000e6d0 	.word	0x2000e6d0

0800af38 <rmw_uxrce_fini_topic_memory>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	4604      	mov	r4, r0
 800af3c:	4621      	mov	r1, r4
 800af3e:	4803      	ldr	r0, [pc, #12]	; (800af4c <rmw_uxrce_fini_topic_memory+0x14>)
 800af40:	f007 fcde 	bl	8012900 <put_memory>
 800af44:	2300      	movs	r3, #0
 800af46:	61a3      	str	r3, [r4, #24]
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	bf00      	nop
 800af4c:	20012ffc 	.word	0x20012ffc

0800af50 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800af50:	b082      	sub	sp, #8
 800af52:	b530      	push	{r4, r5, lr}
 800af54:	4925      	ldr	r1, [pc, #148]	; (800afec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800af56:	680d      	ldr	r5, [r1, #0]
 800af58:	ac03      	add	r4, sp, #12
 800af5a:	e884 000c 	stmia.w	r4, {r2, r3}
 800af5e:	461c      	mov	r4, r3
 800af60:	2d00      	cmp	r5, #0
 800af62:	d041      	beq.n	800afe8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800af64:	462b      	mov	r3, r5
 800af66:	2100      	movs	r1, #0
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800af70:	4290      	cmp	r0, r2
 800af72:	bf08      	it	eq
 800af74:	3101      	addeq	r1, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1f6      	bne.n	800af68 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800af7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d029      	beq.n	800afd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800af82:	d907      	bls.n	800af94 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800af84:	2b03      	cmp	r3, #3
 800af86:	d005      	beq.n	800af94 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800af88:	2100      	movs	r1, #0
 800af8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af8e:	4608      	mov	r0, r1
 800af90:	b002      	add	sp, #8
 800af92:	4770      	bx	lr
 800af94:	b314      	cbz	r4, 800afdc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800af96:	428c      	cmp	r4, r1
 800af98:	d820      	bhi.n	800afdc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800af9a:	2d00      	cmp	r5, #0
 800af9c:	d0f4      	beq.n	800af88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800af9e:	2100      	movs	r1, #0
 800afa0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800afa4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800afa8:	e002      	b.n	800afb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800afaa:	686d      	ldr	r5, [r5, #4]
 800afac:	2d00      	cmp	r5, #0
 800afae:	d0ec      	beq.n	800af8a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800afb0:	68ab      	ldr	r3, [r5, #8]
 800afb2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800afb6:	4290      	cmp	r0, r2
 800afb8:	d1f7      	bne.n	800afaa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800afba:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800afbe:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800afc2:	4562      	cmp	r2, ip
 800afc4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800afc8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800afcc:	daed      	bge.n	800afaa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800afce:	4694      	mov	ip, r2
 800afd0:	461c      	mov	r4, r3
 800afd2:	4629      	mov	r1, r5
 800afd4:	e7e9      	b.n	800afaa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800afd6:	b10c      	cbz	r4, 800afdc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800afd8:	428c      	cmp	r4, r1
 800afda:	d9d5      	bls.n	800af88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800afdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afe0:	4802      	ldr	r0, [pc, #8]	; (800afec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800afe2:	b002      	add	sp, #8
 800afe4:	f007 bc7c 	b.w	80128e0 <get_memory>
 800afe8:	4629      	mov	r1, r5
 800afea:	e7c6      	b.n	800af7a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800afec:	20012fdc 	.word	0x20012fdc

0800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800aff0:	4b11      	ldr	r3, [pc, #68]	; (800b038 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	b530      	push	{r4, r5, lr}
 800aff6:	b1e3      	cbz	r3, 800b032 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800aff8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800affc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800b000:	2400      	movs	r4, #0
 800b002:	e001      	b.n	800b008 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	b193      	cbz	r3, 800b02e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b00e:	4288      	cmp	r0, r1
 800b010:	d1f8      	bne.n	800b004 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b012:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800b016:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800b01a:	4571      	cmp	r1, lr
 800b01c:	eb72 050c 	sbcs.w	r5, r2, ip
 800b020:	daf0      	bge.n	800b004 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b022:	461c      	mov	r4, r3
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	468e      	mov	lr, r1
 800b028:	4694      	mov	ip, r2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1ec      	bne.n	800b008 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b02e:	4620      	mov	r0, r4
 800b030:	bd30      	pop	{r4, r5, pc}
 800b032:	461c      	mov	r4, r3
 800b034:	4620      	mov	r0, r4
 800b036:	bd30      	pop	{r4, r5, pc}
 800b038:	20012fdc 	.word	0x20012fdc
 800b03c:	00000000 	.word	0x00000000

0800b040 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	4b3c      	ldr	r3, [pc, #240]	; (800b138 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b046:	ed2d 8b06 	vpush	{d8-d10}
 800b04a:	681f      	ldr	r7, [r3, #0]
 800b04c:	b08d      	sub	sp, #52	; 0x34
 800b04e:	f008 fd85 	bl	8013b5c <rmw_uros_epoch_nanos>
 800b052:	2f00      	cmp	r7, #0
 800b054:	d05d      	beq.n	800b112 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b056:	46b8      	mov	r8, r7
 800b058:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800b120 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b05c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b060:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b064:	2b04      	cmp	r3, #4
 800b066:	ed9f ab30 	vldr	d10, [pc, #192]	; 800b128 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b06a:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800b130 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b06e:	4681      	mov	r9, r0
 800b070:	468a      	mov	sl, r1
 800b072:	ac04      	add	r4, sp, #16
 800b074:	d03f      	beq.n	800b0f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b076:	2b05      	cmp	r3, #5
 800b078:	d044      	beq.n	800b104 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d03b      	beq.n	800b0f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b07e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b082:	ed8d ab06 	vstr	d10, [sp, #24]
 800b086:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b08a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800b08e:	ab08      	add	r3, sp, #32
 800b090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b092:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b096:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b09a:	f007 fa55 	bl	8012548 <rmw_time_equal>
 800b09e:	b118      	cbz	r0, 800b0a8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b0a0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b0a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b0a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b0ac:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800b0b0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800b0b4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b0b8:	f007 fa9a 	bl	80125f0 <rmw_time_total_nsec>
 800b0bc:	1830      	adds	r0, r6, r0
 800b0be:	eb47 0101 	adc.w	r1, r7, r1
 800b0c2:	4548      	cmp	r0, r9
 800b0c4:	eb71 030a 	sbcs.w	r3, r1, sl
 800b0c8:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800b0cc:	db05      	blt.n	800b0da <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b0ce:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b0d2:	4591      	cmp	r9, r2
 800b0d4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b0d8:	da03      	bge.n	800b0e2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b0da:	4817      	ldr	r0, [pc, #92]	; (800b138 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b0dc:	4641      	mov	r1, r8
 800b0de:	f007 fc0f 	bl	8012900 <put_memory>
 800b0e2:	f1bb 0f00 	cmp.w	fp, #0
 800b0e6:	d014      	beq.n	800b112 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b0e8:	46d8      	mov	r8, fp
 800b0ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b0ee:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d1bf      	bne.n	800b076 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b0f6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b0fa:	3340      	adds	r3, #64	; 0x40
 800b0fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b0fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b102:	e7c0      	b.n	800b086 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b104:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b108:	3348      	adds	r3, #72	; 0x48
 800b10a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b10c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b110:	e7b9      	b.n	800b086 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b112:	b00d      	add	sp, #52	; 0x34
 800b114:	ecbd 8b06 	vpop	{d8-d10}
 800b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11c:	f3af 8000 	nop.w
	...
 800b128:	00000001 	.word	0x00000001
 800b12c:	00000000 	.word	0x00000000
 800b130:	0000001e 	.word	0x0000001e
 800b134:	00000000 	.word	0x00000000
 800b138:	20012fdc 	.word	0x20012fdc

0800b13c <run_xrce_session>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	788c      	ldrb	r4, [r1, #2]
 800b140:	b086      	sub	sp, #24
 800b142:	2c01      	cmp	r4, #1
 800b144:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b148:	d00c      	beq.n	800b164 <run_xrce_session+0x28>
 800b14a:	4619      	mov	r1, r3
 800b14c:	2301      	movs	r3, #1
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	f10d 020e 	add.w	r2, sp, #14
 800b154:	f10d 0317 	add.w	r3, sp, #23
 800b158:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b15c:	f002 f98a 	bl	800d474 <uxr_run_session_until_all_status>
 800b160:	b006      	add	sp, #24
 800b162:	bd10      	pop	{r4, pc}
 800b164:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b168:	f001 fd9e 	bl	800cca8 <uxr_flash_output_streams>
 800b16c:	4620      	mov	r0, r4
 800b16e:	b006      	add	sp, #24
 800b170:	bd10      	pop	{r4, pc}
 800b172:	bf00      	nop

0800b174 <convert_qos_profile>:
 800b174:	7a4a      	ldrb	r2, [r1, #9]
 800b176:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b17a:	2a02      	cmp	r2, #2
 800b17c:	bf18      	it	ne
 800b17e:	2200      	movne	r2, #0
 800b180:	7002      	strb	r2, [r0, #0]
 800b182:	780a      	ldrb	r2, [r1, #0]
 800b184:	8889      	ldrh	r1, [r1, #4]
 800b186:	8081      	strh	r1, [r0, #4]
 800b188:	f1ac 0c02 	sub.w	ip, ip, #2
 800b18c:	f1a2 0202 	sub.w	r2, r2, #2
 800b190:	fabc fc8c 	clz	ip, ip
 800b194:	fab2 f282 	clz	r2, r2
 800b198:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b19c:	0952      	lsrs	r2, r2, #5
 800b19e:	f880 c001 	strb.w	ip, [r0, #1]
 800b1a2:	7082      	strb	r2, [r0, #2]
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop

0800b1a8 <generate_type_name>:
 800b1a8:	b530      	push	{r4, r5, lr}
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	700b      	strb	r3, [r1, #0]
 800b1ae:	6803      	ldr	r3, [r0, #0]
 800b1b0:	b087      	sub	sp, #28
 800b1b2:	4614      	mov	r4, r2
 800b1b4:	b1d3      	cbz	r3, 800b1ec <generate_type_name+0x44>
 800b1b6:	4a0f      	ldr	r2, [pc, #60]	; (800b1f4 <generate_type_name+0x4c>)
 800b1b8:	4615      	mov	r5, r2
 800b1ba:	9203      	str	r2, [sp, #12]
 800b1bc:	9500      	str	r5, [sp, #0]
 800b1be:	6842      	ldr	r2, [r0, #4]
 800b1c0:	480d      	ldr	r0, [pc, #52]	; (800b1f8 <generate_type_name+0x50>)
 800b1c2:	9001      	str	r0, [sp, #4]
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	490d      	ldr	r1, [pc, #52]	; (800b1fc <generate_type_name+0x54>)
 800b1c8:	9204      	str	r2, [sp, #16]
 800b1ca:	9105      	str	r1, [sp, #20]
 800b1cc:	9102      	str	r1, [sp, #8]
 800b1ce:	4a0c      	ldr	r2, [pc, #48]	; (800b200 <generate_type_name+0x58>)
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	f00b f9f7 	bl	80165c4 <sniprintf>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	db05      	blt.n	800b1e6 <generate_type_name+0x3e>
 800b1da:	4284      	cmp	r4, r0
 800b1dc:	bfd4      	ite	le
 800b1de:	2000      	movle	r0, #0
 800b1e0:	2001      	movgt	r0, #1
 800b1e2:	b007      	add	sp, #28
 800b1e4:	bd30      	pop	{r4, r5, pc}
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	b007      	add	sp, #28
 800b1ea:	bd30      	pop	{r4, r5, pc}
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <generate_type_name+0x5c>)
 800b1ee:	4a01      	ldr	r2, [pc, #4]	; (800b1f4 <generate_type_name+0x4c>)
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	e7e2      	b.n	800b1ba <generate_type_name+0x12>
 800b1f4:	08017a5c 	.word	0x08017a5c
 800b1f8:	08017a74 	.word	0x08017a74
 800b1fc:	08017a70 	.word	0x08017a70
 800b200:	08017a60 	.word	0x08017a60
 800b204:	08017f64 	.word	0x08017f64

0800b208 <generate_topic_name>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	4614      	mov	r4, r2
 800b20e:	9000      	str	r0, [sp, #0]
 800b210:	4b08      	ldr	r3, [pc, #32]	; (800b234 <generate_topic_name+0x2c>)
 800b212:	4a09      	ldr	r2, [pc, #36]	; (800b238 <generate_topic_name+0x30>)
 800b214:	4608      	mov	r0, r1
 800b216:	4621      	mov	r1, r4
 800b218:	f00b f9d4 	bl	80165c4 <sniprintf>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	db05      	blt.n	800b22c <generate_topic_name+0x24>
 800b220:	4284      	cmp	r4, r0
 800b222:	bfd4      	ite	le
 800b224:	2000      	movle	r0, #0
 800b226:	2001      	movgt	r0, #1
 800b228:	b002      	add	sp, #8
 800b22a:	bd10      	pop	{r4, pc}
 800b22c:	2000      	movs	r0, #0
 800b22e:	b002      	add	sp, #8
 800b230:	bd10      	pop	{r4, pc}
 800b232:	bf00      	nop
 800b234:	08017a80 	.word	0x08017a80
 800b238:	08017a78 	.word	0x08017a78

0800b23c <is_uxrce_rmw_identifier_valid>:
 800b23c:	b510      	push	{r4, lr}
 800b23e:	4604      	mov	r4, r0
 800b240:	b140      	cbz	r0, 800b254 <is_uxrce_rmw_identifier_valid+0x18>
 800b242:	f007 fbb5 	bl	80129b0 <rmw_get_implementation_identifier>
 800b246:	4601      	mov	r1, r0
 800b248:	4620      	mov	r0, r4
 800b24a:	f7f4 ffe1 	bl	8000210 <strcmp>
 800b24e:	fab0 f080 	clz	r0, r0
 800b252:	0940      	lsrs	r0, r0, #5
 800b254:	bd10      	pop	{r4, pc}
 800b256:	bf00      	nop

0800b258 <get_message_typesupport_handle>:
 800b258:	6883      	ldr	r3, [r0, #8]
 800b25a:	4718      	bx	r3

0800b25c <get_message_typesupport_handle_function>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	4604      	mov	r4, r0
 800b260:	6800      	ldr	r0, [r0, #0]
 800b262:	f7f4 ffd5 	bl	8000210 <strcmp>
 800b266:	2800      	cmp	r0, #0
 800b268:	bf0c      	ite	eq
 800b26a:	4620      	moveq	r0, r4
 800b26c:	2000      	movne	r0, #0
 800b26e:	bd10      	pop	{r4, pc}

0800b270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b270:	4b04      	ldr	r3, [pc, #16]	; (800b284 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	b10a      	cbz	r2, 800b27a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b276:	4803      	ldr	r0, [pc, #12]	; (800b284 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b278:	4770      	bx	lr
 800b27a:	4a03      	ldr	r2, [pc, #12]	; (800b288 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b27e:	6812      	ldr	r2, [r2, #0]
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	4770      	bx	lr
 800b284:	20000030 	.word	0x20000030
 800b288:	200000ac 	.word	0x200000ac

0800b28c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b28c:	4a02      	ldr	r2, [pc, #8]	; (800b298 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 800b28e:	4b03      	ldr	r3, [pc, #12]	; (800b29c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	200000ac 	.word	0x200000ac
 800b29c:	20000030 	.word	0x20000030

0800b2a0 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 800b2a0:	f008 bc98 	b.w	8013bd4 <std_msgs__msg__Float32__init>

0800b2a4 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 800b2a4:	f008 bc9a 	b.w	8013bdc <std_msgs__msg__Float32__fini>

0800b2a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	b10a      	cbz	r2, 800b2b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b2ae:	4803      	ldr	r0, [pc, #12]	; (800b2bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b2b0:	4770      	bx	lr
 800b2b2:	4a03      	ldr	r2, [pc, #12]	; (800b2c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b2b4:	4801      	ldr	r0, [pc, #4]	; (800b2bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b2b6:	6812      	ldr	r2, [r2, #0]
 800b2b8:	601a      	str	r2, [r3, #0]
 800b2ba:	4770      	bx	lr
 800b2bc:	20000078 	.word	0x20000078
 800b2c0:	200000b0 	.word	0x200000b0

0800b2c4 <_Float32__max_serialized_size>:
 800b2c4:	b508      	push	{r3, lr}
 800b2c6:	2104      	movs	r1, #4
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	f001 f92f 	bl	800c52c <ucdr_alignment>
 800b2ce:	3004      	adds	r0, #4
 800b2d0:	bd08      	pop	{r3, pc}
 800b2d2:	bf00      	nop

0800b2d4 <_Float32__cdr_deserialize>:
 800b2d4:	b109      	cbz	r1, 800b2da <_Float32__cdr_deserialize+0x6>
 800b2d6:	f001 b841 	b.w	800c35c <ucdr_deserialize_float>
 800b2da:	4608      	mov	r0, r1
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop

0800b2e0 <get_serialized_size_std_msgs__msg__Float32>:
 800b2e0:	b138      	cbz	r0, 800b2f2 <get_serialized_size_std_msgs__msg__Float32+0x12>
 800b2e2:	b508      	push	{r3, lr}
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	2104      	movs	r1, #4
 800b2ea:	f001 f91f 	bl	800c52c <ucdr_alignment>
 800b2ee:	3004      	adds	r0, #4
 800b2f0:	bd08      	pop	{r3, pc}
 800b2f2:	4770      	bx	lr

0800b2f4 <_Float32__cdr_serialize>:
 800b2f4:	b120      	cbz	r0, 800b300 <_Float32__cdr_serialize+0xc>
 800b2f6:	ed90 0a00 	vldr	s0, [r0]
 800b2fa:	4608      	mov	r0, r1
 800b2fc:	f000 bf96 	b.w	800c22c <ucdr_serialize_float>
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop

0800b304 <_Float32__get_serialized_size>:
 800b304:	b130      	cbz	r0, 800b314 <_Float32__get_serialized_size+0x10>
 800b306:	b508      	push	{r3, lr}
 800b308:	2104      	movs	r1, #4
 800b30a:	2000      	movs	r0, #0
 800b30c:	f001 f90e 	bl	800c52c <ucdr_alignment>
 800b310:	3004      	adds	r0, #4
 800b312:	bd08      	pop	{r3, pc}
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop

0800b318 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b318:	4800      	ldr	r0, [pc, #0]	; (800b31c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 800b31a:	4770      	bx	lr
 800b31c:	20000084 	.word	0x20000084

0800b320 <ucdr_serialize_bool>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	460d      	mov	r5, r1
 800b324:	2101      	movs	r1, #1
 800b326:	4604      	mov	r4, r0
 800b328:	f001 f8b4 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b32c:	b148      	cbz	r0, 800b342 <ucdr_serialize_bool+0x22>
 800b32e:	68a3      	ldr	r3, [r4, #8]
 800b330:	701d      	strb	r5, [r3, #0]
 800b332:	68a2      	ldr	r2, [r4, #8]
 800b334:	6923      	ldr	r3, [r4, #16]
 800b336:	2101      	movs	r1, #1
 800b338:	440a      	add	r2, r1
 800b33a:	440b      	add	r3, r1
 800b33c:	60a2      	str	r2, [r4, #8]
 800b33e:	6123      	str	r3, [r4, #16]
 800b340:	7561      	strb	r1, [r4, #21]
 800b342:	7da0      	ldrb	r0, [r4, #22]
 800b344:	f080 0001 	eor.w	r0, r0, #1
 800b348:	bd38      	pop	{r3, r4, r5, pc}
 800b34a:	bf00      	nop

0800b34c <ucdr_deserialize_bool>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	460d      	mov	r5, r1
 800b350:	2101      	movs	r1, #1
 800b352:	4604      	mov	r4, r0
 800b354:	f001 f89e 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b358:	b160      	cbz	r0, 800b374 <ucdr_deserialize_bool+0x28>
 800b35a:	68a2      	ldr	r2, [r4, #8]
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b362:	3900      	subs	r1, #0
 800b364:	bf18      	it	ne
 800b366:	2101      	movne	r1, #1
 800b368:	7029      	strb	r1, [r5, #0]
 800b36a:	3301      	adds	r3, #1
 800b36c:	2101      	movs	r1, #1
 800b36e:	60a2      	str	r2, [r4, #8]
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	7561      	strb	r1, [r4, #21]
 800b374:	7da0      	ldrb	r0, [r4, #22]
 800b376:	f080 0001 	eor.w	r0, r0, #1
 800b37a:	bd38      	pop	{r3, r4, r5, pc}

0800b37c <ucdr_serialize_uint8_t>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	460d      	mov	r5, r1
 800b380:	2101      	movs	r1, #1
 800b382:	4604      	mov	r4, r0
 800b384:	f001 f886 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b388:	b148      	cbz	r0, 800b39e <ucdr_serialize_uint8_t+0x22>
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	701d      	strb	r5, [r3, #0]
 800b38e:	68a2      	ldr	r2, [r4, #8]
 800b390:	6923      	ldr	r3, [r4, #16]
 800b392:	2101      	movs	r1, #1
 800b394:	440a      	add	r2, r1
 800b396:	440b      	add	r3, r1
 800b398:	60a2      	str	r2, [r4, #8]
 800b39a:	6123      	str	r3, [r4, #16]
 800b39c:	7561      	strb	r1, [r4, #21]
 800b39e:	7da0      	ldrb	r0, [r4, #22]
 800b3a0:	f080 0001 	eor.w	r0, r0, #1
 800b3a4:	bd38      	pop	{r3, r4, r5, pc}
 800b3a6:	bf00      	nop

0800b3a8 <ucdr_deserialize_uint8_t>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	f001 f870 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b3b4:	b150      	cbz	r0, 800b3cc <ucdr_deserialize_uint8_t+0x24>
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	702b      	strb	r3, [r5, #0]
 800b3bc:	68a2      	ldr	r2, [r4, #8]
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	440a      	add	r2, r1
 800b3c4:	440b      	add	r3, r1
 800b3c6:	60a2      	str	r2, [r4, #8]
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	7561      	strb	r1, [r4, #21]
 800b3cc:	7da0      	ldrb	r0, [r4, #22]
 800b3ce:	f080 0001 	eor.w	r0, r0, #1
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}

0800b3d4 <ucdr_serialize_uint16_t>:
 800b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	460b      	mov	r3, r1
 800b3dc:	2102      	movs	r1, #2
 800b3de:	4604      	mov	r4, r0
 800b3e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b3e4:	f001 f8aa 	bl	800c53c <ucdr_buffer_alignment>
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	7d67      	ldrb	r7, [r4, #21]
 800b3ee:	f001 f8e9 	bl	800c5c4 <ucdr_advance_buffer>
 800b3f2:	2102      	movs	r1, #2
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f001 f841 	bl	800c47c <ucdr_check_buffer_available_for>
 800b3fa:	bb78      	cbnz	r0, 800b45c <ucdr_serialize_uint16_t+0x88>
 800b3fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b400:	42ab      	cmp	r3, r5
 800b402:	d926      	bls.n	800b452 <ucdr_serialize_uint16_t+0x7e>
 800b404:	1b5e      	subs	r6, r3, r5
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	f1c6 0802 	rsb	r8, r6, #2
 800b40e:	4433      	add	r3, r6
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	4641      	mov	r1, r8
 800b414:	4620      	mov	r0, r4
 800b416:	f001 f83d 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d03b      	beq.n	800b496 <ucdr_serialize_uint16_t+0xc2>
 800b41e:	7d23      	ldrb	r3, [r4, #20]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d04a      	beq.n	800b4ba <ucdr_serialize_uint16_t+0xe6>
 800b424:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b428:	702b      	strb	r3, [r5, #0]
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	d040      	beq.n	800b4b0 <ucdr_serialize_uint16_t+0xdc>
 800b42e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b432:	706b      	strb	r3, [r5, #1]
 800b434:	6923      	ldr	r3, [r4, #16]
 800b436:	68a2      	ldr	r2, [r4, #8]
 800b438:	7da0      	ldrb	r0, [r4, #22]
 800b43a:	3302      	adds	r3, #2
 800b43c:	1b9e      	subs	r6, r3, r6
 800b43e:	4442      	add	r2, r8
 800b440:	2302      	movs	r3, #2
 800b442:	f080 0001 	eor.w	r0, r0, #1
 800b446:	60a2      	str	r2, [r4, #8]
 800b448:	6126      	str	r6, [r4, #16]
 800b44a:	7563      	strb	r3, [r4, #21]
 800b44c:	b002      	add	sp, #8
 800b44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b452:	2102      	movs	r1, #2
 800b454:	4620      	mov	r0, r4
 800b456:	f001 f81d 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b45a:	b190      	cbz	r0, 800b482 <ucdr_serialize_uint16_t+0xae>
 800b45c:	7d23      	ldrb	r3, [r4, #20]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	68a3      	ldr	r3, [r4, #8]
 800b462:	d014      	beq.n	800b48e <ucdr_serialize_uint16_t+0xba>
 800b464:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b470:	705a      	strb	r2, [r3, #1]
 800b472:	68a2      	ldr	r2, [r4, #8]
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	3202      	adds	r2, #2
 800b478:	3302      	adds	r3, #2
 800b47a:	2102      	movs	r1, #2
 800b47c:	60a2      	str	r2, [r4, #8]
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	7561      	strb	r1, [r4, #21]
 800b482:	7da0      	ldrb	r0, [r4, #22]
 800b484:	f080 0001 	eor.w	r0, r0, #1
 800b488:	b002      	add	sp, #8
 800b48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b48e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b492:	801a      	strh	r2, [r3, #0]
 800b494:	e7ed      	b.n	800b472 <ucdr_serialize_uint16_t+0x9e>
 800b496:	68a2      	ldr	r2, [r4, #8]
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	7da0      	ldrb	r0, [r4, #22]
 800b49c:	7567      	strb	r7, [r4, #21]
 800b49e:	1b92      	subs	r2, r2, r6
 800b4a0:	1b9b      	subs	r3, r3, r6
 800b4a2:	f080 0001 	eor.w	r0, r0, #1
 800b4a6:	60a2      	str	r2, [r4, #8]
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	b002      	add	sp, #8
 800b4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b0:	68a3      	ldr	r3, [r4, #8]
 800b4b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	e7bc      	b.n	800b434 <ucdr_serialize_uint16_t+0x60>
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f10d 0506 	add.w	r5, sp, #6
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	f00b fa21 	bl	801690a <memcpy>
 800b4c8:	68a0      	ldr	r0, [r4, #8]
 800b4ca:	4642      	mov	r2, r8
 800b4cc:	19a9      	adds	r1, r5, r6
 800b4ce:	f00b fa1c 	bl	801690a <memcpy>
 800b4d2:	e7af      	b.n	800b434 <ucdr_serialize_uint16_t+0x60>

0800b4d4 <ucdr_serialize_endian_uint16_t>:
 800b4d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4d8:	b083      	sub	sp, #12
 800b4da:	460d      	mov	r5, r1
 800b4dc:	2102      	movs	r1, #2
 800b4de:	4604      	mov	r4, r0
 800b4e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b4e4:	f001 f82a 	bl	800c53c <ucdr_buffer_alignment>
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4f0:	f001 f868 	bl	800c5c4 <ucdr_advance_buffer>
 800b4f4:	2102      	movs	r1, #2
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 ffc0 	bl	800c47c <ucdr_check_buffer_available_for>
 800b4fc:	bb70      	cbnz	r0, 800b55c <ucdr_serialize_endian_uint16_t+0x88>
 800b4fe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b502:	42be      	cmp	r6, r7
 800b504:	d925      	bls.n	800b552 <ucdr_serialize_endian_uint16_t+0x7e>
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	60a6      	str	r6, [r4, #8]
 800b50a:	1bf6      	subs	r6, r6, r7
 800b50c:	4433      	add	r3, r6
 800b50e:	f1c6 0902 	rsb	r9, r6, #2
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	4649      	mov	r1, r9
 800b516:	4620      	mov	r0, r4
 800b518:	f000 ffbc 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d039      	beq.n	800b594 <ucdr_serialize_endian_uint16_t+0xc0>
 800b520:	2d01      	cmp	r5, #1
 800b522:	d04a      	beq.n	800b5ba <ucdr_serialize_endian_uint16_t+0xe6>
 800b524:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b528:	703b      	strb	r3, [r7, #0]
 800b52a:	2e00      	cmp	r6, #0
 800b52c:	d040      	beq.n	800b5b0 <ucdr_serialize_endian_uint16_t+0xdc>
 800b52e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b532:	707b      	strb	r3, [r7, #1]
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	68a2      	ldr	r2, [r4, #8]
 800b538:	7da0      	ldrb	r0, [r4, #22]
 800b53a:	3302      	adds	r3, #2
 800b53c:	444a      	add	r2, r9
 800b53e:	1b9b      	subs	r3, r3, r6
 800b540:	2102      	movs	r1, #2
 800b542:	f080 0001 	eor.w	r0, r0, #1
 800b546:	60a2      	str	r2, [r4, #8]
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	7561      	strb	r1, [r4, #21]
 800b54c:	b003      	add	sp, #12
 800b54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b552:	2102      	movs	r1, #2
 800b554:	4620      	mov	r0, r4
 800b556:	f000 ff9d 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b55a:	b188      	cbz	r0, 800b580 <ucdr_serialize_endian_uint16_t+0xac>
 800b55c:	2d01      	cmp	r5, #1
 800b55e:	68a3      	ldr	r3, [r4, #8]
 800b560:	d014      	beq.n	800b58c <ucdr_serialize_endian_uint16_t+0xb8>
 800b562:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	68a3      	ldr	r3, [r4, #8]
 800b56a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b56e:	705a      	strb	r2, [r3, #1]
 800b570:	68a2      	ldr	r2, [r4, #8]
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	3202      	adds	r2, #2
 800b576:	3302      	adds	r3, #2
 800b578:	2102      	movs	r1, #2
 800b57a:	60a2      	str	r2, [r4, #8]
 800b57c:	6123      	str	r3, [r4, #16]
 800b57e:	7561      	strb	r1, [r4, #21]
 800b580:	7da0      	ldrb	r0, [r4, #22]
 800b582:	f080 0001 	eor.w	r0, r0, #1
 800b586:	b003      	add	sp, #12
 800b588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b590:	801a      	strh	r2, [r3, #0]
 800b592:	e7ed      	b.n	800b570 <ucdr_serialize_endian_uint16_t+0x9c>
 800b594:	68a2      	ldr	r2, [r4, #8]
 800b596:	6923      	ldr	r3, [r4, #16]
 800b598:	7da0      	ldrb	r0, [r4, #22]
 800b59a:	f884 8015 	strb.w	r8, [r4, #21]
 800b59e:	1b92      	subs	r2, r2, r6
 800b5a0:	1b9b      	subs	r3, r3, r6
 800b5a2:	f080 0001 	eor.w	r0, r0, #1
 800b5a6:	60a2      	str	r2, [r4, #8]
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	b003      	add	sp, #12
 800b5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5b0:	68a3      	ldr	r3, [r4, #8]
 800b5b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	e7bc      	b.n	800b534 <ucdr_serialize_endian_uint16_t+0x60>
 800b5ba:	f10d 0506 	add.w	r5, sp, #6
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4632      	mov	r2, r6
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	f00b f9a1 	bl	801690a <memcpy>
 800b5c8:	68a0      	ldr	r0, [r4, #8]
 800b5ca:	464a      	mov	r2, r9
 800b5cc:	19a9      	adds	r1, r5, r6
 800b5ce:	f00b f99c 	bl	801690a <memcpy>
 800b5d2:	e7af      	b.n	800b534 <ucdr_serialize_endian_uint16_t+0x60>

0800b5d4 <ucdr_deserialize_uint16_t>:
 800b5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d8:	460d      	mov	r5, r1
 800b5da:	2102      	movs	r1, #2
 800b5dc:	4604      	mov	r4, r0
 800b5de:	f000 ffad 	bl	800c53c <ucdr_buffer_alignment>
 800b5e2:	4601      	mov	r1, r0
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b5ea:	f000 ffeb 	bl	800c5c4 <ucdr_advance_buffer>
 800b5ee:	2102      	movs	r1, #2
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 ff43 	bl	800c47c <ucdr_check_buffer_available_for>
 800b5f6:	bb60      	cbnz	r0, 800b652 <ucdr_deserialize_uint16_t+0x7e>
 800b5f8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b5fc:	42be      	cmp	r6, r7
 800b5fe:	d923      	bls.n	800b648 <ucdr_deserialize_uint16_t+0x74>
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	60a6      	str	r6, [r4, #8]
 800b604:	1bf6      	subs	r6, r6, r7
 800b606:	4433      	add	r3, r6
 800b608:	f1c6 0902 	rsb	r9, r6, #2
 800b60c:	6123      	str	r3, [r4, #16]
 800b60e:	4649      	mov	r1, r9
 800b610:	4620      	mov	r0, r4
 800b612:	f000 ff3f 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b616:	2800      	cmp	r0, #0
 800b618:	d034      	beq.n	800b684 <ucdr_deserialize_uint16_t+0xb0>
 800b61a:	7d23      	ldrb	r3, [r4, #20]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d042      	beq.n	800b6a6 <ucdr_deserialize_uint16_t+0xd2>
 800b620:	787b      	ldrb	r3, [r7, #1]
 800b622:	702b      	strb	r3, [r5, #0]
 800b624:	2e00      	cmp	r6, #0
 800b626:	d03a      	beq.n	800b69e <ucdr_deserialize_uint16_t+0xca>
 800b628:	783b      	ldrb	r3, [r7, #0]
 800b62a:	706b      	strb	r3, [r5, #1]
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	68a2      	ldr	r2, [r4, #8]
 800b630:	7da0      	ldrb	r0, [r4, #22]
 800b632:	2102      	movs	r1, #2
 800b634:	3302      	adds	r3, #2
 800b636:	444a      	add	r2, r9
 800b638:	1b9b      	subs	r3, r3, r6
 800b63a:	7561      	strb	r1, [r4, #21]
 800b63c:	60a2      	str	r2, [r4, #8]
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	f080 0001 	eor.w	r0, r0, #1
 800b644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b648:	2102      	movs	r1, #2
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 ff22 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b650:	b180      	cbz	r0, 800b674 <ucdr_deserialize_uint16_t+0xa0>
 800b652:	7d23      	ldrb	r3, [r4, #20]
 800b654:	2b01      	cmp	r3, #1
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	d011      	beq.n	800b67e <ucdr_deserialize_uint16_t+0xaa>
 800b65a:	785b      	ldrb	r3, [r3, #1]
 800b65c:	702b      	strb	r3, [r5, #0]
 800b65e:	68a3      	ldr	r3, [r4, #8]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	706b      	strb	r3, [r5, #1]
 800b664:	68a2      	ldr	r2, [r4, #8]
 800b666:	6923      	ldr	r3, [r4, #16]
 800b668:	3202      	adds	r2, #2
 800b66a:	3302      	adds	r3, #2
 800b66c:	2102      	movs	r1, #2
 800b66e:	60a2      	str	r2, [r4, #8]
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	7561      	strb	r1, [r4, #21]
 800b674:	7da0      	ldrb	r0, [r4, #22]
 800b676:	f080 0001 	eor.w	r0, r0, #1
 800b67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	802b      	strh	r3, [r5, #0]
 800b682:	e7ef      	b.n	800b664 <ucdr_deserialize_uint16_t+0x90>
 800b684:	68a2      	ldr	r2, [r4, #8]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	7da0      	ldrb	r0, [r4, #22]
 800b68a:	f884 8015 	strb.w	r8, [r4, #21]
 800b68e:	1b92      	subs	r2, r2, r6
 800b690:	1b9b      	subs	r3, r3, r6
 800b692:	60a2      	str	r2, [r4, #8]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	f080 0001 	eor.w	r0, r0, #1
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	706b      	strb	r3, [r5, #1]
 800b6a4:	e7c2      	b.n	800b62c <ucdr_deserialize_uint16_t+0x58>
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f00b f92d 	bl	801690a <memcpy>
 800b6b0:	68a1      	ldr	r1, [r4, #8]
 800b6b2:	464a      	mov	r2, r9
 800b6b4:	19a8      	adds	r0, r5, r6
 800b6b6:	f00b f928 	bl	801690a <memcpy>
 800b6ba:	e7b7      	b.n	800b62c <ucdr_deserialize_uint16_t+0x58>

0800b6bc <ucdr_deserialize_endian_uint16_t>:
 800b6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c0:	460e      	mov	r6, r1
 800b6c2:	2102      	movs	r1, #2
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	4615      	mov	r5, r2
 800b6c8:	f000 ff38 	bl	800c53c <ucdr_buffer_alignment>
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b6d4:	f000 ff76 	bl	800c5c4 <ucdr_advance_buffer>
 800b6d8:	2102      	movs	r1, #2
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 fece 	bl	800c47c <ucdr_check_buffer_available_for>
 800b6e0:	bb70      	cbnz	r0, 800b740 <ucdr_deserialize_endian_uint16_t+0x84>
 800b6e2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b6e6:	4547      	cmp	r7, r8
 800b6e8:	d925      	bls.n	800b736 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	60a7      	str	r7, [r4, #8]
 800b6ee:	eba7 0708 	sub.w	r7, r7, r8
 800b6f2:	443b      	add	r3, r7
 800b6f4:	f1c7 0a02 	rsb	sl, r7, #2
 800b6f8:	6123      	str	r3, [r4, #16]
 800b6fa:	4651      	mov	r1, sl
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f000 fec9 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b702:	2800      	cmp	r0, #0
 800b704:	d034      	beq.n	800b770 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b706:	2e01      	cmp	r6, #1
 800b708:	d043      	beq.n	800b792 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b70a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b70e:	702b      	strb	r3, [r5, #0]
 800b710:	2f00      	cmp	r7, #0
 800b712:	d03a      	beq.n	800b78a <ucdr_deserialize_endian_uint16_t+0xce>
 800b714:	f898 3000 	ldrb.w	r3, [r8]
 800b718:	706b      	strb	r3, [r5, #1]
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	68a2      	ldr	r2, [r4, #8]
 800b71e:	7da0      	ldrb	r0, [r4, #22]
 800b720:	2102      	movs	r1, #2
 800b722:	3302      	adds	r3, #2
 800b724:	4452      	add	r2, sl
 800b726:	1bdb      	subs	r3, r3, r7
 800b728:	7561      	strb	r1, [r4, #21]
 800b72a:	60a2      	str	r2, [r4, #8]
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	f080 0001 	eor.w	r0, r0, #1
 800b732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b736:	2102      	movs	r1, #2
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 feab 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b73e:	b178      	cbz	r0, 800b760 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b740:	2e01      	cmp	r6, #1
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	d011      	beq.n	800b76a <ucdr_deserialize_endian_uint16_t+0xae>
 800b746:	785b      	ldrb	r3, [r3, #1]
 800b748:	702b      	strb	r3, [r5, #0]
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	706b      	strb	r3, [r5, #1]
 800b750:	68a2      	ldr	r2, [r4, #8]
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	3202      	adds	r2, #2
 800b756:	3302      	adds	r3, #2
 800b758:	2102      	movs	r1, #2
 800b75a:	60a2      	str	r2, [r4, #8]
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	7561      	strb	r1, [r4, #21]
 800b760:	7da0      	ldrb	r0, [r4, #22]
 800b762:	f080 0001 	eor.w	r0, r0, #1
 800b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	802b      	strh	r3, [r5, #0]
 800b76e:	e7ef      	b.n	800b750 <ucdr_deserialize_endian_uint16_t+0x94>
 800b770:	68a2      	ldr	r2, [r4, #8]
 800b772:	6923      	ldr	r3, [r4, #16]
 800b774:	7da0      	ldrb	r0, [r4, #22]
 800b776:	f884 9015 	strb.w	r9, [r4, #21]
 800b77a:	1bd2      	subs	r2, r2, r7
 800b77c:	1bdb      	subs	r3, r3, r7
 800b77e:	60a2      	str	r2, [r4, #8]
 800b780:	6123      	str	r3, [r4, #16]
 800b782:	f080 0001 	eor.w	r0, r0, #1
 800b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	706b      	strb	r3, [r5, #1]
 800b790:	e7c3      	b.n	800b71a <ucdr_deserialize_endian_uint16_t+0x5e>
 800b792:	4641      	mov	r1, r8
 800b794:	463a      	mov	r2, r7
 800b796:	4628      	mov	r0, r5
 800b798:	f00b f8b7 	bl	801690a <memcpy>
 800b79c:	68a1      	ldr	r1, [r4, #8]
 800b79e:	4652      	mov	r2, sl
 800b7a0:	19e8      	adds	r0, r5, r7
 800b7a2:	f00b f8b2 	bl	801690a <memcpy>
 800b7a6:	e7b8      	b.n	800b71a <ucdr_deserialize_endian_uint16_t+0x5e>

0800b7a8 <ucdr_serialize_uint32_t>:
 800b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	9101      	str	r1, [sp, #4]
 800b7b2:	2104      	movs	r1, #4
 800b7b4:	f000 fec2 	bl	800c53c <ucdr_buffer_alignment>
 800b7b8:	4601      	mov	r1, r0
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	7d67      	ldrb	r7, [r4, #21]
 800b7be:	f000 ff01 	bl	800c5c4 <ucdr_advance_buffer>
 800b7c2:	2104      	movs	r1, #4
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 fe59 	bl	800c47c <ucdr_check_buffer_available_for>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d139      	bne.n	800b842 <ucdr_serialize_uint32_t+0x9a>
 800b7ce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7d2:	42ab      	cmp	r3, r5
 800b7d4:	d930      	bls.n	800b838 <ucdr_serialize_uint32_t+0x90>
 800b7d6:	1b5e      	subs	r6, r3, r5
 800b7d8:	60a3      	str	r3, [r4, #8]
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	f1c6 0804 	rsb	r8, r6, #4
 800b7e0:	4433      	add	r3, r6
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	4641      	mov	r1, r8
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f000 fe54 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d04c      	beq.n	800b88a <ucdr_serialize_uint32_t+0xe2>
 800b7f0:	7d23      	ldrb	r3, [r4, #20]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d063      	beq.n	800b8be <ucdr_serialize_uint32_t+0x116>
 800b7f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7fa:	702b      	strb	r3, [r5, #0]
 800b7fc:	2e00      	cmp	r6, #0
 800b7fe:	d051      	beq.n	800b8a4 <ucdr_serialize_uint32_t+0xfc>
 800b800:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b804:	706b      	strb	r3, [r5, #1]
 800b806:	2e01      	cmp	r6, #1
 800b808:	d050      	beq.n	800b8ac <ucdr_serialize_uint32_t+0x104>
 800b80a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b80e:	70ab      	strb	r3, [r5, #2]
 800b810:	2e02      	cmp	r6, #2
 800b812:	d04f      	beq.n	800b8b4 <ucdr_serialize_uint32_t+0x10c>
 800b814:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b818:	70eb      	strb	r3, [r5, #3]
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	68a2      	ldr	r2, [r4, #8]
 800b81e:	7da0      	ldrb	r0, [r4, #22]
 800b820:	3304      	adds	r3, #4
 800b822:	1b9e      	subs	r6, r3, r6
 800b824:	4442      	add	r2, r8
 800b826:	2304      	movs	r3, #4
 800b828:	f080 0001 	eor.w	r0, r0, #1
 800b82c:	60a2      	str	r2, [r4, #8]
 800b82e:	6126      	str	r6, [r4, #16]
 800b830:	7563      	strb	r3, [r4, #21]
 800b832:	b002      	add	sp, #8
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b838:	2104      	movs	r1, #4
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 fe2a 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b840:	b1d0      	cbz	r0, 800b878 <ucdr_serialize_uint32_t+0xd0>
 800b842:	7d23      	ldrb	r3, [r4, #20]
 800b844:	2b01      	cmp	r3, #1
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	d01c      	beq.n	800b884 <ucdr_serialize_uint32_t+0xdc>
 800b84a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b84e:	701a      	strb	r2, [r3, #0]
 800b850:	68a3      	ldr	r3, [r4, #8]
 800b852:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b856:	705a      	strb	r2, [r3, #1]
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b85e:	709a      	strb	r2, [r3, #2]
 800b860:	68a3      	ldr	r3, [r4, #8]
 800b862:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b866:	70da      	strb	r2, [r3, #3]
 800b868:	68a2      	ldr	r2, [r4, #8]
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	3204      	adds	r2, #4
 800b86e:	3304      	adds	r3, #4
 800b870:	2104      	movs	r1, #4
 800b872:	60a2      	str	r2, [r4, #8]
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	7561      	strb	r1, [r4, #21]
 800b878:	7da0      	ldrb	r0, [r4, #22]
 800b87a:	f080 0001 	eor.w	r0, r0, #1
 800b87e:	b002      	add	sp, #8
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	9a01      	ldr	r2, [sp, #4]
 800b886:	601a      	str	r2, [r3, #0]
 800b888:	e7ee      	b.n	800b868 <ucdr_serialize_uint32_t+0xc0>
 800b88a:	68a2      	ldr	r2, [r4, #8]
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	7da0      	ldrb	r0, [r4, #22]
 800b890:	7567      	strb	r7, [r4, #21]
 800b892:	1b92      	subs	r2, r2, r6
 800b894:	1b9b      	subs	r3, r3, r6
 800b896:	f080 0001 	eor.w	r0, r0, #1
 800b89a:	60a2      	str	r2, [r4, #8]
 800b89c:	6123      	str	r3, [r4, #16]
 800b89e:	b002      	add	sp, #8
 800b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a4:	68a3      	ldr	r3, [r4, #8]
 800b8a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8aa:	701a      	strb	r2, [r3, #0]
 800b8ac:	68a3      	ldr	r3, [r4, #8]
 800b8ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	68a3      	ldr	r3, [r4, #8]
 800b8b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8ba:	701a      	strb	r2, [r3, #0]
 800b8bc:	e7ad      	b.n	800b81a <ucdr_serialize_uint32_t+0x72>
 800b8be:	4628      	mov	r0, r5
 800b8c0:	ad01      	add	r5, sp, #4
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	f00b f820 	bl	801690a <memcpy>
 800b8ca:	68a0      	ldr	r0, [r4, #8]
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	19a9      	adds	r1, r5, r6
 800b8d0:	f00b f81b 	bl	801690a <memcpy>
 800b8d4:	e7a1      	b.n	800b81a <ucdr_serialize_uint32_t+0x72>
 800b8d6:	bf00      	nop

0800b8d8 <ucdr_serialize_endian_uint32_t>:
 800b8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	460d      	mov	r5, r1
 800b8e0:	2104      	movs	r1, #4
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	9201      	str	r2, [sp, #4]
 800b8e6:	f000 fe29 	bl	800c53c <ucdr_buffer_alignment>
 800b8ea:	4601      	mov	r1, r0
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b8f2:	f000 fe67 	bl	800c5c4 <ucdr_advance_buffer>
 800b8f6:	2104      	movs	r1, #4
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 fdbf 	bl	800c47c <ucdr_check_buffer_available_for>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d138      	bne.n	800b974 <ucdr_serialize_endian_uint32_t+0x9c>
 800b902:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b906:	42b7      	cmp	r7, r6
 800b908:	d92f      	bls.n	800b96a <ucdr_serialize_endian_uint32_t+0x92>
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	60a7      	str	r7, [r4, #8]
 800b90e:	1bbf      	subs	r7, r7, r6
 800b910:	443b      	add	r3, r7
 800b912:	f1c7 0904 	rsb	r9, r7, #4
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	4649      	mov	r1, r9
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 fdba 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b920:	2800      	cmp	r0, #0
 800b922:	d04a      	beq.n	800b9ba <ucdr_serialize_endian_uint32_t+0xe2>
 800b924:	2d01      	cmp	r5, #1
 800b926:	d063      	beq.n	800b9f0 <ucdr_serialize_endian_uint32_t+0x118>
 800b928:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b92c:	7033      	strb	r3, [r6, #0]
 800b92e:	2f00      	cmp	r7, #0
 800b930:	d051      	beq.n	800b9d6 <ucdr_serialize_endian_uint32_t+0xfe>
 800b932:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b936:	7073      	strb	r3, [r6, #1]
 800b938:	2f01      	cmp	r7, #1
 800b93a:	d050      	beq.n	800b9de <ucdr_serialize_endian_uint32_t+0x106>
 800b93c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b940:	70b3      	strb	r3, [r6, #2]
 800b942:	2f02      	cmp	r7, #2
 800b944:	d04f      	beq.n	800b9e6 <ucdr_serialize_endian_uint32_t+0x10e>
 800b946:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b94a:	70f3      	strb	r3, [r6, #3]
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	68a2      	ldr	r2, [r4, #8]
 800b950:	7da0      	ldrb	r0, [r4, #22]
 800b952:	3304      	adds	r3, #4
 800b954:	444a      	add	r2, r9
 800b956:	1bdb      	subs	r3, r3, r7
 800b958:	2104      	movs	r1, #4
 800b95a:	f080 0001 	eor.w	r0, r0, #1
 800b95e:	60a2      	str	r2, [r4, #8]
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	7561      	strb	r1, [r4, #21]
 800b964:	b003      	add	sp, #12
 800b966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b96a:	2104      	movs	r1, #4
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 fd91 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b972:	b1c8      	cbz	r0, 800b9a8 <ucdr_serialize_endian_uint32_t+0xd0>
 800b974:	2d01      	cmp	r5, #1
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	d01c      	beq.n	800b9b4 <ucdr_serialize_endian_uint32_t+0xdc>
 800b97a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b97e:	701a      	strb	r2, [r3, #0]
 800b980:	68a3      	ldr	r3, [r4, #8]
 800b982:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b986:	705a      	strb	r2, [r3, #1]
 800b988:	68a3      	ldr	r3, [r4, #8]
 800b98a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b98e:	709a      	strb	r2, [r3, #2]
 800b990:	68a3      	ldr	r3, [r4, #8]
 800b992:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b996:	70da      	strb	r2, [r3, #3]
 800b998:	68a2      	ldr	r2, [r4, #8]
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	3204      	adds	r2, #4
 800b99e:	3304      	adds	r3, #4
 800b9a0:	2104      	movs	r1, #4
 800b9a2:	60a2      	str	r2, [r4, #8]
 800b9a4:	6123      	str	r3, [r4, #16]
 800b9a6:	7561      	strb	r1, [r4, #21]
 800b9a8:	7da0      	ldrb	r0, [r4, #22]
 800b9aa:	f080 0001 	eor.w	r0, r0, #1
 800b9ae:	b003      	add	sp, #12
 800b9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9b4:	9a01      	ldr	r2, [sp, #4]
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	e7ee      	b.n	800b998 <ucdr_serialize_endian_uint32_t+0xc0>
 800b9ba:	68a2      	ldr	r2, [r4, #8]
 800b9bc:	6923      	ldr	r3, [r4, #16]
 800b9be:	7da0      	ldrb	r0, [r4, #22]
 800b9c0:	f884 8015 	strb.w	r8, [r4, #21]
 800b9c4:	1bd2      	subs	r2, r2, r7
 800b9c6:	1bdb      	subs	r3, r3, r7
 800b9c8:	f080 0001 	eor.w	r0, r0, #1
 800b9cc:	60a2      	str	r2, [r4, #8]
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	b003      	add	sp, #12
 800b9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	68a3      	ldr	r3, [r4, #8]
 800b9e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	e7ad      	b.n	800b94c <ucdr_serialize_endian_uint32_t+0x74>
 800b9f0:	ad01      	add	r5, sp, #4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	463a      	mov	r2, r7
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f00a ff87 	bl	801690a <memcpy>
 800b9fc:	68a0      	ldr	r0, [r4, #8]
 800b9fe:	464a      	mov	r2, r9
 800ba00:	19e9      	adds	r1, r5, r7
 800ba02:	f00a ff82 	bl	801690a <memcpy>
 800ba06:	e7a1      	b.n	800b94c <ucdr_serialize_endian_uint32_t+0x74>

0800ba08 <ucdr_deserialize_uint32_t>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	2104      	movs	r1, #4
 800ba10:	4604      	mov	r4, r0
 800ba12:	f000 fd93 	bl	800c53c <ucdr_buffer_alignment>
 800ba16:	4601      	mov	r1, r0
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba1e:	f000 fdd1 	bl	800c5c4 <ucdr_advance_buffer>
 800ba22:	2104      	movs	r1, #4
 800ba24:	4620      	mov	r0, r4
 800ba26:	f000 fd29 	bl	800c47c <ucdr_check_buffer_available_for>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d138      	bne.n	800baa0 <ucdr_deserialize_uint32_t+0x98>
 800ba2e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ba32:	42b7      	cmp	r7, r6
 800ba34:	d92f      	bls.n	800ba96 <ucdr_deserialize_uint32_t+0x8e>
 800ba36:	6923      	ldr	r3, [r4, #16]
 800ba38:	60a7      	str	r7, [r4, #8]
 800ba3a:	1bbf      	subs	r7, r7, r6
 800ba3c:	443b      	add	r3, r7
 800ba3e:	f1c7 0904 	rsb	r9, r7, #4
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	4649      	mov	r1, r9
 800ba46:	4620      	mov	r0, r4
 800ba48:	f000 fd24 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d046      	beq.n	800bade <ucdr_deserialize_uint32_t+0xd6>
 800ba50:	7d23      	ldrb	r3, [r4, #20]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d05c      	beq.n	800bb10 <ucdr_deserialize_uint32_t+0x108>
 800ba56:	78f3      	ldrb	r3, [r6, #3]
 800ba58:	702b      	strb	r3, [r5, #0]
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	d04c      	beq.n	800baf8 <ucdr_deserialize_uint32_t+0xf0>
 800ba5e:	78b3      	ldrb	r3, [r6, #2]
 800ba60:	706b      	strb	r3, [r5, #1]
 800ba62:	2f01      	cmp	r7, #1
 800ba64:	f105 0302 	add.w	r3, r5, #2
 800ba68:	d04a      	beq.n	800bb00 <ucdr_deserialize_uint32_t+0xf8>
 800ba6a:	7873      	ldrb	r3, [r6, #1]
 800ba6c:	70ab      	strb	r3, [r5, #2]
 800ba6e:	2f02      	cmp	r7, #2
 800ba70:	f105 0303 	add.w	r3, r5, #3
 800ba74:	d048      	beq.n	800bb08 <ucdr_deserialize_uint32_t+0x100>
 800ba76:	7833      	ldrb	r3, [r6, #0]
 800ba78:	70eb      	strb	r3, [r5, #3]
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	68a2      	ldr	r2, [r4, #8]
 800ba7e:	7da0      	ldrb	r0, [r4, #22]
 800ba80:	2104      	movs	r1, #4
 800ba82:	3304      	adds	r3, #4
 800ba84:	444a      	add	r2, r9
 800ba86:	1bdb      	subs	r3, r3, r7
 800ba88:	7561      	strb	r1, [r4, #21]
 800ba8a:	60a2      	str	r2, [r4, #8]
 800ba8c:	6123      	str	r3, [r4, #16]
 800ba8e:	f080 0001 	eor.w	r0, r0, #1
 800ba92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba96:	2104      	movs	r1, #4
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fcfb 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800ba9e:	b1b0      	cbz	r0, 800bace <ucdr_deserialize_uint32_t+0xc6>
 800baa0:	7d23      	ldrb	r3, [r4, #20]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	68a3      	ldr	r3, [r4, #8]
 800baa6:	d017      	beq.n	800bad8 <ucdr_deserialize_uint32_t+0xd0>
 800baa8:	78db      	ldrb	r3, [r3, #3]
 800baaa:	702b      	strb	r3, [r5, #0]
 800baac:	68a3      	ldr	r3, [r4, #8]
 800baae:	789b      	ldrb	r3, [r3, #2]
 800bab0:	706b      	strb	r3, [r5, #1]
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	70ab      	strb	r3, [r5, #2]
 800bab8:	68a3      	ldr	r3, [r4, #8]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	70eb      	strb	r3, [r5, #3]
 800babe:	68a2      	ldr	r2, [r4, #8]
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	3204      	adds	r2, #4
 800bac4:	3304      	adds	r3, #4
 800bac6:	2104      	movs	r1, #4
 800bac8:	60a2      	str	r2, [r4, #8]
 800baca:	6123      	str	r3, [r4, #16]
 800bacc:	7561      	strb	r1, [r4, #21]
 800bace:	7da0      	ldrb	r0, [r4, #22]
 800bad0:	f080 0001 	eor.w	r0, r0, #1
 800bad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	e7ef      	b.n	800babe <ucdr_deserialize_uint32_t+0xb6>
 800bade:	68a2      	ldr	r2, [r4, #8]
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	7da0      	ldrb	r0, [r4, #22]
 800bae4:	f884 8015 	strb.w	r8, [r4, #21]
 800bae8:	1bd2      	subs	r2, r2, r7
 800baea:	1bdb      	subs	r3, r3, r7
 800baec:	60a2      	str	r2, [r4, #8]
 800baee:	6123      	str	r3, [r4, #16]
 800baf0:	f080 0001 	eor.w	r0, r0, #1
 800baf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf8:	68a3      	ldr	r3, [r4, #8]
 800bafa:	789b      	ldrb	r3, [r3, #2]
 800bafc:	706b      	strb	r3, [r5, #1]
 800bafe:	1cab      	adds	r3, r5, #2
 800bb00:	68a2      	ldr	r2, [r4, #8]
 800bb02:	7852      	ldrb	r2, [r2, #1]
 800bb04:	f803 2b01 	strb.w	r2, [r3], #1
 800bb08:	68a2      	ldr	r2, [r4, #8]
 800bb0a:	7812      	ldrb	r2, [r2, #0]
 800bb0c:	701a      	strb	r2, [r3, #0]
 800bb0e:	e7b4      	b.n	800ba7a <ucdr_deserialize_uint32_t+0x72>
 800bb10:	4631      	mov	r1, r6
 800bb12:	463a      	mov	r2, r7
 800bb14:	4628      	mov	r0, r5
 800bb16:	f00a fef8 	bl	801690a <memcpy>
 800bb1a:	68a1      	ldr	r1, [r4, #8]
 800bb1c:	464a      	mov	r2, r9
 800bb1e:	19e8      	adds	r0, r5, r7
 800bb20:	f00a fef3 	bl	801690a <memcpy>
 800bb24:	e7a9      	b.n	800ba7a <ucdr_deserialize_uint32_t+0x72>
 800bb26:	bf00      	nop

0800bb28 <ucdr_deserialize_endian_uint32_t>:
 800bb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2c:	460e      	mov	r6, r1
 800bb2e:	2104      	movs	r1, #4
 800bb30:	4604      	mov	r4, r0
 800bb32:	4615      	mov	r5, r2
 800bb34:	f000 fd02 	bl	800c53c <ucdr_buffer_alignment>
 800bb38:	4601      	mov	r1, r0
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bb40:	f000 fd40 	bl	800c5c4 <ucdr_advance_buffer>
 800bb44:	2104      	movs	r1, #4
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 fc98 	bl	800c47c <ucdr_check_buffer_available_for>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d13c      	bne.n	800bbca <ucdr_deserialize_endian_uint32_t+0xa2>
 800bb50:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bb54:	42bb      	cmp	r3, r7
 800bb56:	d933      	bls.n	800bbc0 <ucdr_deserialize_endian_uint32_t+0x98>
 800bb58:	eba3 0807 	sub.w	r8, r3, r7
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	6923      	ldr	r3, [r4, #16]
 800bb60:	f1c8 0a04 	rsb	sl, r8, #4
 800bb64:	4443      	add	r3, r8
 800bb66:	6123      	str	r3, [r4, #16]
 800bb68:	4651      	mov	r1, sl
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f000 fc92 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d048      	beq.n	800bc06 <ucdr_deserialize_endian_uint32_t+0xde>
 800bb74:	2e01      	cmp	r6, #1
 800bb76:	d061      	beq.n	800bc3c <ucdr_deserialize_endian_uint32_t+0x114>
 800bb78:	78fb      	ldrb	r3, [r7, #3]
 800bb7a:	702b      	strb	r3, [r5, #0]
 800bb7c:	f1b8 0f00 	cmp.w	r8, #0
 800bb80:	d050      	beq.n	800bc24 <ucdr_deserialize_endian_uint32_t+0xfc>
 800bb82:	78bb      	ldrb	r3, [r7, #2]
 800bb84:	706b      	strb	r3, [r5, #1]
 800bb86:	f1b8 0f01 	cmp.w	r8, #1
 800bb8a:	f105 0302 	add.w	r3, r5, #2
 800bb8e:	d04d      	beq.n	800bc2c <ucdr_deserialize_endian_uint32_t+0x104>
 800bb90:	787b      	ldrb	r3, [r7, #1]
 800bb92:	70ab      	strb	r3, [r5, #2]
 800bb94:	f1b8 0f02 	cmp.w	r8, #2
 800bb98:	f105 0303 	add.w	r3, r5, #3
 800bb9c:	d04a      	beq.n	800bc34 <ucdr_deserialize_endian_uint32_t+0x10c>
 800bb9e:	783b      	ldrb	r3, [r7, #0]
 800bba0:	70eb      	strb	r3, [r5, #3]
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	68a2      	ldr	r2, [r4, #8]
 800bba6:	7da0      	ldrb	r0, [r4, #22]
 800bba8:	2104      	movs	r1, #4
 800bbaa:	3304      	adds	r3, #4
 800bbac:	4452      	add	r2, sl
 800bbae:	eba3 0308 	sub.w	r3, r3, r8
 800bbb2:	7561      	strb	r1, [r4, #21]
 800bbb4:	60a2      	str	r2, [r4, #8]
 800bbb6:	6123      	str	r3, [r4, #16]
 800bbb8:	f080 0001 	eor.w	r0, r0, #1
 800bbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc0:	2104      	movs	r1, #4
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f000 fc66 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bbc8:	b1a8      	cbz	r0, 800bbf6 <ucdr_deserialize_endian_uint32_t+0xce>
 800bbca:	2e01      	cmp	r6, #1
 800bbcc:	68a3      	ldr	r3, [r4, #8]
 800bbce:	d017      	beq.n	800bc00 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bbd0:	78db      	ldrb	r3, [r3, #3]
 800bbd2:	702b      	strb	r3, [r5, #0]
 800bbd4:	68a3      	ldr	r3, [r4, #8]
 800bbd6:	789b      	ldrb	r3, [r3, #2]
 800bbd8:	706b      	strb	r3, [r5, #1]
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	70ab      	strb	r3, [r5, #2]
 800bbe0:	68a3      	ldr	r3, [r4, #8]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	70eb      	strb	r3, [r5, #3]
 800bbe6:	68a2      	ldr	r2, [r4, #8]
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	3204      	adds	r2, #4
 800bbec:	3304      	adds	r3, #4
 800bbee:	2104      	movs	r1, #4
 800bbf0:	60a2      	str	r2, [r4, #8]
 800bbf2:	6123      	str	r3, [r4, #16]
 800bbf4:	7561      	strb	r1, [r4, #21]
 800bbf6:	7da0      	ldrb	r0, [r4, #22]
 800bbf8:	f080 0001 	eor.w	r0, r0, #1
 800bbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	602b      	str	r3, [r5, #0]
 800bc04:	e7ef      	b.n	800bbe6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800bc06:	68a2      	ldr	r2, [r4, #8]
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	7da0      	ldrb	r0, [r4, #22]
 800bc0c:	f884 9015 	strb.w	r9, [r4, #21]
 800bc10:	eba2 0208 	sub.w	r2, r2, r8
 800bc14:	eba3 0308 	sub.w	r3, r3, r8
 800bc18:	60a2      	str	r2, [r4, #8]
 800bc1a:	6123      	str	r3, [r4, #16]
 800bc1c:	f080 0001 	eor.w	r0, r0, #1
 800bc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc24:	68a3      	ldr	r3, [r4, #8]
 800bc26:	789b      	ldrb	r3, [r3, #2]
 800bc28:	706b      	strb	r3, [r5, #1]
 800bc2a:	1cab      	adds	r3, r5, #2
 800bc2c:	68a2      	ldr	r2, [r4, #8]
 800bc2e:	7852      	ldrb	r2, [r2, #1]
 800bc30:	f803 2b01 	strb.w	r2, [r3], #1
 800bc34:	68a2      	ldr	r2, [r4, #8]
 800bc36:	7812      	ldrb	r2, [r2, #0]
 800bc38:	701a      	strb	r2, [r3, #0]
 800bc3a:	e7b2      	b.n	800bba2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4642      	mov	r2, r8
 800bc40:	4628      	mov	r0, r5
 800bc42:	f00a fe62 	bl	801690a <memcpy>
 800bc46:	68a1      	ldr	r1, [r4, #8]
 800bc48:	4652      	mov	r2, sl
 800bc4a:	eb05 0008 	add.w	r0, r5, r8
 800bc4e:	f00a fe5c 	bl	801690a <memcpy>
 800bc52:	e7a6      	b.n	800bba2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800bc54 <ucdr_serialize_uint64_t>:
 800bc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc58:	2108      	movs	r1, #8
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	e9cd 2300 	strd	r2, r3, [sp]
 800bc62:	f000 fc6b 	bl	800c53c <ucdr_buffer_alignment>
 800bc66:	4601      	mov	r1, r0
 800bc68:	4620      	mov	r0, r4
 800bc6a:	7d67      	ldrb	r7, [r4, #21]
 800bc6c:	f000 fcaa 	bl	800c5c4 <ucdr_advance_buffer>
 800bc70:	2108      	movs	r1, #8
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 fc02 	bl	800c47c <ucdr_check_buffer_available_for>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d14e      	bne.n	800bd1a <ucdr_serialize_uint64_t+0xc6>
 800bc7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc80:	42ab      	cmp	r3, r5
 800bc82:	d945      	bls.n	800bd10 <ucdr_serialize_uint64_t+0xbc>
 800bc84:	1b5e      	subs	r6, r3, r5
 800bc86:	60a3      	str	r3, [r4, #8]
 800bc88:	6923      	ldr	r3, [r4, #16]
 800bc8a:	f1c6 0808 	rsb	r8, r6, #8
 800bc8e:	4433      	add	r3, r6
 800bc90:	6123      	str	r3, [r4, #16]
 800bc92:	4641      	mov	r1, r8
 800bc94:	4620      	mov	r0, r4
 800bc96:	f000 fbfd 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d074      	beq.n	800bd88 <ucdr_serialize_uint64_t+0x134>
 800bc9e:	7d23      	ldrb	r3, [r4, #20]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	f000 809b 	beq.w	800bddc <ucdr_serialize_uint64_t+0x188>
 800bca6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bcaa:	702b      	strb	r3, [r5, #0]
 800bcac:	2e00      	cmp	r6, #0
 800bcae:	d078      	beq.n	800bda2 <ucdr_serialize_uint64_t+0x14e>
 800bcb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bcb4:	706b      	strb	r3, [r5, #1]
 800bcb6:	2e01      	cmp	r6, #1
 800bcb8:	d077      	beq.n	800bdaa <ucdr_serialize_uint64_t+0x156>
 800bcba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bcbe:	70ab      	strb	r3, [r5, #2]
 800bcc0:	2e02      	cmp	r6, #2
 800bcc2:	d076      	beq.n	800bdb2 <ucdr_serialize_uint64_t+0x15e>
 800bcc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bcc8:	70eb      	strb	r3, [r5, #3]
 800bcca:	2e03      	cmp	r6, #3
 800bccc:	d075      	beq.n	800bdba <ucdr_serialize_uint64_t+0x166>
 800bcce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bcd2:	712b      	strb	r3, [r5, #4]
 800bcd4:	2e04      	cmp	r6, #4
 800bcd6:	d074      	beq.n	800bdc2 <ucdr_serialize_uint64_t+0x16e>
 800bcd8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bcdc:	716b      	strb	r3, [r5, #5]
 800bcde:	2e05      	cmp	r6, #5
 800bce0:	d073      	beq.n	800bdca <ucdr_serialize_uint64_t+0x176>
 800bce2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bce6:	71ab      	strb	r3, [r5, #6]
 800bce8:	2e06      	cmp	r6, #6
 800bcea:	d072      	beq.n	800bdd2 <ucdr_serialize_uint64_t+0x17e>
 800bcec:	f89d 3000 	ldrb.w	r3, [sp]
 800bcf0:	71eb      	strb	r3, [r5, #7]
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	68a2      	ldr	r2, [r4, #8]
 800bcf6:	7da0      	ldrb	r0, [r4, #22]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	1b9e      	subs	r6, r3, r6
 800bcfc:	4442      	add	r2, r8
 800bcfe:	2308      	movs	r3, #8
 800bd00:	f080 0001 	eor.w	r0, r0, #1
 800bd04:	60a2      	str	r2, [r4, #8]
 800bd06:	6126      	str	r6, [r4, #16]
 800bd08:	7563      	strb	r3, [r4, #21]
 800bd0a:	b002      	add	sp, #8
 800bd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd10:	2108      	movs	r1, #8
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 fbbe 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bd18:	b350      	cbz	r0, 800bd70 <ucdr_serialize_uint64_t+0x11c>
 800bd1a:	7d23      	ldrb	r3, [r4, #20]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d02d      	beq.n	800bd7c <ucdr_serialize_uint64_t+0x128>
 800bd20:	68a3      	ldr	r3, [r4, #8]
 800bd22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	68a3      	ldr	r3, [r4, #8]
 800bd2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd2e:	705a      	strb	r2, [r3, #1]
 800bd30:	68a3      	ldr	r3, [r4, #8]
 800bd32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd36:	709a      	strb	r2, [r3, #2]
 800bd38:	68a3      	ldr	r3, [r4, #8]
 800bd3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd3e:	70da      	strb	r2, [r3, #3]
 800bd40:	68a3      	ldr	r3, [r4, #8]
 800bd42:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bd46:	711a      	strb	r2, [r3, #4]
 800bd48:	68a3      	ldr	r3, [r4, #8]
 800bd4a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bd4e:	715a      	strb	r2, [r3, #5]
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bd56:	719a      	strb	r2, [r3, #6]
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	f89d 2000 	ldrb.w	r2, [sp]
 800bd5e:	71da      	strb	r2, [r3, #7]
 800bd60:	68a2      	ldr	r2, [r4, #8]
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	3208      	adds	r2, #8
 800bd66:	3308      	adds	r3, #8
 800bd68:	2108      	movs	r1, #8
 800bd6a:	60a2      	str	r2, [r4, #8]
 800bd6c:	6123      	str	r3, [r4, #16]
 800bd6e:	7561      	strb	r1, [r4, #21]
 800bd70:	7da0      	ldrb	r0, [r4, #22]
 800bd72:	f080 0001 	eor.w	r0, r0, #1
 800bd76:	b002      	add	sp, #8
 800bd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd7c:	466b      	mov	r3, sp
 800bd7e:	cb03      	ldmia	r3!, {r0, r1}
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	6018      	str	r0, [r3, #0]
 800bd84:	6059      	str	r1, [r3, #4]
 800bd86:	e7eb      	b.n	800bd60 <ucdr_serialize_uint64_t+0x10c>
 800bd88:	68a2      	ldr	r2, [r4, #8]
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	7da0      	ldrb	r0, [r4, #22]
 800bd8e:	7567      	strb	r7, [r4, #21]
 800bd90:	1b92      	subs	r2, r2, r6
 800bd92:	1b9b      	subs	r3, r3, r6
 800bd94:	f080 0001 	eor.w	r0, r0, #1
 800bd98:	60a2      	str	r2, [r4, #8]
 800bd9a:	6123      	str	r3, [r4, #16]
 800bd9c:	b002      	add	sp, #8
 800bd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda2:	68a3      	ldr	r3, [r4, #8]
 800bda4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bda8:	701a      	strb	r2, [r3, #0]
 800bdaa:	68a3      	ldr	r3, [r4, #8]
 800bdac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	68a3      	ldr	r3, [r4, #8]
 800bdb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bdc0:	701a      	strb	r2, [r3, #0]
 800bdc2:	68a3      	ldr	r3, [r4, #8]
 800bdc4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bdd0:	701a      	strb	r2, [r3, #0]
 800bdd2:	68a3      	ldr	r3, [r4, #8]
 800bdd4:	f89d 2000 	ldrb.w	r2, [sp]
 800bdd8:	701a      	strb	r2, [r3, #0]
 800bdda:	e78a      	b.n	800bcf2 <ucdr_serialize_uint64_t+0x9e>
 800bddc:	4628      	mov	r0, r5
 800bdde:	466d      	mov	r5, sp
 800bde0:	4629      	mov	r1, r5
 800bde2:	4632      	mov	r2, r6
 800bde4:	f00a fd91 	bl	801690a <memcpy>
 800bde8:	68a0      	ldr	r0, [r4, #8]
 800bdea:	4642      	mov	r2, r8
 800bdec:	19a9      	adds	r1, r5, r6
 800bdee:	f00a fd8c 	bl	801690a <memcpy>
 800bdf2:	e77e      	b.n	800bcf2 <ucdr_serialize_uint64_t+0x9e>

0800bdf4 <ucdr_serialize_int16_t>:
 800bdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	2102      	movs	r1, #2
 800bdfe:	4604      	mov	r4, r0
 800be00:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be04:	f000 fb9a 	bl	800c53c <ucdr_buffer_alignment>
 800be08:	4601      	mov	r1, r0
 800be0a:	4620      	mov	r0, r4
 800be0c:	7d67      	ldrb	r7, [r4, #21]
 800be0e:	f000 fbd9 	bl	800c5c4 <ucdr_advance_buffer>
 800be12:	2102      	movs	r1, #2
 800be14:	4620      	mov	r0, r4
 800be16:	f000 fb31 	bl	800c47c <ucdr_check_buffer_available_for>
 800be1a:	bb78      	cbnz	r0, 800be7c <ucdr_serialize_int16_t+0x88>
 800be1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be20:	42ab      	cmp	r3, r5
 800be22:	d926      	bls.n	800be72 <ucdr_serialize_int16_t+0x7e>
 800be24:	1b5e      	subs	r6, r3, r5
 800be26:	60a3      	str	r3, [r4, #8]
 800be28:	6923      	ldr	r3, [r4, #16]
 800be2a:	f1c6 0802 	rsb	r8, r6, #2
 800be2e:	4433      	add	r3, r6
 800be30:	6123      	str	r3, [r4, #16]
 800be32:	4641      	mov	r1, r8
 800be34:	4620      	mov	r0, r4
 800be36:	f000 fb2d 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d03b      	beq.n	800beb6 <ucdr_serialize_int16_t+0xc2>
 800be3e:	7d23      	ldrb	r3, [r4, #20]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d04a      	beq.n	800beda <ucdr_serialize_int16_t+0xe6>
 800be44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be48:	702b      	strb	r3, [r5, #0]
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	d040      	beq.n	800bed0 <ucdr_serialize_int16_t+0xdc>
 800be4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be52:	706b      	strb	r3, [r5, #1]
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	68a2      	ldr	r2, [r4, #8]
 800be58:	7da0      	ldrb	r0, [r4, #22]
 800be5a:	3302      	adds	r3, #2
 800be5c:	1b9e      	subs	r6, r3, r6
 800be5e:	4442      	add	r2, r8
 800be60:	2302      	movs	r3, #2
 800be62:	f080 0001 	eor.w	r0, r0, #1
 800be66:	60a2      	str	r2, [r4, #8]
 800be68:	6126      	str	r6, [r4, #16]
 800be6a:	7563      	strb	r3, [r4, #21]
 800be6c:	b002      	add	sp, #8
 800be6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be72:	2102      	movs	r1, #2
 800be74:	4620      	mov	r0, r4
 800be76:	f000 fb0d 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800be7a:	b190      	cbz	r0, 800bea2 <ucdr_serialize_int16_t+0xae>
 800be7c:	7d23      	ldrb	r3, [r4, #20]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	d014      	beq.n	800beae <ucdr_serialize_int16_t+0xba>
 800be84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	68a3      	ldr	r3, [r4, #8]
 800be8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be90:	705a      	strb	r2, [r3, #1]
 800be92:	68a2      	ldr	r2, [r4, #8]
 800be94:	6923      	ldr	r3, [r4, #16]
 800be96:	3202      	adds	r2, #2
 800be98:	3302      	adds	r3, #2
 800be9a:	2102      	movs	r1, #2
 800be9c:	60a2      	str	r2, [r4, #8]
 800be9e:	6123      	str	r3, [r4, #16]
 800bea0:	7561      	strb	r1, [r4, #21]
 800bea2:	7da0      	ldrb	r0, [r4, #22]
 800bea4:	f080 0001 	eor.w	r0, r0, #1
 800bea8:	b002      	add	sp, #8
 800beaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800beb2:	801a      	strh	r2, [r3, #0]
 800beb4:	e7ed      	b.n	800be92 <ucdr_serialize_int16_t+0x9e>
 800beb6:	68a2      	ldr	r2, [r4, #8]
 800beb8:	6923      	ldr	r3, [r4, #16]
 800beba:	7da0      	ldrb	r0, [r4, #22]
 800bebc:	7567      	strb	r7, [r4, #21]
 800bebe:	1b92      	subs	r2, r2, r6
 800bec0:	1b9b      	subs	r3, r3, r6
 800bec2:	f080 0001 	eor.w	r0, r0, #1
 800bec6:	60a2      	str	r2, [r4, #8]
 800bec8:	6123      	str	r3, [r4, #16]
 800beca:	b002      	add	sp, #8
 800becc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bed6:	701a      	strb	r2, [r3, #0]
 800bed8:	e7bc      	b.n	800be54 <ucdr_serialize_int16_t+0x60>
 800beda:	4628      	mov	r0, r5
 800bedc:	f10d 0506 	add.w	r5, sp, #6
 800bee0:	4629      	mov	r1, r5
 800bee2:	4632      	mov	r2, r6
 800bee4:	f00a fd11 	bl	801690a <memcpy>
 800bee8:	68a0      	ldr	r0, [r4, #8]
 800beea:	4642      	mov	r2, r8
 800beec:	19a9      	adds	r1, r5, r6
 800beee:	f00a fd0c 	bl	801690a <memcpy>
 800bef2:	e7af      	b.n	800be54 <ucdr_serialize_int16_t+0x60>

0800bef4 <ucdr_deserialize_int16_t>:
 800bef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef8:	460d      	mov	r5, r1
 800befa:	2102      	movs	r1, #2
 800befc:	4604      	mov	r4, r0
 800befe:	f000 fb1d 	bl	800c53c <ucdr_buffer_alignment>
 800bf02:	4601      	mov	r1, r0
 800bf04:	4620      	mov	r0, r4
 800bf06:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf0a:	f000 fb5b 	bl	800c5c4 <ucdr_advance_buffer>
 800bf0e:	2102      	movs	r1, #2
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 fab3 	bl	800c47c <ucdr_check_buffer_available_for>
 800bf16:	bb60      	cbnz	r0, 800bf72 <ucdr_deserialize_int16_t+0x7e>
 800bf18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bf1c:	42be      	cmp	r6, r7
 800bf1e:	d923      	bls.n	800bf68 <ucdr_deserialize_int16_t+0x74>
 800bf20:	6923      	ldr	r3, [r4, #16]
 800bf22:	60a6      	str	r6, [r4, #8]
 800bf24:	1bf6      	subs	r6, r6, r7
 800bf26:	4433      	add	r3, r6
 800bf28:	f1c6 0902 	rsb	r9, r6, #2
 800bf2c:	6123      	str	r3, [r4, #16]
 800bf2e:	4649      	mov	r1, r9
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 faaf 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d034      	beq.n	800bfa4 <ucdr_deserialize_int16_t+0xb0>
 800bf3a:	7d23      	ldrb	r3, [r4, #20]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d042      	beq.n	800bfc6 <ucdr_deserialize_int16_t+0xd2>
 800bf40:	787b      	ldrb	r3, [r7, #1]
 800bf42:	702b      	strb	r3, [r5, #0]
 800bf44:	2e00      	cmp	r6, #0
 800bf46:	d03a      	beq.n	800bfbe <ucdr_deserialize_int16_t+0xca>
 800bf48:	783b      	ldrb	r3, [r7, #0]
 800bf4a:	706b      	strb	r3, [r5, #1]
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	68a2      	ldr	r2, [r4, #8]
 800bf50:	7da0      	ldrb	r0, [r4, #22]
 800bf52:	2102      	movs	r1, #2
 800bf54:	3302      	adds	r3, #2
 800bf56:	444a      	add	r2, r9
 800bf58:	1b9b      	subs	r3, r3, r6
 800bf5a:	7561      	strb	r1, [r4, #21]
 800bf5c:	60a2      	str	r2, [r4, #8]
 800bf5e:	6123      	str	r3, [r4, #16]
 800bf60:	f080 0001 	eor.w	r0, r0, #1
 800bf64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf68:	2102      	movs	r1, #2
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 fa92 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bf70:	b180      	cbz	r0, 800bf94 <ucdr_deserialize_int16_t+0xa0>
 800bf72:	7d23      	ldrb	r3, [r4, #20]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	68a3      	ldr	r3, [r4, #8]
 800bf78:	d011      	beq.n	800bf9e <ucdr_deserialize_int16_t+0xaa>
 800bf7a:	785b      	ldrb	r3, [r3, #1]
 800bf7c:	702b      	strb	r3, [r5, #0]
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	706b      	strb	r3, [r5, #1]
 800bf84:	68a2      	ldr	r2, [r4, #8]
 800bf86:	6923      	ldr	r3, [r4, #16]
 800bf88:	3202      	adds	r2, #2
 800bf8a:	3302      	adds	r3, #2
 800bf8c:	2102      	movs	r1, #2
 800bf8e:	60a2      	str	r2, [r4, #8]
 800bf90:	6123      	str	r3, [r4, #16]
 800bf92:	7561      	strb	r1, [r4, #21]
 800bf94:	7da0      	ldrb	r0, [r4, #22]
 800bf96:	f080 0001 	eor.w	r0, r0, #1
 800bf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf9e:	881b      	ldrh	r3, [r3, #0]
 800bfa0:	802b      	strh	r3, [r5, #0]
 800bfa2:	e7ef      	b.n	800bf84 <ucdr_deserialize_int16_t+0x90>
 800bfa4:	68a2      	ldr	r2, [r4, #8]
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	7da0      	ldrb	r0, [r4, #22]
 800bfaa:	f884 8015 	strb.w	r8, [r4, #21]
 800bfae:	1b92      	subs	r2, r2, r6
 800bfb0:	1b9b      	subs	r3, r3, r6
 800bfb2:	60a2      	str	r2, [r4, #8]
 800bfb4:	6123      	str	r3, [r4, #16]
 800bfb6:	f080 0001 	eor.w	r0, r0, #1
 800bfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfbe:	68a3      	ldr	r3, [r4, #8]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	706b      	strb	r3, [r5, #1]
 800bfc4:	e7c2      	b.n	800bf4c <ucdr_deserialize_int16_t+0x58>
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	4632      	mov	r2, r6
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f00a fc9d 	bl	801690a <memcpy>
 800bfd0:	68a1      	ldr	r1, [r4, #8]
 800bfd2:	464a      	mov	r2, r9
 800bfd4:	19a8      	adds	r0, r5, r6
 800bfd6:	f00a fc98 	bl	801690a <memcpy>
 800bfda:	e7b7      	b.n	800bf4c <ucdr_deserialize_int16_t+0x58>

0800bfdc <ucdr_serialize_int32_t>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	9101      	str	r1, [sp, #4]
 800bfe6:	2104      	movs	r1, #4
 800bfe8:	f000 faa8 	bl	800c53c <ucdr_buffer_alignment>
 800bfec:	4601      	mov	r1, r0
 800bfee:	4620      	mov	r0, r4
 800bff0:	7d67      	ldrb	r7, [r4, #21]
 800bff2:	f000 fae7 	bl	800c5c4 <ucdr_advance_buffer>
 800bff6:	2104      	movs	r1, #4
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 fa3f 	bl	800c47c <ucdr_check_buffer_available_for>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d139      	bne.n	800c076 <ucdr_serialize_int32_t+0x9a>
 800c002:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c006:	42ab      	cmp	r3, r5
 800c008:	d930      	bls.n	800c06c <ucdr_serialize_int32_t+0x90>
 800c00a:	1b5e      	subs	r6, r3, r5
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	6923      	ldr	r3, [r4, #16]
 800c010:	f1c6 0804 	rsb	r8, r6, #4
 800c014:	4433      	add	r3, r6
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	4641      	mov	r1, r8
 800c01a:	4620      	mov	r0, r4
 800c01c:	f000 fa3a 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c020:	2800      	cmp	r0, #0
 800c022:	d04c      	beq.n	800c0be <ucdr_serialize_int32_t+0xe2>
 800c024:	7d23      	ldrb	r3, [r4, #20]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d063      	beq.n	800c0f2 <ucdr_serialize_int32_t+0x116>
 800c02a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c02e:	702b      	strb	r3, [r5, #0]
 800c030:	2e00      	cmp	r6, #0
 800c032:	d051      	beq.n	800c0d8 <ucdr_serialize_int32_t+0xfc>
 800c034:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c038:	706b      	strb	r3, [r5, #1]
 800c03a:	2e01      	cmp	r6, #1
 800c03c:	d050      	beq.n	800c0e0 <ucdr_serialize_int32_t+0x104>
 800c03e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c042:	70ab      	strb	r3, [r5, #2]
 800c044:	2e02      	cmp	r6, #2
 800c046:	d04f      	beq.n	800c0e8 <ucdr_serialize_int32_t+0x10c>
 800c048:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c04c:	70eb      	strb	r3, [r5, #3]
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	68a2      	ldr	r2, [r4, #8]
 800c052:	7da0      	ldrb	r0, [r4, #22]
 800c054:	3304      	adds	r3, #4
 800c056:	1b9e      	subs	r6, r3, r6
 800c058:	4442      	add	r2, r8
 800c05a:	2304      	movs	r3, #4
 800c05c:	f080 0001 	eor.w	r0, r0, #1
 800c060:	60a2      	str	r2, [r4, #8]
 800c062:	6126      	str	r6, [r4, #16]
 800c064:	7563      	strb	r3, [r4, #21]
 800c066:	b002      	add	sp, #8
 800c068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06c:	2104      	movs	r1, #4
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fa10 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c074:	b1d0      	cbz	r0, 800c0ac <ucdr_serialize_int32_t+0xd0>
 800c076:	7d23      	ldrb	r3, [r4, #20]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	68a3      	ldr	r3, [r4, #8]
 800c07c:	d01c      	beq.n	800c0b8 <ucdr_serialize_int32_t+0xdc>
 800c07e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c082:	701a      	strb	r2, [r3, #0]
 800c084:	68a3      	ldr	r3, [r4, #8]
 800c086:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c08a:	705a      	strb	r2, [r3, #1]
 800c08c:	68a3      	ldr	r3, [r4, #8]
 800c08e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c092:	709a      	strb	r2, [r3, #2]
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c09a:	70da      	strb	r2, [r3, #3]
 800c09c:	68a2      	ldr	r2, [r4, #8]
 800c09e:	6923      	ldr	r3, [r4, #16]
 800c0a0:	3204      	adds	r2, #4
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	2104      	movs	r1, #4
 800c0a6:	60a2      	str	r2, [r4, #8]
 800c0a8:	6123      	str	r3, [r4, #16]
 800c0aa:	7561      	strb	r1, [r4, #21]
 800c0ac:	7da0      	ldrb	r0, [r4, #22]
 800c0ae:	f080 0001 	eor.w	r0, r0, #1
 800c0b2:	b002      	add	sp, #8
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	9a01      	ldr	r2, [sp, #4]
 800c0ba:	601a      	str	r2, [r3, #0]
 800c0bc:	e7ee      	b.n	800c09c <ucdr_serialize_int32_t+0xc0>
 800c0be:	68a2      	ldr	r2, [r4, #8]
 800c0c0:	6923      	ldr	r3, [r4, #16]
 800c0c2:	7da0      	ldrb	r0, [r4, #22]
 800c0c4:	7567      	strb	r7, [r4, #21]
 800c0c6:	1b92      	subs	r2, r2, r6
 800c0c8:	1b9b      	subs	r3, r3, r6
 800c0ca:	f080 0001 	eor.w	r0, r0, #1
 800c0ce:	60a2      	str	r2, [r4, #8]
 800c0d0:	6123      	str	r3, [r4, #16]
 800c0d2:	b002      	add	sp, #8
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	68a3      	ldr	r3, [r4, #8]
 800c0da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0de:	701a      	strb	r2, [r3, #0]
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c0e6:	701a      	strb	r2, [r3, #0]
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c0ee:	701a      	strb	r2, [r3, #0]
 800c0f0:	e7ad      	b.n	800c04e <ucdr_serialize_int32_t+0x72>
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	ad01      	add	r5, sp, #4
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	f00a fc06 	bl	801690a <memcpy>
 800c0fe:	68a0      	ldr	r0, [r4, #8]
 800c100:	4642      	mov	r2, r8
 800c102:	19a9      	adds	r1, r5, r6
 800c104:	f00a fc01 	bl	801690a <memcpy>
 800c108:	e7a1      	b.n	800c04e <ucdr_serialize_int32_t+0x72>
 800c10a:	bf00      	nop

0800c10c <ucdr_deserialize_int32_t>:
 800c10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c110:	460d      	mov	r5, r1
 800c112:	2104      	movs	r1, #4
 800c114:	4604      	mov	r4, r0
 800c116:	f000 fa11 	bl	800c53c <ucdr_buffer_alignment>
 800c11a:	4601      	mov	r1, r0
 800c11c:	4620      	mov	r0, r4
 800c11e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c122:	f000 fa4f 	bl	800c5c4 <ucdr_advance_buffer>
 800c126:	2104      	movs	r1, #4
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 f9a7 	bl	800c47c <ucdr_check_buffer_available_for>
 800c12e:	2800      	cmp	r0, #0
 800c130:	d138      	bne.n	800c1a4 <ucdr_deserialize_int32_t+0x98>
 800c132:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c136:	42b7      	cmp	r7, r6
 800c138:	d92f      	bls.n	800c19a <ucdr_deserialize_int32_t+0x8e>
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	60a7      	str	r7, [r4, #8]
 800c13e:	1bbf      	subs	r7, r7, r6
 800c140:	443b      	add	r3, r7
 800c142:	f1c7 0904 	rsb	r9, r7, #4
 800c146:	6123      	str	r3, [r4, #16]
 800c148:	4649      	mov	r1, r9
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 f9a2 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c150:	2800      	cmp	r0, #0
 800c152:	d046      	beq.n	800c1e2 <ucdr_deserialize_int32_t+0xd6>
 800c154:	7d23      	ldrb	r3, [r4, #20]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d05c      	beq.n	800c214 <ucdr_deserialize_int32_t+0x108>
 800c15a:	78f3      	ldrb	r3, [r6, #3]
 800c15c:	702b      	strb	r3, [r5, #0]
 800c15e:	2f00      	cmp	r7, #0
 800c160:	d04c      	beq.n	800c1fc <ucdr_deserialize_int32_t+0xf0>
 800c162:	78b3      	ldrb	r3, [r6, #2]
 800c164:	706b      	strb	r3, [r5, #1]
 800c166:	2f01      	cmp	r7, #1
 800c168:	f105 0302 	add.w	r3, r5, #2
 800c16c:	d04a      	beq.n	800c204 <ucdr_deserialize_int32_t+0xf8>
 800c16e:	7873      	ldrb	r3, [r6, #1]
 800c170:	70ab      	strb	r3, [r5, #2]
 800c172:	2f02      	cmp	r7, #2
 800c174:	f105 0303 	add.w	r3, r5, #3
 800c178:	d048      	beq.n	800c20c <ucdr_deserialize_int32_t+0x100>
 800c17a:	7833      	ldrb	r3, [r6, #0]
 800c17c:	70eb      	strb	r3, [r5, #3]
 800c17e:	6923      	ldr	r3, [r4, #16]
 800c180:	68a2      	ldr	r2, [r4, #8]
 800c182:	7da0      	ldrb	r0, [r4, #22]
 800c184:	2104      	movs	r1, #4
 800c186:	3304      	adds	r3, #4
 800c188:	444a      	add	r2, r9
 800c18a:	1bdb      	subs	r3, r3, r7
 800c18c:	7561      	strb	r1, [r4, #21]
 800c18e:	60a2      	str	r2, [r4, #8]
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	f080 0001 	eor.w	r0, r0, #1
 800c196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c19a:	2104      	movs	r1, #4
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 f979 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c1a2:	b1b0      	cbz	r0, 800c1d2 <ucdr_deserialize_int32_t+0xc6>
 800c1a4:	7d23      	ldrb	r3, [r4, #20]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	d017      	beq.n	800c1dc <ucdr_deserialize_int32_t+0xd0>
 800c1ac:	78db      	ldrb	r3, [r3, #3]
 800c1ae:	702b      	strb	r3, [r5, #0]
 800c1b0:	68a3      	ldr	r3, [r4, #8]
 800c1b2:	789b      	ldrb	r3, [r3, #2]
 800c1b4:	706b      	strb	r3, [r5, #1]
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	785b      	ldrb	r3, [r3, #1]
 800c1ba:	70ab      	strb	r3, [r5, #2]
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	70eb      	strb	r3, [r5, #3]
 800c1c2:	68a2      	ldr	r2, [r4, #8]
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	3204      	adds	r2, #4
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	2104      	movs	r1, #4
 800c1cc:	60a2      	str	r2, [r4, #8]
 800c1ce:	6123      	str	r3, [r4, #16]
 800c1d0:	7561      	strb	r1, [r4, #21]
 800c1d2:	7da0      	ldrb	r0, [r4, #22]
 800c1d4:	f080 0001 	eor.w	r0, r0, #1
 800c1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	602b      	str	r3, [r5, #0]
 800c1e0:	e7ef      	b.n	800c1c2 <ucdr_deserialize_int32_t+0xb6>
 800c1e2:	68a2      	ldr	r2, [r4, #8]
 800c1e4:	6923      	ldr	r3, [r4, #16]
 800c1e6:	7da0      	ldrb	r0, [r4, #22]
 800c1e8:	f884 8015 	strb.w	r8, [r4, #21]
 800c1ec:	1bd2      	subs	r2, r2, r7
 800c1ee:	1bdb      	subs	r3, r3, r7
 800c1f0:	60a2      	str	r2, [r4, #8]
 800c1f2:	6123      	str	r3, [r4, #16]
 800c1f4:	f080 0001 	eor.w	r0, r0, #1
 800c1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1fc:	68a3      	ldr	r3, [r4, #8]
 800c1fe:	789b      	ldrb	r3, [r3, #2]
 800c200:	706b      	strb	r3, [r5, #1]
 800c202:	1cab      	adds	r3, r5, #2
 800c204:	68a2      	ldr	r2, [r4, #8]
 800c206:	7852      	ldrb	r2, [r2, #1]
 800c208:	f803 2b01 	strb.w	r2, [r3], #1
 800c20c:	68a2      	ldr	r2, [r4, #8]
 800c20e:	7812      	ldrb	r2, [r2, #0]
 800c210:	701a      	strb	r2, [r3, #0]
 800c212:	e7b4      	b.n	800c17e <ucdr_deserialize_int32_t+0x72>
 800c214:	4631      	mov	r1, r6
 800c216:	463a      	mov	r2, r7
 800c218:	4628      	mov	r0, r5
 800c21a:	f00a fb76 	bl	801690a <memcpy>
 800c21e:	68a1      	ldr	r1, [r4, #8]
 800c220:	464a      	mov	r2, r9
 800c222:	19e8      	adds	r0, r5, r7
 800c224:	f00a fb71 	bl	801690a <memcpy>
 800c228:	e7a9      	b.n	800c17e <ucdr_deserialize_int32_t+0x72>
 800c22a:	bf00      	nop

0800c22c <ucdr_serialize_float>:
 800c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c230:	2104      	movs	r1, #4
 800c232:	b082      	sub	sp, #8
 800c234:	4604      	mov	r4, r0
 800c236:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c23a:	f000 f97f 	bl	800c53c <ucdr_buffer_alignment>
 800c23e:	4601      	mov	r1, r0
 800c240:	4620      	mov	r0, r4
 800c242:	7d67      	ldrb	r7, [r4, #21]
 800c244:	f000 f9be 	bl	800c5c4 <ucdr_advance_buffer>
 800c248:	2104      	movs	r1, #4
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 f916 	bl	800c47c <ucdr_check_buffer_available_for>
 800c250:	2800      	cmp	r0, #0
 800c252:	d139      	bne.n	800c2c8 <ucdr_serialize_float+0x9c>
 800c254:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c258:	42ab      	cmp	r3, r5
 800c25a:	d930      	bls.n	800c2be <ucdr_serialize_float+0x92>
 800c25c:	1b5e      	subs	r6, r3, r5
 800c25e:	60a3      	str	r3, [r4, #8]
 800c260:	6923      	ldr	r3, [r4, #16]
 800c262:	f1c6 0804 	rsb	r8, r6, #4
 800c266:	4433      	add	r3, r6
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	4641      	mov	r1, r8
 800c26c:	4620      	mov	r0, r4
 800c26e:	f000 f911 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c272:	2800      	cmp	r0, #0
 800c274:	d04c      	beq.n	800c310 <ucdr_serialize_float+0xe4>
 800c276:	7d23      	ldrb	r3, [r4, #20]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d063      	beq.n	800c344 <ucdr_serialize_float+0x118>
 800c27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c280:	702b      	strb	r3, [r5, #0]
 800c282:	2e00      	cmp	r6, #0
 800c284:	d051      	beq.n	800c32a <ucdr_serialize_float+0xfe>
 800c286:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c28a:	706b      	strb	r3, [r5, #1]
 800c28c:	2e01      	cmp	r6, #1
 800c28e:	d050      	beq.n	800c332 <ucdr_serialize_float+0x106>
 800c290:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c294:	70ab      	strb	r3, [r5, #2]
 800c296:	2e02      	cmp	r6, #2
 800c298:	d04f      	beq.n	800c33a <ucdr_serialize_float+0x10e>
 800c29a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c29e:	70eb      	strb	r3, [r5, #3]
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	68a2      	ldr	r2, [r4, #8]
 800c2a4:	7da0      	ldrb	r0, [r4, #22]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	1b9e      	subs	r6, r3, r6
 800c2aa:	4442      	add	r2, r8
 800c2ac:	2304      	movs	r3, #4
 800c2ae:	f080 0001 	eor.w	r0, r0, #1
 800c2b2:	60a2      	str	r2, [r4, #8]
 800c2b4:	6126      	str	r6, [r4, #16]
 800c2b6:	7563      	strb	r3, [r4, #21]
 800c2b8:	b002      	add	sp, #8
 800c2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2be:	2104      	movs	r1, #4
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 f8e7 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c2c6:	b1d0      	cbz	r0, 800c2fe <ucdr_serialize_float+0xd2>
 800c2c8:	7d23      	ldrb	r3, [r4, #20]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	68a3      	ldr	r3, [r4, #8]
 800c2ce:	d01c      	beq.n	800c30a <ucdr_serialize_float+0xde>
 800c2d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2dc:	705a      	strb	r2, [r3, #1]
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2e4:	709a      	strb	r2, [r3, #2]
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2ec:	70da      	strb	r2, [r3, #3]
 800c2ee:	68a2      	ldr	r2, [r4, #8]
 800c2f0:	6923      	ldr	r3, [r4, #16]
 800c2f2:	3204      	adds	r2, #4
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	2104      	movs	r1, #4
 800c2f8:	60a2      	str	r2, [r4, #8]
 800c2fa:	6123      	str	r3, [r4, #16]
 800c2fc:	7561      	strb	r1, [r4, #21]
 800c2fe:	7da0      	ldrb	r0, [r4, #22]
 800c300:	f080 0001 	eor.w	r0, r0, #1
 800c304:	b002      	add	sp, #8
 800c306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c30a:	9a01      	ldr	r2, [sp, #4]
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	e7ee      	b.n	800c2ee <ucdr_serialize_float+0xc2>
 800c310:	68a2      	ldr	r2, [r4, #8]
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	7da0      	ldrb	r0, [r4, #22]
 800c316:	7567      	strb	r7, [r4, #21]
 800c318:	1b92      	subs	r2, r2, r6
 800c31a:	1b9b      	subs	r3, r3, r6
 800c31c:	f080 0001 	eor.w	r0, r0, #1
 800c320:	60a2      	str	r2, [r4, #8]
 800c322:	6123      	str	r3, [r4, #16]
 800c324:	b002      	add	sp, #8
 800c326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c32a:	68a3      	ldr	r3, [r4, #8]
 800c32c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	68a3      	ldr	r3, [r4, #8]
 800c334:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c338:	701a      	strb	r2, [r3, #0]
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e7ad      	b.n	800c2a0 <ucdr_serialize_float+0x74>
 800c344:	4628      	mov	r0, r5
 800c346:	ad01      	add	r5, sp, #4
 800c348:	4629      	mov	r1, r5
 800c34a:	4632      	mov	r2, r6
 800c34c:	f00a fadd 	bl	801690a <memcpy>
 800c350:	68a0      	ldr	r0, [r4, #8]
 800c352:	4642      	mov	r2, r8
 800c354:	19a9      	adds	r1, r5, r6
 800c356:	f00a fad8 	bl	801690a <memcpy>
 800c35a:	e7a1      	b.n	800c2a0 <ucdr_serialize_float+0x74>

0800c35c <ucdr_deserialize_float>:
 800c35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c360:	460d      	mov	r5, r1
 800c362:	2104      	movs	r1, #4
 800c364:	4604      	mov	r4, r0
 800c366:	f000 f8e9 	bl	800c53c <ucdr_buffer_alignment>
 800c36a:	4601      	mov	r1, r0
 800c36c:	4620      	mov	r0, r4
 800c36e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c372:	f000 f927 	bl	800c5c4 <ucdr_advance_buffer>
 800c376:	2104      	movs	r1, #4
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 f87f 	bl	800c47c <ucdr_check_buffer_available_for>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d138      	bne.n	800c3f4 <ucdr_deserialize_float+0x98>
 800c382:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c386:	42b7      	cmp	r7, r6
 800c388:	d92f      	bls.n	800c3ea <ucdr_deserialize_float+0x8e>
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	60a7      	str	r7, [r4, #8]
 800c38e:	1bbf      	subs	r7, r7, r6
 800c390:	443b      	add	r3, r7
 800c392:	f1c7 0904 	rsb	r9, r7, #4
 800c396:	6123      	str	r3, [r4, #16]
 800c398:	4649      	mov	r1, r9
 800c39a:	4620      	mov	r0, r4
 800c39c:	f000 f87a 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d046      	beq.n	800c432 <ucdr_deserialize_float+0xd6>
 800c3a4:	7d23      	ldrb	r3, [r4, #20]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d05c      	beq.n	800c464 <ucdr_deserialize_float+0x108>
 800c3aa:	78f3      	ldrb	r3, [r6, #3]
 800c3ac:	702b      	strb	r3, [r5, #0]
 800c3ae:	2f00      	cmp	r7, #0
 800c3b0:	d04c      	beq.n	800c44c <ucdr_deserialize_float+0xf0>
 800c3b2:	78b3      	ldrb	r3, [r6, #2]
 800c3b4:	706b      	strb	r3, [r5, #1]
 800c3b6:	2f01      	cmp	r7, #1
 800c3b8:	f105 0302 	add.w	r3, r5, #2
 800c3bc:	d04a      	beq.n	800c454 <ucdr_deserialize_float+0xf8>
 800c3be:	7873      	ldrb	r3, [r6, #1]
 800c3c0:	70ab      	strb	r3, [r5, #2]
 800c3c2:	2f02      	cmp	r7, #2
 800c3c4:	f105 0303 	add.w	r3, r5, #3
 800c3c8:	d048      	beq.n	800c45c <ucdr_deserialize_float+0x100>
 800c3ca:	7833      	ldrb	r3, [r6, #0]
 800c3cc:	70eb      	strb	r3, [r5, #3]
 800c3ce:	6923      	ldr	r3, [r4, #16]
 800c3d0:	68a2      	ldr	r2, [r4, #8]
 800c3d2:	7da0      	ldrb	r0, [r4, #22]
 800c3d4:	2104      	movs	r1, #4
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	444a      	add	r2, r9
 800c3da:	1bdb      	subs	r3, r3, r7
 800c3dc:	7561      	strb	r1, [r4, #21]
 800c3de:	60a2      	str	r2, [r4, #8]
 800c3e0:	6123      	str	r3, [r4, #16]
 800c3e2:	f080 0001 	eor.w	r0, r0, #1
 800c3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ea:	2104      	movs	r1, #4
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f000 f851 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c3f2:	b1b0      	cbz	r0, 800c422 <ucdr_deserialize_float+0xc6>
 800c3f4:	7d23      	ldrb	r3, [r4, #20]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	68a3      	ldr	r3, [r4, #8]
 800c3fa:	d017      	beq.n	800c42c <ucdr_deserialize_float+0xd0>
 800c3fc:	78db      	ldrb	r3, [r3, #3]
 800c3fe:	702b      	strb	r3, [r5, #0]
 800c400:	68a3      	ldr	r3, [r4, #8]
 800c402:	789b      	ldrb	r3, [r3, #2]
 800c404:	706b      	strb	r3, [r5, #1]
 800c406:	68a3      	ldr	r3, [r4, #8]
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	70ab      	strb	r3, [r5, #2]
 800c40c:	68a3      	ldr	r3, [r4, #8]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	70eb      	strb	r3, [r5, #3]
 800c412:	68a2      	ldr	r2, [r4, #8]
 800c414:	6923      	ldr	r3, [r4, #16]
 800c416:	3204      	adds	r2, #4
 800c418:	3304      	adds	r3, #4
 800c41a:	2104      	movs	r1, #4
 800c41c:	60a2      	str	r2, [r4, #8]
 800c41e:	6123      	str	r3, [r4, #16]
 800c420:	7561      	strb	r1, [r4, #21]
 800c422:	7da0      	ldrb	r0, [r4, #22]
 800c424:	f080 0001 	eor.w	r0, r0, #1
 800c428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	e7ef      	b.n	800c412 <ucdr_deserialize_float+0xb6>
 800c432:	68a2      	ldr	r2, [r4, #8]
 800c434:	6923      	ldr	r3, [r4, #16]
 800c436:	7da0      	ldrb	r0, [r4, #22]
 800c438:	f884 8015 	strb.w	r8, [r4, #21]
 800c43c:	1bd2      	subs	r2, r2, r7
 800c43e:	1bdb      	subs	r3, r3, r7
 800c440:	60a2      	str	r2, [r4, #8]
 800c442:	6123      	str	r3, [r4, #16]
 800c444:	f080 0001 	eor.w	r0, r0, #1
 800c448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	789b      	ldrb	r3, [r3, #2]
 800c450:	706b      	strb	r3, [r5, #1]
 800c452:	1cab      	adds	r3, r5, #2
 800c454:	68a2      	ldr	r2, [r4, #8]
 800c456:	7852      	ldrb	r2, [r2, #1]
 800c458:	f803 2b01 	strb.w	r2, [r3], #1
 800c45c:	68a2      	ldr	r2, [r4, #8]
 800c45e:	7812      	ldrb	r2, [r2, #0]
 800c460:	701a      	strb	r2, [r3, #0]
 800c462:	e7b4      	b.n	800c3ce <ucdr_deserialize_float+0x72>
 800c464:	4631      	mov	r1, r6
 800c466:	463a      	mov	r2, r7
 800c468:	4628      	mov	r0, r5
 800c46a:	f00a fa4e 	bl	801690a <memcpy>
 800c46e:	68a1      	ldr	r1, [r4, #8]
 800c470:	464a      	mov	r2, r9
 800c472:	19e8      	adds	r0, r5, r7
 800c474:	f00a fa49 	bl	801690a <memcpy>
 800c478:	e7a9      	b.n	800c3ce <ucdr_deserialize_float+0x72>
 800c47a:	bf00      	nop

0800c47c <ucdr_check_buffer_available_for>:
 800c47c:	7d83      	ldrb	r3, [r0, #22]
 800c47e:	b93b      	cbnz	r3, 800c490 <ucdr_check_buffer_available_for+0x14>
 800c480:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c484:	4419      	add	r1, r3
 800c486:	4288      	cmp	r0, r1
 800c488:	bf34      	ite	cc
 800c48a:	2000      	movcc	r0, #0
 800c48c:	2001      	movcs	r0, #1
 800c48e:	4770      	bx	lr
 800c490:	2000      	movs	r0, #0
 800c492:	4770      	bx	lr

0800c494 <ucdr_check_final_buffer_behavior>:
 800c494:	7d83      	ldrb	r3, [r0, #22]
 800c496:	b943      	cbnz	r3, 800c4aa <ucdr_check_final_buffer_behavior+0x16>
 800c498:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c49c:	4291      	cmp	r1, r2
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	d205      	bcs.n	800c4b0 <ucdr_check_final_buffer_behavior+0x1c>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	4770      	bx	lr
 800c4b0:	6982      	ldr	r2, [r0, #24]
 800c4b2:	b13a      	cbz	r2, 800c4c4 <ucdr_check_final_buffer_behavior+0x30>
 800c4b4:	69c1      	ldr	r1, [r0, #28]
 800c4b6:	4790      	blx	r2
 800c4b8:	f080 0301 	eor.w	r3, r0, #1
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	75a0      	strb	r0, [r4, #22]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	bd10      	pop	{r4, pc}
 800c4c4:	2001      	movs	r0, #1
 800c4c6:	75a0      	strb	r0, [r4, #22]
 800c4c8:	e7fa      	b.n	800c4c0 <ucdr_check_final_buffer_behavior+0x2c>
 800c4ca:	bf00      	nop

0800c4cc <ucdr_set_on_full_buffer_callback>:
 800c4cc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop

0800c4d4 <ucdr_init_buffer_origin_offset_endian>:
 800c4d4:	b410      	push	{r4}
 800c4d6:	9c01      	ldr	r4, [sp, #4]
 800c4d8:	6001      	str	r1, [r0, #0]
 800c4da:	440a      	add	r2, r1
 800c4dc:	6042      	str	r2, [r0, #4]
 800c4de:	190a      	adds	r2, r1, r4
 800c4e0:	441c      	add	r4, r3
 800c4e2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c4e6:	6082      	str	r2, [r0, #8]
 800c4e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c4ec:	7503      	strb	r3, [r0, #20]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f8:	7542      	strb	r2, [r0, #21]
 800c4fa:	7582      	strb	r2, [r0, #22]
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop

0800c500 <ucdr_init_buffer_origin_offset>:
 800c500:	b510      	push	{r4, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	9c04      	ldr	r4, [sp, #16]
 800c506:	9400      	str	r4, [sp, #0]
 800c508:	2401      	movs	r4, #1
 800c50a:	9401      	str	r4, [sp, #4]
 800c50c:	f7ff ffe2 	bl	800c4d4 <ucdr_init_buffer_origin_offset_endian>
 800c510:	b002      	add	sp, #8
 800c512:	bd10      	pop	{r4, pc}

0800c514 <ucdr_init_buffer_origin>:
 800c514:	b510      	push	{r4, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	2400      	movs	r4, #0
 800c51a:	9400      	str	r4, [sp, #0]
 800c51c:	f7ff fff0 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800c520:	b002      	add	sp, #8
 800c522:	bd10      	pop	{r4, pc}

0800c524 <ucdr_init_buffer>:
 800c524:	2300      	movs	r3, #0
 800c526:	f7ff bff5 	b.w	800c514 <ucdr_init_buffer_origin>
 800c52a:	bf00      	nop

0800c52c <ucdr_alignment>:
 800c52c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c530:	fb03 0011 	mls	r0, r3, r1, r0
 800c534:	1a08      	subs	r0, r1, r0
 800c536:	3901      	subs	r1, #1
 800c538:	4008      	ands	r0, r1
 800c53a:	4770      	bx	lr

0800c53c <ucdr_buffer_alignment>:
 800c53c:	7d43      	ldrb	r3, [r0, #21]
 800c53e:	428b      	cmp	r3, r1
 800c540:	d208      	bcs.n	800c554 <ucdr_buffer_alignment+0x18>
 800c542:	6900      	ldr	r0, [r0, #16]
 800c544:	fbb0 f3f1 	udiv	r3, r0, r1
 800c548:	fb01 0013 	mls	r0, r1, r3, r0
 800c54c:	1a08      	subs	r0, r1, r0
 800c54e:	3901      	subs	r1, #1
 800c550:	4008      	ands	r0, r1
 800c552:	4770      	bx	lr
 800c554:	2000      	movs	r0, #0
 800c556:	4770      	bx	lr

0800c558 <ucdr_align_to>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4604      	mov	r4, r0
 800c55c:	460d      	mov	r5, r1
 800c55e:	f7ff ffed 	bl	800c53c <ucdr_buffer_alignment>
 800c562:	68a3      	ldr	r3, [r4, #8]
 800c564:	6921      	ldr	r1, [r4, #16]
 800c566:	7565      	strb	r5, [r4, #21]
 800c568:	181a      	adds	r2, r3, r0
 800c56a:	6863      	ldr	r3, [r4, #4]
 800c56c:	4293      	cmp	r3, r2
 800c56e:	4408      	add	r0, r1
 800c570:	bf28      	it	cs
 800c572:	4613      	movcs	r3, r2
 800c574:	6120      	str	r0, [r4, #16]
 800c576:	60a3      	str	r3, [r4, #8]
 800c578:	bd38      	pop	{r3, r4, r5, pc}
 800c57a:	bf00      	nop

0800c57c <ucdr_buffer_length>:
 800c57c:	6882      	ldr	r2, [r0, #8]
 800c57e:	6800      	ldr	r0, [r0, #0]
 800c580:	1a10      	subs	r0, r2, r0
 800c582:	4770      	bx	lr

0800c584 <ucdr_buffer_remaining>:
 800c584:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c588:	1a10      	subs	r0, r2, r0
 800c58a:	4770      	bx	lr

0800c58c <ucdr_check_final_buffer_behavior_array>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	7d83      	ldrb	r3, [r0, #22]
 800c590:	b963      	cbnz	r3, 800c5ac <ucdr_check_final_buffer_behavior_array+0x20>
 800c592:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	4604      	mov	r4, r0
 800c59a:	460d      	mov	r5, r1
 800c59c:	d308      	bcc.n	800c5b0 <ucdr_check_final_buffer_behavior_array+0x24>
 800c59e:	b139      	cbz	r1, 800c5b0 <ucdr_check_final_buffer_behavior_array+0x24>
 800c5a0:	6983      	ldr	r3, [r0, #24]
 800c5a2:	b163      	cbz	r3, 800c5be <ucdr_check_final_buffer_behavior_array+0x32>
 800c5a4:	69c1      	ldr	r1, [r0, #28]
 800c5a6:	4798      	blx	r3
 800c5a8:	75a0      	strb	r0, [r4, #22]
 800c5aa:	b108      	cbz	r0, 800c5b0 <ucdr_check_final_buffer_behavior_array+0x24>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f7ff ffe7 	bl	800c584 <ucdr_buffer_remaining>
 800c5b6:	42a8      	cmp	r0, r5
 800c5b8:	bf28      	it	cs
 800c5ba:	4628      	movcs	r0, r5
 800c5bc:	bd38      	pop	{r3, r4, r5, pc}
 800c5be:	2301      	movs	r3, #1
 800c5c0:	7583      	strb	r3, [r0, #22]
 800c5c2:	e7f3      	b.n	800c5ac <ucdr_check_final_buffer_behavior_array+0x20>

0800c5c4 <ucdr_advance_buffer>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	f7ff ff57 	bl	800c47c <ucdr_check_buffer_available_for>
 800c5ce:	b178      	cbz	r0, 800c5f0 <ucdr_advance_buffer+0x2c>
 800c5d0:	6923      	ldr	r3, [r4, #16]
 800c5d2:	68a2      	ldr	r2, [r4, #8]
 800c5d4:	442b      	add	r3, r5
 800c5d6:	6123      	str	r3, [r4, #16]
 800c5d8:	2301      	movs	r3, #1
 800c5da:	442a      	add	r2, r5
 800c5dc:	7563      	strb	r3, [r4, #21]
 800c5de:	60a2      	str	r2, [r4, #8]
 800c5e0:	bd38      	pop	{r3, r4, r5, pc}
 800c5e2:	68a2      	ldr	r2, [r4, #8]
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	4402      	add	r2, r0
 800c5e8:	4403      	add	r3, r0
 800c5ea:	1a2d      	subs	r5, r5, r0
 800c5ec:	60a2      	str	r2, [r4, #8]
 800c5ee:	6123      	str	r3, [r4, #16]
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f7ff ffc9 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d1f1      	bne.n	800c5e2 <ucdr_advance_buffer+0x1e>
 800c5fe:	2301      	movs	r3, #1
 800c600:	7563      	strb	r3, [r4, #21]
 800c602:	bd38      	pop	{r3, r4, r5, pc}

0800c604 <uxr_buffer_delete_entity>:
 800c604:	b510      	push	{r4, lr}
 800c606:	2300      	movs	r3, #0
 800c608:	b08e      	sub	sp, #56	; 0x38
 800c60a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c60e:	2303      	movs	r3, #3
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	2204      	movs	r2, #4
 800c614:	ab06      	add	r3, sp, #24
 800c616:	4604      	mov	r4, r0
 800c618:	9103      	str	r1, [sp, #12]
 800c61a:	f001 f953 	bl	800d8c4 <uxr_prepare_stream_to_write_submessage>
 800c61e:	b918      	cbnz	r0, 800c628 <uxr_buffer_delete_entity+0x24>
 800c620:	4604      	mov	r4, r0
 800c622:	4620      	mov	r0, r4
 800c624:	b00e      	add	sp, #56	; 0x38
 800c626:	bd10      	pop	{r4, pc}
 800c628:	9902      	ldr	r1, [sp, #8]
 800c62a:	aa05      	add	r2, sp, #20
 800c62c:	4620      	mov	r0, r4
 800c62e:	f001 fa7f 	bl	800db30 <uxr_init_base_object_request>
 800c632:	a905      	add	r1, sp, #20
 800c634:	4604      	mov	r4, r0
 800c636:	a806      	add	r0, sp, #24
 800c638:	f002 fcd0 	bl	800efdc <uxr_serialize_DELETE_Payload>
 800c63c:	4620      	mov	r0, r4
 800c63e:	b00e      	add	sp, #56	; 0x38
 800c640:	bd10      	pop	{r4, pc}
 800c642:	bf00      	nop

0800c644 <uxr_common_create_entity>:
 800c644:	b510      	push	{r4, lr}
 800c646:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c64a:	b08c      	sub	sp, #48	; 0x30
 800c64c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c650:	f1bc 0f01 	cmp.w	ip, #1
 800c654:	bf0c      	ite	eq
 800c656:	f003 0201 	andeq.w	r2, r3, #1
 800c65a:	2200      	movne	r2, #0
 800c65c:	330e      	adds	r3, #14
 800c65e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c662:	9101      	str	r1, [sp, #4]
 800c664:	441a      	add	r2, r3
 800c666:	2301      	movs	r3, #1
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	9903      	ldr	r1, [sp, #12]
 800c66c:	ab04      	add	r3, sp, #16
 800c66e:	b292      	uxth	r2, r2
 800c670:	4604      	mov	r4, r0
 800c672:	f001 f927 	bl	800d8c4 <uxr_prepare_stream_to_write_submessage>
 800c676:	b918      	cbnz	r0, 800c680 <uxr_common_create_entity+0x3c>
 800c678:	4604      	mov	r4, r0
 800c67a:	4620      	mov	r0, r4
 800c67c:	b00c      	add	sp, #48	; 0x30
 800c67e:	bd10      	pop	{r4, pc}
 800c680:	9902      	ldr	r1, [sp, #8]
 800c682:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c684:	4620      	mov	r0, r4
 800c686:	f001 fa53 	bl	800db30 <uxr_init_base_object_request>
 800c68a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c68c:	4604      	mov	r4, r0
 800c68e:	a804      	add	r0, sp, #16
 800c690:	f002 fc00 	bl	800ee94 <uxr_serialize_CREATE_Payload>
 800c694:	4620      	mov	r0, r4
 800c696:	b00c      	add	sp, #48	; 0x30
 800c698:	bd10      	pop	{r4, pc}
 800c69a:	bf00      	nop

0800c69c <uxr_buffer_create_participant_bin>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800c6a2:	ac11      	add	r4, sp, #68	; 0x44
 800c6a4:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c6ae:	7223      	strb	r3, [r4, #8]
 800c6b0:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800c6b2:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	7122      	strb	r2, [r4, #4]
 800c6be:	f88d 1014 	strb.w	r1, [sp, #20]
 800c6c2:	b1cb      	cbz	r3, 800c6f8 <uxr_buffer_create_participant_bin+0x5c>
 800c6c4:	f88d 201c 	strb.w	r2, [sp, #28]
 800c6c8:	9308      	str	r3, [sp, #32]
 800c6ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6ce:	a915      	add	r1, sp, #84	; 0x54
 800c6d0:	a809      	add	r0, sp, #36	; 0x24
 800c6d2:	f7ff ff27 	bl	800c524 <ucdr_init_buffer>
 800c6d6:	a905      	add	r1, sp, #20
 800c6d8:	a809      	add	r0, sp, #36	; 0x24
 800c6da:	f001 ffbd 	bl	800e658 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c6de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6e0:	9600      	str	r6, [sp, #0]
 800c6e2:	9401      	str	r4, [sp, #4]
 800c6e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c6e8:	60e3      	str	r3, [r4, #12]
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	f7ff ffa9 	bl	800c644 <uxr_common_create_entity>
 800c6f2:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	f88d 301c 	strb.w	r3, [sp, #28]
 800c6fc:	e7e5      	b.n	800c6ca <uxr_buffer_create_participant_bin+0x2e>
 800c6fe:	bf00      	nop

0800c700 <uxr_buffer_create_topic_bin>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800c706:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c70a:	9105      	str	r1, [sp, #20]
 800c70c:	4605      	mov	r5, r0
 800c70e:	a997      	add	r1, sp, #604	; 0x25c
 800c710:	4618      	mov	r0, r3
 800c712:	2302      	movs	r3, #2
 800c714:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800c718:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800c71c:	f000 f996 	bl	800ca4c <uxr_object_id_to_raw>
 800c720:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800c722:	9306      	str	r3, [sp, #24]
 800c724:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800c726:	930a      	str	r3, [sp, #40]	; 0x28
 800c728:	2303      	movs	r3, #3
 800c72a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c72e:	2301      	movs	r3, #1
 800c730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c734:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c738:	a917      	add	r1, sp, #92	; 0x5c
 800c73a:	2300      	movs	r3, #0
 800c73c:	a80b      	add	r0, sp, #44	; 0x2c
 800c73e:	f88d 301c 	strb.w	r3, [sp, #28]
 800c742:	f7ff feef 	bl	800c524 <ucdr_init_buffer>
 800c746:	a906      	add	r1, sp, #24
 800c748:	a80b      	add	r0, sp, #44	; 0x2c
 800c74a:	f001 ffa7 	bl	800e69c <uxr_serialize_OBJK_Topic_Binary>
 800c74e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c750:	9316      	str	r3, [sp, #88]	; 0x58
 800c752:	ac13      	add	r4, sp, #76	; 0x4c
 800c754:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c758:	9600      	str	r6, [sp, #0]
 800c75a:	9401      	str	r4, [sp, #4]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	4628      	mov	r0, r5
 800c760:	f7ff ff70 	bl	800c644 <uxr_common_create_entity>
 800c764:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800c768:	bd70      	pop	{r4, r5, r6, pc}
 800c76a:	bf00      	nop

0800c76c <uxr_buffer_create_publisher_bin>:
 800c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800c772:	4605      	mov	r5, r0
 800c774:	9105      	str	r1, [sp, #20]
 800c776:	4618      	mov	r0, r3
 800c778:	2603      	movs	r6, #3
 800c77a:	a992      	add	r1, sp, #584	; 0x248
 800c77c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c780:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800c784:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800c788:	f000 f960 	bl	800ca4c <uxr_object_id_to_raw>
 800c78c:	2300      	movs	r3, #0
 800c78e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c792:	a912      	add	r1, sp, #72	; 0x48
 800c794:	a806      	add	r0, sp, #24
 800c796:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800c79a:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800c79e:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800c7a2:	f7ff febf 	bl	800c524 <ucdr_init_buffer>
 800c7a6:	a993      	add	r1, sp, #588	; 0x24c
 800c7a8:	a806      	add	r0, sp, #24
 800c7aa:	f002 f82b 	bl	800e804 <uxr_serialize_OBJK_Publisher_Binary>
 800c7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b0:	9311      	str	r3, [sp, #68]	; 0x44
 800c7b2:	ac0e      	add	r4, sp, #56	; 0x38
 800c7b4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c7b8:	9700      	str	r7, [sp, #0]
 800c7ba:	9401      	str	r4, [sp, #4]
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	4628      	mov	r0, r5
 800c7c0:	f7ff ff40 	bl	800c644 <uxr_common_create_entity>
 800c7c4:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800c7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ca:	bf00      	nop

0800c7cc <uxr_buffer_create_subscriber_bin>:
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800c7d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c7d6:	9105      	str	r1, [sp, #20]
 800c7d8:	4605      	mov	r5, r0
 800c7da:	a992      	add	r1, sp, #584	; 0x248
 800c7dc:	4618      	mov	r0, r3
 800c7de:	2304      	movs	r3, #4
 800c7e0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800c7e4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800c7e8:	f000 f930 	bl	800ca4c <uxr_object_id_to_raw>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7f2:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800c7f6:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800c7fa:	a912      	add	r1, sp, #72	; 0x48
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	a806      	add	r0, sp, #24
 800c800:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800c804:	f7ff fe8e 	bl	800c524 <ucdr_init_buffer>
 800c808:	a993      	add	r1, sp, #588	; 0x24c
 800c80a:	a806      	add	r0, sp, #24
 800c80c:	f002 f8aa 	bl	800e964 <uxr_serialize_OBJK_Subscriber_Binary>
 800c810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c812:	9311      	str	r3, [sp, #68]	; 0x44
 800c814:	ac0e      	add	r4, sp, #56	; 0x38
 800c816:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c81a:	9600      	str	r6, [sp, #0]
 800c81c:	9401      	str	r4, [sp, #4]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	4628      	mov	r0, r5
 800c822:	f7ff ff0f 	bl	800c644 <uxr_common_create_entity>
 800c826:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800c82a:	bd70      	pop	{r4, r5, r6, pc}

0800c82c <uxr_buffer_create_datawriter_bin>:
 800c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c830:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c834:	ac1d      	add	r4, sp, #116	; 0x74
 800c836:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c83a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800c83e:	9105      	str	r1, [sp, #20]
 800c840:	4606      	mov	r6, r0
 800c842:	a9a1      	add	r1, sp, #644	; 0x284
 800c844:	4618      	mov	r0, r3
 800c846:	2305      	movs	r3, #5
 800c848:	7123      	strb	r3, [r4, #4]
 800c84a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800c84e:	2703      	movs	r7, #3
 800c850:	f000 f8fc 	bl	800ca4c <uxr_object_id_to_raw>
 800c854:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800c856:	7227      	strb	r7, [r4, #8]
 800c858:	a90e      	add	r1, sp, #56	; 0x38
 800c85a:	f000 f8f7 	bl	800ca4c <uxr_object_id_to_raw>
 800c85e:	2300      	movs	r3, #0
 800c860:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800c864:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800c868:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800c86c:	3d00      	subs	r5, #0
 800c86e:	bf18      	it	ne
 800c870:	2501      	movne	r5, #1
 800c872:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800c876:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800c87a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c87e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c882:	2301      	movs	r3, #1
 800c884:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800c888:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800c88c:	bb8a      	cbnz	r2, 800c8f2 <uxr_buffer_create_datawriter_bin+0xc6>
 800c88e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c892:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800c896:	f04f 0c13 	mov.w	ip, #19
 800c89a:	250b      	movs	r5, #11
 800c89c:	2221      	movs	r2, #33	; 0x21
 800c89e:	2111      	movs	r1, #17
 800c8a0:	2009      	movs	r0, #9
 800c8a2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800c8a6:	b923      	cbnz	r3, 800c8b2 <uxr_buffer_create_datawriter_bin+0x86>
 800c8a8:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800c8ac:	4672      	mov	r2, lr
 800c8ae:	4661      	mov	r1, ip
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d025      	beq.n	800c906 <uxr_buffer_create_datawriter_bin+0xda>
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d029      	beq.n	800c912 <uxr_buffer_create_datawriter_bin+0xe6>
 800c8be:	b32b      	cbz	r3, 800c90c <uxr_buffer_create_datawriter_bin+0xe0>
 800c8c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8c4:	a921      	add	r1, sp, #132	; 0x84
 800c8c6:	a806      	add	r0, sp, #24
 800c8c8:	f7ff fe2c 	bl	800c524 <ucdr_init_buffer>
 800c8cc:	a90e      	add	r1, sp, #56	; 0x38
 800c8ce:	a806      	add	r0, sp, #24
 800c8d0:	f002 f8fa 	bl	800eac8 <uxr_serialize_OBJK_DataWriter_Binary>
 800c8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d6:	f8cd 8000 	str.w	r8, [sp]
 800c8da:	9401      	str	r4, [sp, #4]
 800c8dc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c8e0:	60e3      	str	r3, [r4, #12]
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	f7ff fead 	bl	800c644 <uxr_common_create_entity>
 800c8ea:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f2:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800c8f6:	f04f 0c12 	mov.w	ip, #18
 800c8fa:	250a      	movs	r5, #10
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	2110      	movs	r1, #16
 800c900:	2008      	movs	r0, #8
 800c902:	2702      	movs	r7, #2
 800c904:	e7cd      	b.n	800c8a2 <uxr_buffer_create_datawriter_bin+0x76>
 800c906:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800c90a:	e7d9      	b.n	800c8c0 <uxr_buffer_create_datawriter_bin+0x94>
 800c90c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800c910:	e7d6      	b.n	800c8c0 <uxr_buffer_create_datawriter_bin+0x94>
 800c912:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800c916:	e7d3      	b.n	800c8c0 <uxr_buffer_create_datawriter_bin+0x94>

0800c918 <uxr_buffer_create_datareader_bin>:
 800c918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c91c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800c920:	ac1f      	add	r4, sp, #124	; 0x7c
 800c922:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c926:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800c92a:	9105      	str	r1, [sp, #20]
 800c92c:	4606      	mov	r6, r0
 800c92e:	a9a3      	add	r1, sp, #652	; 0x28c
 800c930:	4618      	mov	r0, r3
 800c932:	2306      	movs	r3, #6
 800c934:	7123      	strb	r3, [r4, #4]
 800c936:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800c93a:	2703      	movs	r7, #3
 800c93c:	f000 f886 	bl	800ca4c <uxr_object_id_to_raw>
 800c940:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800c942:	7227      	strb	r7, [r4, #8]
 800c944:	a90e      	add	r1, sp, #56	; 0x38
 800c946:	f000 f881 	bl	800ca4c <uxr_object_id_to_raw>
 800c94a:	2300      	movs	r3, #0
 800c94c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800c950:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800c954:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800c958:	3d00      	subs	r5, #0
 800c95a:	bf18      	it	ne
 800c95c:	2501      	movne	r5, #1
 800c95e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800c962:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800c966:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800c96a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c96e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c972:	2301      	movs	r3, #1
 800c974:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800c978:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800c97c:	bb8a      	cbnz	r2, 800c9e2 <uxr_buffer_create_datareader_bin+0xca>
 800c97e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c982:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800c986:	f04f 0c13 	mov.w	ip, #19
 800c98a:	250b      	movs	r5, #11
 800c98c:	2221      	movs	r2, #33	; 0x21
 800c98e:	2111      	movs	r1, #17
 800c990:	2009      	movs	r0, #9
 800c992:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800c996:	b923      	cbnz	r3, 800c9a2 <uxr_buffer_create_datareader_bin+0x8a>
 800c998:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800c99c:	4672      	mov	r2, lr
 800c99e:	4661      	mov	r1, ip
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d025      	beq.n	800c9f6 <uxr_buffer_create_datareader_bin+0xde>
 800c9aa:	2b03      	cmp	r3, #3
 800c9ac:	d029      	beq.n	800ca02 <uxr_buffer_create_datareader_bin+0xea>
 800c9ae:	b32b      	cbz	r3, 800c9fc <uxr_buffer_create_datareader_bin+0xe4>
 800c9b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9b4:	a923      	add	r1, sp, #140	; 0x8c
 800c9b6:	a806      	add	r0, sp, #24
 800c9b8:	f7ff fdb4 	bl	800c524 <ucdr_init_buffer>
 800c9bc:	a90e      	add	r1, sp, #56	; 0x38
 800c9be:	a806      	add	r0, sp, #24
 800c9c0:	f002 f846 	bl	800ea50 <uxr_serialize_OBJK_DataReader_Binary>
 800c9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c6:	f8cd 8000 	str.w	r8, [sp]
 800c9ca:	9401      	str	r4, [sp, #4]
 800c9cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c9d0:	60e3      	str	r3, [r4, #12]
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	f7ff fe35 	bl	800c644 <uxr_common_create_entity>
 800c9da:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800c9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e2:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800c9e6:	f04f 0c12 	mov.w	ip, #18
 800c9ea:	250a      	movs	r5, #10
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	2110      	movs	r1, #16
 800c9f0:	2008      	movs	r0, #8
 800c9f2:	2702      	movs	r7, #2
 800c9f4:	e7cd      	b.n	800c992 <uxr_buffer_create_datareader_bin+0x7a>
 800c9f6:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800c9fa:	e7d9      	b.n	800c9b0 <uxr_buffer_create_datareader_bin+0x98>
 800c9fc:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ca00:	e7d6      	b.n	800c9b0 <uxr_buffer_create_datareader_bin+0x98>
 800ca02:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ca06:	e7d3      	b.n	800c9b0 <uxr_buffer_create_datareader_bin+0x98>

0800ca08 <uxr_object_id>:
 800ca08:	b082      	sub	sp, #8
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f88d 1006 	strb.w	r1, [sp, #6]
 800ca10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca14:	f360 030f 	bfi	r3, r0, #0, #16
 800ca18:	f362 431f 	bfi	r3, r2, #16, #16
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	b002      	add	sp, #8
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop

0800ca24 <uxr_object_id_from_raw>:
 800ca24:	7843      	ldrb	r3, [r0, #1]
 800ca26:	7801      	ldrb	r1, [r0, #0]
 800ca28:	b082      	sub	sp, #8
 800ca2a:	f003 020f 	and.w	r2, r3, #15
 800ca2e:	f88d 2006 	strb.w	r2, [sp, #6]
 800ca32:	091b      	lsrs	r3, r3, #4
 800ca34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca38:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	f363 000f 	bfi	r0, r3, #0, #16
 800ca42:	f362 401f 	bfi	r0, r2, #16, #16
 800ca46:	b002      	add	sp, #8
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop

0800ca4c <uxr_object_id_to_raw>:
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ca52:	b082      	sub	sp, #8
 800ca54:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ca58:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ca5c:	f881 c000 	strb.w	ip, [r1]
 800ca60:	7048      	strb	r0, [r1, #1]
 800ca62:	b002      	add	sp, #8
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <on_get_fragmentation_info>:
 800ca68:	b500      	push	{lr}
 800ca6a:	b08b      	sub	sp, #44	; 0x2c
 800ca6c:	4601      	mov	r1, r0
 800ca6e:	2204      	movs	r2, #4
 800ca70:	a802      	add	r0, sp, #8
 800ca72:	f7ff fd57 	bl	800c524 <ucdr_init_buffer>
 800ca76:	f10d 0305 	add.w	r3, sp, #5
 800ca7a:	f10d 0206 	add.w	r2, sp, #6
 800ca7e:	a901      	add	r1, sp, #4
 800ca80:	a802      	add	r0, sp, #8
 800ca82:	f001 f9d7 	bl	800de34 <uxr_read_submessage_header>
 800ca86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca8a:	2b0d      	cmp	r3, #13
 800ca8c:	d003      	beq.n	800ca96 <on_get_fragmentation_info+0x2e>
 800ca8e:	2000      	movs	r0, #0
 800ca90:	b00b      	add	sp, #44	; 0x2c
 800ca92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca9a:	f013 0f02 	tst.w	r3, #2
 800ca9e:	bf14      	ite	ne
 800caa0:	2002      	movne	r0, #2
 800caa2:	2001      	moveq	r0, #1
 800caa4:	b00b      	add	sp, #44	; 0x2c
 800caa6:	f85d fb04 	ldr.w	pc, [sp], #4
 800caaa:	bf00      	nop

0800caac <read_submessage_get_info>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	2500      	movs	r5, #0
 800cab0:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800cab4:	4604      	mov	r4, r0
 800cab6:	f44f 7224 	mov.w	r2, #656	; 0x290
 800caba:	460e      	mov	r6, r1
 800cabc:	a810      	add	r0, sp, #64	; 0x40
 800cabe:	4629      	mov	r1, r5
 800cac0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cac4:	f009 fe58 	bl	8016778 <memset>
 800cac8:	a903      	add	r1, sp, #12
 800caca:	4630      	mov	r0, r6
 800cacc:	f002 fa72 	bl	800efb4 <uxr_deserialize_GET_INFO_Payload>
 800cad0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cad4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cad8:	4620      	mov	r0, r4
 800cada:	f001 f821 	bl	800db20 <uxr_session_header_offset>
 800cade:	462b      	mov	r3, r5
 800cae0:	9000      	str	r0, [sp, #0]
 800cae2:	220c      	movs	r2, #12
 800cae4:	a905      	add	r1, sp, #20
 800cae6:	a808      	add	r0, sp, #32
 800cae8:	f7ff fd0a 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800caec:	a910      	add	r1, sp, #64	; 0x40
 800caee:	a808      	add	r0, sp, #32
 800caf0:	f002 fad2 	bl	800f098 <uxr_serialize_INFO_Payload>
 800caf4:	9b08      	ldr	r3, [sp, #32]
 800caf6:	462a      	mov	r2, r5
 800caf8:	4629      	mov	r1, r5
 800cafa:	4620      	mov	r0, r4
 800cafc:	f000 ffba 	bl	800da74 <uxr_stamp_session_header>
 800cb00:	a808      	add	r0, sp, #32
 800cb02:	f7ff fd3b 	bl	800c57c <ucdr_buffer_length>
 800cb06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cb08:	4602      	mov	r2, r0
 800cb0a:	a905      	add	r1, sp, #20
 800cb0c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cb10:	47a0      	blx	r4
 800cb12:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800cb16:	bd70      	pop	{r4, r5, r6, pc}

0800cb18 <write_submessage_acknack.isra.0>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	b092      	sub	sp, #72	; 0x48
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	460e      	mov	r6, r1
 800cb20:	4614      	mov	r4, r2
 800cb22:	f000 fffd 	bl	800db20 <uxr_session_header_offset>
 800cb26:	a905      	add	r1, sp, #20
 800cb28:	9000      	str	r0, [sp, #0]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	a80a      	add	r0, sp, #40	; 0x28
 800cb2e:	2211      	movs	r2, #17
 800cb30:	f7ff fce6 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800cb34:	2218      	movs	r2, #24
 800cb36:	fb02 5404 	mla	r4, r2, r4, r5
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2205      	movs	r2, #5
 800cb3e:	3450      	adds	r4, #80	; 0x50
 800cb40:	210a      	movs	r1, #10
 800cb42:	a80a      	add	r0, sp, #40	; 0x28
 800cb44:	f001 f95c 	bl	800de00 <uxr_buffer_submessage_header>
 800cb48:	a903      	add	r1, sp, #12
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f007 fc48 	bl	80143e0 <uxr_compute_acknack>
 800cb50:	ba40      	rev16	r0, r0
 800cb52:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cb56:	a903      	add	r1, sp, #12
 800cb58:	a80a      	add	r0, sp, #40	; 0x28
 800cb5a:	f88d 6010 	strb.w	r6, [sp, #16]
 800cb5e:	f002 fb0b 	bl	800f178 <uxr_serialize_ACKNACK_Payload>
 800cb62:	2200      	movs	r2, #0
 800cb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb66:	4611      	mov	r1, r2
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f000 ff83 	bl	800da74 <uxr_stamp_session_header>
 800cb6e:	a80a      	add	r0, sp, #40	; 0x28
 800cb70:	f7ff fd04 	bl	800c57c <ucdr_buffer_length>
 800cb74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cb76:	4602      	mov	r2, r0
 800cb78:	a905      	add	r1, sp, #20
 800cb7a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cb7e:	47a0      	blx	r4
 800cb80:	b012      	add	sp, #72	; 0x48
 800cb82:	bd70      	pop	{r4, r5, r6, pc}
 800cb84:	0000      	movs	r0, r0
	...

0800cb88 <uxr_init_session>:
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800cbc0 <uxr_init_session+0x38>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800cb94:	4604      	mov	r4, r0
 800cb96:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800cb9a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800cb9e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800cba2:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800cba6:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800cbaa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800cbae:	2181      	movs	r1, #129	; 0x81
 800cbb0:	f000 fecc 	bl	800d94c <uxr_init_session_info>
 800cbb4:	f104 0008 	add.w	r0, r4, #8
 800cbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbbc:	f001 b83c 	b.w	800dc38 <uxr_init_stream_storage>
	...

0800cbc8 <uxr_set_status_callback>:
 800cbc8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop

0800cbd0 <uxr_set_topic_callback>:
 800cbd0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop

0800cbd8 <uxr_set_request_callback>:
 800cbd8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop

0800cbe0 <uxr_set_reply_callback>:
 800cbe0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop

0800cbe8 <uxr_create_output_best_effort_stream>:
 800cbe8:	b510      	push	{r4, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	e9cd 2100 	strd	r2, r1, [sp]
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	f000 ff95 	bl	800db20 <uxr_session_header_offset>
 800cbf6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	f104 0008 	add.w	r0, r4, #8
 800cc00:	b004      	add	sp, #16
 800cc02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc06:	f001 b861 	b.w	800dccc <uxr_add_output_best_effort_buffer>
 800cc0a:	bf00      	nop

0800cc0c <uxr_create_output_reliable_stream>:
 800cc0c:	b510      	push	{r4, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cc14:	4604      	mov	r4, r0
 800cc16:	9303      	str	r3, [sp, #12]
 800cc18:	f000 ff82 	bl	800db20 <uxr_session_header_offset>
 800cc1c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cc20:	9000      	str	r0, [sp, #0]
 800cc22:	9905      	ldr	r1, [sp, #20]
 800cc24:	f104 0008 	add.w	r0, r4, #8
 800cc28:	f001 f864 	bl	800dcf4 <uxr_add_output_reliable_buffer>
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	b2c3      	uxtb	r3, r0
 800cc30:	f363 0207 	bfi	r2, r3, #0, #8
 800cc34:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cc38:	f363 220f 	bfi	r2, r3, #8, #8
 800cc3c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cc40:	f363 4217 	bfi	r2, r3, #16, #8
 800cc44:	0e03      	lsrs	r3, r0, #24
 800cc46:	f363 621f 	bfi	r2, r3, #24, #8
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	b008      	add	sp, #32
 800cc4e:	bd10      	pop	{r4, pc}

0800cc50 <uxr_create_input_best_effort_stream>:
 800cc50:	b082      	sub	sp, #8
 800cc52:	3008      	adds	r0, #8
 800cc54:	b002      	add	sp, #8
 800cc56:	f001 b867 	b.w	800dd28 <uxr_add_input_best_effort_buffer>
 800cc5a:	bf00      	nop

0800cc5c <uxr_create_input_reliable_stream>:
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	4c0b      	ldr	r4, [pc, #44]	; (800cc90 <uxr_create_input_reliable_stream+0x34>)
 800cc62:	9400      	str	r4, [sp, #0]
 800cc64:	3008      	adds	r0, #8
 800cc66:	f001 f875 	bl	800dd54 <uxr_add_input_reliable_buffer>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	b2c3      	uxtb	r3, r0
 800cc6e:	f363 0207 	bfi	r2, r3, #0, #8
 800cc72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cc76:	f363 220f 	bfi	r2, r3, #8, #8
 800cc7a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cc7e:	f363 4217 	bfi	r2, r3, #16, #8
 800cc82:	0e03      	lsrs	r3, r0, #24
 800cc84:	f363 621f 	bfi	r2, r3, #24, #8
 800cc88:	4610      	mov	r0, r2
 800cc8a:	b004      	add	sp, #16
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	bf00      	nop
 800cc90:	0800ca69 	.word	0x0800ca69

0800cc94 <uxr_epoch_nanos>:
 800cc94:	b510      	push	{r4, lr}
 800cc96:	4604      	mov	r4, r0
 800cc98:	f001 f912 	bl	800dec0 <uxr_nanos>
 800cc9c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800cca0:	1ac0      	subs	r0, r0, r3
 800cca2:	eb61 0102 	sbc.w	r1, r1, r2
 800cca6:	bd10      	pop	{r4, pc}

0800cca8 <uxr_flash_output_streams>:
 800cca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccac:	7e03      	ldrb	r3, [r0, #24]
 800ccae:	b084      	sub	sp, #16
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d035      	beq.n	800cd22 <uxr_flash_output_streams+0x7a>
 800ccb6:	f04f 0900 	mov.w	r9, #0
 800ccba:	4648      	mov	r0, r9
 800ccbc:	f10d 0802 	add.w	r8, sp, #2
 800ccc0:	af03      	add	r7, sp, #12
 800ccc2:	ae02      	add	r6, sp, #8
 800ccc4:	e006      	b.n	800ccd4 <uxr_flash_output_streams+0x2c>
 800ccc6:	7e23      	ldrb	r3, [r4, #24]
 800ccc8:	f109 0901 	add.w	r9, r9, #1
 800cccc:	fa5f f089 	uxtb.w	r0, r9
 800ccd0:	4283      	cmp	r3, r0
 800ccd2:	d926      	bls.n	800cd22 <uxr_flash_output_streams+0x7a>
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ccdc:	f000 ff58 	bl	800db90 <uxr_stream_id>
 800cce0:	3508      	adds	r5, #8
 800cce2:	4684      	mov	ip, r0
 800cce4:	4643      	mov	r3, r8
 800cce6:	463a      	mov	r2, r7
 800cce8:	4631      	mov	r1, r6
 800ccea:	4628      	mov	r0, r5
 800ccec:	f8cd c004 	str.w	ip, [sp, #4]
 800ccf0:	f007 fbfc 	bl	80144ec <uxr_prepare_best_effort_buffer_to_send>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d0e6      	beq.n	800ccc6 <uxr_flash_output_streams+0x1e>
 800ccf8:	9b02      	ldr	r3, [sp, #8]
 800ccfa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ccfe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cd02:	4620      	mov	r0, r4
 800cd04:	f000 feb6 	bl	800da74 <uxr_stamp_session_header>
 800cd08:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd0a:	9a03      	ldr	r2, [sp, #12]
 800cd0c:	685d      	ldr	r5, [r3, #4]
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	9902      	ldr	r1, [sp, #8]
 800cd12:	47a8      	blx	r5
 800cd14:	f109 0901 	add.w	r9, r9, #1
 800cd18:	7e23      	ldrb	r3, [r4, #24]
 800cd1a:	fa5f f089 	uxtb.w	r0, r9
 800cd1e:	4283      	cmp	r3, r0
 800cd20:	d8d8      	bhi.n	800ccd4 <uxr_flash_output_streams+0x2c>
 800cd22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800cd26:	b38b      	cbz	r3, 800cd8c <uxr_flash_output_streams+0xe4>
 800cd28:	f04f 0900 	mov.w	r9, #0
 800cd2c:	f10d 0802 	add.w	r8, sp, #2
 800cd30:	af03      	add	r7, sp, #12
 800cd32:	ae02      	add	r6, sp, #8
 800cd34:	4648      	mov	r0, r9
 800cd36:	2201      	movs	r2, #1
 800cd38:	2102      	movs	r1, #2
 800cd3a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800cd3e:	f000 ff27 	bl	800db90 <uxr_stream_id>
 800cd42:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cd46:	3520      	adds	r5, #32
 800cd48:	9001      	str	r0, [sp, #4]
 800cd4a:	e00d      	b.n	800cd68 <uxr_flash_output_streams+0xc0>
 800cd4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cd50:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cd54:	9b02      	ldr	r3, [sp, #8]
 800cd56:	f000 fe8d 	bl	800da74 <uxr_stamp_session_header>
 800cd5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd5c:	9a03      	ldr	r2, [sp, #12]
 800cd5e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800cd62:	9902      	ldr	r1, [sp, #8]
 800cd64:	6818      	ldr	r0, [r3, #0]
 800cd66:	47d0      	blx	sl
 800cd68:	4643      	mov	r3, r8
 800cd6a:	463a      	mov	r2, r7
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f007 fdda 	bl	8014928 <uxr_prepare_next_reliable_buffer_to_send>
 800cd74:	4603      	mov	r3, r0
 800cd76:	4620      	mov	r0, r4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e7      	bne.n	800cd4c <uxr_flash_output_streams+0xa4>
 800cd7c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800cd80:	f109 0901 	add.w	r9, r9, #1
 800cd84:	fa5f f089 	uxtb.w	r0, r9
 800cd88:	4283      	cmp	r3, r0
 800cd8a:	d8d4      	bhi.n	800cd36 <uxr_flash_output_streams+0x8e>
 800cd8c:	b004      	add	sp, #16
 800cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd92:	bf00      	nop

0800cd94 <read_submessage_info>:
 800cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd98:	460d      	mov	r5, r1
 800cd9a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800cd9e:	4669      	mov	r1, sp
 800cda0:	4607      	mov	r7, r0
 800cda2:	4628      	mov	r0, r5
 800cda4:	f002 f814 	bl	800edd0 <uxr_deserialize_BaseObjectReply>
 800cda8:	a902      	add	r1, sp, #8
 800cdaa:	4604      	mov	r4, r0
 800cdac:	4628      	mov	r0, r5
 800cdae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cdb2:	f7fe facb 	bl	800b34c <ucdr_deserialize_bool>
 800cdb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cdba:	4004      	ands	r4, r0
 800cdbc:	b2e4      	uxtb	r4, r4
 800cdbe:	b95b      	cbnz	r3, 800cdd8 <read_submessage_info+0x44>
 800cdc0:	a987      	add	r1, sp, #540	; 0x21c
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	f7fe fac2 	bl	800b34c <ucdr_deserialize_bool>
 800cdc8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800cdcc:	4606      	mov	r6, r0
 800cdce:	b94b      	cbnz	r3, 800cde4 <read_submessage_info+0x50>
 800cdd0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800cdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd8:	a903      	add	r1, sp, #12
 800cdda:	4628      	mov	r0, r5
 800cddc:	f001 fea0 	bl	800eb20 <uxr_deserialize_ObjectVariant>
 800cde0:	4004      	ands	r4, r0
 800cde2:	e7ed      	b.n	800cdc0 <read_submessage_info+0x2c>
 800cde4:	a988      	add	r1, sp, #544	; 0x220
 800cde6:	4628      	mov	r0, r5
 800cde8:	f7fe fade 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800cdec:	4234      	tst	r4, r6
 800cdee:	d0ef      	beq.n	800cdd0 <read_submessage_info+0x3c>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d0ed      	beq.n	800cdd0 <read_submessage_info+0x3c>
 800cdf4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800cdf8:	2b0d      	cmp	r3, #13
 800cdfa:	d1e9      	bne.n	800cdd0 <read_submessage_info+0x3c>
 800cdfc:	a98a      	add	r1, sp, #552	; 0x228
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f7ff f878 	bl	800bef4 <ucdr_deserialize_int16_t>
 800ce04:	b140      	cbz	r0, 800ce18 <read_submessage_info+0x84>
 800ce06:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	dd07      	ble.n	800ce1e <read_submessage_info+0x8a>
 800ce0e:	f1b8 0f00 	cmp.w	r8, #0
 800ce12:	bf14      	ite	ne
 800ce14:	2001      	movne	r0, #1
 800ce16:	2002      	moveq	r0, #2
 800ce18:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800ce1c:	e7d8      	b.n	800cdd0 <read_submessage_info+0x3c>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	e7fa      	b.n	800ce18 <read_submessage_info+0x84>
 800ce22:	bf00      	nop

0800ce24 <read_submessage_list>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	b097      	sub	sp, #92	; 0x5c
 800ce2a:	4ec1      	ldr	r6, [pc, #772]	; (800d130 <read_submessage_list+0x30c>)
 800ce2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce2e:	4604      	mov	r4, r0
 800ce30:	460d      	mov	r5, r1
 800ce32:	f04f 0801 	mov.w	r8, #1
 800ce36:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800ce3a:	aa0c      	add	r2, sp, #48	; 0x30
 800ce3c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800ce40:	4628      	mov	r0, r5
 800ce42:	f000 fff7 	bl	800de34 <uxr_read_submessage_header>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f000 813e 	beq.w	800d0c8 <read_submessage_list+0x2a4>
 800ce4c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800ce50:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800ce54:	3b02      	subs	r3, #2
 800ce56:	2b0d      	cmp	r3, #13
 800ce58:	d8ed      	bhi.n	800ce36 <read_submessage_list+0x12>
 800ce5a:	a101      	add	r1, pc, #4	; (adr r1, 800ce60 <read_submessage_list+0x3c>)
 800ce5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce60:	0800d0bf 	.word	0x0800d0bf
 800ce64:	0800ce37 	.word	0x0800ce37
 800ce68:	0800d0af 	.word	0x0800d0af
 800ce6c:	0800d04d 	.word	0x0800d04d
 800ce70:	0800d043 	.word	0x0800d043
 800ce74:	0800ce37 	.word	0x0800ce37
 800ce78:	0800ce37 	.word	0x0800ce37
 800ce7c:	0800cfa3 	.word	0x0800cfa3
 800ce80:	0800cf33 	.word	0x0800cf33
 800ce84:	0800cef3 	.word	0x0800cef3
 800ce88:	0800ce37 	.word	0x0800ce37
 800ce8c:	0800ce37 	.word	0x0800ce37
 800ce90:	0800ce37 	.word	0x0800ce37
 800ce94:	0800ce99 	.word	0x0800ce99
 800ce98:	a910      	add	r1, sp, #64	; 0x40
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f002 f9bc 	bl	800f218 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cea0:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800cea4:	f1b9 0f00 	cmp.w	r9, #0
 800cea8:	f000 8116 	beq.w	800d0d8 <read_submessage_list+0x2b4>
 800ceac:	f001 f808 	bl	800dec0 <uxr_nanos>
 800ceb0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ceb8:	2100      	movs	r1, #0
 800ceba:	468c      	mov	ip, r1
 800cebc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800cec0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800cec4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cec6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800cec8:	468c      	mov	ip, r1
 800ceca:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800cece:	46e2      	mov	sl, ip
 800ced0:	46bc      	mov	ip, r7
 800ced2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800ced6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ceda:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800cede:	e9cd 7100 	strd	r7, r1, [sp]
 800cee2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800cee6:	9106      	str	r1, [sp, #24]
 800cee8:	4620      	mov	r0, r4
 800ceea:	47c8      	blx	r9
 800ceec:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800cef0:	e7a1      	b.n	800ce36 <read_submessage_list+0x12>
 800cef2:	a910      	add	r1, sp, #64	; 0x40
 800cef4:	4628      	mov	r0, r5
 800cef6:	f002 f97d 	bl	800f1f4 <uxr_deserialize_HEARTBEAT_Payload>
 800cefa:	2100      	movs	r1, #0
 800cefc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800cf00:	f000 fe70 	bl	800dbe4 <uxr_stream_id_from_raw>
 800cf04:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800cf08:	900f      	str	r0, [sp, #60]	; 0x3c
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	f104 0008 	add.w	r0, r4, #8
 800cf10:	f000 ff56 	bl	800ddc0 <uxr_get_input_reliable_stream>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d08e      	beq.n	800ce36 <read_submessage_list+0x12>
 800cf18:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800cf1c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800cf20:	f007 fa52 	bl	80143c8 <uxr_process_heartbeat>
 800cf24:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800cf28:	463a      	mov	r2, r7
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f7ff fdf4 	bl	800cb18 <write_submessage_acknack.isra.0>
 800cf30:	e781      	b.n	800ce36 <read_submessage_list+0x12>
 800cf32:	a910      	add	r1, sp, #64	; 0x40
 800cf34:	4628      	mov	r0, r5
 800cf36:	f002 f935 	bl	800f1a4 <uxr_deserialize_ACKNACK_Payload>
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800cf40:	f000 fe50 	bl	800dbe4 <uxr_stream_id_from_raw>
 800cf44:	900d      	str	r0, [sp, #52]	; 0x34
 800cf46:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800cf4a:	f104 0008 	add.w	r0, r4, #8
 800cf4e:	f000 ff23 	bl	800dd98 <uxr_get_output_reliable_stream>
 800cf52:	4607      	mov	r7, r0
 800cf54:	2800      	cmp	r0, #0
 800cf56:	f43f af6e 	beq.w	800ce36 <read_submessage_list+0x12>
 800cf5a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800cf5e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800cf62:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800cf66:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800cf6a:	b289      	uxth	r1, r1
 800cf6c:	f007 fd86 	bl	8014a7c <uxr_process_acknack>
 800cf70:	4638      	mov	r0, r7
 800cf72:	f007 fd43 	bl	80149fc <uxr_begin_output_nack_buffer_it>
 800cf76:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800cf7a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800cf7e:	e006      	b.n	800cf8e <read_submessage_list+0x16a>
 800cf80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cf82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf84:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800cf88:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cf8a:	6818      	ldr	r0, [r3, #0]
 800cf8c:	47c8      	blx	r9
 800cf8e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800cf92:	aa0f      	add	r2, sp, #60	; 0x3c
 800cf94:	4651      	mov	r1, sl
 800cf96:	4638      	mov	r0, r7
 800cf98:	f007 fd32 	bl	8014a00 <uxr_next_reliable_nack_buffer_to_send>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d1ef      	bne.n	800cf80 <read_submessage_list+0x15c>
 800cfa0:	e749      	b.n	800ce36 <read_submessage_list+0x12>
 800cfa2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800cfa6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800cfaa:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800cfae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800cfb2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800cfb6:	4651      	mov	r1, sl
 800cfb8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800cfbc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800cfc0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800cfc4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800cfce:	f001 fe49 	bl	800ec64 <uxr_deserialize_BaseObjectRequest>
 800cfd2:	4650      	mov	r0, sl
 800cfd4:	a90f      	add	r1, sp, #60	; 0x3c
 800cfd6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800cfda:	f000 fdc7 	bl	800db6c <uxr_parse_base_object_request>
 800cfde:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800cfe2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfe4:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800cfe8:	9110      	str	r1, [sp, #64]	; 0x40
 800cfea:	3f04      	subs	r7, #4
 800cfec:	f009 090e 	and.w	r9, r9, #14
 800cff0:	b2bf      	uxth	r7, r7
 800cff2:	f1bb 0f00 	cmp.w	fp, #0
 800cff6:	d006      	beq.n	800d006 <read_submessage_list+0x1e2>
 800cff8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	4652      	mov	r2, sl
 800d000:	2300      	movs	r3, #0
 800d002:	4620      	mov	r0, r4
 800d004:	47d8      	blx	fp
 800d006:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d008:	b16a      	cbz	r2, 800d026 <read_submessage_list+0x202>
 800d00a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d00c:	2100      	movs	r1, #0
 800d00e:	3802      	subs	r0, #2
 800d010:	e002      	b.n	800d018 <read_submessage_list+0x1f4>
 800d012:	3101      	adds	r1, #1
 800d014:	4291      	cmp	r1, r2
 800d016:	d006      	beq.n	800d026 <read_submessage_list+0x202>
 800d018:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d01c:	4553      	cmp	r3, sl
 800d01e:	d1f8      	bne.n	800d012 <read_submessage_list+0x1ee>
 800d020:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d022:	2200      	movs	r2, #0
 800d024:	545a      	strb	r2, [r3, r1]
 800d026:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800d02a:	9102      	str	r1, [sp, #8]
 800d02c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d02e:	9101      	str	r1, [sp, #4]
 800d030:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d032:	9100      	str	r1, [sp, #0]
 800d034:	464b      	mov	r3, r9
 800d036:	463a      	mov	r2, r7
 800d038:	4629      	mov	r1, r5
 800d03a:	4620      	mov	r0, r4
 800d03c:	f007 fddc 	bl	8014bf8 <read_submessage_format>
 800d040:	e6f9      	b.n	800ce36 <read_submessage_list+0x12>
 800d042:	4629      	mov	r1, r5
 800d044:	4620      	mov	r0, r4
 800d046:	f7ff fea5 	bl	800cd94 <read_submessage_info>
 800d04a:	e6f4      	b.n	800ce36 <read_submessage_list+0x12>
 800d04c:	2a00      	cmp	r2, #0
 800d04e:	d03e      	beq.n	800d0ce <read_submessage_list+0x2aa>
 800d050:	a910      	add	r1, sp, #64	; 0x40
 800d052:	4628      	mov	r0, r5
 800d054:	f002 f802 	bl	800f05c <uxr_deserialize_STATUS_Payload>
 800d058:	a90e      	add	r1, sp, #56	; 0x38
 800d05a:	aa0d      	add	r2, sp, #52	; 0x34
 800d05c:	a810      	add	r0, sp, #64	; 0x40
 800d05e:	f000 fd85 	bl	800db6c <uxr_parse_base_object_request>
 800d062:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800d066:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d068:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800d06c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800d070:	910f      	str	r1, [sp, #60]	; 0x3c
 800d072:	f1ba 0f00 	cmp.w	sl, #0
 800d076:	d006      	beq.n	800d086 <read_submessage_list+0x262>
 800d078:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	463a      	mov	r2, r7
 800d080:	464b      	mov	r3, r9
 800d082:	4620      	mov	r0, r4
 800d084:	47d0      	blx	sl
 800d086:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d088:	2a00      	cmp	r2, #0
 800d08a:	f43f aed4 	beq.w	800ce36 <read_submessage_list+0x12>
 800d08e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d090:	2100      	movs	r1, #0
 800d092:	3802      	subs	r0, #2
 800d094:	e003      	b.n	800d09e <read_submessage_list+0x27a>
 800d096:	3101      	adds	r1, #1
 800d098:	4291      	cmp	r1, r2
 800d09a:	f43f aecc 	beq.w	800ce36 <read_submessage_list+0x12>
 800d09e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d0a2:	42bb      	cmp	r3, r7
 800d0a4:	d1f7      	bne.n	800d096 <read_submessage_list+0x272>
 800d0a6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d0a8:	f803 9001 	strb.w	r9, [r3, r1]
 800d0ac:	e6c3      	b.n	800ce36 <read_submessage_list+0x12>
 800d0ae:	2a00      	cmp	r2, #0
 800d0b0:	f47f aec1 	bne.w	800ce36 <read_submessage_list+0x12>
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f000 fc9e 	bl	800d9f8 <uxr_read_create_session_status>
 800d0bc:	e6bb      	b.n	800ce36 <read_submessage_list+0x12>
 800d0be:	4629      	mov	r1, r5
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f7ff fcf3 	bl	800caac <read_submessage_get_info>
 800d0c6:	e6b6      	b.n	800ce36 <read_submessage_list+0x12>
 800d0c8:	b017      	add	sp, #92	; 0x5c
 800d0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f000 fc9d 	bl	800da10 <uxr_read_delete_session_status>
 800d0d6:	e6ae      	b.n	800ce36 <read_submessage_list+0x12>
 800d0d8:	f000 fef2 	bl	800dec0 <uxr_nanos>
 800d0dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d0e0:	464f      	mov	r7, r9
 800d0e2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d0e6:	1812      	adds	r2, r2, r0
 800d0e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d0ec:	eb47 0101 	adc.w	r1, r7, r1
 800d0f0:	464f      	mov	r7, r9
 800d0f2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	4684      	mov	ip, r0
 800d0fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800d0fe:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d102:	eb1c 0c00 	adds.w	ip, ip, r0
 800d106:	464f      	mov	r7, r9
 800d108:	eb43 0307 	adc.w	r3, r3, r7
 800d10c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d110:	eb61 0303 	sbc.w	r3, r1, r3
 800d114:	0fda      	lsrs	r2, r3, #31
 800d116:	eb12 020c 	adds.w	r2, r2, ip
 800d11a:	f143 0300 	adc.w	r3, r3, #0
 800d11e:	0852      	lsrs	r2, r2, #1
 800d120:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d124:	105b      	asrs	r3, r3, #1
 800d126:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800d12a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800d12e:	e6dd      	b.n	800ceec <read_submessage_list+0xc8>
 800d130:	3b9aca00 	.word	0x3b9aca00

0800d134 <listen_message_reliably>:
 800d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	1e0b      	subs	r3, r1, #0
 800d13a:	b09d      	sub	sp, #116	; 0x74
 800d13c:	bfb8      	it	lt
 800d13e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d142:	4680      	mov	r8, r0
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	f000 fea1 	bl	800de8c <uxr_millis>
 800d14a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800d14e:	4681      	mov	r9, r0
 800d150:	2a00      	cmp	r2, #0
 800d152:	f000 80a1 	beq.w	800d298 <listen_message_reliably+0x164>
 800d156:	2600      	movs	r6, #0
 800d158:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d15c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d160:	9303      	str	r3, [sp, #12]
 800d162:	4630      	mov	r0, r6
 800d164:	460f      	mov	r7, r1
 800d166:	e00f      	b.n	800d188 <listen_message_reliably+0x54>
 800d168:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d16c:	9903      	ldr	r1, [sp, #12]
 800d16e:	455a      	cmp	r2, fp
 800d170:	f106 0601 	add.w	r6, r6, #1
 800d174:	eb73 0101 	sbcs.w	r1, r3, r1
 800d178:	b2f0      	uxtb	r0, r6
 800d17a:	da01      	bge.n	800d180 <listen_message_reliably+0x4c>
 800d17c:	4693      	mov	fp, r2
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d184:	4283      	cmp	r3, r0
 800d186:	d960      	bls.n	800d24a <listen_message_reliably+0x116>
 800d188:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d18c:	2102      	movs	r1, #2
 800d18e:	2201      	movs	r2, #1
 800d190:	f000 fcfe 	bl	800db90 <uxr_stream_id>
 800d194:	00e4      	lsls	r4, r4, #3
 800d196:	f104 0520 	add.w	r5, r4, #32
 800d19a:	4445      	add	r5, r8
 800d19c:	4601      	mov	r1, r0
 800d19e:	463b      	mov	r3, r7
 800d1a0:	464a      	mov	r2, r9
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	9109      	str	r1, [sp, #36]	; 0x24
 800d1a6:	f007 fbff 	bl	80149a8 <uxr_update_output_stream_heartbeat_timestamp>
 800d1aa:	eb08 0304 	add.w	r3, r8, r4
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d0da      	beq.n	800d168 <listen_message_reliably+0x34>
 800d1b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d1b6:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800d1ba:	9304      	str	r3, [sp, #16]
 800d1bc:	4640      	mov	r0, r8
 800d1be:	f000 fcaf 	bl	800db20 <uxr_session_header_offset>
 800d1c2:	3501      	adds	r5, #1
 800d1c4:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d1c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d1cc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	2211      	movs	r2, #17
 800d1d4:	9000      	str	r0, [sp, #0]
 800d1d6:	a90c      	add	r1, sp, #48	; 0x30
 800d1d8:	4650      	mov	r0, sl
 800d1da:	f7ff f991 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	2205      	movs	r2, #5
 800d1e2:	210b      	movs	r1, #11
 800d1e4:	4650      	mov	r0, sl
 800d1e6:	f000 fe0b 	bl	800de00 <uxr_buffer_submessage_header>
 800d1ea:	8968      	ldrh	r0, [r5, #10]
 800d1ec:	2101      	movs	r1, #1
 800d1ee:	f007 fdcd 	bl	8014d8c <uxr_seq_num_add>
 800d1f2:	892b      	ldrh	r3, [r5, #8]
 800d1f4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	9b04      	ldr	r3, [sp, #16]
 800d1fc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d200:	a90a      	add	r1, sp, #40	; 0x28
 800d202:	4650      	mov	r0, sl
 800d204:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d208:	f001 ffe0 	bl	800f1cc <uxr_serialize_HEARTBEAT_Payload>
 800d20c:	2200      	movs	r2, #0
 800d20e:	4611      	mov	r1, r2
 800d210:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d212:	4640      	mov	r0, r8
 800d214:	f000 fc2e 	bl	800da74 <uxr_stamp_session_header>
 800d218:	4650      	mov	r0, sl
 800d21a:	f7ff f9af 	bl	800c57c <ucdr_buffer_length>
 800d21e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d222:	4602      	mov	r2, r0
 800d224:	a90c      	add	r1, sp, #48	; 0x30
 800d226:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d22a:	4444      	add	r4, r8
 800d22c:	47a8      	blx	r5
 800d22e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800d232:	9903      	ldr	r1, [sp, #12]
 800d234:	455a      	cmp	r2, fp
 800d236:	f106 0601 	add.w	r6, r6, #1
 800d23a:	eb73 0101 	sbcs.w	r1, r3, r1
 800d23e:	b2f0      	uxtb	r0, r6
 800d240:	db9c      	blt.n	800d17c <listen_message_reliably+0x48>
 800d242:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d246:	4283      	cmp	r3, r0
 800d248:	d89e      	bhi.n	800d188 <listen_message_reliably+0x54>
 800d24a:	9a03      	ldr	r2, [sp, #12]
 800d24c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d250:	429a      	cmp	r2, r3
 800d252:	bf08      	it	eq
 800d254:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800d258:	d01e      	beq.n	800d298 <listen_message_reliably+0x164>
 800d25a:	ebab 0309 	sub.w	r3, fp, r9
 800d25e:	9905      	ldr	r1, [sp, #20]
 800d260:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800d264:	2b00      	cmp	r3, #0
 800d266:	bf08      	it	eq
 800d268:	2301      	moveq	r3, #1
 800d26a:	4299      	cmp	r1, r3
 800d26c:	bfa8      	it	ge
 800d26e:	4619      	movge	r1, r3
 800d270:	6894      	ldr	r4, [r2, #8]
 800d272:	6810      	ldr	r0, [r2, #0]
 800d274:	4689      	mov	r9, r1
 800d276:	460b      	mov	r3, r1
 800d278:	aa08      	add	r2, sp, #32
 800d27a:	a907      	add	r1, sp, #28
 800d27c:	47a0      	blx	r4
 800d27e:	b968      	cbnz	r0, 800d29c <listen_message_reliably+0x168>
 800d280:	9b05      	ldr	r3, [sp, #20]
 800d282:	eba3 0309 	sub.w	r3, r3, r9
 800d286:	2b00      	cmp	r3, #0
 800d288:	9305      	str	r3, [sp, #20]
 800d28a:	f73f af5c 	bgt.w	800d146 <listen_message_reliably+0x12>
 800d28e:	4604      	mov	r4, r0
 800d290:	4620      	mov	r0, r4
 800d292:	b01d      	add	sp, #116	; 0x74
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d298:	9b05      	ldr	r3, [sp, #20]
 800d29a:	e7e0      	b.n	800d25e <listen_message_reliably+0x12a>
 800d29c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	a80c      	add	r0, sp, #48	; 0x30
 800d2a4:	f7ff f93e 	bl	800c524 <ucdr_init_buffer>
 800d2a8:	2500      	movs	r5, #0
 800d2aa:	f10d 031a 	add.w	r3, sp, #26
 800d2ae:	aa06      	add	r2, sp, #24
 800d2b0:	a90c      	add	r1, sp, #48	; 0x30
 800d2b2:	4640      	mov	r0, r8
 800d2b4:	f88d 5018 	strb.w	r5, [sp, #24]
 800d2b8:	f000 fbf0 	bl	800da9c <uxr_read_session_header>
 800d2bc:	b918      	cbnz	r0, 800d2c6 <listen_message_reliably+0x192>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	b01d      	add	sp, #116	; 0x74
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d2cc:	f000 fc8a 	bl	800dbe4 <uxr_stream_id_from_raw>
 800d2d0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d2d4:	2d01      	cmp	r5, #1
 800d2d6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d2da:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d2de:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d2e2:	d04b      	beq.n	800d37c <listen_message_reliably+0x248>
 800d2e4:	2d02      	cmp	r5, #2
 800d2e6:	d00f      	beq.n	800d308 <listen_message_reliably+0x1d4>
 800d2e8:	2d00      	cmp	r5, #0
 800d2ea:	d1e8      	bne.n	800d2be <listen_message_reliably+0x18a>
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 fc78 	bl	800dbe4 <uxr_stream_id_from_raw>
 800d2f4:	a90c      	add	r1, sp, #48	; 0x30
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	920a      	str	r2, [sp, #40]	; 0x28
 800d2fc:	f7ff fd92 	bl	800ce24 <read_submessage_list>
 800d300:	4620      	mov	r0, r4
 800d302:	b01d      	add	sp, #116	; 0x74
 800d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d308:	4631      	mov	r1, r6
 800d30a:	f108 0008 	add.w	r0, r8, #8
 800d30e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d312:	f000 fd55 	bl	800ddc0 <uxr_get_input_reliable_stream>
 800d316:	4607      	mov	r7, r0
 800d318:	b338      	cbz	r0, 800d36a <listen_message_reliably+0x236>
 800d31a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d31c:	9203      	str	r2, [sp, #12]
 800d31e:	a80c      	add	r0, sp, #48	; 0x30
 800d320:	f7ff f930 	bl	800c584 <ucdr_buffer_remaining>
 800d324:	4603      	mov	r3, r0
 800d326:	f10d 0019 	add.w	r0, sp, #25
 800d32a:	9000      	str	r0, [sp, #0]
 800d32c:	9a03      	ldr	r2, [sp, #12]
 800d32e:	4651      	mov	r1, sl
 800d330:	4638      	mov	r0, r7
 800d332:	f006 ff4f 	bl	80141d4 <uxr_receive_reliable_message>
 800d336:	b1c0      	cbz	r0, 800d36a <listen_message_reliably+0x236>
 800d338:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d33c:	b393      	cbz	r3, 800d3a4 <listen_message_reliably+0x270>
 800d33e:	ad14      	add	r5, sp, #80	; 0x50
 800d340:	f04f 0a02 	mov.w	sl, #2
 800d344:	e00a      	b.n	800d35c <listen_message_reliably+0x228>
 800d346:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800d34a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800d34e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800d352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d354:	4629      	mov	r1, r5
 800d356:	4640      	mov	r0, r8
 800d358:	f7ff fd64 	bl	800ce24 <read_submessage_list>
 800d35c:	2204      	movs	r2, #4
 800d35e:	4629      	mov	r1, r5
 800d360:	4638      	mov	r0, r7
 800d362:	f006 ffb7 	bl	80142d4 <uxr_next_input_reliable_buffer_available>
 800d366:	2800      	cmp	r0, #0
 800d368:	d1ed      	bne.n	800d346 <listen_message_reliably+0x212>
 800d36a:	4640      	mov	r0, r8
 800d36c:	4632      	mov	r2, r6
 800d36e:	4649      	mov	r1, r9
 800d370:	f7ff fbd2 	bl	800cb18 <write_submessage_acknack.isra.0>
 800d374:	4620      	mov	r0, r4
 800d376:	b01d      	add	sp, #116	; 0x74
 800d378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37c:	4631      	mov	r1, r6
 800d37e:	f108 0008 	add.w	r0, r8, #8
 800d382:	f000 fd13 	bl	800ddac <uxr_get_input_best_effort_stream>
 800d386:	2800      	cmp	r0, #0
 800d388:	d099      	beq.n	800d2be <listen_message_reliably+0x18a>
 800d38a:	4651      	mov	r1, sl
 800d38c:	f006 fe8e 	bl	80140ac <uxr_receive_best_effort_message>
 800d390:	2800      	cmp	r0, #0
 800d392:	d094      	beq.n	800d2be <listen_message_reliably+0x18a>
 800d394:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d39a:	a90c      	add	r1, sp, #48	; 0x30
 800d39c:	4640      	mov	r0, r8
 800d39e:	f7ff fd41 	bl	800ce24 <read_submessage_list>
 800d3a2:	e78c      	b.n	800d2be <listen_message_reliably+0x18a>
 800d3a4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3aa:	a90c      	add	r1, sp, #48	; 0x30
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	f7ff fd39 	bl	800ce24 <read_submessage_list>
 800d3b2:	e7c4      	b.n	800d33e <listen_message_reliably+0x20a>

0800d3b4 <uxr_run_session_timeout>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	f000 fd67 	bl	800de8c <uxr_millis>
 800d3be:	4606      	mov	r6, r0
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f7ff fc71 	bl	800cca8 <uxr_flash_output_streams>
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f7ff feb3 	bl	800d134 <listen_message_reliably>
 800d3ce:	f000 fd5d 	bl	800de8c <uxr_millis>
 800d3d2:	1b83      	subs	r3, r0, r6
 800d3d4:	1ae9      	subs	r1, r5, r3
 800d3d6:	2900      	cmp	r1, #0
 800d3d8:	dcf6      	bgt.n	800d3c8 <uxr_run_session_timeout+0x14>
 800d3da:	f104 0008 	add.w	r0, r4, #8
 800d3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3e2:	f000 bcf7 	b.w	800ddd4 <uxr_output_streams_confirmed>
 800d3e6:	bf00      	nop

0800d3e8 <uxr_run_session_until_data>:
 800d3e8:	b570      	push	{r4, r5, r6, lr}
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	460d      	mov	r5, r1
 800d3ee:	f000 fd4d 	bl	800de8c <uxr_millis>
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	f7ff fc57 	bl	800cca8 <uxr_flash_output_streams>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800d400:	4629      	mov	r1, r5
 800d402:	e005      	b.n	800d410 <uxr_run_session_until_data+0x28>
 800d404:	f000 fd42 	bl	800de8c <uxr_millis>
 800d408:	1b83      	subs	r3, r0, r6
 800d40a:	1ae9      	subs	r1, r5, r3
 800d40c:	2900      	cmp	r1, #0
 800d40e:	dd07      	ble.n	800d420 <uxr_run_session_until_data+0x38>
 800d410:	4620      	mov	r0, r4
 800d412:	f7ff fe8f 	bl	800d134 <listen_message_reliably>
 800d416:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d0f2      	beq.n	800d404 <uxr_run_session_until_data+0x1c>
 800d41e:	bd70      	pop	{r4, r5, r6, pc}
 800d420:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d424:	bd70      	pop	{r4, r5, r6, pc}
 800d426:	bf00      	nop

0800d428 <uxr_run_session_until_confirm_delivery>:
 800d428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d42c:	4606      	mov	r6, r0
 800d42e:	460d      	mov	r5, r1
 800d430:	f000 fd2c 	bl	800de8c <uxr_millis>
 800d434:	4607      	mov	r7, r0
 800d436:	4630      	mov	r0, r6
 800d438:	f7ff fc36 	bl	800cca8 <uxr_flash_output_streams>
 800d43c:	2d00      	cmp	r5, #0
 800d43e:	f106 0808 	add.w	r8, r6, #8
 800d442:	bfa8      	it	ge
 800d444:	462c      	movge	r4, r5
 800d446:	da07      	bge.n	800d458 <uxr_run_session_until_confirm_delivery+0x30>
 800d448:	e00e      	b.n	800d468 <uxr_run_session_until_confirm_delivery+0x40>
 800d44a:	f7ff fe73 	bl	800d134 <listen_message_reliably>
 800d44e:	f000 fd1d 	bl	800de8c <uxr_millis>
 800d452:	1bc3      	subs	r3, r0, r7
 800d454:	1aec      	subs	r4, r5, r3
 800d456:	d407      	bmi.n	800d468 <uxr_run_session_until_confirm_delivery+0x40>
 800d458:	4640      	mov	r0, r8
 800d45a:	f000 fcbb 	bl	800ddd4 <uxr_output_streams_confirmed>
 800d45e:	4603      	mov	r3, r0
 800d460:	4621      	mov	r1, r4
 800d462:	4630      	mov	r0, r6
 800d464:	2b00      	cmp	r3, #0
 800d466:	d0f0      	beq.n	800d44a <uxr_run_session_until_confirm_delivery+0x22>
 800d468:	4640      	mov	r0, r8
 800d46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d46e:	f000 bcb1 	b.w	800ddd4 <uxr_output_streams_confirmed>
 800d472:	bf00      	nop

0800d474 <uxr_run_session_until_all_status>:
 800d474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d478:	9c08      	ldr	r4, [sp, #32]
 800d47a:	4606      	mov	r6, r0
 800d47c:	460f      	mov	r7, r1
 800d47e:	4691      	mov	r9, r2
 800d480:	461d      	mov	r5, r3
 800d482:	f7ff fc11 	bl	800cca8 <uxr_flash_output_streams>
 800d486:	b124      	cbz	r4, 800d492 <uxr_run_session_until_all_status+0x1e>
 800d488:	4622      	mov	r2, r4
 800d48a:	21ff      	movs	r1, #255	; 0xff
 800d48c:	4628      	mov	r0, r5
 800d48e:	f009 f973 	bl	8016778 <memset>
 800d492:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800d496:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d498:	f000 fcf8 	bl	800de8c <uxr_millis>
 800d49c:	3d01      	subs	r5, #1
 800d49e:	f1a9 0902 	sub.w	r9, r9, #2
 800d4a2:	4680      	mov	r8, r0
 800d4a4:	4639      	mov	r1, r7
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	f7ff fe44 	bl	800d134 <listen_message_reliably>
 800d4ac:	f000 fcee 	bl	800de8c <uxr_millis>
 800d4b0:	eba0 0008 	sub.w	r0, r0, r8
 800d4b4:	1a39      	subs	r1, r7, r0
 800d4b6:	b344      	cbz	r4, 800d50a <uxr_run_session_until_all_status+0x96>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	46ac      	mov	ip, r5
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e002      	b.n	800d4c6 <uxr_run_session_until_all_status+0x52>
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	d20d      	bcs.n	800d4e0 <uxr_run_session_until_all_status+0x6c>
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d4ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800d4ce:	d1f7      	bne.n	800d4c0 <uxr_run_session_until_all_status+0x4c>
 800d4d0:	42a3      	cmp	r3, r4
 800d4d2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d4d6:	d213      	bcs.n	800d500 <uxr_run_session_until_all_status+0x8c>
 800d4d8:	2a00      	cmp	r2, #0
 800d4da:	d0f3      	beq.n	800d4c4 <uxr_run_session_until_all_status+0x50>
 800d4dc:	2900      	cmp	r1, #0
 800d4de:	dce2      	bgt.n	800d4a6 <uxr_run_session_until_all_status+0x32>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	67f3      	str	r3, [r6, #124]	; 0x7c
 800d4e4:	442c      	add	r4, r5
 800d4e6:	e001      	b.n	800d4ec <uxr_run_session_until_all_status+0x78>
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d812      	bhi.n	800d512 <uxr_run_session_until_all_status+0x9e>
 800d4ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d4f0:	4284      	cmp	r4, r0
 800d4f2:	d1f9      	bne.n	800d4e8 <uxr_run_session_until_all_status+0x74>
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	bf8c      	ite	hi
 800d4f8:	2000      	movhi	r0, #0
 800d4fa:	2001      	movls	r0, #1
 800d4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d500:	2900      	cmp	r1, #0
 800d502:	dded      	ble.n	800d4e0 <uxr_run_session_until_all_status+0x6c>
 800d504:	2a00      	cmp	r2, #0
 800d506:	d1ce      	bne.n	800d4a6 <uxr_run_session_until_all_status+0x32>
 800d508:	e7ea      	b.n	800d4e0 <uxr_run_session_until_all_status+0x6c>
 800d50a:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d50c:	2001      	movs	r0, #1
 800d50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d512:	2000      	movs	r0, #0
 800d514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d518 <wait_session_status>:
 800d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	4604      	mov	r4, r0
 800d51e:	b09d      	sub	sp, #116	; 0x74
 800d520:	20ff      	movs	r0, #255	; 0xff
 800d522:	7160      	strb	r0, [r4, #5]
 800d524:	9303      	str	r3, [sp, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	f000 80b6 	beq.w	800d698 <wait_session_status+0x180>
 800d52c:	468a      	mov	sl, r1
 800d52e:	4691      	mov	r9, r2
 800d530:	f04f 0b00 	mov.w	fp, #0
 800d534:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d536:	464a      	mov	r2, r9
 800d538:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d53c:	4651      	mov	r1, sl
 800d53e:	47a8      	blx	r5
 800d540:	f000 fca4 	bl	800de8c <uxr_millis>
 800d544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d548:	4605      	mov	r5, r0
 800d54a:	e009      	b.n	800d560 <wait_session_status+0x48>
 800d54c:	f000 fc9e 	bl	800de8c <uxr_millis>
 800d550:	1b40      	subs	r0, r0, r5
 800d552:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d556:	2b00      	cmp	r3, #0
 800d558:	dd40      	ble.n	800d5dc <wait_session_status+0xc4>
 800d55a:	7960      	ldrb	r0, [r4, #5]
 800d55c:	28ff      	cmp	r0, #255	; 0xff
 800d55e:	d145      	bne.n	800d5ec <wait_session_status+0xd4>
 800d560:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d562:	a908      	add	r1, sp, #32
 800d564:	6896      	ldr	r6, [r2, #8]
 800d566:	6810      	ldr	r0, [r2, #0]
 800d568:	aa09      	add	r2, sp, #36	; 0x24
 800d56a:	47b0      	blx	r6
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d0ed      	beq.n	800d54c <wait_session_status+0x34>
 800d570:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d574:	a80c      	add	r0, sp, #48	; 0x30
 800d576:	f7fe ffd5 	bl	800c524 <ucdr_init_buffer>
 800d57a:	2600      	movs	r6, #0
 800d57c:	f10d 031e 	add.w	r3, sp, #30
 800d580:	aa07      	add	r2, sp, #28
 800d582:	a90c      	add	r1, sp, #48	; 0x30
 800d584:	4620      	mov	r0, r4
 800d586:	f88d 601c 	strb.w	r6, [sp, #28]
 800d58a:	f000 fa87 	bl	800da9c <uxr_read_session_header>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d0dc      	beq.n	800d54c <wait_session_status+0x34>
 800d592:	4631      	mov	r1, r6
 800d594:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d598:	f000 fb24 	bl	800dbe4 <uxr_stream_id_from_raw>
 800d59c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d5a0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d5a4:	9302      	str	r3, [sp, #8]
 800d5a6:	2f01      	cmp	r7, #1
 800d5a8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800d5ac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d5b0:	d05c      	beq.n	800d66c <wait_session_status+0x154>
 800d5b2:	2f02      	cmp	r7, #2
 800d5b4:	d020      	beq.n	800d5f8 <wait_session_status+0xe0>
 800d5b6:	2f00      	cmp	r7, #0
 800d5b8:	d1c8      	bne.n	800d54c <wait_session_status+0x34>
 800d5ba:	4639      	mov	r1, r7
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f000 fb11 	bl	800dbe4 <uxr_stream_id_from_raw>
 800d5c2:	a90c      	add	r1, sp, #48	; 0x30
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f7ff fc2b 	bl	800ce24 <read_submessage_list>
 800d5ce:	f000 fc5d 	bl	800de8c <uxr_millis>
 800d5d2:	1b40      	subs	r0, r0, r5
 800d5d4:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	dcbe      	bgt.n	800d55a <wait_session_status+0x42>
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	7960      	ldrb	r0, [r4, #5]
 800d5e0:	f10b 0b01 	add.w	fp, fp, #1
 800d5e4:	455b      	cmp	r3, fp
 800d5e6:	d001      	beq.n	800d5ec <wait_session_status+0xd4>
 800d5e8:	28ff      	cmp	r0, #255	; 0xff
 800d5ea:	d0a3      	beq.n	800d534 <wait_session_status+0x1c>
 800d5ec:	38ff      	subs	r0, #255	; 0xff
 800d5ee:	bf18      	it	ne
 800d5f0:	2001      	movne	r0, #1
 800d5f2:	b01d      	add	sp, #116	; 0x74
 800d5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d5fc:	9304      	str	r3, [sp, #16]
 800d5fe:	4631      	mov	r1, r6
 800d600:	f104 0008 	add.w	r0, r4, #8
 800d604:	f000 fbdc 	bl	800ddc0 <uxr_get_input_reliable_stream>
 800d608:	4680      	mov	r8, r0
 800d60a:	b348      	cbz	r0, 800d660 <wait_session_status+0x148>
 800d60c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d60e:	9205      	str	r2, [sp, #20]
 800d610:	a80c      	add	r0, sp, #48	; 0x30
 800d612:	f7fe ffb7 	bl	800c584 <ucdr_buffer_remaining>
 800d616:	4603      	mov	r3, r0
 800d618:	f10d 001d 	add.w	r0, sp, #29
 800d61c:	9000      	str	r0, [sp, #0]
 800d61e:	9a05      	ldr	r2, [sp, #20]
 800d620:	9902      	ldr	r1, [sp, #8]
 800d622:	4640      	mov	r0, r8
 800d624:	f006 fdd6 	bl	80141d4 <uxr_receive_reliable_message>
 800d628:	b1d0      	cbz	r0, 800d660 <wait_session_status+0x148>
 800d62a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d03a      	beq.n	800d6a8 <wait_session_status+0x190>
 800d632:	9f04      	ldr	r7, [sp, #16]
 800d634:	e00a      	b.n	800d64c <wait_session_status+0x134>
 800d636:	f04f 0302 	mov.w	r3, #2
 800d63a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800d63e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800d642:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800d646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d648:	f7ff fbec 	bl	800ce24 <read_submessage_list>
 800d64c:	a914      	add	r1, sp, #80	; 0x50
 800d64e:	2204      	movs	r2, #4
 800d650:	4640      	mov	r0, r8
 800d652:	f006 fe3f 	bl	80142d4 <uxr_next_input_reliable_buffer_available>
 800d656:	4603      	mov	r3, r0
 800d658:	a914      	add	r1, sp, #80	; 0x50
 800d65a:	4620      	mov	r0, r4
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1ea      	bne.n	800d636 <wait_session_status+0x11e>
 800d660:	9904      	ldr	r1, [sp, #16]
 800d662:	4632      	mov	r2, r6
 800d664:	4620      	mov	r0, r4
 800d666:	f7ff fa57 	bl	800cb18 <write_submessage_acknack.isra.0>
 800d66a:	e76f      	b.n	800d54c <wait_session_status+0x34>
 800d66c:	4631      	mov	r1, r6
 800d66e:	f104 0008 	add.w	r0, r4, #8
 800d672:	f000 fb9b 	bl	800ddac <uxr_get_input_best_effort_stream>
 800d676:	2800      	cmp	r0, #0
 800d678:	f43f af68 	beq.w	800d54c <wait_session_status+0x34>
 800d67c:	9902      	ldr	r1, [sp, #8]
 800d67e:	f006 fd15 	bl	80140ac <uxr_receive_best_effort_message>
 800d682:	2800      	cmp	r0, #0
 800d684:	f43f af62 	beq.w	800d54c <wait_session_status+0x34>
 800d688:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d68c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d68e:	a90c      	add	r1, sp, #48	; 0x30
 800d690:	4620      	mov	r0, r4
 800d692:	f7ff fbc7 	bl	800ce24 <read_submessage_list>
 800d696:	e759      	b.n	800d54c <wait_session_status+0x34>
 800d698:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d69a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d69e:	47a0      	blx	r4
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	b01d      	add	sp, #116	; 0x74
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d6ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6ae:	a90c      	add	r1, sp, #48	; 0x30
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f7ff fbb7 	bl	800ce24 <read_submessage_list>
 800d6b6:	e7bc      	b.n	800d632 <wait_session_status+0x11a>

0800d6b8 <uxr_delete_session_retries>:
 800d6b8:	b530      	push	{r4, r5, lr}
 800d6ba:	b08f      	sub	sp, #60	; 0x3c
 800d6bc:	4604      	mov	r4, r0
 800d6be:	460d      	mov	r5, r1
 800d6c0:	f000 fa2e 	bl	800db20 <uxr_session_header_offset>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	2210      	movs	r2, #16
 800d6c8:	9000      	str	r0, [sp, #0]
 800d6ca:	a902      	add	r1, sp, #8
 800d6cc:	a806      	add	r0, sp, #24
 800d6ce:	f7fe ff17 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800d6d2:	a906      	add	r1, sp, #24
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f000 f973 	bl	800d9c0 <uxr_buffer_delete_session>
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4611      	mov	r1, r2
 800d6de:	9b06      	ldr	r3, [sp, #24]
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f000 f9c7 	bl	800da74 <uxr_stamp_session_header>
 800d6e6:	a806      	add	r0, sp, #24
 800d6e8:	f7fe ff48 	bl	800c57c <ucdr_buffer_length>
 800d6ec:	462b      	mov	r3, r5
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	a902      	add	r1, sp, #8
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f7ff ff10 	bl	800d518 <wait_session_status>
 800d6f8:	b118      	cbz	r0, 800d702 <uxr_delete_session_retries+0x4a>
 800d6fa:	7960      	ldrb	r0, [r4, #5]
 800d6fc:	fab0 f080 	clz	r0, r0
 800d700:	0940      	lsrs	r0, r0, #5
 800d702:	b00f      	add	sp, #60	; 0x3c
 800d704:	bd30      	pop	{r4, r5, pc}
 800d706:	bf00      	nop

0800d708 <uxr_create_session>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	f100 0b08 	add.w	fp, r0, #8
 800d710:	b0ab      	sub	sp, #172	; 0xac
 800d712:	4604      	mov	r4, r0
 800d714:	4658      	mov	r0, fp
 800d716:	f000 fa99 	bl	800dc4c <uxr_reset_stream_storage>
 800d71a:	4620      	mov	r0, r4
 800d71c:	f000 fa00 	bl	800db20 <uxr_session_header_offset>
 800d720:	2300      	movs	r3, #0
 800d722:	9000      	str	r0, [sp, #0]
 800d724:	221c      	movs	r2, #28
 800d726:	a90b      	add	r1, sp, #44	; 0x2c
 800d728:	a812      	add	r0, sp, #72	; 0x48
 800d72a:	f7fe fee9 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800d72e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d730:	8a1a      	ldrh	r2, [r3, #16]
 800d732:	3a04      	subs	r2, #4
 800d734:	b292      	uxth	r2, r2
 800d736:	a912      	add	r1, sp, #72	; 0x48
 800d738:	4620      	mov	r0, r4
 800d73a:	f000 f917 	bl	800d96c <uxr_buffer_create_session>
 800d73e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d740:	4620      	mov	r0, r4
 800d742:	f000 f983 	bl	800da4c <uxr_stamp_create_session_header>
 800d746:	a812      	add	r0, sp, #72	; 0x48
 800d748:	f7fe ff18 	bl	800c57c <ucdr_buffer_length>
 800d74c:	23ff      	movs	r3, #255	; 0xff
 800d74e:	7163      	strb	r3, [r4, #5]
 800d750:	230a      	movs	r3, #10
 800d752:	46da      	mov	sl, fp
 800d754:	9303      	str	r3, [sp, #12]
 800d756:	4683      	mov	fp, r0
 800d758:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d75a:	465a      	mov	r2, fp
 800d75c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d760:	a90b      	add	r1, sp, #44	; 0x2c
 800d762:	47a8      	blx	r5
 800d764:	f000 fb92 	bl	800de8c <uxr_millis>
 800d768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d76c:	4605      	mov	r5, r0
 800d76e:	e009      	b.n	800d784 <uxr_create_session+0x7c>
 800d770:	f000 fb8c 	bl	800de8c <uxr_millis>
 800d774:	1b40      	subs	r0, r0, r5
 800d776:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	7962      	ldrb	r2, [r4, #5]
 800d77e:	dd38      	ble.n	800d7f2 <uxr_create_session+0xea>
 800d780:	2aff      	cmp	r2, #255	; 0xff
 800d782:	d13c      	bne.n	800d7fe <uxr_create_session+0xf6>
 800d784:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d786:	a907      	add	r1, sp, #28
 800d788:	6896      	ldr	r6, [r2, #8]
 800d78a:	6810      	ldr	r0, [r2, #0]
 800d78c:	aa08      	add	r2, sp, #32
 800d78e:	47b0      	blx	r6
 800d790:	2800      	cmp	r0, #0
 800d792:	d0ed      	beq.n	800d770 <uxr_create_session+0x68>
 800d794:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d798:	a81a      	add	r0, sp, #104	; 0x68
 800d79a:	f7fe fec3 	bl	800c524 <ucdr_init_buffer>
 800d79e:	2600      	movs	r6, #0
 800d7a0:	f10d 031a 	add.w	r3, sp, #26
 800d7a4:	aa06      	add	r2, sp, #24
 800d7a6:	a91a      	add	r1, sp, #104	; 0x68
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f88d 6018 	strb.w	r6, [sp, #24]
 800d7ae:	f000 f975 	bl	800da9c <uxr_read_session_header>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d0dc      	beq.n	800d770 <uxr_create_session+0x68>
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d7bc:	f000 fa12 	bl	800dbe4 <uxr_stream_id_from_raw>
 800d7c0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d7c4:	2e01      	cmp	r6, #1
 800d7c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d7ca:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d7ce:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d7d2:	d053      	beq.n	800d87c <uxr_create_session+0x174>
 800d7d4:	2e02      	cmp	r6, #2
 800d7d6:	d018      	beq.n	800d80a <uxr_create_session+0x102>
 800d7d8:	2e00      	cmp	r6, #0
 800d7da:	d1c9      	bne.n	800d770 <uxr_create_session+0x68>
 800d7dc:	4631      	mov	r1, r6
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f000 fa00 	bl	800dbe4 <uxr_stream_id_from_raw>
 800d7e4:	a91a      	add	r1, sp, #104	; 0x68
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	900a      	str	r0, [sp, #40]	; 0x28
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f7ff fb1a 	bl	800ce24 <read_submessage_list>
 800d7f0:	e7be      	b.n	800d770 <uxr_create_session+0x68>
 800d7f2:	9b03      	ldr	r3, [sp, #12]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	9303      	str	r3, [sp, #12]
 800d7f8:	d001      	beq.n	800d7fe <uxr_create_session+0xf6>
 800d7fa:	2aff      	cmp	r2, #255	; 0xff
 800d7fc:	d0ac      	beq.n	800d758 <uxr_create_session+0x50>
 800d7fe:	2a00      	cmp	r2, #0
 800d800:	d051      	beq.n	800d8a6 <uxr_create_session+0x19e>
 800d802:	2000      	movs	r0, #0
 800d804:	b02b      	add	sp, #172	; 0xac
 800d806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	4639      	mov	r1, r7
 800d812:	4650      	mov	r0, sl
 800d814:	f000 fad4 	bl	800ddc0 <uxr_get_input_reliable_stream>
 800d818:	4680      	mov	r8, r0
 800d81a:	b348      	cbz	r0, 800d870 <uxr_create_session+0x168>
 800d81c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d81e:	9205      	str	r2, [sp, #20]
 800d820:	a81a      	add	r0, sp, #104	; 0x68
 800d822:	f7fe feaf 	bl	800c584 <ucdr_buffer_remaining>
 800d826:	4603      	mov	r3, r0
 800d828:	f10d 0019 	add.w	r0, sp, #25
 800d82c:	9000      	str	r0, [sp, #0]
 800d82e:	9a05      	ldr	r2, [sp, #20]
 800d830:	4649      	mov	r1, r9
 800d832:	4640      	mov	r0, r8
 800d834:	f006 fcce 	bl	80141d4 <uxr_receive_reliable_message>
 800d838:	b1d0      	cbz	r0, 800d870 <uxr_create_session+0x168>
 800d83a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d038      	beq.n	800d8b4 <uxr_create_session+0x1ac>
 800d842:	9e04      	ldr	r6, [sp, #16]
 800d844:	e00a      	b.n	800d85c <uxr_create_session+0x154>
 800d846:	f04f 0302 	mov.w	r3, #2
 800d84a:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800d84e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800d852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d858:	f7ff fae4 	bl	800ce24 <read_submessage_list>
 800d85c:	a922      	add	r1, sp, #136	; 0x88
 800d85e:	2204      	movs	r2, #4
 800d860:	4640      	mov	r0, r8
 800d862:	f006 fd37 	bl	80142d4 <uxr_next_input_reliable_buffer_available>
 800d866:	4603      	mov	r3, r0
 800d868:	a922      	add	r1, sp, #136	; 0x88
 800d86a:	4620      	mov	r0, r4
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1ea      	bne.n	800d846 <uxr_create_session+0x13e>
 800d870:	9904      	ldr	r1, [sp, #16]
 800d872:	463a      	mov	r2, r7
 800d874:	4620      	mov	r0, r4
 800d876:	f7ff f94f 	bl	800cb18 <write_submessage_acknack.isra.0>
 800d87a:	e779      	b.n	800d770 <uxr_create_session+0x68>
 800d87c:	4639      	mov	r1, r7
 800d87e:	4650      	mov	r0, sl
 800d880:	f000 fa94 	bl	800ddac <uxr_get_input_best_effort_stream>
 800d884:	2800      	cmp	r0, #0
 800d886:	f43f af73 	beq.w	800d770 <uxr_create_session+0x68>
 800d88a:	4649      	mov	r1, r9
 800d88c:	f006 fc0e 	bl	80140ac <uxr_receive_best_effort_message>
 800d890:	2800      	cmp	r0, #0
 800d892:	f43f af6d 	beq.w	800d770 <uxr_create_session+0x68>
 800d896:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d89c:	a91a      	add	r1, sp, #104	; 0x68
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f7ff fac0 	bl	800ce24 <read_submessage_list>
 800d8a4:	e764      	b.n	800d770 <uxr_create_session+0x68>
 800d8a6:	4650      	mov	r0, sl
 800d8a8:	f000 f9d0 	bl	800dc4c <uxr_reset_stream_storage>
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	b02b      	add	sp, #172	; 0xac
 800d8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b4:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d8b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8ba:	a91a      	add	r1, sp, #104	; 0x68
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f7ff fab1 	bl	800ce24 <read_submessage_list>
 800d8c2:	e7be      	b.n	800d842 <uxr_create_session+0x13a>

0800d8c4 <uxr_prepare_stream_to_write_submessage>:
 800d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c8:	b082      	sub	sp, #8
 800d8ca:	4682      	mov	sl, r0
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	4615      	mov	r5, r2
 800d8d0:	461e      	mov	r6, r3
 800d8d2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800d8d6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800d8da:	9101      	str	r1, [sp, #4]
 800d8dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d8e0:	f000 face 	bl	800de80 <uxr_submessage_padding>
 800d8e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8e8:	f105 0904 	add.w	r9, r5, #4
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	4481      	add	r9, r0
 800d8f0:	d01d      	beq.n	800d92e <uxr_prepare_stream_to_write_submessage+0x6a>
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d116      	bne.n	800d924 <uxr_prepare_stream_to_write_submessage+0x60>
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	f10a 0008 	add.w	r0, sl, #8
 800d8fc:	f000 fa4c 	bl	800dd98 <uxr_get_output_reliable_stream>
 800d900:	4604      	mov	r4, r0
 800d902:	b158      	cbz	r0, 800d91c <uxr_prepare_stream_to_write_submessage+0x58>
 800d904:	4649      	mov	r1, r9
 800d906:	4632      	mov	r2, r6
 800d908:	f006 fea0 	bl	801464c <uxr_prepare_reliable_buffer_to_write>
 800d90c:	4604      	mov	r4, r0
 800d90e:	b12c      	cbz	r4, 800d91c <uxr_prepare_stream_to_write_submessage+0x58>
 800d910:	4643      	mov	r3, r8
 800d912:	b2aa      	uxth	r2, r5
 800d914:	4639      	mov	r1, r7
 800d916:	4630      	mov	r0, r6
 800d918:	f000 fa72 	bl	800de00 <uxr_buffer_submessage_header>
 800d91c:	4620      	mov	r0, r4
 800d91e:	b002      	add	sp, #8
 800d920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d924:	2400      	movs	r4, #0
 800d926:	4620      	mov	r0, r4
 800d928:	b002      	add	sp, #8
 800d92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d92e:	4621      	mov	r1, r4
 800d930:	f10a 0008 	add.w	r0, sl, #8
 800d934:	f000 fa28 	bl	800dd88 <uxr_get_output_best_effort_stream>
 800d938:	4604      	mov	r4, r0
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d0ee      	beq.n	800d91c <uxr_prepare_stream_to_write_submessage+0x58>
 800d93e:	4649      	mov	r1, r9
 800d940:	4632      	mov	r2, r6
 800d942:	f006 fdb3 	bl	80144ac <uxr_prepare_best_effort_buffer_to_write>
 800d946:	4604      	mov	r4, r0
 800d948:	e7e1      	b.n	800d90e <uxr_prepare_stream_to_write_submessage+0x4a>
 800d94a:	bf00      	nop

0800d94c <uxr_init_session_info>:
 800d94c:	0e13      	lsrs	r3, r2, #24
 800d94e:	7043      	strb	r3, [r0, #1]
 800d950:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d954:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d958:	7001      	strb	r1, [r0, #0]
 800d95a:	70c3      	strb	r3, [r0, #3]
 800d95c:	2109      	movs	r1, #9
 800d95e:	23ff      	movs	r3, #255	; 0xff
 800d960:	f880 c002 	strb.w	ip, [r0, #2]
 800d964:	7102      	strb	r2, [r0, #4]
 800d966:	80c1      	strh	r1, [r0, #6]
 800d968:	7143      	strb	r3, [r0, #5]
 800d96a:	4770      	bx	lr

0800d96c <uxr_buffer_create_session>:
 800d96c:	b530      	push	{r4, r5, lr}
 800d96e:	b089      	sub	sp, #36	; 0x24
 800d970:	2300      	movs	r3, #0
 800d972:	4d12      	ldr	r5, [pc, #72]	; (800d9bc <uxr_buffer_create_session+0x50>)
 800d974:	9307      	str	r3, [sp, #28]
 800d976:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d97a:	2201      	movs	r2, #1
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	80c2      	strh	r2, [r0, #6]
 800d980:	f88d 2004 	strb.w	r2, [sp, #4]
 800d984:	682a      	ldr	r2, [r5, #0]
 800d986:	9200      	str	r2, [sp, #0]
 800d988:	88aa      	ldrh	r2, [r5, #4]
 800d98a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d98e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800d992:	9202      	str	r2, [sp, #8]
 800d994:	460c      	mov	r4, r1
 800d996:	7802      	ldrb	r2, [r0, #0]
 800d998:	9303      	str	r3, [sp, #12]
 800d99a:	4619      	mov	r1, r3
 800d99c:	f88d 200c 	strb.w	r2, [sp, #12]
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	2210      	movs	r2, #16
 800d9a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d9a8:	9306      	str	r3, [sp, #24]
 800d9aa:	f000 fa29 	bl	800de00 <uxr_buffer_submessage_header>
 800d9ae:	4669      	mov	r1, sp
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f001 fa6d 	bl	800ee90 <uxr_serialize_CREATE_CLIENT_Payload>
 800d9b6:	b009      	add	sp, #36	; 0x24
 800d9b8:	bd30      	pop	{r4, r5, pc}
 800d9ba:	bf00      	nop
 800d9bc:	08017844 	.word	0x08017844

0800d9c0 <uxr_buffer_delete_session>:
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	4b0c      	ldr	r3, [pc, #48]	; (800d9f4 <uxr_buffer_delete_session+0x34>)
 800d9c4:	b082      	sub	sp, #8
 800d9c6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800d9ca:	f8ad c006 	strh.w	ip, [sp, #6]
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9d6:	80c2      	strh	r2, [r0, #6]
 800d9d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d9dc:	2204      	movs	r2, #4
 800d9de:	2300      	movs	r3, #0
 800d9e0:	2103      	movs	r1, #3
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 fa0c 	bl	800de00 <uxr_buffer_submessage_header>
 800d9e8:	a901      	add	r1, sp, #4
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f001 faf6 	bl	800efdc <uxr_serialize_DELETE_Payload>
 800d9f0:	b002      	add	sp, #8
 800d9f2:	bd10      	pop	{r4, pc}
 800d9f4:	08017844 	.word	0x08017844

0800d9f8 <uxr_read_create_session_status>:
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	b088      	sub	sp, #32
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	4608      	mov	r0, r1
 800da00:	a901      	add	r1, sp, #4
 800da02:	f001 fafb 	bl	800effc <uxr_deserialize_STATUS_AGENT_Payload>
 800da06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da0a:	7163      	strb	r3, [r4, #5]
 800da0c:	b008      	add	sp, #32
 800da0e:	bd10      	pop	{r4, pc}

0800da10 <uxr_read_delete_session_status>:
 800da10:	b510      	push	{r4, lr}
 800da12:	4604      	mov	r4, r0
 800da14:	b084      	sub	sp, #16
 800da16:	4608      	mov	r0, r1
 800da18:	a902      	add	r1, sp, #8
 800da1a:	f001 fb1f 	bl	800f05c <uxr_deserialize_STATUS_Payload>
 800da1e:	88e3      	ldrh	r3, [r4, #6]
 800da20:	2b02      	cmp	r3, #2
 800da22:	d001      	beq.n	800da28 <uxr_read_delete_session_status+0x18>
 800da24:	b004      	add	sp, #16
 800da26:	bd10      	pop	{r4, pc}
 800da28:	f10d 000a 	add.w	r0, sp, #10
 800da2c:	f7fe fffa 	bl	800ca24 <uxr_object_id_from_raw>
 800da30:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800da34:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800da38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	2b02      	cmp	r3, #2
 800da40:	bf04      	itt	eq
 800da42:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800da46:	7163      	strbeq	r3, [r4, #5]
 800da48:	b004      	add	sp, #16
 800da4a:	bd10      	pop	{r4, pc}

0800da4c <uxr_stamp_create_session_header>:
 800da4c:	b510      	push	{r4, lr}
 800da4e:	2208      	movs	r2, #8
 800da50:	b08a      	sub	sp, #40	; 0x28
 800da52:	4604      	mov	r4, r0
 800da54:	eb0d 0002 	add.w	r0, sp, r2
 800da58:	f7fe fd64 	bl	800c524 <ucdr_init_buffer>
 800da5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da60:	9400      	str	r4, [sp, #0]
 800da62:	2300      	movs	r3, #0
 800da64:	461a      	mov	r2, r3
 800da66:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800da6a:	a802      	add	r0, sp, #8
 800da6c:	f000 fbc2 	bl	800e1f4 <uxr_serialize_message_header>
 800da70:	b00a      	add	sp, #40	; 0x28
 800da72:	bd10      	pop	{r4, pc}

0800da74 <uxr_stamp_session_header>:
 800da74:	b530      	push	{r4, r5, lr}
 800da76:	b08d      	sub	sp, #52	; 0x34
 800da78:	4604      	mov	r4, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	9203      	str	r2, [sp, #12]
 800da7e:	4619      	mov	r1, r3
 800da80:	a804      	add	r0, sp, #16
 800da82:	2208      	movs	r2, #8
 800da84:	f7fe fd4e 	bl	800c524 <ucdr_init_buffer>
 800da88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	9400      	str	r4, [sp, #0]
 800da90:	462a      	mov	r2, r5
 800da92:	a804      	add	r0, sp, #16
 800da94:	f000 fbae 	bl	800e1f4 <uxr_serialize_message_header>
 800da98:	b00d      	add	sp, #52	; 0x34
 800da9a:	bd30      	pop	{r4, r5, pc}

0800da9c <uxr_read_session_header>:
 800da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	4607      	mov	r7, r0
 800daa2:	b084      	sub	sp, #16
 800daa4:	4608      	mov	r0, r1
 800daa6:	460c      	mov	r4, r1
 800daa8:	4615      	mov	r5, r2
 800daaa:	461e      	mov	r6, r3
 800daac:	f7fe fd6a 	bl	800c584 <ucdr_buffer_remaining>
 800dab0:	2808      	cmp	r0, #8
 800dab2:	d803      	bhi.n	800dabc <uxr_read_session_header+0x20>
 800dab4:	2000      	movs	r0, #0
 800dab6:	b004      	add	sp, #16
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	f10d 080c 	add.w	r8, sp, #12
 800dac0:	4633      	mov	r3, r6
 800dac2:	462a      	mov	r2, r5
 800dac4:	f8cd 8000 	str.w	r8, [sp]
 800dac8:	4620      	mov	r0, r4
 800daca:	f10d 010b 	add.w	r1, sp, #11
 800dace:	f000 fbaf 	bl	800e230 <uxr_deserialize_message_header>
 800dad2:	783a      	ldrb	r2, [r7, #0]
 800dad4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dad8:	4293      	cmp	r3, r2
 800dada:	d1eb      	bne.n	800dab4 <uxr_read_session_header+0x18>
 800dadc:	061b      	lsls	r3, r3, #24
 800dade:	d41c      	bmi.n	800db1a <uxr_read_session_header+0x7e>
 800dae0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dae4:	787b      	ldrb	r3, [r7, #1]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d003      	beq.n	800daf2 <uxr_read_session_header+0x56>
 800daea:	2001      	movs	r0, #1
 800daec:	f080 0001 	eor.w	r0, r0, #1
 800daf0:	e7e1      	b.n	800dab6 <uxr_read_session_header+0x1a>
 800daf2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800daf6:	78bb      	ldrb	r3, [r7, #2]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	f107 0102 	add.w	r1, r7, #2
 800dafe:	d1f4      	bne.n	800daea <uxr_read_session_header+0x4e>
 800db00:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800db04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db08:	429a      	cmp	r2, r3
 800db0a:	d1ee      	bne.n	800daea <uxr_read_session_header+0x4e>
 800db0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800db10:	784b      	ldrb	r3, [r1, #1]
 800db12:	429a      	cmp	r2, r3
 800db14:	d1e9      	bne.n	800daea <uxr_read_session_header+0x4e>
 800db16:	2000      	movs	r0, #0
 800db18:	e7e8      	b.n	800daec <uxr_read_session_header+0x50>
 800db1a:	2001      	movs	r0, #1
 800db1c:	e7cb      	b.n	800dab6 <uxr_read_session_header+0x1a>
 800db1e:	bf00      	nop

0800db20 <uxr_session_header_offset>:
 800db20:	f990 3000 	ldrsb.w	r3, [r0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	bfac      	ite	ge
 800db28:	2008      	movge	r0, #8
 800db2a:	2004      	movlt	r0, #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop

0800db30 <uxr_init_base_object_request>:
 800db30:	b510      	push	{r4, lr}
 800db32:	88c3      	ldrh	r3, [r0, #6]
 800db34:	b082      	sub	sp, #8
 800db36:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800db3a:	9101      	str	r1, [sp, #4]
 800db3c:	f1a3 010a 	sub.w	r1, r3, #10
 800db40:	b289      	uxth	r1, r1
 800db42:	42a1      	cmp	r1, r4
 800db44:	d80e      	bhi.n	800db64 <uxr_init_base_object_request+0x34>
 800db46:	3301      	adds	r3, #1
 800db48:	b29c      	uxth	r4, r3
 800db4a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	80c4      	strh	r4, [r0, #6]
 800db52:	9801      	ldr	r0, [sp, #4]
 800db54:	7011      	strb	r1, [r2, #0]
 800db56:	7053      	strb	r3, [r2, #1]
 800db58:	1c91      	adds	r1, r2, #2
 800db5a:	f7fe ff77 	bl	800ca4c <uxr_object_id_to_raw>
 800db5e:	4620      	mov	r0, r4
 800db60:	b002      	add	sp, #8
 800db62:	bd10      	pop	{r4, pc}
 800db64:	230a      	movs	r3, #10
 800db66:	2100      	movs	r1, #0
 800db68:	461c      	mov	r4, r3
 800db6a:	e7f1      	b.n	800db50 <uxr_init_base_object_request+0x20>

0800db6c <uxr_parse_base_object_request>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	4604      	mov	r4, r0
 800db70:	3002      	adds	r0, #2
 800db72:	460d      	mov	r5, r1
 800db74:	4616      	mov	r6, r2
 800db76:	f7fe ff55 	bl	800ca24 <uxr_object_id_from_raw>
 800db7a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800db7e:	8028      	strh	r0, [r5, #0]
 800db80:	806b      	strh	r3, [r5, #2]
 800db82:	7822      	ldrb	r2, [r4, #0]
 800db84:	7863      	ldrb	r3, [r4, #1]
 800db86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800db8a:	8033      	strh	r3, [r6, #0]
 800db8c:	bd70      	pop	{r4, r5, r6, pc}
 800db8e:	bf00      	nop

0800db90 <uxr_stream_id>:
 800db90:	2901      	cmp	r1, #1
 800db92:	b082      	sub	sp, #8
 800db94:	d01d      	beq.n	800dbd2 <uxr_stream_id+0x42>
 800db96:	2902      	cmp	r1, #2
 800db98:	f04f 0c00 	mov.w	ip, #0
 800db9c:	d01e      	beq.n	800dbdc <uxr_stream_id+0x4c>
 800db9e:	2300      	movs	r3, #0
 800dba0:	f36c 0307 	bfi	r3, ip, #0, #8
 800dba4:	f360 230f 	bfi	r3, r0, #8, #8
 800dba8:	f361 4317 	bfi	r3, r1, #16, #8
 800dbac:	f362 631f 	bfi	r3, r2, #24, #8
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	f362 0007 	bfi	r0, r2, #0, #8
 800dbb8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dbbc:	f362 200f 	bfi	r0, r2, #8, #8
 800dbc0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dbc4:	f362 4017 	bfi	r0, r2, #16, #8
 800dbc8:	0e1b      	lsrs	r3, r3, #24
 800dbca:	f363 601f 	bfi	r0, r3, #24, #8
 800dbce:	b002      	add	sp, #8
 800dbd0:	4770      	bx	lr
 800dbd2:	f100 0c01 	add.w	ip, r0, #1
 800dbd6:	fa5f fc8c 	uxtb.w	ip, ip
 800dbda:	e7e0      	b.n	800db9e <uxr_stream_id+0xe>
 800dbdc:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800dbe0:	e7dd      	b.n	800db9e <uxr_stream_id+0xe>
 800dbe2:	bf00      	nop

0800dbe4 <uxr_stream_id_from_raw>:
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	b130      	cbz	r0, 800dbf6 <uxr_stream_id_from_raw+0x12>
 800dbe8:	0603      	lsls	r3, r0, #24
 800dbea:	d420      	bmi.n	800dc2e <uxr_stream_id_from_raw+0x4a>
 800dbec:	1e42      	subs	r2, r0, #1
 800dbee:	b2d2      	uxtb	r2, r2
 800dbf0:	f04f 0c01 	mov.w	ip, #1
 800dbf4:	e001      	b.n	800dbfa <uxr_stream_id_from_raw+0x16>
 800dbf6:	4684      	mov	ip, r0
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f360 0307 	bfi	r3, r0, #0, #8
 800dc00:	f362 230f 	bfi	r3, r2, #8, #8
 800dc04:	f36c 4317 	bfi	r3, ip, #16, #8
 800dc08:	f361 631f 	bfi	r3, r1, #24, #8
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	2000      	movs	r0, #0
 800dc10:	f362 0007 	bfi	r0, r2, #0, #8
 800dc14:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dc18:	f362 200f 	bfi	r0, r2, #8, #8
 800dc1c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dc20:	f362 4017 	bfi	r0, r2, #16, #8
 800dc24:	0e1b      	lsrs	r3, r3, #24
 800dc26:	f363 601f 	bfi	r0, r3, #24, #8
 800dc2a:	b002      	add	sp, #8
 800dc2c:	4770      	bx	lr
 800dc2e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800dc32:	f04f 0c02 	mov.w	ip, #2
 800dc36:	e7e0      	b.n	800dbfa <uxr_stream_id_from_raw+0x16>

0800dc38 <uxr_init_stream_storage>:
 800dc38:	2300      	movs	r3, #0
 800dc3a:	7403      	strb	r3, [r0, #16]
 800dc3c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800dc40:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800dc44:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop

0800dc4c <uxr_reset_stream_storage>:
 800dc4c:	b570      	push	{r4, r5, r6, lr}
 800dc4e:	7c03      	ldrb	r3, [r0, #16]
 800dc50:	4604      	mov	r4, r0
 800dc52:	b153      	cbz	r3, 800dc6a <uxr_reset_stream_storage+0x1e>
 800dc54:	4606      	mov	r6, r0
 800dc56:	2500      	movs	r5, #0
 800dc58:	4630      	mov	r0, r6
 800dc5a:	f006 fc21 	bl	80144a0 <uxr_reset_output_best_effort_stream>
 800dc5e:	7c23      	ldrb	r3, [r4, #16]
 800dc60:	3501      	adds	r5, #1
 800dc62:	42ab      	cmp	r3, r5
 800dc64:	f106 0610 	add.w	r6, r6, #16
 800dc68:	d8f6      	bhi.n	800dc58 <uxr_reset_stream_storage+0xc>
 800dc6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc6e:	b163      	cbz	r3, 800dc8a <uxr_reset_stream_storage+0x3e>
 800dc70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dc74:	2500      	movs	r5, #0
 800dc76:	4630      	mov	r0, r6
 800dc78:	f006 fa14 	bl	80140a4 <uxr_reset_input_best_effort_stream>
 800dc7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc80:	3501      	adds	r5, #1
 800dc82:	42ab      	cmp	r3, r5
 800dc84:	f106 0602 	add.w	r6, r6, #2
 800dc88:	d8f5      	bhi.n	800dc76 <uxr_reset_stream_storage+0x2a>
 800dc8a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dc8e:	b163      	cbz	r3, 800dcaa <uxr_reset_stream_storage+0x5e>
 800dc90:	f104 0618 	add.w	r6, r4, #24
 800dc94:	2500      	movs	r5, #0
 800dc96:	4630      	mov	r0, r6
 800dc98:	f006 fcae 	bl	80145f8 <uxr_reset_output_reliable_stream>
 800dc9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dca0:	3501      	adds	r5, #1
 800dca2:	42ab      	cmp	r3, r5
 800dca4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800dca8:	d8f5      	bhi.n	800dc96 <uxr_reset_stream_storage+0x4a>
 800dcaa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800dcae:	b163      	cbz	r3, 800dcca <uxr_reset_stream_storage+0x7e>
 800dcb0:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800dcb4:	2500      	movs	r5, #0
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f006 fa68 	bl	801418c <uxr_reset_input_reliable_stream>
 800dcbc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800dcc0:	3501      	adds	r5, #1
 800dcc2:	42ab      	cmp	r3, r5
 800dcc4:	f106 0618 	add.w	r6, r6, #24
 800dcc8:	d8f5      	bhi.n	800dcb6 <uxr_reset_stream_storage+0x6a>
 800dcca:	bd70      	pop	{r4, r5, r6, pc}

0800dccc <uxr_add_output_best_effort_buffer>:
 800dccc:	b510      	push	{r4, lr}
 800dcce:	7c04      	ldrb	r4, [r0, #16]
 800dcd0:	f104 0c01 	add.w	ip, r4, #1
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	f880 c010 	strb.w	ip, [r0, #16]
 800dcda:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800dcde:	f006 fbd5 	bl	801448c <uxr_init_output_best_effort_stream>
 800dce2:	2201      	movs	r2, #1
 800dce4:	4611      	mov	r1, r2
 800dce6:	4620      	mov	r0, r4
 800dce8:	b002      	add	sp, #8
 800dcea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcee:	f7ff bf4f 	b.w	800db90 <uxr_stream_id>
 800dcf2:	bf00      	nop

0800dcf4 <uxr_add_output_reliable_buffer>:
 800dcf4:	b510      	push	{r4, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	4684      	mov	ip, r0
 800dcfa:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dcfe:	9000      	str	r0, [sp, #0]
 800dd00:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800dd04:	2028      	movs	r0, #40	; 0x28
 800dd06:	fb00 c004 	mla	r0, r0, r4, ip
 800dd0a:	f104 0e01 	add.w	lr, r4, #1
 800dd0e:	3018      	adds	r0, #24
 800dd10:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800dd14:	f006 fc38 	bl	8014588 <uxr_init_output_reliable_stream>
 800dd18:	2201      	movs	r2, #1
 800dd1a:	2102      	movs	r1, #2
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	b004      	add	sp, #16
 800dd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd24:	f7ff bf34 	b.w	800db90 <uxr_stream_id>

0800dd28 <uxr_add_input_best_effort_buffer>:
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800dd2e:	4603      	mov	r3, r0
 800dd30:	1c62      	adds	r2, r4, #1
 800dd32:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800dd36:	b082      	sub	sp, #8
 800dd38:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800dd3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd40:	f006 f9ac 	bl	801409c <uxr_init_input_best_effort_stream>
 800dd44:	2200      	movs	r2, #0
 800dd46:	2101      	movs	r1, #1
 800dd48:	4620      	mov	r0, r4
 800dd4a:	b002      	add	sp, #8
 800dd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd50:	f7ff bf1e 	b.w	800db90 <uxr_stream_id>

0800dd54 <uxr_add_input_reliable_buffer>:
 800dd54:	b510      	push	{r4, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	4684      	mov	ip, r0
 800dd5a:	9806      	ldr	r0, [sp, #24]
 800dd5c:	9000      	str	r0, [sp, #0]
 800dd5e:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800dd62:	2018      	movs	r0, #24
 800dd64:	fb00 c004 	mla	r0, r0, r4, ip
 800dd68:	f104 0e01 	add.w	lr, r4, #1
 800dd6c:	3048      	adds	r0, #72	; 0x48
 800dd6e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800dd72:	f006 f9df 	bl	8014134 <uxr_init_input_reliable_stream>
 800dd76:	2200      	movs	r2, #0
 800dd78:	2102      	movs	r1, #2
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	b004      	add	sp, #16
 800dd7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd82:	f7ff bf05 	b.w	800db90 <uxr_stream_id>
 800dd86:	bf00      	nop

0800dd88 <uxr_get_output_best_effort_stream>:
 800dd88:	7c03      	ldrb	r3, [r0, #16]
 800dd8a:	428b      	cmp	r3, r1
 800dd8c:	bf8c      	ite	hi
 800dd8e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800dd92:	2000      	movls	r0, #0
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop

0800dd98 <uxr_get_output_reliable_stream>:
 800dd98:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dd9c:	428b      	cmp	r3, r1
 800dd9e:	bf83      	ittte	hi
 800dda0:	2328      	movhi	r3, #40	; 0x28
 800dda2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800dda6:	3018      	addhi	r0, #24
 800dda8:	2000      	movls	r0, #0
 800ddaa:	4770      	bx	lr

0800ddac <uxr_get_input_best_effort_stream>:
 800ddac:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ddb0:	428b      	cmp	r3, r1
 800ddb2:	bf86      	itte	hi
 800ddb4:	3121      	addhi	r1, #33	; 0x21
 800ddb6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ddba:	2000      	movls	r0, #0
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop

0800ddc0 <uxr_get_input_reliable_stream>:
 800ddc0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800ddc4:	428b      	cmp	r3, r1
 800ddc6:	bf83      	ittte	hi
 800ddc8:	2318      	movhi	r3, #24
 800ddca:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ddce:	3048      	addhi	r0, #72	; 0x48
 800ddd0:	2000      	movls	r0, #0
 800ddd2:	4770      	bx	lr

0800ddd4 <uxr_output_streams_confirmed>:
 800ddd4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ddd8:	b183      	cbz	r3, 800ddfc <uxr_output_streams_confirmed+0x28>
 800ddda:	b570      	push	{r4, r5, r6, lr}
 800dddc:	4606      	mov	r6, r0
 800ddde:	f100 0518 	add.w	r5, r0, #24
 800dde2:	2400      	movs	r4, #0
 800dde4:	e001      	b.n	800ddea <uxr_output_streams_confirmed+0x16>
 800dde6:	3528      	adds	r5, #40	; 0x28
 800dde8:	b138      	cbz	r0, 800ddfa <uxr_output_streams_confirmed+0x26>
 800ddea:	4628      	mov	r0, r5
 800ddec:	f006 fe74 	bl	8014ad8 <uxr_is_output_up_to_date>
 800ddf0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800ddf4:	3401      	adds	r4, #1
 800ddf6:	42a3      	cmp	r3, r4
 800ddf8:	d8f5      	bhi.n	800dde6 <uxr_output_streams_confirmed+0x12>
 800ddfa:	bd70      	pop	{r4, r5, r6, pc}
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	4770      	bx	lr

0800de00 <uxr_buffer_submessage_header>:
 800de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de02:	4604      	mov	r4, r0
 800de04:	460e      	mov	r6, r1
 800de06:	2104      	movs	r1, #4
 800de08:	4615      	mov	r5, r2
 800de0a:	461f      	mov	r7, r3
 800de0c:	f7fe fba4 	bl	800c558 <ucdr_align_to>
 800de10:	2301      	movs	r3, #1
 800de12:	ea47 0203 	orr.w	r2, r7, r3
 800de16:	4631      	mov	r1, r6
 800de18:	7523      	strb	r3, [r4, #20]
 800de1a:	4620      	mov	r0, r4
 800de1c:	462b      	mov	r3, r5
 800de1e:	f000 fa27 	bl	800e270 <uxr_serialize_submessage_header>
 800de22:	4620      	mov	r0, r4
 800de24:	f7fe fbae 	bl	800c584 <ucdr_buffer_remaining>
 800de28:	42a8      	cmp	r0, r5
 800de2a:	bf34      	ite	cc
 800de2c:	2000      	movcc	r0, #0
 800de2e:	2001      	movcs	r0, #1
 800de30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de32:	bf00      	nop

0800de34 <uxr_read_submessage_header>:
 800de34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de38:	4604      	mov	r4, r0
 800de3a:	460d      	mov	r5, r1
 800de3c:	2104      	movs	r1, #4
 800de3e:	4616      	mov	r6, r2
 800de40:	4698      	mov	r8, r3
 800de42:	f7fe fb89 	bl	800c558 <ucdr_align_to>
 800de46:	4620      	mov	r0, r4
 800de48:	f7fe fb9c 	bl	800c584 <ucdr_buffer_remaining>
 800de4c:	2803      	cmp	r0, #3
 800de4e:	bf8c      	ite	hi
 800de50:	2701      	movhi	r7, #1
 800de52:	2700      	movls	r7, #0
 800de54:	d802      	bhi.n	800de5c <uxr_read_submessage_header+0x28>
 800de56:	4638      	mov	r0, r7
 800de58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de5c:	4633      	mov	r3, r6
 800de5e:	4642      	mov	r2, r8
 800de60:	4620      	mov	r0, r4
 800de62:	4629      	mov	r1, r5
 800de64:	f000 fa18 	bl	800e298 <uxr_deserialize_submessage_header>
 800de68:	f898 3000 	ldrb.w	r3, [r8]
 800de6c:	f003 0201 	and.w	r2, r3, #1
 800de70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800de74:	f888 3000 	strb.w	r3, [r8]
 800de78:	7522      	strb	r2, [r4, #20]
 800de7a:	4638      	mov	r0, r7
 800de7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de80 <uxr_submessage_padding>:
 800de80:	f010 0003 	ands.w	r0, r0, #3
 800de84:	bf18      	it	ne
 800de86:	f1c0 0004 	rsbne	r0, r0, #4
 800de8a:	4770      	bx	lr

0800de8c <uxr_millis>:
 800de8c:	b510      	push	{r4, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	4669      	mov	r1, sp
 800de92:	2001      	movs	r0, #1
 800de94:	f7f3 fb28 	bl	80014e8 <clock_gettime>
 800de98:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800de9c:	4906      	ldr	r1, [pc, #24]	; (800deb8 <uxr_millis+0x2c>)
 800de9e:	fba0 0301 	umull	r0, r3, r0, r1
 800dea2:	1900      	adds	r0, r0, r4
 800dea4:	fb01 3102 	mla	r1, r1, r2, r3
 800dea8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800deac:	4a03      	ldr	r2, [pc, #12]	; (800debc <uxr_millis+0x30>)
 800deae:	2300      	movs	r3, #0
 800deb0:	f7f2 fa16 	bl	80002e0 <__aeabi_ldivmod>
 800deb4:	b004      	add	sp, #16
 800deb6:	bd10      	pop	{r4, pc}
 800deb8:	3b9aca00 	.word	0x3b9aca00
 800debc:	000f4240 	.word	0x000f4240

0800dec0 <uxr_nanos>:
 800dec0:	b510      	push	{r4, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	4669      	mov	r1, sp
 800dec6:	2001      	movs	r0, #1
 800dec8:	f7f3 fb0e 	bl	80014e8 <clock_gettime>
 800decc:	4a06      	ldr	r2, [pc, #24]	; (800dee8 <uxr_nanos+0x28>)
 800dece:	9800      	ldr	r0, [sp, #0]
 800ded0:	9902      	ldr	r1, [sp, #8]
 800ded2:	9c01      	ldr	r4, [sp, #4]
 800ded4:	fba0 0302 	umull	r0, r3, r0, r2
 800ded8:	1840      	adds	r0, r0, r1
 800deda:	fb02 3304 	mla	r3, r2, r4, r3
 800dede:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800dee2:	b004      	add	sp, #16
 800dee4:	bd10      	pop	{r4, pc}
 800dee6:	bf00      	nop
 800dee8:	3b9aca00 	.word	0x3b9aca00

0800deec <on_full_output_buffer_fragmented>:
 800deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def0:	460c      	mov	r4, r1
 800def2:	b08a      	sub	sp, #40	; 0x28
 800def4:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800def8:	4606      	mov	r6, r0
 800defa:	f104 0008 	add.w	r0, r4, #8
 800defe:	f7ff ff4b 	bl	800dd98 <uxr_get_output_reliable_stream>
 800df02:	4605      	mov	r5, r0
 800df04:	f006 fdf2 	bl	8014aec <get_available_free_slots>
 800df08:	b968      	cbnz	r0, 800df26 <on_full_output_buffer_fragmented+0x3a>
 800df0a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800df0e:	4620      	mov	r0, r4
 800df10:	4798      	blx	r3
 800df12:	b918      	cbnz	r0, 800df1c <on_full_output_buffer_fragmented+0x30>
 800df14:	2001      	movs	r0, #1
 800df16:	b00a      	add	sp, #40	; 0x28
 800df18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df1c:	4628      	mov	r0, r5
 800df1e:	f006 fde5 	bl	8014aec <get_available_free_slots>
 800df22:	2800      	cmp	r0, #0
 800df24:	d0f6      	beq.n	800df14 <on_full_output_buffer_fragmented+0x28>
 800df26:	8929      	ldrh	r1, [r5, #8]
 800df28:	89eb      	ldrh	r3, [r5, #14]
 800df2a:	7b28      	ldrb	r0, [r5, #12]
 800df2c:	686a      	ldr	r2, [r5, #4]
 800df2e:	fbb2 f8f1 	udiv	r8, r2, r1
 800df32:	fbb3 f2f1 	udiv	r2, r3, r1
 800df36:	fb01 3112 	mls	r1, r1, r2, r3
 800df3a:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800df3e:	b289      	uxth	r1, r1
 800df40:	fb08 f101 	mul.w	r1, r8, r1
 800df44:	30fc      	adds	r0, #252	; 0xfc
 800df46:	f1a8 0804 	sub.w	r8, r8, #4
 800df4a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800df4e:	4440      	add	r0, r8
 800df50:	b287      	uxth	r7, r0
 800df52:	1bdb      	subs	r3, r3, r7
 800df54:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800df58:	682b      	ldr	r3, [r5, #0]
 800df5a:	3104      	adds	r1, #4
 800df5c:	4419      	add	r1, r3
 800df5e:	4642      	mov	r2, r8
 800df60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	a802      	add	r0, sp, #8
 800df68:	2300      	movs	r3, #0
 800df6a:	f7fe fac9 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800df6e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800df72:	f102 0308 	add.w	r3, r2, #8
 800df76:	4543      	cmp	r3, r8
 800df78:	d928      	bls.n	800dfcc <on_full_output_buffer_fragmented+0xe0>
 800df7a:	463a      	mov	r2, r7
 800df7c:	2300      	movs	r3, #0
 800df7e:	210d      	movs	r1, #13
 800df80:	a802      	add	r0, sp, #8
 800df82:	f7ff ff3d 	bl	800de00 <uxr_buffer_submessage_header>
 800df86:	8929      	ldrh	r1, [r5, #8]
 800df88:	89eb      	ldrh	r3, [r5, #14]
 800df8a:	fbb3 f2f1 	udiv	r2, r3, r1
 800df8e:	fb01 3312 	mls	r3, r1, r2, r3
 800df92:	b29b      	uxth	r3, r3
 800df94:	686a      	ldr	r2, [r5, #4]
 800df96:	fbb2 f2f1 	udiv	r2, r2, r1
 800df9a:	fb02 f303 	mul.w	r3, r2, r3
 800df9e:	682a      	ldr	r2, [r5, #0]
 800dfa0:	f842 8003 	str.w	r8, [r2, r3]
 800dfa4:	89e8      	ldrh	r0, [r5, #14]
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	f006 fef0 	bl	8014d8c <uxr_seq_num_add>
 800dfac:	9904      	ldr	r1, [sp, #16]
 800dfae:	9a03      	ldr	r2, [sp, #12]
 800dfb0:	81e8      	strh	r0, [r5, #14]
 800dfb2:	1a52      	subs	r2, r2, r1
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f7fe fab5 	bl	800c524 <ucdr_init_buffer>
 800dfba:	4630      	mov	r0, r6
 800dfbc:	490f      	ldr	r1, [pc, #60]	; (800dffc <on_full_output_buffer_fragmented+0x110>)
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	f7fe fa84 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	b00a      	add	sp, #40	; 0x28
 800dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfcc:	b292      	uxth	r2, r2
 800dfce:	2302      	movs	r3, #2
 800dfd0:	210d      	movs	r1, #13
 800dfd2:	a802      	add	r0, sp, #8
 800dfd4:	f7ff ff14 	bl	800de00 <uxr_buffer_submessage_header>
 800dfd8:	8928      	ldrh	r0, [r5, #8]
 800dfda:	89eb      	ldrh	r3, [r5, #14]
 800dfdc:	fbb3 f1f0 	udiv	r1, r3, r0
 800dfe0:	fb00 3311 	mls	r3, r0, r1, r3
 800dfe4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800dfe8:	6869      	ldr	r1, [r5, #4]
 800dfea:	fbb1 f1f0 	udiv	r1, r1, r0
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	fb01 f303 	mul.w	r3, r1, r3
 800dff4:	6829      	ldr	r1, [r5, #0]
 800dff6:	3208      	adds	r2, #8
 800dff8:	50ca      	str	r2, [r1, r3]
 800dffa:	e7d3      	b.n	800dfa4 <on_full_output_buffer_fragmented+0xb8>
 800dffc:	0800deed 	.word	0x0800deed

0800e000 <uxr_prepare_output_stream>:
 800e000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e002:	b087      	sub	sp, #28
 800e004:	2707      	movs	r7, #7
 800e006:	9202      	str	r2, [sp, #8]
 800e008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e00a:	9103      	str	r1, [sp, #12]
 800e00c:	2500      	movs	r5, #0
 800e00e:	3204      	adds	r2, #4
 800e010:	e9cd 7500 	strd	r7, r5, [sp]
 800e014:	461c      	mov	r4, r3
 800e016:	4606      	mov	r6, r0
 800e018:	f7ff fc54 	bl	800d8c4 <uxr_prepare_stream_to_write_submessage>
 800e01c:	f080 0201 	eor.w	r2, r0, #1
 800e020:	b2d2      	uxtb	r2, r2
 800e022:	75a2      	strb	r2, [r4, #22]
 800e024:	b112      	cbz	r2, 800e02c <uxr_prepare_output_stream+0x2c>
 800e026:	4628      	mov	r0, r5
 800e028:	b007      	add	sp, #28
 800e02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e02c:	aa05      	add	r2, sp, #20
 800e02e:	9902      	ldr	r1, [sp, #8]
 800e030:	4630      	mov	r0, r6
 800e032:	f7ff fd7d 	bl	800db30 <uxr_init_base_object_request>
 800e036:	a905      	add	r1, sp, #20
 800e038:	4605      	mov	r5, r0
 800e03a:	4620      	mov	r0, r4
 800e03c:	f001 f88c 	bl	800f158 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e040:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e044:	69a6      	ldr	r6, [r4, #24]
 800e046:	69e7      	ldr	r7, [r4, #28]
 800e048:	1a52      	subs	r2, r2, r1
 800e04a:	4620      	mov	r0, r4
 800e04c:	f7fe fa6a 	bl	800c524 <ucdr_init_buffer>
 800e050:	4620      	mov	r0, r4
 800e052:	463a      	mov	r2, r7
 800e054:	4631      	mov	r1, r6
 800e056:	f7fe fa39 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 800e05a:	4628      	mov	r0, r5
 800e05c:	b007      	add	sp, #28
 800e05e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e060 <uxr_prepare_output_stream_fragmented>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	b091      	sub	sp, #68	; 0x44
 800e066:	4605      	mov	r5, r0
 800e068:	9105      	str	r1, [sp, #20]
 800e06a:	3008      	adds	r0, #8
 800e06c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e070:	461e      	mov	r6, r3
 800e072:	9204      	str	r2, [sp, #16]
 800e074:	f7ff fe90 	bl	800dd98 <uxr_get_output_reliable_stream>
 800e078:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	f000 8091 	beq.w	800e1a4 <uxr_prepare_output_stream_fragmented+0x144>
 800e082:	4604      	mov	r4, r0
 800e084:	2800      	cmp	r0, #0
 800e086:	f000 808d 	beq.w	800e1a4 <uxr_prepare_output_stream_fragmented+0x144>
 800e08a:	f006 fd2f 	bl	8014aec <get_available_free_slots>
 800e08e:	2800      	cmp	r0, #0
 800e090:	f000 8083 	beq.w	800e19a <uxr_prepare_output_stream_fragmented+0x13a>
 800e094:	8922      	ldrh	r2, [r4, #8]
 800e096:	89e7      	ldrh	r7, [r4, #14]
 800e098:	fbb7 f9f2 	udiv	r9, r7, r2
 800e09c:	fb02 7919 	mls	r9, r2, r9, r7
 800e0a0:	fa1f f989 	uxth.w	r9, r9
 800e0a4:	6863      	ldr	r3, [r4, #4]
 800e0a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	9203      	str	r2, [sp, #12]
 800e0ae:	fb02 f909 	mul.w	r9, r2, r9
 800e0b2:	f109 0904 	add.w	r9, r9, #4
 800e0b6:	4499      	add	r9, r3
 800e0b8:	7b23      	ldrb	r3, [r4, #12]
 800e0ba:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e0be:	4543      	cmp	r3, r8
 800e0c0:	f1a2 0b04 	sub.w	fp, r2, #4
 800e0c4:	d37a      	bcc.n	800e1bc <uxr_prepare_output_stream_fragmented+0x15c>
 800e0c6:	f1ab 0a04 	sub.w	sl, fp, #4
 800e0ca:	ebaa 0a03 	sub.w	sl, sl, r3
 800e0ce:	465a      	mov	r2, fp
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	4649      	mov	r1, r9
 800e0d4:	a808      	add	r0, sp, #32
 800e0d6:	f8cd 8000 	str.w	r8, [sp]
 800e0da:	f7fe fa11 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800e0de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e0e0:	fa1f fa8a 	uxth.w	sl, sl
 800e0e4:	4652      	mov	r2, sl
 800e0e6:	f103 0a08 	add.w	sl, r3, #8
 800e0ea:	45da      	cmp	sl, fp
 800e0ec:	bf34      	ite	cc
 800e0ee:	2302      	movcc	r3, #2
 800e0f0:	2300      	movcs	r3, #0
 800e0f2:	210d      	movs	r1, #13
 800e0f4:	a808      	add	r0, sp, #32
 800e0f6:	f7ff fe83 	bl	800de00 <uxr_buffer_submessage_header>
 800e0fa:	8921      	ldrh	r1, [r4, #8]
 800e0fc:	fbb7 f2f1 	udiv	r2, r7, r1
 800e100:	fb01 7212 	mls	r2, r1, r2, r7
 800e104:	b292      	uxth	r2, r2
 800e106:	6863      	ldr	r3, [r4, #4]
 800e108:	fbb3 f3f1 	udiv	r3, r3, r1
 800e10c:	fb02 f303 	mul.w	r3, r2, r3
 800e110:	6822      	ldr	r2, [r4, #0]
 800e112:	4638      	mov	r0, r7
 800e114:	f842 b003 	str.w	fp, [r2, r3]
 800e118:	2101      	movs	r1, #1
 800e11a:	f006 fe37 	bl	8014d8c <uxr_seq_num_add>
 800e11e:	9b03      	ldr	r3, [sp, #12]
 800e120:	f108 0104 	add.w	r1, r8, #4
 800e124:	f1a3 0208 	sub.w	r2, r3, #8
 800e128:	eba2 0208 	sub.w	r2, r2, r8
 800e12c:	4449      	add	r1, r9
 800e12e:	4607      	mov	r7, r0
 800e130:	4630      	mov	r0, r6
 800e132:	f7fe f9f7 	bl	800c524 <ucdr_init_buffer>
 800e136:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e138:	81e7      	strh	r7, [r4, #14]
 800e13a:	1d1a      	adds	r2, r3, #4
 800e13c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e140:	bf28      	it	cs
 800e142:	2200      	movcs	r2, #0
 800e144:	2300      	movs	r3, #0
 800e146:	b292      	uxth	r2, r2
 800e148:	2107      	movs	r1, #7
 800e14a:	4630      	mov	r0, r6
 800e14c:	f7ff fe58 	bl	800de00 <uxr_buffer_submessage_header>
 800e150:	9904      	ldr	r1, [sp, #16]
 800e152:	aa07      	add	r2, sp, #28
 800e154:	4628      	mov	r0, r5
 800e156:	f7ff fceb 	bl	800db30 <uxr_init_base_object_request>
 800e15a:	4604      	mov	r4, r0
 800e15c:	b318      	cbz	r0, 800e1a6 <uxr_prepare_output_stream_fragmented+0x146>
 800e15e:	a907      	add	r1, sp, #28
 800e160:	4630      	mov	r0, r6
 800e162:	f000 fff9 	bl	800f158 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e166:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e16a:	4630      	mov	r0, r6
 800e16c:	1a52      	subs	r2, r2, r1
 800e16e:	f7fe f9d9 	bl	800c524 <ucdr_init_buffer>
 800e172:	9b05      	ldr	r3, [sp, #20]
 800e174:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800e178:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e17a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800e17e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e180:	491b      	ldr	r1, [pc, #108]	; (800e1f0 <uxr_prepare_output_stream_fragmented+0x190>)
 800e182:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800e186:	4630      	mov	r0, r6
 800e188:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800e18c:	462a      	mov	r2, r5
 800e18e:	f7fe f99d 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 800e192:	4620      	mov	r0, r4
 800e194:	b011      	add	sp, #68	; 0x44
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e19c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e19e:	4628      	mov	r0, r5
 800e1a0:	4798      	blx	r3
 800e1a2:	b920      	cbnz	r0, 800e1ae <uxr_prepare_output_stream_fragmented+0x14e>
 800e1a4:	2400      	movs	r4, #0
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	b011      	add	sp, #68	; 0x44
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f006 fc9c 	bl	8014aec <get_available_free_slots>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	f47f af6d 	bne.w	800e094 <uxr_prepare_output_stream_fragmented+0x34>
 800e1ba:	e7f3      	b.n	800e1a4 <uxr_prepare_output_stream_fragmented+0x144>
 800e1bc:	4638      	mov	r0, r7
 800e1be:	2101      	movs	r1, #1
 800e1c0:	f006 fde4 	bl	8014d8c <uxr_seq_num_add>
 800e1c4:	8921      	ldrh	r1, [r4, #8]
 800e1c6:	fbb0 f2f1 	udiv	r2, r0, r1
 800e1ca:	fb01 0912 	mls	r9, r1, r2, r0
 800e1ce:	fa1f f289 	uxth.w	r2, r9
 800e1d2:	6863      	ldr	r3, [r4, #4]
 800e1d4:	fbb3 f9f1 	udiv	r9, r3, r1
 800e1d8:	6823      	ldr	r3, [r4, #0]
 800e1da:	fb02 f909 	mul.w	r9, r2, r9
 800e1de:	f109 0904 	add.w	r9, r9, #4
 800e1e2:	4499      	add	r9, r3
 800e1e4:	4607      	mov	r7, r0
 800e1e6:	7b23      	ldrb	r3, [r4, #12]
 800e1e8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e1ec:	e76b      	b.n	800e0c6 <uxr_prepare_output_stream_fragmented+0x66>
 800e1ee:	bf00      	nop
 800e1f0:	0800deed 	.word	0x0800deed

0800e1f4 <uxr_serialize_message_header>:
 800e1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	4616      	mov	r6, r2
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	9301      	str	r3, [sp, #4]
 800e1fe:	460d      	mov	r5, r1
 800e200:	9f08      	ldr	r7, [sp, #32]
 800e202:	f7fd f8bb 	bl	800b37c <ucdr_serialize_uint8_t>
 800e206:	4631      	mov	r1, r6
 800e208:	4620      	mov	r0, r4
 800e20a:	f7fd f8b7 	bl	800b37c <ucdr_serialize_uint8_t>
 800e20e:	9a01      	ldr	r2, [sp, #4]
 800e210:	2101      	movs	r1, #1
 800e212:	4620      	mov	r0, r4
 800e214:	f7fd f95e 	bl	800b4d4 <ucdr_serialize_endian_uint16_t>
 800e218:	062b      	lsls	r3, r5, #24
 800e21a:	d501      	bpl.n	800e220 <uxr_serialize_message_header+0x2c>
 800e21c:	b003      	add	sp, #12
 800e21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e220:	2204      	movs	r2, #4
 800e222:	4639      	mov	r1, r7
 800e224:	4620      	mov	r0, r4
 800e226:	b003      	add	sp, #12
 800e228:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e22c:	f005 bd3c 	b.w	8013ca8 <ucdr_serialize_array_uint8_t>

0800e230 <uxr_deserialize_message_header>:
 800e230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e232:	b083      	sub	sp, #12
 800e234:	4616      	mov	r6, r2
 800e236:	4604      	mov	r4, r0
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	460d      	mov	r5, r1
 800e23c:	9f08      	ldr	r7, [sp, #32]
 800e23e:	f7fd f8b3 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800e242:	4631      	mov	r1, r6
 800e244:	4620      	mov	r0, r4
 800e246:	f7fd f8af 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800e24a:	9a01      	ldr	r2, [sp, #4]
 800e24c:	2101      	movs	r1, #1
 800e24e:	4620      	mov	r0, r4
 800e250:	f7fd fa34 	bl	800b6bc <ucdr_deserialize_endian_uint16_t>
 800e254:	f995 3000 	ldrsb.w	r3, [r5]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	da01      	bge.n	800e260 <uxr_deserialize_message_header+0x30>
 800e25c:	b003      	add	sp, #12
 800e25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e260:	2204      	movs	r2, #4
 800e262:	4639      	mov	r1, r7
 800e264:	4620      	mov	r0, r4
 800e266:	b003      	add	sp, #12
 800e268:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e26c:	f005 bd80 	b.w	8013d70 <ucdr_deserialize_array_uint8_t>

0800e270 <uxr_serialize_submessage_header>:
 800e270:	b530      	push	{r4, r5, lr}
 800e272:	b083      	sub	sp, #12
 800e274:	4615      	mov	r5, r2
 800e276:	4604      	mov	r4, r0
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	f7fd f87f 	bl	800b37c <ucdr_serialize_uint8_t>
 800e27e:	4629      	mov	r1, r5
 800e280:	4620      	mov	r0, r4
 800e282:	f7fd f87b 	bl	800b37c <ucdr_serialize_uint8_t>
 800e286:	9a01      	ldr	r2, [sp, #4]
 800e288:	2101      	movs	r1, #1
 800e28a:	4620      	mov	r0, r4
 800e28c:	b003      	add	sp, #12
 800e28e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e292:	f7fd b91f 	b.w	800b4d4 <ucdr_serialize_endian_uint16_t>
 800e296:	bf00      	nop

0800e298 <uxr_deserialize_submessage_header>:
 800e298:	b530      	push	{r4, r5, lr}
 800e29a:	b083      	sub	sp, #12
 800e29c:	4615      	mov	r5, r2
 800e29e:	4604      	mov	r4, r0
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	f7fd f881 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f7fd f87d 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800e2ae:	9a01      	ldr	r2, [sp, #4]
 800e2b0:	2101      	movs	r1, #1
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	b003      	add	sp, #12
 800e2b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2ba:	f7fd b9ff 	b.w	800b6bc <ucdr_deserialize_endian_uint16_t>
 800e2be:	bf00      	nop

0800e2c0 <uxr_serialize_CLIENT_Representation>:
 800e2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c4:	2204      	movs	r2, #4
 800e2c6:	460e      	mov	r6, r1
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	f005 fced 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e2ce:	2202      	movs	r2, #2
 800e2d0:	4607      	mov	r7, r0
 800e2d2:	1d31      	adds	r1, r6, #4
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	f005 fce7 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e2da:	4038      	ands	r0, r7
 800e2dc:	2202      	movs	r2, #2
 800e2de:	1db1      	adds	r1, r6, #6
 800e2e0:	b2c7      	uxtb	r7, r0
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f005 fce0 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e2e8:	2204      	movs	r2, #4
 800e2ea:	4007      	ands	r7, r0
 800e2ec:	f106 0108 	add.w	r1, r6, #8
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f005 fcd9 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e2f6:	7b31      	ldrb	r1, [r6, #12]
 800e2f8:	4007      	ands	r7, r0
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f7fd f83e 	bl	800b37c <ucdr_serialize_uint8_t>
 800e300:	7b71      	ldrb	r1, [r6, #13]
 800e302:	4007      	ands	r7, r0
 800e304:	4628      	mov	r0, r5
 800e306:	f7fd f80b 	bl	800b320 <ucdr_serialize_bool>
 800e30a:	7b73      	ldrb	r3, [r6, #13]
 800e30c:	ea07 0800 	and.w	r8, r7, r0
 800e310:	b93b      	cbnz	r3, 800e322 <uxr_serialize_CLIENT_Representation+0x62>
 800e312:	8bb1      	ldrh	r1, [r6, #28]
 800e314:	4628      	mov	r0, r5
 800e316:	f7fd f85d 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800e31a:	ea08 0000 	and.w	r0, r8, r0
 800e31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e322:	6931      	ldr	r1, [r6, #16]
 800e324:	4628      	mov	r0, r5
 800e326:	f7fd fa3f 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800e32a:	6933      	ldr	r3, [r6, #16]
 800e32c:	b1e3      	cbz	r3, 800e368 <uxr_serialize_CLIENT_Representation+0xa8>
 800e32e:	b1c0      	cbz	r0, 800e362 <uxr_serialize_CLIENT_Representation+0xa2>
 800e330:	4637      	mov	r7, r6
 800e332:	f04f 0900 	mov.w	r9, #0
 800e336:	e001      	b.n	800e33c <uxr_serialize_CLIENT_Representation+0x7c>
 800e338:	3708      	adds	r7, #8
 800e33a:	b194      	cbz	r4, 800e362 <uxr_serialize_CLIENT_Representation+0xa2>
 800e33c:	6979      	ldr	r1, [r7, #20]
 800e33e:	4628      	mov	r0, r5
 800e340:	f005 fdd2 	bl	8013ee8 <ucdr_serialize_string>
 800e344:	69b9      	ldr	r1, [r7, #24]
 800e346:	4604      	mov	r4, r0
 800e348:	4628      	mov	r0, r5
 800e34a:	f005 fdcd 	bl	8013ee8 <ucdr_serialize_string>
 800e34e:	6933      	ldr	r3, [r6, #16]
 800e350:	f109 0901 	add.w	r9, r9, #1
 800e354:	4004      	ands	r4, r0
 800e356:	4599      	cmp	r9, r3
 800e358:	b2e4      	uxtb	r4, r4
 800e35a:	d3ed      	bcc.n	800e338 <uxr_serialize_CLIENT_Representation+0x78>
 800e35c:	ea08 0804 	and.w	r8, r8, r4
 800e360:	e7d7      	b.n	800e312 <uxr_serialize_CLIENT_Representation+0x52>
 800e362:	f04f 0800 	mov.w	r8, #0
 800e366:	e7d4      	b.n	800e312 <uxr_serialize_CLIENT_Representation+0x52>
 800e368:	ea08 0800 	and.w	r8, r8, r0
 800e36c:	e7d1      	b.n	800e312 <uxr_serialize_CLIENT_Representation+0x52>
 800e36e:	bf00      	nop

0800e370 <uxr_deserialize_CLIENT_Representation>:
 800e370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e374:	2204      	movs	r2, #4
 800e376:	460c      	mov	r4, r1
 800e378:	4605      	mov	r5, r0
 800e37a:	f005 fcf9 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800e37e:	2202      	movs	r2, #2
 800e380:	4607      	mov	r7, r0
 800e382:	1d21      	adds	r1, r4, #4
 800e384:	4628      	mov	r0, r5
 800e386:	f005 fcf3 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800e38a:	4038      	ands	r0, r7
 800e38c:	2202      	movs	r2, #2
 800e38e:	1da1      	adds	r1, r4, #6
 800e390:	b2c6      	uxtb	r6, r0
 800e392:	4628      	mov	r0, r5
 800e394:	f005 fcec 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800e398:	2204      	movs	r2, #4
 800e39a:	4006      	ands	r6, r0
 800e39c:	f104 0108 	add.w	r1, r4, #8
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	f005 fce5 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800e3a6:	f104 010c 	add.w	r1, r4, #12
 800e3aa:	4006      	ands	r6, r0
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f7fc fffb 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800e3b2:	f104 010d 	add.w	r1, r4, #13
 800e3b6:	ea06 0700 	and.w	r7, r6, r0
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f7fc ffc6 	bl	800b34c <ucdr_deserialize_bool>
 800e3c0:	7b63      	ldrb	r3, [r4, #13]
 800e3c2:	4007      	ands	r7, r0
 800e3c4:	b93b      	cbnz	r3, 800e3d6 <uxr_deserialize_CLIENT_Representation+0x66>
 800e3c6:	f104 011c 	add.w	r1, r4, #28
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	f7fd f902 	bl	800b5d4 <ucdr_deserialize_uint16_t>
 800e3d0:	4038      	ands	r0, r7
 800e3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3d6:	f104 0110 	add.w	r1, r4, #16
 800e3da:	4628      	mov	r0, r5
 800e3dc:	f7fd fb14 	bl	800ba08 <ucdr_deserialize_uint32_t>
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d903      	bls.n	800e3ee <uxr_deserialize_CLIENT_Representation+0x7e>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	75ab      	strb	r3, [r5, #22]
 800e3ea:	2700      	movs	r7, #0
 800e3ec:	e7eb      	b.n	800e3c6 <uxr_deserialize_CLIENT_Representation+0x56>
 800e3ee:	b30b      	cbz	r3, 800e434 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d0fa      	beq.n	800e3ea <uxr_deserialize_CLIENT_Representation+0x7a>
 800e3f4:	46a0      	mov	r8, r4
 800e3f6:	f04f 0900 	mov.w	r9, #0
 800e3fa:	e001      	b.n	800e400 <uxr_deserialize_CLIENT_Representation+0x90>
 800e3fc:	2e00      	cmp	r6, #0
 800e3fe:	d0f4      	beq.n	800e3ea <uxr_deserialize_CLIENT_Representation+0x7a>
 800e400:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e404:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e408:	4628      	mov	r0, r5
 800e40a:	f005 fd7d 	bl	8013f08 <ucdr_deserialize_string>
 800e40e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e412:	4606      	mov	r6, r0
 800e414:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e418:	4628      	mov	r0, r5
 800e41a:	f005 fd75 	bl	8013f08 <ucdr_deserialize_string>
 800e41e:	6923      	ldr	r3, [r4, #16]
 800e420:	f109 0901 	add.w	r9, r9, #1
 800e424:	4006      	ands	r6, r0
 800e426:	4599      	cmp	r9, r3
 800e428:	f108 0808 	add.w	r8, r8, #8
 800e42c:	b2f6      	uxtb	r6, r6
 800e42e:	d3e5      	bcc.n	800e3fc <uxr_deserialize_CLIENT_Representation+0x8c>
 800e430:	4037      	ands	r7, r6
 800e432:	e7c8      	b.n	800e3c6 <uxr_deserialize_CLIENT_Representation+0x56>
 800e434:	4007      	ands	r7, r0
 800e436:	e7c6      	b.n	800e3c6 <uxr_deserialize_CLIENT_Representation+0x56>

0800e438 <uxr_serialize_AGENT_Representation>:
 800e438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e43c:	2204      	movs	r2, #4
 800e43e:	460f      	mov	r7, r1
 800e440:	4605      	mov	r5, r0
 800e442:	f005 fc31 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e446:	2202      	movs	r2, #2
 800e448:	4604      	mov	r4, r0
 800e44a:	1d39      	adds	r1, r7, #4
 800e44c:	4628      	mov	r0, r5
 800e44e:	f005 fc2b 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e452:	4020      	ands	r0, r4
 800e454:	2202      	movs	r2, #2
 800e456:	1db9      	adds	r1, r7, #6
 800e458:	b2c4      	uxtb	r4, r0
 800e45a:	4628      	mov	r0, r5
 800e45c:	f005 fc24 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e460:	7a39      	ldrb	r1, [r7, #8]
 800e462:	4004      	ands	r4, r0
 800e464:	4628      	mov	r0, r5
 800e466:	f7fc ff5b 	bl	800b320 <ucdr_serialize_bool>
 800e46a:	7a3b      	ldrb	r3, [r7, #8]
 800e46c:	ea00 0804 	and.w	r8, r0, r4
 800e470:	b913      	cbnz	r3, 800e478 <uxr_serialize_AGENT_Representation+0x40>
 800e472:	4640      	mov	r0, r8
 800e474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e478:	68f9      	ldr	r1, [r7, #12]
 800e47a:	4628      	mov	r0, r5
 800e47c:	f7fd f994 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	b303      	cbz	r3, 800e4c6 <uxr_serialize_AGENT_Representation+0x8e>
 800e484:	b1d0      	cbz	r0, 800e4bc <uxr_serialize_AGENT_Representation+0x84>
 800e486:	463e      	mov	r6, r7
 800e488:	f04f 0900 	mov.w	r9, #0
 800e48c:	e001      	b.n	800e492 <uxr_serialize_AGENT_Representation+0x5a>
 800e48e:	3608      	adds	r6, #8
 800e490:	b1a4      	cbz	r4, 800e4bc <uxr_serialize_AGENT_Representation+0x84>
 800e492:	6931      	ldr	r1, [r6, #16]
 800e494:	4628      	mov	r0, r5
 800e496:	f005 fd27 	bl	8013ee8 <ucdr_serialize_string>
 800e49a:	6971      	ldr	r1, [r6, #20]
 800e49c:	4604      	mov	r4, r0
 800e49e:	4628      	mov	r0, r5
 800e4a0:	f005 fd22 	bl	8013ee8 <ucdr_serialize_string>
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f109 0901 	add.w	r9, r9, #1
 800e4aa:	4004      	ands	r4, r0
 800e4ac:	4599      	cmp	r9, r3
 800e4ae:	b2e4      	uxtb	r4, r4
 800e4b0:	d3ed      	bcc.n	800e48e <uxr_serialize_AGENT_Representation+0x56>
 800e4b2:	ea08 0804 	and.w	r8, r8, r4
 800e4b6:	4640      	mov	r0, r8
 800e4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4bc:	f04f 0800 	mov.w	r8, #0
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	ea08 0800 	and.w	r8, r8, r0
 800e4ca:	e7d2      	b.n	800e472 <uxr_serialize_AGENT_Representation+0x3a>

0800e4cc <uxr_serialize_DATAWRITER_Representation>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	460d      	mov	r5, r1
 800e4d0:	7809      	ldrb	r1, [r1, #0]
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	f7fc ff52 	bl	800b37c <ucdr_serialize_uint8_t>
 800e4d8:	4604      	mov	r4, r0
 800e4da:	b130      	cbz	r0, 800e4ea <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e4dc:	782b      	ldrb	r3, [r5, #0]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d00c      	beq.n	800e4fc <uxr_serialize_DATAWRITER_Representation+0x30>
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d010      	beq.n	800e508 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d008      	beq.n	800e4fc <uxr_serialize_DATAWRITER_Representation+0x30>
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f005 fbd9 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e4f6:	4020      	ands	r0, r4
 800e4f8:	b2c0      	uxtb	r0, r0
 800e4fa:	bd70      	pop	{r4, r5, r6, pc}
 800e4fc:	6869      	ldr	r1, [r5, #4]
 800e4fe:	4630      	mov	r0, r6
 800e500:	f005 fcf2 	bl	8013ee8 <ucdr_serialize_string>
 800e504:	4604      	mov	r4, r0
 800e506:	e7f0      	b.n	800e4ea <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e508:	4629      	mov	r1, r5
 800e50a:	4630      	mov	r0, r6
 800e50c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e510:	3104      	adds	r1, #4
 800e512:	f005 fcbd 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800e516:	4604      	mov	r4, r0
 800e518:	e7e7      	b.n	800e4ea <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e51a:	bf00      	nop

0800e51c <uxr_serialize_ObjectVariant.part.0>:
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	780b      	ldrb	r3, [r1, #0]
 800e520:	3b01      	subs	r3, #1
 800e522:	460c      	mov	r4, r1
 800e524:	4605      	mov	r5, r0
 800e526:	2b0d      	cmp	r3, #13
 800e528:	d854      	bhi.n	800e5d4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e52a:	e8df f003 	tbb	[pc, r3]
 800e52e:	0730      	.short	0x0730
 800e530:	07071b1b 	.word	0x07071b1b
 800e534:	0c530707 	.word	0x0c530707
 800e538:	494e0c0c 	.word	0x494e0c0c
 800e53c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e540:	3104      	adds	r1, #4
 800e542:	f7ff bfc3 	b.w	800e4cc <uxr_serialize_DATAWRITER_Representation>
 800e546:	7909      	ldrb	r1, [r1, #4]
 800e548:	f7fc ff18 	bl	800b37c <ucdr_serialize_uint8_t>
 800e54c:	b1e8      	cbz	r0, 800e58a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e54e:	7923      	ldrb	r3, [r4, #4]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d001      	beq.n	800e558 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e554:	2b02      	cmp	r3, #2
 800e556:	d13d      	bne.n	800e5d4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e558:	68a1      	ldr	r1, [r4, #8]
 800e55a:	4628      	mov	r0, r5
 800e55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e560:	f005 bcc2 	b.w	8013ee8 <ucdr_serialize_string>
 800e564:	7909      	ldrb	r1, [r1, #4]
 800e566:	f7fc ff09 	bl	800b37c <ucdr_serialize_uint8_t>
 800e56a:	4606      	mov	r6, r0
 800e56c:	b120      	cbz	r0, 800e578 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e56e:	7923      	ldrb	r3, [r4, #4]
 800e570:	2b02      	cmp	r3, #2
 800e572:	d039      	beq.n	800e5e8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e574:	2b03      	cmp	r3, #3
 800e576:	d02f      	beq.n	800e5d8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e578:	2202      	movs	r2, #2
 800e57a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800e57e:	4628      	mov	r0, r5
 800e580:	f005 fb92 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800e584:	4030      	ands	r0, r6
 800e586:	b2c0      	uxtb	r0, r0
 800e588:	bd70      	pop	{r4, r5, r6, pc}
 800e58a:	2000      	movs	r0, #0
 800e58c:	bd70      	pop	{r4, r5, r6, pc}
 800e58e:	7909      	ldrb	r1, [r1, #4]
 800e590:	f7fc fef4 	bl	800b37c <ucdr_serialize_uint8_t>
 800e594:	4606      	mov	r6, r0
 800e596:	b158      	cbz	r0, 800e5b0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e598:	7923      	ldrb	r3, [r4, #4]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d003      	beq.n	800e5a6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e59e:	2b03      	cmp	r3, #3
 800e5a0:	d028      	beq.n	800e5f4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d104      	bne.n	800e5b0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e5a6:	68a1      	ldr	r1, [r4, #8]
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f005 fc9d 	bl	8013ee8 <ucdr_serialize_string>
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	f7fd fc1d 	bl	800bdf4 <ucdr_serialize_int16_t>
 800e5ba:	4030      	ands	r0, r6
 800e5bc:	b2c0      	uxtb	r0, r0
 800e5be:	bd70      	pop	{r4, r5, r6, pc}
 800e5c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5c4:	3104      	adds	r1, #4
 800e5c6:	f7ff be7b 	b.w	800e2c0 <uxr_serialize_CLIENT_Representation>
 800e5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5ce:	3104      	adds	r1, #4
 800e5d0:	f7ff bf32 	b.w	800e438 <uxr_serialize_AGENT_Representation>
 800e5d4:	2001      	movs	r0, #1
 800e5d6:	bd70      	pop	{r4, r5, r6, pc}
 800e5d8:	68a2      	ldr	r2, [r4, #8]
 800e5da:	f104 010c 	add.w	r1, r4, #12
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f005 fc56 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800e5e4:	4606      	mov	r6, r0
 800e5e6:	e7c7      	b.n	800e578 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e5e8:	68a1      	ldr	r1, [r4, #8]
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f005 fc7c 	bl	8013ee8 <ucdr_serialize_string>
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	e7c1      	b.n	800e578 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e5f4:	68a2      	ldr	r2, [r4, #8]
 800e5f6:	f104 010c 	add.w	r1, r4, #12
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f005 fc48 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800e600:	4606      	mov	r6, r0
 800e602:	e7d5      	b.n	800e5b0 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e604 <uxr_deserialize_DATAWRITER_Representation>:
 800e604:	b570      	push	{r4, r5, r6, lr}
 800e606:	4606      	mov	r6, r0
 800e608:	460d      	mov	r5, r1
 800e60a:	f7fc fecd 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800e60e:	4604      	mov	r4, r0
 800e610:	b130      	cbz	r0, 800e620 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e612:	782b      	ldrb	r3, [r5, #0]
 800e614:	2b02      	cmp	r3, #2
 800e616:	d00c      	beq.n	800e632 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e618:	2b03      	cmp	r3, #3
 800e61a:	d012      	beq.n	800e642 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d008      	beq.n	800e632 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e620:	2202      	movs	r2, #2
 800e622:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e626:	4630      	mov	r0, r6
 800e628:	f005 fba2 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800e62c:	4020      	ands	r0, r4
 800e62e:	b2c0      	uxtb	r0, r0
 800e630:	bd70      	pop	{r4, r5, r6, pc}
 800e632:	6869      	ldr	r1, [r5, #4]
 800e634:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e638:	4630      	mov	r0, r6
 800e63a:	f005 fc65 	bl	8013f08 <ucdr_deserialize_string>
 800e63e:	4604      	mov	r4, r0
 800e640:	e7ee      	b.n	800e620 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e642:	1d2b      	adds	r3, r5, #4
 800e644:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e648:	f105 0108 	add.w	r1, r5, #8
 800e64c:	4630      	mov	r0, r6
 800e64e:	f005 fc31 	bl	8013eb4 <ucdr_deserialize_sequence_uint8_t>
 800e652:	4604      	mov	r4, r0
 800e654:	e7e4      	b.n	800e620 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e656:	bf00      	nop

0800e658 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	460d      	mov	r5, r1
 800e65c:	7809      	ldrb	r1, [r1, #0]
 800e65e:	4606      	mov	r6, r0
 800e660:	f7fc fe5e 	bl	800b320 <ucdr_serialize_bool>
 800e664:	782b      	ldrb	r3, [r5, #0]
 800e666:	4604      	mov	r4, r0
 800e668:	b94b      	cbnz	r3, 800e67e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e66a:	7a29      	ldrb	r1, [r5, #8]
 800e66c:	4630      	mov	r0, r6
 800e66e:	f7fc fe57 	bl	800b320 <ucdr_serialize_bool>
 800e672:	7a2b      	ldrb	r3, [r5, #8]
 800e674:	4004      	ands	r4, r0
 800e676:	b2e4      	uxtb	r4, r4
 800e678:	b943      	cbnz	r3, 800e68c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e67a:	4620      	mov	r0, r4
 800e67c:	bd70      	pop	{r4, r5, r6, pc}
 800e67e:	6869      	ldr	r1, [r5, #4]
 800e680:	4630      	mov	r0, r6
 800e682:	f005 fc31 	bl	8013ee8 <ucdr_serialize_string>
 800e686:	4004      	ands	r4, r0
 800e688:	b2e4      	uxtb	r4, r4
 800e68a:	e7ee      	b.n	800e66a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e68c:	68e9      	ldr	r1, [r5, #12]
 800e68e:	4630      	mov	r0, r6
 800e690:	f005 fc2a 	bl	8013ee8 <ucdr_serialize_string>
 800e694:	4004      	ands	r4, r0
 800e696:	4620      	mov	r0, r4
 800e698:	bd70      	pop	{r4, r5, r6, pc}
 800e69a:	bf00      	nop

0800e69c <uxr_serialize_OBJK_Topic_Binary>:
 800e69c:	b570      	push	{r4, r5, r6, lr}
 800e69e:	460d      	mov	r5, r1
 800e6a0:	6809      	ldr	r1, [r1, #0]
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	f005 fc20 	bl	8013ee8 <ucdr_serialize_string>
 800e6a8:	7929      	ldrb	r1, [r5, #4]
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	f7fc fe37 	bl	800b320 <ucdr_serialize_bool>
 800e6b2:	792b      	ldrb	r3, [r5, #4]
 800e6b4:	4004      	ands	r4, r0
 800e6b6:	b2e4      	uxtb	r4, r4
 800e6b8:	b943      	cbnz	r3, 800e6cc <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e6ba:	7b29      	ldrb	r1, [r5, #12]
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f7fc fe2f 	bl	800b320 <ucdr_serialize_bool>
 800e6c2:	7b2b      	ldrb	r3, [r5, #12]
 800e6c4:	4004      	ands	r4, r0
 800e6c6:	b93b      	cbnz	r3, 800e6d8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}
 800e6cc:	68a9      	ldr	r1, [r5, #8]
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f005 fc0a 	bl	8013ee8 <ucdr_serialize_string>
 800e6d4:	4004      	ands	r4, r0
 800e6d6:	e7f0      	b.n	800e6ba <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e6d8:	6929      	ldr	r1, [r5, #16]
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f005 fc04 	bl	8013ee8 <ucdr_serialize_string>
 800e6e0:	4004      	ands	r4, r0
 800e6e2:	b2e4      	uxtb	r4, r4
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	bd70      	pop	{r4, r5, r6, pc}

0800e6e8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	460c      	mov	r4, r1
 800e6ee:	7809      	ldrb	r1, [r1, #0]
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	f7fc fe15 	bl	800b320 <ucdr_serialize_bool>
 800e6f6:	7823      	ldrb	r3, [r4, #0]
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	b96b      	cbnz	r3, 800e718 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e6fc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800e700:	4630      	mov	r0, r6
 800e702:	f7fc fe0d 	bl	800b320 <ucdr_serialize_bool>
 800e706:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e70a:	4005      	ands	r5, r0
 800e70c:	b2ed      	uxtb	r5, r5
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d169      	bne.n	800e7e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800e712:	4628      	mov	r0, r5
 800e714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e718:	6861      	ldr	r1, [r4, #4]
 800e71a:	4630      	mov	r0, r6
 800e71c:	f7fd f844 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800e720:	6863      	ldr	r3, [r4, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d06b      	beq.n	800e7fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800e726:	2800      	cmp	r0, #0
 800e728:	d067      	beq.n	800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e72a:	68a1      	ldr	r1, [r4, #8]
 800e72c:	4630      	mov	r0, r6
 800e72e:	f005 fbdb 	bl	8013ee8 <ucdr_serialize_string>
 800e732:	6863      	ldr	r3, [r4, #4]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d953      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e738:	2800      	cmp	r0, #0
 800e73a:	d05e      	beq.n	800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e73c:	68e1      	ldr	r1, [r4, #12]
 800e73e:	4630      	mov	r0, r6
 800e740:	f005 fbd2 	bl	8013ee8 <ucdr_serialize_string>
 800e744:	6863      	ldr	r3, [r4, #4]
 800e746:	2b02      	cmp	r3, #2
 800e748:	d94a      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d055      	beq.n	800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e74e:	6921      	ldr	r1, [r4, #16]
 800e750:	4630      	mov	r0, r6
 800e752:	f005 fbc9 	bl	8013ee8 <ucdr_serialize_string>
 800e756:	6863      	ldr	r3, [r4, #4]
 800e758:	2b03      	cmp	r3, #3
 800e75a:	d941      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d04c      	beq.n	800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e760:	6961      	ldr	r1, [r4, #20]
 800e762:	4630      	mov	r0, r6
 800e764:	f005 fbc0 	bl	8013ee8 <ucdr_serialize_string>
 800e768:	6863      	ldr	r3, [r4, #4]
 800e76a:	2b04      	cmp	r3, #4
 800e76c:	d938      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e76e:	2800      	cmp	r0, #0
 800e770:	d043      	beq.n	800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e772:	69a1      	ldr	r1, [r4, #24]
 800e774:	4630      	mov	r0, r6
 800e776:	f005 fbb7 	bl	8013ee8 <ucdr_serialize_string>
 800e77a:	6863      	ldr	r3, [r4, #4]
 800e77c:	2b05      	cmp	r3, #5
 800e77e:	d92f      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e780:	2800      	cmp	r0, #0
 800e782:	d03a      	beq.n	800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e784:	69e1      	ldr	r1, [r4, #28]
 800e786:	4630      	mov	r0, r6
 800e788:	f005 fbae 	bl	8013ee8 <ucdr_serialize_string>
 800e78c:	6863      	ldr	r3, [r4, #4]
 800e78e:	2b06      	cmp	r3, #6
 800e790:	d926      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e792:	b390      	cbz	r0, 800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e794:	6a21      	ldr	r1, [r4, #32]
 800e796:	4630      	mov	r0, r6
 800e798:	f005 fba6 	bl	8013ee8 <ucdr_serialize_string>
 800e79c:	6863      	ldr	r3, [r4, #4]
 800e79e:	2b07      	cmp	r3, #7
 800e7a0:	d91e      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e7a2:	b350      	cbz	r0, 800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e7a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f005 fb9e 	bl	8013ee8 <ucdr_serialize_string>
 800e7ac:	6863      	ldr	r3, [r4, #4]
 800e7ae:	2b08      	cmp	r3, #8
 800e7b0:	d916      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e7b2:	b310      	cbz	r0, 800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e7b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f005 fb96 	bl	8013ee8 <ucdr_serialize_string>
 800e7bc:	6863      	ldr	r3, [r4, #4]
 800e7be:	2b09      	cmp	r3, #9
 800e7c0:	d90e      	bls.n	800e7e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e7c2:	b1d0      	cbz	r0, 800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e7c4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800e7c8:	2709      	movs	r7, #9
 800e7ca:	e000      	b.n	800e7ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e7cc:	b1a8      	cbz	r0, 800e7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e7ce:	f858 1b04 	ldr.w	r1, [r8], #4
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f005 fb88 	bl	8013ee8 <ucdr_serialize_string>
 800e7d8:	6862      	ldr	r2, [r4, #4]
 800e7da:	3701      	adds	r7, #1
 800e7dc:	4297      	cmp	r7, r2
 800e7de:	d3f5      	bcc.n	800e7cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e7e0:	4005      	ands	r5, r0
 800e7e2:	b2ed      	uxtb	r5, r5
 800e7e4:	e78a      	b.n	800e6fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e7e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e7e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f005 fb4f 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800e7f2:	4005      	ands	r5, r0
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7fa:	2500      	movs	r5, #0
 800e7fc:	e77e      	b.n	800e6fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e7fe:	4028      	ands	r0, r5
 800e800:	b2c5      	uxtb	r5, r0
 800e802:	e77b      	b.n	800e6fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800e804 <uxr_serialize_OBJK_Publisher_Binary>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	460d      	mov	r5, r1
 800e808:	7809      	ldrb	r1, [r1, #0]
 800e80a:	4606      	mov	r6, r0
 800e80c:	f7fc fd88 	bl	800b320 <ucdr_serialize_bool>
 800e810:	782b      	ldrb	r3, [r5, #0]
 800e812:	4604      	mov	r4, r0
 800e814:	b94b      	cbnz	r3, 800e82a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e816:	7a29      	ldrb	r1, [r5, #8]
 800e818:	4630      	mov	r0, r6
 800e81a:	f7fc fd81 	bl	800b320 <ucdr_serialize_bool>
 800e81e:	7a2b      	ldrb	r3, [r5, #8]
 800e820:	4004      	ands	r4, r0
 800e822:	b2e4      	uxtb	r4, r4
 800e824:	b943      	cbnz	r3, 800e838 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e826:	4620      	mov	r0, r4
 800e828:	bd70      	pop	{r4, r5, r6, pc}
 800e82a:	6869      	ldr	r1, [r5, #4]
 800e82c:	4630      	mov	r0, r6
 800e82e:	f005 fb5b 	bl	8013ee8 <ucdr_serialize_string>
 800e832:	4004      	ands	r4, r0
 800e834:	b2e4      	uxtb	r4, r4
 800e836:	e7ee      	b.n	800e816 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e838:	f105 010c 	add.w	r1, r5, #12
 800e83c:	4630      	mov	r0, r6
 800e83e:	f7ff ff53 	bl	800e6e8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e842:	4004      	ands	r4, r0
 800e844:	4620      	mov	r0, r4
 800e846:	bd70      	pop	{r4, r5, r6, pc}

0800e848 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e84c:	460c      	mov	r4, r1
 800e84e:	7809      	ldrb	r1, [r1, #0]
 800e850:	4606      	mov	r6, r0
 800e852:	f7fc fd65 	bl	800b320 <ucdr_serialize_bool>
 800e856:	7823      	ldrb	r3, [r4, #0]
 800e858:	4605      	mov	r5, r0
 800e85a:	b96b      	cbnz	r3, 800e878 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e85c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800e860:	4630      	mov	r0, r6
 800e862:	f7fc fd5d 	bl	800b320 <ucdr_serialize_bool>
 800e866:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e86a:	4005      	ands	r5, r0
 800e86c:	b2ed      	uxtb	r5, r5
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d169      	bne.n	800e946 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800e872:	4628      	mov	r0, r5
 800e874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e878:	6861      	ldr	r1, [r4, #4]
 800e87a:	4630      	mov	r0, r6
 800e87c:	f7fc ff94 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800e880:	6863      	ldr	r3, [r4, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d06b      	beq.n	800e95e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800e886:	2800      	cmp	r0, #0
 800e888:	d067      	beq.n	800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e88a:	68a1      	ldr	r1, [r4, #8]
 800e88c:	4630      	mov	r0, r6
 800e88e:	f005 fb2b 	bl	8013ee8 <ucdr_serialize_string>
 800e892:	6863      	ldr	r3, [r4, #4]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d953      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d05e      	beq.n	800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e89c:	68e1      	ldr	r1, [r4, #12]
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f005 fb22 	bl	8013ee8 <ucdr_serialize_string>
 800e8a4:	6863      	ldr	r3, [r4, #4]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d94a      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d055      	beq.n	800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e8ae:	6921      	ldr	r1, [r4, #16]
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	f005 fb19 	bl	8013ee8 <ucdr_serialize_string>
 800e8b6:	6863      	ldr	r3, [r4, #4]
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d941      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d04c      	beq.n	800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e8c0:	6961      	ldr	r1, [r4, #20]
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f005 fb10 	bl	8013ee8 <ucdr_serialize_string>
 800e8c8:	6863      	ldr	r3, [r4, #4]
 800e8ca:	2b04      	cmp	r3, #4
 800e8cc:	d938      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d043      	beq.n	800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e8d2:	69a1      	ldr	r1, [r4, #24]
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f005 fb07 	bl	8013ee8 <ucdr_serialize_string>
 800e8da:	6863      	ldr	r3, [r4, #4]
 800e8dc:	2b05      	cmp	r3, #5
 800e8de:	d92f      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d03a      	beq.n	800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e8e4:	69e1      	ldr	r1, [r4, #28]
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f005 fafe 	bl	8013ee8 <ucdr_serialize_string>
 800e8ec:	6863      	ldr	r3, [r4, #4]
 800e8ee:	2b06      	cmp	r3, #6
 800e8f0:	d926      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e8f2:	b390      	cbz	r0, 800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e8f4:	6a21      	ldr	r1, [r4, #32]
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f005 faf6 	bl	8013ee8 <ucdr_serialize_string>
 800e8fc:	6863      	ldr	r3, [r4, #4]
 800e8fe:	2b07      	cmp	r3, #7
 800e900:	d91e      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e902:	b350      	cbz	r0, 800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e904:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e906:	4630      	mov	r0, r6
 800e908:	f005 faee 	bl	8013ee8 <ucdr_serialize_string>
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	2b08      	cmp	r3, #8
 800e910:	d916      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e912:	b310      	cbz	r0, 800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e914:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e916:	4630      	mov	r0, r6
 800e918:	f005 fae6 	bl	8013ee8 <ucdr_serialize_string>
 800e91c:	6863      	ldr	r3, [r4, #4]
 800e91e:	2b09      	cmp	r3, #9
 800e920:	d90e      	bls.n	800e940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e922:	b1d0      	cbz	r0, 800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e924:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800e928:	2709      	movs	r7, #9
 800e92a:	e000      	b.n	800e92e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800e92c:	b1a8      	cbz	r0, 800e95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e92e:	f858 1b04 	ldr.w	r1, [r8], #4
 800e932:	4630      	mov	r0, r6
 800e934:	f005 fad8 	bl	8013ee8 <ucdr_serialize_string>
 800e938:	6862      	ldr	r2, [r4, #4]
 800e93a:	3701      	adds	r7, #1
 800e93c:	4297      	cmp	r7, r2
 800e93e:	d3f5      	bcc.n	800e92c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800e940:	4005      	ands	r5, r0
 800e942:	b2ed      	uxtb	r5, r5
 800e944:	e78a      	b.n	800e85c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e946:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e948:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800e94c:	4630      	mov	r0, r6
 800e94e:	f005 fa9f 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800e952:	4005      	ands	r5, r0
 800e954:	4628      	mov	r0, r5
 800e956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95a:	2500      	movs	r5, #0
 800e95c:	e77e      	b.n	800e85c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e95e:	4028      	ands	r0, r5
 800e960:	b2c5      	uxtb	r5, r0
 800e962:	e77b      	b.n	800e85c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800e964 <uxr_serialize_OBJK_Subscriber_Binary>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	460d      	mov	r5, r1
 800e968:	7809      	ldrb	r1, [r1, #0]
 800e96a:	4606      	mov	r6, r0
 800e96c:	f7fc fcd8 	bl	800b320 <ucdr_serialize_bool>
 800e970:	782b      	ldrb	r3, [r5, #0]
 800e972:	4604      	mov	r4, r0
 800e974:	b94b      	cbnz	r3, 800e98a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800e976:	7a29      	ldrb	r1, [r5, #8]
 800e978:	4630      	mov	r0, r6
 800e97a:	f7fc fcd1 	bl	800b320 <ucdr_serialize_bool>
 800e97e:	7a2b      	ldrb	r3, [r5, #8]
 800e980:	4004      	ands	r4, r0
 800e982:	b2e4      	uxtb	r4, r4
 800e984:	b943      	cbnz	r3, 800e998 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800e986:	4620      	mov	r0, r4
 800e988:	bd70      	pop	{r4, r5, r6, pc}
 800e98a:	6869      	ldr	r1, [r5, #4]
 800e98c:	4630      	mov	r0, r6
 800e98e:	f005 faab 	bl	8013ee8 <ucdr_serialize_string>
 800e992:	4004      	ands	r4, r0
 800e994:	b2e4      	uxtb	r4, r4
 800e996:	e7ee      	b.n	800e976 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800e998:	f105 010c 	add.w	r1, r5, #12
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7ff ff53 	bl	800e848 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800e9a2:	4004      	ands	r4, r0
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	bd70      	pop	{r4, r5, r6, pc}

0800e9a8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800e9a8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800e9ac:	4688      	mov	r8, r1
 800e9ae:	8809      	ldrh	r1, [r1, #0]
 800e9b0:	4681      	mov	r9, r0
 800e9b2:	f7fc fd0f 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800e9b6:	f898 1002 	ldrb.w	r1, [r8, #2]
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	4648      	mov	r0, r9
 800e9be:	f7fc fcaf 	bl	800b320 <ucdr_serialize_bool>
 800e9c2:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e9c6:	4006      	ands	r6, r0
 800e9c8:	b2f5      	uxtb	r5, r6
 800e9ca:	b9eb      	cbnz	r3, 800ea08 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800e9cc:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e9d0:	4648      	mov	r0, r9
 800e9d2:	f7fc fca5 	bl	800b320 <ucdr_serialize_bool>
 800e9d6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e9da:	4005      	ands	r5, r0
 800e9dc:	bb7b      	cbnz	r3, 800ea3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800e9de:	f898 100c 	ldrb.w	r1, [r8, #12]
 800e9e2:	4648      	mov	r0, r9
 800e9e4:	f7fc fc9c 	bl	800b320 <ucdr_serialize_bool>
 800e9e8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800e9ec:	4005      	ands	r5, r0
 800e9ee:	b9f3      	cbnz	r3, 800ea2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800e9f0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800e9f4:	4648      	mov	r0, r9
 800e9f6:	f7fc fc93 	bl	800b320 <ucdr_serialize_bool>
 800e9fa:	f898 3014 	ldrb.w	r3, [r8, #20]
 800e9fe:	4005      	ands	r5, r0
 800ea00:	b94b      	cbnz	r3, 800ea16 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800ea02:	4628      	mov	r0, r5
 800ea04:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ea08:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800ea0c:	4648      	mov	r0, r9
 800ea0e:	f7fc fce1 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800ea12:	4005      	ands	r5, r0
 800ea14:	e7da      	b.n	800e9cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800ea16:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ea1a:	f108 011c 	add.w	r1, r8, #28
 800ea1e:	4648      	mov	r0, r9
 800ea20:	f005 fa36 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800ea24:	4028      	ands	r0, r5
 800ea26:	b2c5      	uxtb	r5, r0
 800ea28:	4628      	mov	r0, r5
 800ea2a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ea2e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ea32:	4648      	mov	r0, r9
 800ea34:	f7fc feb8 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800ea38:	4028      	ands	r0, r5
 800ea3a:	b2c5      	uxtb	r5, r0
 800ea3c:	e7d8      	b.n	800e9f0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800ea3e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ea42:	4648      	mov	r0, r9
 800ea44:	f7fc feb0 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800ea48:	4028      	ands	r0, r5
 800ea4a:	b2c5      	uxtb	r5, r0
 800ea4c:	e7c7      	b.n	800e9de <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800ea4e:	bf00      	nop

0800ea50 <uxr_serialize_OBJK_DataReader_Binary>:
 800ea50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea52:	2202      	movs	r2, #2
 800ea54:	460c      	mov	r4, r1
 800ea56:	4606      	mov	r6, r0
 800ea58:	f005 f926 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800ea5c:	78a1      	ldrb	r1, [r4, #2]
 800ea5e:	4605      	mov	r5, r0
 800ea60:	4630      	mov	r0, r6
 800ea62:	f7fc fc5d 	bl	800b320 <ucdr_serialize_bool>
 800ea66:	78a3      	ldrb	r3, [r4, #2]
 800ea68:	4005      	ands	r5, r0
 800ea6a:	b2ed      	uxtb	r5, r5
 800ea6c:	b90b      	cbnz	r3, 800ea72 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800ea6e:	4628      	mov	r0, r5
 800ea70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea72:	f104 0108 	add.w	r1, r4, #8
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7ff ff96 	bl	800e9a8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ea7c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ea80:	4607      	mov	r7, r0
 800ea82:	4630      	mov	r0, r6
 800ea84:	f7fc fc4c 	bl	800b320 <ucdr_serialize_bool>
 800ea88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ea8c:	4038      	ands	r0, r7
 800ea8e:	b2c7      	uxtb	r7, r0
 800ea90:	b95b      	cbnz	r3, 800eaaa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800ea92:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800ea96:	4630      	mov	r0, r6
 800ea98:	f7fc fc42 	bl	800b320 <ucdr_serialize_bool>
 800ea9c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800eaa0:	4007      	ands	r7, r0
 800eaa2:	b94b      	cbnz	r3, 800eab8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800eaa4:	403d      	ands	r5, r7
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaaa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800eaae:	4630      	mov	r0, r6
 800eab0:	f7fd f8d0 	bl	800bc54 <ucdr_serialize_uint64_t>
 800eab4:	4007      	ands	r7, r0
 800eab6:	e7ec      	b.n	800ea92 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800eab8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eaba:	4630      	mov	r0, r6
 800eabc:	f005 fa14 	bl	8013ee8 <ucdr_serialize_string>
 800eac0:	4007      	ands	r7, r0
 800eac2:	b2ff      	uxtb	r7, r7
 800eac4:	e7ee      	b.n	800eaa4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800eac6:	bf00      	nop

0800eac8 <uxr_serialize_OBJK_DataWriter_Binary>:
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	2202      	movs	r2, #2
 800eacc:	460d      	mov	r5, r1
 800eace:	4606      	mov	r6, r0
 800ead0:	f005 f8ea 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800ead4:	78a9      	ldrb	r1, [r5, #2]
 800ead6:	4604      	mov	r4, r0
 800ead8:	4630      	mov	r0, r6
 800eada:	f7fc fc21 	bl	800b320 <ucdr_serialize_bool>
 800eade:	78ab      	ldrb	r3, [r5, #2]
 800eae0:	4004      	ands	r4, r0
 800eae2:	b2e4      	uxtb	r4, r4
 800eae4:	b90b      	cbnz	r3, 800eaea <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800eae6:	4620      	mov	r0, r4
 800eae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaea:	f105 0108 	add.w	r1, r5, #8
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f7ff ff5a 	bl	800e9a8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800eaf4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800eaf8:	4607      	mov	r7, r0
 800eafa:	4630      	mov	r0, r6
 800eafc:	f7fc fc10 	bl	800b320 <ucdr_serialize_bool>
 800eb00:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800eb04:	4038      	ands	r0, r7
 800eb06:	b2c7      	uxtb	r7, r0
 800eb08:	b913      	cbnz	r3, 800eb10 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800eb0a:	403c      	ands	r4, r7
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb10:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800eb14:	4630      	mov	r0, r6
 800eb16:	f7fd f89d 	bl	800bc54 <ucdr_serialize_uint64_t>
 800eb1a:	4007      	ands	r7, r0
 800eb1c:	e7f5      	b.n	800eb0a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800eb1e:	bf00      	nop

0800eb20 <uxr_deserialize_ObjectVariant>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	4605      	mov	r5, r0
 800eb24:	460e      	mov	r6, r1
 800eb26:	f7fc fc3f 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800eb2a:	b168      	cbz	r0, 800eb48 <uxr_deserialize_ObjectVariant+0x28>
 800eb2c:	7833      	ldrb	r3, [r6, #0]
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	4604      	mov	r4, r0
 800eb32:	2b0d      	cmp	r3, #13
 800eb34:	d809      	bhi.n	800eb4a <uxr_deserialize_ObjectVariant+0x2a>
 800eb36:	e8df f003 	tbb	[pc, r3]
 800eb3a:	0a41      	.short	0x0a41
 800eb3c:	0a0a2323 	.word	0x0a0a2323
 800eb40:	10080a0a 	.word	0x10080a0a
 800eb44:	565c1010 	.word	0x565c1010
 800eb48:	2400      	movs	r4, #0
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	bd70      	pop	{r4, r5, r6, pc}
 800eb4e:	1d31      	adds	r1, r6, #4
 800eb50:	4628      	mov	r0, r5
 800eb52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb56:	f7ff bd55 	b.w	800e604 <uxr_deserialize_DATAWRITER_Representation>
 800eb5a:	1d31      	adds	r1, r6, #4
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f7fc fc23 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d0f0      	beq.n	800eb48 <uxr_deserialize_ObjectVariant+0x28>
 800eb66:	7933      	ldrb	r3, [r6, #4]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d001      	beq.n	800eb70 <uxr_deserialize_ObjectVariant+0x50>
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d1ec      	bne.n	800eb4a <uxr_deserialize_ObjectVariant+0x2a>
 800eb70:	68b1      	ldr	r1, [r6, #8]
 800eb72:	4628      	mov	r0, r5
 800eb74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb7c:	f005 b9c4 	b.w	8013f08 <ucdr_deserialize_string>
 800eb80:	1d31      	adds	r1, r6, #4
 800eb82:	4628      	mov	r0, r5
 800eb84:	f7fc fc10 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800eb88:	4604      	mov	r4, r0
 800eb8a:	b170      	cbz	r0, 800ebaa <uxr_deserialize_ObjectVariant+0x8a>
 800eb8c:	7933      	ldrb	r3, [r6, #4]
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d04c      	beq.n	800ec2c <uxr_deserialize_ObjectVariant+0x10c>
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d109      	bne.n	800ebaa <uxr_deserialize_ObjectVariant+0x8a>
 800eb96:	f106 0308 	add.w	r3, r6, #8
 800eb9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb9e:	f106 010c 	add.w	r1, r6, #12
 800eba2:	4628      	mov	r0, r5
 800eba4:	f005 f986 	bl	8013eb4 <ucdr_deserialize_sequence_uint8_t>
 800eba8:	4604      	mov	r4, r0
 800ebaa:	2202      	movs	r2, #2
 800ebac:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	f005 f8dd 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800ebb6:	4020      	ands	r0, r4
 800ebb8:	b2c4      	uxtb	r4, r0
 800ebba:	e7c6      	b.n	800eb4a <uxr_deserialize_ObjectVariant+0x2a>
 800ebbc:	1d31      	adds	r1, r6, #4
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f7fc fbf2 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	b130      	cbz	r0, 800ebd6 <uxr_deserialize_ObjectVariant+0xb6>
 800ebc8:	7933      	ldrb	r3, [r6, #4]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	d036      	beq.n	800ec3c <uxr_deserialize_ObjectVariant+0x11c>
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d03c      	beq.n	800ec4c <uxr_deserialize_ObjectVariant+0x12c>
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d032      	beq.n	800ec3c <uxr_deserialize_ObjectVariant+0x11c>
 800ebd6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f7fd f98a 	bl	800bef4 <ucdr_deserialize_int16_t>
 800ebe0:	4020      	ands	r0, r4
 800ebe2:	b2c4      	uxtb	r4, r0
 800ebe4:	e7b1      	b.n	800eb4a <uxr_deserialize_ObjectVariant+0x2a>
 800ebe6:	1d31      	adds	r1, r6, #4
 800ebe8:	4628      	mov	r0, r5
 800ebea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebee:	f7ff bbbf 	b.w	800e370 <uxr_deserialize_CLIENT_Representation>
 800ebf2:	2204      	movs	r2, #4
 800ebf4:	18b1      	adds	r1, r6, r2
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f005 f8ba 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	f106 0108 	add.w	r1, r6, #8
 800ec02:	4604      	mov	r4, r0
 800ec04:	4628      	mov	r0, r5
 800ec06:	f005 f8b3 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	4004      	ands	r4, r0
 800ec0e:	f106 010a 	add.w	r1, r6, #10
 800ec12:	4628      	mov	r0, r5
 800ec14:	f005 f8ac 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800ec18:	b2e4      	uxtb	r4, r4
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f106 010c 	add.w	r1, r6, #12
 800ec20:	4628      	mov	r0, r5
 800ec22:	401c      	ands	r4, r3
 800ec24:	f7fc fb92 	bl	800b34c <ucdr_deserialize_bool>
 800ec28:	4004      	ands	r4, r0
 800ec2a:	e78e      	b.n	800eb4a <uxr_deserialize_ObjectVariant+0x2a>
 800ec2c:	68b1      	ldr	r1, [r6, #8]
 800ec2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec32:	4628      	mov	r0, r5
 800ec34:	f005 f968 	bl	8013f08 <ucdr_deserialize_string>
 800ec38:	4604      	mov	r4, r0
 800ec3a:	e7b6      	b.n	800ebaa <uxr_deserialize_ObjectVariant+0x8a>
 800ec3c:	68b1      	ldr	r1, [r6, #8]
 800ec3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec42:	4628      	mov	r0, r5
 800ec44:	f005 f960 	bl	8013f08 <ucdr_deserialize_string>
 800ec48:	4604      	mov	r4, r0
 800ec4a:	e7c4      	b.n	800ebd6 <uxr_deserialize_ObjectVariant+0xb6>
 800ec4c:	f106 0308 	add.w	r3, r6, #8
 800ec50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec54:	f106 010c 	add.w	r1, r6, #12
 800ec58:	4628      	mov	r0, r5
 800ec5a:	f005 f92b 	bl	8013eb4 <ucdr_deserialize_sequence_uint8_t>
 800ec5e:	4604      	mov	r4, r0
 800ec60:	e7b9      	b.n	800ebd6 <uxr_deserialize_ObjectVariant+0xb6>
 800ec62:	bf00      	nop

0800ec64 <uxr_deserialize_BaseObjectRequest>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	2202      	movs	r2, #2
 800ec68:	4605      	mov	r5, r0
 800ec6a:	460e      	mov	r6, r1
 800ec6c:	f005 f880 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800ec70:	2202      	movs	r2, #2
 800ec72:	4604      	mov	r4, r0
 800ec74:	18b1      	adds	r1, r6, r2
 800ec76:	4628      	mov	r0, r5
 800ec78:	f005 f87a 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800ec7c:	4020      	ands	r0, r4
 800ec7e:	b2c0      	uxtb	r0, r0
 800ec80:	bd70      	pop	{r4, r5, r6, pc}
 800ec82:	bf00      	nop

0800ec84 <uxr_serialize_ActivityInfoVariant>:
 800ec84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec88:	460d      	mov	r5, r1
 800ec8a:	7809      	ldrb	r1, [r1, #0]
 800ec8c:	4607      	mov	r7, r0
 800ec8e:	f7fc fb75 	bl	800b37c <ucdr_serialize_uint8_t>
 800ec92:	4681      	mov	r9, r0
 800ec94:	b138      	cbz	r0, 800eca6 <uxr_serialize_ActivityInfoVariant+0x22>
 800ec96:	782b      	ldrb	r3, [r5, #0]
 800ec98:	2b06      	cmp	r3, #6
 800ec9a:	f000 8082 	beq.w	800eda2 <uxr_serialize_ActivityInfoVariant+0x11e>
 800ec9e:	2b0d      	cmp	r3, #13
 800eca0:	d016      	beq.n	800ecd0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800eca2:	2b05      	cmp	r3, #5
 800eca4:	d002      	beq.n	800ecac <uxr_serialize_ActivityInfoVariant+0x28>
 800eca6:	4648      	mov	r0, r9
 800eca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecac:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ecb0:	4638      	mov	r0, r7
 800ecb2:	f7fd f89f 	bl	800bdf4 <ucdr_serialize_int16_t>
 800ecb6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ecba:	4681      	mov	r9, r0
 800ecbc:	4638      	mov	r0, r7
 800ecbe:	f7fc ffc9 	bl	800bc54 <ucdr_serialize_uint64_t>
 800ecc2:	ea09 0000 	and.w	r0, r9, r0
 800ecc6:	fa5f f980 	uxtb.w	r9, r0
 800ecca:	4648      	mov	r0, r9
 800eccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f7fd f88d 	bl	800bdf4 <ucdr_serialize_int16_t>
 800ecda:	68e9      	ldr	r1, [r5, #12]
 800ecdc:	4681      	mov	r9, r0
 800ecde:	4638      	mov	r0, r7
 800ece0:	f7fc fd62 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800ece4:	68eb      	ldr	r3, [r5, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d0eb      	beq.n	800ecc2 <uxr_serialize_ActivityInfoVariant+0x3e>
 800ecea:	b320      	cbz	r0, 800ed36 <uxr_serialize_ActivityInfoVariant+0xb2>
 800ecec:	f105 080c 	add.w	r8, r5, #12
 800ecf0:	2600      	movs	r6, #0
 800ecf2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ecf6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ecfa:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ecfe:	4638      	mov	r0, r7
 800ed00:	f7fc fb3c 	bl	800b37c <ucdr_serialize_uint8_t>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d053      	beq.n	800edb0 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ed08:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ed0c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ed10:	0074      	lsls	r4, r6, #1
 800ed12:	00c9      	lsls	r1, r1, #3
 800ed14:	2b03      	cmp	r3, #3
 800ed16:	d854      	bhi.n	800edc2 <uxr_serialize_ActivityInfoVariant+0x13e>
 800ed18:	e8df f003 	tbb	[pc, r3]
 800ed1c:	02102132 	.word	0x02102132
 800ed20:	4441      	add	r1, r8
 800ed22:	4638      	mov	r0, r7
 800ed24:	6889      	ldr	r1, [r1, #8]
 800ed26:	f005 f8df 	bl	8013ee8 <ucdr_serialize_string>
 800ed2a:	68ea      	ldr	r2, [r5, #12]
 800ed2c:	3601      	adds	r6, #1
 800ed2e:	4296      	cmp	r6, r2
 800ed30:	d242      	bcs.n	800edb8 <uxr_serialize_ActivityInfoVariant+0x134>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d1dd      	bne.n	800ecf2 <uxr_serialize_ActivityInfoVariant+0x6e>
 800ed36:	f04f 0900 	mov.w	r9, #0
 800ed3a:	e7b4      	b.n	800eca6 <uxr_serialize_ActivityInfoVariant+0x22>
 800ed3c:	3108      	adds	r1, #8
 800ed3e:	4441      	add	r1, r8
 800ed40:	2210      	movs	r2, #16
 800ed42:	4638      	mov	r0, r7
 800ed44:	f004 ffb0 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800ed48:	4434      	add	r4, r6
 800ed4a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ed4e:	4604      	mov	r4, r0
 800ed50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ed52:	4638      	mov	r0, r7
 800ed54:	f7fc fd28 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800ed58:	4020      	ands	r0, r4
 800ed5a:	b2c0      	uxtb	r0, r0
 800ed5c:	e7e5      	b.n	800ed2a <uxr_serialize_ActivityInfoVariant+0xa6>
 800ed5e:	3108      	adds	r1, #8
 800ed60:	4441      	add	r1, r8
 800ed62:	2204      	movs	r2, #4
 800ed64:	4638      	mov	r0, r7
 800ed66:	f004 ff9f 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800ed6a:	4434      	add	r4, r6
 800ed6c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ed70:	4604      	mov	r4, r0
 800ed72:	8b19      	ldrh	r1, [r3, #24]
 800ed74:	4638      	mov	r0, r7
 800ed76:	f7fc fb2d 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800ed7a:	4020      	ands	r0, r4
 800ed7c:	b2c0      	uxtb	r0, r0
 800ed7e:	e7d4      	b.n	800ed2a <uxr_serialize_ActivityInfoVariant+0xa6>
 800ed80:	3108      	adds	r1, #8
 800ed82:	4441      	add	r1, r8
 800ed84:	2202      	movs	r2, #2
 800ed86:	4638      	mov	r0, r7
 800ed88:	f004 ff8e 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800ed8c:	4434      	add	r4, r6
 800ed8e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ed92:	4604      	mov	r4, r0
 800ed94:	7d99      	ldrb	r1, [r3, #22]
 800ed96:	4638      	mov	r0, r7
 800ed98:	f7fc faf0 	bl	800b37c <ucdr_serialize_uint8_t>
 800ed9c:	4020      	ands	r0, r4
 800ed9e:	b2c0      	uxtb	r0, r0
 800eda0:	e7c3      	b.n	800ed2a <uxr_serialize_ActivityInfoVariant+0xa6>
 800eda2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800eda6:	4638      	mov	r0, r7
 800eda8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edac:	f7fd b822 	b.w	800bdf4 <ucdr_serialize_int16_t>
 800edb0:	68ea      	ldr	r2, [r5, #12]
 800edb2:	3601      	adds	r6, #1
 800edb4:	42b2      	cmp	r2, r6
 800edb6:	d8be      	bhi.n	800ed36 <uxr_serialize_ActivityInfoVariant+0xb2>
 800edb8:	ea09 0900 	and.w	r9, r9, r0
 800edbc:	fa5f f989 	uxtb.w	r9, r9
 800edc0:	e771      	b.n	800eca6 <uxr_serialize_ActivityInfoVariant+0x22>
 800edc2:	68eb      	ldr	r3, [r5, #12]
 800edc4:	3601      	adds	r6, #1
 800edc6:	429e      	cmp	r6, r3
 800edc8:	f10a 0a18 	add.w	sl, sl, #24
 800edcc:	d395      	bcc.n	800ecfa <uxr_serialize_ActivityInfoVariant+0x76>
 800edce:	e76a      	b.n	800eca6 <uxr_serialize_ActivityInfoVariant+0x22>

0800edd0 <uxr_deserialize_BaseObjectReply>:
 800edd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd4:	2202      	movs	r2, #2
 800edd6:	4606      	mov	r6, r0
 800edd8:	460f      	mov	r7, r1
 800edda:	f004 ffc9 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800edde:	2202      	movs	r2, #2
 800ede0:	18b9      	adds	r1, r7, r2
 800ede2:	4605      	mov	r5, r0
 800ede4:	4630      	mov	r0, r6
 800ede6:	f004 ffc3 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800edea:	1d39      	adds	r1, r7, #4
 800edec:	4680      	mov	r8, r0
 800edee:	4630      	mov	r0, r6
 800edf0:	f7fc fada 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800edf4:	1d79      	adds	r1, r7, #5
 800edf6:	4604      	mov	r4, r0
 800edf8:	4630      	mov	r0, r6
 800edfa:	f7fc fad5 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800edfe:	ea05 0508 	and.w	r5, r5, r8
 800ee02:	402c      	ands	r4, r5
 800ee04:	4020      	ands	r0, r4
 800ee06:	b2c0      	uxtb	r0, r0
 800ee08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee0c <uxr_serialize_ReadSpecification>:
 800ee0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee10:	460e      	mov	r6, r1
 800ee12:	7809      	ldrb	r1, [r1, #0]
 800ee14:	4607      	mov	r7, r0
 800ee16:	f7fc fab1 	bl	800b37c <ucdr_serialize_uint8_t>
 800ee1a:	7871      	ldrb	r1, [r6, #1]
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	4638      	mov	r0, r7
 800ee20:	f7fc faac 	bl	800b37c <ucdr_serialize_uint8_t>
 800ee24:	78b1      	ldrb	r1, [r6, #2]
 800ee26:	4004      	ands	r4, r0
 800ee28:	4638      	mov	r0, r7
 800ee2a:	f7fc fa79 	bl	800b320 <ucdr_serialize_bool>
 800ee2e:	78b3      	ldrb	r3, [r6, #2]
 800ee30:	b2e4      	uxtb	r4, r4
 800ee32:	4004      	ands	r4, r0
 800ee34:	b94b      	cbnz	r3, 800ee4a <uxr_serialize_ReadSpecification+0x3e>
 800ee36:	7a31      	ldrb	r1, [r6, #8]
 800ee38:	4638      	mov	r0, r7
 800ee3a:	f7fc fa71 	bl	800b320 <ucdr_serialize_bool>
 800ee3e:	7a33      	ldrb	r3, [r6, #8]
 800ee40:	4004      	ands	r4, r0
 800ee42:	b943      	cbnz	r3, 800ee56 <uxr_serialize_ReadSpecification+0x4a>
 800ee44:	4620      	mov	r0, r4
 800ee46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4a:	6871      	ldr	r1, [r6, #4]
 800ee4c:	4638      	mov	r0, r7
 800ee4e:	f005 f84b 	bl	8013ee8 <ucdr_serialize_string>
 800ee52:	4004      	ands	r4, r0
 800ee54:	e7ef      	b.n	800ee36 <uxr_serialize_ReadSpecification+0x2a>
 800ee56:	8971      	ldrh	r1, [r6, #10]
 800ee58:	4638      	mov	r0, r7
 800ee5a:	f7fc fabb 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800ee5e:	89b1      	ldrh	r1, [r6, #12]
 800ee60:	4605      	mov	r5, r0
 800ee62:	4638      	mov	r0, r7
 800ee64:	f7fc fab6 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800ee68:	89f1      	ldrh	r1, [r6, #14]
 800ee6a:	4005      	ands	r5, r0
 800ee6c:	4638      	mov	r0, r7
 800ee6e:	f7fc fab1 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800ee72:	8a31      	ldrh	r1, [r6, #16]
 800ee74:	4680      	mov	r8, r0
 800ee76:	4638      	mov	r0, r7
 800ee78:	f7fc faac 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800ee7c:	b2ed      	uxtb	r5, r5
 800ee7e:	4025      	ands	r5, r4
 800ee80:	ea08 0505 	and.w	r5, r8, r5
 800ee84:	ea00 0405 	and.w	r4, r0, r5
 800ee88:	4620      	mov	r0, r4
 800ee8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee8e:	bf00      	nop

0800ee90 <uxr_serialize_CREATE_CLIENT_Payload>:
 800ee90:	f7ff ba16 	b.w	800e2c0 <uxr_serialize_CLIENT_Representation>

0800ee94 <uxr_serialize_CREATE_Payload>:
 800ee94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee96:	2202      	movs	r2, #2
 800ee98:	4607      	mov	r7, r0
 800ee9a:	460e      	mov	r6, r1
 800ee9c:	f004 ff04 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800eea0:	2202      	movs	r2, #2
 800eea2:	18b1      	adds	r1, r6, r2
 800eea4:	4605      	mov	r5, r0
 800eea6:	4638      	mov	r0, r7
 800eea8:	f004 fefe 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800eeac:	7931      	ldrb	r1, [r6, #4]
 800eeae:	4604      	mov	r4, r0
 800eeb0:	4638      	mov	r0, r7
 800eeb2:	f7fc fa63 	bl	800b37c <ucdr_serialize_uint8_t>
 800eeb6:	b170      	cbz	r0, 800eed6 <uxr_serialize_CREATE_Payload+0x42>
 800eeb8:	7933      	ldrb	r3, [r6, #4]
 800eeba:	402c      	ands	r4, r5
 800eebc:	3b01      	subs	r3, #1
 800eebe:	b2e4      	uxtb	r4, r4
 800eec0:	2b0d      	cmp	r3, #13
 800eec2:	d809      	bhi.n	800eed8 <uxr_serialize_CREATE_Payload+0x44>
 800eec4:	e8df f003 	tbb	[pc, r3]
 800eec8:	23230a4c 	.word	0x23230a4c
 800eecc:	0a0a0a0a 	.word	0x0a0a0a0a
 800eed0:	12121208 	.word	0x12121208
 800eed4:	3e45      	.short	0x3e45
 800eed6:	2400      	movs	r4, #0
 800eed8:	4620      	mov	r0, r4
 800eeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eedc:	f106 0108 	add.w	r1, r6, #8
 800eee0:	4638      	mov	r0, r7
 800eee2:	f7ff faf3 	bl	800e4cc <uxr_serialize_DATAWRITER_Representation>
 800eee6:	4004      	ands	r4, r0
 800eee8:	4620      	mov	r0, r4
 800eeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeec:	7a31      	ldrb	r1, [r6, #8]
 800eeee:	4638      	mov	r0, r7
 800eef0:	f7fc fa44 	bl	800b37c <ucdr_serialize_uint8_t>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d0ee      	beq.n	800eed6 <uxr_serialize_CREATE_Payload+0x42>
 800eef8:	7a33      	ldrb	r3, [r6, #8]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d001      	beq.n	800ef02 <uxr_serialize_CREATE_Payload+0x6e>
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d1ea      	bne.n	800eed8 <uxr_serialize_CREATE_Payload+0x44>
 800ef02:	68f1      	ldr	r1, [r6, #12]
 800ef04:	4638      	mov	r0, r7
 800ef06:	f004 ffef 	bl	8013ee8 <ucdr_serialize_string>
 800ef0a:	4004      	ands	r4, r0
 800ef0c:	e7e4      	b.n	800eed8 <uxr_serialize_CREATE_Payload+0x44>
 800ef0e:	7a31      	ldrb	r1, [r6, #8]
 800ef10:	4638      	mov	r0, r7
 800ef12:	f7fc fa33 	bl	800b37c <ucdr_serialize_uint8_t>
 800ef16:	4605      	mov	r5, r0
 800ef18:	b158      	cbz	r0, 800ef32 <uxr_serialize_CREATE_Payload+0x9e>
 800ef1a:	7a33      	ldrb	r3, [r6, #8]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d034      	beq.n	800ef8a <uxr_serialize_CREATE_Payload+0xf6>
 800ef20:	2b03      	cmp	r3, #3
 800ef22:	d106      	bne.n	800ef32 <uxr_serialize_CREATE_Payload+0x9e>
 800ef24:	68f2      	ldr	r2, [r6, #12]
 800ef26:	f106 0110 	add.w	r1, r6, #16
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	f004 ffb0 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800ef30:	4605      	mov	r5, r0
 800ef32:	2202      	movs	r2, #2
 800ef34:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800ef38:	4638      	mov	r0, r7
 800ef3a:	f004 feb5 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800ef3e:	4028      	ands	r0, r5
 800ef40:	4004      	ands	r4, r0
 800ef42:	e7c9      	b.n	800eed8 <uxr_serialize_CREATE_Payload+0x44>
 800ef44:	f106 0108 	add.w	r1, r6, #8
 800ef48:	4638      	mov	r0, r7
 800ef4a:	f7ff f9b9 	bl	800e2c0 <uxr_serialize_CLIENT_Representation>
 800ef4e:	4004      	ands	r4, r0
 800ef50:	e7c2      	b.n	800eed8 <uxr_serialize_CREATE_Payload+0x44>
 800ef52:	f106 0108 	add.w	r1, r6, #8
 800ef56:	4638      	mov	r0, r7
 800ef58:	f7ff fa6e 	bl	800e438 <uxr_serialize_AGENT_Representation>
 800ef5c:	4004      	ands	r4, r0
 800ef5e:	e7bb      	b.n	800eed8 <uxr_serialize_CREATE_Payload+0x44>
 800ef60:	7a31      	ldrb	r1, [r6, #8]
 800ef62:	4638      	mov	r0, r7
 800ef64:	f7fc fa0a 	bl	800b37c <ucdr_serialize_uint8_t>
 800ef68:	4605      	mov	r5, r0
 800ef6a:	b130      	cbz	r0, 800ef7a <uxr_serialize_CREATE_Payload+0xe6>
 800ef6c:	7a33      	ldrb	r3, [r6, #8]
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d011      	beq.n	800ef96 <uxr_serialize_CREATE_Payload+0x102>
 800ef72:	2b03      	cmp	r3, #3
 800ef74:	d015      	beq.n	800efa2 <uxr_serialize_CREATE_Payload+0x10e>
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d00d      	beq.n	800ef96 <uxr_serialize_CREATE_Payload+0x102>
 800ef7a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800ef7e:	4638      	mov	r0, r7
 800ef80:	f7fc ff38 	bl	800bdf4 <ucdr_serialize_int16_t>
 800ef84:	4028      	ands	r0, r5
 800ef86:	4004      	ands	r4, r0
 800ef88:	e7a6      	b.n	800eed8 <uxr_serialize_CREATE_Payload+0x44>
 800ef8a:	68f1      	ldr	r1, [r6, #12]
 800ef8c:	4638      	mov	r0, r7
 800ef8e:	f004 ffab 	bl	8013ee8 <ucdr_serialize_string>
 800ef92:	4605      	mov	r5, r0
 800ef94:	e7cd      	b.n	800ef32 <uxr_serialize_CREATE_Payload+0x9e>
 800ef96:	68f1      	ldr	r1, [r6, #12]
 800ef98:	4638      	mov	r0, r7
 800ef9a:	f004 ffa5 	bl	8013ee8 <ucdr_serialize_string>
 800ef9e:	4605      	mov	r5, r0
 800efa0:	e7eb      	b.n	800ef7a <uxr_serialize_CREATE_Payload+0xe6>
 800efa2:	68f2      	ldr	r2, [r6, #12]
 800efa4:	f106 0110 	add.w	r1, r6, #16
 800efa8:	4638      	mov	r0, r7
 800efaa:	f004 ff71 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 800efae:	4605      	mov	r5, r0
 800efb0:	e7e3      	b.n	800ef7a <uxr_serialize_CREATE_Payload+0xe6>
 800efb2:	bf00      	nop

0800efb4 <uxr_deserialize_GET_INFO_Payload>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	2202      	movs	r2, #2
 800efb8:	4605      	mov	r5, r0
 800efba:	460e      	mov	r6, r1
 800efbc:	f004 fed8 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800efc0:	2202      	movs	r2, #2
 800efc2:	18b1      	adds	r1, r6, r2
 800efc4:	4604      	mov	r4, r0
 800efc6:	4628      	mov	r0, r5
 800efc8:	f004 fed2 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800efcc:	1d31      	adds	r1, r6, #4
 800efce:	4004      	ands	r4, r0
 800efd0:	4628      	mov	r0, r5
 800efd2:	f7fc fd19 	bl	800ba08 <ucdr_deserialize_uint32_t>
 800efd6:	b2e4      	uxtb	r4, r4
 800efd8:	4020      	ands	r0, r4
 800efda:	bd70      	pop	{r4, r5, r6, pc}

0800efdc <uxr_serialize_DELETE_Payload>:
 800efdc:	b570      	push	{r4, r5, r6, lr}
 800efde:	2202      	movs	r2, #2
 800efe0:	4605      	mov	r5, r0
 800efe2:	460e      	mov	r6, r1
 800efe4:	f004 fe60 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800efe8:	2202      	movs	r2, #2
 800efea:	4604      	mov	r4, r0
 800efec:	18b1      	adds	r1, r6, r2
 800efee:	4628      	mov	r0, r5
 800eff0:	f004 fe5a 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800eff4:	4020      	ands	r0, r4
 800eff6:	b2c0      	uxtb	r0, r0
 800eff8:	bd70      	pop	{r4, r5, r6, pc}
 800effa:	bf00      	nop

0800effc <uxr_deserialize_STATUS_AGENT_Payload>:
 800effc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f000:	4605      	mov	r5, r0
 800f002:	460e      	mov	r6, r1
 800f004:	f7fc f9d0 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800f008:	1c71      	adds	r1, r6, #1
 800f00a:	4604      	mov	r4, r0
 800f00c:	4628      	mov	r0, r5
 800f00e:	f7fc f9cb 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800f012:	2204      	movs	r2, #4
 800f014:	18b1      	adds	r1, r6, r2
 800f016:	4680      	mov	r8, r0
 800f018:	4628      	mov	r0, r5
 800f01a:	f004 fea9 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f01e:	f106 0108 	add.w	r1, r6, #8
 800f022:	4607      	mov	r7, r0
 800f024:	2202      	movs	r2, #2
 800f026:	4628      	mov	r0, r5
 800f028:	f004 fea2 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f02c:	ea04 0308 	and.w	r3, r4, r8
 800f030:	b2db      	uxtb	r3, r3
 800f032:	ea03 0407 	and.w	r4, r3, r7
 800f036:	2202      	movs	r2, #2
 800f038:	4607      	mov	r7, r0
 800f03a:	f106 010a 	add.w	r1, r6, #10
 800f03e:	4628      	mov	r0, r5
 800f040:	f004 fe96 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f044:	f106 010c 	add.w	r1, r6, #12
 800f048:	4603      	mov	r3, r0
 800f04a:	4628      	mov	r0, r5
 800f04c:	461d      	mov	r5, r3
 800f04e:	f7fc f97d 	bl	800b34c <ucdr_deserialize_bool>
 800f052:	403c      	ands	r4, r7
 800f054:	4025      	ands	r5, r4
 800f056:	4028      	ands	r0, r5
 800f058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f05c <uxr_deserialize_STATUS_Payload>:
 800f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	2202      	movs	r2, #2
 800f062:	4606      	mov	r6, r0
 800f064:	460f      	mov	r7, r1
 800f066:	f004 fe83 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f06a:	2202      	movs	r2, #2
 800f06c:	18b9      	adds	r1, r7, r2
 800f06e:	4605      	mov	r5, r0
 800f070:	4630      	mov	r0, r6
 800f072:	f004 fe7d 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f076:	1d39      	adds	r1, r7, #4
 800f078:	4680      	mov	r8, r0
 800f07a:	4630      	mov	r0, r6
 800f07c:	f7fc f994 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800f080:	1d79      	adds	r1, r7, #5
 800f082:	4604      	mov	r4, r0
 800f084:	4630      	mov	r0, r6
 800f086:	f7fc f98f 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800f08a:	ea05 0508 	and.w	r5, r5, r8
 800f08e:	402c      	ands	r4, r5
 800f090:	4020      	ands	r0, r4
 800f092:	b2c0      	uxtb	r0, r0
 800f094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f098 <uxr_serialize_INFO_Payload>:
 800f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09c:	2202      	movs	r2, #2
 800f09e:	460c      	mov	r4, r1
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	f004 fe01 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f0a6:	2202      	movs	r2, #2
 800f0a8:	18a1      	adds	r1, r4, r2
 800f0aa:	4680      	mov	r8, r0
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f004 fdfb 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f0b2:	7921      	ldrb	r1, [r4, #4]
 800f0b4:	4607      	mov	r7, r0
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	f7fc f960 	bl	800b37c <ucdr_serialize_uint8_t>
 800f0bc:	7961      	ldrb	r1, [r4, #5]
 800f0be:	4606      	mov	r6, r0
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	f7fc f95b 	bl	800b37c <ucdr_serialize_uint8_t>
 800f0c6:	ea08 0807 	and.w	r8, r8, r7
 800f0ca:	ea06 0608 	and.w	r6, r6, r8
 800f0ce:	4006      	ands	r6, r0
 800f0d0:	7a21      	ldrb	r1, [r4, #8]
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	f7fc f924 	bl	800b320 <ucdr_serialize_bool>
 800f0d8:	7a23      	ldrb	r3, [r4, #8]
 800f0da:	b2f7      	uxtb	r7, r6
 800f0dc:	4606      	mov	r6, r0
 800f0de:	b96b      	cbnz	r3, 800f0fc <uxr_serialize_INFO_Payload+0x64>
 800f0e0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	f7fc f91b 	bl	800b320 <ucdr_serialize_bool>
 800f0ea:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800f0ee:	4030      	ands	r0, r6
 800f0f0:	b2c6      	uxtb	r6, r0
 800f0f2:	b983      	cbnz	r3, 800f116 <uxr_serialize_INFO_Payload+0x7e>
 800f0f4:	ea06 0007 	and.w	r0, r6, r7
 800f0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fc:	7b21      	ldrb	r1, [r4, #12]
 800f0fe:	4628      	mov	r0, r5
 800f100:	f7fc f93c 	bl	800b37c <ucdr_serialize_uint8_t>
 800f104:	b188      	cbz	r0, 800f12a <uxr_serialize_INFO_Payload+0x92>
 800f106:	f104 010c 	add.w	r1, r4, #12
 800f10a:	4628      	mov	r0, r5
 800f10c:	f7ff fa06 	bl	800e51c <uxr_serialize_ObjectVariant.part.0>
 800f110:	4030      	ands	r0, r6
 800f112:	b2c6      	uxtb	r6, r0
 800f114:	e7e4      	b.n	800f0e0 <uxr_serialize_INFO_Payload+0x48>
 800f116:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800f11a:	4628      	mov	r0, r5
 800f11c:	f7ff fdb2 	bl	800ec84 <uxr_serialize_ActivityInfoVariant>
 800f120:	4006      	ands	r6, r0
 800f122:	ea06 0007 	and.w	r0, r6, r7
 800f126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12a:	4606      	mov	r6, r0
 800f12c:	e7d8      	b.n	800f0e0 <uxr_serialize_INFO_Payload+0x48>
 800f12e:	bf00      	nop

0800f130 <uxr_serialize_READ_DATA_Payload>:
 800f130:	b570      	push	{r4, r5, r6, lr}
 800f132:	2202      	movs	r2, #2
 800f134:	4605      	mov	r5, r0
 800f136:	460e      	mov	r6, r1
 800f138:	f004 fdb6 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f13c:	2202      	movs	r2, #2
 800f13e:	18b1      	adds	r1, r6, r2
 800f140:	4604      	mov	r4, r0
 800f142:	4628      	mov	r0, r5
 800f144:	f004 fdb0 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f148:	1d31      	adds	r1, r6, #4
 800f14a:	4004      	ands	r4, r0
 800f14c:	4628      	mov	r0, r5
 800f14e:	f7ff fe5d 	bl	800ee0c <uxr_serialize_ReadSpecification>
 800f152:	b2e4      	uxtb	r4, r4
 800f154:	4020      	ands	r0, r4
 800f156:	bd70      	pop	{r4, r5, r6, pc}

0800f158 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f158:	b570      	push	{r4, r5, r6, lr}
 800f15a:	2202      	movs	r2, #2
 800f15c:	4605      	mov	r5, r0
 800f15e:	460e      	mov	r6, r1
 800f160:	f004 fda2 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f164:	2202      	movs	r2, #2
 800f166:	4604      	mov	r4, r0
 800f168:	18b1      	adds	r1, r6, r2
 800f16a:	4628      	mov	r0, r5
 800f16c:	f004 fd9c 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f170:	4020      	ands	r0, r4
 800f172:	b2c0      	uxtb	r0, r0
 800f174:	bd70      	pop	{r4, r5, r6, pc}
 800f176:	bf00      	nop

0800f178 <uxr_serialize_ACKNACK_Payload>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	460c      	mov	r4, r1
 800f17c:	460e      	mov	r6, r1
 800f17e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f182:	4605      	mov	r5, r0
 800f184:	f7fc f926 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800f188:	2202      	movs	r2, #2
 800f18a:	4621      	mov	r1, r4
 800f18c:	4604      	mov	r4, r0
 800f18e:	4628      	mov	r0, r5
 800f190:	f004 fd8a 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f194:	7931      	ldrb	r1, [r6, #4]
 800f196:	4004      	ands	r4, r0
 800f198:	4628      	mov	r0, r5
 800f19a:	f7fc f8ef 	bl	800b37c <ucdr_serialize_uint8_t>
 800f19e:	b2e4      	uxtb	r4, r4
 800f1a0:	4020      	ands	r0, r4
 800f1a2:	bd70      	pop	{r4, r5, r6, pc}

0800f1a4 <uxr_deserialize_ACKNACK_Payload>:
 800f1a4:	b570      	push	{r4, r5, r6, lr}
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	460e      	mov	r6, r1
 800f1aa:	f7fc fa13 	bl	800b5d4 <ucdr_deserialize_uint16_t>
 800f1ae:	2202      	movs	r2, #2
 800f1b0:	18b1      	adds	r1, r6, r2
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f004 fddb 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f1ba:	1d31      	adds	r1, r6, #4
 800f1bc:	4004      	ands	r4, r0
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f7fc f8f2 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800f1c4:	b2e4      	uxtb	r4, r4
 800f1c6:	4020      	ands	r0, r4
 800f1c8:	bd70      	pop	{r4, r5, r6, pc}
 800f1ca:	bf00      	nop

0800f1cc <uxr_serialize_HEARTBEAT_Payload>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	460d      	mov	r5, r1
 800f1d0:	8809      	ldrh	r1, [r1, #0]
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	f7fc f8fe 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800f1d8:	8869      	ldrh	r1, [r5, #2]
 800f1da:	4604      	mov	r4, r0
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7fc f8f9 	bl	800b3d4 <ucdr_serialize_uint16_t>
 800f1e2:	7929      	ldrb	r1, [r5, #4]
 800f1e4:	4004      	ands	r4, r0
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f7fc f8c8 	bl	800b37c <ucdr_serialize_uint8_t>
 800f1ec:	b2e4      	uxtb	r4, r4
 800f1ee:	4020      	ands	r0, r4
 800f1f0:	bd70      	pop	{r4, r5, r6, pc}
 800f1f2:	bf00      	nop

0800f1f4 <uxr_deserialize_HEARTBEAT_Payload>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	4605      	mov	r5, r0
 800f1f8:	460e      	mov	r6, r1
 800f1fa:	f7fc f9eb 	bl	800b5d4 <ucdr_deserialize_uint16_t>
 800f1fe:	1cb1      	adds	r1, r6, #2
 800f200:	4604      	mov	r4, r0
 800f202:	4628      	mov	r0, r5
 800f204:	f7fc f9e6 	bl	800b5d4 <ucdr_deserialize_uint16_t>
 800f208:	1d31      	adds	r1, r6, #4
 800f20a:	4004      	ands	r4, r0
 800f20c:	4628      	mov	r0, r5
 800f20e:	f7fc f8cb 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800f212:	b2e4      	uxtb	r4, r4
 800f214:	4020      	ands	r0, r4
 800f216:	bd70      	pop	{r4, r5, r6, pc}

0800f218 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f21c:	4605      	mov	r5, r0
 800f21e:	460e      	mov	r6, r1
 800f220:	f7fc ff74 	bl	800c10c <ucdr_deserialize_int32_t>
 800f224:	1d31      	adds	r1, r6, #4
 800f226:	4607      	mov	r7, r0
 800f228:	4628      	mov	r0, r5
 800f22a:	f7fc fbed 	bl	800ba08 <ucdr_deserialize_uint32_t>
 800f22e:	f106 0108 	add.w	r1, r6, #8
 800f232:	4680      	mov	r8, r0
 800f234:	4628      	mov	r0, r5
 800f236:	f7fc ff69 	bl	800c10c <ucdr_deserialize_int32_t>
 800f23a:	f106 010c 	add.w	r1, r6, #12
 800f23e:	4604      	mov	r4, r0
 800f240:	4628      	mov	r0, r5
 800f242:	f7fc fbe1 	bl	800ba08 <ucdr_deserialize_uint32_t>
 800f246:	ea07 0708 	and.w	r7, r7, r8
 800f24a:	403c      	ands	r4, r7
 800f24c:	f106 0110 	add.w	r1, r6, #16
 800f250:	4004      	ands	r4, r0
 800f252:	4628      	mov	r0, r5
 800f254:	f7fc ff5a 	bl	800c10c <ucdr_deserialize_int32_t>
 800f258:	f106 0114 	add.w	r1, r6, #20
 800f25c:	4607      	mov	r7, r0
 800f25e:	4628      	mov	r0, r5
 800f260:	f7fc fbd2 	bl	800ba08 <ucdr_deserialize_uint32_t>
 800f264:	b2e4      	uxtb	r4, r4
 800f266:	403c      	ands	r4, r7
 800f268:	4020      	ands	r0, r4
 800f26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f26e:	bf00      	nop

0800f270 <uxr_serialize_SampleIdentity>:
 800f270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f274:	220c      	movs	r2, #12
 800f276:	4604      	mov	r4, r0
 800f278:	460d      	mov	r5, r1
 800f27a:	f004 fd15 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f27e:	2203      	movs	r2, #3
 800f280:	f105 010c 	add.w	r1, r5, #12
 800f284:	4607      	mov	r7, r0
 800f286:	4620      	mov	r0, r4
 800f288:	f004 fd0e 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 800f28c:	7be9      	ldrb	r1, [r5, #15]
 800f28e:	4680      	mov	r8, r0
 800f290:	4620      	mov	r0, r4
 800f292:	f7fc f873 	bl	800b37c <ucdr_serialize_uint8_t>
 800f296:	6929      	ldr	r1, [r5, #16]
 800f298:	4606      	mov	r6, r0
 800f29a:	4620      	mov	r0, r4
 800f29c:	f7fc fe9e 	bl	800bfdc <ucdr_serialize_int32_t>
 800f2a0:	6969      	ldr	r1, [r5, #20]
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	ea07 0708 	and.w	r7, r7, r8
 800f2aa:	461c      	mov	r4, r3
 800f2ac:	f7fc fa7c 	bl	800b7a8 <ucdr_serialize_uint32_t>
 800f2b0:	403e      	ands	r6, r7
 800f2b2:	4034      	ands	r4, r6
 800f2b4:	4020      	ands	r0, r4
 800f2b6:	b2c0      	uxtb	r0, r0
 800f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f2bc <uxr_deserialize_SampleIdentity>:
 800f2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c0:	220c      	movs	r2, #12
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	460d      	mov	r5, r1
 800f2c6:	f004 fd53 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f2ca:	2203      	movs	r2, #3
 800f2cc:	f105 010c 	add.w	r1, r5, #12
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f004 fd4c 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 800f2d8:	f105 010f 	add.w	r1, r5, #15
 800f2dc:	4680      	mov	r8, r0
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f7fc f862 	bl	800b3a8 <ucdr_deserialize_uint8_t>
 800f2e4:	f105 0110 	add.w	r1, r5, #16
 800f2e8:	4606      	mov	r6, r0
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f7fc ff0e 	bl	800c10c <ucdr_deserialize_int32_t>
 800f2f0:	f105 0114 	add.w	r1, r5, #20
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	ea07 0708 	and.w	r7, r7, r8
 800f2fc:	461c      	mov	r4, r3
 800f2fe:	f7fc fb83 	bl	800ba08 <ucdr_deserialize_uint32_t>
 800f302:	403e      	ands	r6, r7
 800f304:	4034      	ands	r4, r6
 800f306:	4020      	ands	r0, r4
 800f308:	b2c0      	uxtb	r0, r0
 800f30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f30e:	bf00      	nop

0800f310 <rcl_client_get_rmw_handle>:
 800f310:	b118      	cbz	r0, 800f31a <rcl_client_get_rmw_handle+0xa>
 800f312:	6800      	ldr	r0, [r0, #0]
 800f314:	b108      	cbz	r0, 800f31a <rcl_client_get_rmw_handle+0xa>
 800f316:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f31a:	4770      	bx	lr

0800f31c <rcl_send_request>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	b1e8      	cbz	r0, 800f35e <rcl_send_request+0x42>
 800f322:	4604      	mov	r4, r0
 800f324:	6800      	ldr	r0, [r0, #0]
 800f326:	b1d0      	cbz	r0, 800f35e <rcl_send_request+0x42>
 800f328:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800f32c:	b1bb      	cbz	r3, 800f35e <rcl_send_request+0x42>
 800f32e:	460e      	mov	r6, r1
 800f330:	b1d1      	cbz	r1, 800f368 <rcl_send_request+0x4c>
 800f332:	4615      	mov	r5, r2
 800f334:	b1c2      	cbz	r2, 800f368 <rcl_send_request+0x4c>
 800f336:	2105      	movs	r1, #5
 800f338:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f33c:	f002 fd70 	bl	8011e20 <__atomic_load_8>
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	e9c5 0100 	strd	r0, r1, [r5]
 800f346:	462a      	mov	r2, r5
 800f348:	4631      	mov	r1, r6
 800f34a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f34e:	f003 ff1b 	bl	8013188 <rmw_send_request>
 800f352:	4606      	mov	r6, r0
 800f354:	b160      	cbz	r0, 800f370 <rcl_send_request+0x54>
 800f356:	2601      	movs	r6, #1
 800f358:	4630      	mov	r0, r6
 800f35a:	b002      	add	sp, #8
 800f35c:	bd70      	pop	{r4, r5, r6, pc}
 800f35e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800f362:	4630      	mov	r0, r6
 800f364:	b002      	add	sp, #8
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	260b      	movs	r6, #11
 800f36a:	4630      	mov	r0, r6
 800f36c:	b002      	add	sp, #8
 800f36e:	bd70      	pop	{r4, r5, r6, pc}
 800f370:	6820      	ldr	r0, [r4, #0]
 800f372:	2105      	movs	r1, #5
 800f374:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f378:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f37c:	9100      	str	r1, [sp, #0]
 800f37e:	f002 fdbb 	bl	8011ef8 <__atomic_exchange_8>
 800f382:	4630      	mov	r0, r6
 800f384:	b002      	add	sp, #8
 800f386:	bd70      	pop	{r4, r5, r6, pc}

0800f388 <rcl_take_response>:
 800f388:	b570      	push	{r4, r5, r6, lr}
 800f38a:	468e      	mov	lr, r1
 800f38c:	460c      	mov	r4, r1
 800f38e:	4616      	mov	r6, r2
 800f390:	4605      	mov	r5, r0
 800f392:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f396:	b08c      	sub	sp, #48	; 0x30
 800f398:	f10d 0c18 	add.w	ip, sp, #24
 800f39c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f3a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f3a8:	b35d      	cbz	r5, 800f402 <rcl_take_response+0x7a>
 800f3aa:	682b      	ldr	r3, [r5, #0]
 800f3ac:	b34b      	cbz	r3, 800f402 <rcl_take_response+0x7a>
 800f3ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f3b2:	b330      	cbz	r0, 800f402 <rcl_take_response+0x7a>
 800f3b4:	b346      	cbz	r6, 800f408 <rcl_take_response+0x80>
 800f3b6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f410 <rcl_take_response+0x88>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800f3c0:	4632      	mov	r2, r6
 800f3c2:	f10d 0307 	add.w	r3, sp, #7
 800f3c6:	a902      	add	r1, sp, #8
 800f3c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f3d0:	f003 ffe2 	bl	8013398 <rmw_take_response>
 800f3d4:	4605      	mov	r5, r0
 800f3d6:	b9c8      	cbnz	r0, 800f40c <rcl_take_response+0x84>
 800f3d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f3dc:	f240 13f5 	movw	r3, #501	; 0x1f5
 800f3e0:	2a00      	cmp	r2, #0
 800f3e2:	bf08      	it	eq
 800f3e4:	461d      	moveq	r5, r3
 800f3e6:	f10d 0e18 	add.w	lr, sp, #24
 800f3ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3ee:	46a4      	mov	ip, r4
 800f3f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f3f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	b00c      	add	sp, #48	; 0x30
 800f400:	bd70      	pop	{r4, r5, r6, pc}
 800f402:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800f406:	e7ee      	b.n	800f3e6 <rcl_take_response+0x5e>
 800f408:	250b      	movs	r5, #11
 800f40a:	e7ec      	b.n	800f3e6 <rcl_take_response+0x5e>
 800f40c:	2501      	movs	r5, #1
 800f40e:	e7ea      	b.n	800f3e6 <rcl_take_response+0x5e>
	...

0800f418 <rcl_client_is_valid>:
 800f418:	b130      	cbz	r0, 800f428 <rcl_client_is_valid+0x10>
 800f41a:	6800      	ldr	r0, [r0, #0]
 800f41c:	b120      	cbz	r0, 800f428 <rcl_client_is_valid+0x10>
 800f41e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f422:	3800      	subs	r0, #0
 800f424:	bf18      	it	ne
 800f426:	2001      	movne	r0, #1
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop

0800f42c <rcl_convert_rmw_ret_to_rcl_ret>:
 800f42c:	280b      	cmp	r0, #11
 800f42e:	dc0d      	bgt.n	800f44c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f430:	2800      	cmp	r0, #0
 800f432:	db09      	blt.n	800f448 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f434:	280b      	cmp	r0, #11
 800f436:	d807      	bhi.n	800f448 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f438:	e8df f000 	tbb	[pc, r0]
 800f43c:	07060607 	.word	0x07060607
 800f440:	06060606 	.word	0x06060606
 800f444:	07070606 	.word	0x07070606
 800f448:	2001      	movs	r0, #1
 800f44a:	4770      	bx	lr
 800f44c:	28cb      	cmp	r0, #203	; 0xcb
 800f44e:	bf18      	it	ne
 800f450:	2001      	movne	r0, #1
 800f452:	4770      	bx	lr

0800f454 <rcl_get_zero_initialized_context>:
 800f454:	4a03      	ldr	r2, [pc, #12]	; (800f464 <rcl_get_zero_initialized_context+0x10>)
 800f456:	4603      	mov	r3, r0
 800f458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f45c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f460:	4618      	mov	r0, r3
 800f462:	4770      	bx	lr
 800f464:	08017bd4 	.word	0x08017bd4

0800f468 <rcl_context_is_valid>:
 800f468:	b118      	cbz	r0, 800f472 <rcl_context_is_valid+0xa>
 800f46a:	6840      	ldr	r0, [r0, #4]
 800f46c:	3800      	subs	r0, #0
 800f46e:	bf18      	it	ne
 800f470:	2001      	movne	r0, #1
 800f472:	4770      	bx	lr

0800f474 <__cleanup_context>:
 800f474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f478:	4606      	mov	r6, r0
 800f47a:	6800      	ldr	r0, [r0, #0]
 800f47c:	2300      	movs	r3, #0
 800f47e:	6073      	str	r3, [r6, #4]
 800f480:	2800      	cmp	r0, #0
 800f482:	d049      	beq.n	800f518 <__cleanup_context+0xa4>
 800f484:	6947      	ldr	r7, [r0, #20]
 800f486:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f48a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f48e:	b137      	cbz	r7, 800f49e <__cleanup_context+0x2a>
 800f490:	3014      	adds	r0, #20
 800f492:	f000 f9bb 	bl	800f80c <rcl_init_options_fini>
 800f496:	4607      	mov	r7, r0
 800f498:	2800      	cmp	r0, #0
 800f49a:	d144      	bne.n	800f526 <__cleanup_context+0xb2>
 800f49c:	6830      	ldr	r0, [r6, #0]
 800f49e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f4a0:	b143      	cbz	r3, 800f4b4 <__cleanup_context+0x40>
 800f4a2:	3028      	adds	r0, #40	; 0x28
 800f4a4:	f003 fcb8 	bl	8012e18 <rmw_context_fini>
 800f4a8:	b118      	cbz	r0, 800f4b2 <__cleanup_context+0x3e>
 800f4aa:	2f00      	cmp	r7, #0
 800f4ac:	d03e      	beq.n	800f52c <__cleanup_context+0xb8>
 800f4ae:	f7fb f943 	bl	800a738 <rcutils_reset_error>
 800f4b2:	6830      	ldr	r0, [r6, #0]
 800f4b4:	6a03      	ldr	r3, [r0, #32]
 800f4b6:	b1db      	cbz	r3, 800f4f0 <__cleanup_context+0x7c>
 800f4b8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f4bc:	2a01      	cmp	r2, #1
 800f4be:	f17c 0100 	sbcs.w	r1, ip, #0
 800f4c2:	db11      	blt.n	800f4e8 <__cleanup_context+0x74>
 800f4c4:	2400      	movs	r4, #0
 800f4c6:	4625      	mov	r5, r4
 800f4c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f4cc:	4649      	mov	r1, r9
 800f4ce:	b1b8      	cbz	r0, 800f500 <__cleanup_context+0x8c>
 800f4d0:	47c0      	blx	r8
 800f4d2:	6833      	ldr	r3, [r6, #0]
 800f4d4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f4d8:	3401      	adds	r4, #1
 800f4da:	f145 0500 	adc.w	r5, r5, #0
 800f4de:	4294      	cmp	r4, r2
 800f4e0:	eb75 010c 	sbcs.w	r1, r5, ip
 800f4e4:	6a1b      	ldr	r3, [r3, #32]
 800f4e6:	dbef      	blt.n	800f4c8 <__cleanup_context+0x54>
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	47c0      	blx	r8
 800f4ee:	6830      	ldr	r0, [r6, #0]
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	47c0      	blx	r8
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e9c6 3300 	strd	r3, r3, [r6]
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f500:	3401      	adds	r4, #1
 800f502:	f145 0500 	adc.w	r5, r5, #0
 800f506:	4294      	cmp	r4, r2
 800f508:	eb75 010c 	sbcs.w	r1, r5, ip
 800f50c:	dbdc      	blt.n	800f4c8 <__cleanup_context+0x54>
 800f50e:	4618      	mov	r0, r3
 800f510:	4649      	mov	r1, r9
 800f512:	47c0      	blx	r8
 800f514:	6830      	ldr	r0, [r6, #0]
 800f516:	e7eb      	b.n	800f4f0 <__cleanup_context+0x7c>
 800f518:	4607      	mov	r7, r0
 800f51a:	2300      	movs	r3, #0
 800f51c:	e9c6 3300 	strd	r3, r3, [r6]
 800f520:	4638      	mov	r0, r7
 800f522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f526:	f7fb f907 	bl	800a738 <rcutils_reset_error>
 800f52a:	e7b7      	b.n	800f49c <__cleanup_context+0x28>
 800f52c:	f7ff ff7e 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 800f530:	4607      	mov	r7, r0
 800f532:	e7bc      	b.n	800f4ae <__cleanup_context+0x3a>

0800f534 <rcl_init>:
 800f534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f538:	1e05      	subs	r5, r0, #0
 800f53a:	b09e      	sub	sp, #120	; 0x78
 800f53c:	460e      	mov	r6, r1
 800f53e:	4690      	mov	r8, r2
 800f540:	461f      	mov	r7, r3
 800f542:	f340 809c 	ble.w	800f67e <rcl_init+0x14a>
 800f546:	2900      	cmp	r1, #0
 800f548:	f000 809c 	beq.w	800f684 <rcl_init+0x150>
 800f54c:	f1a1 0e04 	sub.w	lr, r1, #4
 800f550:	f04f 0c00 	mov.w	ip, #0
 800f554:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f558:	f10c 0c01 	add.w	ip, ip, #1
 800f55c:	2c00      	cmp	r4, #0
 800f55e:	f000 8091 	beq.w	800f684 <rcl_init+0x150>
 800f562:	4565      	cmp	r5, ip
 800f564:	d1f6      	bne.n	800f554 <rcl_init+0x20>
 800f566:	f1b8 0f00 	cmp.w	r8, #0
 800f56a:	f000 808b 	beq.w	800f684 <rcl_init+0x150>
 800f56e:	f8d8 4000 	ldr.w	r4, [r8]
 800f572:	2c00      	cmp	r4, #0
 800f574:	f000 8086 	beq.w	800f684 <rcl_init+0x150>
 800f578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f57a:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f57e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f582:	6823      	ldr	r3, [r4, #0]
 800f584:	f8cc 3000 	str.w	r3, [ip]
 800f588:	a819      	add	r0, sp, #100	; 0x64
 800f58a:	f7fb f8b1 	bl	800a6f0 <rcutils_allocator_is_valid>
 800f58e:	2800      	cmp	r0, #0
 800f590:	d078      	beq.n	800f684 <rcl_init+0x150>
 800f592:	2f00      	cmp	r7, #0
 800f594:	d076      	beq.n	800f684 <rcl_init+0x150>
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d178      	bne.n	800f68e <rcl_init+0x15a>
 800f59c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f5a0:	2178      	movs	r1, #120	; 0x78
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	4798      	blx	r3
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	6038      	str	r0, [r7, #0]
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	f000 80b6 	beq.w	800f71c <rcl_init+0x1e8>
 800f5b0:	a802      	add	r0, sp, #8
 800f5b2:	f002 ff85 	bl	80124c0 <rmw_get_zero_initialized_context>
 800f5b6:	a902      	add	r1, sp, #8
 800f5b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f5bc:	2250      	movs	r2, #80	; 0x50
 800f5be:	ac19      	add	r4, sp, #100	; 0x64
 800f5c0:	f007 f9a3 	bl	801690a <memcpy>
 800f5c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5c6:	f8d7 e000 	ldr.w	lr, [r7]
 800f5ca:	46f4      	mov	ip, lr
 800f5cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5d0:	6823      	ldr	r3, [r4, #0]
 800f5d2:	f8cc 3000 	str.w	r3, [ip]
 800f5d6:	f10e 0114 	add.w	r1, lr, #20
 800f5da:	4640      	mov	r0, r8
 800f5dc:	f000 f940 	bl	800f860 <rcl_init_options_copy>
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d144      	bne.n	800f670 <rcl_init+0x13c>
 800f5e6:	f8d7 9000 	ldr.w	r9, [r7]
 800f5ea:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f5ee:	f8c9 0020 	str.w	r0, [r9, #32]
 800f5f2:	f8c9 5018 	str.w	r5, [r9, #24]
 800f5f6:	f8c9 801c 	str.w	r8, [r9, #28]
 800f5fa:	2d00      	cmp	r5, #0
 800f5fc:	d04e      	beq.n	800f69c <rcl_init+0x168>
 800f5fe:	2e00      	cmp	r6, #0
 800f600:	d04c      	beq.n	800f69c <rcl_init+0x168>
 800f602:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f606:	2104      	movs	r1, #4
 800f608:	4628      	mov	r0, r5
 800f60a:	4798      	blx	r3
 800f60c:	f8c9 0020 	str.w	r0, [r9, #32]
 800f610:	f8d7 9000 	ldr.w	r9, [r7]
 800f614:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f618:	46ca      	mov	sl, r9
 800f61a:	b343      	cbz	r3, 800f66e <rcl_init+0x13a>
 800f61c:	2d01      	cmp	r5, #1
 800f61e:	f178 0300 	sbcs.w	r3, r8, #0
 800f622:	db3b      	blt.n	800f69c <rcl_init+0x168>
 800f624:	2400      	movs	r4, #0
 800f626:	3e04      	subs	r6, #4
 800f628:	46a1      	mov	r9, r4
 800f62a:	e00b      	b.n	800f644 <rcl_init+0x110>
 800f62c:	6831      	ldr	r1, [r6, #0]
 800f62e:	f007 f96c 	bl	801690a <memcpy>
 800f632:	3401      	adds	r4, #1
 800f634:	f149 0900 	adc.w	r9, r9, #0
 800f638:	45c8      	cmp	r8, r9
 800f63a:	bf08      	it	eq
 800f63c:	42a5      	cmpeq	r5, r4
 800f63e:	d02b      	beq.n	800f698 <rcl_init+0x164>
 800f640:	f8d7 a000 	ldr.w	sl, [r7]
 800f644:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f648:	f7f0 fdec 	bl	8000224 <strlen>
 800f64c:	1c42      	adds	r2, r0, #1
 800f64e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f650:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f652:	f8da a020 	ldr.w	sl, [sl, #32]
 800f656:	9201      	str	r2, [sp, #4]
 800f658:	4610      	mov	r0, r2
 800f65a:	4798      	blx	r3
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f662:	6a1b      	ldr	r3, [r3, #32]
 800f664:	9a01      	ldr	r2, [sp, #4]
 800f666:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d1de      	bne.n	800f62c <rcl_init+0xf8>
 800f66e:	240a      	movs	r4, #10
 800f670:	4638      	mov	r0, r7
 800f672:	f7ff feff 	bl	800f474 <__cleanup_context>
 800f676:	4620      	mov	r0, r4
 800f678:	b01e      	add	sp, #120	; 0x78
 800f67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f67e:	2900      	cmp	r1, #0
 800f680:	f43f af71 	beq.w	800f566 <rcl_init+0x32>
 800f684:	240b      	movs	r4, #11
 800f686:	4620      	mov	r0, r4
 800f688:	b01e      	add	sp, #120	; 0x78
 800f68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68e:	2464      	movs	r4, #100	; 0x64
 800f690:	4620      	mov	r0, r4
 800f692:	b01e      	add	sp, #120	; 0x78
 800f694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f698:	f8d7 9000 	ldr.w	r9, [r7]
 800f69c:	4926      	ldr	r1, [pc, #152]	; (800f738 <rcl_init+0x204>)
 800f69e:	680b      	ldr	r3, [r1, #0]
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	d036      	beq.n	800f712 <rcl_init+0x1de>
 800f6a4:	600b      	str	r3, [r1, #0]
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	2400      	movs	r4, #0
 800f6aa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f6ae:	607b      	str	r3, [r7, #4]
 800f6b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800f6b8:	d034      	beq.n	800f724 <rcl_init+0x1f0>
 800f6ba:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f6be:	b93b      	cbnz	r3, 800f6d0 <rcl_init+0x19c>
 800f6c0:	3030      	adds	r0, #48	; 0x30
 800f6c2:	f000 f939 	bl	800f938 <rcl_get_localhost_only>
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d1d1      	bne.n	800f670 <rcl_init+0x13c>
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	6958      	ldr	r0, [r3, #20]
 800f6d0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800f6d2:	aa18      	add	r2, sp, #96	; 0x60
 800f6d4:	a917      	add	r1, sp, #92	; 0x5c
 800f6d6:	f001 f841 	bl	801075c <rcl_validate_enclave_name>
 800f6da:	4604      	mov	r4, r0
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d1c7      	bne.n	800f670 <rcl_init+0x13c>
 800f6e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6e2:	b9eb      	cbnz	r3, 800f720 <rcl_init+0x1ec>
 800f6e4:	6839      	ldr	r1, [r7, #0]
 800f6e6:	694b      	ldr	r3, [r1, #20]
 800f6e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f6ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f6ee:	f000 fc3d 	bl	800ff6c <rcl_get_security_options_from_environment>
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d1bb      	bne.n	800f670 <rcl_init+0x13c>
 800f6f8:	6839      	ldr	r1, [r7, #0]
 800f6fa:	6948      	ldr	r0, [r1, #20]
 800f6fc:	3128      	adds	r1, #40	; 0x28
 800f6fe:	3018      	adds	r0, #24
 800f700:	f003 fa54 	bl	8012bac <rmw_init>
 800f704:	4604      	mov	r4, r0
 800f706:	2800      	cmp	r0, #0
 800f708:	d0bd      	beq.n	800f686 <rcl_init+0x152>
 800f70a:	f7ff fe8f 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 800f70e:	4604      	mov	r4, r0
 800f710:	e7ae      	b.n	800f670 <rcl_init+0x13c>
 800f712:	2201      	movs	r2, #1
 800f714:	461c      	mov	r4, r3
 800f716:	600a      	str	r2, [r1, #0]
 800f718:	4613      	mov	r3, r2
 800f71a:	e7c6      	b.n	800f6aa <rcl_init+0x176>
 800f71c:	240a      	movs	r4, #10
 800f71e:	e7b2      	b.n	800f686 <rcl_init+0x152>
 800f720:	2401      	movs	r4, #1
 800f722:	e7a5      	b.n	800f670 <rcl_init+0x13c>
 800f724:	3024      	adds	r0, #36	; 0x24
 800f726:	f005 ffe3 	bl	80156f0 <rcl_get_default_domain_id>
 800f72a:	4604      	mov	r4, r0
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d19f      	bne.n	800f670 <rcl_init+0x13c>
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	6958      	ldr	r0, [r3, #20]
 800f734:	e7c1      	b.n	800f6ba <rcl_init+0x186>
 800f736:	bf00      	nop
 800f738:	2001301c 	.word	0x2001301c

0800f73c <rcl_get_zero_initialized_init_options>:
 800f73c:	2000      	movs	r0, #0
 800f73e:	4770      	bx	lr

0800f740 <rcl_init_options_init>:
 800f740:	b084      	sub	sp, #16
 800f742:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f744:	b097      	sub	sp, #92	; 0x5c
 800f746:	ae1d      	add	r6, sp, #116	; 0x74
 800f748:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d058      	beq.n	800f802 <rcl_init_options_init+0xc2>
 800f750:	6803      	ldr	r3, [r0, #0]
 800f752:	4605      	mov	r5, r0
 800f754:	b133      	cbz	r3, 800f764 <rcl_init_options_init+0x24>
 800f756:	2464      	movs	r4, #100	; 0x64
 800f758:	4620      	mov	r0, r4
 800f75a:	b017      	add	sp, #92	; 0x5c
 800f75c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f760:	b004      	add	sp, #16
 800f762:	4770      	bx	lr
 800f764:	4630      	mov	r0, r6
 800f766:	f7fa ffc3 	bl	800a6f0 <rcutils_allocator_is_valid>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d049      	beq.n	800f802 <rcl_init_options_init+0xc2>
 800f76e:	46b4      	mov	ip, r6
 800f770:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f774:	ac11      	add	r4, sp, #68	; 0x44
 800f776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f778:	f8dc 3000 	ldr.w	r3, [ip]
 800f77c:	6023      	str	r3, [r4, #0]
 800f77e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f780:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f782:	2050      	movs	r0, #80	; 0x50
 800f784:	4798      	blx	r3
 800f786:	4604      	mov	r4, r0
 800f788:	6028      	str	r0, [r5, #0]
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d03b      	beq.n	800f806 <rcl_init_options_init+0xc6>
 800f78e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f792:	4686      	mov	lr, r0
 800f794:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f798:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f79c:	f8dc 3000 	ldr.w	r3, [ip]
 800f7a0:	f8ce 3000 	str.w	r3, [lr]
 800f7a4:	a802      	add	r0, sp, #8
 800f7a6:	f002 fe9b 	bl	80124e0 <rmw_get_zero_initialized_init_options>
 800f7aa:	f10d 0e08 	add.w	lr, sp, #8
 800f7ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7b2:	f104 0c18 	add.w	ip, r4, #24
 800f7b6:	682f      	ldr	r7, [r5, #0]
 800f7b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f7d0:	ac20      	add	r4, sp, #128	; 0x80
 800f7d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f7d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f7da:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f7de:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f7e2:	f107 0018 	add.w	r0, r7, #24
 800f7e6:	f003 f8e9 	bl	80129bc <rmw_init_options_init>
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d0b3      	beq.n	800f758 <rcl_init_options_init+0x18>
 800f7f0:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f7f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f7f4:	6828      	ldr	r0, [r5, #0]
 800f7f6:	4798      	blx	r3
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f7ff fe17 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 800f7fe:	4604      	mov	r4, r0
 800f800:	e7aa      	b.n	800f758 <rcl_init_options_init+0x18>
 800f802:	240b      	movs	r4, #11
 800f804:	e7a8      	b.n	800f758 <rcl_init_options_init+0x18>
 800f806:	240a      	movs	r4, #10
 800f808:	e7a6      	b.n	800f758 <rcl_init_options_init+0x18>
 800f80a:	bf00      	nop

0800f80c <rcl_init_options_fini>:
 800f80c:	b530      	push	{r4, r5, lr}
 800f80e:	b087      	sub	sp, #28
 800f810:	b1f0      	cbz	r0, 800f850 <rcl_init_options_fini+0x44>
 800f812:	6803      	ldr	r3, [r0, #0]
 800f814:	4604      	mov	r4, r0
 800f816:	b1db      	cbz	r3, 800f850 <rcl_init_options_fini+0x44>
 800f818:	469c      	mov	ip, r3
 800f81a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f81e:	f10d 0e04 	add.w	lr, sp, #4
 800f822:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f826:	f8dc 3000 	ldr.w	r3, [ip]
 800f82a:	f8ce 3000 	str.w	r3, [lr]
 800f82e:	a801      	add	r0, sp, #4
 800f830:	f7fa ff5e 	bl	800a6f0 <rcutils_allocator_is_valid>
 800f834:	b160      	cbz	r0, 800f850 <rcl_init_options_fini+0x44>
 800f836:	6820      	ldr	r0, [r4, #0]
 800f838:	3018      	adds	r0, #24
 800f83a:	f003 f96f 	bl	8012b1c <rmw_init_options_fini>
 800f83e:	4605      	mov	r5, r0
 800f840:	b950      	cbnz	r0, 800f858 <rcl_init_options_fini+0x4c>
 800f842:	6820      	ldr	r0, [r4, #0]
 800f844:	9b02      	ldr	r3, [sp, #8]
 800f846:	9905      	ldr	r1, [sp, #20]
 800f848:	4798      	blx	r3
 800f84a:	4628      	mov	r0, r5
 800f84c:	b007      	add	sp, #28
 800f84e:	bd30      	pop	{r4, r5, pc}
 800f850:	250b      	movs	r5, #11
 800f852:	4628      	mov	r0, r5
 800f854:	b007      	add	sp, #28
 800f856:	bd30      	pop	{r4, r5, pc}
 800f858:	f7ff fde8 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 800f85c:	4605      	mov	r5, r0
 800f85e:	e7f8      	b.n	800f852 <rcl_init_options_fini+0x46>

0800f860 <rcl_init_options_copy>:
 800f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f864:	b094      	sub	sp, #80	; 0x50
 800f866:	2800      	cmp	r0, #0
 800f868:	d058      	beq.n	800f91c <rcl_init_options_copy+0xbc>
 800f86a:	4604      	mov	r4, r0
 800f86c:	6800      	ldr	r0, [r0, #0]
 800f86e:	2800      	cmp	r0, #0
 800f870:	d054      	beq.n	800f91c <rcl_init_options_copy+0xbc>
 800f872:	460e      	mov	r6, r1
 800f874:	f7fa ff3c 	bl	800a6f0 <rcutils_allocator_is_valid>
 800f878:	2800      	cmp	r0, #0
 800f87a:	d04f      	beq.n	800f91c <rcl_init_options_copy+0xbc>
 800f87c:	2e00      	cmp	r6, #0
 800f87e:	d04d      	beq.n	800f91c <rcl_init_options_copy+0xbc>
 800f880:	6833      	ldr	r3, [r6, #0]
 800f882:	b123      	cbz	r3, 800f88e <rcl_init_options_copy+0x2e>
 800f884:	2464      	movs	r4, #100	; 0x64
 800f886:	4620      	mov	r0, r4
 800f888:	b014      	add	sp, #80	; 0x50
 800f88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f88e:	6827      	ldr	r7, [r4, #0]
 800f890:	46bc      	mov	ip, r7
 800f892:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f896:	ad0f      	add	r5, sp, #60	; 0x3c
 800f898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f89a:	f8dc 3000 	ldr.w	r3, [ip]
 800f89e:	f8d7 8000 	ldr.w	r8, [r7]
 800f8a2:	602b      	str	r3, [r5, #0]
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	2050      	movs	r0, #80	; 0x50
 800f8a8:	47c0      	blx	r8
 800f8aa:	4605      	mov	r5, r0
 800f8ac:	6030      	str	r0, [r6, #0]
 800f8ae:	b3d0      	cbz	r0, 800f926 <rcl_init_options_copy+0xc6>
 800f8b0:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800f8b4:	4686      	mov	lr, r0
 800f8b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f8be:	f8dc 3000 	ldr.w	r3, [ip]
 800f8c2:	f8ce 3000 	str.w	r3, [lr]
 800f8c6:	4668      	mov	r0, sp
 800f8c8:	f002 fe0a 	bl	80124e0 <rmw_get_zero_initialized_init_options>
 800f8cc:	46ee      	mov	lr, sp
 800f8ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8d2:	f105 0c18 	add.w	ip, r5, #24
 800f8d6:	6824      	ldr	r4, [r4, #0]
 800f8d8:	6835      	ldr	r5, [r6, #0]
 800f8da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8ee:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f8f2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f8f6:	f104 0018 	add.w	r0, r4, #24
 800f8fa:	f105 0118 	add.w	r1, r5, #24
 800f8fe:	f003 f8c5 	bl	8012a8c <rmw_init_options_copy>
 800f902:	4604      	mov	r4, r0
 800f904:	2800      	cmp	r0, #0
 800f906:	d0be      	beq.n	800f886 <rcl_init_options_copy+0x26>
 800f908:	f7fa ff00 	bl	800a70c <rcutils_get_error_string>
 800f90c:	f7fa ff14 	bl	800a738 <rcutils_reset_error>
 800f910:	4630      	mov	r0, r6
 800f912:	f7ff ff7b 	bl	800f80c <rcl_init_options_fini>
 800f916:	b140      	cbz	r0, 800f92a <rcl_init_options_copy+0xca>
 800f918:	4604      	mov	r4, r0
 800f91a:	e7b4      	b.n	800f886 <rcl_init_options_copy+0x26>
 800f91c:	240b      	movs	r4, #11
 800f91e:	4620      	mov	r0, r4
 800f920:	b014      	add	sp, #80	; 0x50
 800f922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f926:	240a      	movs	r4, #10
 800f928:	e7ad      	b.n	800f886 <rcl_init_options_copy+0x26>
 800f92a:	4620      	mov	r0, r4
 800f92c:	b014      	add	sp, #80	; 0x50
 800f92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f932:	f7ff bd7b 	b.w	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 800f936:	bf00      	nop

0800f938 <rcl_get_localhost_only>:
 800f938:	b510      	push	{r4, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	2300      	movs	r3, #0
 800f93e:	9301      	str	r3, [sp, #4]
 800f940:	b1b8      	cbz	r0, 800f972 <rcl_get_localhost_only+0x3a>
 800f942:	4604      	mov	r4, r0
 800f944:	a901      	add	r1, sp, #4
 800f946:	480c      	ldr	r0, [pc, #48]	; (800f978 <rcl_get_localhost_only+0x40>)
 800f948:	f002 fb0e 	bl	8011f68 <rcutils_get_env>
 800f94c:	b110      	cbz	r0, 800f954 <rcl_get_localhost_only+0x1c>
 800f94e:	2001      	movs	r0, #1
 800f950:	b002      	add	sp, #8
 800f952:	bd10      	pop	{r4, pc}
 800f954:	9b01      	ldr	r3, [sp, #4]
 800f956:	b113      	cbz	r3, 800f95e <rcl_get_localhost_only+0x26>
 800f958:	781a      	ldrb	r2, [r3, #0]
 800f95a:	2a31      	cmp	r2, #49	; 0x31
 800f95c:	d004      	beq.n	800f968 <rcl_get_localhost_only+0x30>
 800f95e:	2302      	movs	r3, #2
 800f960:	2000      	movs	r0, #0
 800f962:	7023      	strb	r3, [r4, #0]
 800f964:	b002      	add	sp, #8
 800f966:	bd10      	pop	{r4, pc}
 800f968:	785b      	ldrb	r3, [r3, #1]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d1f7      	bne.n	800f95e <rcl_get_localhost_only+0x26>
 800f96e:	2301      	movs	r3, #1
 800f970:	e7f6      	b.n	800f960 <rcl_get_localhost_only+0x28>
 800f972:	200b      	movs	r0, #11
 800f974:	b002      	add	sp, #8
 800f976:	bd10      	pop	{r4, pc}
 800f978:	08017bdc 	.word	0x08017bdc

0800f97c <rcl_get_zero_initialized_node>:
 800f97c:	4a03      	ldr	r2, [pc, #12]	; (800f98c <rcl_get_zero_initialized_node+0x10>)
 800f97e:	4603      	mov	r3, r0
 800f980:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f984:	e883 0003 	stmia.w	r3, {r0, r1}
 800f988:	4618      	mov	r0, r3
 800f98a:	4770      	bx	lr
 800f98c:	08017c04 	.word	0x08017c04

0800f990 <rcl_node_init>:
 800f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	b0a9      	sub	sp, #164	; 0xa4
 800f996:	4604      	mov	r4, r0
 800f998:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800f99c:	a823      	add	r0, sp, #140	; 0x8c
 800f99e:	460e      	mov	r6, r1
 800f9a0:	4615      	mov	r5, r2
 800f9a2:	461f      	mov	r7, r3
 800f9a4:	f006 f8cc 	bl	8015b40 <rcl_guard_condition_get_default_options>
 800f9a8:	f1b8 0f00 	cmp.w	r8, #0
 800f9ac:	f000 80e6 	beq.w	800fb7c <rcl_node_init+0x1ec>
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	f7fa fe9d 	bl	800a6f0 <rcutils_allocator_is_valid>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	f000 80e0 	beq.w	800fb7c <rcl_node_init+0x1ec>
 800f9bc:	2e00      	cmp	r6, #0
 800f9be:	f000 80dd 	beq.w	800fb7c <rcl_node_init+0x1ec>
 800f9c2:	2d00      	cmp	r5, #0
 800f9c4:	f000 80da 	beq.w	800fb7c <rcl_node_init+0x1ec>
 800f9c8:	2c00      	cmp	r4, #0
 800f9ca:	f000 80d7 	beq.w	800fb7c <rcl_node_init+0x1ec>
 800f9ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f9d2:	f1b9 0f00 	cmp.w	r9, #0
 800f9d6:	f040 80fd 	bne.w	800fbd4 <rcl_node_init+0x244>
 800f9da:	2f00      	cmp	r7, #0
 800f9dc:	f000 80ce 	beq.w	800fb7c <rcl_node_init+0x1ec>
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f7ff fd41 	bl	800f468 <rcl_context_is_valid>
 800f9e6:	4682      	mov	sl, r0
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	f000 80cd 	beq.w	800fb88 <rcl_node_init+0x1f8>
 800f9ee:	464a      	mov	r2, r9
 800f9f0:	a922      	add	r1, sp, #136	; 0x88
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800f9f8:	f002 ff14 	bl	8012824 <rmw_validate_node_name>
 800f9fc:	4681      	mov	r9, r0
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f040 80be 	bne.w	800fb80 <rcl_node_init+0x1f0>
 800fa04:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fa06:	2800      	cmp	r0, #0
 800fa08:	f040 80f0 	bne.w	800fbec <rcl_node_init+0x25c>
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f7f0 fc09 	bl	8000224 <strlen>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	f040 80bb 	bne.w	800fb8e <rcl_node_init+0x1fe>
 800fa18:	4d7c      	ldr	r5, [pc, #496]	; (800fc0c <rcl_node_init+0x27c>)
 800fa1a:	a922      	add	r1, sp, #136	; 0x88
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f002 fee2 	bl	80127e8 <rmw_validate_namespace>
 800fa24:	4681      	mov	r9, r0
 800fa26:	2800      	cmp	r0, #0
 800fa28:	f040 80aa 	bne.w	800fb80 <rcl_node_init+0x1f0>
 800fa2c:	4682      	mov	sl, r0
 800fa2e:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f040 80e0 	bne.w	800fbf6 <rcl_node_init+0x266>
 800fa36:	f8d8 3000 	ldr.w	r3, [r8]
 800fa3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fa3e:	2078      	movs	r0, #120	; 0x78
 800fa40:	4798      	blx	r3
 800fa42:	4681      	mov	r9, r0
 800fa44:	6060      	str	r0, [r4, #4]
 800fa46:	2800      	cmp	r0, #0
 800fa48:	f000 80ca 	beq.w	800fbe0 <rcl_node_init+0x250>
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	2300      	movs	r3, #0
 800fa50:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800fa54:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800fa58:	a808      	add	r0, sp, #32
 800fa5a:	f000 f907 	bl	800fc6c <rcl_node_get_default_options>
 800fa5e:	a908      	add	r1, sp, #32
 800fa60:	4648      	mov	r0, r9
 800fa62:	2268      	movs	r2, #104	; 0x68
 800fa64:	f006 ff51 	bl	801690a <memcpy>
 800fa68:	6861      	ldr	r1, [r4, #4]
 800fa6a:	6027      	str	r7, [r4, #0]
 800fa6c:	4640      	mov	r0, r8
 800fa6e:	f000 f90b 	bl	800fc88 <rcl_node_options_copy>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d158      	bne.n	800fb28 <rcl_node_init+0x198>
 800fa76:	4628      	mov	r0, r5
 800fa78:	f7f0 fbd4 	bl	8000224 <strlen>
 800fa7c:	4428      	add	r0, r5
 800fa7e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fa82:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fa86:	2b2f      	cmp	r3, #47	; 0x2f
 800fa88:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fa8c:	9300      	str	r3, [sp, #0]
 800fa8e:	bf0c      	ite	eq
 800fa90:	4b5f      	ldreq	r3, [pc, #380]	; (800fc10 <rcl_node_init+0x280>)
 800fa92:	4b60      	ldrne	r3, [pc, #384]	; (800fc14 <rcl_node_init+0x284>)
 800fa94:	9302      	str	r3, [sp, #8]
 800fa96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fa9a:	9301      	str	r3, [sp, #4]
 800fa9c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800faa0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800faa4:	f002 fa88 	bl	8011fb8 <rcutils_format_string_limit>
 800faa8:	6823      	ldr	r3, [r4, #0]
 800faaa:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800faae:	6818      	ldr	r0, [r3, #0]
 800fab0:	4631      	mov	r1, r6
 800fab2:	3028      	adds	r0, #40	; 0x28
 800fab4:	462a      	mov	r2, r5
 800fab6:	6866      	ldr	r6, [r4, #4]
 800fab8:	f003 facc 	bl	8013054 <rmw_create_node>
 800fabc:	6863      	ldr	r3, [r4, #4]
 800fabe:	66b0      	str	r0, [r6, #104]	; 0x68
 800fac0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d032      	beq.n	800fb2c <rcl_node_init+0x19c>
 800fac6:	f003 fb59 	bl	801317c <rmw_node_get_graph_guard_condition>
 800faca:	4681      	mov	r9, r0
 800facc:	b360      	cbz	r0, 800fb28 <rcl_node_init+0x198>
 800face:	f8d8 3000 	ldr.w	r3, [r8]
 800fad2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fad6:	6866      	ldr	r6, [r4, #4]
 800fad8:	2008      	movs	r0, #8
 800fada:	4798      	blx	r3
 800fadc:	6863      	ldr	r3, [r4, #4]
 800fade:	66f0      	str	r0, [r6, #108]	; 0x6c
 800fae0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800fae4:	f1bb 0f00 	cmp.w	fp, #0
 800fae8:	d020      	beq.n	800fb2c <rcl_node_init+0x19c>
 800faea:	a806      	add	r0, sp, #24
 800faec:	f005 ff98 	bl	8015a20 <rcl_get_zero_initialized_guard_condition>
 800faf0:	a806      	add	r0, sp, #24
 800faf2:	c803      	ldmia	r0, {r0, r1}
 800faf4:	6863      	ldr	r3, [r4, #4]
 800faf6:	46c4      	mov	ip, r8
 800faf8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800fafc:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fb00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb04:	ae23      	add	r6, sp, #140	; 0x8c
 800fb06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fb08:	f8dc 3000 	ldr.w	r3, [ip]
 800fb0c:	6033      	str	r3, [r6, #0]
 800fb0e:	ab28      	add	r3, sp, #160	; 0xa0
 800fb10:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fb14:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb18:	4649      	mov	r1, r9
 800fb1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fb1c:	463a      	mov	r2, r7
 800fb1e:	4670      	mov	r0, lr
 800fb20:	f005 ff88 	bl	8015a34 <rcl_guard_condition_init_from_rmw>
 800fb24:	4681      	mov	r9, r0
 800fb26:	b328      	cbz	r0, 800fb74 <rcl_node_init+0x1e4>
 800fb28:	6863      	ldr	r3, [r4, #4]
 800fb2a:	b1f3      	cbz	r3, 800fb6a <rcl_node_init+0x1da>
 800fb2c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800fb2e:	b128      	cbz	r0, 800fb3c <rcl_node_init+0x1ac>
 800fb30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb34:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fb38:	4798      	blx	r3
 800fb3a:	6863      	ldr	r3, [r4, #4]
 800fb3c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fb3e:	b110      	cbz	r0, 800fb46 <rcl_node_init+0x1b6>
 800fb40:	f003 faa0 	bl	8013084 <rmw_destroy_node>
 800fb44:	6863      	ldr	r3, [r4, #4]
 800fb46:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fb48:	b148      	cbz	r0, 800fb5e <rcl_node_init+0x1ce>
 800fb4a:	f005 ffd3 	bl	8015af4 <rcl_guard_condition_fini>
 800fb4e:	6863      	ldr	r3, [r4, #4]
 800fb50:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fb54:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fb56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb5a:	4798      	blx	r3
 800fb5c:	6863      	ldr	r3, [r4, #4]
 800fb5e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb68:	4798      	blx	r3
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e9c4 3300 	strd	r3, r3, [r4]
 800fb70:	f04f 0901 	mov.w	r9, #1
 800fb74:	f1ba 0f00 	cmp.w	sl, #0
 800fb78:	d125      	bne.n	800fbc6 <rcl_node_init+0x236>
 800fb7a:	e001      	b.n	800fb80 <rcl_node_init+0x1f0>
 800fb7c:	f04f 090b 	mov.w	r9, #11
 800fb80:	4648      	mov	r0, r9
 800fb82:	b029      	add	sp, #164	; 0xa4
 800fb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb88:	f04f 0965 	mov.w	r9, #101	; 0x65
 800fb8c:	e7f8      	b.n	800fb80 <rcl_node_init+0x1f0>
 800fb8e:	782b      	ldrb	r3, [r5, #0]
 800fb90:	2b2f      	cmp	r3, #47	; 0x2f
 800fb92:	f43f af42 	beq.w	800fa1a <rcl_node_init+0x8a>
 800fb96:	9503      	str	r5, [sp, #12]
 800fb98:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	4b1e      	ldr	r3, [pc, #120]	; (800fc18 <rcl_node_init+0x288>)
 800fba0:	9302      	str	r3, [sp, #8]
 800fba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fba6:	9301      	str	r3, [sp, #4]
 800fba8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fbac:	f002 fa04 	bl	8011fb8 <rcutils_format_string_limit>
 800fbb0:	4605      	mov	r5, r0
 800fbb2:	b340      	cbz	r0, 800fc06 <rcl_node_init+0x276>
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	a922      	add	r1, sp, #136	; 0x88
 800fbb8:	9222      	str	r2, [sp, #136]	; 0x88
 800fbba:	f002 fe15 	bl	80127e8 <rmw_validate_namespace>
 800fbbe:	4681      	mov	r9, r0
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	f43f af34 	beq.w	800fa2e <rcl_node_init+0x9e>
 800fbc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fbca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fbce:	4628      	mov	r0, r5
 800fbd0:	4798      	blx	r3
 800fbd2:	e7d5      	b.n	800fb80 <rcl_node_init+0x1f0>
 800fbd4:	f04f 0964 	mov.w	r9, #100	; 0x64
 800fbd8:	4648      	mov	r0, r9
 800fbda:	b029      	add	sp, #164	; 0xa4
 800fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe0:	f04f 090a 	mov.w	r9, #10
 800fbe4:	f1ba 0f00 	cmp.w	sl, #0
 800fbe8:	d1ed      	bne.n	800fbc6 <rcl_node_init+0x236>
 800fbea:	e7c9      	b.n	800fb80 <rcl_node_init+0x1f0>
 800fbec:	f002 fe6c 	bl	80128c8 <rmw_node_name_validation_result_string>
 800fbf0:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800fbf4:	e7c4      	b.n	800fb80 <rcl_node_init+0x1f0>
 800fbf6:	f002 fe09 	bl	801280c <rmw_namespace_validation_result_string>
 800fbfa:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800fbfe:	f1ba 0f00 	cmp.w	sl, #0
 800fc02:	d1e0      	bne.n	800fbc6 <rcl_node_init+0x236>
 800fc04:	e7bc      	b.n	800fb80 <rcl_node_init+0x1f0>
 800fc06:	f04f 090a 	mov.w	r9, #10
 800fc0a:	e7b9      	b.n	800fb80 <rcl_node_init+0x1f0>
 800fc0c:	08017bf4 	.word	0x08017bf4
 800fc10:	08017a78 	.word	0x08017a78
 800fc14:	08017bfc 	.word	0x08017bfc
 800fc18:	08017bf8 	.word	0x08017bf8

0800fc1c <rcl_node_is_valid>:
 800fc1c:	b130      	cbz	r0, 800fc2c <rcl_node_is_valid+0x10>
 800fc1e:	6843      	ldr	r3, [r0, #4]
 800fc20:	b123      	cbz	r3, 800fc2c <rcl_node_is_valid+0x10>
 800fc22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc24:	b113      	cbz	r3, 800fc2c <rcl_node_is_valid+0x10>
 800fc26:	6800      	ldr	r0, [r0, #0]
 800fc28:	f7ff bc1e 	b.w	800f468 <rcl_context_is_valid>
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	4770      	bx	lr

0800fc30 <rcl_node_get_name>:
 800fc30:	b120      	cbz	r0, 800fc3c <rcl_node_get_name+0xc>
 800fc32:	6840      	ldr	r0, [r0, #4]
 800fc34:	b110      	cbz	r0, 800fc3c <rcl_node_get_name+0xc>
 800fc36:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800fc38:	b100      	cbz	r0, 800fc3c <rcl_node_get_name+0xc>
 800fc3a:	6880      	ldr	r0, [r0, #8]
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop

0800fc40 <rcl_node_get_namespace>:
 800fc40:	b120      	cbz	r0, 800fc4c <rcl_node_get_namespace+0xc>
 800fc42:	6840      	ldr	r0, [r0, #4]
 800fc44:	b110      	cbz	r0, 800fc4c <rcl_node_get_namespace+0xc>
 800fc46:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800fc48:	b100      	cbz	r0, 800fc4c <rcl_node_get_namespace+0xc>
 800fc4a:	68c0      	ldr	r0, [r0, #12]
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop

0800fc50 <rcl_node_get_options>:
 800fc50:	b128      	cbz	r0, 800fc5e <rcl_node_get_options+0xe>
 800fc52:	6840      	ldr	r0, [r0, #4]
 800fc54:	b118      	cbz	r0, 800fc5e <rcl_node_get_options+0xe>
 800fc56:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	bf08      	it	eq
 800fc5c:	2000      	moveq	r0, #0
 800fc5e:	4770      	bx	lr

0800fc60 <rcl_node_get_rmw_handle>:
 800fc60:	b110      	cbz	r0, 800fc68 <rcl_node_get_rmw_handle+0x8>
 800fc62:	6840      	ldr	r0, [r0, #4]
 800fc64:	b100      	cbz	r0, 800fc68 <rcl_node_get_rmw_handle+0x8>
 800fc66:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop

0800fc6c <rcl_node_get_default_options>:
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	2268      	movs	r2, #104	; 0x68
 800fc70:	4604      	mov	r4, r0
 800fc72:	2100      	movs	r1, #0
 800fc74:	f006 fd80 	bl	8016778 <memset>
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f7fa fd2b 	bl	800a6d4 <rcutils_get_default_allocator>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	7523      	strb	r3, [r4, #20]
 800fc82:	4620      	mov	r0, r4
 800fc84:	bd10      	pop	{r4, pc}
 800fc86:	bf00      	nop

0800fc88 <rcl_node_options_copy>:
 800fc88:	b1d0      	cbz	r0, 800fcc0 <rcl_node_options_copy+0x38>
 800fc8a:	b570      	push	{r4, r5, r6, lr}
 800fc8c:	460c      	mov	r4, r1
 800fc8e:	b1a9      	cbz	r1, 800fcbc <rcl_node_options_copy+0x34>
 800fc90:	4288      	cmp	r0, r1
 800fc92:	4684      	mov	ip, r0
 800fc94:	d012      	beq.n	800fcbc <rcl_node_options_copy+0x34>
 800fc96:	4605      	mov	r5, r0
 800fc98:	8a86      	ldrh	r6, [r0, #20]
 800fc9a:	468e      	mov	lr, r1
 800fc9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	f8ce 3000 	str.w	r3, [lr]
 800fca8:	f10c 0118 	add.w	r1, ip, #24
 800fcac:	2250      	movs	r2, #80	; 0x50
 800fcae:	82a6      	strh	r6, [r4, #20]
 800fcb0:	f104 0018 	add.w	r0, r4, #24
 800fcb4:	f006 fe29 	bl	801690a <memcpy>
 800fcb8:	2000      	movs	r0, #0
 800fcba:	bd70      	pop	{r4, r5, r6, pc}
 800fcbc:	200b      	movs	r0, #11
 800fcbe:	bd70      	pop	{r4, r5, r6, pc}
 800fcc0:	200b      	movs	r0, #11
 800fcc2:	4770      	bx	lr

0800fcc4 <rcl_node_resolve_name>:
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcca:	b091      	sub	sp, #68	; 0x44
 800fccc:	ac1a      	add	r4, sp, #104	; 0x68
 800fcce:	e884 000c 	stmia.w	r4, {r2, r3}
 800fcd2:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d03b      	beq.n	800fd52 <rcl_node_resolve_name+0x8e>
 800fcda:	460c      	mov	r4, r1
 800fcdc:	4605      	mov	r5, r0
 800fcde:	f7ff ffb7 	bl	800fc50 <rcl_node_get_options>
 800fce2:	2800      	cmp	r0, #0
 800fce4:	d037      	beq.n	800fd56 <rcl_node_resolve_name+0x92>
 800fce6:	4628      	mov	r0, r5
 800fce8:	f7ff ffa2 	bl	800fc30 <rcl_node_get_name>
 800fcec:	4606      	mov	r6, r0
 800fcee:	4628      	mov	r0, r5
 800fcf0:	f7ff ffa6 	bl	800fc40 <rcl_node_get_namespace>
 800fcf4:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800fcf8:	4681      	mov	r9, r0
 800fcfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcfe:	ad0b      	add	r5, sp, #44	; 0x2c
 800fd00:	46ac      	mov	ip, r5
 800fd02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd06:	f8de 3000 	ldr.w	r3, [lr]
 800fd0a:	f8cc 3000 	str.w	r3, [ip]
 800fd0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd10:	b1fb      	cbz	r3, 800fd52 <rcl_node_resolve_name+0x8e>
 800fd12:	468a      	mov	sl, r1
 800fd14:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800fd18:	f002 faa6 	bl	8012268 <rcutils_get_zero_initialized_string_map>
 800fd1c:	ab10      	add	r3, sp, #64	; 0x40
 800fd1e:	9008      	str	r0, [sp, #32]
 800fd20:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fd24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd28:	2100      	movs	r1, #0
 800fd2a:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fd2e:	a808      	add	r0, sp, #32
 800fd30:	f002 fb12 	bl	8012358 <rcutils_string_map_init>
 800fd34:	4607      	mov	r7, r0
 800fd36:	b180      	cbz	r0, 800fd5a <rcl_node_resolve_name+0x96>
 800fd38:	f7fa fce8 	bl	800a70c <rcutils_get_error_string>
 800fd3c:	f7fa fcfc 	bl	800a738 <rcutils_reset_error>
 800fd40:	2f0a      	cmp	r7, #10
 800fd42:	bf18      	it	ne
 800fd44:	2701      	movne	r7, #1
 800fd46:	4638      	mov	r0, r7
 800fd48:	b011      	add	sp, #68	; 0x44
 800fd4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4e:	b002      	add	sp, #8
 800fd50:	4770      	bx	lr
 800fd52:	270b      	movs	r7, #11
 800fd54:	e7f7      	b.n	800fd46 <rcl_node_resolve_name+0x82>
 800fd56:	2701      	movs	r7, #1
 800fd58:	e7f5      	b.n	800fd46 <rcl_node_resolve_name+0x82>
 800fd5a:	9009      	str	r0, [sp, #36]	; 0x24
 800fd5c:	9007      	str	r0, [sp, #28]
 800fd5e:	a808      	add	r0, sp, #32
 800fd60:	f005 fe58 	bl	8015a14 <rcl_get_default_topic_name_substitutions>
 800fd64:	4607      	mov	r7, r0
 800fd66:	b1a8      	cbz	r0, 800fd94 <rcl_node_resolve_name+0xd0>
 800fd68:	280a      	cmp	r0, #10
 800fd6a:	9c07      	ldr	r4, [sp, #28]
 800fd6c:	d000      	beq.n	800fd70 <rcl_node_resolve_name+0xac>
 800fd6e:	2701      	movs	r7, #1
 800fd70:	a808      	add	r0, sp, #32
 800fd72:	f002 fb31 	bl	80123d8 <rcutils_string_map_fini>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d13d      	bne.n	800fdf6 <rcl_node_resolve_name+0x132>
 800fd7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd7c:	4659      	mov	r1, fp
 800fd7e:	47d0      	blx	sl
 800fd80:	4659      	mov	r1, fp
 800fd82:	4620      	mov	r0, r4
 800fd84:	47d0      	blx	sl
 800fd86:	f1b8 0f00 	cmp.w	r8, #0
 800fd8a:	d0dc      	beq.n	800fd46 <rcl_node_resolve_name+0x82>
 800fd8c:	2f67      	cmp	r7, #103	; 0x67
 800fd8e:	bf08      	it	eq
 800fd90:	2768      	moveq	r7, #104	; 0x68
 800fd92:	e7d8      	b.n	800fd46 <rcl_node_resolve_name+0x82>
 800fd94:	ab09      	add	r3, sp, #36	; 0x24
 800fd96:	9305      	str	r3, [sp, #20]
 800fd98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd9a:	46ec      	mov	ip, sp
 800fd9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fda0:	682b      	ldr	r3, [r5, #0]
 800fda2:	f8cc 3000 	str.w	r3, [ip]
 800fda6:	464a      	mov	r2, r9
 800fda8:	4631      	mov	r1, r6
 800fdaa:	4620      	mov	r0, r4
 800fdac:	ab08      	add	r3, sp, #32
 800fdae:	f005 fcd3 	bl	8015758 <rcl_expand_topic_name>
 800fdb2:	4607      	mov	r7, r0
 800fdb4:	b9b8      	cbnz	r0, 800fde6 <rcl_node_resolve_name+0x122>
 800fdb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fdb8:	9009      	str	r0, [sp, #36]	; 0x24
 800fdba:	4602      	mov	r2, r0
 800fdbc:	a90a      	add	r1, sp, #40	; 0x28
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f002 fc4e 	bl	8012660 <rmw_validate_full_topic_name>
 800fdc4:	b988      	cbnz	r0, 800fdea <rcl_node_resolve_name+0x126>
 800fdc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fdc8:	b9d5      	cbnz	r5, 800fe00 <rcl_node_resolve_name+0x13c>
 800fdca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdcc:	a808      	add	r0, sp, #32
 800fdce:	601c      	str	r4, [r3, #0]
 800fdd0:	f002 fb02 	bl	80123d8 <rcutils_string_map_fini>
 800fdd4:	4607      	mov	r7, r0
 800fdd6:	b1a8      	cbz	r0, 800fe04 <rcl_node_resolve_name+0x140>
 800fdd8:	f7fa fc98 	bl	800a70c <rcutils_get_error_string>
 800fddc:	462c      	mov	r4, r5
 800fdde:	f7fa fcab 	bl	800a738 <rcutils_reset_error>
 800fde2:	2701      	movs	r7, #1
 800fde4:	e7c9      	b.n	800fd7a <rcl_node_resolve_name+0xb6>
 800fde6:	9c07      	ldr	r4, [sp, #28]
 800fde8:	e7c2      	b.n	800fd70 <rcl_node_resolve_name+0xac>
 800fdea:	f7fa fc8f 	bl	800a70c <rcutils_get_error_string>
 800fdee:	2701      	movs	r7, #1
 800fdf0:	f7fa fca2 	bl	800a738 <rcutils_reset_error>
 800fdf4:	e7bc      	b.n	800fd70 <rcl_node_resolve_name+0xac>
 800fdf6:	f7fa fc89 	bl	800a70c <rcutils_get_error_string>
 800fdfa:	f7fa fc9d 	bl	800a738 <rcutils_reset_error>
 800fdfe:	e7bc      	b.n	800fd7a <rcl_node_resolve_name+0xb6>
 800fe00:	2767      	movs	r7, #103	; 0x67
 800fe02:	e7b5      	b.n	800fd70 <rcl_node_resolve_name+0xac>
 800fe04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe06:	4659      	mov	r1, fp
 800fe08:	47d0      	blx	sl
 800fe0a:	4659      	mov	r1, fp
 800fe0c:	4638      	mov	r0, r7
 800fe0e:	47d0      	blx	sl
 800fe10:	e799      	b.n	800fd46 <rcl_node_resolve_name+0x82>
 800fe12:	bf00      	nop

0800fe14 <exact_match_lookup>:
 800fe14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe16:	f102 0708 	add.w	r7, r2, #8
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	4614      	mov	r4, r2
 800fe1e:	4606      	mov	r6, r0
 800fe20:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fe24:	b085      	sub	sp, #20
 800fe26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	4919      	ldr	r1, [pc, #100]	; (800fe94 <exact_match_lookup+0x80>)
 800fe2e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fe32:	f002 f8b3 	bl	8011f9c <rcutils_join_path>
 800fe36:	7833      	ldrb	r3, [r6, #0]
 800fe38:	2b2f      	cmp	r3, #47	; 0x2f
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	d023      	beq.n	800fe86 <exact_match_lookup+0x72>
 800fe3e:	f104 030c 	add.w	r3, r4, #12
 800fe42:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe46:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fe4a:	1c70      	adds	r0, r6, #1
 800fe4c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fe50:	f002 f8aa 	bl	8011fa8 <rcutils_to_native_path>
 800fe54:	4606      	mov	r6, r0
 800fe56:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fe5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fe5e:	4631      	mov	r1, r6
 800fe60:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fe64:	4628      	mov	r0, r5
 800fe66:	f002 f899 	bl	8011f9c <rcutils_join_path>
 800fe6a:	6862      	ldr	r2, [r4, #4]
 800fe6c:	6921      	ldr	r1, [r4, #16]
 800fe6e:	4603      	mov	r3, r0
 800fe70:	4630      	mov	r0, r6
 800fe72:	461e      	mov	r6, r3
 800fe74:	4790      	blx	r2
 800fe76:	4628      	mov	r0, r5
 800fe78:	6863      	ldr	r3, [r4, #4]
 800fe7a:	6921      	ldr	r1, [r4, #16]
 800fe7c:	4798      	blx	r3
 800fe7e:	4635      	mov	r5, r6
 800fe80:	4628      	mov	r0, r5
 800fe82:	b005      	add	sp, #20
 800fe84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe86:	7873      	ldrb	r3, [r6, #1]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1d8      	bne.n	800fe3e <exact_match_lookup+0x2a>
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	b005      	add	sp, #20
 800fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe92:	bf00      	nop
 800fe94:	08017c48 	.word	0x08017c48

0800fe98 <rcl_get_secure_root>:
 800fe98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe9c:	b085      	sub	sp, #20
 800fe9e:	b168      	cbz	r0, 800febc <rcl_get_secure_root+0x24>
 800fea0:	4607      	mov	r7, r0
 800fea2:	4608      	mov	r0, r1
 800fea4:	460c      	mov	r4, r1
 800fea6:	f7fa fc23 	bl	800a6f0 <rcutils_allocator_is_valid>
 800feaa:	b138      	cbz	r0, 800febc <rcl_get_secure_root+0x24>
 800feac:	2300      	movs	r3, #0
 800feae:	482d      	ldr	r0, [pc, #180]	; (800ff64 <rcl_get_secure_root+0xcc>)
 800feb0:	9303      	str	r3, [sp, #12]
 800feb2:	a903      	add	r1, sp, #12
 800feb4:	f002 f858 	bl	8011f68 <rcutils_get_env>
 800feb8:	4605      	mov	r5, r0
 800feba:	b120      	cbz	r0, 800fec6 <rcl_get_secure_root+0x2e>
 800febc:	2500      	movs	r5, #0
 800febe:	4628      	mov	r0, r5
 800fec0:	b005      	add	sp, #20
 800fec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fec6:	9b03      	ldr	r3, [sp, #12]
 800fec8:	781a      	ldrb	r2, [r3, #0]
 800feca:	2a00      	cmp	r2, #0
 800fecc:	d0f6      	beq.n	800febc <rcl_get_secure_root+0x24>
 800fece:	f104 090c 	add.w	r9, r4, #12
 800fed2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fed6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800feda:	4618      	mov	r0, r3
 800fedc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fee0:	f002 f984 	bl	80121ec <rcutils_strdup>
 800fee4:	4680      	mov	r8, r0
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d0e8      	beq.n	800febc <rcl_get_secure_root+0x24>
 800feea:	481f      	ldr	r0, [pc, #124]	; (800ff68 <rcl_get_secure_root+0xd0>)
 800feec:	9503      	str	r5, [sp, #12]
 800feee:	a903      	add	r1, sp, #12
 800fef0:	f002 f83a 	bl	8011f68 <rcutils_get_env>
 800fef4:	b160      	cbz	r0, 800ff10 <rcl_get_secure_root+0x78>
 800fef6:	2600      	movs	r6, #0
 800fef8:	6863      	ldr	r3, [r4, #4]
 800fefa:	6921      	ldr	r1, [r4, #16]
 800fefc:	4630      	mov	r0, r6
 800fefe:	4798      	blx	r3
 800ff00:	4640      	mov	r0, r8
 800ff02:	6863      	ldr	r3, [r4, #4]
 800ff04:	6921      	ldr	r1, [r4, #16]
 800ff06:	4798      	blx	r3
 800ff08:	4628      	mov	r0, r5
 800ff0a:	b005      	add	sp, #20
 800ff0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff10:	9b03      	ldr	r3, [sp, #12]
 800ff12:	781e      	ldrb	r6, [r3, #0]
 800ff14:	b1f6      	cbz	r6, 800ff54 <rcl_get_secure_root+0xbc>
 800ff16:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ff1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ff24:	f002 f962 	bl	80121ec <rcutils_strdup>
 800ff28:	4606      	mov	r6, r0
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d0e3      	beq.n	800fef6 <rcl_get_secure_root+0x5e>
 800ff2e:	4622      	mov	r2, r4
 800ff30:	4641      	mov	r1, r8
 800ff32:	f7ff ff6f 	bl	800fe14 <exact_match_lookup>
 800ff36:	4605      	mov	r5, r0
 800ff38:	2d00      	cmp	r5, #0
 800ff3a:	d0dd      	beq.n	800fef8 <rcl_get_secure_root+0x60>
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f002 f82b 	bl	8011f98 <rcutils_is_directory>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2800      	cmp	r0, #0
 800ff46:	d1d7      	bne.n	800fef8 <rcl_get_secure_root+0x60>
 800ff48:	4628      	mov	r0, r5
 800ff4a:	6921      	ldr	r1, [r4, #16]
 800ff4c:	461d      	mov	r5, r3
 800ff4e:	6863      	ldr	r3, [r4, #4]
 800ff50:	4798      	blx	r3
 800ff52:	e7d1      	b.n	800fef8 <rcl_get_secure_root+0x60>
 800ff54:	4622      	mov	r2, r4
 800ff56:	4638      	mov	r0, r7
 800ff58:	4641      	mov	r1, r8
 800ff5a:	f7ff ff5b 	bl	800fe14 <exact_match_lookup>
 800ff5e:	4605      	mov	r5, r0
 800ff60:	e7ea      	b.n	800ff38 <rcl_get_secure_root+0xa0>
 800ff62:	bf00      	nop
 800ff64:	08017c54 	.word	0x08017c54
 800ff68:	08017c6c 	.word	0x08017c6c

0800ff6c <rcl_get_security_options_from_environment>:
 800ff6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff70:	b082      	sub	sp, #8
 800ff72:	2300      	movs	r3, #0
 800ff74:	4606      	mov	r6, r0
 800ff76:	460f      	mov	r7, r1
 800ff78:	4820      	ldr	r0, [pc, #128]	; (800fffc <rcl_get_security_options_from_environment+0x90>)
 800ff7a:	9301      	str	r3, [sp, #4]
 800ff7c:	a901      	add	r1, sp, #4
 800ff7e:	4690      	mov	r8, r2
 800ff80:	f001 fff2 	bl	8011f68 <rcutils_get_env>
 800ff84:	b120      	cbz	r0, 800ff90 <rcl_get_security_options_from_environment+0x24>
 800ff86:	2501      	movs	r5, #1
 800ff88:	4628      	mov	r0, r5
 800ff8a:	b002      	add	sp, #8
 800ff8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff90:	491b      	ldr	r1, [pc, #108]	; (8010000 <rcl_get_security_options_from_environment+0x94>)
 800ff92:	4604      	mov	r4, r0
 800ff94:	9801      	ldr	r0, [sp, #4]
 800ff96:	f7f0 f93b 	bl	8000210 <strcmp>
 800ff9a:	4605      	mov	r5, r0
 800ff9c:	b9e8      	cbnz	r0, 800ffda <rcl_get_security_options_from_environment+0x6e>
 800ff9e:	9001      	str	r0, [sp, #4]
 800ffa0:	f1b8 0f00 	cmp.w	r8, #0
 800ffa4:	d020      	beq.n	800ffe8 <rcl_get_security_options_from_environment+0x7c>
 800ffa6:	4817      	ldr	r0, [pc, #92]	; (8010004 <rcl_get_security_options_from_environment+0x98>)
 800ffa8:	a901      	add	r1, sp, #4
 800ffaa:	f001 ffdd 	bl	8011f68 <rcutils_get_env>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d1e9      	bne.n	800ff86 <rcl_get_security_options_from_environment+0x1a>
 800ffb2:	4915      	ldr	r1, [pc, #84]	; (8010008 <rcl_get_security_options_from_environment+0x9c>)
 800ffb4:	9801      	ldr	r0, [sp, #4]
 800ffb6:	f7f0 f92b 	bl	8000210 <strcmp>
 800ffba:	fab0 f080 	clz	r0, r0
 800ffbe:	0940      	lsrs	r0, r0, #5
 800ffc0:	f888 0000 	strb.w	r0, [r8]
 800ffc4:	4639      	mov	r1, r7
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	f7ff ff66 	bl	800fe98 <rcl_get_secure_root>
 800ffcc:	b170      	cbz	r0, 800ffec <rcl_get_security_options_from_environment+0x80>
 800ffce:	f8c8 0004 	str.w	r0, [r8, #4]
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	b002      	add	sp, #8
 800ffd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffda:	4625      	mov	r5, r4
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f888 4000 	strb.w	r4, [r8]
 800ffe2:	b002      	add	sp, #8
 800ffe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe8:	250b      	movs	r5, #11
 800ffea:	e7cd      	b.n	800ff88 <rcl_get_security_options_from_environment+0x1c>
 800ffec:	f898 5000 	ldrb.w	r5, [r8]
 800fff0:	f1a5 0501 	sub.w	r5, r5, #1
 800fff4:	fab5 f585 	clz	r5, r5
 800fff8:	096d      	lsrs	r5, r5, #5
 800fffa:	e7c5      	b.n	800ff88 <rcl_get_security_options_from_environment+0x1c>
 800fffc:	08017c0c 	.word	0x08017c0c
 8010000:	08017c20 	.word	0x08017c20
 8010004:	08017c28 	.word	0x08017c28
 8010008:	08017c40 	.word	0x08017c40

0801000c <rcl_service_get_rmw_handle>:
 801000c:	b118      	cbz	r0, 8010016 <rcl_service_get_rmw_handle+0xa>
 801000e:	6800      	ldr	r0, [r0, #0]
 8010010:	b108      	cbz	r0, 8010016 <rcl_service_get_rmw_handle+0xa>
 8010012:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010016:	4770      	bx	lr

08010018 <rcl_take_request>:
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	468e      	mov	lr, r1
 801001c:	460c      	mov	r4, r1
 801001e:	4616      	mov	r6, r2
 8010020:	4605      	mov	r5, r0
 8010022:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010026:	b08c      	sub	sp, #48	; 0x30
 8010028:	f10d 0c18 	add.w	ip, sp, #24
 801002c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010030:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010034:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010038:	b30d      	cbz	r5, 801007e <rcl_take_request+0x66>
 801003a:	682b      	ldr	r3, [r5, #0]
 801003c:	b1fb      	cbz	r3, 801007e <rcl_take_request+0x66>
 801003e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010042:	b1e0      	cbz	r0, 801007e <rcl_take_request+0x66>
 8010044:	b336      	cbz	r6, 8010094 <rcl_take_request+0x7c>
 8010046:	2300      	movs	r3, #0
 8010048:	f88d 3007 	strb.w	r3, [sp, #7]
 801004c:	4632      	mov	r2, r6
 801004e:	f10d 0307 	add.w	r3, sp, #7
 8010052:	a902      	add	r1, sp, #8
 8010054:	f003 f8e6 	bl	8013224 <rmw_take_request>
 8010058:	4605      	mov	r5, r0
 801005a:	b198      	cbz	r0, 8010084 <rcl_take_request+0x6c>
 801005c:	280a      	cmp	r0, #10
 801005e:	bf18      	it	ne
 8010060:	2501      	movne	r5, #1
 8010062:	f10d 0e18 	add.w	lr, sp, #24
 8010066:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801006a:	46a4      	mov	ip, r4
 801006c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010070:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010074:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010078:	4628      	mov	r0, r5
 801007a:	b00c      	add	sp, #48	; 0x30
 801007c:	bd70      	pop	{r4, r5, r6, pc}
 801007e:	f44f 7516 	mov.w	r5, #600	; 0x258
 8010082:	e7ee      	b.n	8010062 <rcl_take_request+0x4a>
 8010084:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010088:	f240 2359 	movw	r3, #601	; 0x259
 801008c:	2a00      	cmp	r2, #0
 801008e:	bf08      	it	eq
 8010090:	461d      	moveq	r5, r3
 8010092:	e7e6      	b.n	8010062 <rcl_take_request+0x4a>
 8010094:	250b      	movs	r5, #11
 8010096:	e7e4      	b.n	8010062 <rcl_take_request+0x4a>

08010098 <rcl_send_response>:
 8010098:	b170      	cbz	r0, 80100b8 <rcl_send_response+0x20>
 801009a:	6800      	ldr	r0, [r0, #0]
 801009c:	b160      	cbz	r0, 80100b8 <rcl_send_response+0x20>
 801009e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80100a2:	b148      	cbz	r0, 80100b8 <rcl_send_response+0x20>
 80100a4:	b159      	cbz	r1, 80100be <rcl_send_response+0x26>
 80100a6:	b510      	push	{r4, lr}
 80100a8:	b15a      	cbz	r2, 80100c2 <rcl_send_response+0x2a>
 80100aa:	f003 f919 	bl	80132e0 <rmw_send_response>
 80100ae:	b110      	cbz	r0, 80100b6 <rcl_send_response+0x1e>
 80100b0:	2802      	cmp	r0, #2
 80100b2:	bf18      	it	ne
 80100b4:	2001      	movne	r0, #1
 80100b6:	bd10      	pop	{r4, pc}
 80100b8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80100bc:	4770      	bx	lr
 80100be:	200b      	movs	r0, #11
 80100c0:	4770      	bx	lr
 80100c2:	200b      	movs	r0, #11
 80100c4:	bd10      	pop	{r4, pc}
 80100c6:	bf00      	nop

080100c8 <rcl_service_is_valid>:
 80100c8:	b130      	cbz	r0, 80100d8 <rcl_service_is_valid+0x10>
 80100ca:	6800      	ldr	r0, [r0, #0]
 80100cc:	b120      	cbz	r0, 80100d8 <rcl_service_is_valid+0x10>
 80100ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80100d2:	3800      	subs	r0, #0
 80100d4:	bf18      	it	ne
 80100d6:	2001      	movne	r0, #1
 80100d8:	4770      	bx	lr
 80100da:	bf00      	nop

080100dc <rcl_get_zero_initialized_subscription>:
 80100dc:	4b01      	ldr	r3, [pc, #4]	; (80100e4 <rcl_get_zero_initialized_subscription+0x8>)
 80100de:	6818      	ldr	r0, [r3, #0]
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	08017c8c 	.word	0x08017c8c

080100e8 <rcl_subscription_init>:
 80100e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100ec:	b089      	sub	sp, #36	; 0x24
 80100ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80100f0:	b1d6      	cbz	r6, 8010128 <rcl_subscription_init+0x40>
 80100f2:	f106 0950 	add.w	r9, r6, #80	; 0x50
 80100f6:	4604      	mov	r4, r0
 80100f8:	4648      	mov	r0, r9
 80100fa:	460d      	mov	r5, r1
 80100fc:	4690      	mov	r8, r2
 80100fe:	461f      	mov	r7, r3
 8010100:	f7fa faf6 	bl	800a6f0 <rcutils_allocator_is_valid>
 8010104:	b180      	cbz	r0, 8010128 <rcl_subscription_init+0x40>
 8010106:	b17c      	cbz	r4, 8010128 <rcl_subscription_init+0x40>
 8010108:	4628      	mov	r0, r5
 801010a:	f7ff fd87 	bl	800fc1c <rcl_node_is_valid>
 801010e:	2800      	cmp	r0, #0
 8010110:	d054      	beq.n	80101bc <rcl_subscription_init+0xd4>
 8010112:	f1b8 0f00 	cmp.w	r8, #0
 8010116:	d007      	beq.n	8010128 <rcl_subscription_init+0x40>
 8010118:	b137      	cbz	r7, 8010128 <rcl_subscription_init+0x40>
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	b14b      	cbz	r3, 8010132 <rcl_subscription_init+0x4a>
 801011e:	2764      	movs	r7, #100	; 0x64
 8010120:	4638      	mov	r0, r7
 8010122:	b009      	add	sp, #36	; 0x24
 8010124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010128:	270b      	movs	r7, #11
 801012a:	4638      	mov	r0, r7
 801012c:	b009      	add	sp, #36	; 0x24
 801012e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010132:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010136:	aa07      	add	r2, sp, #28
 8010138:	9205      	str	r2, [sp, #20]
 801013a:	9307      	str	r3, [sp, #28]
 801013c:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8010140:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010144:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010148:	4639      	mov	r1, r7
 801014a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801014e:	4628      	mov	r0, r5
 8010150:	f7ff fdb8 	bl	800fcc4 <rcl_node_resolve_name>
 8010154:	4607      	mov	r7, r0
 8010156:	2800      	cmp	r0, #0
 8010158:	d15f      	bne.n	801021a <rcl_subscription_init+0x132>
 801015a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 801015e:	21c8      	movs	r1, #200	; 0xc8
 8010160:	2001      	movs	r0, #1
 8010162:	4798      	blx	r3
 8010164:	6020      	str	r0, [r4, #0]
 8010166:	2800      	cmp	r0, #0
 8010168:	d05d      	beq.n	8010226 <rcl_subscription_init+0x13e>
 801016a:	4628      	mov	r0, r5
 801016c:	f7ff fd78 	bl	800fc60 <rcl_node_get_rmw_handle>
 8010170:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	9a07      	ldr	r2, [sp, #28]
 8010178:	6827      	ldr	r7, [r4, #0]
 801017a:	4641      	mov	r1, r8
 801017c:	4633      	mov	r3, r6
 801017e:	f003 f999 	bl	80134b4 <rmw_create_subscription>
 8010182:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8010186:	6827      	ldr	r7, [r4, #0]
 8010188:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801018c:	b348      	cbz	r0, 80101e2 <rcl_subscription_init+0xfa>
 801018e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8010192:	f003 fa71 	bl	8013678 <rmw_subscription_get_actual_qos>
 8010196:	4607      	mov	r7, r0
 8010198:	b9a8      	cbnz	r0, 80101c6 <rcl_subscription_init+0xde>
 801019a:	6820      	ldr	r0, [r4, #0]
 801019c:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 80101a0:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 80101a4:	2270      	movs	r2, #112	; 0x70
 80101a6:	4631      	mov	r1, r6
 80101a8:	f006 fbaf 	bl	801690a <memcpy>
 80101ac:	9807      	ldr	r0, [sp, #28]
 80101ae:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80101b0:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80101b2:	4798      	blx	r3
 80101b4:	4638      	mov	r0, r7
 80101b6:	b009      	add	sp, #36	; 0x24
 80101b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101bc:	27c8      	movs	r7, #200	; 0xc8
 80101be:	4638      	mov	r0, r7
 80101c0:	b009      	add	sp, #36	; 0x24
 80101c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101c6:	6827      	ldr	r7, [r4, #0]
 80101c8:	b32f      	cbz	r7, 8010216 <rcl_subscription_init+0x12e>
 80101ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80101ce:	b14b      	cbz	r3, 80101e4 <rcl_subscription_init+0xfc>
 80101d0:	4628      	mov	r0, r5
 80101d2:	f7ff fd45 	bl	800fc60 <rcl_node_get_rmw_handle>
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80101dc:	f003 fa5c 	bl	8013698 <rmw_destroy_subscription>
 80101e0:	6827      	ldr	r7, [r4, #0]
 80101e2:	b197      	cbz	r7, 801020a <rcl_subscription_init+0x122>
 80101e4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80101e8:	4628      	mov	r0, r5
 80101ea:	f7fa fa81 	bl	800a6f0 <rcutils_allocator_is_valid>
 80101ee:	b158      	cbz	r0, 8010208 <rcl_subscription_init+0x120>
 80101f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80101f2:	b148      	cbz	r0, 8010208 <rcl_subscription_init+0x120>
 80101f4:	4629      	mov	r1, r5
 80101f6:	f002 f987 	bl	8012508 <rmw_subscription_content_filter_options_fini>
 80101fa:	4605      	mov	r5, r0
 80101fc:	b9b8      	cbnz	r0, 801022e <rcl_subscription_init+0x146>
 80101fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010200:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010202:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010204:	4798      	blx	r3
 8010206:	66fd      	str	r5, [r7, #108]	; 0x6c
 8010208:	6827      	ldr	r7, [r4, #0]
 801020a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 801020c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801020e:	4638      	mov	r0, r7
 8010210:	4798      	blx	r3
 8010212:	2300      	movs	r3, #0
 8010214:	6023      	str	r3, [r4, #0]
 8010216:	2701      	movs	r7, #1
 8010218:	e7c8      	b.n	80101ac <rcl_subscription_init+0xc4>
 801021a:	2867      	cmp	r0, #103	; 0x67
 801021c:	d0c6      	beq.n	80101ac <rcl_subscription_init+0xc4>
 801021e:	2869      	cmp	r0, #105	; 0x69
 8010220:	d003      	beq.n	801022a <rcl_subscription_init+0x142>
 8010222:	280a      	cmp	r0, #10
 8010224:	d1f7      	bne.n	8010216 <rcl_subscription_init+0x12e>
 8010226:	270a      	movs	r7, #10
 8010228:	e7c0      	b.n	80101ac <rcl_subscription_init+0xc4>
 801022a:	2767      	movs	r7, #103	; 0x67
 801022c:	e7be      	b.n	80101ac <rcl_subscription_init+0xc4>
 801022e:	f7ff f8fd 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 8010232:	6827      	ldr	r7, [r4, #0]
 8010234:	e7e9      	b.n	801020a <rcl_subscription_init+0x122>
 8010236:	bf00      	nop

08010238 <rcl_subscription_get_default_options>:
 8010238:	b570      	push	{r4, r5, r6, lr}
 801023a:	4d14      	ldr	r5, [pc, #80]	; (801028c <rcl_subscription_get_default_options+0x54>)
 801023c:	4914      	ldr	r1, [pc, #80]	; (8010290 <rcl_subscription_get_default_options+0x58>)
 801023e:	b08a      	sub	sp, #40	; 0x28
 8010240:	4604      	mov	r4, r0
 8010242:	2250      	movs	r2, #80	; 0x50
 8010244:	4628      	mov	r0, r5
 8010246:	f006 fb60 	bl	801690a <memcpy>
 801024a:	a804      	add	r0, sp, #16
 801024c:	f7fa fa42 	bl	800a6d4 <rcutils_get_default_allocator>
 8010250:	f10d 0c10 	add.w	ip, sp, #16
 8010254:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010258:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 801025c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010260:	466e      	mov	r6, sp
 8010262:	f8dc 3000 	ldr.w	r3, [ip]
 8010266:	f8ce 3000 	str.w	r3, [lr]
 801026a:	4630      	mov	r0, r6
 801026c:	f002 f966 	bl	801253c <rmw_get_default_subscription_options>
 8010270:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010274:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8010278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801027c:	2270      	movs	r2, #112	; 0x70
 801027e:	4629      	mov	r1, r5
 8010280:	4620      	mov	r0, r4
 8010282:	f006 fb42 	bl	801690a <memcpy>
 8010286:	4620      	mov	r0, r4
 8010288:	b00a      	add	sp, #40	; 0x28
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	20013020 	.word	0x20013020
 8010290:	08017c90 	.word	0x08017c90

08010294 <rcl_take>:
 8010294:	2800      	cmp	r0, #0
 8010296:	d04a      	beq.n	801032e <rcl_take+0x9a>
 8010298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801029c:	4604      	mov	r4, r0
 801029e:	6800      	ldr	r0, [r0, #0]
 80102a0:	b0a4      	sub	sp, #144	; 0x90
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d03b      	beq.n	801031e <rcl_take+0x8a>
 80102a6:	461f      	mov	r7, r3
 80102a8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d036      	beq.n	801031e <rcl_take+0x8a>
 80102b0:	460e      	mov	r6, r1
 80102b2:	2900      	cmp	r1, #0
 80102b4:	d039      	beq.n	801032a <rcl_take+0x96>
 80102b6:	4615      	mov	r5, r2
 80102b8:	2a00      	cmp	r2, #0
 80102ba:	d03c      	beq.n	8010336 <rcl_take+0xa2>
 80102bc:	a802      	add	r0, sp, #8
 80102be:	f002 f9c7 	bl	8012650 <rmw_get_zero_initialized_message_info>
 80102c2:	f10d 0c08 	add.w	ip, sp, #8
 80102c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102ca:	46ae      	mov	lr, r5
 80102cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102e0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80102e4:	f04f 0800 	mov.w	r8, #0
 80102e8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80102ec:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 80102f0:	6822      	ldr	r2, [r4, #0]
 80102f2:	462b      	mov	r3, r5
 80102f4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 80102f8:	9700      	str	r7, [sp, #0]
 80102fa:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 80102fe:	4631      	mov	r1, r6
 8010300:	f003 fa2a 	bl	8013758 <rmw_take_with_info>
 8010304:	4603      	mov	r3, r0
 8010306:	b9c0      	cbnz	r0, 801033a <rcl_take+0xa6>
 8010308:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801030c:	f240 1291 	movw	r2, #401	; 0x191
 8010310:	2900      	cmp	r1, #0
 8010312:	bf08      	it	eq
 8010314:	4613      	moveq	r3, r2
 8010316:	4618      	mov	r0, r3
 8010318:	b024      	add	sp, #144	; 0x90
 801031a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801031e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010322:	4618      	mov	r0, r3
 8010324:	b024      	add	sp, #144	; 0x90
 8010326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801032a:	230b      	movs	r3, #11
 801032c:	e7f3      	b.n	8010316 <rcl_take+0x82>
 801032e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010332:	4618      	mov	r0, r3
 8010334:	4770      	bx	lr
 8010336:	ad14      	add	r5, sp, #80	; 0x50
 8010338:	e7c0      	b.n	80102bc <rcl_take+0x28>
 801033a:	f7ff f877 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 801033e:	4603      	mov	r3, r0
 8010340:	e7e9      	b.n	8010316 <rcl_take+0x82>
 8010342:	bf00      	nop

08010344 <rcl_subscription_get_rmw_handle>:
 8010344:	b118      	cbz	r0, 801034e <rcl_subscription_get_rmw_handle+0xa>
 8010346:	6800      	ldr	r0, [r0, #0]
 8010348:	b108      	cbz	r0, 801034e <rcl_subscription_get_rmw_handle+0xa>
 801034a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801034e:	4770      	bx	lr

08010350 <rcl_subscription_is_valid>:
 8010350:	b130      	cbz	r0, 8010360 <rcl_subscription_is_valid+0x10>
 8010352:	6800      	ldr	r0, [r0, #0]
 8010354:	b120      	cbz	r0, 8010360 <rcl_subscription_is_valid+0x10>
 8010356:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801035a:	3800      	subs	r0, #0
 801035c:	bf18      	it	ne
 801035e:	2001      	movne	r0, #1
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop

08010364 <rcl_get_system_time>:
 8010364:	4608      	mov	r0, r1
 8010366:	f7fa ba03 	b.w	800a770 <rcutils_system_time_now>
 801036a:	bf00      	nop

0801036c <rcl_get_steady_time>:
 801036c:	4608      	mov	r0, r1
 801036e:	f7fa ba27 	b.w	800a7c0 <rcutils_steady_time_now>
 8010372:	bf00      	nop

08010374 <rcl_get_ros_time>:
 8010374:	7a03      	ldrb	r3, [r0, #8]
 8010376:	b510      	push	{r4, lr}
 8010378:	460c      	mov	r4, r1
 801037a:	b133      	cbz	r3, 801038a <rcl_get_ros_time+0x16>
 801037c:	2105      	movs	r1, #5
 801037e:	f001 fd4f 	bl	8011e20 <__atomic_load_8>
 8010382:	e9c4 0100 	strd	r0, r1, [r4]
 8010386:	2000      	movs	r0, #0
 8010388:	bd10      	pop	{r4, pc}
 801038a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801038e:	4608      	mov	r0, r1
 8010390:	f7fa b9ee 	b.w	800a770 <rcutils_system_time_now>

08010394 <rcl_clock_init>:
 8010394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010396:	4605      	mov	r5, r0
 8010398:	4610      	mov	r0, r2
 801039a:	4614      	mov	r4, r2
 801039c:	460e      	mov	r6, r1
 801039e:	f7fa f9a7 	bl	800a6f0 <rcutils_allocator_is_valid>
 80103a2:	b128      	cbz	r0, 80103b0 <rcl_clock_init+0x1c>
 80103a4:	2d03      	cmp	r5, #3
 80103a6:	d803      	bhi.n	80103b0 <rcl_clock_init+0x1c>
 80103a8:	e8df f005 	tbb	[pc, r5]
 80103ac:	06532e1d 	.word	0x06532e1d
 80103b0:	f04f 0c0b 	mov.w	ip, #11
 80103b4:	4660      	mov	r0, ip
 80103b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103b8:	2e00      	cmp	r6, #0
 80103ba:	d0f9      	beq.n	80103b0 <rcl_clock_init+0x1c>
 80103bc:	2c00      	cmp	r4, #0
 80103be:	d0f7      	beq.n	80103b0 <rcl_clock_init+0x1c>
 80103c0:	2300      	movs	r3, #0
 80103c2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80103c6:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 801047c <rcl_clock_init+0xe8>
 80103ca:	6133      	str	r3, [r6, #16]
 80103cc:	f106 0514 	add.w	r5, r6, #20
 80103d0:	469c      	mov	ip, r3
 80103d2:	2703      	movs	r7, #3
 80103d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80103d8:	6823      	ldr	r3, [r4, #0]
 80103da:	602b      	str	r3, [r5, #0]
 80103dc:	7037      	strb	r7, [r6, #0]
 80103de:	f8c6 e00c 	str.w	lr, [r6, #12]
 80103e2:	4660      	mov	r0, ip
 80103e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e6:	2e00      	cmp	r6, #0
 80103e8:	d0e2      	beq.n	80103b0 <rcl_clock_init+0x1c>
 80103ea:	2300      	movs	r3, #0
 80103ec:	7033      	strb	r3, [r6, #0]
 80103ee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80103f2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80103f6:	469c      	mov	ip, r3
 80103f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103fa:	f106 0514 	add.w	r5, r6, #20
 80103fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010400:	6823      	ldr	r3, [r4, #0]
 8010402:	602b      	str	r3, [r5, #0]
 8010404:	4660      	mov	r0, ip
 8010406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010408:	2e00      	cmp	r6, #0
 801040a:	d0d1      	beq.n	80103b0 <rcl_clock_init+0x1c>
 801040c:	2c00      	cmp	r4, #0
 801040e:	d0cf      	beq.n	80103b0 <rcl_clock_init+0x1c>
 8010410:	2700      	movs	r7, #0
 8010412:	7037      	strb	r7, [r6, #0]
 8010414:	46a4      	mov	ip, r4
 8010416:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801041a:	f106 0514 	add.w	r5, r6, #20
 801041e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010422:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010428:	f8dc 3000 	ldr.w	r3, [ip]
 801042c:	602b      	str	r3, [r5, #0]
 801042e:	6921      	ldr	r1, [r4, #16]
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	2010      	movs	r0, #16
 8010434:	4798      	blx	r3
 8010436:	6130      	str	r0, [r6, #16]
 8010438:	b1d0      	cbz	r0, 8010470 <rcl_clock_init+0xdc>
 801043a:	2200      	movs	r2, #0
 801043c:	2300      	movs	r3, #0
 801043e:	e9c0 2300 	strd	r2, r3, [r0]
 8010442:	2301      	movs	r3, #1
 8010444:	7207      	strb	r7, [r0, #8]
 8010446:	4a0c      	ldr	r2, [pc, #48]	; (8010478 <rcl_clock_init+0xe4>)
 8010448:	7033      	strb	r3, [r6, #0]
 801044a:	46bc      	mov	ip, r7
 801044c:	60f2      	str	r2, [r6, #12]
 801044e:	4660      	mov	r0, ip
 8010450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010452:	2e00      	cmp	r6, #0
 8010454:	d0ac      	beq.n	80103b0 <rcl_clock_init+0x1c>
 8010456:	2c00      	cmp	r4, #0
 8010458:	d0aa      	beq.n	80103b0 <rcl_clock_init+0x1c>
 801045a:	2300      	movs	r3, #0
 801045c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010460:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8010480 <rcl_clock_init+0xec>
 8010464:	6133      	str	r3, [r6, #16]
 8010466:	f106 0514 	add.w	r5, r6, #20
 801046a:	469c      	mov	ip, r3
 801046c:	2702      	movs	r7, #2
 801046e:	e7b1      	b.n	80103d4 <rcl_clock_init+0x40>
 8010470:	f04f 0c0a 	mov.w	ip, #10
 8010474:	e79e      	b.n	80103b4 <rcl_clock_init+0x20>
 8010476:	bf00      	nop
 8010478:	08010375 	.word	0x08010375
 801047c:	0801036d 	.word	0x0801036d
 8010480:	08010365 	.word	0x08010365

08010484 <rcl_clock_get_now>:
 8010484:	b140      	cbz	r0, 8010498 <rcl_clock_get_now+0x14>
 8010486:	b139      	cbz	r1, 8010498 <rcl_clock_get_now+0x14>
 8010488:	7803      	ldrb	r3, [r0, #0]
 801048a:	b11b      	cbz	r3, 8010494 <rcl_clock_get_now+0x10>
 801048c:	68c3      	ldr	r3, [r0, #12]
 801048e:	b10b      	cbz	r3, 8010494 <rcl_clock_get_now+0x10>
 8010490:	6900      	ldr	r0, [r0, #16]
 8010492:	4718      	bx	r3
 8010494:	2001      	movs	r0, #1
 8010496:	4770      	bx	lr
 8010498:	200b      	movs	r0, #11
 801049a:	4770      	bx	lr

0801049c <rcl_timer_call>:
 801049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a0:	b087      	sub	sp, #28
 80104a2:	2800      	cmp	r0, #0
 80104a4:	d06d      	beq.n	8010582 <rcl_timer_call+0xe6>
 80104a6:	6803      	ldr	r3, [r0, #0]
 80104a8:	4604      	mov	r4, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d063      	beq.n	8010576 <rcl_timer_call+0xda>
 80104ae:	f3bf 8f5b 	dmb	ish
 80104b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80104b6:	f3bf 8f5b 	dmb	ish
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d150      	bne.n	8010560 <rcl_timer_call+0xc4>
 80104be:	6803      	ldr	r3, [r0, #0]
 80104c0:	a904      	add	r1, sp, #16
 80104c2:	6818      	ldr	r0, [r3, #0]
 80104c4:	f7ff ffde 	bl	8010484 <rcl_clock_get_now>
 80104c8:	4605      	mov	r5, r0
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d14a      	bne.n	8010564 <rcl_timer_call+0xc8>
 80104ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	db4a      	blt.n	801056c <rcl_timer_call+0xd0>
 80104d6:	6820      	ldr	r0, [r4, #0]
 80104d8:	f04f 0a05 	mov.w	sl, #5
 80104dc:	f8cd a000 	str.w	sl, [sp]
 80104e0:	3020      	adds	r0, #32
 80104e2:	f001 fd09 	bl	8011ef8 <__atomic_exchange_8>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	f3bf 8f5b 	dmb	ish
 80104ec:	4680      	mov	r8, r0
 80104ee:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80104f2:	f3bf 8f5b 	dmb	ish
 80104f6:	6820      	ldr	r0, [r4, #0]
 80104f8:	4689      	mov	r9, r1
 80104fa:	3028      	adds	r0, #40	; 0x28
 80104fc:	4651      	mov	r1, sl
 80104fe:	f001 fc8f 	bl	8011e20 <__atomic_load_8>
 8010502:	4606      	mov	r6, r0
 8010504:	6820      	ldr	r0, [r4, #0]
 8010506:	460f      	mov	r7, r1
 8010508:	3018      	adds	r0, #24
 801050a:	4651      	mov	r1, sl
 801050c:	f001 fc88 	bl	8011e20 <__atomic_load_8>
 8010510:	1836      	adds	r6, r6, r0
 8010512:	4602      	mov	r2, r0
 8010514:	4682      	mov	sl, r0
 8010516:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801051a:	eb47 0701 	adc.w	r7, r7, r1
 801051e:	4286      	cmp	r6, r0
 8010520:	460b      	mov	r3, r1
 8010522:	eb77 010c 	sbcs.w	r1, r7, ip
 8010526:	da04      	bge.n	8010532 <rcl_timer_call+0x96>
 8010528:	ea53 0102 	orrs.w	r1, r3, r2
 801052c:	d12e      	bne.n	801058c <rcl_timer_call+0xf0>
 801052e:	4606      	mov	r6, r0
 8010530:	4667      	mov	r7, ip
 8010532:	6820      	ldr	r0, [r4, #0]
 8010534:	2105      	movs	r1, #5
 8010536:	4632      	mov	r2, r6
 8010538:	463b      	mov	r3, r7
 801053a:	3028      	adds	r0, #40	; 0x28
 801053c:	9100      	str	r1, [sp, #0]
 801053e:	f001 fca5 	bl	8011e8c <__atomic_store_8>
 8010542:	f1bb 0f00 	cmp.w	fp, #0
 8010546:	d00d      	beq.n	8010564 <rcl_timer_call+0xc8>
 8010548:	9a04      	ldr	r2, [sp, #16]
 801054a:	9b05      	ldr	r3, [sp, #20]
 801054c:	ebb2 0208 	subs.w	r2, r2, r8
 8010550:	4620      	mov	r0, r4
 8010552:	eb63 0309 	sbc.w	r3, r3, r9
 8010556:	47d8      	blx	fp
 8010558:	4628      	mov	r0, r5
 801055a:	b007      	add	sp, #28
 801055c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010560:	f240 3521 	movw	r5, #801	; 0x321
 8010564:	4628      	mov	r0, r5
 8010566:	b007      	add	sp, #28
 8010568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056c:	2501      	movs	r5, #1
 801056e:	4628      	mov	r0, r5
 8010570:	b007      	add	sp, #28
 8010572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010576:	f44f 7548 	mov.w	r5, #800	; 0x320
 801057a:	4628      	mov	r0, r5
 801057c:	b007      	add	sp, #28
 801057e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010582:	250b      	movs	r5, #11
 8010584:	4628      	mov	r0, r5
 8010586:	b007      	add	sp, #28
 8010588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058c:	1b80      	subs	r0, r0, r6
 801058e:	eb6c 0107 	sbc.w	r1, ip, r7
 8010592:	3801      	subs	r0, #1
 8010594:	f161 0100 	sbc.w	r1, r1, #0
 8010598:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801059c:	f7ef fea0 	bl	80002e0 <__aeabi_ldivmod>
 80105a0:	9b02      	ldr	r3, [sp, #8]
 80105a2:	3001      	adds	r0, #1
 80105a4:	f141 0100 	adc.w	r1, r1, #0
 80105a8:	fb00 f303 	mul.w	r3, r0, r3
 80105ac:	fb01 330a 	mla	r3, r1, sl, r3
 80105b0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80105b4:	1986      	adds	r6, r0, r6
 80105b6:	4453      	add	r3, sl
 80105b8:	eb43 0707 	adc.w	r7, r3, r7
 80105bc:	e7b9      	b.n	8010532 <rcl_timer_call+0x96>
 80105be:	bf00      	nop

080105c0 <rcl_timer_is_ready>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	b378      	cbz	r0, 8010626 <rcl_timer_is_ready+0x66>
 80105c6:	6803      	ldr	r3, [r0, #0]
 80105c8:	4604      	mov	r4, r0
 80105ca:	b383      	cbz	r3, 801062e <rcl_timer_is_ready+0x6e>
 80105cc:	460d      	mov	r5, r1
 80105ce:	b351      	cbz	r1, 8010626 <rcl_timer_is_ready+0x66>
 80105d0:	f3bf 8f5b 	dmb	ish
 80105d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105d8:	f3bf 8f5b 	dmb	ish
 80105dc:	b953      	cbnz	r3, 80105f4 <rcl_timer_is_ready+0x34>
 80105de:	6803      	ldr	r3, [r0, #0]
 80105e0:	4669      	mov	r1, sp
 80105e2:	6818      	ldr	r0, [r3, #0]
 80105e4:	f7ff ff4e 	bl	8010484 <rcl_clock_get_now>
 80105e8:	4606      	mov	r6, r0
 80105ea:	b140      	cbz	r0, 80105fe <rcl_timer_is_ready+0x3e>
 80105ec:	f240 3321 	movw	r3, #801	; 0x321
 80105f0:	4298      	cmp	r0, r3
 80105f2:	d101      	bne.n	80105f8 <rcl_timer_is_ready+0x38>
 80105f4:	2600      	movs	r6, #0
 80105f6:	702e      	strb	r6, [r5, #0]
 80105f8:	4630      	mov	r0, r6
 80105fa:	b002      	add	sp, #8
 80105fc:	bd70      	pop	{r4, r5, r6, pc}
 80105fe:	6820      	ldr	r0, [r4, #0]
 8010600:	2105      	movs	r1, #5
 8010602:	3028      	adds	r0, #40	; 0x28
 8010604:	f001 fc0c 	bl	8011e20 <__atomic_load_8>
 8010608:	9b00      	ldr	r3, [sp, #0]
 801060a:	1ac0      	subs	r0, r0, r3
 801060c:	9b01      	ldr	r3, [sp, #4]
 801060e:	eb61 0103 	sbc.w	r1, r1, r3
 8010612:	2801      	cmp	r0, #1
 8010614:	f171 0300 	sbcs.w	r3, r1, #0
 8010618:	bfb4      	ite	lt
 801061a:	2301      	movlt	r3, #1
 801061c:	2300      	movge	r3, #0
 801061e:	4630      	mov	r0, r6
 8010620:	702b      	strb	r3, [r5, #0]
 8010622:	b002      	add	sp, #8
 8010624:	bd70      	pop	{r4, r5, r6, pc}
 8010626:	260b      	movs	r6, #11
 8010628:	4630      	mov	r0, r6
 801062a:	b002      	add	sp, #8
 801062c:	bd70      	pop	{r4, r5, r6, pc}
 801062e:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010632:	e7e1      	b.n	80105f8 <rcl_timer_is_ready+0x38>

08010634 <rcl_timer_get_time_until_next_call>:
 8010634:	b570      	push	{r4, r5, r6, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	b330      	cbz	r0, 8010688 <rcl_timer_get_time_until_next_call+0x54>
 801063a:	6803      	ldr	r3, [r0, #0]
 801063c:	4604      	mov	r4, r0
 801063e:	b33b      	cbz	r3, 8010690 <rcl_timer_get_time_until_next_call+0x5c>
 8010640:	460d      	mov	r5, r1
 8010642:	b309      	cbz	r1, 8010688 <rcl_timer_get_time_until_next_call+0x54>
 8010644:	f3bf 8f5b 	dmb	ish
 8010648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801064c:	f3bf 8f5b 	dmb	ish
 8010650:	b9ab      	cbnz	r3, 801067e <rcl_timer_get_time_until_next_call+0x4a>
 8010652:	6803      	ldr	r3, [r0, #0]
 8010654:	4669      	mov	r1, sp
 8010656:	6818      	ldr	r0, [r3, #0]
 8010658:	f7ff ff14 	bl	8010484 <rcl_clock_get_now>
 801065c:	4606      	mov	r6, r0
 801065e:	b958      	cbnz	r0, 8010678 <rcl_timer_get_time_until_next_call+0x44>
 8010660:	6820      	ldr	r0, [r4, #0]
 8010662:	2105      	movs	r1, #5
 8010664:	3028      	adds	r0, #40	; 0x28
 8010666:	f001 fbdb 	bl	8011e20 <__atomic_load_8>
 801066a:	9b00      	ldr	r3, [sp, #0]
 801066c:	1ac0      	subs	r0, r0, r3
 801066e:	9b01      	ldr	r3, [sp, #4]
 8010670:	6028      	str	r0, [r5, #0]
 8010672:	eb61 0103 	sbc.w	r1, r1, r3
 8010676:	6069      	str	r1, [r5, #4]
 8010678:	4630      	mov	r0, r6
 801067a:	b002      	add	sp, #8
 801067c:	bd70      	pop	{r4, r5, r6, pc}
 801067e:	f240 3621 	movw	r6, #801	; 0x321
 8010682:	4630      	mov	r0, r6
 8010684:	b002      	add	sp, #8
 8010686:	bd70      	pop	{r4, r5, r6, pc}
 8010688:	260b      	movs	r6, #11
 801068a:	4630      	mov	r0, r6
 801068c:	b002      	add	sp, #8
 801068e:	bd70      	pop	{r4, r5, r6, pc}
 8010690:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010694:	e7f0      	b.n	8010678 <rcl_timer_get_time_until_next_call+0x44>
 8010696:	bf00      	nop

08010698 <rcl_timer_get_guard_condition>:
 8010698:	b130      	cbz	r0, 80106a8 <rcl_timer_get_guard_condition+0x10>
 801069a:	6800      	ldr	r0, [r0, #0]
 801069c:	b120      	cbz	r0, 80106a8 <rcl_timer_get_guard_condition+0x10>
 801069e:	68c3      	ldr	r3, [r0, #12]
 80106a0:	b10b      	cbz	r3, 80106a6 <rcl_timer_get_guard_condition+0xe>
 80106a2:	3008      	adds	r0, #8
 80106a4:	4770      	bx	lr
 80106a6:	4618      	mov	r0, r3
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop

080106ac <rcl_validate_enclave_name_with_size>:
 80106ac:	b378      	cbz	r0, 801070e <rcl_validate_enclave_name_with_size+0x62>
 80106ae:	b570      	push	{r4, r5, r6, lr}
 80106b0:	4615      	mov	r5, r2
 80106b2:	b0c2      	sub	sp, #264	; 0x108
 80106b4:	b302      	cbz	r2, 80106f8 <rcl_validate_enclave_name_with_size+0x4c>
 80106b6:	461e      	mov	r6, r3
 80106b8:	466a      	mov	r2, sp
 80106ba:	ab01      	add	r3, sp, #4
 80106bc:	460c      	mov	r4, r1
 80106be:	f002 f845 	bl	801274c <rmw_validate_namespace_with_size>
 80106c2:	4684      	mov	ip, r0
 80106c4:	b9e8      	cbnz	r0, 8010702 <rcl_validate_enclave_name_with_size+0x56>
 80106c6:	9b00      	ldr	r3, [sp, #0]
 80106c8:	b923      	cbnz	r3, 80106d4 <rcl_validate_enclave_name_with_size+0x28>
 80106ca:	2300      	movs	r3, #0
 80106cc:	602b      	str	r3, [r5, #0]
 80106ce:	4660      	mov	r0, ip
 80106d0:	b042      	add	sp, #264	; 0x108
 80106d2:	bd70      	pop	{r4, r5, r6, pc}
 80106d4:	2b07      	cmp	r3, #7
 80106d6:	d007      	beq.n	80106e8 <rcl_validate_enclave_name_with_size+0x3c>
 80106d8:	1e5a      	subs	r2, r3, #1
 80106da:	2a05      	cmp	r2, #5
 80106dc:	d833      	bhi.n	8010746 <rcl_validate_enclave_name_with_size+0x9a>
 80106de:	e8df f002 	tbb	[pc, r2]
 80106e2:	2c2f      	.short	0x2c2f
 80106e4:	1a232629 	.word	0x1a232629
 80106e8:	2cff      	cmp	r4, #255	; 0xff
 80106ea:	d9ee      	bls.n	80106ca <rcl_validate_enclave_name_with_size+0x1e>
 80106ec:	602b      	str	r3, [r5, #0]
 80106ee:	2e00      	cmp	r6, #0
 80106f0:	d0ed      	beq.n	80106ce <rcl_validate_enclave_name_with_size+0x22>
 80106f2:	23fe      	movs	r3, #254	; 0xfe
 80106f4:	6033      	str	r3, [r6, #0]
 80106f6:	e7ea      	b.n	80106ce <rcl_validate_enclave_name_with_size+0x22>
 80106f8:	f04f 0c0b 	mov.w	ip, #11
 80106fc:	4660      	mov	r0, ip
 80106fe:	b042      	add	sp, #264	; 0x108
 8010700:	bd70      	pop	{r4, r5, r6, pc}
 8010702:	f7fe fe93 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 8010706:	4684      	mov	ip, r0
 8010708:	4660      	mov	r0, ip
 801070a:	b042      	add	sp, #264	; 0x108
 801070c:	bd70      	pop	{r4, r5, r6, pc}
 801070e:	f04f 0c0b 	mov.w	ip, #11
 8010712:	4660      	mov	r0, ip
 8010714:	4770      	bx	lr
 8010716:	2306      	movs	r3, #6
 8010718:	602b      	str	r3, [r5, #0]
 801071a:	2e00      	cmp	r6, #0
 801071c:	d0d7      	beq.n	80106ce <rcl_validate_enclave_name_with_size+0x22>
 801071e:	9b01      	ldr	r3, [sp, #4]
 8010720:	6033      	str	r3, [r6, #0]
 8010722:	4660      	mov	r0, ip
 8010724:	b042      	add	sp, #264	; 0x108
 8010726:	bd70      	pop	{r4, r5, r6, pc}
 8010728:	2305      	movs	r3, #5
 801072a:	602b      	str	r3, [r5, #0]
 801072c:	e7f5      	b.n	801071a <rcl_validate_enclave_name_with_size+0x6e>
 801072e:	2304      	movs	r3, #4
 8010730:	602b      	str	r3, [r5, #0]
 8010732:	e7f2      	b.n	801071a <rcl_validate_enclave_name_with_size+0x6e>
 8010734:	2303      	movs	r3, #3
 8010736:	602b      	str	r3, [r5, #0]
 8010738:	e7ef      	b.n	801071a <rcl_validate_enclave_name_with_size+0x6e>
 801073a:	2302      	movs	r3, #2
 801073c:	602b      	str	r3, [r5, #0]
 801073e:	e7ec      	b.n	801071a <rcl_validate_enclave_name_with_size+0x6e>
 8010740:	2301      	movs	r3, #1
 8010742:	602b      	str	r3, [r5, #0]
 8010744:	e7e9      	b.n	801071a <rcl_validate_enclave_name_with_size+0x6e>
 8010746:	4a04      	ldr	r2, [pc, #16]	; (8010758 <rcl_validate_enclave_name_with_size+0xac>)
 8010748:	f44f 7180 	mov.w	r1, #256	; 0x100
 801074c:	a802      	add	r0, sp, #8
 801074e:	f001 fd21 	bl	8012194 <rcutils_snprintf>
 8010752:	f04f 0c01 	mov.w	ip, #1
 8010756:	e7ba      	b.n	80106ce <rcl_validate_enclave_name_with_size+0x22>
 8010758:	08017ce0 	.word	0x08017ce0

0801075c <rcl_validate_enclave_name>:
 801075c:	b168      	cbz	r0, 801077a <rcl_validate_enclave_name+0x1e>
 801075e:	b570      	push	{r4, r5, r6, lr}
 8010760:	460d      	mov	r5, r1
 8010762:	4616      	mov	r6, r2
 8010764:	4604      	mov	r4, r0
 8010766:	f7ef fd5d 	bl	8000224 <strlen>
 801076a:	4633      	mov	r3, r6
 801076c:	4601      	mov	r1, r0
 801076e:	462a      	mov	r2, r5
 8010770:	4620      	mov	r0, r4
 8010772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010776:	f7ff bf99 	b.w	80106ac <rcl_validate_enclave_name_with_size>
 801077a:	200b      	movs	r0, #11
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop

08010780 <rcl_get_zero_initialized_wait_set>:
 8010780:	b510      	push	{r4, lr}
 8010782:	4c08      	ldr	r4, [pc, #32]	; (80107a4 <rcl_get_zero_initialized_wait_set+0x24>)
 8010784:	4686      	mov	lr, r0
 8010786:	4684      	mov	ip, r0
 8010788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801078a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801078e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010790:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010796:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	f8cc 3000 	str.w	r3, [ip]
 80107a0:	4670      	mov	r0, lr
 80107a2:	bd10      	pop	{r4, pc}
 80107a4:	08017d40 	.word	0x08017d40

080107a8 <rcl_wait_set_is_valid>:
 80107a8:	b118      	cbz	r0, 80107b2 <rcl_wait_set_is_valid+0xa>
 80107aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80107ac:	3800      	subs	r0, #0
 80107ae:	bf18      	it	ne
 80107b0:	2001      	movne	r0, #1
 80107b2:	4770      	bx	lr

080107b4 <rcl_wait_set_fini>:
 80107b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b8:	b082      	sub	sp, #8
 80107ba:	2800      	cmp	r0, #0
 80107bc:	f000 8095 	beq.w	80108ea <rcl_wait_set_fini+0x136>
 80107c0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80107c2:	4604      	mov	r4, r0
 80107c4:	2e00      	cmp	r6, #0
 80107c6:	f000 808c 	beq.w	80108e2 <rcl_wait_set_fini+0x12e>
 80107ca:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80107cc:	f003 f9b2 	bl	8013b34 <rmw_destroy_wait_set>
 80107d0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80107d2:	1e06      	subs	r6, r0, #0
 80107d4:	bf18      	it	ne
 80107d6:	f44f 7661 	movne.w	r6, #900	; 0x384
 80107da:	2d00      	cmp	r5, #0
 80107dc:	f000 8081 	beq.w	80108e2 <rcl_wait_set_fini+0x12e>
 80107e0:	6820      	ldr	r0, [r4, #0]
 80107e2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80107e6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80107e8:	2700      	movs	r7, #0
 80107ea:	6067      	str	r7, [r4, #4]
 80107ec:	602f      	str	r7, [r5, #0]
 80107ee:	b120      	cbz	r0, 80107fa <rcl_wait_set_fini+0x46>
 80107f0:	9101      	str	r1, [sp, #4]
 80107f2:	47c0      	blx	r8
 80107f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80107f6:	9901      	ldr	r1, [sp, #4]
 80107f8:	6027      	str	r7, [r4, #0]
 80107fa:	68a8      	ldr	r0, [r5, #8]
 80107fc:	b120      	cbz	r0, 8010808 <rcl_wait_set_fini+0x54>
 80107fe:	47c0      	blx	r8
 8010800:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010802:	2300      	movs	r3, #0
 8010804:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010808:	68a0      	ldr	r0, [r4, #8]
 801080a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801080c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801080e:	f04f 0800 	mov.w	r8, #0
 8010812:	f8c4 800c 	str.w	r8, [r4, #12]
 8010816:	f8c5 800c 	str.w	r8, [r5, #12]
 801081a:	b128      	cbz	r0, 8010828 <rcl_wait_set_fini+0x74>
 801081c:	47b8      	blx	r7
 801081e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010820:	f8c4 8008 	str.w	r8, [r4, #8]
 8010824:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010826:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010828:	6968      	ldr	r0, [r5, #20]
 801082a:	f04f 0800 	mov.w	r8, #0
 801082e:	f8c5 8010 	str.w	r8, [r5, #16]
 8010832:	b128      	cbz	r0, 8010840 <rcl_wait_set_fini+0x8c>
 8010834:	47b8      	blx	r7
 8010836:	f8c5 8014 	str.w	r8, [r5, #20]
 801083a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801083c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801083e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010840:	6920      	ldr	r0, [r4, #16]
 8010842:	f04f 0800 	mov.w	r8, #0
 8010846:	f8c4 8014 	str.w	r8, [r4, #20]
 801084a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801084e:	b128      	cbz	r0, 801085c <rcl_wait_set_fini+0xa8>
 8010850:	47b8      	blx	r7
 8010852:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010854:	f8c4 8010 	str.w	r8, [r4, #16]
 8010858:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801085a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801085c:	69a0      	ldr	r0, [r4, #24]
 801085e:	f04f 0800 	mov.w	r8, #0
 8010862:	f8c4 801c 	str.w	r8, [r4, #28]
 8010866:	f8c5 8018 	str.w	r8, [r5, #24]
 801086a:	b128      	cbz	r0, 8010878 <rcl_wait_set_fini+0xc4>
 801086c:	9101      	str	r1, [sp, #4]
 801086e:	47b8      	blx	r7
 8010870:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010872:	9901      	ldr	r1, [sp, #4]
 8010874:	f8c4 8018 	str.w	r8, [r4, #24]
 8010878:	6a28      	ldr	r0, [r5, #32]
 801087a:	b120      	cbz	r0, 8010886 <rcl_wait_set_fini+0xd2>
 801087c:	47b8      	blx	r7
 801087e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010880:	2300      	movs	r3, #0
 8010882:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010886:	6a20      	ldr	r0, [r4, #32]
 8010888:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801088c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801088e:	2700      	movs	r7, #0
 8010890:	6267      	str	r7, [r4, #36]	; 0x24
 8010892:	626f      	str	r7, [r5, #36]	; 0x24
 8010894:	b120      	cbz	r0, 80108a0 <rcl_wait_set_fini+0xec>
 8010896:	9101      	str	r1, [sp, #4]
 8010898:	47c0      	blx	r8
 801089a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801089c:	9901      	ldr	r1, [sp, #4]
 801089e:	6227      	str	r7, [r4, #32]
 80108a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80108a2:	b120      	cbz	r0, 80108ae <rcl_wait_set_fini+0xfa>
 80108a4:	47c0      	blx	r8
 80108a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80108a8:	2300      	movs	r3, #0
 80108aa:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80108ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80108b0:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80108b4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80108b6:	2700      	movs	r7, #0
 80108b8:	62e7      	str	r7, [r4, #44]	; 0x2c
 80108ba:	632f      	str	r7, [r5, #48]	; 0x30
 80108bc:	b120      	cbz	r0, 80108c8 <rcl_wait_set_fini+0x114>
 80108be:	9101      	str	r1, [sp, #4]
 80108c0:	47c0      	blx	r8
 80108c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80108c4:	9901      	ldr	r1, [sp, #4]
 80108c6:	62a7      	str	r7, [r4, #40]	; 0x28
 80108c8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80108ca:	b120      	cbz	r0, 80108d6 <rcl_wait_set_fini+0x122>
 80108cc:	47c0      	blx	r8
 80108ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80108d0:	2300      	movs	r3, #0
 80108d2:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80108d6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80108d8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80108da:	4628      	mov	r0, r5
 80108dc:	4798      	blx	r3
 80108de:	2300      	movs	r3, #0
 80108e0:	6323      	str	r3, [r4, #48]	; 0x30
 80108e2:	4630      	mov	r0, r6
 80108e4:	b002      	add	sp, #8
 80108e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ea:	260b      	movs	r6, #11
 80108ec:	4630      	mov	r0, r6
 80108ee:	b002      	add	sp, #8
 80108f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108f4 <rcl_wait_set_add_subscription>:
 80108f4:	b318      	cbz	r0, 801093e <rcl_wait_set_add_subscription+0x4a>
 80108f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	4604      	mov	r4, r0
 80108fc:	b30b      	cbz	r3, 8010942 <rcl_wait_set_add_subscription+0x4e>
 80108fe:	b319      	cbz	r1, 8010948 <rcl_wait_set_add_subscription+0x54>
 8010900:	681d      	ldr	r5, [r3, #0]
 8010902:	6840      	ldr	r0, [r0, #4]
 8010904:	4285      	cmp	r5, r0
 8010906:	d217      	bcs.n	8010938 <rcl_wait_set_add_subscription+0x44>
 8010908:	6820      	ldr	r0, [r4, #0]
 801090a:	1c6e      	adds	r6, r5, #1
 801090c:	601e      	str	r6, [r3, #0]
 801090e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010912:	b102      	cbz	r2, 8010916 <rcl_wait_set_add_subscription+0x22>
 8010914:	6015      	str	r5, [r2, #0]
 8010916:	4608      	mov	r0, r1
 8010918:	f7ff fd14 	bl	8010344 <rcl_subscription_get_rmw_handle>
 801091c:	b150      	cbz	r0, 8010934 <rcl_wait_set_add_subscription+0x40>
 801091e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010920:	6842      	ldr	r2, [r0, #4]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010928:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801092a:	6853      	ldr	r3, [r2, #4]
 801092c:	3301      	adds	r3, #1
 801092e:	2000      	movs	r0, #0
 8010930:	6053      	str	r3, [r2, #4]
 8010932:	bd70      	pop	{r4, r5, r6, pc}
 8010934:	2001      	movs	r0, #1
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	f240 3086 	movw	r0, #902	; 0x386
 801093c:	bd70      	pop	{r4, r5, r6, pc}
 801093e:	200b      	movs	r0, #11
 8010940:	4770      	bx	lr
 8010942:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010946:	bd70      	pop	{r4, r5, r6, pc}
 8010948:	200b      	movs	r0, #11
 801094a:	bd70      	pop	{r4, r5, r6, pc}

0801094c <rcl_wait_set_clear>:
 801094c:	2800      	cmp	r0, #0
 801094e:	d073      	beq.n	8010a38 <rcl_wait_set_clear+0xec>
 8010950:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010952:	b510      	push	{r4, lr}
 8010954:	4604      	mov	r4, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d070      	beq.n	8010a3c <rcl_wait_set_clear+0xf0>
 801095a:	6800      	ldr	r0, [r0, #0]
 801095c:	b138      	cbz	r0, 801096e <rcl_wait_set_clear+0x22>
 801095e:	6862      	ldr	r2, [r4, #4]
 8010960:	2100      	movs	r1, #0
 8010962:	0092      	lsls	r2, r2, #2
 8010964:	f005 ff08 	bl	8016778 <memset>
 8010968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801096a:	2200      	movs	r2, #0
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	68a0      	ldr	r0, [r4, #8]
 8010970:	b138      	cbz	r0, 8010982 <rcl_wait_set_clear+0x36>
 8010972:	68e2      	ldr	r2, [r4, #12]
 8010974:	2100      	movs	r1, #0
 8010976:	0092      	lsls	r2, r2, #2
 8010978:	f005 fefe 	bl	8016778 <memset>
 801097c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801097e:	2200      	movs	r2, #0
 8010980:	60da      	str	r2, [r3, #12]
 8010982:	69a0      	ldr	r0, [r4, #24]
 8010984:	b138      	cbz	r0, 8010996 <rcl_wait_set_clear+0x4a>
 8010986:	69e2      	ldr	r2, [r4, #28]
 8010988:	2100      	movs	r1, #0
 801098a:	0092      	lsls	r2, r2, #2
 801098c:	f005 fef4 	bl	8016778 <memset>
 8010990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010992:	2200      	movs	r2, #0
 8010994:	619a      	str	r2, [r3, #24]
 8010996:	6a20      	ldr	r0, [r4, #32]
 8010998:	b138      	cbz	r0, 80109aa <rcl_wait_set_clear+0x5e>
 801099a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801099c:	2100      	movs	r1, #0
 801099e:	0092      	lsls	r2, r2, #2
 80109a0:	f005 feea 	bl	8016778 <memset>
 80109a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80109a6:	2200      	movs	r2, #0
 80109a8:	625a      	str	r2, [r3, #36]	; 0x24
 80109aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80109ac:	b138      	cbz	r0, 80109be <rcl_wait_set_clear+0x72>
 80109ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80109b0:	2100      	movs	r1, #0
 80109b2:	0092      	lsls	r2, r2, #2
 80109b4:	f005 fee0 	bl	8016778 <memset>
 80109b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80109ba:	2200      	movs	r2, #0
 80109bc:	631a      	str	r2, [r3, #48]	; 0x30
 80109be:	6920      	ldr	r0, [r4, #16]
 80109c0:	b138      	cbz	r0, 80109d2 <rcl_wait_set_clear+0x86>
 80109c2:	6962      	ldr	r2, [r4, #20]
 80109c4:	2100      	movs	r1, #0
 80109c6:	0092      	lsls	r2, r2, #2
 80109c8:	f005 fed6 	bl	8016778 <memset>
 80109cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80109ce:	2200      	movs	r2, #0
 80109d0:	641a      	str	r2, [r3, #64]	; 0x40
 80109d2:	6898      	ldr	r0, [r3, #8]
 80109d4:	b138      	cbz	r0, 80109e6 <rcl_wait_set_clear+0x9a>
 80109d6:	685a      	ldr	r2, [r3, #4]
 80109d8:	2100      	movs	r1, #0
 80109da:	0092      	lsls	r2, r2, #2
 80109dc:	f005 fecc 	bl	8016778 <memset>
 80109e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80109e2:	2200      	movs	r2, #0
 80109e4:	605a      	str	r2, [r3, #4]
 80109e6:	6958      	ldr	r0, [r3, #20]
 80109e8:	b138      	cbz	r0, 80109fa <rcl_wait_set_clear+0xae>
 80109ea:	691a      	ldr	r2, [r3, #16]
 80109ec:	2100      	movs	r1, #0
 80109ee:	0092      	lsls	r2, r2, #2
 80109f0:	f005 fec2 	bl	8016778 <memset>
 80109f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80109f6:	2200      	movs	r2, #0
 80109f8:	611a      	str	r2, [r3, #16]
 80109fa:	6a18      	ldr	r0, [r3, #32]
 80109fc:	b138      	cbz	r0, 8010a0e <rcl_wait_set_clear+0xc2>
 80109fe:	69da      	ldr	r2, [r3, #28]
 8010a00:	2100      	movs	r1, #0
 8010a02:	0092      	lsls	r2, r2, #2
 8010a04:	f005 feb8 	bl	8016778 <memset>
 8010a08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	61da      	str	r2, [r3, #28]
 8010a0e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010a10:	b138      	cbz	r0, 8010a22 <rcl_wait_set_clear+0xd6>
 8010a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a14:	2100      	movs	r1, #0
 8010a16:	0092      	lsls	r2, r2, #2
 8010a18:	f005 feae 	bl	8016778 <memset>
 8010a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010a1e:	2200      	movs	r2, #0
 8010a20:	629a      	str	r2, [r3, #40]	; 0x28
 8010a22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010a24:	b138      	cbz	r0, 8010a36 <rcl_wait_set_clear+0xea>
 8010a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a28:	2100      	movs	r1, #0
 8010a2a:	0092      	lsls	r2, r2, #2
 8010a2c:	f005 fea4 	bl	8016778 <memset>
 8010a30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010a32:	2000      	movs	r0, #0
 8010a34:	6358      	str	r0, [r3, #52]	; 0x34
 8010a36:	bd10      	pop	{r4, pc}
 8010a38:	200b      	movs	r0, #11
 8010a3a:	4770      	bx	lr
 8010a3c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010a40:	bd10      	pop	{r4, pc}
 8010a42:	bf00      	nop

08010a44 <rcl_wait_set_resize>:
 8010a44:	2800      	cmp	r0, #0
 8010a46:	f000 8185 	beq.w	8010d54 <rcl_wait_set_resize+0x310>
 8010a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8010a50:	b083      	sub	sp, #12
 8010a52:	4605      	mov	r5, r0
 8010a54:	2c00      	cmp	r4, #0
 8010a56:	f000 817f 	beq.w	8010d58 <rcl_wait_set_resize+0x314>
 8010a5a:	f04f 0900 	mov.w	r9, #0
 8010a5e:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010a62:	461f      	mov	r7, r3
 8010a64:	4688      	mov	r8, r1
 8010a66:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8010a6a:	4616      	mov	r6, r2
 8010a6c:	f8c0 9004 	str.w	r9, [r0, #4]
 8010a70:	f8c4 9000 	str.w	r9, [r4]
 8010a74:	2900      	cmp	r1, #0
 8010a76:	f000 80bd 	beq.w	8010bf4 <rcl_wait_set_resize+0x1b0>
 8010a7a:	008c      	lsls	r4, r1, #2
 8010a7c:	6800      	ldr	r0, [r0, #0]
 8010a7e:	9301      	str	r3, [sp, #4]
 8010a80:	4652      	mov	r2, sl
 8010a82:	4621      	mov	r1, r4
 8010a84:	4798      	blx	r3
 8010a86:	9b01      	ldr	r3, [sp, #4]
 8010a88:	6028      	str	r0, [r5, #0]
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	f000 80cb 	beq.w	8010c26 <rcl_wait_set_resize+0x1e2>
 8010a90:	4622      	mov	r2, r4
 8010a92:	4649      	mov	r1, r9
 8010a94:	9301      	str	r3, [sp, #4]
 8010a96:	f005 fe6f 	bl	8016778 <memset>
 8010a9a:	f8c5 8004 	str.w	r8, [r5, #4]
 8010a9e:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8010aa2:	9b01      	ldr	r3, [sp, #4]
 8010aa4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010aa8:	f8c8 9004 	str.w	r9, [r8, #4]
 8010aac:	4652      	mov	r2, sl
 8010aae:	4621      	mov	r1, r4
 8010ab0:	4798      	blx	r3
 8010ab2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010ab4:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ab8:	689b      	ldr	r3, [r3, #8]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 80ac 	beq.w	8010c18 <rcl_wait_set_resize+0x1d4>
 8010ac0:	4622      	mov	r2, r4
 8010ac2:	4649      	mov	r1, r9
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f005 fe57 	bl	8016778 <memset>
 8010aca:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010acc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010ad0:	f04f 0800 	mov.w	r8, #0
 8010ad4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8010ad8:	f8c5 800c 	str.w	r8, [r5, #12]
 8010adc:	f8c4 800c 	str.w	r8, [r4, #12]
 8010ae0:	2e00      	cmp	r6, #0
 8010ae2:	f040 80a4 	bne.w	8010c2e <rcl_wait_set_resize+0x1ea>
 8010ae6:	68a8      	ldr	r0, [r5, #8]
 8010ae8:	b128      	cbz	r0, 8010af6 <rcl_wait_set_resize+0xb2>
 8010aea:	4649      	mov	r1, r9
 8010aec:	4790      	blx	r2
 8010aee:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010af0:	60ae      	str	r6, [r5, #8]
 8010af2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010af6:	f04f 0800 	mov.w	r8, #0
 8010afa:	19f6      	adds	r6, r6, r7
 8010afc:	f8c4 8010 	str.w	r8, [r4, #16]
 8010b00:	f040 80ac 	bne.w	8010c5c <rcl_wait_set_resize+0x218>
 8010b04:	6960      	ldr	r0, [r4, #20]
 8010b06:	b130      	cbz	r0, 8010b16 <rcl_wait_set_resize+0xd2>
 8010b08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010b0a:	4649      	mov	r1, r9
 8010b0c:	4798      	blx	r3
 8010b0e:	6166      	str	r6, [r4, #20]
 8010b10:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b12:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010b16:	2600      	movs	r6, #0
 8010b18:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010b1c:	616e      	str	r6, [r5, #20]
 8010b1e:	6426      	str	r6, [r4, #64]	; 0x40
 8010b20:	2f00      	cmp	r7, #0
 8010b22:	f040 80ad 	bne.w	8010c80 <rcl_wait_set_resize+0x23c>
 8010b26:	6928      	ldr	r0, [r5, #16]
 8010b28:	b138      	cbz	r0, 8010b3a <rcl_wait_set_resize+0xf6>
 8010b2a:	4649      	mov	r1, r9
 8010b2c:	47d0      	blx	sl
 8010b2e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b30:	612f      	str	r7, [r5, #16]
 8010b32:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010b36:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b3c:	2600      	movs	r6, #0
 8010b3e:	61ee      	str	r6, [r5, #28]
 8010b40:	61a6      	str	r6, [r4, #24]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	f040 80af 	bne.w	8010ca6 <rcl_wait_set_resize+0x262>
 8010b48:	69a8      	ldr	r0, [r5, #24]
 8010b4a:	b120      	cbz	r0, 8010b56 <rcl_wait_set_resize+0x112>
 8010b4c:	4649      	mov	r1, r9
 8010b4e:	47d0      	blx	sl
 8010b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b52:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b54:	61ab      	str	r3, [r5, #24]
 8010b56:	6a20      	ldr	r0, [r4, #32]
 8010b58:	b128      	cbz	r0, 8010b66 <rcl_wait_set_resize+0x122>
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	47d0      	blx	sl
 8010b5e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b60:	2300      	movs	r3, #0
 8010b62:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b68:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010b6a:	2600      	movs	r6, #0
 8010b6c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010b70:	626e      	str	r6, [r5, #36]	; 0x24
 8010b72:	6266      	str	r6, [r4, #36]	; 0x24
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f000 80b6 	beq.w	8010ce6 <rcl_wait_set_resize+0x2a2>
 8010b7a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8010b7e:	6a28      	ldr	r0, [r5, #32]
 8010b80:	463a      	mov	r2, r7
 8010b82:	4651      	mov	r1, sl
 8010b84:	47c8      	blx	r9
 8010b86:	6228      	str	r0, [r5, #32]
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d04c      	beq.n	8010c26 <rcl_wait_set_resize+0x1e2>
 8010b8c:	4652      	mov	r2, sl
 8010b8e:	4631      	mov	r1, r6
 8010b90:	f005 fdf2 	bl	8016778 <memset>
 8010b94:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b98:	626b      	str	r3, [r5, #36]	; 0x24
 8010b9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010b9c:	62a6      	str	r6, [r4, #40]	; 0x28
 8010b9e:	463a      	mov	r2, r7
 8010ba0:	4651      	mov	r1, sl
 8010ba2:	47c8      	blx	r9
 8010ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010ba6:	62e0      	str	r0, [r4, #44]	; 0x2c
 8010ba8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010baa:	2c00      	cmp	r4, #0
 8010bac:	f000 80f0 	beq.w	8010d90 <rcl_wait_set_resize+0x34c>
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	4652      	mov	r2, sl
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	f005 fddf 	bl	8016778 <memset>
 8010bba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bbe:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010bc0:	2600      	movs	r6, #0
 8010bc2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010bc6:	62ee      	str	r6, [r5, #44]	; 0x2c
 8010bc8:	6326      	str	r6, [r4, #48]	; 0x30
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f040 809d 	bne.w	8010d0a <rcl_wait_set_resize+0x2c6>
 8010bd0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010bd2:	b120      	cbz	r0, 8010bde <rcl_wait_set_resize+0x19a>
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	47c0      	blx	r8
 8010bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bda:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010bdc:	62ab      	str	r3, [r5, #40]	; 0x28
 8010bde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010be0:	b310      	cbz	r0, 8010c28 <rcl_wait_set_resize+0x1e4>
 8010be2:	4639      	mov	r1, r7
 8010be4:	47c0      	blx	r8
 8010be6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010be8:	2000      	movs	r0, #0
 8010bea:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8010bee:	b003      	add	sp, #12
 8010bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf4:	6800      	ldr	r0, [r0, #0]
 8010bf6:	b120      	cbz	r0, 8010c02 <rcl_wait_set_resize+0x1be>
 8010bf8:	4651      	mov	r1, sl
 8010bfa:	47d8      	blx	fp
 8010bfc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010bfe:	f8c5 8000 	str.w	r8, [r5]
 8010c02:	68a0      	ldr	r0, [r4, #8]
 8010c04:	2800      	cmp	r0, #0
 8010c06:	f43f af61 	beq.w	8010acc <rcl_wait_set_resize+0x88>
 8010c0a:	4651      	mov	r1, sl
 8010c0c:	47d8      	blx	fp
 8010c0e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010c10:	2300      	movs	r3, #0
 8010c12:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010c16:	e759      	b.n	8010acc <rcl_wait_set_resize+0x88>
 8010c18:	6828      	ldr	r0, [r5, #0]
 8010c1a:	9301      	str	r3, [sp, #4]
 8010c1c:	4651      	mov	r1, sl
 8010c1e:	47d8      	blx	fp
 8010c20:	9b01      	ldr	r3, [sp, #4]
 8010c22:	e9c5 3300 	strd	r3, r3, [r5]
 8010c26:	200a      	movs	r0, #10
 8010c28:	b003      	add	sp, #12
 8010c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c2e:	00b4      	lsls	r4, r6, #2
 8010c30:	68a8      	ldr	r0, [r5, #8]
 8010c32:	464a      	mov	r2, r9
 8010c34:	4621      	mov	r1, r4
 8010c36:	4798      	blx	r3
 8010c38:	60a8      	str	r0, [r5, #8]
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d0f3      	beq.n	8010c26 <rcl_wait_set_resize+0x1e2>
 8010c3e:	4622      	mov	r2, r4
 8010c40:	4641      	mov	r1, r8
 8010c42:	f005 fd99 	bl	8016778 <memset>
 8010c46:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010c48:	60ee      	str	r6, [r5, #12]
 8010c4a:	f04f 0800 	mov.w	r8, #0
 8010c4e:	19f6      	adds	r6, r6, r7
 8010c50:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010c54:	f8c4 8010 	str.w	r8, [r4, #16]
 8010c58:	f43f af54 	beq.w	8010b04 <rcl_wait_set_resize+0xc0>
 8010c5c:	00b6      	lsls	r6, r6, #2
 8010c5e:	464a      	mov	r2, r9
 8010c60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010c62:	6960      	ldr	r0, [r4, #20]
 8010c64:	4631      	mov	r1, r6
 8010c66:	4798      	blx	r3
 8010c68:	4681      	mov	r9, r0
 8010c6a:	6160      	str	r0, [r4, #20]
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d076      	beq.n	8010d5e <rcl_wait_set_resize+0x31a>
 8010c70:	4632      	mov	r2, r6
 8010c72:	4641      	mov	r1, r8
 8010c74:	f005 fd80 	bl	8016778 <memset>
 8010c78:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010c7a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010c7e:	e74a      	b.n	8010b16 <rcl_wait_set_resize+0xd2>
 8010c80:	00bc      	lsls	r4, r7, #2
 8010c82:	6928      	ldr	r0, [r5, #16]
 8010c84:	464a      	mov	r2, r9
 8010c86:	4621      	mov	r1, r4
 8010c88:	47c0      	blx	r8
 8010c8a:	6128      	str	r0, [r5, #16]
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d0ca      	beq.n	8010c26 <rcl_wait_set_resize+0x1e2>
 8010c90:	4622      	mov	r2, r4
 8010c92:	4631      	mov	r1, r6
 8010c94:	f005 fd70 	bl	8016778 <memset>
 8010c98:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010c9a:	616f      	str	r7, [r5, #20]
 8010c9c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010ca0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010ca4:	e749      	b.n	8010b3a <rcl_wait_set_resize+0xf6>
 8010ca6:	009c      	lsls	r4, r3, #2
 8010ca8:	69a8      	ldr	r0, [r5, #24]
 8010caa:	464a      	mov	r2, r9
 8010cac:	4621      	mov	r1, r4
 8010cae:	47c0      	blx	r8
 8010cb0:	61a8      	str	r0, [r5, #24]
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d0b7      	beq.n	8010c26 <rcl_wait_set_resize+0x1e2>
 8010cb6:	4622      	mov	r2, r4
 8010cb8:	4631      	mov	r1, r6
 8010cba:	f005 fd5d 	bl	8016778 <memset>
 8010cbe:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8010cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cc2:	61eb      	str	r3, [r5, #28]
 8010cc4:	6a38      	ldr	r0, [r7, #32]
 8010cc6:	61fe      	str	r6, [r7, #28]
 8010cc8:	464a      	mov	r2, r9
 8010cca:	4621      	mov	r1, r4
 8010ccc:	47c0      	blx	r8
 8010cce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010cd0:	6238      	str	r0, [r7, #32]
 8010cd2:	6a1f      	ldr	r7, [r3, #32]
 8010cd4:	2f00      	cmp	r7, #0
 8010cd6:	d054      	beq.n	8010d82 <rcl_wait_set_resize+0x33e>
 8010cd8:	4622      	mov	r2, r4
 8010cda:	4631      	mov	r1, r6
 8010cdc:	4638      	mov	r0, r7
 8010cde:	f005 fd4b 	bl	8016778 <memset>
 8010ce2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ce4:	e73f      	b.n	8010b66 <rcl_wait_set_resize+0x122>
 8010ce6:	6a28      	ldr	r0, [r5, #32]
 8010ce8:	b120      	cbz	r0, 8010cf4 <rcl_wait_set_resize+0x2b0>
 8010cea:	4639      	mov	r1, r7
 8010cec:	47c0      	blx	r8
 8010cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cf0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010cf2:	622b      	str	r3, [r5, #32]
 8010cf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	f43f af60 	beq.w	8010bbc <rcl_wait_set_resize+0x178>
 8010cfc:	4639      	mov	r1, r7
 8010cfe:	47c0      	blx	r8
 8010d00:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010d02:	2300      	movs	r3, #0
 8010d04:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010d08:	e758      	b.n	8010bbc <rcl_wait_set_resize+0x178>
 8010d0a:	009c      	lsls	r4, r3, #2
 8010d0c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010d0e:	463a      	mov	r2, r7
 8010d10:	4621      	mov	r1, r4
 8010d12:	47c8      	blx	r9
 8010d14:	62a8      	str	r0, [r5, #40]	; 0x28
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d085      	beq.n	8010c26 <rcl_wait_set_resize+0x1e2>
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	4631      	mov	r1, r6
 8010d1e:	f005 fd2b 	bl	8016778 <memset>
 8010d22:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d28:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010d2a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8010d2e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8010d32:	463a      	mov	r2, r7
 8010d34:	4621      	mov	r1, r4
 8010d36:	47c8      	blx	r9
 8010d38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010d3a:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8010d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d40:	b36b      	cbz	r3, 8010d9e <rcl_wait_set_resize+0x35a>
 8010d42:	4622      	mov	r2, r4
 8010d44:	4631      	mov	r1, r6
 8010d46:	4618      	mov	r0, r3
 8010d48:	f005 fd16 	bl	8016778 <memset>
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	b003      	add	sp, #12
 8010d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d54:	200b      	movs	r0, #11
 8010d56:	4770      	bx	lr
 8010d58:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010d5c:	e764      	b.n	8010c28 <rcl_wait_set_resize+0x1e4>
 8010d5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010d60:	68a8      	ldr	r0, [r5, #8]
 8010d62:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d66:	4798      	blx	r3
 8010d68:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010d6a:	6928      	ldr	r0, [r5, #16]
 8010d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010d6e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010d70:	f8c5 900c 	str.w	r9, [r5, #12]
 8010d74:	f8c5 9008 	str.w	r9, [r5, #8]
 8010d78:	4790      	blx	r2
 8010d7a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010d7e:	200a      	movs	r0, #10
 8010d80:	e752      	b.n	8010c28 <rcl_wait_set_resize+0x1e4>
 8010d82:	69a8      	ldr	r0, [r5, #24]
 8010d84:	4649      	mov	r1, r9
 8010d86:	47d0      	blx	sl
 8010d88:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010d8c:	200a      	movs	r0, #10
 8010d8e:	e74b      	b.n	8010c28 <rcl_wait_set_resize+0x1e4>
 8010d90:	6a28      	ldr	r0, [r5, #32]
 8010d92:	4639      	mov	r1, r7
 8010d94:	47c0      	blx	r8
 8010d96:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010d9a:	200a      	movs	r0, #10
 8010d9c:	e744      	b.n	8010c28 <rcl_wait_set_resize+0x1e4>
 8010d9e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010da0:	9301      	str	r3, [sp, #4]
 8010da2:	4639      	mov	r1, r7
 8010da4:	47c0      	blx	r8
 8010da6:	9b01      	ldr	r3, [sp, #4]
 8010da8:	200a      	movs	r0, #10
 8010daa:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010dae:	e73b      	b.n	8010c28 <rcl_wait_set_resize+0x1e4>

08010db0 <rcl_wait_set_init>:
 8010db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010db4:	b084      	sub	sp, #16
 8010db6:	4604      	mov	r4, r0
 8010db8:	a810      	add	r0, sp, #64	; 0x40
 8010dba:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8010dbe:	460f      	mov	r7, r1
 8010dc0:	4690      	mov	r8, r2
 8010dc2:	4699      	mov	r9, r3
 8010dc4:	f7f9 fc94 	bl	800a6f0 <rcutils_allocator_is_valid>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d06b      	beq.n	8010ea4 <rcl_wait_set_init+0xf4>
 8010dcc:	2c00      	cmp	r4, #0
 8010dce:	d069      	beq.n	8010ea4 <rcl_wait_set_init+0xf4>
 8010dd0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010dd2:	b125      	cbz	r5, 8010dde <rcl_wait_set_init+0x2e>
 8010dd4:	2564      	movs	r5, #100	; 0x64
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	b004      	add	sp, #16
 8010dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dde:	f1ba 0f00 	cmp.w	sl, #0
 8010de2:	d05f      	beq.n	8010ea4 <rcl_wait_set_init+0xf4>
 8010de4:	4650      	mov	r0, sl
 8010de6:	f7fe fb3f 	bl	800f468 <rcl_context_is_valid>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	d067      	beq.n	8010ebe <rcl_wait_set_init+0x10e>
 8010dee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010df0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010df2:	205c      	movs	r0, #92	; 0x5c
 8010df4:	4798      	blx	r3
 8010df6:	6320      	str	r0, [r4, #48]	; 0x30
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d062      	beq.n	8010ec2 <rcl_wait_set_init+0x112>
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	225c      	movs	r2, #92	; 0x5c
 8010e00:	f005 fcba 	bl	8016778 <memset>
 8010e04:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8010e08:	eb03 0e02 	add.w	lr, r3, r2
 8010e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e0e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8010e10:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8010e14:	449e      	add	lr, r3
 8010e16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010e1a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010e1e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8010e22:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8010e26:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8010e2a:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8010e2e:	f106 0548 	add.w	r5, r6, #72	; 0x48
 8010e32:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8010e36:	f8da a000 	ldr.w	sl, [sl]
 8010e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e3c:	44c6      	add	lr, r8
 8010e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8010e42:	602b      	str	r3, [r5, #0]
 8010e44:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8010e48:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 8010e4c:	f002 fe68 	bl	8013b20 <rmw_create_wait_set>
 8010e50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e52:	63f0      	str	r0, [r6, #60]	; 0x3c
 8010e54:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010e56:	b350      	cbz	r0, 8010eae <rcl_wait_set_init+0xfe>
 8010e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e5a:	9302      	str	r3, [sp, #8]
 8010e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e5e:	9301      	str	r3, [sp, #4]
 8010e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e62:	9300      	str	r3, [sp, #0]
 8010e64:	4642      	mov	r2, r8
 8010e66:	464b      	mov	r3, r9
 8010e68:	4639      	mov	r1, r7
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f7ff fdea 	bl	8010a44 <rcl_wait_set_resize>
 8010e70:	4605      	mov	r5, r0
 8010e72:	2800      	cmp	r0, #0
 8010e74:	d0af      	beq.n	8010dd6 <rcl_wait_set_init+0x26>
 8010e76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e78:	bb2b      	cbnz	r3, 8010ec6 <rcl_wait_set_init+0x116>
 8010e7a:	2600      	movs	r6, #0
 8010e7c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010e80:	9600      	str	r6, [sp, #0]
 8010e82:	4633      	mov	r3, r6
 8010e84:	4632      	mov	r2, r6
 8010e86:	4631      	mov	r1, r6
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f7ff fddb 	bl	8010a44 <rcl_wait_set_resize>
 8010e8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010e90:	2800      	cmp	r0, #0
 8010e92:	d0a0      	beq.n	8010dd6 <rcl_wait_set_init+0x26>
 8010e94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010e96:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010e98:	4798      	blx	r3
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	6326      	str	r6, [r4, #48]	; 0x30
 8010e9e:	b004      	add	sp, #16
 8010ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ea4:	250b      	movs	r5, #11
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	b004      	add	sp, #16
 8010eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eae:	2501      	movs	r5, #1
 8010eb0:	f002 fe40 	bl	8013b34 <rmw_destroy_wait_set>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	bf18      	it	ne
 8010eb8:	f44f 7561 	movne.w	r5, #900	; 0x384
 8010ebc:	e7dd      	b.n	8010e7a <rcl_wait_set_init+0xca>
 8010ebe:	2565      	movs	r5, #101	; 0x65
 8010ec0:	e789      	b.n	8010dd6 <rcl_wait_set_init+0x26>
 8010ec2:	250a      	movs	r5, #10
 8010ec4:	e787      	b.n	8010dd6 <rcl_wait_set_init+0x26>
 8010ec6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010ec8:	e7f2      	b.n	8010eb0 <rcl_wait_set_init+0x100>
 8010eca:	bf00      	nop

08010ecc <rcl_wait_set_add_guard_condition>:
 8010ecc:	b318      	cbz	r0, 8010f16 <rcl_wait_set_add_guard_condition+0x4a>
 8010ece:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010ed0:	b570      	push	{r4, r5, r6, lr}
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	b30b      	cbz	r3, 8010f1a <rcl_wait_set_add_guard_condition+0x4e>
 8010ed6:	b319      	cbz	r1, 8010f20 <rcl_wait_set_add_guard_condition+0x54>
 8010ed8:	68dd      	ldr	r5, [r3, #12]
 8010eda:	68c0      	ldr	r0, [r0, #12]
 8010edc:	4285      	cmp	r5, r0
 8010ede:	d217      	bcs.n	8010f10 <rcl_wait_set_add_guard_condition+0x44>
 8010ee0:	68a0      	ldr	r0, [r4, #8]
 8010ee2:	1c6e      	adds	r6, r5, #1
 8010ee4:	60de      	str	r6, [r3, #12]
 8010ee6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010eea:	b102      	cbz	r2, 8010eee <rcl_wait_set_add_guard_condition+0x22>
 8010eec:	6015      	str	r5, [r2, #0]
 8010eee:	4608      	mov	r0, r1
 8010ef0:	f004 fe42 	bl	8015b78 <rcl_guard_condition_get_rmw_handle>
 8010ef4:	b150      	cbz	r0, 8010f0c <rcl_wait_set_add_guard_condition+0x40>
 8010ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010ef8:	6842      	ldr	r2, [r0, #4]
 8010efa:	695b      	ldr	r3, [r3, #20]
 8010efc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010f02:	6913      	ldr	r3, [r2, #16]
 8010f04:	3301      	adds	r3, #1
 8010f06:	2000      	movs	r0, #0
 8010f08:	6113      	str	r3, [r2, #16]
 8010f0a:	bd70      	pop	{r4, r5, r6, pc}
 8010f0c:	2001      	movs	r0, #1
 8010f0e:	bd70      	pop	{r4, r5, r6, pc}
 8010f10:	f240 3086 	movw	r0, #902	; 0x386
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
 8010f16:	200b      	movs	r0, #11
 8010f18:	4770      	bx	lr
 8010f1a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}
 8010f20:	200b      	movs	r0, #11
 8010f22:	bd70      	pop	{r4, r5, r6, pc}

08010f24 <rcl_wait_set_add_timer>:
 8010f24:	b328      	cbz	r0, 8010f72 <rcl_wait_set_add_timer+0x4e>
 8010f26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010f28:	b570      	push	{r4, r5, r6, lr}
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	b31b      	cbz	r3, 8010f76 <rcl_wait_set_add_timer+0x52>
 8010f2e:	b329      	cbz	r1, 8010f7c <rcl_wait_set_add_timer+0x58>
 8010f30:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010f32:	6965      	ldr	r5, [r4, #20]
 8010f34:	42a8      	cmp	r0, r5
 8010f36:	d219      	bcs.n	8010f6c <rcl_wait_set_add_timer+0x48>
 8010f38:	6925      	ldr	r5, [r4, #16]
 8010f3a:	1c46      	adds	r6, r0, #1
 8010f3c:	641e      	str	r6, [r3, #64]	; 0x40
 8010f3e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8010f42:	b102      	cbz	r2, 8010f46 <rcl_wait_set_add_timer+0x22>
 8010f44:	6010      	str	r0, [r2, #0]
 8010f46:	4608      	mov	r0, r1
 8010f48:	f7ff fba6 	bl	8010698 <rcl_timer_get_guard_condition>
 8010f4c:	b168      	cbz	r0, 8010f6a <rcl_wait_set_add_timer+0x46>
 8010f4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010f50:	68e3      	ldr	r3, [r4, #12]
 8010f52:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8010f54:	3b01      	subs	r3, #1
 8010f56:	441d      	add	r5, r3
 8010f58:	f004 fe0e 	bl	8015b78 <rcl_guard_condition_get_rmw_handle>
 8010f5c:	b180      	cbz	r0, 8010f80 <rcl_wait_set_add_timer+0x5c>
 8010f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010f60:	6842      	ldr	r2, [r0, #4]
 8010f62:	695b      	ldr	r3, [r3, #20]
 8010f64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f68:	2000      	movs	r0, #0
 8010f6a:	bd70      	pop	{r4, r5, r6, pc}
 8010f6c:	f240 3086 	movw	r0, #902	; 0x386
 8010f70:	bd70      	pop	{r4, r5, r6, pc}
 8010f72:	200b      	movs	r0, #11
 8010f74:	4770      	bx	lr
 8010f76:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010f7a:	bd70      	pop	{r4, r5, r6, pc}
 8010f7c:	200b      	movs	r0, #11
 8010f7e:	bd70      	pop	{r4, r5, r6, pc}
 8010f80:	2001      	movs	r0, #1
 8010f82:	bd70      	pop	{r4, r5, r6, pc}

08010f84 <rcl_wait_set_add_client>:
 8010f84:	b318      	cbz	r0, 8010fce <rcl_wait_set_add_client+0x4a>
 8010f86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010f88:	b570      	push	{r4, r5, r6, lr}
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	b30b      	cbz	r3, 8010fd2 <rcl_wait_set_add_client+0x4e>
 8010f8e:	b319      	cbz	r1, 8010fd8 <rcl_wait_set_add_client+0x54>
 8010f90:	699d      	ldr	r5, [r3, #24]
 8010f92:	69c0      	ldr	r0, [r0, #28]
 8010f94:	4285      	cmp	r5, r0
 8010f96:	d217      	bcs.n	8010fc8 <rcl_wait_set_add_client+0x44>
 8010f98:	69a0      	ldr	r0, [r4, #24]
 8010f9a:	1c6e      	adds	r6, r5, #1
 8010f9c:	619e      	str	r6, [r3, #24]
 8010f9e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010fa2:	b102      	cbz	r2, 8010fa6 <rcl_wait_set_add_client+0x22>
 8010fa4:	6015      	str	r5, [r2, #0]
 8010fa6:	4608      	mov	r0, r1
 8010fa8:	f7fe f9b2 	bl	800f310 <rcl_client_get_rmw_handle>
 8010fac:	b150      	cbz	r0, 8010fc4 <rcl_wait_set_add_client+0x40>
 8010fae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010fb0:	6842      	ldr	r2, [r0, #4]
 8010fb2:	6a1b      	ldr	r3, [r3, #32]
 8010fb4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010fba:	69d3      	ldr	r3, [r2, #28]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	61d3      	str	r3, [r2, #28]
 8010fc2:	bd70      	pop	{r4, r5, r6, pc}
 8010fc4:	2001      	movs	r0, #1
 8010fc6:	bd70      	pop	{r4, r5, r6, pc}
 8010fc8:	f240 3086 	movw	r0, #902	; 0x386
 8010fcc:	bd70      	pop	{r4, r5, r6, pc}
 8010fce:	200b      	movs	r0, #11
 8010fd0:	4770      	bx	lr
 8010fd2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010fd6:	bd70      	pop	{r4, r5, r6, pc}
 8010fd8:	200b      	movs	r0, #11
 8010fda:	bd70      	pop	{r4, r5, r6, pc}

08010fdc <rcl_wait_set_add_service>:
 8010fdc:	b318      	cbz	r0, 8011026 <rcl_wait_set_add_service+0x4a>
 8010fde:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010fe0:	b570      	push	{r4, r5, r6, lr}
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	b30b      	cbz	r3, 801102a <rcl_wait_set_add_service+0x4e>
 8010fe6:	b319      	cbz	r1, 8011030 <rcl_wait_set_add_service+0x54>
 8010fe8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010fea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010fec:	4285      	cmp	r5, r0
 8010fee:	d217      	bcs.n	8011020 <rcl_wait_set_add_service+0x44>
 8010ff0:	6a20      	ldr	r0, [r4, #32]
 8010ff2:	1c6e      	adds	r6, r5, #1
 8010ff4:	625e      	str	r6, [r3, #36]	; 0x24
 8010ff6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010ffa:	b102      	cbz	r2, 8010ffe <rcl_wait_set_add_service+0x22>
 8010ffc:	6015      	str	r5, [r2, #0]
 8010ffe:	4608      	mov	r0, r1
 8011000:	f7ff f804 	bl	801000c <rcl_service_get_rmw_handle>
 8011004:	b150      	cbz	r0, 801101c <rcl_wait_set_add_service+0x40>
 8011006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011008:	6842      	ldr	r2, [r0, #4]
 801100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011010:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011012:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8011014:	3301      	adds	r3, #1
 8011016:	2000      	movs	r0, #0
 8011018:	6293      	str	r3, [r2, #40]	; 0x28
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	2001      	movs	r0, #1
 801101e:	bd70      	pop	{r4, r5, r6, pc}
 8011020:	f240 3086 	movw	r0, #902	; 0x386
 8011024:	bd70      	pop	{r4, r5, r6, pc}
 8011026:	200b      	movs	r0, #11
 8011028:	4770      	bx	lr
 801102a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801102e:	bd70      	pop	{r4, r5, r6, pc}
 8011030:	200b      	movs	r0, #11
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	0000      	movs	r0, r0
	...

08011038 <rcl_wait>:
 8011038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	ed2d 8b02 	vpush	{d8}
 8011040:	b08d      	sub	sp, #52	; 0x34
 8011042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011046:	2800      	cmp	r0, #0
 8011048:	f000 8143 	beq.w	80112d2 <rcl_wait+0x29a>
 801104c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801104e:	4605      	mov	r5, r0
 8011050:	2e00      	cmp	r6, #0
 8011052:	f000 8112 	beq.w	801127a <rcl_wait+0x242>
 8011056:	6843      	ldr	r3, [r0, #4]
 8011058:	b983      	cbnz	r3, 801107c <rcl_wait+0x44>
 801105a:	68eb      	ldr	r3, [r5, #12]
 801105c:	b973      	cbnz	r3, 801107c <rcl_wait+0x44>
 801105e:	696b      	ldr	r3, [r5, #20]
 8011060:	b963      	cbnz	r3, 801107c <rcl_wait+0x44>
 8011062:	69eb      	ldr	r3, [r5, #28]
 8011064:	b953      	cbnz	r3, 801107c <rcl_wait+0x44>
 8011066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011068:	b943      	cbnz	r3, 801107c <rcl_wait+0x44>
 801106a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801106c:	b933      	cbnz	r3, 801107c <rcl_wait+0x44>
 801106e:	f240 3085 	movw	r0, #901	; 0x385
 8011072:	b00d      	add	sp, #52	; 0x34
 8011074:	ecbd 8b02 	vpop	{d8}
 8011078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801107c:	9b04      	ldr	r3, [sp, #16]
 801107e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011080:	2b01      	cmp	r3, #1
 8011082:	9b05      	ldr	r3, [sp, #20]
 8011084:	f173 0300 	sbcs.w	r3, r3, #0
 8011088:	f2c0 80f0 	blt.w	801126c <rcl_wait+0x234>
 801108c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011090:	4643      	mov	r3, r8
 8011092:	2a00      	cmp	r2, #0
 8011094:	f000 8133 	beq.w	80112fe <rcl_wait+0x2c6>
 8011098:	2400      	movs	r4, #0
 801109a:	4613      	mov	r3, r2
 801109c:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8011310 <rcl_wait+0x2d8>
 80110a0:	46a2      	mov	sl, r4
 80110a2:	46a3      	mov	fp, r4
 80110a4:	f240 3921 	movw	r9, #801	; 0x321
 80110a8:	4632      	mov	r2, r6
 80110aa:	e014      	b.n	80110d6 <rcl_wait+0x9e>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d1e0      	bne.n	8011072 <rcl_wait+0x3a>
 80110b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80110b4:	4542      	cmp	r2, r8
 80110b6:	eb73 0107 	sbcs.w	r1, r3, r7
 80110ba:	da03      	bge.n	80110c4 <rcl_wait+0x8c>
 80110bc:	4690      	mov	r8, r2
 80110be:	461f      	mov	r7, r3
 80110c0:	f04f 0b01 	mov.w	fp, #1
 80110c4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80110c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80110c8:	3401      	adds	r4, #1
 80110ca:	f14a 0a00 	adc.w	sl, sl, #0
 80110ce:	429c      	cmp	r4, r3
 80110d0:	f17a 0100 	sbcs.w	r1, sl, #0
 80110d4:	d228      	bcs.n	8011128 <rcl_wait+0xf0>
 80110d6:	6928      	ldr	r0, [r5, #16]
 80110d8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80110dc:	a908      	add	r1, sp, #32
 80110de:	00a6      	lsls	r6, r4, #2
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d0f1      	beq.n	80110c8 <rcl_wait+0x90>
 80110e4:	68eb      	ldr	r3, [r5, #12]
 80110e6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80110ea:	4423      	add	r3, r4
 80110ec:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80110f0:	f1be 0f00 	cmp.w	lr, #0
 80110f4:	d006      	beq.n	8011104 <rcl_wait+0xcc>
 80110f6:	6913      	ldr	r3, [r2, #16]
 80110f8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80110fc:	3301      	adds	r3, #1
 80110fe:	6113      	str	r3, [r2, #16]
 8011100:	692b      	ldr	r3, [r5, #16]
 8011102:	5998      	ldr	r0, [r3, r6]
 8011104:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011108:	f7ff fa94 	bl	8010634 <rcl_timer_get_time_until_next_call>
 801110c:	4548      	cmp	r0, r9
 801110e:	d1cd      	bne.n	80110ac <rcl_wait+0x74>
 8011110:	692b      	ldr	r3, [r5, #16]
 8011112:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011114:	2100      	movs	r1, #0
 8011116:	5199      	str	r1, [r3, r6]
 8011118:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801111a:	3401      	adds	r4, #1
 801111c:	f14a 0a00 	adc.w	sl, sl, #0
 8011120:	429c      	cmp	r4, r3
 8011122:	f17a 0100 	sbcs.w	r1, sl, #0
 8011126:	d3d6      	bcc.n	80110d6 <rcl_wait+0x9e>
 8011128:	4616      	mov	r6, r2
 801112a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801112e:	4313      	orrs	r3, r2
 8011130:	46d9      	mov	r9, fp
 8011132:	f040 80a9 	bne.w	8011288 <rcl_wait+0x250>
 8011136:	2300      	movs	r3, #0
 8011138:	2200      	movs	r2, #0
 801113a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801113e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011142:	ab08      	add	r3, sp, #32
 8011144:	9302      	str	r3, [sp, #8]
 8011146:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011148:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801114c:	e9cd 3200 	strd	r3, r2, [sp]
 8011150:	f106 0110 	add.w	r1, r6, #16
 8011154:	f106 031c 	add.w	r3, r6, #28
 8011158:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801115c:	1d30      	adds	r0, r6, #4
 801115e:	f002 fb67 	bl	8013830 <rmw_wait>
 8011162:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011166:	4680      	mov	r8, r0
 8011168:	b1ca      	cbz	r2, 801119e <rcl_wait+0x166>
 801116a:	2400      	movs	r4, #0
 801116c:	4627      	mov	r7, r4
 801116e:	692a      	ldr	r2, [r5, #16]
 8011170:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011174:	f10d 011f 	add.w	r1, sp, #31
 8011178:	00a6      	lsls	r6, r4, #2
 801117a:	b160      	cbz	r0, 8011196 <rcl_wait+0x15e>
 801117c:	f88d 701f 	strb.w	r7, [sp, #31]
 8011180:	f7ff fa1e 	bl	80105c0 <rcl_timer_is_ready>
 8011184:	2800      	cmp	r0, #0
 8011186:	f47f af74 	bne.w	8011072 <rcl_wait+0x3a>
 801118a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801118e:	b90b      	cbnz	r3, 8011194 <rcl_wait+0x15c>
 8011190:	692a      	ldr	r2, [r5, #16]
 8011192:	5193      	str	r3, [r2, r6]
 8011194:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011198:	3401      	adds	r4, #1
 801119a:	42a2      	cmp	r2, r4
 801119c:	d8e7      	bhi.n	801116e <rcl_wait+0x136>
 801119e:	f038 0002 	bics.w	r0, r8, #2
 80111a2:	f040 8090 	bne.w	80112c6 <rcl_wait+0x28e>
 80111a6:	686e      	ldr	r6, [r5, #4]
 80111a8:	4602      	mov	r2, r0
 80111aa:	b91e      	cbnz	r6, 80111b4 <rcl_wait+0x17c>
 80111ac:	e00d      	b.n	80111ca <rcl_wait+0x192>
 80111ae:	3201      	adds	r2, #1
 80111b0:	42b2      	cmp	r2, r6
 80111b2:	d00a      	beq.n	80111ca <rcl_wait+0x192>
 80111b4:	6899      	ldr	r1, [r3, #8]
 80111b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80111ba:	2900      	cmp	r1, #0
 80111bc:	d1f7      	bne.n	80111ae <rcl_wait+0x176>
 80111be:	682c      	ldr	r4, [r5, #0]
 80111c0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80111c4:	3201      	adds	r2, #1
 80111c6:	42b2      	cmp	r2, r6
 80111c8:	d1f4      	bne.n	80111b4 <rcl_wait+0x17c>
 80111ca:	68ee      	ldr	r6, [r5, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	b91e      	cbnz	r6, 80111d8 <rcl_wait+0x1a0>
 80111d0:	e00d      	b.n	80111ee <rcl_wait+0x1b6>
 80111d2:	3201      	adds	r2, #1
 80111d4:	42b2      	cmp	r2, r6
 80111d6:	d00a      	beq.n	80111ee <rcl_wait+0x1b6>
 80111d8:	6959      	ldr	r1, [r3, #20]
 80111da:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80111de:	2900      	cmp	r1, #0
 80111e0:	d1f7      	bne.n	80111d2 <rcl_wait+0x19a>
 80111e2:	68ac      	ldr	r4, [r5, #8]
 80111e4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80111e8:	3201      	adds	r2, #1
 80111ea:	42b2      	cmp	r2, r6
 80111ec:	d1f4      	bne.n	80111d8 <rcl_wait+0x1a0>
 80111ee:	69ee      	ldr	r6, [r5, #28]
 80111f0:	2200      	movs	r2, #0
 80111f2:	b91e      	cbnz	r6, 80111fc <rcl_wait+0x1c4>
 80111f4:	e00d      	b.n	8011212 <rcl_wait+0x1da>
 80111f6:	3201      	adds	r2, #1
 80111f8:	42b2      	cmp	r2, r6
 80111fa:	d00a      	beq.n	8011212 <rcl_wait+0x1da>
 80111fc:	6a19      	ldr	r1, [r3, #32]
 80111fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011202:	2900      	cmp	r1, #0
 8011204:	d1f7      	bne.n	80111f6 <rcl_wait+0x1be>
 8011206:	69ac      	ldr	r4, [r5, #24]
 8011208:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801120c:	3201      	adds	r2, #1
 801120e:	42b2      	cmp	r2, r6
 8011210:	d1f4      	bne.n	80111fc <rcl_wait+0x1c4>
 8011212:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8011214:	2200      	movs	r2, #0
 8011216:	b91e      	cbnz	r6, 8011220 <rcl_wait+0x1e8>
 8011218:	e00d      	b.n	8011236 <rcl_wait+0x1fe>
 801121a:	3201      	adds	r2, #1
 801121c:	4296      	cmp	r6, r2
 801121e:	d00a      	beq.n	8011236 <rcl_wait+0x1fe>
 8011220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011222:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011226:	2900      	cmp	r1, #0
 8011228:	d1f7      	bne.n	801121a <rcl_wait+0x1e2>
 801122a:	6a2c      	ldr	r4, [r5, #32]
 801122c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011230:	3201      	adds	r2, #1
 8011232:	4296      	cmp	r6, r2
 8011234:	d1f4      	bne.n	8011220 <rcl_wait+0x1e8>
 8011236:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8011238:	2200      	movs	r2, #0
 801123a:	b91e      	cbnz	r6, 8011244 <rcl_wait+0x20c>
 801123c:	e00d      	b.n	801125a <rcl_wait+0x222>
 801123e:	3201      	adds	r2, #1
 8011240:	42b2      	cmp	r2, r6
 8011242:	d00a      	beq.n	801125a <rcl_wait+0x222>
 8011244:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011246:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801124a:	2900      	cmp	r1, #0
 801124c:	d1f7      	bne.n	801123e <rcl_wait+0x206>
 801124e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8011250:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011254:	3201      	adds	r2, #1
 8011256:	42b2      	cmp	r2, r6
 8011258:	d1f4      	bne.n	8011244 <rcl_wait+0x20c>
 801125a:	f1b8 0f02 	cmp.w	r8, #2
 801125e:	f47f af08 	bne.w	8011072 <rcl_wait+0x3a>
 8011262:	464b      	mov	r3, r9
 8011264:	2b00      	cmp	r3, #0
 8011266:	bf08      	it	eq
 8011268:	2002      	moveq	r0, #2
 801126a:	e702      	b.n	8011072 <rcl_wait+0x3a>
 801126c:	2a00      	cmp	r2, #0
 801126e:	d03a      	beq.n	80112e6 <rcl_wait+0x2ae>
 8011270:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011274:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011278:	e70e      	b.n	8011098 <rcl_wait+0x60>
 801127a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801127e:	b00d      	add	sp, #52	; 0x34
 8011280:	ecbd 8b02 	vpop	{d8}
 8011284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011288:	9b04      	ldr	r3, [sp, #16]
 801128a:	2b01      	cmp	r3, #1
 801128c:	9b05      	ldr	r3, [sp, #20]
 801128e:	f173 0300 	sbcs.w	r3, r3, #0
 8011292:	db24      	blt.n	80112de <rcl_wait+0x2a6>
 8011294:	2f00      	cmp	r7, #0
 8011296:	bfbc      	itt	lt
 8011298:	f04f 0800 	movlt.w	r8, #0
 801129c:	4647      	movlt	r7, r8
 801129e:	a31e      	add	r3, pc, #120	; (adr r3, 8011318 <rcl_wait+0x2e0>)
 80112a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a4:	4640      	mov	r0, r8
 80112a6:	4639      	mov	r1, r7
 80112a8:	f7ef f81a 	bl	80002e0 <__aeabi_ldivmod>
 80112ac:	a31a      	add	r3, pc, #104	; (adr r3, 8011318 <rcl_wait+0x2e0>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80112b6:	4640      	mov	r0, r8
 80112b8:	4639      	mov	r1, r7
 80112ba:	f7ef f811 	bl	80002e0 <__aeabi_ldivmod>
 80112be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80112c2:	ab08      	add	r3, sp, #32
 80112c4:	e73e      	b.n	8011144 <rcl_wait+0x10c>
 80112c6:	2001      	movs	r0, #1
 80112c8:	b00d      	add	sp, #52	; 0x34
 80112ca:	ecbd 8b02 	vpop	{d8}
 80112ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d2:	200b      	movs	r0, #11
 80112d4:	b00d      	add	sp, #52	; 0x34
 80112d6:	ecbd 8b02 	vpop	{d8}
 80112da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112de:	465b      	mov	r3, fp
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1d7      	bne.n	8011294 <rcl_wait+0x25c>
 80112e4:	e72e      	b.n	8011144 <rcl_wait+0x10c>
 80112e6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80112ea:	430b      	orrs	r3, r1
 80112ec:	bf08      	it	eq
 80112ee:	4691      	moveq	r9, r2
 80112f0:	f43f af21 	beq.w	8011136 <rcl_wait+0xfe>
 80112f4:	9b04      	ldr	r3, [sp, #16]
 80112f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80112fa:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80112fe:	2b01      	cmp	r3, #1
 8011300:	9b05      	ldr	r3, [sp, #20]
 8011302:	f173 0300 	sbcs.w	r3, r3, #0
 8011306:	f04f 0300 	mov.w	r3, #0
 801130a:	4699      	mov	r9, r3
 801130c:	dac2      	bge.n	8011294 <rcl_wait+0x25c>
 801130e:	e719      	b.n	8011144 <rcl_wait+0x10c>
 8011310:	ffffffff 	.word	0xffffffff
 8011314:	7fffffff 	.word	0x7fffffff
 8011318:	3b9aca00 	.word	0x3b9aca00
 801131c:	00000000 	.word	0x00000000

08011320 <rcl_action_take_goal_response>:
 8011320:	2800      	cmp	r0, #0
 8011322:	d039      	beq.n	8011398 <rcl_action_take_goal_response+0x78>
 8011324:	b570      	push	{r4, r5, r6, lr}
 8011326:	4604      	mov	r4, r0
 8011328:	6800      	ldr	r0, [r0, #0]
 801132a:	b380      	cbz	r0, 801138e <rcl_action_take_goal_response+0x6e>
 801132c:	460d      	mov	r5, r1
 801132e:	4616      	mov	r6, r2
 8011330:	f7fe f872 	bl	800f418 <rcl_client_is_valid>
 8011334:	b330      	cbz	r0, 8011384 <rcl_action_take_goal_response+0x64>
 8011336:	6820      	ldr	r0, [r4, #0]
 8011338:	3004      	adds	r0, #4
 801133a:	f7fe f86d 	bl	800f418 <rcl_client_is_valid>
 801133e:	b308      	cbz	r0, 8011384 <rcl_action_take_goal_response+0x64>
 8011340:	6820      	ldr	r0, [r4, #0]
 8011342:	3008      	adds	r0, #8
 8011344:	f7fe f868 	bl	800f418 <rcl_client_is_valid>
 8011348:	b1e0      	cbz	r0, 8011384 <rcl_action_take_goal_response+0x64>
 801134a:	6820      	ldr	r0, [r4, #0]
 801134c:	300c      	adds	r0, #12
 801134e:	f7fe ffff 	bl	8010350 <rcl_subscription_is_valid>
 8011352:	b1b8      	cbz	r0, 8011384 <rcl_action_take_goal_response+0x64>
 8011354:	6820      	ldr	r0, [r4, #0]
 8011356:	3010      	adds	r0, #16
 8011358:	f7fe fffa 	bl	8010350 <rcl_subscription_is_valid>
 801135c:	b190      	cbz	r0, 8011384 <rcl_action_take_goal_response+0x64>
 801135e:	b1cd      	cbz	r5, 8011394 <rcl_action_take_goal_response+0x74>
 8011360:	b1c6      	cbz	r6, 8011394 <rcl_action_take_goal_response+0x74>
 8011362:	6820      	ldr	r0, [r4, #0]
 8011364:	4632      	mov	r2, r6
 8011366:	4629      	mov	r1, r5
 8011368:	f7fe f80e 	bl	800f388 <rcl_take_response>
 801136c:	b148      	cbz	r0, 8011382 <rcl_action_take_goal_response+0x62>
 801136e:	280a      	cmp	r0, #10
 8011370:	d007      	beq.n	8011382 <rcl_action_take_goal_response+0x62>
 8011372:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011376:	f640 0337 	movw	r3, #2103	; 0x837
 801137a:	4290      	cmp	r0, r2
 801137c:	bf0c      	ite	eq
 801137e:	4618      	moveq	r0, r3
 8011380:	2001      	movne	r0, #1
 8011382:	bd70      	pop	{r4, r5, r6, pc}
 8011384:	f7f9 f9d8 	bl	800a738 <rcutils_reset_error>
 8011388:	f640 0036 	movw	r0, #2102	; 0x836
 801138c:	bd70      	pop	{r4, r5, r6, pc}
 801138e:	f640 0036 	movw	r0, #2102	; 0x836
 8011392:	bd70      	pop	{r4, r5, r6, pc}
 8011394:	200b      	movs	r0, #11
 8011396:	bd70      	pop	{r4, r5, r6, pc}
 8011398:	f640 0036 	movw	r0, #2102	; 0x836
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop

080113a0 <rcl_action_send_result_request>:
 80113a0:	b390      	cbz	r0, 8011408 <rcl_action_send_result_request+0x68>
 80113a2:	b570      	push	{r4, r5, r6, lr}
 80113a4:	4604      	mov	r4, r0
 80113a6:	6800      	ldr	r0, [r0, #0]
 80113a8:	b348      	cbz	r0, 80113fe <rcl_action_send_result_request+0x5e>
 80113aa:	460d      	mov	r5, r1
 80113ac:	4616      	mov	r6, r2
 80113ae:	f7fe f833 	bl	800f418 <rcl_client_is_valid>
 80113b2:	b1f8      	cbz	r0, 80113f4 <rcl_action_send_result_request+0x54>
 80113b4:	6820      	ldr	r0, [r4, #0]
 80113b6:	3004      	adds	r0, #4
 80113b8:	f7fe f82e 	bl	800f418 <rcl_client_is_valid>
 80113bc:	b1d0      	cbz	r0, 80113f4 <rcl_action_send_result_request+0x54>
 80113be:	6820      	ldr	r0, [r4, #0]
 80113c0:	3008      	adds	r0, #8
 80113c2:	f7fe f829 	bl	800f418 <rcl_client_is_valid>
 80113c6:	b1a8      	cbz	r0, 80113f4 <rcl_action_send_result_request+0x54>
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	300c      	adds	r0, #12
 80113cc:	f7fe ffc0 	bl	8010350 <rcl_subscription_is_valid>
 80113d0:	b180      	cbz	r0, 80113f4 <rcl_action_send_result_request+0x54>
 80113d2:	6820      	ldr	r0, [r4, #0]
 80113d4:	3010      	adds	r0, #16
 80113d6:	f7fe ffbb 	bl	8010350 <rcl_subscription_is_valid>
 80113da:	b158      	cbz	r0, 80113f4 <rcl_action_send_result_request+0x54>
 80113dc:	b195      	cbz	r5, 8011404 <rcl_action_send_result_request+0x64>
 80113de:	b18e      	cbz	r6, 8011404 <rcl_action_send_result_request+0x64>
 80113e0:	6820      	ldr	r0, [r4, #0]
 80113e2:	4632      	mov	r2, r6
 80113e4:	4629      	mov	r1, r5
 80113e6:	3008      	adds	r0, #8
 80113e8:	f7fd ff98 	bl	800f31c <rcl_send_request>
 80113ec:	3800      	subs	r0, #0
 80113ee:	bf18      	it	ne
 80113f0:	2001      	movne	r0, #1
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	f7f9 f9a0 	bl	800a738 <rcutils_reset_error>
 80113f8:	f640 0036 	movw	r0, #2102	; 0x836
 80113fc:	bd70      	pop	{r4, r5, r6, pc}
 80113fe:	f640 0036 	movw	r0, #2102	; 0x836
 8011402:	bd70      	pop	{r4, r5, r6, pc}
 8011404:	200b      	movs	r0, #11
 8011406:	bd70      	pop	{r4, r5, r6, pc}
 8011408:	f640 0036 	movw	r0, #2102	; 0x836
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop

08011410 <rcl_action_take_result_response>:
 8011410:	2800      	cmp	r0, #0
 8011412:	d03a      	beq.n	801148a <rcl_action_take_result_response+0x7a>
 8011414:	b570      	push	{r4, r5, r6, lr}
 8011416:	4604      	mov	r4, r0
 8011418:	6800      	ldr	r0, [r0, #0]
 801141a:	b388      	cbz	r0, 8011480 <rcl_action_take_result_response+0x70>
 801141c:	460d      	mov	r5, r1
 801141e:	4616      	mov	r6, r2
 8011420:	f7fd fffa 	bl	800f418 <rcl_client_is_valid>
 8011424:	b338      	cbz	r0, 8011476 <rcl_action_take_result_response+0x66>
 8011426:	6820      	ldr	r0, [r4, #0]
 8011428:	3004      	adds	r0, #4
 801142a:	f7fd fff5 	bl	800f418 <rcl_client_is_valid>
 801142e:	b310      	cbz	r0, 8011476 <rcl_action_take_result_response+0x66>
 8011430:	6820      	ldr	r0, [r4, #0]
 8011432:	3008      	adds	r0, #8
 8011434:	f7fd fff0 	bl	800f418 <rcl_client_is_valid>
 8011438:	b1e8      	cbz	r0, 8011476 <rcl_action_take_result_response+0x66>
 801143a:	6820      	ldr	r0, [r4, #0]
 801143c:	300c      	adds	r0, #12
 801143e:	f7fe ff87 	bl	8010350 <rcl_subscription_is_valid>
 8011442:	b1c0      	cbz	r0, 8011476 <rcl_action_take_result_response+0x66>
 8011444:	6820      	ldr	r0, [r4, #0]
 8011446:	3010      	adds	r0, #16
 8011448:	f7fe ff82 	bl	8010350 <rcl_subscription_is_valid>
 801144c:	b198      	cbz	r0, 8011476 <rcl_action_take_result_response+0x66>
 801144e:	b1d5      	cbz	r5, 8011486 <rcl_action_take_result_response+0x76>
 8011450:	b1ce      	cbz	r6, 8011486 <rcl_action_take_result_response+0x76>
 8011452:	6820      	ldr	r0, [r4, #0]
 8011454:	4632      	mov	r2, r6
 8011456:	4629      	mov	r1, r5
 8011458:	3008      	adds	r0, #8
 801145a:	f7fd ff95 	bl	800f388 <rcl_take_response>
 801145e:	b148      	cbz	r0, 8011474 <rcl_action_take_result_response+0x64>
 8011460:	280a      	cmp	r0, #10
 8011462:	d007      	beq.n	8011474 <rcl_action_take_result_response+0x64>
 8011464:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011468:	f640 0337 	movw	r3, #2103	; 0x837
 801146c:	4290      	cmp	r0, r2
 801146e:	bf0c      	ite	eq
 8011470:	4618      	moveq	r0, r3
 8011472:	2001      	movne	r0, #1
 8011474:	bd70      	pop	{r4, r5, r6, pc}
 8011476:	f7f9 f95f 	bl	800a738 <rcutils_reset_error>
 801147a:	f640 0036 	movw	r0, #2102	; 0x836
 801147e:	bd70      	pop	{r4, r5, r6, pc}
 8011480:	f640 0036 	movw	r0, #2102	; 0x836
 8011484:	bd70      	pop	{r4, r5, r6, pc}
 8011486:	200b      	movs	r0, #11
 8011488:	bd70      	pop	{r4, r5, r6, pc}
 801148a:	f640 0036 	movw	r0, #2102	; 0x836
 801148e:	4770      	bx	lr

08011490 <rcl_action_take_cancel_response>:
 8011490:	2800      	cmp	r0, #0
 8011492:	d03a      	beq.n	801150a <rcl_action_take_cancel_response+0x7a>
 8011494:	b570      	push	{r4, r5, r6, lr}
 8011496:	4604      	mov	r4, r0
 8011498:	6800      	ldr	r0, [r0, #0]
 801149a:	b388      	cbz	r0, 8011500 <rcl_action_take_cancel_response+0x70>
 801149c:	460d      	mov	r5, r1
 801149e:	4616      	mov	r6, r2
 80114a0:	f7fd ffba 	bl	800f418 <rcl_client_is_valid>
 80114a4:	b338      	cbz	r0, 80114f6 <rcl_action_take_cancel_response+0x66>
 80114a6:	6820      	ldr	r0, [r4, #0]
 80114a8:	3004      	adds	r0, #4
 80114aa:	f7fd ffb5 	bl	800f418 <rcl_client_is_valid>
 80114ae:	b310      	cbz	r0, 80114f6 <rcl_action_take_cancel_response+0x66>
 80114b0:	6820      	ldr	r0, [r4, #0]
 80114b2:	3008      	adds	r0, #8
 80114b4:	f7fd ffb0 	bl	800f418 <rcl_client_is_valid>
 80114b8:	b1e8      	cbz	r0, 80114f6 <rcl_action_take_cancel_response+0x66>
 80114ba:	6820      	ldr	r0, [r4, #0]
 80114bc:	300c      	adds	r0, #12
 80114be:	f7fe ff47 	bl	8010350 <rcl_subscription_is_valid>
 80114c2:	b1c0      	cbz	r0, 80114f6 <rcl_action_take_cancel_response+0x66>
 80114c4:	6820      	ldr	r0, [r4, #0]
 80114c6:	3010      	adds	r0, #16
 80114c8:	f7fe ff42 	bl	8010350 <rcl_subscription_is_valid>
 80114cc:	b198      	cbz	r0, 80114f6 <rcl_action_take_cancel_response+0x66>
 80114ce:	b1d5      	cbz	r5, 8011506 <rcl_action_take_cancel_response+0x76>
 80114d0:	b1ce      	cbz	r6, 8011506 <rcl_action_take_cancel_response+0x76>
 80114d2:	6820      	ldr	r0, [r4, #0]
 80114d4:	4632      	mov	r2, r6
 80114d6:	4629      	mov	r1, r5
 80114d8:	3004      	adds	r0, #4
 80114da:	f7fd ff55 	bl	800f388 <rcl_take_response>
 80114de:	b148      	cbz	r0, 80114f4 <rcl_action_take_cancel_response+0x64>
 80114e0:	280a      	cmp	r0, #10
 80114e2:	d007      	beq.n	80114f4 <rcl_action_take_cancel_response+0x64>
 80114e4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80114e8:	f640 0337 	movw	r3, #2103	; 0x837
 80114ec:	4290      	cmp	r0, r2
 80114ee:	bf0c      	ite	eq
 80114f0:	4618      	moveq	r0, r3
 80114f2:	2001      	movne	r0, #1
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
 80114f6:	f7f9 f91f 	bl	800a738 <rcutils_reset_error>
 80114fa:	f640 0036 	movw	r0, #2102	; 0x836
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	f640 0036 	movw	r0, #2102	; 0x836
 8011504:	bd70      	pop	{r4, r5, r6, pc}
 8011506:	200b      	movs	r0, #11
 8011508:	bd70      	pop	{r4, r5, r6, pc}
 801150a:	f640 0036 	movw	r0, #2102	; 0x836
 801150e:	4770      	bx	lr

08011510 <rcl_action_take_feedback>:
 8011510:	2800      	cmp	r0, #0
 8011512:	d038      	beq.n	8011586 <rcl_action_take_feedback+0x76>
 8011514:	b530      	push	{r4, r5, lr}
 8011516:	4604      	mov	r4, r0
 8011518:	6800      	ldr	r0, [r0, #0]
 801151a:	b091      	sub	sp, #68	; 0x44
 801151c:	b378      	cbz	r0, 801157e <rcl_action_take_feedback+0x6e>
 801151e:	460d      	mov	r5, r1
 8011520:	f7fd ff7a 	bl	800f418 <rcl_client_is_valid>
 8011524:	b328      	cbz	r0, 8011572 <rcl_action_take_feedback+0x62>
 8011526:	6820      	ldr	r0, [r4, #0]
 8011528:	3004      	adds	r0, #4
 801152a:	f7fd ff75 	bl	800f418 <rcl_client_is_valid>
 801152e:	b300      	cbz	r0, 8011572 <rcl_action_take_feedback+0x62>
 8011530:	6820      	ldr	r0, [r4, #0]
 8011532:	3008      	adds	r0, #8
 8011534:	f7fd ff70 	bl	800f418 <rcl_client_is_valid>
 8011538:	b1d8      	cbz	r0, 8011572 <rcl_action_take_feedback+0x62>
 801153a:	6820      	ldr	r0, [r4, #0]
 801153c:	300c      	adds	r0, #12
 801153e:	f7fe ff07 	bl	8010350 <rcl_subscription_is_valid>
 8011542:	b1b0      	cbz	r0, 8011572 <rcl_action_take_feedback+0x62>
 8011544:	6820      	ldr	r0, [r4, #0]
 8011546:	3010      	adds	r0, #16
 8011548:	f7fe ff02 	bl	8010350 <rcl_subscription_is_valid>
 801154c:	b188      	cbz	r0, 8011572 <rcl_action_take_feedback+0x62>
 801154e:	b1ed      	cbz	r5, 801158c <rcl_action_take_feedback+0x7c>
 8011550:	6820      	ldr	r0, [r4, #0]
 8011552:	2300      	movs	r3, #0
 8011554:	466a      	mov	r2, sp
 8011556:	4629      	mov	r1, r5
 8011558:	300c      	adds	r0, #12
 801155a:	f7fe fe9b 	bl	8010294 <rcl_take>
 801155e:	b160      	cbz	r0, 801157a <rcl_action_take_feedback+0x6a>
 8011560:	f240 1391 	movw	r3, #401	; 0x191
 8011564:	4298      	cmp	r0, r3
 8011566:	d014      	beq.n	8011592 <rcl_action_take_feedback+0x82>
 8011568:	280a      	cmp	r0, #10
 801156a:	bf18      	it	ne
 801156c:	2001      	movne	r0, #1
 801156e:	b011      	add	sp, #68	; 0x44
 8011570:	bd30      	pop	{r4, r5, pc}
 8011572:	f7f9 f8e1 	bl	800a738 <rcutils_reset_error>
 8011576:	f640 0036 	movw	r0, #2102	; 0x836
 801157a:	b011      	add	sp, #68	; 0x44
 801157c:	bd30      	pop	{r4, r5, pc}
 801157e:	f640 0036 	movw	r0, #2102	; 0x836
 8011582:	b011      	add	sp, #68	; 0x44
 8011584:	bd30      	pop	{r4, r5, pc}
 8011586:	f640 0036 	movw	r0, #2102	; 0x836
 801158a:	4770      	bx	lr
 801158c:	200b      	movs	r0, #11
 801158e:	b011      	add	sp, #68	; 0x44
 8011590:	bd30      	pop	{r4, r5, pc}
 8011592:	f640 0037 	movw	r0, #2103	; 0x837
 8011596:	e7f0      	b.n	801157a <rcl_action_take_feedback+0x6a>

08011598 <rcl_action_wait_set_add_action_client>:
 8011598:	2800      	cmp	r0, #0
 801159a:	d048      	beq.n	801162e <rcl_action_wait_set_add_action_client+0x96>
 801159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159e:	460c      	mov	r4, r1
 80115a0:	2900      	cmp	r1, #0
 80115a2:	d03c      	beq.n	801161e <rcl_action_wait_set_add_action_client+0x86>
 80115a4:	4605      	mov	r5, r0
 80115a6:	6808      	ldr	r0, [r1, #0]
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d038      	beq.n	801161e <rcl_action_wait_set_add_action_client+0x86>
 80115ac:	4617      	mov	r7, r2
 80115ae:	461e      	mov	r6, r3
 80115b0:	f7fd ff32 	bl	800f418 <rcl_client_is_valid>
 80115b4:	b3b0      	cbz	r0, 8011624 <rcl_action_wait_set_add_action_client+0x8c>
 80115b6:	6820      	ldr	r0, [r4, #0]
 80115b8:	3004      	adds	r0, #4
 80115ba:	f7fd ff2d 	bl	800f418 <rcl_client_is_valid>
 80115be:	b388      	cbz	r0, 8011624 <rcl_action_wait_set_add_action_client+0x8c>
 80115c0:	6820      	ldr	r0, [r4, #0]
 80115c2:	3008      	adds	r0, #8
 80115c4:	f7fd ff28 	bl	800f418 <rcl_client_is_valid>
 80115c8:	b360      	cbz	r0, 8011624 <rcl_action_wait_set_add_action_client+0x8c>
 80115ca:	6820      	ldr	r0, [r4, #0]
 80115cc:	300c      	adds	r0, #12
 80115ce:	f7fe febf 	bl	8010350 <rcl_subscription_is_valid>
 80115d2:	b338      	cbz	r0, 8011624 <rcl_action_wait_set_add_action_client+0x8c>
 80115d4:	6820      	ldr	r0, [r4, #0]
 80115d6:	3010      	adds	r0, #16
 80115d8:	f7fe feba 	bl	8010350 <rcl_subscription_is_valid>
 80115dc:	b310      	cbz	r0, 8011624 <rcl_action_wait_set_add_action_client+0x8c>
 80115de:	6821      	ldr	r1, [r4, #0]
 80115e0:	4628      	mov	r0, r5
 80115e2:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 80115e6:	f7ff fccd 	bl	8010f84 <rcl_wait_set_add_client>
 80115ea:	b9b8      	cbnz	r0, 801161c <rcl_action_wait_set_add_action_client+0x84>
 80115ec:	6821      	ldr	r1, [r4, #0]
 80115ee:	4628      	mov	r0, r5
 80115f0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 80115f4:	3104      	adds	r1, #4
 80115f6:	f7ff fcc5 	bl	8010f84 <rcl_wait_set_add_client>
 80115fa:	b978      	cbnz	r0, 801161c <rcl_action_wait_set_add_action_client+0x84>
 80115fc:	6821      	ldr	r1, [r4, #0]
 80115fe:	4628      	mov	r0, r5
 8011600:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8011604:	3108      	adds	r1, #8
 8011606:	f7ff fcbd 	bl	8010f84 <rcl_wait_set_add_client>
 801160a:	b938      	cbnz	r0, 801161c <rcl_action_wait_set_add_action_client+0x84>
 801160c:	6821      	ldr	r1, [r4, #0]
 801160e:	4628      	mov	r0, r5
 8011610:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8011614:	310c      	adds	r1, #12
 8011616:	f7ff f96d 	bl	80108f4 <rcl_wait_set_add_subscription>
 801161a:	b158      	cbz	r0, 8011634 <rcl_action_wait_set_add_action_client+0x9c>
 801161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161e:	f640 0036 	movw	r0, #2102	; 0x836
 8011622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011624:	f7f9 f888 	bl	800a738 <rcutils_reset_error>
 8011628:	f640 0036 	movw	r0, #2102	; 0x836
 801162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801162e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011632:	4770      	bx	lr
 8011634:	6821      	ldr	r1, [r4, #0]
 8011636:	4628      	mov	r0, r5
 8011638:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801163c:	3110      	adds	r1, #16
 801163e:	f7ff f959 	bl	80108f4 <rcl_wait_set_add_subscription>
 8011642:	2800      	cmp	r0, #0
 8011644:	d1ea      	bne.n	801161c <rcl_action_wait_set_add_action_client+0x84>
 8011646:	b11f      	cbz	r7, 8011650 <rcl_action_wait_set_add_action_client+0xb8>
 8011648:	6823      	ldr	r3, [r4, #0]
 801164a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801164e:	603b      	str	r3, [r7, #0]
 8011650:	2e00      	cmp	r6, #0
 8011652:	d0e3      	beq.n	801161c <rcl_action_wait_set_add_action_client+0x84>
 8011654:	6823      	ldr	r3, [r4, #0]
 8011656:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801165a:	6033      	str	r3, [r6, #0]
 801165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801165e:	bf00      	nop

08011660 <rcl_action_client_wait_set_get_entities_ready>:
 8011660:	2800      	cmp	r0, #0
 8011662:	f000 808d 	beq.w	8011780 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801166a:	460c      	mov	r4, r1
 801166c:	2900      	cmp	r1, #0
 801166e:	d077      	beq.n	8011760 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011670:	4605      	mov	r5, r0
 8011672:	6808      	ldr	r0, [r1, #0]
 8011674:	2800      	cmp	r0, #0
 8011676:	d073      	beq.n	8011760 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011678:	4616      	mov	r6, r2
 801167a:	461f      	mov	r7, r3
 801167c:	f7fd fecc 	bl	800f418 <rcl_client_is_valid>
 8011680:	2800      	cmp	r0, #0
 8011682:	d071      	beq.n	8011768 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011684:	6820      	ldr	r0, [r4, #0]
 8011686:	3004      	adds	r0, #4
 8011688:	f7fd fec6 	bl	800f418 <rcl_client_is_valid>
 801168c:	2800      	cmp	r0, #0
 801168e:	d06b      	beq.n	8011768 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011690:	6820      	ldr	r0, [r4, #0]
 8011692:	3008      	adds	r0, #8
 8011694:	f7fd fec0 	bl	800f418 <rcl_client_is_valid>
 8011698:	2800      	cmp	r0, #0
 801169a:	d065      	beq.n	8011768 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801169c:	6820      	ldr	r0, [r4, #0]
 801169e:	300c      	adds	r0, #12
 80116a0:	f7fe fe56 	bl	8010350 <rcl_subscription_is_valid>
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d05f      	beq.n	8011768 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80116a8:	6820      	ldr	r0, [r4, #0]
 80116aa:	3010      	adds	r0, #16
 80116ac:	f7fe fe50 	bl	8010350 <rcl_subscription_is_valid>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d059      	beq.n	8011768 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80116b4:	2e00      	cmp	r6, #0
 80116b6:	d060      	beq.n	801177a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80116b8:	2f00      	cmp	r7, #0
 80116ba:	d05e      	beq.n	801177a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80116bc:	9b06      	ldr	r3, [sp, #24]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d05b      	beq.n	801177a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80116c2:	9b07      	ldr	r3, [sp, #28]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d058      	beq.n	801177a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80116c8:	9b08      	ldr	r3, [sp, #32]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d055      	beq.n	801177a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	686a      	ldr	r2, [r5, #4]
 80116d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 80116d6:	428a      	cmp	r2, r1
 80116d8:	d94c      	bls.n	8011774 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80116da:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 80116de:	4282      	cmp	r2, r0
 80116e0:	d948      	bls.n	8011774 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80116e2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 80116e6:	69ea      	ldr	r2, [r5, #28]
 80116e8:	42a2      	cmp	r2, r4
 80116ea:	d943      	bls.n	8011774 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80116ec:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 80116f0:	4562      	cmp	r2, ip
 80116f2:	d93f      	bls.n	8011774 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80116f4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 80116f8:	4572      	cmp	r2, lr
 80116fa:	d93b      	bls.n	8011774 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80116fc:	69aa      	ldr	r2, [r5, #24]
 80116fe:	682d      	ldr	r5, [r5, #0]
 8011700:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011704:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011708:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801170c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011710:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011714:	f103 0c0c 	add.w	ip, r3, #12
 8011718:	eba5 050c 	sub.w	r5, r5, ip
 801171c:	fab5 f585 	clz	r5, r5
 8011720:	096d      	lsrs	r5, r5, #5
 8011722:	7035      	strb	r5, [r6, #0]
 8011724:	f103 0510 	add.w	r5, r3, #16
 8011728:	1b64      	subs	r4, r4, r5
 801172a:	fab4 f484 	clz	r4, r4
 801172e:	0964      	lsrs	r4, r4, #5
 8011730:	703c      	strb	r4, [r7, #0]
 8011732:	eba3 0008 	sub.w	r0, r3, r8
 8011736:	1d1c      	adds	r4, r3, #4
 8011738:	3308      	adds	r3, #8
 801173a:	1ad3      	subs	r3, r2, r3
 801173c:	fab0 f080 	clz	r0, r0
 8011740:	9a06      	ldr	r2, [sp, #24]
 8011742:	0940      	lsrs	r0, r0, #5
 8011744:	1b09      	subs	r1, r1, r4
 8011746:	7010      	strb	r0, [r2, #0]
 8011748:	fab1 f181 	clz	r1, r1
 801174c:	9a07      	ldr	r2, [sp, #28]
 801174e:	0949      	lsrs	r1, r1, #5
 8011750:	7011      	strb	r1, [r2, #0]
 8011752:	fab3 f383 	clz	r3, r3
 8011756:	9a08      	ldr	r2, [sp, #32]
 8011758:	095b      	lsrs	r3, r3, #5
 801175a:	2000      	movs	r0, #0
 801175c:	7013      	strb	r3, [r2, #0]
 801175e:	e001      	b.n	8011764 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011760:	f640 0036 	movw	r0, #2102	; 0x836
 8011764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011768:	f7f8 ffe6 	bl	800a738 <rcutils_reset_error>
 801176c:	f640 0036 	movw	r0, #2102	; 0x836
 8011770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011774:	2001      	movs	r0, #1
 8011776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801177a:	200b      	movs	r0, #11
 801177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011780:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop

08011788 <rcl_action_take_goal_request>:
 8011788:	2800      	cmp	r0, #0
 801178a:	d039      	beq.n	8011800 <rcl_action_take_goal_request+0x78>
 801178c:	b570      	push	{r4, r5, r6, lr}
 801178e:	4604      	mov	r4, r0
 8011790:	6800      	ldr	r0, [r0, #0]
 8011792:	b380      	cbz	r0, 80117f6 <rcl_action_take_goal_request+0x6e>
 8011794:	460d      	mov	r5, r1
 8011796:	4616      	mov	r6, r2
 8011798:	f7fe fc96 	bl	80100c8 <rcl_service_is_valid>
 801179c:	b330      	cbz	r0, 80117ec <rcl_action_take_goal_request+0x64>
 801179e:	6820      	ldr	r0, [r4, #0]
 80117a0:	3004      	adds	r0, #4
 80117a2:	f7fe fc91 	bl	80100c8 <rcl_service_is_valid>
 80117a6:	b308      	cbz	r0, 80117ec <rcl_action_take_goal_request+0x64>
 80117a8:	6820      	ldr	r0, [r4, #0]
 80117aa:	3008      	adds	r0, #8
 80117ac:	f7fe fc8c 	bl	80100c8 <rcl_service_is_valid>
 80117b0:	b1e0      	cbz	r0, 80117ec <rcl_action_take_goal_request+0x64>
 80117b2:	6820      	ldr	r0, [r4, #0]
 80117b4:	300c      	adds	r0, #12
 80117b6:	f7f8 f82f 	bl	8009818 <rcl_publisher_is_valid>
 80117ba:	b1b8      	cbz	r0, 80117ec <rcl_action_take_goal_request+0x64>
 80117bc:	6820      	ldr	r0, [r4, #0]
 80117be:	3010      	adds	r0, #16
 80117c0:	f7f8 f82a 	bl	8009818 <rcl_publisher_is_valid>
 80117c4:	b190      	cbz	r0, 80117ec <rcl_action_take_goal_request+0x64>
 80117c6:	b1cd      	cbz	r5, 80117fc <rcl_action_take_goal_request+0x74>
 80117c8:	b1c6      	cbz	r6, 80117fc <rcl_action_take_goal_request+0x74>
 80117ca:	6820      	ldr	r0, [r4, #0]
 80117cc:	4632      	mov	r2, r6
 80117ce:	4629      	mov	r1, r5
 80117d0:	f7fe fc22 	bl	8010018 <rcl_take_request>
 80117d4:	b148      	cbz	r0, 80117ea <rcl_action_take_goal_request+0x62>
 80117d6:	280a      	cmp	r0, #10
 80117d8:	d007      	beq.n	80117ea <rcl_action_take_goal_request+0x62>
 80117da:	f240 2259 	movw	r2, #601	; 0x259
 80117de:	f640 0399 	movw	r3, #2201	; 0x899
 80117e2:	4290      	cmp	r0, r2
 80117e4:	bf0c      	ite	eq
 80117e6:	4618      	moveq	r0, r3
 80117e8:	2001      	movne	r0, #1
 80117ea:	bd70      	pop	{r4, r5, r6, pc}
 80117ec:	f7f8 ffa4 	bl	800a738 <rcutils_reset_error>
 80117f0:	f640 0098 	movw	r0, #2200	; 0x898
 80117f4:	bd70      	pop	{r4, r5, r6, pc}
 80117f6:	f640 0098 	movw	r0, #2200	; 0x898
 80117fa:	bd70      	pop	{r4, r5, r6, pc}
 80117fc:	200b      	movs	r0, #11
 80117fe:	bd70      	pop	{r4, r5, r6, pc}
 8011800:	f640 0098 	movw	r0, #2200	; 0x898
 8011804:	4770      	bx	lr
 8011806:	bf00      	nop

08011808 <rcl_action_send_goal_response>:
 8011808:	b388      	cbz	r0, 801186e <rcl_action_send_goal_response+0x66>
 801180a:	b570      	push	{r4, r5, r6, lr}
 801180c:	4604      	mov	r4, r0
 801180e:	6800      	ldr	r0, [r0, #0]
 8011810:	b340      	cbz	r0, 8011864 <rcl_action_send_goal_response+0x5c>
 8011812:	460d      	mov	r5, r1
 8011814:	4616      	mov	r6, r2
 8011816:	f7fe fc57 	bl	80100c8 <rcl_service_is_valid>
 801181a:	b1f0      	cbz	r0, 801185a <rcl_action_send_goal_response+0x52>
 801181c:	6820      	ldr	r0, [r4, #0]
 801181e:	3004      	adds	r0, #4
 8011820:	f7fe fc52 	bl	80100c8 <rcl_service_is_valid>
 8011824:	b1c8      	cbz	r0, 801185a <rcl_action_send_goal_response+0x52>
 8011826:	6820      	ldr	r0, [r4, #0]
 8011828:	3008      	adds	r0, #8
 801182a:	f7fe fc4d 	bl	80100c8 <rcl_service_is_valid>
 801182e:	b1a0      	cbz	r0, 801185a <rcl_action_send_goal_response+0x52>
 8011830:	6820      	ldr	r0, [r4, #0]
 8011832:	300c      	adds	r0, #12
 8011834:	f7f7 fff0 	bl	8009818 <rcl_publisher_is_valid>
 8011838:	b178      	cbz	r0, 801185a <rcl_action_send_goal_response+0x52>
 801183a:	6820      	ldr	r0, [r4, #0]
 801183c:	3010      	adds	r0, #16
 801183e:	f7f7 ffeb 	bl	8009818 <rcl_publisher_is_valid>
 8011842:	b150      	cbz	r0, 801185a <rcl_action_send_goal_response+0x52>
 8011844:	b18d      	cbz	r5, 801186a <rcl_action_send_goal_response+0x62>
 8011846:	b186      	cbz	r6, 801186a <rcl_action_send_goal_response+0x62>
 8011848:	6820      	ldr	r0, [r4, #0]
 801184a:	4632      	mov	r2, r6
 801184c:	4629      	mov	r1, r5
 801184e:	f7fe fc23 	bl	8010098 <rcl_send_response>
 8011852:	3800      	subs	r0, #0
 8011854:	bf18      	it	ne
 8011856:	2001      	movne	r0, #1
 8011858:	bd70      	pop	{r4, r5, r6, pc}
 801185a:	f7f8 ff6d 	bl	800a738 <rcutils_reset_error>
 801185e:	f640 0098 	movw	r0, #2200	; 0x898
 8011862:	bd70      	pop	{r4, r5, r6, pc}
 8011864:	f640 0098 	movw	r0, #2200	; 0x898
 8011868:	bd70      	pop	{r4, r5, r6, pc}
 801186a:	200b      	movs	r0, #11
 801186c:	bd70      	pop	{r4, r5, r6, pc}
 801186e:	f640 0098 	movw	r0, #2200	; 0x898
 8011872:	4770      	bx	lr

08011874 <rcl_action_take_result_request>:
 8011874:	2800      	cmp	r0, #0
 8011876:	d03a      	beq.n	80118ee <rcl_action_take_result_request+0x7a>
 8011878:	b570      	push	{r4, r5, r6, lr}
 801187a:	4604      	mov	r4, r0
 801187c:	6800      	ldr	r0, [r0, #0]
 801187e:	b388      	cbz	r0, 80118e4 <rcl_action_take_result_request+0x70>
 8011880:	460d      	mov	r5, r1
 8011882:	4616      	mov	r6, r2
 8011884:	f7fe fc20 	bl	80100c8 <rcl_service_is_valid>
 8011888:	b338      	cbz	r0, 80118da <rcl_action_take_result_request+0x66>
 801188a:	6820      	ldr	r0, [r4, #0]
 801188c:	3004      	adds	r0, #4
 801188e:	f7fe fc1b 	bl	80100c8 <rcl_service_is_valid>
 8011892:	b310      	cbz	r0, 80118da <rcl_action_take_result_request+0x66>
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	3008      	adds	r0, #8
 8011898:	f7fe fc16 	bl	80100c8 <rcl_service_is_valid>
 801189c:	b1e8      	cbz	r0, 80118da <rcl_action_take_result_request+0x66>
 801189e:	6820      	ldr	r0, [r4, #0]
 80118a0:	300c      	adds	r0, #12
 80118a2:	f7f7 ffb9 	bl	8009818 <rcl_publisher_is_valid>
 80118a6:	b1c0      	cbz	r0, 80118da <rcl_action_take_result_request+0x66>
 80118a8:	6820      	ldr	r0, [r4, #0]
 80118aa:	3010      	adds	r0, #16
 80118ac:	f7f7 ffb4 	bl	8009818 <rcl_publisher_is_valid>
 80118b0:	b198      	cbz	r0, 80118da <rcl_action_take_result_request+0x66>
 80118b2:	b1d5      	cbz	r5, 80118ea <rcl_action_take_result_request+0x76>
 80118b4:	b1ce      	cbz	r6, 80118ea <rcl_action_take_result_request+0x76>
 80118b6:	6820      	ldr	r0, [r4, #0]
 80118b8:	4632      	mov	r2, r6
 80118ba:	4629      	mov	r1, r5
 80118bc:	3008      	adds	r0, #8
 80118be:	f7fe fbab 	bl	8010018 <rcl_take_request>
 80118c2:	b148      	cbz	r0, 80118d8 <rcl_action_take_result_request+0x64>
 80118c4:	280a      	cmp	r0, #10
 80118c6:	d007      	beq.n	80118d8 <rcl_action_take_result_request+0x64>
 80118c8:	f240 2259 	movw	r2, #601	; 0x259
 80118cc:	f640 0399 	movw	r3, #2201	; 0x899
 80118d0:	4290      	cmp	r0, r2
 80118d2:	bf0c      	ite	eq
 80118d4:	4618      	moveq	r0, r3
 80118d6:	2001      	movne	r0, #1
 80118d8:	bd70      	pop	{r4, r5, r6, pc}
 80118da:	f7f8 ff2d 	bl	800a738 <rcutils_reset_error>
 80118de:	f640 0098 	movw	r0, #2200	; 0x898
 80118e2:	bd70      	pop	{r4, r5, r6, pc}
 80118e4:	f640 0098 	movw	r0, #2200	; 0x898
 80118e8:	bd70      	pop	{r4, r5, r6, pc}
 80118ea:	200b      	movs	r0, #11
 80118ec:	bd70      	pop	{r4, r5, r6, pc}
 80118ee:	f640 0098 	movw	r0, #2200	; 0x898
 80118f2:	4770      	bx	lr

080118f4 <rcl_action_take_cancel_request>:
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d03a      	beq.n	801196e <rcl_action_take_cancel_request+0x7a>
 80118f8:	b570      	push	{r4, r5, r6, lr}
 80118fa:	4604      	mov	r4, r0
 80118fc:	6800      	ldr	r0, [r0, #0]
 80118fe:	b388      	cbz	r0, 8011964 <rcl_action_take_cancel_request+0x70>
 8011900:	460d      	mov	r5, r1
 8011902:	4616      	mov	r6, r2
 8011904:	f7fe fbe0 	bl	80100c8 <rcl_service_is_valid>
 8011908:	b338      	cbz	r0, 801195a <rcl_action_take_cancel_request+0x66>
 801190a:	6820      	ldr	r0, [r4, #0]
 801190c:	3004      	adds	r0, #4
 801190e:	f7fe fbdb 	bl	80100c8 <rcl_service_is_valid>
 8011912:	b310      	cbz	r0, 801195a <rcl_action_take_cancel_request+0x66>
 8011914:	6820      	ldr	r0, [r4, #0]
 8011916:	3008      	adds	r0, #8
 8011918:	f7fe fbd6 	bl	80100c8 <rcl_service_is_valid>
 801191c:	b1e8      	cbz	r0, 801195a <rcl_action_take_cancel_request+0x66>
 801191e:	6820      	ldr	r0, [r4, #0]
 8011920:	300c      	adds	r0, #12
 8011922:	f7f7 ff79 	bl	8009818 <rcl_publisher_is_valid>
 8011926:	b1c0      	cbz	r0, 801195a <rcl_action_take_cancel_request+0x66>
 8011928:	6820      	ldr	r0, [r4, #0]
 801192a:	3010      	adds	r0, #16
 801192c:	f7f7 ff74 	bl	8009818 <rcl_publisher_is_valid>
 8011930:	b198      	cbz	r0, 801195a <rcl_action_take_cancel_request+0x66>
 8011932:	b1d5      	cbz	r5, 801196a <rcl_action_take_cancel_request+0x76>
 8011934:	b1ce      	cbz	r6, 801196a <rcl_action_take_cancel_request+0x76>
 8011936:	6820      	ldr	r0, [r4, #0]
 8011938:	4632      	mov	r2, r6
 801193a:	4629      	mov	r1, r5
 801193c:	3004      	adds	r0, #4
 801193e:	f7fe fb6b 	bl	8010018 <rcl_take_request>
 8011942:	b148      	cbz	r0, 8011958 <rcl_action_take_cancel_request+0x64>
 8011944:	280a      	cmp	r0, #10
 8011946:	d007      	beq.n	8011958 <rcl_action_take_cancel_request+0x64>
 8011948:	f240 2259 	movw	r2, #601	; 0x259
 801194c:	f640 0399 	movw	r3, #2201	; 0x899
 8011950:	4290      	cmp	r0, r2
 8011952:	bf0c      	ite	eq
 8011954:	4618      	moveq	r0, r3
 8011956:	2001      	movne	r0, #1
 8011958:	bd70      	pop	{r4, r5, r6, pc}
 801195a:	f7f8 feed 	bl	800a738 <rcutils_reset_error>
 801195e:	f640 0098 	movw	r0, #2200	; 0x898
 8011962:	bd70      	pop	{r4, r5, r6, pc}
 8011964:	f640 0098 	movw	r0, #2200	; 0x898
 8011968:	bd70      	pop	{r4, r5, r6, pc}
 801196a:	200b      	movs	r0, #11
 801196c:	bd70      	pop	{r4, r5, r6, pc}
 801196e:	f640 0098 	movw	r0, #2200	; 0x898
 8011972:	4770      	bx	lr

08011974 <rcl_action_send_cancel_response>:
 8011974:	b390      	cbz	r0, 80119dc <rcl_action_send_cancel_response+0x68>
 8011976:	b570      	push	{r4, r5, r6, lr}
 8011978:	4604      	mov	r4, r0
 801197a:	6800      	ldr	r0, [r0, #0]
 801197c:	b348      	cbz	r0, 80119d2 <rcl_action_send_cancel_response+0x5e>
 801197e:	460d      	mov	r5, r1
 8011980:	4616      	mov	r6, r2
 8011982:	f7fe fba1 	bl	80100c8 <rcl_service_is_valid>
 8011986:	b1f8      	cbz	r0, 80119c8 <rcl_action_send_cancel_response+0x54>
 8011988:	6820      	ldr	r0, [r4, #0]
 801198a:	3004      	adds	r0, #4
 801198c:	f7fe fb9c 	bl	80100c8 <rcl_service_is_valid>
 8011990:	b1d0      	cbz	r0, 80119c8 <rcl_action_send_cancel_response+0x54>
 8011992:	6820      	ldr	r0, [r4, #0]
 8011994:	3008      	adds	r0, #8
 8011996:	f7fe fb97 	bl	80100c8 <rcl_service_is_valid>
 801199a:	b1a8      	cbz	r0, 80119c8 <rcl_action_send_cancel_response+0x54>
 801199c:	6820      	ldr	r0, [r4, #0]
 801199e:	300c      	adds	r0, #12
 80119a0:	f7f7 ff3a 	bl	8009818 <rcl_publisher_is_valid>
 80119a4:	b180      	cbz	r0, 80119c8 <rcl_action_send_cancel_response+0x54>
 80119a6:	6820      	ldr	r0, [r4, #0]
 80119a8:	3010      	adds	r0, #16
 80119aa:	f7f7 ff35 	bl	8009818 <rcl_publisher_is_valid>
 80119ae:	b158      	cbz	r0, 80119c8 <rcl_action_send_cancel_response+0x54>
 80119b0:	b195      	cbz	r5, 80119d8 <rcl_action_send_cancel_response+0x64>
 80119b2:	b18e      	cbz	r6, 80119d8 <rcl_action_send_cancel_response+0x64>
 80119b4:	6820      	ldr	r0, [r4, #0]
 80119b6:	4632      	mov	r2, r6
 80119b8:	4629      	mov	r1, r5
 80119ba:	3004      	adds	r0, #4
 80119bc:	f7fe fb6c 	bl	8010098 <rcl_send_response>
 80119c0:	3800      	subs	r0, #0
 80119c2:	bf18      	it	ne
 80119c4:	2001      	movne	r0, #1
 80119c6:	bd70      	pop	{r4, r5, r6, pc}
 80119c8:	f7f8 feb6 	bl	800a738 <rcutils_reset_error>
 80119cc:	f640 0098 	movw	r0, #2200	; 0x898
 80119d0:	bd70      	pop	{r4, r5, r6, pc}
 80119d2:	f640 0098 	movw	r0, #2200	; 0x898
 80119d6:	bd70      	pop	{r4, r5, r6, pc}
 80119d8:	200b      	movs	r0, #11
 80119da:	bd70      	pop	{r4, r5, r6, pc}
 80119dc:	f640 0098 	movw	r0, #2200	; 0x898
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop

080119e4 <rcl_action_wait_set_add_action_server>:
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d04d      	beq.n	8011a84 <rcl_action_wait_set_add_action_server+0xa0>
 80119e8:	b570      	push	{r4, r5, r6, lr}
 80119ea:	460c      	mov	r4, r1
 80119ec:	b159      	cbz	r1, 8011a06 <rcl_action_wait_set_add_action_server+0x22>
 80119ee:	4605      	mov	r5, r0
 80119f0:	6808      	ldr	r0, [r1, #0]
 80119f2:	b140      	cbz	r0, 8011a06 <rcl_action_wait_set_add_action_server+0x22>
 80119f4:	4616      	mov	r6, r2
 80119f6:	f7fe fb67 	bl	80100c8 <rcl_service_is_valid>
 80119fa:	b120      	cbz	r0, 8011a06 <rcl_action_wait_set_add_action_server+0x22>
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	3004      	adds	r0, #4
 8011a00:	f7fe fb62 	bl	80100c8 <rcl_service_is_valid>
 8011a04:	b910      	cbnz	r0, 8011a0c <rcl_action_wait_set_add_action_server+0x28>
 8011a06:	f640 0098 	movw	r0, #2200	; 0x898
 8011a0a:	bd70      	pop	{r4, r5, r6, pc}
 8011a0c:	6820      	ldr	r0, [r4, #0]
 8011a0e:	3008      	adds	r0, #8
 8011a10:	f7fe fb5a 	bl	80100c8 <rcl_service_is_valid>
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d0f6      	beq.n	8011a06 <rcl_action_wait_set_add_action_server+0x22>
 8011a18:	6820      	ldr	r0, [r4, #0]
 8011a1a:	300c      	adds	r0, #12
 8011a1c:	f7f7 ff14 	bl	8009848 <rcl_publisher_is_valid_except_context>
 8011a20:	2800      	cmp	r0, #0
 8011a22:	d0f0      	beq.n	8011a06 <rcl_action_wait_set_add_action_server+0x22>
 8011a24:	6820      	ldr	r0, [r4, #0]
 8011a26:	3010      	adds	r0, #16
 8011a28:	f7f7 ff0e 	bl	8009848 <rcl_publisher_is_valid_except_context>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d0ea      	beq.n	8011a06 <rcl_action_wait_set_add_action_server+0x22>
 8011a30:	6821      	ldr	r1, [r4, #0]
 8011a32:	4628      	mov	r0, r5
 8011a34:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8011a38:	f7ff fad0 	bl	8010fdc <rcl_wait_set_add_service>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	d1e4      	bne.n	8011a0a <rcl_action_wait_set_add_action_server+0x26>
 8011a40:	6821      	ldr	r1, [r4, #0]
 8011a42:	4628      	mov	r0, r5
 8011a44:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8011a48:	3104      	adds	r1, #4
 8011a4a:	f7ff fac7 	bl	8010fdc <rcl_wait_set_add_service>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d1db      	bne.n	8011a0a <rcl_action_wait_set_add_action_server+0x26>
 8011a52:	6821      	ldr	r1, [r4, #0]
 8011a54:	4628      	mov	r0, r5
 8011a56:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8011a5a:	3108      	adds	r1, #8
 8011a5c:	f7ff fabe 	bl	8010fdc <rcl_wait_set_add_service>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d1d2      	bne.n	8011a0a <rcl_action_wait_set_add_action_server+0x26>
 8011a64:	6821      	ldr	r1, [r4, #0]
 8011a66:	4628      	mov	r0, r5
 8011a68:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8011a6c:	3114      	adds	r1, #20
 8011a6e:	f7ff fa59 	bl	8010f24 <rcl_wait_set_add_timer>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d1c9      	bne.n	8011a0a <rcl_action_wait_set_add_action_server+0x26>
 8011a76:	2e00      	cmp	r6, #0
 8011a78:	d0c7      	beq.n	8011a0a <rcl_action_wait_set_add_action_server+0x26>
 8011a7a:	6823      	ldr	r3, [r4, #0]
 8011a7c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8011a80:	6033      	str	r3, [r6, #0]
 8011a82:	bd70      	pop	{r4, r5, r6, pc}
 8011a84:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop

08011a8c <rcl_action_server_wait_set_get_entities_ready>:
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d05a      	beq.n	8011b46 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8011a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a92:	460c      	mov	r4, r1
 8011a94:	b161      	cbz	r1, 8011ab0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011a96:	4605      	mov	r5, r0
 8011a98:	6808      	ldr	r0, [r1, #0]
 8011a9a:	b148      	cbz	r0, 8011ab0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011a9c:	4616      	mov	r6, r2
 8011a9e:	461f      	mov	r7, r3
 8011aa0:	f7fe fb12 	bl	80100c8 <rcl_service_is_valid>
 8011aa4:	b120      	cbz	r0, 8011ab0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011aa6:	6820      	ldr	r0, [r4, #0]
 8011aa8:	3004      	adds	r0, #4
 8011aaa:	f7fe fb0d 	bl	80100c8 <rcl_service_is_valid>
 8011aae:	b910      	cbnz	r0, 8011ab6 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8011ab0:	f640 0098 	movw	r0, #2200	; 0x898
 8011ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ab6:	6820      	ldr	r0, [r4, #0]
 8011ab8:	3008      	adds	r0, #8
 8011aba:	f7fe fb05 	bl	80100c8 <rcl_service_is_valid>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d0f6      	beq.n	8011ab0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011ac2:	6820      	ldr	r0, [r4, #0]
 8011ac4:	300c      	adds	r0, #12
 8011ac6:	f7f7 febf 	bl	8009848 <rcl_publisher_is_valid_except_context>
 8011aca:	2800      	cmp	r0, #0
 8011acc:	d0f0      	beq.n	8011ab0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011ace:	6820      	ldr	r0, [r4, #0]
 8011ad0:	3010      	adds	r0, #16
 8011ad2:	f7f7 feb9 	bl	8009848 <rcl_publisher_is_valid_except_context>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d0ea      	beq.n	8011ab0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011ada:	b3be      	cbz	r6, 8011b4c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011adc:	b3b7      	cbz	r7, 8011b4c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011ade:	9b06      	ldr	r3, [sp, #24]
 8011ae0:	b3a3      	cbz	r3, 8011b4c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011ae2:	9b07      	ldr	r3, [sp, #28]
 8011ae4:	b393      	cbz	r3, 8011b4c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011ae6:	6821      	ldr	r1, [r4, #0]
 8011ae8:	692a      	ldr	r2, [r5, #16]
 8011aea:	6a2c      	ldr	r4, [r5, #32]
 8011aec:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8011af0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011af4:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8011af8:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8011afc:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8011b00:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011b04:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011b08:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011b0c:	1a64      	subs	r4, r4, r1
 8011b0e:	fab4 f484 	clz	r4, r4
 8011b12:	0964      	lsrs	r4, r4, #5
 8011b14:	7034      	strb	r4, [r6, #0]
 8011b16:	1d0c      	adds	r4, r1, #4
 8011b18:	1b1b      	subs	r3, r3, r4
 8011b1a:	fab3 f383 	clz	r3, r3
 8011b1e:	095b      	lsrs	r3, r3, #5
 8011b20:	f101 0408 	add.w	r4, r1, #8
 8011b24:	703b      	strb	r3, [r7, #0]
 8011b26:	f101 0314 	add.w	r3, r1, #20
 8011b2a:	1b01      	subs	r1, r0, r4
 8011b2c:	1ad3      	subs	r3, r2, r3
 8011b2e:	fab1 f181 	clz	r1, r1
 8011b32:	9a06      	ldr	r2, [sp, #24]
 8011b34:	0949      	lsrs	r1, r1, #5
 8011b36:	7011      	strb	r1, [r2, #0]
 8011b38:	fab3 f383 	clz	r3, r3
 8011b3c:	9a07      	ldr	r2, [sp, #28]
 8011b3e:	095b      	lsrs	r3, r3, #5
 8011b40:	2000      	movs	r0, #0
 8011b42:	7013      	strb	r3, [r2, #0]
 8011b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b46:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011b4a:	4770      	bx	lr
 8011b4c:	200b      	movs	r0, #11
 8011b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b50 <_execute_event_handler>:
 8011b50:	2002      	movs	r0, #2
 8011b52:	4770      	bx	lr

08011b54 <_cancel_goal_event_handler>:
 8011b54:	2003      	movs	r0, #3
 8011b56:	4770      	bx	lr

08011b58 <_succeed_event_handler>:
 8011b58:	2004      	movs	r0, #4
 8011b5a:	4770      	bx	lr

08011b5c <_abort_event_handler>:
 8011b5c:	2006      	movs	r0, #6
 8011b5e:	4770      	bx	lr

08011b60 <_canceled_event_handler>:
 8011b60:	2005      	movs	r0, #5
 8011b62:	4770      	bx	lr

08011b64 <rcl_action_transition_goal_state>:
 8011b64:	b2c2      	uxtb	r2, r0
 8011b66:	2a06      	cmp	r2, #6
 8011b68:	d80c      	bhi.n	8011b84 <rcl_action_transition_goal_state+0x20>
 8011b6a:	2904      	cmp	r1, #4
 8011b6c:	d80a      	bhi.n	8011b84 <rcl_action_transition_goal_state+0x20>
 8011b6e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011b72:	b410      	push	{r4}
 8011b74:	1853      	adds	r3, r2, r1
 8011b76:	4c06      	ldr	r4, [pc, #24]	; (8011b90 <rcl_action_transition_goal_state+0x2c>)
 8011b78:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011b7c:	b123      	cbz	r3, 8011b88 <rcl_action_transition_goal_state+0x24>
 8011b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b82:	4718      	bx	r3
 8011b84:	2000      	movs	r0, #0
 8011b86:	4770      	bx	lr
 8011b88:	2000      	movs	r0, #0
 8011b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b8e:	4770      	bx	lr
 8011b90:	08017d74 	.word	0x08017d74

08011b94 <rcl_action_get_zero_initialized_cancel_response>:
 8011b94:	b510      	push	{r4, lr}
 8011b96:	4c07      	ldr	r4, [pc, #28]	; (8011bb4 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011b98:	4686      	mov	lr, r0
 8011b9a:	4684      	mov	ip, r0
 8011b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ba4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ba8:	6823      	ldr	r3, [r4, #0]
 8011baa:	f8cc 3000 	str.w	r3, [ip]
 8011bae:	4670      	mov	r0, lr
 8011bb0:	bd10      	pop	{r4, pc}
 8011bb2:	bf00      	nop
 8011bb4:	08017e00 	.word	0x08017e00

08011bb8 <rclc_action_send_result_request>:
 8011bb8:	b1d0      	cbz	r0, 8011bf0 <rclc_action_send_result_request+0x38>
 8011bba:	b500      	push	{lr}
 8011bbc:	4684      	mov	ip, r0
 8011bbe:	b087      	sub	sp, #28
 8011bc0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011bc4:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011bc8:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011bcc:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011bd0:	f10d 0e08 	add.w	lr, sp, #8
 8011bd4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011bd8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011bdc:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011be0:	a902      	add	r1, sp, #8
 8011be2:	3010      	adds	r0, #16
 8011be4:	f7ff fbdc 	bl	80113a0 <rcl_action_send_result_request>
 8011be8:	b920      	cbnz	r0, 8011bf4 <rclc_action_send_result_request+0x3c>
 8011bea:	b007      	add	sp, #28
 8011bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bf0:	200b      	movs	r0, #11
 8011bf2:	4770      	bx	lr
 8011bf4:	9001      	str	r0, [sp, #4]
 8011bf6:	f7f8 fd9f 	bl	800a738 <rcutils_reset_error>
 8011bfa:	9801      	ldr	r0, [sp, #4]
 8011bfc:	b007      	add	sp, #28
 8011bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c02:	bf00      	nop

08011c04 <rclc_action_take_goal_handle>:
 8011c04:	b160      	cbz	r0, 8011c20 <rclc_action_take_goal_handle+0x1c>
 8011c06:	6883      	ldr	r3, [r0, #8]
 8011c08:	b143      	cbz	r3, 8011c1c <rclc_action_take_goal_handle+0x18>
 8011c0a:	6819      	ldr	r1, [r3, #0]
 8011c0c:	6081      	str	r1, [r0, #8]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	721a      	strb	r2, [r3, #8]
 8011c12:	68c1      	ldr	r1, [r0, #12]
 8011c14:	6019      	str	r1, [r3, #0]
 8011c16:	621a      	str	r2, [r3, #32]
 8011c18:	849a      	strh	r2, [r3, #36]	; 0x24
 8011c1a:	60c3      	str	r3, [r0, #12]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	4770      	bx	lr
 8011c20:	4603      	mov	r3, r0
 8011c22:	e7fb      	b.n	8011c1c <rclc_action_take_goal_handle+0x18>

08011c24 <rclc_action_remove_used_goal_handle>:
 8011c24:	b180      	cbz	r0, 8011c48 <rclc_action_remove_used_goal_handle+0x24>
 8011c26:	b179      	cbz	r1, 8011c48 <rclc_action_remove_used_goal_handle+0x24>
 8011c28:	68c3      	ldr	r3, [r0, #12]
 8011c2a:	4299      	cmp	r1, r3
 8011c2c:	d00d      	beq.n	8011c4a <rclc_action_remove_used_goal_handle+0x26>
 8011c2e:	b12b      	cbz	r3, 8011c3c <rclc_action_remove_used_goal_handle+0x18>
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	4291      	cmp	r1, r2
 8011c34:	d003      	beq.n	8011c3e <rclc_action_remove_used_goal_handle+0x1a>
 8011c36:	4613      	mov	r3, r2
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d1f9      	bne.n	8011c30 <rclc_action_remove_used_goal_handle+0xc>
 8011c3c:	4770      	bx	lr
 8011c3e:	680a      	ldr	r2, [r1, #0]
 8011c40:	601a      	str	r2, [r3, #0]
 8011c42:	6883      	ldr	r3, [r0, #8]
 8011c44:	600b      	str	r3, [r1, #0]
 8011c46:	6081      	str	r1, [r0, #8]
 8011c48:	4770      	bx	lr
 8011c4a:	680b      	ldr	r3, [r1, #0]
 8011c4c:	60c3      	str	r3, [r0, #12]
 8011c4e:	e7f8      	b.n	8011c42 <rclc_action_remove_used_goal_handle+0x1e>

08011c50 <rclc_action_find_goal_handle_by_uuid>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	b180      	cbz	r0, 8011c76 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011c54:	460d      	mov	r5, r1
 8011c56:	b181      	cbz	r1, 8011c7a <rclc_action_find_goal_handle_by_uuid+0x2a>
 8011c58:	68c4      	ldr	r4, [r0, #12]
 8011c5a:	b914      	cbnz	r4, 8011c62 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011c5c:	e009      	b.n	8011c72 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011c5e:	6824      	ldr	r4, [r4, #0]
 8011c60:	b13c      	cbz	r4, 8011c72 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011c62:	f104 0009 	add.w	r0, r4, #9
 8011c66:	2210      	movs	r2, #16
 8011c68:	4629      	mov	r1, r5
 8011c6a:	f004 fd5b 	bl	8016724 <memcmp>
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d1f5      	bne.n	8011c5e <rclc_action_find_goal_handle_by_uuid+0xe>
 8011c72:	4620      	mov	r0, r4
 8011c74:	bd38      	pop	{r3, r4, r5, pc}
 8011c76:	4604      	mov	r4, r0
 8011c78:	e7fb      	b.n	8011c72 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011c7a:	460c      	mov	r4, r1
 8011c7c:	e7f9      	b.n	8011c72 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011c7e:	bf00      	nop

08011c80 <rclc_action_find_first_handle_by_status>:
 8011c80:	b140      	cbz	r0, 8011c94 <rclc_action_find_first_handle_by_status+0x14>
 8011c82:	68c0      	ldr	r0, [r0, #12]
 8011c84:	b910      	cbnz	r0, 8011c8c <rclc_action_find_first_handle_by_status+0xc>
 8011c86:	e005      	b.n	8011c94 <rclc_action_find_first_handle_by_status+0x14>
 8011c88:	6800      	ldr	r0, [r0, #0]
 8011c8a:	b118      	cbz	r0, 8011c94 <rclc_action_find_first_handle_by_status+0x14>
 8011c8c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011c90:	428b      	cmp	r3, r1
 8011c92:	d1f9      	bne.n	8011c88 <rclc_action_find_first_handle_by_status+0x8>
 8011c94:	4770      	bx	lr
 8011c96:	bf00      	nop

08011c98 <rclc_action_find_first_terminated_handle>:
 8011c98:	b140      	cbz	r0, 8011cac <rclc_action_find_first_terminated_handle+0x14>
 8011c9a:	68c0      	ldr	r0, [r0, #12]
 8011c9c:	b910      	cbnz	r0, 8011ca4 <rclc_action_find_first_terminated_handle+0xc>
 8011c9e:	e005      	b.n	8011cac <rclc_action_find_first_terminated_handle+0x14>
 8011ca0:	6800      	ldr	r0, [r0, #0]
 8011ca2:	b118      	cbz	r0, 8011cac <rclc_action_find_first_terminated_handle+0x14>
 8011ca4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	ddf9      	ble.n	8011ca0 <rclc_action_find_first_terminated_handle+0x8>
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop

08011cb0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011cb0:	b170      	cbz	r0, 8011cd0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011cb2:	68c0      	ldr	r0, [r0, #12]
 8011cb4:	b160      	cbz	r0, 8011cd0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011cb6:	b410      	push	{r4}
 8011cb8:	e001      	b.n	8011cbe <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011cba:	6800      	ldr	r0, [r0, #0]
 8011cbc:	b128      	cbz	r0, 8011cca <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011cbe:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8011cc2:	4299      	cmp	r1, r3
 8011cc4:	bf08      	it	eq
 8011cc6:	4294      	cmpeq	r4, r2
 8011cc8:	d1f7      	bne.n	8011cba <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cce:	4770      	bx	lr
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop

08011cd4 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011cd4:	b170      	cbz	r0, 8011cf4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011cd6:	68c0      	ldr	r0, [r0, #12]
 8011cd8:	b160      	cbz	r0, 8011cf4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011cda:	b410      	push	{r4}
 8011cdc:	e001      	b.n	8011ce2 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011cde:	6800      	ldr	r0, [r0, #0]
 8011ce0:	b128      	cbz	r0, 8011cee <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011ce2:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8011ce6:	4299      	cmp	r1, r3
 8011ce8:	bf08      	it	eq
 8011cea:	4294      	cmpeq	r4, r2
 8011cec:	d1f7      	bne.n	8011cde <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cf2:	4770      	bx	lr
 8011cf4:	4770      	bx	lr
 8011cf6:	bf00      	nop

08011cf8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011cf8:	b170      	cbz	r0, 8011d18 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011cfa:	68c0      	ldr	r0, [r0, #12]
 8011cfc:	b160      	cbz	r0, 8011d18 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011cfe:	b410      	push	{r4}
 8011d00:	e001      	b.n	8011d06 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011d02:	6800      	ldr	r0, [r0, #0]
 8011d04:	b128      	cbz	r0, 8011d12 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011d06:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8011d0a:	4299      	cmp	r1, r3
 8011d0c:	bf08      	it	eq
 8011d0e:	4294      	cmpeq	r4, r2
 8011d10:	d1f7      	bne.n	8011d02 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop

08011d1c <rclc_action_find_first_handle_with_goal_response>:
 8011d1c:	b140      	cbz	r0, 8011d30 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011d1e:	68c0      	ldr	r0, [r0, #12]
 8011d20:	b910      	cbnz	r0, 8011d28 <rclc_action_find_first_handle_with_goal_response+0xc>
 8011d22:	e005      	b.n	8011d30 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011d24:	6800      	ldr	r0, [r0, #0]
 8011d26:	b118      	cbz	r0, 8011d30 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011d28:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d0f9      	beq.n	8011d24 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop

08011d34 <rclc_action_find_first_handle_with_result_response>:
 8011d34:	b140      	cbz	r0, 8011d48 <rclc_action_find_first_handle_with_result_response+0x14>
 8011d36:	68c0      	ldr	r0, [r0, #12]
 8011d38:	b910      	cbnz	r0, 8011d40 <rclc_action_find_first_handle_with_result_response+0xc>
 8011d3a:	e005      	b.n	8011d48 <rclc_action_find_first_handle_with_result_response+0x14>
 8011d3c:	6800      	ldr	r0, [r0, #0]
 8011d3e:	b118      	cbz	r0, 8011d48 <rclc_action_find_first_handle_with_result_response+0x14>
 8011d40:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d0f9      	beq.n	8011d3c <rclc_action_find_first_handle_with_result_response+0x8>
 8011d48:	4770      	bx	lr
 8011d4a:	bf00      	nop

08011d4c <rclc_action_server_response_goal_request>:
 8011d4c:	b198      	cbz	r0, 8011d76 <rclc_action_server_response_goal_request+0x2a>
 8011d4e:	b510      	push	{r4, lr}
 8011d50:	6844      	ldr	r4, [r0, #4]
 8011d52:	b086      	sub	sp, #24
 8011d54:	2200      	movs	r2, #0
 8011d56:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	9205      	str	r2, [sp, #20]
 8011d5e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8011d62:	aa03      	add	r2, sp, #12
 8011d64:	f104 0010 	add.w	r0, r4, #16
 8011d68:	f88d 300c 	strb.w	r3, [sp, #12]
 8011d6c:	f7ff fd4c 	bl	8011808 <rcl_action_send_goal_response>
 8011d70:	b918      	cbnz	r0, 8011d7a <rclc_action_server_response_goal_request+0x2e>
 8011d72:	b006      	add	sp, #24
 8011d74:	bd10      	pop	{r4, pc}
 8011d76:	200b      	movs	r0, #11
 8011d78:	4770      	bx	lr
 8011d7a:	9001      	str	r0, [sp, #4]
 8011d7c:	f7f8 fcdc 	bl	800a738 <rcutils_reset_error>
 8011d80:	9801      	ldr	r0, [sp, #4]
 8011d82:	b006      	add	sp, #24
 8011d84:	bd10      	pop	{r4, pc}
 8011d86:	bf00      	nop

08011d88 <rclc_action_server_goal_cancel_accept>:
 8011d88:	b310      	cbz	r0, 8011dd0 <rclc_action_server_goal_cancel_accept+0x48>
 8011d8a:	b510      	push	{r4, lr}
 8011d8c:	b090      	sub	sp, #64	; 0x40
 8011d8e:	4604      	mov	r4, r0
 8011d90:	a806      	add	r0, sp, #24
 8011d92:	f7ff feff 	bl	8011b94 <rcl_action_get_zero_initialized_cancel_response>
 8011d96:	2300      	movs	r3, #0
 8011d98:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011d9c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011da0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011da4:	f88d 3018 	strb.w	r3, [sp, #24]
 8011da8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011dac:	f8cd d01c 	str.w	sp, [sp, #28]
 8011db0:	46ec      	mov	ip, sp
 8011db2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011db6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8011dd8 <rclc_action_server_goal_cancel_accept+0x50>
 8011dba:	6860      	ldr	r0, [r4, #4]
 8011dbc:	aa06      	add	r2, sp, #24
 8011dbe:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8011dc2:	3010      	adds	r0, #16
 8011dc4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011dc8:	f7ff fdd4 	bl	8011974 <rcl_action_send_cancel_response>
 8011dcc:	b010      	add	sp, #64	; 0x40
 8011dce:	bd10      	pop	{r4, pc}
 8011dd0:	200b      	movs	r0, #11
 8011dd2:	4770      	bx	lr
 8011dd4:	f3af 8000 	nop.w
 8011dd8:	00000001 	.word	0x00000001
 8011ddc:	00000001 	.word	0x00000001

08011de0 <rclc_action_server_goal_cancel_reject>:
 8011de0:	b082      	sub	sp, #8
 8011de2:	b530      	push	{r4, r5, lr}
 8011de4:	b08b      	sub	sp, #44	; 0x2c
 8011de6:	ac0e      	add	r4, sp, #56	; 0x38
 8011de8:	e884 000c 	stmia.w	r4, {r2, r3}
 8011dec:	b188      	cbz	r0, 8011e12 <rclc_action_server_goal_cancel_reject+0x32>
 8011dee:	4604      	mov	r4, r0
 8011df0:	a801      	add	r0, sp, #4
 8011df2:	460d      	mov	r5, r1
 8011df4:	f7ff fece 	bl	8011b94 <rcl_action_get_zero_initialized_cancel_response>
 8011df8:	aa01      	add	r2, sp, #4
 8011dfa:	a90e      	add	r1, sp, #56	; 0x38
 8011dfc:	f104 0010 	add.w	r0, r4, #16
 8011e00:	f88d 5004 	strb.w	r5, [sp, #4]
 8011e04:	f7ff fdb6 	bl	8011974 <rcl_action_send_cancel_response>
 8011e08:	b00b      	add	sp, #44	; 0x2c
 8011e0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e0e:	b002      	add	sp, #8
 8011e10:	4770      	bx	lr
 8011e12:	200b      	movs	r0, #11
 8011e14:	b00b      	add	sp, #44	; 0x2c
 8011e16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e1a:	b002      	add	sp, #8
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop

08011e20 <__atomic_load_8>:
 8011e20:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011e24:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011e28:	4a15      	ldr	r2, [pc, #84]	; (8011e80 <__atomic_load_8+0x60>)
 8011e2a:	4b16      	ldr	r3, [pc, #88]	; (8011e84 <__atomic_load_8+0x64>)
 8011e2c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011e30:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011e34:	fb02 f101 	mul.w	r1, r2, r1
 8011e38:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011e3c:	fba3 2301 	umull	r2, r3, r3, r1
 8011e40:	091b      	lsrs	r3, r3, #4
 8011e42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011e46:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011e4a:	b4d0      	push	{r4, r6, r7}
 8011e4c:	4c0e      	ldr	r4, [pc, #56]	; (8011e88 <__atomic_load_8+0x68>)
 8011e4e:	1ac9      	subs	r1, r1, r3
 8011e50:	1862      	adds	r2, r4, r1
 8011e52:	f04f 0c01 	mov.w	ip, #1
 8011e56:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011e5a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011e5e:	2e00      	cmp	r6, #0
 8011e60:	d1f9      	bne.n	8011e56 <__atomic_load_8+0x36>
 8011e62:	f3bf 8f5b 	dmb	ish
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1f4      	bne.n	8011e56 <__atomic_load_8+0x36>
 8011e6c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011e70:	f3bf 8f5b 	dmb	ish
 8011e74:	5463      	strb	r3, [r4, r1]
 8011e76:	4630      	mov	r0, r6
 8011e78:	4639      	mov	r1, r7
 8011e7a:	bcd0      	pop	{r4, r6, r7}
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	27d4eb2d 	.word	0x27d4eb2d
 8011e84:	b21642c9 	.word	0xb21642c9
 8011e88:	20013090 	.word	0x20013090

08011e8c <__atomic_store_8>:
 8011e8c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011e90:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011e94:	b570      	push	{r4, r5, r6, lr}
 8011e96:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011e9a:	4c14      	ldr	r4, [pc, #80]	; (8011eec <__atomic_store_8+0x60>)
 8011e9c:	4d14      	ldr	r5, [pc, #80]	; (8011ef0 <__atomic_store_8+0x64>)
 8011e9e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011ea2:	fb04 f101 	mul.w	r1, r4, r1
 8011ea6:	4c13      	ldr	r4, [pc, #76]	; (8011ef4 <__atomic_store_8+0x68>)
 8011ea8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011eac:	fba4 4e01 	umull	r4, lr, r4, r1
 8011eb0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011eb4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8011eb8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8011ebc:	eba1 0e0e 	sub.w	lr, r1, lr
 8011ec0:	eb05 0c0e 	add.w	ip, r5, lr
 8011ec4:	f04f 0401 	mov.w	r4, #1
 8011ec8:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011ecc:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011ed0:	2e00      	cmp	r6, #0
 8011ed2:	d1f9      	bne.n	8011ec8 <__atomic_store_8+0x3c>
 8011ed4:	f3bf 8f5b 	dmb	ish
 8011ed8:	b2c9      	uxtb	r1, r1
 8011eda:	2900      	cmp	r1, #0
 8011edc:	d1f4      	bne.n	8011ec8 <__atomic_store_8+0x3c>
 8011ede:	e9c0 2300 	strd	r2, r3, [r0]
 8011ee2:	f3bf 8f5b 	dmb	ish
 8011ee6:	f805 100e 	strb.w	r1, [r5, lr]
 8011eea:	bd70      	pop	{r4, r5, r6, pc}
 8011eec:	27d4eb2d 	.word	0x27d4eb2d
 8011ef0:	20013090 	.word	0x20013090
 8011ef4:	b21642c9 	.word	0xb21642c9

08011ef8 <__atomic_exchange_8>:
 8011ef8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011efc:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8011f00:	4916      	ldr	r1, [pc, #88]	; (8011f5c <__atomic_exchange_8+0x64>)
 8011f02:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011f06:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011f0a:	fb01 fc0c 	mul.w	ip, r1, ip
 8011f0e:	4914      	ldr	r1, [pc, #80]	; (8011f60 <__atomic_exchange_8+0x68>)
 8011f10:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011f14:	b570      	push	{r4, r5, r6, lr}
 8011f16:	4605      	mov	r5, r0
 8011f18:	fba1 010c 	umull	r0, r1, r1, ip
 8011f1c:	0909      	lsrs	r1, r1, #4
 8011f1e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011f22:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011f26:	4e0f      	ldr	r6, [pc, #60]	; (8011f64 <__atomic_exchange_8+0x6c>)
 8011f28:	ebac 0c01 	sub.w	ip, ip, r1
 8011f2c:	eb06 010c 	add.w	r1, r6, ip
 8011f30:	f04f 0e01 	mov.w	lr, #1
 8011f34:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011f38:	e8c1 ef40 	strexb	r0, lr, [r1]
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d1f9      	bne.n	8011f34 <__atomic_exchange_8+0x3c>
 8011f40:	f3bf 8f5b 	dmb	ish
 8011f44:	b2e4      	uxtb	r4, r4
 8011f46:	2c00      	cmp	r4, #0
 8011f48:	d1f4      	bne.n	8011f34 <__atomic_exchange_8+0x3c>
 8011f4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011f4e:	e9c5 2300 	strd	r2, r3, [r5]
 8011f52:	f3bf 8f5b 	dmb	ish
 8011f56:	f806 400c 	strb.w	r4, [r6, ip]
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}
 8011f5c:	27d4eb2d 	.word	0x27d4eb2d
 8011f60:	b21642c9 	.word	0xb21642c9
 8011f64:	20013090 	.word	0x20013090

08011f68 <rcutils_get_env>:
 8011f68:	b168      	cbz	r0, 8011f86 <rcutils_get_env+0x1e>
 8011f6a:	b510      	push	{r4, lr}
 8011f6c:	460c      	mov	r4, r1
 8011f6e:	b129      	cbz	r1, 8011f7c <rcutils_get_env+0x14>
 8011f70:	f004 f830 	bl	8015fd4 <getenv>
 8011f74:	b120      	cbz	r0, 8011f80 <rcutils_get_env+0x18>
 8011f76:	6020      	str	r0, [r4, #0]
 8011f78:	2000      	movs	r0, #0
 8011f7a:	bd10      	pop	{r4, pc}
 8011f7c:	4803      	ldr	r0, [pc, #12]	; (8011f8c <rcutils_get_env+0x24>)
 8011f7e:	bd10      	pop	{r4, pc}
 8011f80:	4b03      	ldr	r3, [pc, #12]	; (8011f90 <rcutils_get_env+0x28>)
 8011f82:	6023      	str	r3, [r4, #0]
 8011f84:	bd10      	pop	{r4, pc}
 8011f86:	4803      	ldr	r0, [pc, #12]	; (8011f94 <rcutils_get_env+0x2c>)
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop
 8011f8c:	08017e40 	.word	0x08017e40
 8011f90:	08017f64 	.word	0x08017f64
 8011f94:	08017e24 	.word	0x08017e24

08011f98 <rcutils_is_directory>:
 8011f98:	2000      	movs	r0, #0
 8011f9a:	4770      	bx	lr

08011f9c <rcutils_join_path>:
 8011f9c:	b082      	sub	sp, #8
 8011f9e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	b002      	add	sp, #8
 8011fa6:	4770      	bx	lr

08011fa8 <rcutils_to_native_path>:
 8011fa8:	b084      	sub	sp, #16
 8011faa:	a801      	add	r0, sp, #4
 8011fac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8011fb0:	b004      	add	sp, #16
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop

08011fb8 <rcutils_format_string_limit>:
 8011fb8:	b40f      	push	{r0, r1, r2, r3}
 8011fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fbc:	b083      	sub	sp, #12
 8011fbe:	ac08      	add	r4, sp, #32
 8011fc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011fc6:	b34e      	cbz	r6, 801201c <rcutils_format_string_limit+0x64>
 8011fc8:	a808      	add	r0, sp, #32
 8011fca:	f7f8 fb91 	bl	800a6f0 <rcutils_allocator_is_valid>
 8011fce:	b328      	cbz	r0, 801201c <rcutils_format_string_limit+0x64>
 8011fd0:	2100      	movs	r1, #0
 8011fd2:	ab0f      	add	r3, sp, #60	; 0x3c
 8011fd4:	4632      	mov	r2, r6
 8011fd6:	4608      	mov	r0, r1
 8011fd8:	e9cd 3300 	strd	r3, r3, [sp]
 8011fdc:	f000 f8f4 	bl	80121c8 <rcutils_vsnprintf>
 8011fe0:	1c43      	adds	r3, r0, #1
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	d01a      	beq.n	801201c <rcutils_format_string_limit+0x64>
 8011fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fe8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011fea:	1c47      	adds	r7, r0, #1
 8011fec:	429f      	cmp	r7, r3
 8011fee:	bf84      	itt	hi
 8011ff0:	461f      	movhi	r7, r3
 8011ff2:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8011ff6:	4638      	mov	r0, r7
 8011ff8:	9b08      	ldr	r3, [sp, #32]
 8011ffa:	4798      	blx	r3
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	b168      	cbz	r0, 801201c <rcutils_format_string_limit+0x64>
 8012000:	9b01      	ldr	r3, [sp, #4]
 8012002:	4632      	mov	r2, r6
 8012004:	4639      	mov	r1, r7
 8012006:	f000 f8df 	bl	80121c8 <rcutils_vsnprintf>
 801200a:	2800      	cmp	r0, #0
 801200c:	db02      	blt.n	8012014 <rcutils_format_string_limit+0x5c>
 801200e:	2300      	movs	r3, #0
 8012010:	5563      	strb	r3, [r4, r5]
 8012012:	e004      	b.n	801201e <rcutils_format_string_limit+0x66>
 8012014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012016:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012018:	4620      	mov	r0, r4
 801201a:	4798      	blx	r3
 801201c:	2400      	movs	r4, #0
 801201e:	4620      	mov	r0, r4
 8012020:	b003      	add	sp, #12
 8012022:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012026:	b004      	add	sp, #16
 8012028:	4770      	bx	lr
 801202a:	bf00      	nop

0801202c <rcutils_repl_str>:
 801202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012030:	ed2d 8b02 	vpush	{d8}
 8012034:	b087      	sub	sp, #28
 8012036:	4680      	mov	r8, r0
 8012038:	4608      	mov	r0, r1
 801203a:	f8cd 8004 	str.w	r8, [sp, #4]
 801203e:	ee08 2a10 	vmov	s16, r2
 8012042:	468a      	mov	sl, r1
 8012044:	4699      	mov	r9, r3
 8012046:	f7ee f8ed 	bl	8000224 <strlen>
 801204a:	2600      	movs	r6, #0
 801204c:	4647      	mov	r7, r8
 801204e:	9002      	str	r0, [sp, #8]
 8012050:	46b3      	mov	fp, r6
 8012052:	2510      	movs	r5, #16
 8012054:	46b0      	mov	r8, r6
 8012056:	e01d      	b.n	8012094 <rcutils_repl_str+0x68>
 8012058:	f10b 0b01 	add.w	fp, fp, #1
 801205c:	455e      	cmp	r6, fp
 801205e:	d211      	bcs.n	8012084 <rcutils_repl_str+0x58>
 8012060:	442e      	add	r6, r5
 8012062:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012066:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801206a:	00b1      	lsls	r1, r6, #2
 801206c:	4798      	blx	r3
 801206e:	2800      	cmp	r0, #0
 8012070:	f000 8088 	beq.w	8012184 <rcutils_repl_str+0x158>
 8012074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012078:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801207c:	4680      	mov	r8, r0
 801207e:	bf28      	it	cs
 8012080:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8012084:	9a01      	ldr	r2, [sp, #4]
 8012086:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801208a:	1aa2      	subs	r2, r4, r2
 801208c:	f843 2c04 	str.w	r2, [r3, #-4]
 8012090:	9b02      	ldr	r3, [sp, #8]
 8012092:	18e7      	adds	r7, r4, r3
 8012094:	4651      	mov	r1, sl
 8012096:	4638      	mov	r0, r7
 8012098:	f004 fb95 	bl	80167c6 <strstr>
 801209c:	4604      	mov	r4, r0
 801209e:	4640      	mov	r0, r8
 80120a0:	2c00      	cmp	r4, #0
 80120a2:	d1d9      	bne.n	8012058 <rcutils_repl_str+0x2c>
 80120a4:	46b8      	mov	r8, r7
 80120a6:	4607      	mov	r7, r0
 80120a8:	4640      	mov	r0, r8
 80120aa:	f7ee f8bb 	bl	8000224 <strlen>
 80120ae:	9b01      	ldr	r3, [sp, #4]
 80120b0:	eba8 0303 	sub.w	r3, r8, r3
 80120b4:	181c      	adds	r4, r3, r0
 80120b6:	9404      	str	r4, [sp, #16]
 80120b8:	f1bb 0f00 	cmp.w	fp, #0
 80120bc:	d04a      	beq.n	8012154 <rcutils_repl_str+0x128>
 80120be:	ee18 0a10 	vmov	r0, s16
 80120c2:	f7ee f8af 	bl	8000224 <strlen>
 80120c6:	9b02      	ldr	r3, [sp, #8]
 80120c8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80120cc:	1ac3      	subs	r3, r0, r3
 80120ce:	fb0b 4303 	mla	r3, fp, r3, r4
 80120d2:	461a      	mov	r2, r3
 80120d4:	9305      	str	r3, [sp, #20]
 80120d6:	4606      	mov	r6, r0
 80120d8:	f8d9 3000 	ldr.w	r3, [r9]
 80120dc:	1c50      	adds	r0, r2, #1
 80120de:	4798      	blx	r3
 80120e0:	9003      	str	r0, [sp, #12]
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d04f      	beq.n	8012186 <rcutils_repl_str+0x15a>
 80120e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80120ea:	683a      	ldr	r2, [r7, #0]
 80120ec:	4641      	mov	r1, r8
 80120ee:	f004 fc0c 	bl	801690a <memcpy>
 80120f2:	683d      	ldr	r5, [r7, #0]
 80120f4:	9b03      	ldr	r3, [sp, #12]
 80120f6:	9701      	str	r7, [sp, #4]
 80120f8:	46ba      	mov	sl, r7
 80120fa:	441d      	add	r5, r3
 80120fc:	9f02      	ldr	r7, [sp, #8]
 80120fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8012102:	2401      	movs	r4, #1
 8012104:	46d1      	mov	r9, sl
 8012106:	ee18 aa10 	vmov	sl, s16
 801210a:	e00a      	b.n	8012122 <rcutils_repl_str+0xf6>
 801210c:	f8d9 5000 	ldr.w	r5, [r9]
 8012110:	1aaa      	subs	r2, r5, r2
 8012112:	1885      	adds	r5, r0, r2
 8012114:	f004 fbf9 	bl	801690a <memcpy>
 8012118:	45a3      	cmp	fp, r4
 801211a:	f104 0201 	add.w	r2, r4, #1
 801211e:	d935      	bls.n	801218c <rcutils_repl_str+0x160>
 8012120:	4614      	mov	r4, r2
 8012122:	4632      	mov	r2, r6
 8012124:	4651      	mov	r1, sl
 8012126:	4628      	mov	r0, r5
 8012128:	f004 fbef 	bl	801690a <memcpy>
 801212c:	f859 2b04 	ldr.w	r2, [r9], #4
 8012130:	45a3      	cmp	fp, r4
 8012132:	443a      	add	r2, r7
 8012134:	eb05 0006 	add.w	r0, r5, r6
 8012138:	eb08 0102 	add.w	r1, r8, r2
 801213c:	d1e6      	bne.n	801210c <rcutils_repl_str+0xe0>
 801213e:	9b04      	ldr	r3, [sp, #16]
 8012140:	1a9a      	subs	r2, r3, r2
 8012142:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012146:	f004 fbe0 	bl	801690a <memcpy>
 801214a:	9a03      	ldr	r2, [sp, #12]
 801214c:	9905      	ldr	r1, [sp, #20]
 801214e:	2300      	movs	r3, #0
 8012150:	5453      	strb	r3, [r2, r1]
 8012152:	e00b      	b.n	801216c <rcutils_repl_str+0x140>
 8012154:	4620      	mov	r0, r4
 8012156:	f8d9 3000 	ldr.w	r3, [r9]
 801215a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801215e:	3001      	adds	r0, #1
 8012160:	4798      	blx	r3
 8012162:	9003      	str	r0, [sp, #12]
 8012164:	b110      	cbz	r0, 801216c <rcutils_repl_str+0x140>
 8012166:	9901      	ldr	r1, [sp, #4]
 8012168:	f004 fbc7 	bl	80168fa <strcpy>
 801216c:	4638      	mov	r0, r7
 801216e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012172:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012176:	4798      	blx	r3
 8012178:	9803      	ldr	r0, [sp, #12]
 801217a:	b007      	add	sp, #28
 801217c:	ecbd 8b02 	vpop	{d8}
 8012180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012184:	4647      	mov	r7, r8
 8012186:	2300      	movs	r3, #0
 8012188:	9303      	str	r3, [sp, #12]
 801218a:	e7ef      	b.n	801216c <rcutils_repl_str+0x140>
 801218c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012190:	e7db      	b.n	801214a <rcutils_repl_str+0x11e>
 8012192:	bf00      	nop

08012194 <rcutils_snprintf>:
 8012194:	b40c      	push	{r2, r3}
 8012196:	b530      	push	{r4, r5, lr}
 8012198:	b083      	sub	sp, #12
 801219a:	ab06      	add	r3, sp, #24
 801219c:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a0:	9301      	str	r3, [sp, #4]
 80121a2:	b152      	cbz	r2, 80121ba <rcutils_snprintf+0x26>
 80121a4:	b138      	cbz	r0, 80121b6 <rcutils_snprintf+0x22>
 80121a6:	b141      	cbz	r1, 80121ba <rcutils_snprintf+0x26>
 80121a8:	f004 faae 	bl	8016708 <vsniprintf>
 80121ac:	b003      	add	sp, #12
 80121ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121b2:	b002      	add	sp, #8
 80121b4:	4770      	bx	lr
 80121b6:	2900      	cmp	r1, #0
 80121b8:	d0f6      	beq.n	80121a8 <rcutils_snprintf+0x14>
 80121ba:	f004 fb71 	bl	80168a0 <__errno>
 80121be:	2316      	movs	r3, #22
 80121c0:	6003      	str	r3, [r0, #0]
 80121c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121c6:	e7f1      	b.n	80121ac <rcutils_snprintf+0x18>

080121c8 <rcutils_vsnprintf>:
 80121c8:	b570      	push	{r4, r5, r6, lr}
 80121ca:	b13a      	cbz	r2, 80121dc <rcutils_vsnprintf+0x14>
 80121cc:	b120      	cbz	r0, 80121d8 <rcutils_vsnprintf+0x10>
 80121ce:	b129      	cbz	r1, 80121dc <rcutils_vsnprintf+0x14>
 80121d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121d4:	f004 ba98 	b.w	8016708 <vsniprintf>
 80121d8:	2900      	cmp	r1, #0
 80121da:	d0f9      	beq.n	80121d0 <rcutils_vsnprintf+0x8>
 80121dc:	f004 fb60 	bl	80168a0 <__errno>
 80121e0:	2316      	movs	r3, #22
 80121e2:	6003      	str	r3, [r0, #0]
 80121e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121e8:	bd70      	pop	{r4, r5, r6, pc}
 80121ea:	bf00      	nop

080121ec <rcutils_strdup>:
 80121ec:	b084      	sub	sp, #16
 80121ee:	b570      	push	{r4, r5, r6, lr}
 80121f0:	b082      	sub	sp, #8
 80121f2:	ac07      	add	r4, sp, #28
 80121f4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80121f8:	4605      	mov	r5, r0
 80121fa:	b1b0      	cbz	r0, 801222a <rcutils_strdup+0x3e>
 80121fc:	f7ee f812 	bl	8000224 <strlen>
 8012200:	1c42      	adds	r2, r0, #1
 8012202:	9b07      	ldr	r3, [sp, #28]
 8012204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012206:	9201      	str	r2, [sp, #4]
 8012208:	4606      	mov	r6, r0
 801220a:	4610      	mov	r0, r2
 801220c:	4798      	blx	r3
 801220e:	4604      	mov	r4, r0
 8012210:	b128      	cbz	r0, 801221e <rcutils_strdup+0x32>
 8012212:	9a01      	ldr	r2, [sp, #4]
 8012214:	4629      	mov	r1, r5
 8012216:	f004 fb78 	bl	801690a <memcpy>
 801221a:	2300      	movs	r3, #0
 801221c:	55a3      	strb	r3, [r4, r6]
 801221e:	4620      	mov	r0, r4
 8012220:	b002      	add	sp, #8
 8012222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012226:	b004      	add	sp, #16
 8012228:	4770      	bx	lr
 801222a:	4604      	mov	r4, r0
 801222c:	e7f7      	b.n	801221e <rcutils_strdup+0x32>
 801222e:	bf00      	nop

08012230 <rcutils_strndup>:
 8012230:	b082      	sub	sp, #8
 8012232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012234:	ac06      	add	r4, sp, #24
 8012236:	e884 000c 	stmia.w	r4, {r2, r3}
 801223a:	4605      	mov	r5, r0
 801223c:	b188      	cbz	r0, 8012262 <rcutils_strndup+0x32>
 801223e:	1c4f      	adds	r7, r1, #1
 8012240:	460e      	mov	r6, r1
 8012242:	4638      	mov	r0, r7
 8012244:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012246:	4790      	blx	r2
 8012248:	4604      	mov	r4, r0
 801224a:	b128      	cbz	r0, 8012258 <rcutils_strndup+0x28>
 801224c:	463a      	mov	r2, r7
 801224e:	4629      	mov	r1, r5
 8012250:	f004 fb5b 	bl	801690a <memcpy>
 8012254:	2300      	movs	r3, #0
 8012256:	55a3      	strb	r3, [r4, r6]
 8012258:	4620      	mov	r0, r4
 801225a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801225e:	b002      	add	sp, #8
 8012260:	4770      	bx	lr
 8012262:	4604      	mov	r4, r0
 8012264:	e7f8      	b.n	8012258 <rcutils_strndup+0x28>
 8012266:	bf00      	nop

08012268 <rcutils_get_zero_initialized_string_map>:
 8012268:	4b01      	ldr	r3, [pc, #4]	; (8012270 <rcutils_get_zero_initialized_string_map+0x8>)
 801226a:	2000      	movs	r0, #0
 801226c:	6018      	str	r0, [r3, #0]
 801226e:	4770      	bx	lr
 8012270:	200130a8 	.word	0x200130a8

08012274 <rcutils_string_map_reserve>:
 8012274:	2800      	cmp	r0, #0
 8012276:	d05f      	beq.n	8012338 <rcutils_string_map_reserve+0xc4>
 8012278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801227c:	460c      	mov	r4, r1
 801227e:	6801      	ldr	r1, [r0, #0]
 8012280:	b082      	sub	sp, #8
 8012282:	4605      	mov	r5, r0
 8012284:	b129      	cbz	r1, 8012292 <rcutils_string_map_reserve+0x1e>
 8012286:	68cb      	ldr	r3, [r1, #12]
 8012288:	42a3      	cmp	r3, r4
 801228a:	d906      	bls.n	801229a <rcutils_string_map_reserve+0x26>
 801228c:	461c      	mov	r4, r3
 801228e:	2900      	cmp	r1, #0
 8012290:	d1f9      	bne.n	8012286 <rcutils_string_map_reserve+0x12>
 8012292:	201f      	movs	r0, #31
 8012294:	b002      	add	sp, #8
 8012296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801229a:	688b      	ldr	r3, [r1, #8]
 801229c:	42a3      	cmp	r3, r4
 801229e:	d047      	beq.n	8012330 <rcutils_string_map_reserve+0xbc>
 80122a0:	6a0e      	ldr	r6, [r1, #32]
 80122a2:	2c00      	cmp	r4, #0
 80122a4:	d034      	beq.n	8012310 <rcutils_string_map_reserve+0x9c>
 80122a6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80122aa:	d243      	bcs.n	8012334 <rcutils_string_map_reserve+0xc0>
 80122ac:	00a7      	lsls	r7, r4, #2
 80122ae:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80122b2:	6808      	ldr	r0, [r1, #0]
 80122b4:	4632      	mov	r2, r6
 80122b6:	4639      	mov	r1, r7
 80122b8:	47c0      	blx	r8
 80122ba:	2800      	cmp	r0, #0
 80122bc:	d03a      	beq.n	8012334 <rcutils_string_map_reserve+0xc0>
 80122be:	682b      	ldr	r3, [r5, #0]
 80122c0:	4632      	mov	r2, r6
 80122c2:	6018      	str	r0, [r3, #0]
 80122c4:	4639      	mov	r1, r7
 80122c6:	6858      	ldr	r0, [r3, #4]
 80122c8:	47c0      	blx	r8
 80122ca:	2800      	cmp	r0, #0
 80122cc:	d032      	beq.n	8012334 <rcutils_string_map_reserve+0xc0>
 80122ce:	682d      	ldr	r5, [r5, #0]
 80122d0:	68ab      	ldr	r3, [r5, #8]
 80122d2:	6068      	str	r0, [r5, #4]
 80122d4:	42a3      	cmp	r3, r4
 80122d6:	d226      	bcs.n	8012326 <rcutils_string_map_reserve+0xb2>
 80122d8:	682a      	ldr	r2, [r5, #0]
 80122da:	eb00 0c07 	add.w	ip, r0, r7
 80122de:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80122e2:	45e6      	cmp	lr, ip
 80122e4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80122e8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80122ec:	d203      	bcs.n	80122f6 <rcutils_string_map_reserve+0x82>
 80122ee:	eb02 0c07 	add.w	ip, r2, r7
 80122f2:	4566      	cmp	r6, ip
 80122f4:	d322      	bcc.n	801233c <rcutils_string_map_reserve+0xc8>
 80122f6:	1ae3      	subs	r3, r4, r3
 80122f8:	009a      	lsls	r2, r3, #2
 80122fa:	4670      	mov	r0, lr
 80122fc:	2100      	movs	r1, #0
 80122fe:	9201      	str	r2, [sp, #4]
 8012300:	f004 fa3a 	bl	8016778 <memset>
 8012304:	9a01      	ldr	r2, [sp, #4]
 8012306:	2100      	movs	r1, #0
 8012308:	4630      	mov	r0, r6
 801230a:	f004 fa35 	bl	8016778 <memset>
 801230e:	e00a      	b.n	8012326 <rcutils_string_map_reserve+0xb2>
 8012310:	694f      	ldr	r7, [r1, #20]
 8012312:	6808      	ldr	r0, [r1, #0]
 8012314:	4631      	mov	r1, r6
 8012316:	47b8      	blx	r7
 8012318:	682b      	ldr	r3, [r5, #0]
 801231a:	4631      	mov	r1, r6
 801231c:	6858      	ldr	r0, [r3, #4]
 801231e:	601c      	str	r4, [r3, #0]
 8012320:	47b8      	blx	r7
 8012322:	682d      	ldr	r5, [r5, #0]
 8012324:	606c      	str	r4, [r5, #4]
 8012326:	2000      	movs	r0, #0
 8012328:	60ac      	str	r4, [r5, #8]
 801232a:	b002      	add	sp, #8
 801232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012330:	2000      	movs	r0, #0
 8012332:	e7af      	b.n	8012294 <rcutils_string_map_reserve+0x20>
 8012334:	200a      	movs	r0, #10
 8012336:	e7ad      	b.n	8012294 <rcutils_string_map_reserve+0x20>
 8012338:	200b      	movs	r0, #11
 801233a:	4770      	bx	lr
 801233c:	1f0b      	subs	r3, r1, #4
 801233e:	4418      	add	r0, r3
 8012340:	4413      	add	r3, r2
 8012342:	3a04      	subs	r2, #4
 8012344:	4417      	add	r7, r2
 8012346:	2200      	movs	r2, #0
 8012348:	f843 2f04 	str.w	r2, [r3, #4]!
 801234c:	42bb      	cmp	r3, r7
 801234e:	f840 2f04 	str.w	r2, [r0, #4]!
 8012352:	d1f9      	bne.n	8012348 <rcutils_string_map_reserve+0xd4>
 8012354:	e7e7      	b.n	8012326 <rcutils_string_map_reserve+0xb2>
 8012356:	bf00      	nop

08012358 <rcutils_string_map_init>:
 8012358:	b082      	sub	sp, #8
 801235a:	b570      	push	{r4, r5, r6, lr}
 801235c:	ac04      	add	r4, sp, #16
 801235e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012362:	b380      	cbz	r0, 80123c6 <rcutils_string_map_init+0x6e>
 8012364:	6806      	ldr	r6, [r0, #0]
 8012366:	4604      	mov	r4, r0
 8012368:	b12e      	cbz	r6, 8012376 <rcutils_string_map_init+0x1e>
 801236a:	251e      	movs	r5, #30
 801236c:	4628      	mov	r0, r5
 801236e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012372:	b002      	add	sp, #8
 8012374:	4770      	bx	lr
 8012376:	a804      	add	r0, sp, #16
 8012378:	460d      	mov	r5, r1
 801237a:	f7f8 f9b9 	bl	800a6f0 <rcutils_allocator_is_valid>
 801237e:	b310      	cbz	r0, 80123c6 <rcutils_string_map_init+0x6e>
 8012380:	9b04      	ldr	r3, [sp, #16]
 8012382:	9908      	ldr	r1, [sp, #32]
 8012384:	2024      	movs	r0, #36	; 0x24
 8012386:	4798      	blx	r3
 8012388:	6020      	str	r0, [r4, #0]
 801238a:	b310      	cbz	r0, 80123d2 <rcutils_string_map_init+0x7a>
 801238c:	f10d 0e10 	add.w	lr, sp, #16
 8012390:	e9c0 6600 	strd	r6, r6, [r0]
 8012394:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012398:	f100 0c10 	add.w	ip, r0, #16
 801239c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123a4:	f8de 3000 	ldr.w	r3, [lr]
 80123a8:	f8cc 3000 	str.w	r3, [ip]
 80123ac:	4629      	mov	r1, r5
 80123ae:	4620      	mov	r0, r4
 80123b0:	f7ff ff60 	bl	8012274 <rcutils_string_map_reserve>
 80123b4:	4605      	mov	r5, r0
 80123b6:	2800      	cmp	r0, #0
 80123b8:	d0d8      	beq.n	801236c <rcutils_string_map_init+0x14>
 80123ba:	9b05      	ldr	r3, [sp, #20]
 80123bc:	9908      	ldr	r1, [sp, #32]
 80123be:	6820      	ldr	r0, [r4, #0]
 80123c0:	4798      	blx	r3
 80123c2:	6026      	str	r6, [r4, #0]
 80123c4:	e7d2      	b.n	801236c <rcutils_string_map_init+0x14>
 80123c6:	250b      	movs	r5, #11
 80123c8:	4628      	mov	r0, r5
 80123ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123ce:	b002      	add	sp, #8
 80123d0:	4770      	bx	lr
 80123d2:	250a      	movs	r5, #10
 80123d4:	e7ca      	b.n	801236c <rcutils_string_map_init+0x14>
 80123d6:	bf00      	nop

080123d8 <rcutils_string_map_fini>:
 80123d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123dc:	b082      	sub	sp, #8
 80123de:	2800      	cmp	r0, #0
 80123e0:	d03a      	beq.n	8012458 <rcutils_string_map_fini+0x80>
 80123e2:	6804      	ldr	r4, [r0, #0]
 80123e4:	4606      	mov	r6, r0
 80123e6:	2c00      	cmp	r4, #0
 80123e8:	d032      	beq.n	8012450 <rcutils_string_map_fini+0x78>
 80123ea:	68a3      	ldr	r3, [r4, #8]
 80123ec:	b32b      	cbz	r3, 801243a <rcutils_string_map_fini+0x62>
 80123ee:	2500      	movs	r5, #0
 80123f0:	6822      	ldr	r2, [r4, #0]
 80123f2:	462f      	mov	r7, r5
 80123f4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80123f8:	b1e0      	cbz	r0, 8012434 <rcutils_string_map_fini+0x5c>
 80123fa:	6a21      	ldr	r1, [r4, #32]
 80123fc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012400:	9101      	str	r1, [sp, #4]
 8012402:	47c0      	blx	r8
 8012404:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012408:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801240c:	9901      	ldr	r1, [sp, #4]
 801240e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012412:	47c0      	blx	r8
 8012414:	68e3      	ldr	r3, [r4, #12]
 8012416:	6862      	ldr	r2, [r4, #4]
 8012418:	3b01      	subs	r3, #1
 801241a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801241e:	60e3      	str	r3, [r4, #12]
 8012420:	6834      	ldr	r4, [r6, #0]
 8012422:	68a3      	ldr	r3, [r4, #8]
 8012424:	3501      	adds	r5, #1
 8012426:	429d      	cmp	r5, r3
 8012428:	d207      	bcs.n	801243a <rcutils_string_map_fini+0x62>
 801242a:	6822      	ldr	r2, [r4, #0]
 801242c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012430:	2800      	cmp	r0, #0
 8012432:	d1e2      	bne.n	80123fa <rcutils_string_map_fini+0x22>
 8012434:	3501      	adds	r5, #1
 8012436:	429d      	cmp	r5, r3
 8012438:	d3dc      	bcc.n	80123f4 <rcutils_string_map_fini+0x1c>
 801243a:	2100      	movs	r1, #0
 801243c:	4630      	mov	r0, r6
 801243e:	f7ff ff19 	bl	8012274 <rcutils_string_map_reserve>
 8012442:	4604      	mov	r4, r0
 8012444:	b920      	cbnz	r0, 8012450 <rcutils_string_map_fini+0x78>
 8012446:	6830      	ldr	r0, [r6, #0]
 8012448:	6943      	ldr	r3, [r0, #20]
 801244a:	6a01      	ldr	r1, [r0, #32]
 801244c:	4798      	blx	r3
 801244e:	6034      	str	r4, [r6, #0]
 8012450:	4620      	mov	r0, r4
 8012452:	b002      	add	sp, #8
 8012454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012458:	240b      	movs	r4, #11
 801245a:	4620      	mov	r0, r4
 801245c:	b002      	add	sp, #8
 801245e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012462:	bf00      	nop

08012464 <rcutils_string_map_getn>:
 8012464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012468:	b300      	cbz	r0, 80124ac <rcutils_string_map_getn+0x48>
 801246a:	6807      	ldr	r7, [r0, #0]
 801246c:	b1ff      	cbz	r7, 80124ae <rcutils_string_map_getn+0x4a>
 801246e:	4688      	mov	r8, r1
 8012470:	b1e1      	cbz	r1, 80124ac <rcutils_string_map_getn+0x48>
 8012472:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012476:	683e      	ldr	r6, [r7, #0]
 8012478:	f1ba 0f00 	cmp.w	sl, #0
 801247c:	d016      	beq.n	80124ac <rcutils_string_map_getn+0x48>
 801247e:	4691      	mov	r9, r2
 8012480:	3e04      	subs	r6, #4
 8012482:	2400      	movs	r4, #0
 8012484:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012488:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801248c:	4628      	mov	r0, r5
 801248e:	3401      	adds	r4, #1
 8012490:	b155      	cbz	r5, 80124a8 <rcutils_string_map_getn+0x44>
 8012492:	f7ed fec7 	bl	8000224 <strlen>
 8012496:	4548      	cmp	r0, r9
 8012498:	4602      	mov	r2, r0
 801249a:	4629      	mov	r1, r5
 801249c:	bf38      	it	cc
 801249e:	464a      	movcc	r2, r9
 80124a0:	4640      	mov	r0, r8
 80124a2:	f004 f97e 	bl	80167a2 <strncmp>
 80124a6:	b128      	cbz	r0, 80124b4 <rcutils_string_map_getn+0x50>
 80124a8:	45a2      	cmp	sl, r4
 80124aa:	d1eb      	bne.n	8012484 <rcutils_string_map_getn+0x20>
 80124ac:	2700      	movs	r7, #0
 80124ae:	4638      	mov	r0, r7
 80124b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f853 700b 	ldr.w	r7, [r3, fp]
 80124ba:	4638      	mov	r0, r7
 80124bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124c0 <rmw_get_zero_initialized_context>:
 80124c0:	b510      	push	{r4, lr}
 80124c2:	4604      	mov	r4, r0
 80124c4:	3010      	adds	r0, #16
 80124c6:	f000 f80b 	bl	80124e0 <rmw_get_zero_initialized_init_options>
 80124ca:	2300      	movs	r3, #0
 80124cc:	2000      	movs	r0, #0
 80124ce:	2100      	movs	r1, #0
 80124d0:	e9c4 0100 	strd	r0, r1, [r4]
 80124d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80124d8:	60a3      	str	r3, [r4, #8]
 80124da:	4620      	mov	r0, r4
 80124dc:	bd10      	pop	{r4, pc}
 80124de:	bf00      	nop

080124e0 <rmw_get_zero_initialized_init_options>:
 80124e0:	b510      	push	{r4, lr}
 80124e2:	2238      	movs	r2, #56	; 0x38
 80124e4:	4604      	mov	r4, r0
 80124e6:	2100      	movs	r1, #0
 80124e8:	f004 f946 	bl	8016778 <memset>
 80124ec:	f104 0010 	add.w	r0, r4, #16
 80124f0:	f000 f806 	bl	8012500 <rmw_get_default_security_options>
 80124f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124f8:	60e3      	str	r3, [r4, #12]
 80124fa:	4620      	mov	r0, r4
 80124fc:	bd10      	pop	{r4, pc}
 80124fe:	bf00      	nop

08012500 <rmw_get_default_security_options>:
 8012500:	2200      	movs	r2, #0
 8012502:	7002      	strb	r2, [r0, #0]
 8012504:	6042      	str	r2, [r0, #4]
 8012506:	4770      	bx	lr

08012508 <rmw_subscription_content_filter_options_fini>:
 8012508:	b1b0      	cbz	r0, 8012538 <rmw_subscription_content_filter_options_fini+0x30>
 801250a:	b538      	push	{r3, r4, r5, lr}
 801250c:	4604      	mov	r4, r0
 801250e:	4608      	mov	r0, r1
 8012510:	460d      	mov	r5, r1
 8012512:	f7f8 f8ed 	bl	800a6f0 <rcutils_allocator_is_valid>
 8012516:	b168      	cbz	r0, 8012534 <rmw_subscription_content_filter_options_fini+0x2c>
 8012518:	6820      	ldr	r0, [r4, #0]
 801251a:	b120      	cbz	r0, 8012526 <rmw_subscription_content_filter_options_fini+0x1e>
 801251c:	686b      	ldr	r3, [r5, #4]
 801251e:	6929      	ldr	r1, [r5, #16]
 8012520:	4798      	blx	r3
 8012522:	2300      	movs	r3, #0
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	1d20      	adds	r0, r4, #4
 8012528:	f003 fbfe 	bl	8015d28 <rcutils_string_array_fini>
 801252c:	3800      	subs	r0, #0
 801252e:	bf18      	it	ne
 8012530:	2001      	movne	r0, #1
 8012532:	bd38      	pop	{r3, r4, r5, pc}
 8012534:	200b      	movs	r0, #11
 8012536:	bd38      	pop	{r3, r4, r5, pc}
 8012538:	200b      	movs	r0, #11
 801253a:	4770      	bx	lr

0801253c <rmw_get_default_subscription_options>:
 801253c:	2200      	movs	r2, #0
 801253e:	e9c0 2200 	strd	r2, r2, [r0]
 8012542:	6082      	str	r2, [r0, #8]
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop

08012548 <rmw_time_equal>:
 8012548:	b4f0      	push	{r4, r5, r6, r7}
 801254a:	b084      	sub	sp, #16
 801254c:	ac04      	add	r4, sp, #16
 801254e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012552:	4603      	mov	r3, r0
 8012554:	4924      	ldr	r1, [pc, #144]	; (80125e8 <rmw_time_equal+0xa0>)
 8012556:	9e03      	ldr	r6, [sp, #12]
 8012558:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801255c:	2202      	movs	r2, #2
 801255e:	4299      	cmp	r1, r3
 8012560:	41aa      	sbcs	r2, r5
 8012562:	d330      	bcc.n	80125c6 <rmw_time_equal+0x7e>
 8012564:	4c21      	ldr	r4, [pc, #132]	; (80125ec <rmw_time_equal+0xa4>)
 8012566:	fba3 3204 	umull	r3, r2, r3, r4
 801256a:	fb04 2205 	mla	r2, r4, r5, r2
 801256e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012572:	43dd      	mvns	r5, r3
 8012574:	1a8c      	subs	r4, r1, r2
 8012576:	4285      	cmp	r5, r0
 8012578:	41b4      	sbcs	r4, r6
 801257a:	d332      	bcc.n	80125e2 <rmw_time_equal+0x9a>
 801257c:	eb10 0c03 	adds.w	ip, r0, r3
 8012580:	eb42 0106 	adc.w	r1, r2, r6
 8012584:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012588:	4817      	ldr	r0, [pc, #92]	; (80125e8 <rmw_time_equal+0xa0>)
 801258a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801258c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801258e:	2202      	movs	r2, #2
 8012590:	4298      	cmp	r0, r3
 8012592:	41b2      	sbcs	r2, r6
 8012594:	d31c      	bcc.n	80125d0 <rmw_time_equal+0x88>
 8012596:	4c15      	ldr	r4, [pc, #84]	; (80125ec <rmw_time_equal+0xa4>)
 8012598:	fba3 3204 	umull	r3, r2, r3, r4
 801259c:	fb04 2206 	mla	r2, r4, r6, r2
 80125a0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80125a4:	43de      	mvns	r6, r3
 80125a6:	1a84      	subs	r4, r0, r2
 80125a8:	42ae      	cmp	r6, r5
 80125aa:	41bc      	sbcs	r4, r7
 80125ac:	d315      	bcc.n	80125da <rmw_time_equal+0x92>
 80125ae:	195b      	adds	r3, r3, r5
 80125b0:	eb42 0207 	adc.w	r2, r2, r7
 80125b4:	428a      	cmp	r2, r1
 80125b6:	bf08      	it	eq
 80125b8:	4563      	cmpeq	r3, ip
 80125ba:	bf0c      	ite	eq
 80125bc:	2001      	moveq	r0, #1
 80125be:	2000      	movne	r0, #0
 80125c0:	b004      	add	sp, #16
 80125c2:	bcf0      	pop	{r4, r5, r6, r7}
 80125c4:	4770      	bx	lr
 80125c6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80125ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125ce:	e7d9      	b.n	8012584 <rmw_time_equal+0x3c>
 80125d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80125d8:	e7ec      	b.n	80125b4 <rmw_time_equal+0x6c>
 80125da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125de:	4602      	mov	r2, r0
 80125e0:	e7e8      	b.n	80125b4 <rmw_time_equal+0x6c>
 80125e2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80125e6:	e7cd      	b.n	8012584 <rmw_time_equal+0x3c>
 80125e8:	25c17d04 	.word	0x25c17d04
 80125ec:	3b9aca00 	.word	0x3b9aca00

080125f0 <rmw_time_total_nsec>:
 80125f0:	b470      	push	{r4, r5, r6}
 80125f2:	b085      	sub	sp, #20
 80125f4:	ac04      	add	r4, sp, #16
 80125f6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80125fa:	4603      	mov	r3, r0
 80125fc:	4912      	ldr	r1, [pc, #72]	; (8012648 <rmw_time_total_nsec+0x58>)
 80125fe:	9e03      	ldr	r6, [sp, #12]
 8012600:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012604:	2202      	movs	r2, #2
 8012606:	4299      	cmp	r1, r3
 8012608:	41aa      	sbcs	r2, r5
 801260a:	d311      	bcc.n	8012630 <rmw_time_total_nsec+0x40>
 801260c:	4c0f      	ldr	r4, [pc, #60]	; (801264c <rmw_time_total_nsec+0x5c>)
 801260e:	fba3 3204 	umull	r3, r2, r3, r4
 8012612:	fb04 2205 	mla	r2, r4, r5, r2
 8012616:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801261a:	43dd      	mvns	r5, r3
 801261c:	1a8c      	subs	r4, r1, r2
 801261e:	4285      	cmp	r5, r0
 8012620:	41b4      	sbcs	r4, r6
 8012622:	d30c      	bcc.n	801263e <rmw_time_total_nsec+0x4e>
 8012624:	1818      	adds	r0, r3, r0
 8012626:	eb42 0106 	adc.w	r1, r2, r6
 801262a:	b005      	add	sp, #20
 801262c:	bc70      	pop	{r4, r5, r6}
 801262e:	4770      	bx	lr
 8012630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012638:	b005      	add	sp, #20
 801263a:	bc70      	pop	{r4, r5, r6}
 801263c:	4770      	bx	lr
 801263e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012642:	b005      	add	sp, #20
 8012644:	bc70      	pop	{r4, r5, r6}
 8012646:	4770      	bx	lr
 8012648:	25c17d04 	.word	0x25c17d04
 801264c:	3b9aca00 	.word	0x3b9aca00

08012650 <rmw_get_zero_initialized_message_info>:
 8012650:	b510      	push	{r4, lr}
 8012652:	2240      	movs	r2, #64	; 0x40
 8012654:	4604      	mov	r4, r0
 8012656:	2100      	movs	r1, #0
 8012658:	f004 f88e 	bl	8016778 <memset>
 801265c:	4620      	mov	r0, r4
 801265e:	bd10      	pop	{r4, pc}

08012660 <rmw_validate_full_topic_name>:
 8012660:	2800      	cmp	r0, #0
 8012662:	d057      	beq.n	8012714 <rmw_validate_full_topic_name+0xb4>
 8012664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012668:	460d      	mov	r5, r1
 801266a:	2900      	cmp	r1, #0
 801266c:	d054      	beq.n	8012718 <rmw_validate_full_topic_name+0xb8>
 801266e:	4616      	mov	r6, r2
 8012670:	4604      	mov	r4, r0
 8012672:	f7ed fdd7 	bl	8000224 <strlen>
 8012676:	b148      	cbz	r0, 801268c <rmw_validate_full_topic_name+0x2c>
 8012678:	7823      	ldrb	r3, [r4, #0]
 801267a:	2b2f      	cmp	r3, #47	; 0x2f
 801267c:	d00d      	beq.n	801269a <rmw_validate_full_topic_name+0x3a>
 801267e:	2302      	movs	r3, #2
 8012680:	602b      	str	r3, [r5, #0]
 8012682:	b13e      	cbz	r6, 8012694 <rmw_validate_full_topic_name+0x34>
 8012684:	2000      	movs	r0, #0
 8012686:	6030      	str	r0, [r6, #0]
 8012688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801268c:	2301      	movs	r3, #1
 801268e:	602b      	str	r3, [r5, #0]
 8012690:	2e00      	cmp	r6, #0
 8012692:	d1f7      	bne.n	8012684 <rmw_validate_full_topic_name+0x24>
 8012694:	2000      	movs	r0, #0
 8012696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801269a:	1e43      	subs	r3, r0, #1
 801269c:	5ce2      	ldrb	r2, [r4, r3]
 801269e:	2a2f      	cmp	r2, #47	; 0x2f
 80126a0:	d03c      	beq.n	801271c <rmw_validate_full_topic_name+0xbc>
 80126a2:	1e63      	subs	r3, r4, #1
 80126a4:	eb03 0800 	add.w	r8, r3, r0
 80126a8:	f1c4 0e01 	rsb	lr, r4, #1
 80126ac:	eb0e 0703 	add.w	r7, lr, r3
 80126b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80126b4:	f021 0220 	bic.w	r2, r1, #32
 80126b8:	3a41      	subs	r2, #65	; 0x41
 80126ba:	2a19      	cmp	r2, #25
 80126bc:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 80126c0:	d90b      	bls.n	80126da <rmw_validate_full_topic_name+0x7a>
 80126c2:	295f      	cmp	r1, #95	; 0x5f
 80126c4:	d009      	beq.n	80126da <rmw_validate_full_topic_name+0x7a>
 80126c6:	f1bc 0f0a 	cmp.w	ip, #10
 80126ca:	d906      	bls.n	80126da <rmw_validate_full_topic_name+0x7a>
 80126cc:	2304      	movs	r3, #4
 80126ce:	602b      	str	r3, [r5, #0]
 80126d0:	2e00      	cmp	r6, #0
 80126d2:	d0df      	beq.n	8012694 <rmw_validate_full_topic_name+0x34>
 80126d4:	6037      	str	r7, [r6, #0]
 80126d6:	2000      	movs	r0, #0
 80126d8:	e7d6      	b.n	8012688 <rmw_validate_full_topic_name+0x28>
 80126da:	4543      	cmp	r3, r8
 80126dc:	d1e6      	bne.n	80126ac <rmw_validate_full_topic_name+0x4c>
 80126de:	4f1a      	ldr	r7, [pc, #104]	; (8012748 <rmw_validate_full_topic_name+0xe8>)
 80126e0:	2301      	movs	r3, #1
 80126e2:	e004      	b.n	80126ee <rmw_validate_full_topic_name+0x8e>
 80126e4:	4298      	cmp	r0, r3
 80126e6:	f104 0401 	add.w	r4, r4, #1
 80126ea:	d91c      	bls.n	8012726 <rmw_validate_full_topic_name+0xc6>
 80126ec:	4613      	mov	r3, r2
 80126ee:	4298      	cmp	r0, r3
 80126f0:	f103 0201 	add.w	r2, r3, #1
 80126f4:	d0f6      	beq.n	80126e4 <rmw_validate_full_topic_name+0x84>
 80126f6:	7821      	ldrb	r1, [r4, #0]
 80126f8:	292f      	cmp	r1, #47	; 0x2f
 80126fa:	d1f3      	bne.n	80126e4 <rmw_validate_full_topic_name+0x84>
 80126fc:	7861      	ldrb	r1, [r4, #1]
 80126fe:	292f      	cmp	r1, #47	; 0x2f
 8012700:	d01c      	beq.n	801273c <rmw_validate_full_topic_name+0xdc>
 8012702:	5dc9      	ldrb	r1, [r1, r7]
 8012704:	0749      	lsls	r1, r1, #29
 8012706:	d5ed      	bpl.n	80126e4 <rmw_validate_full_topic_name+0x84>
 8012708:	2206      	movs	r2, #6
 801270a:	602a      	str	r2, [r5, #0]
 801270c:	2e00      	cmp	r6, #0
 801270e:	d0c1      	beq.n	8012694 <rmw_validate_full_topic_name+0x34>
 8012710:	6033      	str	r3, [r6, #0]
 8012712:	e7bf      	b.n	8012694 <rmw_validate_full_topic_name+0x34>
 8012714:	200b      	movs	r0, #11
 8012716:	4770      	bx	lr
 8012718:	200b      	movs	r0, #11
 801271a:	e7b5      	b.n	8012688 <rmw_validate_full_topic_name+0x28>
 801271c:	2203      	movs	r2, #3
 801271e:	602a      	str	r2, [r5, #0]
 8012720:	2e00      	cmp	r6, #0
 8012722:	d1f5      	bne.n	8012710 <rmw_validate_full_topic_name+0xb0>
 8012724:	e7b6      	b.n	8012694 <rmw_validate_full_topic_name+0x34>
 8012726:	28f7      	cmp	r0, #247	; 0xf7
 8012728:	d802      	bhi.n	8012730 <rmw_validate_full_topic_name+0xd0>
 801272a:	2000      	movs	r0, #0
 801272c:	6028      	str	r0, [r5, #0]
 801272e:	e7ab      	b.n	8012688 <rmw_validate_full_topic_name+0x28>
 8012730:	2307      	movs	r3, #7
 8012732:	602b      	str	r3, [r5, #0]
 8012734:	2e00      	cmp	r6, #0
 8012736:	d0ad      	beq.n	8012694 <rmw_validate_full_topic_name+0x34>
 8012738:	23f6      	movs	r3, #246	; 0xf6
 801273a:	e7e9      	b.n	8012710 <rmw_validate_full_topic_name+0xb0>
 801273c:	2205      	movs	r2, #5
 801273e:	602a      	str	r2, [r5, #0]
 8012740:	2e00      	cmp	r6, #0
 8012742:	d1e5      	bne.n	8012710 <rmw_validate_full_topic_name+0xb0>
 8012744:	e7a6      	b.n	8012694 <rmw_validate_full_topic_name+0x34>
 8012746:	bf00      	nop
 8012748:	08018454 	.word	0x08018454

0801274c <rmw_validate_namespace_with_size>:
 801274c:	b340      	cbz	r0, 80127a0 <rmw_validate_namespace_with_size+0x54>
 801274e:	b570      	push	{r4, r5, r6, lr}
 8012750:	4614      	mov	r4, r2
 8012752:	b0c2      	sub	sp, #264	; 0x108
 8012754:	b332      	cbz	r2, 80127a4 <rmw_validate_namespace_with_size+0x58>
 8012756:	2901      	cmp	r1, #1
 8012758:	460d      	mov	r5, r1
 801275a:	461e      	mov	r6, r3
 801275c:	d102      	bne.n	8012764 <rmw_validate_namespace_with_size+0x18>
 801275e:	7803      	ldrb	r3, [r0, #0]
 8012760:	2b2f      	cmp	r3, #47	; 0x2f
 8012762:	d012      	beq.n	801278a <rmw_validate_namespace_with_size+0x3e>
 8012764:	aa01      	add	r2, sp, #4
 8012766:	4669      	mov	r1, sp
 8012768:	f7ff ff7a 	bl	8012660 <rmw_validate_full_topic_name>
 801276c:	b978      	cbnz	r0, 801278e <rmw_validate_namespace_with_size+0x42>
 801276e:	9b00      	ldr	r3, [sp, #0]
 8012770:	b14b      	cbz	r3, 8012786 <rmw_validate_namespace_with_size+0x3a>
 8012772:	2b07      	cmp	r3, #7
 8012774:	d007      	beq.n	8012786 <rmw_validate_namespace_with_size+0x3a>
 8012776:	1e5a      	subs	r2, r3, #1
 8012778:	2a05      	cmp	r2, #5
 801277a:	d82b      	bhi.n	80127d4 <rmw_validate_namespace_with_size+0x88>
 801277c:	e8df f002 	tbb	[pc, r2]
 8012780:	1e212427 	.word	0x1e212427
 8012784:	141b      	.short	0x141b
 8012786:	2df5      	cmp	r5, #245	; 0xf5
 8012788:	d803      	bhi.n	8012792 <rmw_validate_namespace_with_size+0x46>
 801278a:	2000      	movs	r0, #0
 801278c:	6020      	str	r0, [r4, #0]
 801278e:	b042      	add	sp, #264	; 0x108
 8012790:	bd70      	pop	{r4, r5, r6, pc}
 8012792:	2307      	movs	r3, #7
 8012794:	6023      	str	r3, [r4, #0]
 8012796:	2e00      	cmp	r6, #0
 8012798:	d0f9      	beq.n	801278e <rmw_validate_namespace_with_size+0x42>
 801279a:	23f4      	movs	r3, #244	; 0xf4
 801279c:	6033      	str	r3, [r6, #0]
 801279e:	e7f6      	b.n	801278e <rmw_validate_namespace_with_size+0x42>
 80127a0:	200b      	movs	r0, #11
 80127a2:	4770      	bx	lr
 80127a4:	200b      	movs	r0, #11
 80127a6:	e7f2      	b.n	801278e <rmw_validate_namespace_with_size+0x42>
 80127a8:	2306      	movs	r3, #6
 80127aa:	6023      	str	r3, [r4, #0]
 80127ac:	2e00      	cmp	r6, #0
 80127ae:	d0ee      	beq.n	801278e <rmw_validate_namespace_with_size+0x42>
 80127b0:	9b01      	ldr	r3, [sp, #4]
 80127b2:	6033      	str	r3, [r6, #0]
 80127b4:	e7eb      	b.n	801278e <rmw_validate_namespace_with_size+0x42>
 80127b6:	2305      	movs	r3, #5
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	e7f7      	b.n	80127ac <rmw_validate_namespace_with_size+0x60>
 80127bc:	2304      	movs	r3, #4
 80127be:	6023      	str	r3, [r4, #0]
 80127c0:	e7f4      	b.n	80127ac <rmw_validate_namespace_with_size+0x60>
 80127c2:	2303      	movs	r3, #3
 80127c4:	6023      	str	r3, [r4, #0]
 80127c6:	e7f1      	b.n	80127ac <rmw_validate_namespace_with_size+0x60>
 80127c8:	2302      	movs	r3, #2
 80127ca:	6023      	str	r3, [r4, #0]
 80127cc:	e7ee      	b.n	80127ac <rmw_validate_namespace_with_size+0x60>
 80127ce:	2301      	movs	r3, #1
 80127d0:	6023      	str	r3, [r4, #0]
 80127d2:	e7eb      	b.n	80127ac <rmw_validate_namespace_with_size+0x60>
 80127d4:	4a03      	ldr	r2, [pc, #12]	; (80127e4 <rmw_validate_namespace_with_size+0x98>)
 80127d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80127da:	a802      	add	r0, sp, #8
 80127dc:	f7ff fcda 	bl	8012194 <rcutils_snprintf>
 80127e0:	2001      	movs	r0, #1
 80127e2:	e7d4      	b.n	801278e <rmw_validate_namespace_with_size+0x42>
 80127e4:	08017e5c 	.word	0x08017e5c

080127e8 <rmw_validate_namespace>:
 80127e8:	b168      	cbz	r0, 8012806 <rmw_validate_namespace+0x1e>
 80127ea:	b570      	push	{r4, r5, r6, lr}
 80127ec:	460d      	mov	r5, r1
 80127ee:	4616      	mov	r6, r2
 80127f0:	4604      	mov	r4, r0
 80127f2:	f7ed fd17 	bl	8000224 <strlen>
 80127f6:	4633      	mov	r3, r6
 80127f8:	4601      	mov	r1, r0
 80127fa:	462a      	mov	r2, r5
 80127fc:	4620      	mov	r0, r4
 80127fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012802:	f7ff bfa3 	b.w	801274c <rmw_validate_namespace_with_size>
 8012806:	200b      	movs	r0, #11
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop

0801280c <rmw_namespace_validation_result_string>:
 801280c:	2807      	cmp	r0, #7
 801280e:	bf9a      	itte	ls
 8012810:	4b02      	ldrls	r3, [pc, #8]	; (801281c <rmw_namespace_validation_result_string+0x10>)
 8012812:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012816:	4802      	ldrhi	r0, [pc, #8]	; (8012820 <rmw_namespace_validation_result_string+0x14>)
 8012818:	4770      	bx	lr
 801281a:	bf00      	nop
 801281c:	08018054 	.word	0x08018054
 8012820:	08017eac 	.word	0x08017eac

08012824 <rmw_validate_node_name>:
 8012824:	2800      	cmp	r0, #0
 8012826:	d03b      	beq.n	80128a0 <rmw_validate_node_name+0x7c>
 8012828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801282c:	460d      	mov	r5, r1
 801282e:	2900      	cmp	r1, #0
 8012830:	d038      	beq.n	80128a4 <rmw_validate_node_name+0x80>
 8012832:	4616      	mov	r6, r2
 8012834:	4604      	mov	r4, r0
 8012836:	f7ed fcf5 	bl	8000224 <strlen>
 801283a:	b1e0      	cbz	r0, 8012876 <rmw_validate_node_name+0x52>
 801283c:	1e63      	subs	r3, r4, #1
 801283e:	eb03 0800 	add.w	r8, r3, r0
 8012842:	f1c4 0101 	rsb	r1, r4, #1
 8012846:	18cf      	adds	r7, r1, r3
 8012848:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801284c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8012850:	f02e 0c20 	bic.w	ip, lr, #32
 8012854:	2a09      	cmp	r2, #9
 8012856:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801285a:	d914      	bls.n	8012886 <rmw_validate_node_name+0x62>
 801285c:	f1bc 0f19 	cmp.w	ip, #25
 8012860:	d911      	bls.n	8012886 <rmw_validate_node_name+0x62>
 8012862:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8012866:	d00e      	beq.n	8012886 <rmw_validate_node_name+0x62>
 8012868:	2302      	movs	r3, #2
 801286a:	602b      	str	r3, [r5, #0]
 801286c:	b106      	cbz	r6, 8012870 <rmw_validate_node_name+0x4c>
 801286e:	6037      	str	r7, [r6, #0]
 8012870:	2000      	movs	r0, #0
 8012872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012876:	2301      	movs	r3, #1
 8012878:	602b      	str	r3, [r5, #0]
 801287a:	2e00      	cmp	r6, #0
 801287c:	d0f8      	beq.n	8012870 <rmw_validate_node_name+0x4c>
 801287e:	2000      	movs	r0, #0
 8012880:	6030      	str	r0, [r6, #0]
 8012882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012886:	4543      	cmp	r3, r8
 8012888:	d1dd      	bne.n	8012846 <rmw_validate_node_name+0x22>
 801288a:	7822      	ldrb	r2, [r4, #0]
 801288c:	4b0d      	ldr	r3, [pc, #52]	; (80128c4 <rmw_validate_node_name+0xa0>)
 801288e:	5cd3      	ldrb	r3, [r2, r3]
 8012890:	f013 0304 	ands.w	r3, r3, #4
 8012894:	d110      	bne.n	80128b8 <rmw_validate_node_name+0x94>
 8012896:	28ff      	cmp	r0, #255	; 0xff
 8012898:	d806      	bhi.n	80128a8 <rmw_validate_node_name+0x84>
 801289a:	602b      	str	r3, [r5, #0]
 801289c:	4618      	mov	r0, r3
 801289e:	e7e8      	b.n	8012872 <rmw_validate_node_name+0x4e>
 80128a0:	200b      	movs	r0, #11
 80128a2:	4770      	bx	lr
 80128a4:	200b      	movs	r0, #11
 80128a6:	e7e4      	b.n	8012872 <rmw_validate_node_name+0x4e>
 80128a8:	2204      	movs	r2, #4
 80128aa:	602a      	str	r2, [r5, #0]
 80128ac:	2e00      	cmp	r6, #0
 80128ae:	d0df      	beq.n	8012870 <rmw_validate_node_name+0x4c>
 80128b0:	22fe      	movs	r2, #254	; 0xfe
 80128b2:	6032      	str	r2, [r6, #0]
 80128b4:	4618      	mov	r0, r3
 80128b6:	e7dc      	b.n	8012872 <rmw_validate_node_name+0x4e>
 80128b8:	2303      	movs	r3, #3
 80128ba:	602b      	str	r3, [r5, #0]
 80128bc:	2e00      	cmp	r6, #0
 80128be:	d1de      	bne.n	801287e <rmw_validate_node_name+0x5a>
 80128c0:	e7d6      	b.n	8012870 <rmw_validate_node_name+0x4c>
 80128c2:	bf00      	nop
 80128c4:	08018454 	.word	0x08018454

080128c8 <rmw_node_name_validation_result_string>:
 80128c8:	2804      	cmp	r0, #4
 80128ca:	bf9a      	itte	ls
 80128cc:	4b02      	ldrls	r3, [pc, #8]	; (80128d8 <rmw_node_name_validation_result_string+0x10>)
 80128ce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80128d2:	4802      	ldrhi	r0, [pc, #8]	; (80128dc <rmw_node_name_validation_result_string+0x14>)
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	08018160 	.word	0x08018160
 80128dc:	08018074 	.word	0x08018074

080128e0 <get_memory>:
 80128e0:	4603      	mov	r3, r0
 80128e2:	6840      	ldr	r0, [r0, #4]
 80128e4:	b158      	cbz	r0, 80128fe <get_memory+0x1e>
 80128e6:	6842      	ldr	r2, [r0, #4]
 80128e8:	605a      	str	r2, [r3, #4]
 80128ea:	b10a      	cbz	r2, 80128f0 <get_memory+0x10>
 80128ec:	2100      	movs	r1, #0
 80128ee:	6011      	str	r1, [r2, #0]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	6042      	str	r2, [r0, #4]
 80128f4:	b102      	cbz	r2, 80128f8 <get_memory+0x18>
 80128f6:	6010      	str	r0, [r2, #0]
 80128f8:	2200      	movs	r2, #0
 80128fa:	6002      	str	r2, [r0, #0]
 80128fc:	6018      	str	r0, [r3, #0]
 80128fe:	4770      	bx	lr

08012900 <put_memory>:
 8012900:	680b      	ldr	r3, [r1, #0]
 8012902:	b10b      	cbz	r3, 8012908 <put_memory+0x8>
 8012904:	684a      	ldr	r2, [r1, #4]
 8012906:	605a      	str	r2, [r3, #4]
 8012908:	684a      	ldr	r2, [r1, #4]
 801290a:	b102      	cbz	r2, 801290e <put_memory+0xe>
 801290c:	6013      	str	r3, [r2, #0]
 801290e:	6803      	ldr	r3, [r0, #0]
 8012910:	428b      	cmp	r3, r1
 8012912:	6843      	ldr	r3, [r0, #4]
 8012914:	bf08      	it	eq
 8012916:	6002      	streq	r2, [r0, #0]
 8012918:	604b      	str	r3, [r1, #4]
 801291a:	b103      	cbz	r3, 801291e <put_memory+0x1e>
 801291c:	6019      	str	r1, [r3, #0]
 801291e:	2300      	movs	r3, #0
 8012920:	600b      	str	r3, [r1, #0]
 8012922:	6041      	str	r1, [r0, #4]
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop

08012928 <rmw_destroy_client>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	b128      	cbz	r0, 8012938 <rmw_destroy_client+0x10>
 801292c:	4604      	mov	r4, r0
 801292e:	6800      	ldr	r0, [r0, #0]
 8012930:	460d      	mov	r5, r1
 8012932:	f7f8 fc83 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 8012936:	b910      	cbnz	r0, 801293e <rmw_destroy_client+0x16>
 8012938:	2401      	movs	r4, #1
 801293a:	4620      	mov	r0, r4
 801293c:	bd70      	pop	{r4, r5, r6, pc}
 801293e:	6863      	ldr	r3, [r4, #4]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d0f9      	beq.n	8012938 <rmw_destroy_client+0x10>
 8012944:	2d00      	cmp	r5, #0
 8012946:	d0f7      	beq.n	8012938 <rmw_destroy_client+0x10>
 8012948:	6828      	ldr	r0, [r5, #0]
 801294a:	f7f8 fc77 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 801294e:	2800      	cmp	r0, #0
 8012950:	d0f2      	beq.n	8012938 <rmw_destroy_client+0x10>
 8012952:	686e      	ldr	r6, [r5, #4]
 8012954:	2e00      	cmp	r6, #0
 8012956:	d0ef      	beq.n	8012938 <rmw_destroy_client+0x10>
 8012958:	6864      	ldr	r4, [r4, #4]
 801295a:	6932      	ldr	r2, [r6, #16]
 801295c:	6920      	ldr	r0, [r4, #16]
 801295e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012962:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012966:	6819      	ldr	r1, [r3, #0]
 8012968:	f002 f91a 	bl	8014ba0 <uxr_buffer_cancel_data>
 801296c:	4602      	mov	r2, r0
 801296e:	6920      	ldr	r0, [r4, #16]
 8012970:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012974:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012978:	f7f8 fbe0 	bl	800b13c <run_xrce_session>
 801297c:	6920      	ldr	r0, [r4, #16]
 801297e:	6932      	ldr	r2, [r6, #16]
 8012980:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012984:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012988:	6819      	ldr	r1, [r3, #0]
 801298a:	f7f9 fe3b 	bl	800c604 <uxr_buffer_delete_entity>
 801298e:	4602      	mov	r2, r0
 8012990:	6920      	ldr	r0, [r4, #16]
 8012992:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012996:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801299a:	f7f8 fbcf 	bl	800b13c <run_xrce_session>
 801299e:	2800      	cmp	r0, #0
 80129a0:	4628      	mov	r0, r5
 80129a2:	bf14      	ite	ne
 80129a4:	2400      	movne	r4, #0
 80129a6:	2402      	moveq	r4, #2
 80129a8:	f7f8 fab0 	bl	800af0c <rmw_uxrce_fini_client_memory>
 80129ac:	e7c5      	b.n	801293a <rmw_destroy_client+0x12>
 80129ae:	bf00      	nop

080129b0 <rmw_get_implementation_identifier>:
 80129b0:	4b01      	ldr	r3, [pc, #4]	; (80129b8 <rmw_get_implementation_identifier+0x8>)
 80129b2:	6818      	ldr	r0, [r3, #0]
 80129b4:	4770      	bx	lr
 80129b6:	bf00      	nop
 80129b8:	0801818c 	.word	0x0801818c

080129bc <rmw_init_options_init>:
 80129bc:	b084      	sub	sp, #16
 80129be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129c0:	b083      	sub	sp, #12
 80129c2:	ad09      	add	r5, sp, #36	; 0x24
 80129c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80129c8:	b130      	cbz	r0, 80129d8 <rmw_init_options_init+0x1c>
 80129ca:	4604      	mov	r4, r0
 80129cc:	4628      	mov	r0, r5
 80129ce:	f7f7 fe8f 	bl	800a6f0 <rcutils_allocator_is_valid>
 80129d2:	b108      	cbz	r0, 80129d8 <rmw_init_options_init+0x1c>
 80129d4:	68a6      	ldr	r6, [r4, #8]
 80129d6:	b12e      	cbz	r6, 80129e4 <rmw_init_options_init+0x28>
 80129d8:	200b      	movs	r0, #11
 80129da:	b003      	add	sp, #12
 80129dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80129e0:	b004      	add	sp, #16
 80129e2:	4770      	bx	lr
 80129e4:	2200      	movs	r2, #0
 80129e6:	2300      	movs	r3, #0
 80129e8:	e9c4 2300 	strd	r2, r3, [r4]
 80129ec:	4b22      	ldr	r3, [pc, #136]	; (8012a78 <rmw_init_options_init+0xbc>)
 80129ee:	f8df e098 	ldr.w	lr, [pc, #152]	; 8012a88 <rmw_init_options_init+0xcc>
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	60a3      	str	r3, [r4, #8]
 80129f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80129f8:	f104 0c20 	add.w	ip, r4, #32
 80129fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a00:	466f      	mov	r7, sp
 8012a02:	682b      	ldr	r3, [r5, #0]
 8012a04:	f8cc 3000 	str.w	r3, [ip]
 8012a08:	4638      	mov	r0, r7
 8012a0a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8012a0e:	60e6      	str	r6, [r4, #12]
 8012a10:	f7ff fd76 	bl	8012500 <rmw_get_default_security_options>
 8012a14:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012a18:	f104 0310 	add.w	r3, r4, #16
 8012a1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012a20:	2203      	movs	r2, #3
 8012a22:	4816      	ldr	r0, [pc, #88]	; (8012a7c <rmw_init_options_init+0xc0>)
 8012a24:	4916      	ldr	r1, [pc, #88]	; (8012a80 <rmw_init_options_init+0xc4>)
 8012a26:	7626      	strb	r6, [r4, #24]
 8012a28:	f7f8 f9b0 	bl	800ad8c <rmw_uxrce_init_init_options_impl_memory>
 8012a2c:	4813      	ldr	r0, [pc, #76]	; (8012a7c <rmw_init_options_init+0xc0>)
 8012a2e:	f7ff ff57 	bl	80128e0 <get_memory>
 8012a32:	b1f0      	cbz	r0, 8012a72 <rmw_init_options_init+0xb6>
 8012a34:	4a13      	ldr	r2, [pc, #76]	; (8012a84 <rmw_init_options_init+0xc8>)
 8012a36:	6883      	ldr	r3, [r0, #8]
 8012a38:	6851      	ldr	r1, [r2, #4]
 8012a3a:	7810      	ldrb	r0, [r2, #0]
 8012a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8012a3e:	7418      	strb	r0, [r3, #16]
 8012a40:	6159      	str	r1, [r3, #20]
 8012a42:	68d1      	ldr	r1, [r2, #12]
 8012a44:	61d9      	str	r1, [r3, #28]
 8012a46:	6911      	ldr	r1, [r2, #16]
 8012a48:	6219      	str	r1, [r3, #32]
 8012a4a:	6951      	ldr	r1, [r2, #20]
 8012a4c:	6892      	ldr	r2, [r2, #8]
 8012a4e:	619a      	str	r2, [r3, #24]
 8012a50:	6259      	str	r1, [r3, #36]	; 0x24
 8012a52:	f7fb fa35 	bl	800dec0 <uxr_nanos>
 8012a56:	f003 fbc1 	bl	80161dc <srand>
 8012a5a:	f003 fbed 	bl	8016238 <rand>
 8012a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a60:	6298      	str	r0, [r3, #40]	; 0x28
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d0f9      	beq.n	8012a5a <rmw_init_options_init+0x9e>
 8012a66:	2000      	movs	r0, #0
 8012a68:	b003      	add	sp, #12
 8012a6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012a6e:	b004      	add	sp, #16
 8012a70:	4770      	bx	lr
 8012a72:	2001      	movs	r0, #1
 8012a74:	e7b1      	b.n	80129da <rmw_init_options_init+0x1e>
 8012a76:	bf00      	nop
 8012a78:	0801818c 	.word	0x0801818c
 8012a7c:	20012f8c 	.word	0x20012f8c
 8012a80:	2000e828 	.word	0x2000e828
 8012a84:	2000e6b4 	.word	0x2000e6b4
 8012a88:	08017bf4 	.word	0x08017bf4

08012a8c <rmw_init_options_copy>:
 8012a8c:	b570      	push	{r4, r5, r6, lr}
 8012a8e:	b158      	cbz	r0, 8012aa8 <rmw_init_options_copy+0x1c>
 8012a90:	460d      	mov	r5, r1
 8012a92:	b149      	cbz	r1, 8012aa8 <rmw_init_options_copy+0x1c>
 8012a94:	4604      	mov	r4, r0
 8012a96:	6880      	ldr	r0, [r0, #8]
 8012a98:	b120      	cbz	r0, 8012aa4 <rmw_init_options_copy+0x18>
 8012a9a:	4b1e      	ldr	r3, [pc, #120]	; (8012b14 <rmw_init_options_copy+0x88>)
 8012a9c:	6819      	ldr	r1, [r3, #0]
 8012a9e:	f7ed fbb7 	bl	8000210 <strcmp>
 8012aa2:	bb90      	cbnz	r0, 8012b0a <rmw_init_options_copy+0x7e>
 8012aa4:	68ab      	ldr	r3, [r5, #8]
 8012aa6:	b113      	cbz	r3, 8012aae <rmw_init_options_copy+0x22>
 8012aa8:	250b      	movs	r5, #11
 8012aaa:	4628      	mov	r0, r5
 8012aac:	bd70      	pop	{r4, r5, r6, pc}
 8012aae:	4623      	mov	r3, r4
 8012ab0:	462a      	mov	r2, r5
 8012ab2:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012ab6:	f8d3 c000 	ldr.w	ip, [r3]
 8012aba:	6858      	ldr	r0, [r3, #4]
 8012abc:	6899      	ldr	r1, [r3, #8]
 8012abe:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8012ac2:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012ac6:	3310      	adds	r3, #16
 8012ac8:	42b3      	cmp	r3, r6
 8012aca:	f8c2 c000 	str.w	ip, [r2]
 8012ace:	6050      	str	r0, [r2, #4]
 8012ad0:	6091      	str	r1, [r2, #8]
 8012ad2:	f102 0210 	add.w	r2, r2, #16
 8012ad6:	d1ee      	bne.n	8012ab6 <rmw_init_options_copy+0x2a>
 8012ad8:	6819      	ldr	r1, [r3, #0]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	480e      	ldr	r0, [pc, #56]	; (8012b18 <rmw_init_options_copy+0x8c>)
 8012ade:	6053      	str	r3, [r2, #4]
 8012ae0:	6011      	str	r1, [r2, #0]
 8012ae2:	f7ff fefd 	bl	80128e0 <get_memory>
 8012ae6:	b198      	cbz	r0, 8012b10 <rmw_init_options_copy+0x84>
 8012ae8:	6883      	ldr	r3, [r0, #8]
 8012aea:	636b      	str	r3, [r5, #52]	; 0x34
 8012aec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012aee:	f102 0c10 	add.w	ip, r2, #16
 8012af2:	f103 0410 	add.w	r4, r3, #16
 8012af6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012afc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012b00:	2500      	movs	r5, #0
 8012b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012b06:	4628      	mov	r0, r5
 8012b08:	bd70      	pop	{r4, r5, r6, pc}
 8012b0a:	250c      	movs	r5, #12
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	bd70      	pop	{r4, r5, r6, pc}
 8012b10:	2501      	movs	r5, #1
 8012b12:	e7ca      	b.n	8012aaa <rmw_init_options_copy+0x1e>
 8012b14:	0801818c 	.word	0x0801818c
 8012b18:	20012f8c 	.word	0x20012f8c

08012b1c <rmw_init_options_fini>:
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	d03d      	beq.n	8012b9c <rmw_init_options_fini+0x80>
 8012b20:	b510      	push	{r4, lr}
 8012b22:	4604      	mov	r4, r0
 8012b24:	b08e      	sub	sp, #56	; 0x38
 8012b26:	3020      	adds	r0, #32
 8012b28:	f7f7 fde2 	bl	800a6f0 <rcutils_allocator_is_valid>
 8012b2c:	b360      	cbz	r0, 8012b88 <rmw_init_options_fini+0x6c>
 8012b2e:	68a0      	ldr	r0, [r4, #8]
 8012b30:	b120      	cbz	r0, 8012b3c <rmw_init_options_fini+0x20>
 8012b32:	4b1c      	ldr	r3, [pc, #112]	; (8012ba4 <rmw_init_options_fini+0x88>)
 8012b34:	6819      	ldr	r1, [r3, #0]
 8012b36:	f7ed fb6b 	bl	8000210 <strcmp>
 8012b3a:	bb68      	cbnz	r0, 8012b98 <rmw_init_options_fini+0x7c>
 8012b3c:	4b1a      	ldr	r3, [pc, #104]	; (8012ba8 <rmw_init_options_fini+0x8c>)
 8012b3e:	6819      	ldr	r1, [r3, #0]
 8012b40:	b331      	cbz	r1, 8012b90 <rmw_init_options_fini+0x74>
 8012b42:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012b44:	e001      	b.n	8012b4a <rmw_init_options_fini+0x2e>
 8012b46:	6849      	ldr	r1, [r1, #4]
 8012b48:	b311      	cbz	r1, 8012b90 <rmw_init_options_fini+0x74>
 8012b4a:	688b      	ldr	r3, [r1, #8]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d1fa      	bne.n	8012b46 <rmw_init_options_fini+0x2a>
 8012b50:	4815      	ldr	r0, [pc, #84]	; (8012ba8 <rmw_init_options_fini+0x8c>)
 8012b52:	f7ff fed5 	bl	8012900 <put_memory>
 8012b56:	4668      	mov	r0, sp
 8012b58:	f7ff fcc2 	bl	80124e0 <rmw_get_zero_initialized_init_options>
 8012b5c:	46ee      	mov	lr, sp
 8012b5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b62:	46a4      	mov	ip, r4
 8012b64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012b7c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b80:	2300      	movs	r3, #0
 8012b82:	4618      	mov	r0, r3
 8012b84:	b00e      	add	sp, #56	; 0x38
 8012b86:	bd10      	pop	{r4, pc}
 8012b88:	230b      	movs	r3, #11
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	b00e      	add	sp, #56	; 0x38
 8012b8e:	bd10      	pop	{r4, pc}
 8012b90:	2301      	movs	r3, #1
 8012b92:	4618      	mov	r0, r3
 8012b94:	b00e      	add	sp, #56	; 0x38
 8012b96:	bd10      	pop	{r4, pc}
 8012b98:	230c      	movs	r3, #12
 8012b9a:	e7f2      	b.n	8012b82 <rmw_init_options_fini+0x66>
 8012b9c:	230b      	movs	r3, #11
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	4770      	bx	lr
 8012ba2:	bf00      	nop
 8012ba4:	0801818c 	.word	0x0801818c
 8012ba8:	20012f8c 	.word	0x20012f8c

08012bac <rmw_init>:
 8012bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bb0:	b083      	sub	sp, #12
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	f000 80d3 	beq.w	8012d5e <rmw_init+0x1b2>
 8012bb8:	460e      	mov	r6, r1
 8012bba:	2900      	cmp	r1, #0
 8012bbc:	f000 80cf 	beq.w	8012d5e <rmw_init+0x1b2>
 8012bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012bc2:	4605      	mov	r5, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f000 80ca 	beq.w	8012d5e <rmw_init+0x1b2>
 8012bca:	4b78      	ldr	r3, [pc, #480]	; (8012dac <rmw_init+0x200>)
 8012bcc:	6880      	ldr	r0, [r0, #8]
 8012bce:	681f      	ldr	r7, [r3, #0]
 8012bd0:	b128      	cbz	r0, 8012bde <rmw_init+0x32>
 8012bd2:	4639      	mov	r1, r7
 8012bd4:	f7ed fb1c 	bl	8000210 <strcmp>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	f040 80ca 	bne.w	8012d72 <rmw_init+0x1c6>
 8012bde:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012be2:	4c73      	ldr	r4, [pc, #460]	; (8012db0 <rmw_init+0x204>)
 8012be4:	4973      	ldr	r1, [pc, #460]	; (8012db4 <rmw_init+0x208>)
 8012be6:	4874      	ldr	r0, [pc, #464]	; (8012db8 <rmw_init+0x20c>)
 8012be8:	60b7      	str	r7, [r6, #8]
 8012bea:	e9c6 2300 	strd	r2, r3, [r6]
 8012bee:	68eb      	ldr	r3, [r5, #12]
 8012bf0:	64b3      	str	r3, [r6, #72]	; 0x48
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	f7f8 f86a 	bl	800accc <rmw_uxrce_init_session_memory>
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	4970      	ldr	r1, [pc, #448]	; (8012dbc <rmw_init+0x210>)
 8012bfc:	2204      	movs	r2, #4
 8012bfe:	f7f8 f8a5 	bl	800ad4c <rmw_uxrce_init_static_input_buffer_memory>
 8012c02:	f04f 0800 	mov.w	r8, #0
 8012c06:	486c      	ldr	r0, [pc, #432]	; (8012db8 <rmw_init+0x20c>)
 8012c08:	f884 800d 	strb.w	r8, [r4, #13]
 8012c0c:	f7ff fe68 	bl	80128e0 <get_memory>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	f000 80a9 	beq.w	8012d68 <rmw_init+0x1bc>
 8012c16:	6884      	ldr	r4, [r0, #8]
 8012c18:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8012c1a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012c1c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012c20:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012c24:	9101      	str	r1, [sp, #4]
 8012c26:	6a00      	ldr	r0, [r0, #32]
 8012c28:	9000      	str	r0, [sp, #0]
 8012c2a:	f104 0910 	add.w	r9, r4, #16
 8012c2e:	4661      	mov	r1, ip
 8012c30:	4648      	mov	r0, r9
 8012c32:	f001 f9ed 	bl	8014010 <uxr_set_custom_transport_callbacks>
 8012c36:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8012c3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012c3e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012c42:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8012c46:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8012c4a:	495d      	ldr	r1, [pc, #372]	; (8012dc0 <rmw_init+0x214>)
 8012c4c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8012c50:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8012c54:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8012c58:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8012c5c:	4859      	ldr	r0, [pc, #356]	; (8012dc4 <rmw_init+0x218>)
 8012c5e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8012c62:	2201      	movs	r2, #1
 8012c64:	64f4      	str	r4, [r6, #76]	; 0x4c
 8012c66:	f7f8 f811 	bl	800ac8c <rmw_uxrce_init_node_memory>
 8012c6a:	4957      	ldr	r1, [pc, #348]	; (8012dc8 <rmw_init+0x21c>)
 8012c6c:	4857      	ldr	r0, [pc, #348]	; (8012dcc <rmw_init+0x220>)
 8012c6e:	2205      	movs	r2, #5
 8012c70:	f7f7 ffec 	bl	800ac4c <rmw_uxrce_init_subscription_memory>
 8012c74:	4956      	ldr	r1, [pc, #344]	; (8012dd0 <rmw_init+0x224>)
 8012c76:	4857      	ldr	r0, [pc, #348]	; (8012dd4 <rmw_init+0x228>)
 8012c78:	220a      	movs	r2, #10
 8012c7a:	f7f7 ffc7 	bl	800ac0c <rmw_uxrce_init_publisher_memory>
 8012c7e:	4956      	ldr	r1, [pc, #344]	; (8012dd8 <rmw_init+0x22c>)
 8012c80:	4856      	ldr	r0, [pc, #344]	; (8012ddc <rmw_init+0x230>)
 8012c82:	2201      	movs	r2, #1
 8012c84:	f7f7 ff82 	bl	800ab8c <rmw_uxrce_init_service_memory>
 8012c88:	4955      	ldr	r1, [pc, #340]	; (8012de0 <rmw_init+0x234>)
 8012c8a:	4856      	ldr	r0, [pc, #344]	; (8012de4 <rmw_init+0x238>)
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	f7f7 ff9d 	bl	800abcc <rmw_uxrce_init_client_memory>
 8012c92:	4955      	ldr	r1, [pc, #340]	; (8012de8 <rmw_init+0x23c>)
 8012c94:	4855      	ldr	r0, [pc, #340]	; (8012dec <rmw_init+0x240>)
 8012c96:	220f      	movs	r2, #15
 8012c98:	f7f8 f838 	bl	800ad0c <rmw_uxrce_init_topic_memory>
 8012c9c:	4954      	ldr	r1, [pc, #336]	; (8012df0 <rmw_init+0x244>)
 8012c9e:	4855      	ldr	r0, [pc, #340]	; (8012df4 <rmw_init+0x248>)
 8012ca0:	2203      	movs	r2, #3
 8012ca2:	f7f8 f873 	bl	800ad8c <rmw_uxrce_init_init_options_impl_memory>
 8012ca6:	4954      	ldr	r1, [pc, #336]	; (8012df8 <rmw_init+0x24c>)
 8012ca8:	4854      	ldr	r0, [pc, #336]	; (8012dfc <rmw_init+0x250>)
 8012caa:	2204      	movs	r2, #4
 8012cac:	f7f8 f88e 	bl	800adcc <rmw_uxrce_init_wait_set_memory>
 8012cb0:	4953      	ldr	r1, [pc, #332]	; (8012e00 <rmw_init+0x254>)
 8012cb2:	4854      	ldr	r0, [pc, #336]	; (8012e04 <rmw_init+0x258>)
 8012cb4:	2204      	movs	r2, #4
 8012cb6:	f7f8 f8a9 	bl	800ae0c <rmw_uxrce_init_guard_condition_memory>
 8012cba:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8012cbc:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8012cbe:	4642      	mov	r2, r8
 8012cc0:	f000 fd9e 	bl	8013800 <rmw_uxrce_transport_init>
 8012cc4:	4607      	mov	r7, r0
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	d158      	bne.n	8012d7c <rmw_init+0x1d0>
 8012cca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012ccc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8012cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012cd2:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f7f9 ff56 	bl	800cb88 <uxr_init_session>
 8012cdc:	494a      	ldr	r1, [pc, #296]	; (8012e08 <rmw_init+0x25c>)
 8012cde:	4622      	mov	r2, r4
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	f7f9 ff75 	bl	800cbd0 <uxr_set_topic_callback>
 8012ce6:	4949      	ldr	r1, [pc, #292]	; (8012e0c <rmw_init+0x260>)
 8012ce8:	463a      	mov	r2, r7
 8012cea:	4628      	mov	r0, r5
 8012cec:	f7f9 ff6c 	bl	800cbc8 <uxr_set_status_callback>
 8012cf0:	4947      	ldr	r1, [pc, #284]	; (8012e10 <rmw_init+0x264>)
 8012cf2:	463a      	mov	r2, r7
 8012cf4:	4628      	mov	r0, r5
 8012cf6:	f7f9 ff6f 	bl	800cbd8 <uxr_set_request_callback>
 8012cfa:	4946      	ldr	r1, [pc, #280]	; (8012e14 <rmw_init+0x268>)
 8012cfc:	463a      	mov	r2, r7
 8012cfe:	4628      	mov	r0, r5
 8012d00:	f7f9 ff6e 	bl	800cbe0 <uxr_set_reply_callback>
 8012d04:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012d08:	2304      	movs	r3, #4
 8012d0a:	0092      	lsls	r2, r2, #2
 8012d0c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8012d10:	4628      	mov	r0, r5
 8012d12:	f7f9 ffa3 	bl	800cc5c <uxr_create_input_reliable_stream>
 8012d16:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012d1a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8012d1e:	0092      	lsls	r2, r2, #2
 8012d20:	2304      	movs	r3, #4
 8012d22:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8012d26:	4628      	mov	r0, r5
 8012d28:	f7f9 ff70 	bl	800cc0c <uxr_create_output_reliable_stream>
 8012d2c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012d30:	4628      	mov	r0, r5
 8012d32:	f7f9 ff8d 	bl	800cc50 <uxr_create_input_best_effort_stream>
 8012d36:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8012d3a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8012d3e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012d42:	3114      	adds	r1, #20
 8012d44:	4628      	mov	r0, r5
 8012d46:	f7f9 ff4f 	bl	800cbe8 <uxr_create_output_best_effort_stream>
 8012d4a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8012d4e:	4628      	mov	r0, r5
 8012d50:	f7fa fcda 	bl	800d708 <uxr_create_session>
 8012d54:	b1f8      	cbz	r0, 8012d96 <rmw_init+0x1ea>
 8012d56:	4638      	mov	r0, r7
 8012d58:	b003      	add	sp, #12
 8012d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d5e:	270b      	movs	r7, #11
 8012d60:	4638      	mov	r0, r7
 8012d62:	b003      	add	sp, #12
 8012d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d68:	2701      	movs	r7, #1
 8012d6a:	4638      	mov	r0, r7
 8012d6c:	b003      	add	sp, #12
 8012d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d72:	270c      	movs	r7, #12
 8012d74:	4638      	mov	r0, r7
 8012d76:	b003      	add	sp, #12
 8012d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d7c:	4648      	mov	r0, r9
 8012d7e:	f001 f989 	bl	8014094 <uxr_close_custom_transport>
 8012d82:	480d      	ldr	r0, [pc, #52]	; (8012db8 <rmw_init+0x20c>)
 8012d84:	4621      	mov	r1, r4
 8012d86:	f7ff fdbb 	bl	8012900 <put_memory>
 8012d8a:	4638      	mov	r0, r7
 8012d8c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8012d90:	b003      	add	sp, #12
 8012d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d96:	4648      	mov	r0, r9
 8012d98:	f001 f97c 	bl	8014094 <uxr_close_custom_transport>
 8012d9c:	4806      	ldr	r0, [pc, #24]	; (8012db8 <rmw_init+0x20c>)
 8012d9e:	4621      	mov	r1, r4
 8012da0:	f7ff fdae 	bl	8012900 <put_memory>
 8012da4:	64f7      	str	r7, [r6, #76]	; 0x4c
 8012da6:	2701      	movs	r7, #1
 8012da8:	e7d5      	b.n	8012d56 <rmw_init+0x1aa>
 8012daa:	bf00      	nop
 8012dac:	0801818c 	.word	0x0801818c
 8012db0:	20012fdc 	.word	0x20012fdc
 8012db4:	2000f288 	.word	0x2000f288
 8012db8:	20012fcc 	.word	0x20012fcc
 8012dbc:	20010830 	.word	0x20010830
 8012dc0:	2000e8ac 	.word	0x2000e8ac
 8012dc4:	20012f9c 	.word	0x20012f9c
 8012dc8:	20012930 	.word	0x20012930
 8012dcc:	20012fec 	.word	0x20012fec
 8012dd0:	2000e950 	.word	0x2000e950
 8012dd4:	20012fac 	.word	0x20012fac
 8012dd8:	2000f1c0 	.word	0x2000f1c0
 8012ddc:	20012fbc 	.word	0x20012fbc
 8012de0:	2000e6e0 	.word	0x2000e6e0
 8012de4:	2000e6d0 	.word	0x2000e6d0
 8012de8:	20012d68 	.word	0x20012d68
 8012dec:	20012ffc 	.word	0x20012ffc
 8012df0:	2000e828 	.word	0x2000e828
 8012df4:	20012f8c 	.word	0x20012f8c
 8012df8:	20012f0c 	.word	0x20012f0c
 8012dfc:	2001300c 	.word	0x2001300c
 8012e00:	2000e7a8 	.word	0x2000e7a8
 8012e04:	20012f7c 	.word	0x20012f7c
 8012e08:	08015d81 	.word	0x08015d81
 8012e0c:	08015d79 	.word	0x08015d79
 8012e10:	08015e19 	.word	0x08015e19
 8012e14:	08015eb5 	.word	0x08015eb5

08012e18 <rmw_context_fini>:
 8012e18:	4b17      	ldr	r3, [pc, #92]	; (8012e78 <rmw_context_fini+0x60>)
 8012e1a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	681c      	ldr	r4, [r3, #0]
 8012e20:	4605      	mov	r5, r0
 8012e22:	b334      	cbz	r4, 8012e72 <rmw_context_fini+0x5a>
 8012e24:	2600      	movs	r6, #0
 8012e26:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012e2a:	6902      	ldr	r2, [r0, #16]
 8012e2c:	428a      	cmp	r2, r1
 8012e2e:	d018      	beq.n	8012e62 <rmw_context_fini+0x4a>
 8012e30:	2c00      	cmp	r4, #0
 8012e32:	d1f8      	bne.n	8012e26 <rmw_context_fini+0xe>
 8012e34:	b189      	cbz	r1, 8012e5a <rmw_context_fini+0x42>
 8012e36:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8012e3a:	789b      	ldrb	r3, [r3, #2]
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8012e42:	bf14      	ite	ne
 8012e44:	210a      	movne	r1, #10
 8012e46:	2100      	moveq	r1, #0
 8012e48:	f7fa fc36 	bl	800d6b8 <uxr_delete_session_retries>
 8012e4c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8012e4e:	f7f7 fffd 	bl	800ae4c <rmw_uxrce_fini_session_memory>
 8012e52:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8012e54:	3010      	adds	r0, #16
 8012e56:	f001 f91d 	bl	8014094 <uxr_close_custom_transport>
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8012e5e:	4630      	mov	r0, r6
 8012e60:	bd70      	pop	{r4, r5, r6, pc}
 8012e62:	3018      	adds	r0, #24
 8012e64:	f000 f90e 	bl	8013084 <rmw_destroy_node>
 8012e68:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8012e6a:	4606      	mov	r6, r0
 8012e6c:	2c00      	cmp	r4, #0
 8012e6e:	d1da      	bne.n	8012e26 <rmw_context_fini+0xe>
 8012e70:	e7e0      	b.n	8012e34 <rmw_context_fini+0x1c>
 8012e72:	4626      	mov	r6, r4
 8012e74:	e7de      	b.n	8012e34 <rmw_context_fini+0x1c>
 8012e76:	bf00      	nop
 8012e78:	20012f9c 	.word	0x20012f9c

08012e7c <create_topic>:
 8012e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e80:	4605      	mov	r5, r0
 8012e82:	b084      	sub	sp, #16
 8012e84:	4822      	ldr	r0, [pc, #136]	; (8012f10 <create_topic+0x94>)
 8012e86:	460f      	mov	r7, r1
 8012e88:	4616      	mov	r6, r2
 8012e8a:	f7ff fd29 	bl	80128e0 <get_memory>
 8012e8e:	4604      	mov	r4, r0
 8012e90:	2800      	cmp	r0, #0
 8012e92:	d039      	beq.n	8012f08 <create_topic+0x8c>
 8012e94:	692b      	ldr	r3, [r5, #16]
 8012e96:	6884      	ldr	r4, [r0, #8]
 8012e98:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8012f18 <create_topic+0x9c>
 8012e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ea0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012ea4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8012ea8:	1c42      	adds	r2, r0, #1
 8012eaa:	2102      	movs	r1, #2
 8012eac:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8012eb0:	f7f9 fdaa 	bl	800ca08 <uxr_object_id>
 8012eb4:	223c      	movs	r2, #60	; 0x3c
 8012eb6:	6120      	str	r0, [r4, #16]
 8012eb8:	4641      	mov	r1, r8
 8012eba:	4638      	mov	r0, r7
 8012ebc:	f7f8 f9a4 	bl	800b208 <generate_topic_name>
 8012ec0:	b1f0      	cbz	r0, 8012f00 <create_topic+0x84>
 8012ec2:	4f14      	ldr	r7, [pc, #80]	; (8012f14 <create_topic+0x98>)
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	2264      	movs	r2, #100	; 0x64
 8012ec8:	4639      	mov	r1, r7
 8012eca:	f7f8 f96d 	bl	800b1a8 <generate_type_name>
 8012ece:	b1b8      	cbz	r0, 8012f00 <create_topic+0x84>
 8012ed0:	6928      	ldr	r0, [r5, #16]
 8012ed2:	2306      	movs	r3, #6
 8012ed4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012ed8:	f8cd 8000 	str.w	r8, [sp]
 8012edc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8012ee0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012ee4:	6811      	ldr	r1, [r2, #0]
 8012ee6:	696b      	ldr	r3, [r5, #20]
 8012ee8:	6922      	ldr	r2, [r4, #16]
 8012eea:	f7f9 fc09 	bl	800c700 <uxr_buffer_create_topic_bin>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	6928      	ldr	r0, [r5, #16]
 8012ef2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012ef6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012efa:	f7f8 f91f 	bl	800b13c <run_xrce_session>
 8012efe:	b918      	cbnz	r0, 8012f08 <create_topic+0x8c>
 8012f00:	4620      	mov	r0, r4
 8012f02:	f7f8 f819 	bl	800af38 <rmw_uxrce_fini_topic_memory>
 8012f06:	2400      	movs	r4, #0
 8012f08:	4620      	mov	r0, r4
 8012f0a:	b004      	add	sp, #16
 8012f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f10:	20012ffc 	.word	0x20012ffc
 8012f14:	200130e8 	.word	0x200130e8
 8012f18:	200130ac 	.word	0x200130ac

08012f1c <destroy_topic>:
 8012f1c:	b538      	push	{r3, r4, r5, lr}
 8012f1e:	6985      	ldr	r5, [r0, #24]
 8012f20:	b1d5      	cbz	r5, 8012f58 <destroy_topic+0x3c>
 8012f22:	4604      	mov	r4, r0
 8012f24:	6928      	ldr	r0, [r5, #16]
 8012f26:	6922      	ldr	r2, [r4, #16]
 8012f28:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012f2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012f30:	6819      	ldr	r1, [r3, #0]
 8012f32:	f7f9 fb67 	bl	800c604 <uxr_buffer_delete_entity>
 8012f36:	4602      	mov	r2, r0
 8012f38:	6928      	ldr	r0, [r5, #16]
 8012f3a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012f3e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012f42:	f7f8 f8fb 	bl	800b13c <run_xrce_session>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	4620      	mov	r0, r4
 8012f4a:	bf14      	ite	ne
 8012f4c:	2400      	movne	r4, #0
 8012f4e:	2402      	moveq	r4, #2
 8012f50:	f7f7 fff2 	bl	800af38 <rmw_uxrce_fini_topic_memory>
 8012f54:	4620      	mov	r0, r4
 8012f56:	bd38      	pop	{r3, r4, r5, pc}
 8012f58:	2401      	movs	r4, #1
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	bd38      	pop	{r3, r4, r5, pc}
 8012f5e:	bf00      	nop

08012f60 <create_node>:
 8012f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f64:	b083      	sub	sp, #12
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d05f      	beq.n	801302a <create_node+0xca>
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	4835      	ldr	r0, [pc, #212]	; (8013044 <create_node+0xe4>)
 8012f6e:	460f      	mov	r7, r1
 8012f70:	4690      	mov	r8, r2
 8012f72:	461d      	mov	r5, r3
 8012f74:	f7ff fcb4 	bl	80128e0 <get_memory>
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	d056      	beq.n	801302a <create_node+0xca>
 8012f7c:	6884      	ldr	r4, [r0, #8]
 8012f7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8012f80:	6123      	str	r3, [r4, #16]
 8012f82:	f7ff fd15 	bl	80129b0 <rmw_get_implementation_identifier>
 8012f86:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012f8a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012f8e:	f8c4 9020 	str.w	r9, [r4, #32]
 8012f92:	4630      	mov	r0, r6
 8012f94:	f7ed f946 	bl	8000224 <strlen>
 8012f98:	1c42      	adds	r2, r0, #1
 8012f9a:	2a3c      	cmp	r2, #60	; 0x3c
 8012f9c:	f104 0518 	add.w	r5, r4, #24
 8012fa0:	d840      	bhi.n	8013024 <create_node+0xc4>
 8012fa2:	4648      	mov	r0, r9
 8012fa4:	4631      	mov	r1, r6
 8012fa6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8012faa:	f003 fcae 	bl	801690a <memcpy>
 8012fae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8012fb2:	4638      	mov	r0, r7
 8012fb4:	f7ed f936 	bl	8000224 <strlen>
 8012fb8:	1c42      	adds	r2, r0, #1
 8012fba:	2a3c      	cmp	r2, #60	; 0x3c
 8012fbc:	d832      	bhi.n	8013024 <create_node+0xc4>
 8012fbe:	4639      	mov	r1, r7
 8012fc0:	4648      	mov	r0, r9
 8012fc2:	f003 fca2 	bl	801690a <memcpy>
 8012fc6:	6923      	ldr	r3, [r4, #16]
 8012fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fcc:	2101      	movs	r1, #1
 8012fce:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8012fd2:	1842      	adds	r2, r0, r1
 8012fd4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8012fd8:	f7f9 fd16 	bl	800ca08 <uxr_object_id>
 8012fdc:	6160      	str	r0, [r4, #20]
 8012fde:	783b      	ldrb	r3, [r7, #0]
 8012fe0:	2b2f      	cmp	r3, #47	; 0x2f
 8012fe2:	d127      	bne.n	8013034 <create_node+0xd4>
 8012fe4:	787b      	ldrb	r3, [r7, #1]
 8012fe6:	bb2b      	cbnz	r3, 8013034 <create_node+0xd4>
 8012fe8:	4a17      	ldr	r2, [pc, #92]	; (8013048 <create_node+0xe8>)
 8012fea:	4818      	ldr	r0, [pc, #96]	; (801304c <create_node+0xec>)
 8012fec:	4633      	mov	r3, r6
 8012fee:	213c      	movs	r1, #60	; 0x3c
 8012ff0:	f003 fae8 	bl	80165c4 <sniprintf>
 8012ff4:	6920      	ldr	r0, [r4, #16]
 8012ff6:	4915      	ldr	r1, [pc, #84]	; (801304c <create_node+0xec>)
 8012ff8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012ffc:	9100      	str	r1, [sp, #0]
 8012ffe:	2106      	movs	r1, #6
 8013000:	9101      	str	r1, [sp, #4]
 8013002:	6811      	ldr	r1, [r2, #0]
 8013004:	6962      	ldr	r2, [r4, #20]
 8013006:	fa1f f388 	uxth.w	r3, r8
 801300a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801300e:	f7f9 fb45 	bl	800c69c <uxr_buffer_create_participant_bin>
 8013012:	4602      	mov	r2, r0
 8013014:	6920      	ldr	r0, [r4, #16]
 8013016:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801301a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801301e:	f7f8 f88d 	bl	800b13c <run_xrce_session>
 8013022:	b918      	cbnz	r0, 801302c <create_node+0xcc>
 8013024:	4628      	mov	r0, r5
 8013026:	f7f7 ff17 	bl	800ae58 <rmw_uxrce_fini_node_memory>
 801302a:	2500      	movs	r5, #0
 801302c:	4628      	mov	r0, r5
 801302e:	b003      	add	sp, #12
 8013030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013034:	4a06      	ldr	r2, [pc, #24]	; (8013050 <create_node+0xf0>)
 8013036:	9600      	str	r6, [sp, #0]
 8013038:	463b      	mov	r3, r7
 801303a:	213c      	movs	r1, #60	; 0x3c
 801303c:	4803      	ldr	r0, [pc, #12]	; (801304c <create_node+0xec>)
 801303e:	f003 fac1 	bl	80165c4 <sniprintf>
 8013042:	e7d7      	b.n	8012ff4 <create_node+0x94>
 8013044:	20012f9c 	.word	0x20012f9c
 8013048:	08017a6c 	.word	0x08017a6c
 801304c:	2001314c 	.word	0x2001314c
 8013050:	08017bfc 	.word	0x08017bfc

08013054 <rmw_create_node>:
 8013054:	b199      	cbz	r1, 801307e <rmw_create_node+0x2a>
 8013056:	780b      	ldrb	r3, [r1, #0]
 8013058:	468c      	mov	ip, r1
 801305a:	b183      	cbz	r3, 801307e <rmw_create_node+0x2a>
 801305c:	b410      	push	{r4}
 801305e:	4614      	mov	r4, r2
 8013060:	b14a      	cbz	r2, 8013076 <rmw_create_node+0x22>
 8013062:	7813      	ldrb	r3, [r2, #0]
 8013064:	b13b      	cbz	r3, 8013076 <rmw_create_node+0x22>
 8013066:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8013068:	4603      	mov	r3, r0
 801306a:	4621      	mov	r1, r4
 801306c:	4660      	mov	r0, ip
 801306e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013072:	f7ff bf75 	b.w	8012f60 <create_node>
 8013076:	2000      	movs	r0, #0
 8013078:	f85d 4b04 	ldr.w	r4, [sp], #4
 801307c:	4770      	bx	lr
 801307e:	2000      	movs	r0, #0
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop

08013084 <rmw_destroy_node>:
 8013084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013086:	b328      	cbz	r0, 80130d4 <rmw_destroy_node+0x50>
 8013088:	4607      	mov	r7, r0
 801308a:	6800      	ldr	r0, [r0, #0]
 801308c:	b120      	cbz	r0, 8013098 <rmw_destroy_node+0x14>
 801308e:	4b36      	ldr	r3, [pc, #216]	; (8013168 <rmw_destroy_node+0xe4>)
 8013090:	6819      	ldr	r1, [r3, #0]
 8013092:	f7ed f8bd 	bl	8000210 <strcmp>
 8013096:	b9e8      	cbnz	r0, 80130d4 <rmw_destroy_node+0x50>
 8013098:	687d      	ldr	r5, [r7, #4]
 801309a:	b1dd      	cbz	r5, 80130d4 <rmw_destroy_node+0x50>
 801309c:	4b33      	ldr	r3, [pc, #204]	; (801316c <rmw_destroy_node+0xe8>)
 801309e:	681c      	ldr	r4, [r3, #0]
 80130a0:	2c00      	cmp	r4, #0
 80130a2:	d05f      	beq.n	8013164 <rmw_destroy_node+0xe0>
 80130a4:	2600      	movs	r6, #0
 80130a6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80130aa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80130ae:	429d      	cmp	r5, r3
 80130b0:	d013      	beq.n	80130da <rmw_destroy_node+0x56>
 80130b2:	2c00      	cmp	r4, #0
 80130b4:	d1f7      	bne.n	80130a6 <rmw_destroy_node+0x22>
 80130b6:	4b2e      	ldr	r3, [pc, #184]	; (8013170 <rmw_destroy_node+0xec>)
 80130b8:	681c      	ldr	r4, [r3, #0]
 80130ba:	b1c4      	cbz	r4, 80130ee <rmw_destroy_node+0x6a>
 80130bc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80130c0:	6a0b      	ldr	r3, [r1, #32]
 80130c2:	429d      	cmp	r5, r3
 80130c4:	d1f9      	bne.n	80130ba <rmw_destroy_node+0x36>
 80130c6:	317c      	adds	r1, #124	; 0x7c
 80130c8:	4638      	mov	r0, r7
 80130ca:	f000 fae5 	bl	8013698 <rmw_destroy_subscription>
 80130ce:	2801      	cmp	r0, #1
 80130d0:	4606      	mov	r6, r0
 80130d2:	d1f2      	bne.n	80130ba <rmw_destroy_node+0x36>
 80130d4:	2601      	movs	r6, #1
 80130d6:	4630      	mov	r0, r6
 80130d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130da:	3184      	adds	r1, #132	; 0x84
 80130dc:	4638      	mov	r0, r7
 80130de:	f7f7 fd03 	bl	800aae8 <rmw_destroy_publisher>
 80130e2:	2801      	cmp	r0, #1
 80130e4:	4606      	mov	r6, r0
 80130e6:	d0f5      	beq.n	80130d4 <rmw_destroy_node+0x50>
 80130e8:	2c00      	cmp	r4, #0
 80130ea:	d1dc      	bne.n	80130a6 <rmw_destroy_node+0x22>
 80130ec:	e7e3      	b.n	80130b6 <rmw_destroy_node+0x32>
 80130ee:	4b21      	ldr	r3, [pc, #132]	; (8013174 <rmw_destroy_node+0xf0>)
 80130f0:	681c      	ldr	r4, [r3, #0]
 80130f2:	b16c      	cbz	r4, 8013110 <rmw_destroy_node+0x8c>
 80130f4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80130f8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80130fa:	429d      	cmp	r5, r3
 80130fc:	d1f9      	bne.n	80130f2 <rmw_destroy_node+0x6e>
 80130fe:	317c      	adds	r1, #124	; 0x7c
 8013100:	4638      	mov	r0, r7
 8013102:	f000 f993 	bl	801342c <rmw_destroy_service>
 8013106:	2801      	cmp	r0, #1
 8013108:	4606      	mov	r6, r0
 801310a:	d0e3      	beq.n	80130d4 <rmw_destroy_node+0x50>
 801310c:	2c00      	cmp	r4, #0
 801310e:	d1f1      	bne.n	80130f4 <rmw_destroy_node+0x70>
 8013110:	4b19      	ldr	r3, [pc, #100]	; (8013178 <rmw_destroy_node+0xf4>)
 8013112:	681c      	ldr	r4, [r3, #0]
 8013114:	b16c      	cbz	r4, 8013132 <rmw_destroy_node+0xae>
 8013116:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801311a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801311c:	429d      	cmp	r5, r3
 801311e:	d1f9      	bne.n	8013114 <rmw_destroy_node+0x90>
 8013120:	317c      	adds	r1, #124	; 0x7c
 8013122:	4638      	mov	r0, r7
 8013124:	f7ff fc00 	bl	8012928 <rmw_destroy_client>
 8013128:	2801      	cmp	r0, #1
 801312a:	4606      	mov	r6, r0
 801312c:	d0d2      	beq.n	80130d4 <rmw_destroy_node+0x50>
 801312e:	2c00      	cmp	r4, #0
 8013130:	d1f1      	bne.n	8013116 <rmw_destroy_node+0x92>
 8013132:	6928      	ldr	r0, [r5, #16]
 8013134:	696a      	ldr	r2, [r5, #20]
 8013136:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801313a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801313e:	6819      	ldr	r1, [r3, #0]
 8013140:	f7f9 fa60 	bl	800c604 <uxr_buffer_delete_entity>
 8013144:	4602      	mov	r2, r0
 8013146:	6928      	ldr	r0, [r5, #16]
 8013148:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801314c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013150:	f7f7 fff4 	bl	800b13c <run_xrce_session>
 8013154:	2800      	cmp	r0, #0
 8013156:	bf08      	it	eq
 8013158:	2602      	moveq	r6, #2
 801315a:	4638      	mov	r0, r7
 801315c:	f7f7 fe7c 	bl	800ae58 <rmw_uxrce_fini_node_memory>
 8013160:	4630      	mov	r0, r6
 8013162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013164:	4626      	mov	r6, r4
 8013166:	e7a6      	b.n	80130b6 <rmw_destroy_node+0x32>
 8013168:	0801818c 	.word	0x0801818c
 801316c:	20012fac 	.word	0x20012fac
 8013170:	20012fec 	.word	0x20012fec
 8013174:	20012fbc 	.word	0x20012fbc
 8013178:	2000e6d0 	.word	0x2000e6d0

0801317c <rmw_node_get_graph_guard_condition>:
 801317c:	6843      	ldr	r3, [r0, #4]
 801317e:	6918      	ldr	r0, [r3, #16]
 8013180:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8013184:	4770      	bx	lr
 8013186:	bf00      	nop

08013188 <rmw_send_request>:
 8013188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801318c:	4604      	mov	r4, r0
 801318e:	6800      	ldr	r0, [r0, #0]
 8013190:	b08b      	sub	sp, #44	; 0x2c
 8013192:	460e      	mov	r6, r1
 8013194:	4615      	mov	r5, r2
 8013196:	b128      	cbz	r0, 80131a4 <rmw_send_request+0x1c>
 8013198:	4b21      	ldr	r3, [pc, #132]	; (8013220 <rmw_send_request+0x98>)
 801319a:	6819      	ldr	r1, [r3, #0]
 801319c:	f7ed f838 	bl	8000210 <strcmp>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	d139      	bne.n	8013218 <rmw_send_request+0x90>
 80131a4:	6864      	ldr	r4, [r4, #4]
 80131a6:	6963      	ldr	r3, [r4, #20]
 80131a8:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 80131ac:	689b      	ldr	r3, [r3, #8]
 80131ae:	4798      	blx	r3
 80131b0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80131b4:	4630      	mov	r0, r6
 80131b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80131ba:	4798      	blx	r3
 80131bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80131c0:	9000      	str	r0, [sp, #0]
 80131c2:	6922      	ldr	r2, [r4, #16]
 80131c4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80131c6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80131ca:	ab02      	add	r3, sp, #8
 80131cc:	f7fa ff18 	bl	800e000 <uxr_prepare_output_stream>
 80131d0:	2700      	movs	r7, #0
 80131d2:	6028      	str	r0, [r5, #0]
 80131d4:	606f      	str	r7, [r5, #4]
 80131d6:	b198      	cbz	r0, 8013200 <rmw_send_request+0x78>
 80131d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80131dc:	a902      	add	r1, sp, #8
 80131de:	4630      	mov	r0, r6
 80131e0:	4798      	blx	r3
 80131e2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80131e6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80131ea:	2b01      	cmp	r3, #1
 80131ec:	d00c      	beq.n	8013208 <rmw_send_request+0x80>
 80131ee:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80131f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80131f4:	f7fa f918 	bl	800d428 <uxr_run_session_until_confirm_delivery>
 80131f8:	4638      	mov	r0, r7
 80131fa:	b00b      	add	sp, #44	; 0x2c
 80131fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013200:	2001      	movs	r0, #1
 8013202:	b00b      	add	sp, #44	; 0x2c
 8013204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013208:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801320c:	f7f9 fd4c 	bl	800cca8 <uxr_flash_output_streams>
 8013210:	4638      	mov	r0, r7
 8013212:	b00b      	add	sp, #44	; 0x2c
 8013214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013218:	200c      	movs	r0, #12
 801321a:	b00b      	add	sp, #44	; 0x2c
 801321c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013220:	0801818c 	.word	0x0801818c

08013224 <rmw_take_request>:
 8013224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013228:	4605      	mov	r5, r0
 801322a:	6800      	ldr	r0, [r0, #0]
 801322c:	b089      	sub	sp, #36	; 0x24
 801322e:	460c      	mov	r4, r1
 8013230:	4690      	mov	r8, r2
 8013232:	461e      	mov	r6, r3
 8013234:	b128      	cbz	r0, 8013242 <rmw_take_request+0x1e>
 8013236:	4b28      	ldr	r3, [pc, #160]	; (80132d8 <rmw_take_request+0xb4>)
 8013238:	6819      	ldr	r1, [r3, #0]
 801323a:	f7ec ffe9 	bl	8000210 <strcmp>
 801323e:	2800      	cmp	r0, #0
 8013240:	d146      	bne.n	80132d0 <rmw_take_request+0xac>
 8013242:	b10e      	cbz	r6, 8013248 <rmw_take_request+0x24>
 8013244:	2300      	movs	r3, #0
 8013246:	7033      	strb	r3, [r6, #0]
 8013248:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801324c:	f7f7 fef8 	bl	800b040 <rmw_uxrce_clean_expired_static_input_buffer>
 8013250:	4648      	mov	r0, r9
 8013252:	f7f7 fecd 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013256:	4607      	mov	r7, r0
 8013258:	b3b0      	cbz	r0, 80132c8 <rmw_take_request+0xa4>
 801325a:	6885      	ldr	r5, [r0, #8]
 801325c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 8013260:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 8013264:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013268:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801326c:	7423      	strb	r3, [r4, #16]
 801326e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8013272:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8013276:	74e2      	strb	r2, [r4, #19]
 8013278:	f8a4 3011 	strh.w	r3, [r4, #17]
 801327c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8013280:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8013284:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8013288:	61e1      	str	r1, [r4, #28]
 801328a:	6162      	str	r2, [r4, #20]
 801328c:	61a3      	str	r3, [r4, #24]
 801328e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013292:	689b      	ldr	r3, [r3, #8]
 8013294:	4798      	blx	r3
 8013296:	6844      	ldr	r4, [r0, #4]
 8013298:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801329c:	f105 0110 	add.w	r1, r5, #16
 80132a0:	4668      	mov	r0, sp
 80132a2:	f7f9 f93f 	bl	800c524 <ucdr_init_buffer>
 80132a6:	68e3      	ldr	r3, [r4, #12]
 80132a8:	4641      	mov	r1, r8
 80132aa:	4668      	mov	r0, sp
 80132ac:	4798      	blx	r3
 80132ae:	4639      	mov	r1, r7
 80132b0:	4604      	mov	r4, r0
 80132b2:	480a      	ldr	r0, [pc, #40]	; (80132dc <rmw_take_request+0xb8>)
 80132b4:	f7ff fb24 	bl	8012900 <put_memory>
 80132b8:	b106      	cbz	r6, 80132bc <rmw_take_request+0x98>
 80132ba:	7034      	strb	r4, [r6, #0]
 80132bc:	f084 0001 	eor.w	r0, r4, #1
 80132c0:	b2c0      	uxtb	r0, r0
 80132c2:	b009      	add	sp, #36	; 0x24
 80132c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132c8:	2001      	movs	r0, #1
 80132ca:	b009      	add	sp, #36	; 0x24
 80132cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132d0:	200c      	movs	r0, #12
 80132d2:	b009      	add	sp, #36	; 0x24
 80132d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132d8:	0801818c 	.word	0x0801818c
 80132dc:	20012fdc 	.word	0x20012fdc

080132e0 <rmw_send_response>:
 80132e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132e2:	4605      	mov	r5, r0
 80132e4:	6800      	ldr	r0, [r0, #0]
 80132e6:	b091      	sub	sp, #68	; 0x44
 80132e8:	460c      	mov	r4, r1
 80132ea:	4616      	mov	r6, r2
 80132ec:	b128      	cbz	r0, 80132fa <rmw_send_response+0x1a>
 80132ee:	4b29      	ldr	r3, [pc, #164]	; (8013394 <rmw_send_response+0xb4>)
 80132f0:	6819      	ldr	r1, [r3, #0]
 80132f2:	f7ec ff8d 	bl	8000210 <strcmp>
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d141      	bne.n	801337e <rmw_send_response+0x9e>
 80132fa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80132fe:	9306      	str	r3, [sp, #24]
 8013300:	4623      	mov	r3, r4
 8013302:	9207      	str	r2, [sp, #28]
 8013304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013308:	686d      	ldr	r5, [r5, #4]
 801330a:	789b      	ldrb	r3, [r3, #2]
 801330c:	68a1      	ldr	r1, [r4, #8]
 801330e:	f88d 2017 	strb.w	r2, [sp, #23]
 8013312:	f88d 3016 	strb.w	r3, [sp, #22]
 8013316:	68e2      	ldr	r2, [r4, #12]
 8013318:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801331c:	6860      	ldr	r0, [r4, #4]
 801331e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013322:	ab02      	add	r3, sp, #8
 8013324:	c307      	stmia	r3!, {r0, r1, r2}
 8013326:	696b      	ldr	r3, [r5, #20]
 8013328:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	4798      	blx	r3
 801332e:	6844      	ldr	r4, [r0, #4]
 8013330:	4630      	mov	r0, r6
 8013332:	6923      	ldr	r3, [r4, #16]
 8013334:	4798      	blx	r3
 8013336:	f100 0318 	add.w	r3, r0, #24
 801333a:	6938      	ldr	r0, [r7, #16]
 801333c:	9300      	str	r3, [sp, #0]
 801333e:	692a      	ldr	r2, [r5, #16]
 8013340:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013342:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013346:	ab08      	add	r3, sp, #32
 8013348:	f7fa fe5a 	bl	800e000 <uxr_prepare_output_stream>
 801334c:	b910      	cbnz	r0, 8013354 <rmw_send_response+0x74>
 801334e:	2001      	movs	r0, #1
 8013350:	b011      	add	sp, #68	; 0x44
 8013352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013354:	a902      	add	r1, sp, #8
 8013356:	a808      	add	r0, sp, #32
 8013358:	f7fb ff8a 	bl	800f270 <uxr_serialize_SampleIdentity>
 801335c:	68a3      	ldr	r3, [r4, #8]
 801335e:	a908      	add	r1, sp, #32
 8013360:	4630      	mov	r0, r6
 8013362:	4798      	blx	r3
 8013364:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8013368:	6938      	ldr	r0, [r7, #16]
 801336a:	2b01      	cmp	r3, #1
 801336c:	d00a      	beq.n	8013384 <rmw_send_response+0xa4>
 801336e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8013370:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013374:	f7fa f858 	bl	800d428 <uxr_run_session_until_confirm_delivery>
 8013378:	2000      	movs	r0, #0
 801337a:	b011      	add	sp, #68	; 0x44
 801337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801337e:	200c      	movs	r0, #12
 8013380:	b011      	add	sp, #68	; 0x44
 8013382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013384:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013388:	f7f9 fc8e 	bl	800cca8 <uxr_flash_output_streams>
 801338c:	2000      	movs	r0, #0
 801338e:	b011      	add	sp, #68	; 0x44
 8013390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013392:	bf00      	nop
 8013394:	0801818c 	.word	0x0801818c

08013398 <rmw_take_response>:
 8013398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801339c:	4604      	mov	r4, r0
 801339e:	6800      	ldr	r0, [r0, #0]
 80133a0:	b088      	sub	sp, #32
 80133a2:	4688      	mov	r8, r1
 80133a4:	4617      	mov	r7, r2
 80133a6:	461d      	mov	r5, r3
 80133a8:	b120      	cbz	r0, 80133b4 <rmw_take_response+0x1c>
 80133aa:	4b1e      	ldr	r3, [pc, #120]	; (8013424 <rmw_take_response+0x8c>)
 80133ac:	6819      	ldr	r1, [r3, #0]
 80133ae:	f7ec ff2f 	bl	8000210 <strcmp>
 80133b2:	bb78      	cbnz	r0, 8013414 <rmw_take_response+0x7c>
 80133b4:	b10d      	cbz	r5, 80133ba <rmw_take_response+0x22>
 80133b6:	2300      	movs	r3, #0
 80133b8:	702b      	strb	r3, [r5, #0]
 80133ba:	6864      	ldr	r4, [r4, #4]
 80133bc:	f7f7 fe40 	bl	800b040 <rmw_uxrce_clean_expired_static_input_buffer>
 80133c0:	4620      	mov	r0, r4
 80133c2:	f7f7 fe15 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80133c6:	4606      	mov	r6, r0
 80133c8:	b340      	cbz	r0, 801341c <rmw_take_response+0x84>
 80133ca:	6963      	ldr	r3, [r4, #20]
 80133cc:	6884      	ldr	r4, [r0, #8]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80133d4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80133d8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80133dc:	4798      	blx	r3
 80133de:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80133e2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80133e6:	f104 0110 	add.w	r1, r4, #16
 80133ea:	4668      	mov	r0, sp
 80133ec:	f7f9 f89a 	bl	800c524 <ucdr_init_buffer>
 80133f0:	4639      	mov	r1, r7
 80133f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80133f6:	4668      	mov	r0, sp
 80133f8:	4798      	blx	r3
 80133fa:	4631      	mov	r1, r6
 80133fc:	4604      	mov	r4, r0
 80133fe:	480a      	ldr	r0, [pc, #40]	; (8013428 <rmw_take_response+0x90>)
 8013400:	f7ff fa7e 	bl	8012900 <put_memory>
 8013404:	b105      	cbz	r5, 8013408 <rmw_take_response+0x70>
 8013406:	702c      	strb	r4, [r5, #0]
 8013408:	f084 0001 	eor.w	r0, r4, #1
 801340c:	b2c0      	uxtb	r0, r0
 801340e:	b008      	add	sp, #32
 8013410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013414:	200c      	movs	r0, #12
 8013416:	b008      	add	sp, #32
 8013418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801341c:	2001      	movs	r0, #1
 801341e:	b008      	add	sp, #32
 8013420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013424:	0801818c 	.word	0x0801818c
 8013428:	20012fdc 	.word	0x20012fdc

0801342c <rmw_destroy_service>:
 801342c:	b570      	push	{r4, r5, r6, lr}
 801342e:	b128      	cbz	r0, 801343c <rmw_destroy_service+0x10>
 8013430:	4604      	mov	r4, r0
 8013432:	6800      	ldr	r0, [r0, #0]
 8013434:	460d      	mov	r5, r1
 8013436:	f7f7 ff01 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 801343a:	b910      	cbnz	r0, 8013442 <rmw_destroy_service+0x16>
 801343c:	2401      	movs	r4, #1
 801343e:	4620      	mov	r0, r4
 8013440:	bd70      	pop	{r4, r5, r6, pc}
 8013442:	6863      	ldr	r3, [r4, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d0f9      	beq.n	801343c <rmw_destroy_service+0x10>
 8013448:	2d00      	cmp	r5, #0
 801344a:	d0f7      	beq.n	801343c <rmw_destroy_service+0x10>
 801344c:	6828      	ldr	r0, [r5, #0]
 801344e:	f7f7 fef5 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 8013452:	2800      	cmp	r0, #0
 8013454:	d0f2      	beq.n	801343c <rmw_destroy_service+0x10>
 8013456:	686e      	ldr	r6, [r5, #4]
 8013458:	2e00      	cmp	r6, #0
 801345a:	d0ef      	beq.n	801343c <rmw_destroy_service+0x10>
 801345c:	6864      	ldr	r4, [r4, #4]
 801345e:	6932      	ldr	r2, [r6, #16]
 8013460:	6920      	ldr	r0, [r4, #16]
 8013462:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013466:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801346a:	6819      	ldr	r1, [r3, #0]
 801346c:	f001 fb98 	bl	8014ba0 <uxr_buffer_cancel_data>
 8013470:	4602      	mov	r2, r0
 8013472:	6920      	ldr	r0, [r4, #16]
 8013474:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013478:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801347c:	f7f7 fe5e 	bl	800b13c <run_xrce_session>
 8013480:	6920      	ldr	r0, [r4, #16]
 8013482:	6932      	ldr	r2, [r6, #16]
 8013484:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013488:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801348c:	6819      	ldr	r1, [r3, #0]
 801348e:	f7f9 f8b9 	bl	800c604 <uxr_buffer_delete_entity>
 8013492:	4602      	mov	r2, r0
 8013494:	6920      	ldr	r0, [r4, #16]
 8013496:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801349a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801349e:	f7f7 fe4d 	bl	800b13c <run_xrce_session>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	4628      	mov	r0, r5
 80134a6:	bf14      	ite	ne
 80134a8:	2400      	movne	r4, #0
 80134aa:	2402      	moveq	r4, #2
 80134ac:	f7f7 fd18 	bl	800aee0 <rmw_uxrce_fini_service_memory>
 80134b0:	e7c5      	b.n	801343e <rmw_destroy_service+0x12>
 80134b2:	bf00      	nop

080134b4 <rmw_create_subscription>:
 80134b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b8:	b08d      	sub	sp, #52	; 0x34
 80134ba:	2800      	cmp	r0, #0
 80134bc:	f000 80d1 	beq.w	8013662 <rmw_create_subscription+0x1ae>
 80134c0:	460e      	mov	r6, r1
 80134c2:	2900      	cmp	r1, #0
 80134c4:	f000 80cd 	beq.w	8013662 <rmw_create_subscription+0x1ae>
 80134c8:	4604      	mov	r4, r0
 80134ca:	6800      	ldr	r0, [r0, #0]
 80134cc:	4615      	mov	r5, r2
 80134ce:	4698      	mov	r8, r3
 80134d0:	f7f7 feb4 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 80134d4:	2800      	cmp	r0, #0
 80134d6:	f000 80c4 	beq.w	8013662 <rmw_create_subscription+0x1ae>
 80134da:	2d00      	cmp	r5, #0
 80134dc:	f000 80c1 	beq.w	8013662 <rmw_create_subscription+0x1ae>
 80134e0:	782b      	ldrb	r3, [r5, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	f000 80bd 	beq.w	8013662 <rmw_create_subscription+0x1ae>
 80134e8:	f1b8 0f00 	cmp.w	r8, #0
 80134ec:	f000 80b9 	beq.w	8013662 <rmw_create_subscription+0x1ae>
 80134f0:	485e      	ldr	r0, [pc, #376]	; (801366c <rmw_create_subscription+0x1b8>)
 80134f2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80134f6:	f7ff f9f3 	bl	80128e0 <get_memory>
 80134fa:	4604      	mov	r4, r0
 80134fc:	2800      	cmp	r0, #0
 80134fe:	f000 80b1 	beq.w	8013664 <rmw_create_subscription+0x1b0>
 8013502:	6887      	ldr	r7, [r0, #8]
 8013504:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8013508:	f7ff fa52 	bl	80129b0 <rmw_get_implementation_identifier>
 801350c:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8013510:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013512:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8013516:	4628      	mov	r0, r5
 8013518:	f7ec fe84 	bl	8000224 <strlen>
 801351c:	3001      	adds	r0, #1
 801351e:	283c      	cmp	r0, #60	; 0x3c
 8013520:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8013524:	f200 8096 	bhi.w	8013654 <rmw_create_subscription+0x1a0>
 8013528:	4a51      	ldr	r2, [pc, #324]	; (8013670 <rmw_create_subscription+0x1bc>)
 801352a:	462b      	mov	r3, r5
 801352c:	213c      	movs	r1, #60	; 0x3c
 801352e:	4650      	mov	r0, sl
 8013530:	f003 f848 	bl	80165c4 <sniprintf>
 8013534:	4641      	mov	r1, r8
 8013536:	f8c7 9020 	str.w	r9, [r7, #32]
 801353a:	2250      	movs	r2, #80	; 0x50
 801353c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8013540:	f003 f9e3 	bl	801690a <memcpy>
 8013544:	494b      	ldr	r1, [pc, #300]	; (8013674 <rmw_create_subscription+0x1c0>)
 8013546:	4630      	mov	r0, r6
 8013548:	f7f7 fe86 	bl	800b258 <get_message_typesupport_handle>
 801354c:	2800      	cmp	r0, #0
 801354e:	f000 8081 	beq.w	8013654 <rmw_create_subscription+0x1a0>
 8013552:	6842      	ldr	r2, [r0, #4]
 8013554:	61ba      	str	r2, [r7, #24]
 8013556:	2a00      	cmp	r2, #0
 8013558:	d07c      	beq.n	8013654 <rmw_create_subscription+0x1a0>
 801355a:	4629      	mov	r1, r5
 801355c:	4643      	mov	r3, r8
 801355e:	4648      	mov	r0, r9
 8013560:	f7ff fc8c 	bl	8012e7c <create_topic>
 8013564:	61f8      	str	r0, [r7, #28]
 8013566:	2800      	cmp	r0, #0
 8013568:	d078      	beq.n	801365c <rmw_create_subscription+0x1a8>
 801356a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013572:	2104      	movs	r1, #4
 8013574:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8013578:	1c42      	adds	r2, r0, #1
 801357a:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801357e:	f7f9 fa43 	bl	800ca08 <uxr_object_id>
 8013582:	6138      	str	r0, [r7, #16]
 8013584:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013588:	2506      	movs	r5, #6
 801358a:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801358e:	9500      	str	r5, [sp, #0]
 8013590:	6819      	ldr	r1, [r3, #0]
 8013592:	693a      	ldr	r2, [r7, #16]
 8013594:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013598:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801359c:	f7f9 f916 	bl	800c7cc <uxr_buffer_create_subscriber_bin>
 80135a0:	4602      	mov	r2, r0
 80135a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80135a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80135aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80135ae:	f7f7 fdc5 	bl	800b13c <run_xrce_session>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d04e      	beq.n	8013654 <rmw_create_subscription+0x1a0>
 80135b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135be:	4629      	mov	r1, r5
 80135c0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 80135c4:	1c42      	adds	r2, r0, #1
 80135c6:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 80135ca:	f7f9 fa1d 	bl	800ca08 <uxr_object_id>
 80135ce:	ae08      	add	r6, sp, #32
 80135d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	6178      	str	r0, [r7, #20]
 80135d8:	4641      	mov	r1, r8
 80135da:	4630      	mov	r0, r6
 80135dc:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80135e0:	9305      	str	r3, [sp, #20]
 80135e2:	f7f7 fdc7 	bl	800b174 <convert_qos_profile>
 80135e6:	9503      	str	r5, [sp, #12]
 80135e8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80135ec:	9b05      	ldr	r3, [sp, #20]
 80135ee:	9001      	str	r0, [sp, #4]
 80135f0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80135f4:	691b      	ldr	r3, [r3, #16]
 80135f6:	9300      	str	r3, [sp, #0]
 80135f8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80135fc:	f8db 1000 	ldr.w	r1, [fp]
 8013600:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8013604:	f7f9 f988 	bl	800c918 <uxr_buffer_create_datareader_bin>
 8013608:	4602      	mov	r2, r0
 801360a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801360e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013612:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013616:	f7f7 fd91 	bl	800b13c <run_xrce_session>
 801361a:	b1d8      	cbz	r0, 8013654 <rmw_create_subscription+0x1a0>
 801361c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8013620:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013624:	2b02      	cmp	r3, #2
 8013626:	bf0c      	ite	eq
 8013628:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801362c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8013630:	9307      	str	r3, [sp, #28]
 8013632:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013636:	2200      	movs	r2, #0
 8013638:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 801363c:	ab0a      	add	r3, sp, #40	; 0x28
 801363e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	697a      	ldr	r2, [r7, #20]
 8013646:	9b07      	ldr	r3, [sp, #28]
 8013648:	6809      	ldr	r1, [r1, #0]
 801364a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801364e:	f001 fa6d 	bl	8014b2c <uxr_buffer_request_data>
 8013652:	e007      	b.n	8013664 <rmw_create_subscription+0x1b0>
 8013654:	69f8      	ldr	r0, [r7, #28]
 8013656:	b108      	cbz	r0, 801365c <rmw_create_subscription+0x1a8>
 8013658:	f7f7 fc6e 	bl	800af38 <rmw_uxrce_fini_topic_memory>
 801365c:	4620      	mov	r0, r4
 801365e:	f7f7 fc29 	bl	800aeb4 <rmw_uxrce_fini_subscription_memory>
 8013662:	2400      	movs	r4, #0
 8013664:	4620      	mov	r0, r4
 8013666:	b00d      	add	sp, #52	; 0x34
 8013668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801366c:	20012fec 	.word	0x20012fec
 8013670:	08017a6c 	.word	0x08017a6c
 8013674:	08017a38 	.word	0x08017a38

08013678 <rmw_subscription_get_actual_qos>:
 8013678:	b150      	cbz	r0, 8013690 <rmw_subscription_get_actual_qos+0x18>
 801367a:	b508      	push	{r3, lr}
 801367c:	460b      	mov	r3, r1
 801367e:	b149      	cbz	r1, 8013694 <rmw_subscription_get_actual_qos+0x1c>
 8013680:	6841      	ldr	r1, [r0, #4]
 8013682:	2250      	movs	r2, #80	; 0x50
 8013684:	3128      	adds	r1, #40	; 0x28
 8013686:	4618      	mov	r0, r3
 8013688:	f003 f93f 	bl	801690a <memcpy>
 801368c:	2000      	movs	r0, #0
 801368e:	bd08      	pop	{r3, pc}
 8013690:	200b      	movs	r0, #11
 8013692:	4770      	bx	lr
 8013694:	200b      	movs	r0, #11
 8013696:	bd08      	pop	{r3, pc}

08013698 <rmw_destroy_subscription>:
 8013698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801369a:	b128      	cbz	r0, 80136a8 <rmw_destroy_subscription+0x10>
 801369c:	4604      	mov	r4, r0
 801369e:	6800      	ldr	r0, [r0, #0]
 80136a0:	460d      	mov	r5, r1
 80136a2:	f7f7 fdcb 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 80136a6:	b910      	cbnz	r0, 80136ae <rmw_destroy_subscription+0x16>
 80136a8:	2401      	movs	r4, #1
 80136aa:	4620      	mov	r0, r4
 80136ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136ae:	6863      	ldr	r3, [r4, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d0f9      	beq.n	80136a8 <rmw_destroy_subscription+0x10>
 80136b4:	2d00      	cmp	r5, #0
 80136b6:	d0f7      	beq.n	80136a8 <rmw_destroy_subscription+0x10>
 80136b8:	6828      	ldr	r0, [r5, #0]
 80136ba:	f7f7 fdbf 	bl	800b23c <is_uxrce_rmw_identifier_valid>
 80136be:	2800      	cmp	r0, #0
 80136c0:	d0f2      	beq.n	80136a8 <rmw_destroy_subscription+0x10>
 80136c2:	686c      	ldr	r4, [r5, #4]
 80136c4:	2c00      	cmp	r4, #0
 80136c6:	d0ef      	beq.n	80136a8 <rmw_destroy_subscription+0x10>
 80136c8:	6a26      	ldr	r6, [r4, #32]
 80136ca:	6962      	ldr	r2, [r4, #20]
 80136cc:	6930      	ldr	r0, [r6, #16]
 80136ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80136d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80136d6:	6819      	ldr	r1, [r3, #0]
 80136d8:	f001 fa62 	bl	8014ba0 <uxr_buffer_cancel_data>
 80136dc:	4602      	mov	r2, r0
 80136de:	6930      	ldr	r0, [r6, #16]
 80136e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80136e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80136e8:	f7f7 fd28 	bl	800b13c <run_xrce_session>
 80136ec:	69e0      	ldr	r0, [r4, #28]
 80136ee:	f7ff fc15 	bl	8012f1c <destroy_topic>
 80136f2:	6a23      	ldr	r3, [r4, #32]
 80136f4:	6962      	ldr	r2, [r4, #20]
 80136f6:	6918      	ldr	r0, [r3, #16]
 80136f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80136fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013700:	6819      	ldr	r1, [r3, #0]
 8013702:	f7f8 ff7f 	bl	800c604 <uxr_buffer_delete_entity>
 8013706:	6a23      	ldr	r3, [r4, #32]
 8013708:	6922      	ldr	r2, [r4, #16]
 801370a:	691b      	ldr	r3, [r3, #16]
 801370c:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8013710:	4604      	mov	r4, r0
 8013712:	6809      	ldr	r1, [r1, #0]
 8013714:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8013718:	f7f8 ff74 	bl	800c604 <uxr_buffer_delete_entity>
 801371c:	6937      	ldr	r7, [r6, #16]
 801371e:	4622      	mov	r2, r4
 8013720:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8013724:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8013728:	4604      	mov	r4, r0
 801372a:	4638      	mov	r0, r7
 801372c:	f7f7 fd06 	bl	800b13c <run_xrce_session>
 8013730:	6936      	ldr	r6, [r6, #16]
 8013732:	4622      	mov	r2, r4
 8013734:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8013738:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 801373c:	4604      	mov	r4, r0
 801373e:	4630      	mov	r0, r6
 8013740:	f7f7 fcfc 	bl	800b13c <run_xrce_session>
 8013744:	b12c      	cbz	r4, 8013752 <rmw_destroy_subscription+0xba>
 8013746:	b120      	cbz	r0, 8013752 <rmw_destroy_subscription+0xba>
 8013748:	2400      	movs	r4, #0
 801374a:	4628      	mov	r0, r5
 801374c:	f7f7 fbb2 	bl	800aeb4 <rmw_uxrce_fini_subscription_memory>
 8013750:	e7ab      	b.n	80136aa <rmw_destroy_subscription+0x12>
 8013752:	2402      	movs	r4, #2
 8013754:	e7f9      	b.n	801374a <rmw_destroy_subscription+0xb2>
 8013756:	bf00      	nop

08013758 <rmw_take_with_info>:
 8013758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801375a:	4604      	mov	r4, r0
 801375c:	6800      	ldr	r0, [r0, #0]
 801375e:	b089      	sub	sp, #36	; 0x24
 8013760:	460f      	mov	r7, r1
 8013762:	4615      	mov	r5, r2
 8013764:	b128      	cbz	r0, 8013772 <rmw_take_with_info+0x1a>
 8013766:	4b24      	ldr	r3, [pc, #144]	; (80137f8 <rmw_take_with_info+0xa0>)
 8013768:	6819      	ldr	r1, [r3, #0]
 801376a:	f7ec fd51 	bl	8000210 <strcmp>
 801376e:	2800      	cmp	r0, #0
 8013770:	d13e      	bne.n	80137f0 <rmw_take_with_info+0x98>
 8013772:	b305      	cbz	r5, 80137b6 <rmw_take_with_info+0x5e>
 8013774:	6864      	ldr	r4, [r4, #4]
 8013776:	2300      	movs	r3, #0
 8013778:	702b      	strb	r3, [r5, #0]
 801377a:	f7f7 fc61 	bl	800b040 <rmw_uxrce_clean_expired_static_input_buffer>
 801377e:	4620      	mov	r0, r4
 8013780:	f7f7 fc36 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013784:	4606      	mov	r6, r0
 8013786:	b1f0      	cbz	r0, 80137c6 <rmw_take_with_info+0x6e>
 8013788:	6881      	ldr	r1, [r0, #8]
 801378a:	4668      	mov	r0, sp
 801378c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013790:	3110      	adds	r1, #16
 8013792:	f7f8 fec7 	bl	800c524 <ucdr_init_buffer>
 8013796:	69a3      	ldr	r3, [r4, #24]
 8013798:	4639      	mov	r1, r7
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	4668      	mov	r0, sp
 801379e:	4798      	blx	r3
 80137a0:	4631      	mov	r1, r6
 80137a2:	4604      	mov	r4, r0
 80137a4:	4815      	ldr	r0, [pc, #84]	; (80137fc <rmw_take_with_info+0xa4>)
 80137a6:	f7ff f8ab 	bl	8012900 <put_memory>
 80137aa:	702c      	strb	r4, [r5, #0]
 80137ac:	f084 0001 	eor.w	r0, r4, #1
 80137b0:	b2c0      	uxtb	r0, r0
 80137b2:	b009      	add	sp, #36	; 0x24
 80137b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137b6:	6864      	ldr	r4, [r4, #4]
 80137b8:	f7f7 fc42 	bl	800b040 <rmw_uxrce_clean_expired_static_input_buffer>
 80137bc:	4620      	mov	r0, r4
 80137be:	f7f7 fc17 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137c2:	4605      	mov	r5, r0
 80137c4:	b910      	cbnz	r0, 80137cc <rmw_take_with_info+0x74>
 80137c6:	2001      	movs	r0, #1
 80137c8:	b009      	add	sp, #36	; 0x24
 80137ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137cc:	68a9      	ldr	r1, [r5, #8]
 80137ce:	4668      	mov	r0, sp
 80137d0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80137d4:	3110      	adds	r1, #16
 80137d6:	f7f8 fea5 	bl	800c524 <ucdr_init_buffer>
 80137da:	69a3      	ldr	r3, [r4, #24]
 80137dc:	4639      	mov	r1, r7
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	4668      	mov	r0, sp
 80137e2:	4798      	blx	r3
 80137e4:	4629      	mov	r1, r5
 80137e6:	4604      	mov	r4, r0
 80137e8:	4804      	ldr	r0, [pc, #16]	; (80137fc <rmw_take_with_info+0xa4>)
 80137ea:	f7ff f889 	bl	8012900 <put_memory>
 80137ee:	e7dd      	b.n	80137ac <rmw_take_with_info+0x54>
 80137f0:	200c      	movs	r0, #12
 80137f2:	b009      	add	sp, #36	; 0x24
 80137f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137f6:	bf00      	nop
 80137f8:	0801818c 	.word	0x0801818c
 80137fc:	20012fdc 	.word	0x20012fdc

08013800 <rmw_uxrce_transport_init>:
 8013800:	b508      	push	{r3, lr}
 8013802:	b108      	cbz	r0, 8013808 <rmw_uxrce_transport_init+0x8>
 8013804:	f100 0210 	add.w	r2, r0, #16
 8013808:	b139      	cbz	r1, 801381a <rmw_uxrce_transport_init+0x1a>
 801380a:	6949      	ldr	r1, [r1, #20]
 801380c:	4610      	mov	r0, r2
 801380e:	f000 fc0d 	bl	801402c <uxr_init_custom_transport>
 8013812:	f080 0001 	eor.w	r0, r0, #1
 8013816:	b2c0      	uxtb	r0, r0
 8013818:	bd08      	pop	{r3, pc}
 801381a:	4b04      	ldr	r3, [pc, #16]	; (801382c <rmw_uxrce_transport_init+0x2c>)
 801381c:	4610      	mov	r0, r2
 801381e:	6859      	ldr	r1, [r3, #4]
 8013820:	f000 fc04 	bl	801402c <uxr_init_custom_transport>
 8013824:	f080 0001 	eor.w	r0, r0, #1
 8013828:	b2c0      	uxtb	r0, r0
 801382a:	bd08      	pop	{r3, pc}
 801382c:	2000e6b4 	.word	0x2000e6b4

08013830 <rmw_wait>:
 8013830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013834:	b089      	sub	sp, #36	; 0x24
 8013836:	4605      	mov	r5, r0
 8013838:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801383a:	460e      	mov	r6, r1
 801383c:	4698      	mov	r8, r3
 801383e:	4691      	mov	r9, r2
 8013840:	2a00      	cmp	r2, #0
 8013842:	f000 810a 	beq.w	8013a5a <rmw_wait+0x22a>
 8013846:	b16c      	cbz	r4, 8013864 <rmw_wait+0x34>
 8013848:	4bae      	ldr	r3, [pc, #696]	; (8013b04 <rmw_wait+0x2d4>)
 801384a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801384c:	af04      	add	r7, sp, #16
 801384e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013852:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013856:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801385a:	f7fe fe75 	bl	8012548 <rmw_time_equal>
 801385e:	2800      	cmp	r0, #0
 8013860:	f000 8127 	beq.w	8013ab2 <rmw_wait+0x282>
 8013864:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013868:	f7f7 fbea 	bl	800b040 <rmw_uxrce_clean_expired_static_input_buffer>
 801386c:	4ba6      	ldr	r3, [pc, #664]	; (8013b08 <rmw_wait+0x2d8>)
 801386e:	681c      	ldr	r4, [r3, #0]
 8013870:	b14c      	cbz	r4, 8013886 <rmw_wait+0x56>
 8013872:	4623      	mov	r3, r4
 8013874:	2100      	movs	r1, #0
 8013876:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801387a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801387e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1f7      	bne.n	8013876 <rmw_wait+0x46>
 8013886:	f1b9 0f00 	cmp.w	r9, #0
 801388a:	d011      	beq.n	80138b0 <rmw_wait+0x80>
 801388c:	f8d9 1000 	ldr.w	r1, [r9]
 8013890:	b171      	cbz	r1, 80138b0 <rmw_wait+0x80>
 8013892:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013896:	2300      	movs	r3, #0
 8013898:	2001      	movs	r0, #1
 801389a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801389e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80138a0:	6912      	ldr	r2, [r2, #16]
 80138a2:	3301      	adds	r3, #1
 80138a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80138a8:	4299      	cmp	r1, r3
 80138aa:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80138ae:	d1f4      	bne.n	801389a <rmw_wait+0x6a>
 80138b0:	f1b8 0f00 	cmp.w	r8, #0
 80138b4:	d011      	beq.n	80138da <rmw_wait+0xaa>
 80138b6:	f8d8 1000 	ldr.w	r1, [r8]
 80138ba:	b171      	cbz	r1, 80138da <rmw_wait+0xaa>
 80138bc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80138c0:	2300      	movs	r3, #0
 80138c2:	2001      	movs	r0, #1
 80138c4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80138c8:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80138ca:	6912      	ldr	r2, [r2, #16]
 80138cc:	3301      	adds	r3, #1
 80138ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80138d2:	4299      	cmp	r1, r3
 80138d4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80138d8:	d1f4      	bne.n	80138c4 <rmw_wait+0x94>
 80138da:	b185      	cbz	r5, 80138fe <rmw_wait+0xce>
 80138dc:	6829      	ldr	r1, [r5, #0]
 80138de:	b171      	cbz	r1, 80138fe <rmw_wait+0xce>
 80138e0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80138e4:	2300      	movs	r3, #0
 80138e6:	2001      	movs	r0, #1
 80138e8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80138ec:	6a12      	ldr	r2, [r2, #32]
 80138ee:	6912      	ldr	r2, [r2, #16]
 80138f0:	3301      	adds	r3, #1
 80138f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80138f6:	4299      	cmp	r1, r3
 80138f8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80138fc:	d1f4      	bne.n	80138e8 <rmw_wait+0xb8>
 80138fe:	b34c      	cbz	r4, 8013954 <rmw_wait+0x124>
 8013900:	4622      	mov	r2, r4
 8013902:	2300      	movs	r3, #0
 8013904:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013908:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801390c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8013910:	440b      	add	r3, r1
 8013912:	b2db      	uxtb	r3, r3
 8013914:	2a00      	cmp	r2, #0
 8013916:	d1f5      	bne.n	8013904 <rmw_wait+0xd4>
 8013918:	2b00      	cmp	r3, #0
 801391a:	f000 8084 	beq.w	8013a26 <rmw_wait+0x1f6>
 801391e:	1c7a      	adds	r2, r7, #1
 8013920:	d00d      	beq.n	801393e <rmw_wait+0x10e>
 8013922:	ee07 7a90 	vmov	s15, r7
 8013926:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801392a:	ee07 3a90 	vmov	s15, r3
 801392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013936:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801393a:	ee17 7a90 	vmov	r7, s15
 801393e:	68a0      	ldr	r0, [r4, #8]
 8013940:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8013944:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8013948:	2b00      	cmp	r3, #0
 801394a:	f040 8090 	bne.w	8013a6e <rmw_wait+0x23e>
 801394e:	6864      	ldr	r4, [r4, #4]
 8013950:	2c00      	cmp	r4, #0
 8013952:	d1f4      	bne.n	801393e <rmw_wait+0x10e>
 8013954:	f1b9 0f00 	cmp.w	r9, #0
 8013958:	f000 80bc 	beq.w	8013ad4 <rmw_wait+0x2a4>
 801395c:	f8d9 7000 	ldr.w	r7, [r9]
 8013960:	2f00      	cmp	r7, #0
 8013962:	f000 808e 	beq.w	8013a82 <rmw_wait+0x252>
 8013966:	2400      	movs	r4, #0
 8013968:	4627      	mov	r7, r4
 801396a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801396e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013972:	f7f7 fb3d 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013976:	2800      	cmp	r0, #0
 8013978:	d05f      	beq.n	8013a3a <rmw_wait+0x20a>
 801397a:	f8d9 3000 	ldr.w	r3, [r9]
 801397e:	3401      	adds	r4, #1
 8013980:	42a3      	cmp	r3, r4
 8013982:	f04f 0701 	mov.w	r7, #1
 8013986:	d8f0      	bhi.n	801396a <rmw_wait+0x13a>
 8013988:	f1b8 0f00 	cmp.w	r8, #0
 801398c:	d012      	beq.n	80139b4 <rmw_wait+0x184>
 801398e:	f8d8 3000 	ldr.w	r3, [r8]
 8013992:	b17b      	cbz	r3, 80139b4 <rmw_wait+0x184>
 8013994:	2400      	movs	r4, #0
 8013996:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801399a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801399e:	f7f7 fb27 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d051      	beq.n	8013a4a <rmw_wait+0x21a>
 80139a6:	f8d8 3000 	ldr.w	r3, [r8]
 80139aa:	3401      	adds	r4, #1
 80139ac:	42a3      	cmp	r3, r4
 80139ae:	f04f 0701 	mov.w	r7, #1
 80139b2:	d8f0      	bhi.n	8013996 <rmw_wait+0x166>
 80139b4:	b1dd      	cbz	r5, 80139ee <rmw_wait+0x1be>
 80139b6:	682b      	ldr	r3, [r5, #0]
 80139b8:	b1cb      	cbz	r3, 80139ee <rmw_wait+0x1be>
 80139ba:	2400      	movs	r4, #0
 80139bc:	686b      	ldr	r3, [r5, #4]
 80139be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80139c2:	f7f7 fb15 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80139c6:	b158      	cbz	r0, 80139e0 <rmw_wait+0x1b0>
 80139c8:	682b      	ldr	r3, [r5, #0]
 80139ca:	3401      	adds	r4, #1
 80139cc:	42a3      	cmp	r3, r4
 80139ce:	d969      	bls.n	8013aa4 <rmw_wait+0x274>
 80139d0:	686b      	ldr	r3, [r5, #4]
 80139d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80139d6:	2701      	movs	r7, #1
 80139d8:	f7f7 fb0a 	bl	800aff0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80139dc:	2800      	cmp	r0, #0
 80139de:	d1f3      	bne.n	80139c8 <rmw_wait+0x198>
 80139e0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80139e4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80139e8:	3401      	adds	r4, #1
 80139ea:	42a3      	cmp	r3, r4
 80139ec:	d8e6      	bhi.n	80139bc <rmw_wait+0x18c>
 80139ee:	b1a6      	cbz	r6, 8013a1a <rmw_wait+0x1ea>
 80139f0:	6834      	ldr	r4, [r6, #0]
 80139f2:	b194      	cbz	r4, 8013a1a <rmw_wait+0x1ea>
 80139f4:	2300      	movs	r3, #0
 80139f6:	461d      	mov	r5, r3
 80139f8:	e004      	b.n	8013a04 <rmw_wait+0x1d4>
 80139fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80139fe:	3301      	adds	r3, #1
 8013a00:	42a3      	cmp	r3, r4
 8013a02:	d00a      	beq.n	8013a1a <rmw_wait+0x1ea>
 8013a04:	6870      	ldr	r0, [r6, #4]
 8013a06:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013a0a:	7c0a      	ldrb	r2, [r1, #16]
 8013a0c:	2a00      	cmp	r2, #0
 8013a0e:	d0f4      	beq.n	80139fa <rmw_wait+0x1ca>
 8013a10:	3301      	adds	r3, #1
 8013a12:	42a3      	cmp	r3, r4
 8013a14:	740d      	strb	r5, [r1, #16]
 8013a16:	4617      	mov	r7, r2
 8013a18:	d1f4      	bne.n	8013a04 <rmw_wait+0x1d4>
 8013a1a:	2f00      	cmp	r7, #0
 8013a1c:	d03e      	beq.n	8013a9c <rmw_wait+0x26c>
 8013a1e:	2000      	movs	r0, #0
 8013a20:	b009      	add	sp, #36	; 0x24
 8013a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a26:	68a0      	ldr	r0, [r4, #8]
 8013a28:	2100      	movs	r1, #0
 8013a2a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013a2e:	f7f9 fcc1 	bl	800d3b4 <uxr_run_session_timeout>
 8013a32:	6864      	ldr	r4, [r4, #4]
 8013a34:	2c00      	cmp	r4, #0
 8013a36:	d1f6      	bne.n	8013a26 <rmw_wait+0x1f6>
 8013a38:	e78c      	b.n	8013954 <rmw_wait+0x124>
 8013a3a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013a3e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013a42:	3401      	adds	r4, #1
 8013a44:	42a3      	cmp	r3, r4
 8013a46:	d890      	bhi.n	801396a <rmw_wait+0x13a>
 8013a48:	e79e      	b.n	8013988 <rmw_wait+0x158>
 8013a4a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013a4e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013a52:	3401      	adds	r4, #1
 8013a54:	429c      	cmp	r4, r3
 8013a56:	d39e      	bcc.n	8013996 <rmw_wait+0x166>
 8013a58:	e7ac      	b.n	80139b4 <rmw_wait+0x184>
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f47f aef3 	bne.w	8013846 <rmw_wait+0x16>
 8013a60:	2800      	cmp	r0, #0
 8013a62:	f47f aef0 	bne.w	8013846 <rmw_wait+0x16>
 8013a66:	2900      	cmp	r1, #0
 8013a68:	f47f aeed 	bne.w	8013846 <rmw_wait+0x16>
 8013a6c:	e7d7      	b.n	8013a1e <rmw_wait+0x1ee>
 8013a6e:	4639      	mov	r1, r7
 8013a70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013a74:	f7f9 fcb8 	bl	800d3e8 <uxr_run_session_until_data>
 8013a78:	6864      	ldr	r4, [r4, #4]
 8013a7a:	2c00      	cmp	r4, #0
 8013a7c:	f47f af5f 	bne.w	801393e <rmw_wait+0x10e>
 8013a80:	e768      	b.n	8013954 <rmw_wait+0x124>
 8013a82:	f1b8 0f00 	cmp.w	r8, #0
 8013a86:	d032      	beq.n	8013aee <rmw_wait+0x2be>
 8013a88:	f8d8 3000 	ldr.w	r3, [r8]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d181      	bne.n	8013994 <rmw_wait+0x164>
 8013a90:	461f      	mov	r7, r3
 8013a92:	2d00      	cmp	r5, #0
 8013a94:	d18f      	bne.n	80139b6 <rmw_wait+0x186>
 8013a96:	462f      	mov	r7, r5
 8013a98:	2e00      	cmp	r6, #0
 8013a9a:	d1a9      	bne.n	80139f0 <rmw_wait+0x1c0>
 8013a9c:	2002      	movs	r0, #2
 8013a9e:	b009      	add	sp, #36	; 0x24
 8013aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013aa4:	2e00      	cmp	r6, #0
 8013aa6:	d0ba      	beq.n	8013a1e <rmw_wait+0x1ee>
 8013aa8:	6834      	ldr	r4, [r6, #0]
 8013aaa:	2701      	movs	r7, #1
 8013aac:	2c00      	cmp	r4, #0
 8013aae:	d1a1      	bne.n	80139f4 <rmw_wait+0x1c4>
 8013ab0:	e7b5      	b.n	8013a1e <rmw_wait+0x1ee>
 8013ab2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013ab6:	f7fe fd9b 	bl	80125f0 <rmw_time_total_nsec>
 8013aba:	2300      	movs	r3, #0
 8013abc:	4a13      	ldr	r2, [pc, #76]	; (8013b0c <rmw_wait+0x2dc>)
 8013abe:	f7ec fc5f 	bl	8000380 <__aeabi_uldivmod>
 8013ac2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8013ac6:	f171 0300 	sbcs.w	r3, r1, #0
 8013aca:	4607      	mov	r7, r0
 8013acc:	bfa8      	it	ge
 8013ace:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8013ad2:	e6c9      	b.n	8013868 <rmw_wait+0x38>
 8013ad4:	f1b8 0f00 	cmp.w	r8, #0
 8013ad8:	d009      	beq.n	8013aee <rmw_wait+0x2be>
 8013ada:	f8d8 3000 	ldr.w	r3, [r8]
 8013ade:	464f      	mov	r7, r9
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f47f af57 	bne.w	8013994 <rmw_wait+0x164>
 8013ae6:	2d00      	cmp	r5, #0
 8013ae8:	f47f af65 	bne.w	80139b6 <rmw_wait+0x186>
 8013aec:	e7d3      	b.n	8013a96 <rmw_wait+0x266>
 8013aee:	b17d      	cbz	r5, 8013b10 <rmw_wait+0x2e0>
 8013af0:	682b      	ldr	r3, [r5, #0]
 8013af2:	4647      	mov	r7, r8
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f47f af60 	bne.w	80139ba <rmw_wait+0x18a>
 8013afa:	2e00      	cmp	r6, #0
 8013afc:	f47f af78 	bne.w	80139f0 <rmw_wait+0x1c0>
 8013b00:	e7cc      	b.n	8013a9c <rmw_wait+0x26c>
 8013b02:	bf00      	nop
 8013b04:	08017850 	.word	0x08017850
 8013b08:	20012fcc 	.word	0x20012fcc
 8013b0c:	000f4240 	.word	0x000f4240
 8013b10:	2e00      	cmp	r6, #0
 8013b12:	d0c3      	beq.n	8013a9c <rmw_wait+0x26c>
 8013b14:	6834      	ldr	r4, [r6, #0]
 8013b16:	462f      	mov	r7, r5
 8013b18:	2c00      	cmp	r4, #0
 8013b1a:	f47f af6b 	bne.w	80139f4 <rmw_wait+0x1c4>
 8013b1e:	e7bd      	b.n	8013a9c <rmw_wait+0x26c>

08013b20 <rmw_create_wait_set>:
 8013b20:	b508      	push	{r3, lr}
 8013b22:	4803      	ldr	r0, [pc, #12]	; (8013b30 <rmw_create_wait_set+0x10>)
 8013b24:	f7fe fedc 	bl	80128e0 <get_memory>
 8013b28:	b108      	cbz	r0, 8013b2e <rmw_create_wait_set+0xe>
 8013b2a:	6880      	ldr	r0, [r0, #8]
 8013b2c:	3010      	adds	r0, #16
 8013b2e:	bd08      	pop	{r3, pc}
 8013b30:	2001300c 	.word	0x2001300c

08013b34 <rmw_destroy_wait_set>:
 8013b34:	b508      	push	{r3, lr}
 8013b36:	4b08      	ldr	r3, [pc, #32]	; (8013b58 <rmw_destroy_wait_set+0x24>)
 8013b38:	6819      	ldr	r1, [r3, #0]
 8013b3a:	b911      	cbnz	r1, 8013b42 <rmw_destroy_wait_set+0xe>
 8013b3c:	e00a      	b.n	8013b54 <rmw_destroy_wait_set+0x20>
 8013b3e:	6849      	ldr	r1, [r1, #4]
 8013b40:	b141      	cbz	r1, 8013b54 <rmw_destroy_wait_set+0x20>
 8013b42:	688b      	ldr	r3, [r1, #8]
 8013b44:	3310      	adds	r3, #16
 8013b46:	4298      	cmp	r0, r3
 8013b48:	d1f9      	bne.n	8013b3e <rmw_destroy_wait_set+0xa>
 8013b4a:	4803      	ldr	r0, [pc, #12]	; (8013b58 <rmw_destroy_wait_set+0x24>)
 8013b4c:	f7fe fed8 	bl	8012900 <put_memory>
 8013b50:	2000      	movs	r0, #0
 8013b52:	bd08      	pop	{r3, pc}
 8013b54:	2001      	movs	r0, #1
 8013b56:	bd08      	pop	{r3, pc}
 8013b58:	2001300c 	.word	0x2001300c

08013b5c <rmw_uros_epoch_nanos>:
 8013b5c:	4b05      	ldr	r3, [pc, #20]	; (8013b74 <rmw_uros_epoch_nanos+0x18>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	b123      	cbz	r3, 8013b6c <rmw_uros_epoch_nanos+0x10>
 8013b62:	6898      	ldr	r0, [r3, #8]
 8013b64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013b68:	f7f9 b894 	b.w	800cc94 <uxr_epoch_nanos>
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	2100      	movs	r1, #0
 8013b70:	4770      	bx	lr
 8013b72:	bf00      	nop
 8013b74:	20012fcc 	.word	0x20012fcc

08013b78 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b7c:	6805      	ldr	r5, [r0, #0]
 8013b7e:	4604      	mov	r4, r0
 8013b80:	4628      	mov	r0, r5
 8013b82:	460e      	mov	r6, r1
 8013b84:	f7ec fb44 	bl	8000210 <strcmp>
 8013b88:	b1c8      	cbz	r0, 8013bbe <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013b8a:	4b11      	ldr	r3, [pc, #68]	; (8013bd0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	429d      	cmp	r5, r3
 8013b90:	d112      	bne.n	8013bb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b92:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013b96:	f8d8 4000 	ldr.w	r4, [r8]
 8013b9a:	b16c      	cbz	r4, 8013bb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013ba0:	2700      	movs	r7, #0
 8013ba2:	3d04      	subs	r5, #4
 8013ba4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013ba8:	4631      	mov	r1, r6
 8013baa:	f7ec fb31 	bl	8000210 <strcmp>
 8013bae:	00bb      	lsls	r3, r7, #2
 8013bb0:	b140      	cbz	r0, 8013bc4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013bb2:	3701      	adds	r7, #1
 8013bb4:	42bc      	cmp	r4, r7
 8013bb6:	d1f5      	bne.n	8013ba4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013bb8:	2000      	movs	r0, #0
 8013bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bcc:	58d3      	ldr	r3, [r2, r3]
 8013bce:	4718      	bx	r3
 8013bd0:	200000ac 	.word	0x200000ac

08013bd4 <std_msgs__msg__Float32__init>:
 8013bd4:	3800      	subs	r0, #0
 8013bd6:	bf18      	it	ne
 8013bd8:	2001      	movne	r0, #1
 8013bda:	4770      	bx	lr

08013bdc <std_msgs__msg__Float32__fini>:
 8013bdc:	4770      	bx	lr
 8013bde:	bf00      	nop

08013be0 <ucdr_serialize_endian_array_char>:
 8013be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be4:	4619      	mov	r1, r3
 8013be6:	461f      	mov	r7, r3
 8013be8:	4605      	mov	r5, r0
 8013bea:	4690      	mov	r8, r2
 8013bec:	f7f8 fc46 	bl	800c47c <ucdr_check_buffer_available_for>
 8013bf0:	b9e0      	cbnz	r0, 8013c2c <ucdr_serialize_endian_array_char+0x4c>
 8013bf2:	463e      	mov	r6, r7
 8013bf4:	e009      	b.n	8013c0a <ucdr_serialize_endian_array_char+0x2a>
 8013bf6:	68a8      	ldr	r0, [r5, #8]
 8013bf8:	f002 fe87 	bl	801690a <memcpy>
 8013bfc:	68ab      	ldr	r3, [r5, #8]
 8013bfe:	6928      	ldr	r0, [r5, #16]
 8013c00:	4423      	add	r3, r4
 8013c02:	4420      	add	r0, r4
 8013c04:	1b36      	subs	r6, r6, r4
 8013c06:	60ab      	str	r3, [r5, #8]
 8013c08:	6128      	str	r0, [r5, #16]
 8013c0a:	4631      	mov	r1, r6
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f7f8 fcbc 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8013c14:	1bb9      	subs	r1, r7, r6
 8013c16:	4441      	add	r1, r8
 8013c18:	4604      	mov	r4, r0
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	d1ea      	bne.n	8013bf6 <ucdr_serialize_endian_array_char+0x16>
 8013c20:	2301      	movs	r3, #1
 8013c22:	7da8      	ldrb	r0, [r5, #22]
 8013c24:	756b      	strb	r3, [r5, #21]
 8013c26:	4058      	eors	r0, r3
 8013c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c2c:	463a      	mov	r2, r7
 8013c2e:	68a8      	ldr	r0, [r5, #8]
 8013c30:	4641      	mov	r1, r8
 8013c32:	f002 fe6a 	bl	801690a <memcpy>
 8013c36:	68aa      	ldr	r2, [r5, #8]
 8013c38:	692b      	ldr	r3, [r5, #16]
 8013c3a:	443a      	add	r2, r7
 8013c3c:	443b      	add	r3, r7
 8013c3e:	60aa      	str	r2, [r5, #8]
 8013c40:	612b      	str	r3, [r5, #16]
 8013c42:	e7ed      	b.n	8013c20 <ucdr_serialize_endian_array_char+0x40>

08013c44 <ucdr_deserialize_endian_array_char>:
 8013c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c48:	4619      	mov	r1, r3
 8013c4a:	461f      	mov	r7, r3
 8013c4c:	4605      	mov	r5, r0
 8013c4e:	4690      	mov	r8, r2
 8013c50:	f7f8 fc14 	bl	800c47c <ucdr_check_buffer_available_for>
 8013c54:	b9e0      	cbnz	r0, 8013c90 <ucdr_deserialize_endian_array_char+0x4c>
 8013c56:	463e      	mov	r6, r7
 8013c58:	e009      	b.n	8013c6e <ucdr_deserialize_endian_array_char+0x2a>
 8013c5a:	68a9      	ldr	r1, [r5, #8]
 8013c5c:	f002 fe55 	bl	801690a <memcpy>
 8013c60:	68ab      	ldr	r3, [r5, #8]
 8013c62:	6928      	ldr	r0, [r5, #16]
 8013c64:	4423      	add	r3, r4
 8013c66:	4420      	add	r0, r4
 8013c68:	1b36      	subs	r6, r6, r4
 8013c6a:	60ab      	str	r3, [r5, #8]
 8013c6c:	6128      	str	r0, [r5, #16]
 8013c6e:	2201      	movs	r2, #1
 8013c70:	4631      	mov	r1, r6
 8013c72:	4628      	mov	r0, r5
 8013c74:	f7f8 fc8a 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8013c78:	4604      	mov	r4, r0
 8013c7a:	1bb8      	subs	r0, r7, r6
 8013c7c:	4440      	add	r0, r8
 8013c7e:	4622      	mov	r2, r4
 8013c80:	2c00      	cmp	r4, #0
 8013c82:	d1ea      	bne.n	8013c5a <ucdr_deserialize_endian_array_char+0x16>
 8013c84:	2301      	movs	r3, #1
 8013c86:	7da8      	ldrb	r0, [r5, #22]
 8013c88:	756b      	strb	r3, [r5, #21]
 8013c8a:	4058      	eors	r0, r3
 8013c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c90:	463a      	mov	r2, r7
 8013c92:	68a9      	ldr	r1, [r5, #8]
 8013c94:	4640      	mov	r0, r8
 8013c96:	f002 fe38 	bl	801690a <memcpy>
 8013c9a:	68aa      	ldr	r2, [r5, #8]
 8013c9c:	692b      	ldr	r3, [r5, #16]
 8013c9e:	443a      	add	r2, r7
 8013ca0:	443b      	add	r3, r7
 8013ca2:	60aa      	str	r2, [r5, #8]
 8013ca4:	612b      	str	r3, [r5, #16]
 8013ca6:	e7ed      	b.n	8013c84 <ucdr_deserialize_endian_array_char+0x40>

08013ca8 <ucdr_serialize_array_uint8_t>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	4688      	mov	r8, r1
 8013cae:	4611      	mov	r1, r2
 8013cb0:	4617      	mov	r7, r2
 8013cb2:	4605      	mov	r5, r0
 8013cb4:	f7f8 fbe2 	bl	800c47c <ucdr_check_buffer_available_for>
 8013cb8:	b9e0      	cbnz	r0, 8013cf4 <ucdr_serialize_array_uint8_t+0x4c>
 8013cba:	463e      	mov	r6, r7
 8013cbc:	e009      	b.n	8013cd2 <ucdr_serialize_array_uint8_t+0x2a>
 8013cbe:	68a8      	ldr	r0, [r5, #8]
 8013cc0:	f002 fe23 	bl	801690a <memcpy>
 8013cc4:	68aa      	ldr	r2, [r5, #8]
 8013cc6:	692b      	ldr	r3, [r5, #16]
 8013cc8:	4422      	add	r2, r4
 8013cca:	4423      	add	r3, r4
 8013ccc:	1b36      	subs	r6, r6, r4
 8013cce:	60aa      	str	r2, [r5, #8]
 8013cd0:	612b      	str	r3, [r5, #16]
 8013cd2:	4631      	mov	r1, r6
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	f7f8 fc58 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8013cdc:	1bb9      	subs	r1, r7, r6
 8013cde:	4441      	add	r1, r8
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	4602      	mov	r2, r0
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d1ea      	bne.n	8013cbe <ucdr_serialize_array_uint8_t+0x16>
 8013ce8:	2301      	movs	r3, #1
 8013cea:	7da8      	ldrb	r0, [r5, #22]
 8013cec:	756b      	strb	r3, [r5, #21]
 8013cee:	4058      	eors	r0, r3
 8013cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf4:	463a      	mov	r2, r7
 8013cf6:	68a8      	ldr	r0, [r5, #8]
 8013cf8:	4641      	mov	r1, r8
 8013cfa:	f002 fe06 	bl	801690a <memcpy>
 8013cfe:	68aa      	ldr	r2, [r5, #8]
 8013d00:	692b      	ldr	r3, [r5, #16]
 8013d02:	443a      	add	r2, r7
 8013d04:	443b      	add	r3, r7
 8013d06:	60aa      	str	r2, [r5, #8]
 8013d08:	612b      	str	r3, [r5, #16]
 8013d0a:	e7ed      	b.n	8013ce8 <ucdr_serialize_array_uint8_t+0x40>

08013d0c <ucdr_serialize_endian_array_uint8_t>:
 8013d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d10:	4619      	mov	r1, r3
 8013d12:	461f      	mov	r7, r3
 8013d14:	4605      	mov	r5, r0
 8013d16:	4690      	mov	r8, r2
 8013d18:	f7f8 fbb0 	bl	800c47c <ucdr_check_buffer_available_for>
 8013d1c:	b9e0      	cbnz	r0, 8013d58 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013d1e:	463e      	mov	r6, r7
 8013d20:	e009      	b.n	8013d36 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013d22:	68a8      	ldr	r0, [r5, #8]
 8013d24:	f002 fdf1 	bl	801690a <memcpy>
 8013d28:	68ab      	ldr	r3, [r5, #8]
 8013d2a:	6928      	ldr	r0, [r5, #16]
 8013d2c:	4423      	add	r3, r4
 8013d2e:	4420      	add	r0, r4
 8013d30:	1b36      	subs	r6, r6, r4
 8013d32:	60ab      	str	r3, [r5, #8]
 8013d34:	6128      	str	r0, [r5, #16]
 8013d36:	4631      	mov	r1, r6
 8013d38:	2201      	movs	r2, #1
 8013d3a:	4628      	mov	r0, r5
 8013d3c:	f7f8 fc26 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8013d40:	1bb9      	subs	r1, r7, r6
 8013d42:	4441      	add	r1, r8
 8013d44:	4604      	mov	r4, r0
 8013d46:	4602      	mov	r2, r0
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d1ea      	bne.n	8013d22 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	7da8      	ldrb	r0, [r5, #22]
 8013d50:	756b      	strb	r3, [r5, #21]
 8013d52:	4058      	eors	r0, r3
 8013d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d58:	463a      	mov	r2, r7
 8013d5a:	68a8      	ldr	r0, [r5, #8]
 8013d5c:	4641      	mov	r1, r8
 8013d5e:	f002 fdd4 	bl	801690a <memcpy>
 8013d62:	68aa      	ldr	r2, [r5, #8]
 8013d64:	692b      	ldr	r3, [r5, #16]
 8013d66:	443a      	add	r2, r7
 8013d68:	443b      	add	r3, r7
 8013d6a:	60aa      	str	r2, [r5, #8]
 8013d6c:	612b      	str	r3, [r5, #16]
 8013d6e:	e7ed      	b.n	8013d4c <ucdr_serialize_endian_array_uint8_t+0x40>

08013d70 <ucdr_deserialize_array_uint8_t>:
 8013d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d74:	4688      	mov	r8, r1
 8013d76:	4611      	mov	r1, r2
 8013d78:	4617      	mov	r7, r2
 8013d7a:	4605      	mov	r5, r0
 8013d7c:	f7f8 fb7e 	bl	800c47c <ucdr_check_buffer_available_for>
 8013d80:	b9e0      	cbnz	r0, 8013dbc <ucdr_deserialize_array_uint8_t+0x4c>
 8013d82:	463e      	mov	r6, r7
 8013d84:	e009      	b.n	8013d9a <ucdr_deserialize_array_uint8_t+0x2a>
 8013d86:	68a9      	ldr	r1, [r5, #8]
 8013d88:	f002 fdbf 	bl	801690a <memcpy>
 8013d8c:	68aa      	ldr	r2, [r5, #8]
 8013d8e:	692b      	ldr	r3, [r5, #16]
 8013d90:	4422      	add	r2, r4
 8013d92:	4423      	add	r3, r4
 8013d94:	1b36      	subs	r6, r6, r4
 8013d96:	60aa      	str	r2, [r5, #8]
 8013d98:	612b      	str	r3, [r5, #16]
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	4631      	mov	r1, r6
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f7f8 fbf4 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8013da4:	4604      	mov	r4, r0
 8013da6:	1bb8      	subs	r0, r7, r6
 8013da8:	4440      	add	r0, r8
 8013daa:	4622      	mov	r2, r4
 8013dac:	2c00      	cmp	r4, #0
 8013dae:	d1ea      	bne.n	8013d86 <ucdr_deserialize_array_uint8_t+0x16>
 8013db0:	2301      	movs	r3, #1
 8013db2:	7da8      	ldrb	r0, [r5, #22]
 8013db4:	756b      	strb	r3, [r5, #21]
 8013db6:	4058      	eors	r0, r3
 8013db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dbc:	463a      	mov	r2, r7
 8013dbe:	68a9      	ldr	r1, [r5, #8]
 8013dc0:	4640      	mov	r0, r8
 8013dc2:	f002 fda2 	bl	801690a <memcpy>
 8013dc6:	68aa      	ldr	r2, [r5, #8]
 8013dc8:	692b      	ldr	r3, [r5, #16]
 8013dca:	443a      	add	r2, r7
 8013dcc:	443b      	add	r3, r7
 8013dce:	60aa      	str	r2, [r5, #8]
 8013dd0:	612b      	str	r3, [r5, #16]
 8013dd2:	e7ed      	b.n	8013db0 <ucdr_deserialize_array_uint8_t+0x40>

08013dd4 <ucdr_deserialize_endian_array_uint8_t>:
 8013dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd8:	4619      	mov	r1, r3
 8013dda:	461f      	mov	r7, r3
 8013ddc:	4605      	mov	r5, r0
 8013dde:	4690      	mov	r8, r2
 8013de0:	f7f8 fb4c 	bl	800c47c <ucdr_check_buffer_available_for>
 8013de4:	b9e0      	cbnz	r0, 8013e20 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013de6:	463e      	mov	r6, r7
 8013de8:	e009      	b.n	8013dfe <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013dea:	68a9      	ldr	r1, [r5, #8]
 8013dec:	f002 fd8d 	bl	801690a <memcpy>
 8013df0:	68ab      	ldr	r3, [r5, #8]
 8013df2:	6928      	ldr	r0, [r5, #16]
 8013df4:	4423      	add	r3, r4
 8013df6:	4420      	add	r0, r4
 8013df8:	1b36      	subs	r6, r6, r4
 8013dfa:	60ab      	str	r3, [r5, #8]
 8013dfc:	6128      	str	r0, [r5, #16]
 8013dfe:	2201      	movs	r2, #1
 8013e00:	4631      	mov	r1, r6
 8013e02:	4628      	mov	r0, r5
 8013e04:	f7f8 fbc2 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8013e08:	4604      	mov	r4, r0
 8013e0a:	1bb8      	subs	r0, r7, r6
 8013e0c:	4440      	add	r0, r8
 8013e0e:	4622      	mov	r2, r4
 8013e10:	2c00      	cmp	r4, #0
 8013e12:	d1ea      	bne.n	8013dea <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013e14:	2301      	movs	r3, #1
 8013e16:	7da8      	ldrb	r0, [r5, #22]
 8013e18:	756b      	strb	r3, [r5, #21]
 8013e1a:	4058      	eors	r0, r3
 8013e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e20:	463a      	mov	r2, r7
 8013e22:	68a9      	ldr	r1, [r5, #8]
 8013e24:	4640      	mov	r0, r8
 8013e26:	f002 fd70 	bl	801690a <memcpy>
 8013e2a:	68aa      	ldr	r2, [r5, #8]
 8013e2c:	692b      	ldr	r3, [r5, #16]
 8013e2e:	443a      	add	r2, r7
 8013e30:	443b      	add	r3, r7
 8013e32:	60aa      	str	r2, [r5, #8]
 8013e34:	612b      	str	r3, [r5, #16]
 8013e36:	e7ed      	b.n	8013e14 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013e38 <ucdr_serialize_sequence_char>:
 8013e38:	b570      	push	{r4, r5, r6, lr}
 8013e3a:	4615      	mov	r5, r2
 8013e3c:	460e      	mov	r6, r1
 8013e3e:	7d01      	ldrb	r1, [r0, #20]
 8013e40:	4604      	mov	r4, r0
 8013e42:	f7f7 fd49 	bl	800b8d8 <ucdr_serialize_endian_uint32_t>
 8013e46:	b90d      	cbnz	r5, 8013e4c <ucdr_serialize_sequence_char+0x14>
 8013e48:	2001      	movs	r0, #1
 8013e4a:	bd70      	pop	{r4, r5, r6, pc}
 8013e4c:	7d21      	ldrb	r1, [r4, #20]
 8013e4e:	462b      	mov	r3, r5
 8013e50:	4632      	mov	r2, r6
 8013e52:	4620      	mov	r0, r4
 8013e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e58:	f7ff bec2 	b.w	8013be0 <ucdr_serialize_endian_array_char>

08013e5c <ucdr_deserialize_sequence_char>:
 8013e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e60:	461d      	mov	r5, r3
 8013e62:	4616      	mov	r6, r2
 8013e64:	460f      	mov	r7, r1
 8013e66:	461a      	mov	r2, r3
 8013e68:	7d01      	ldrb	r1, [r0, #20]
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	f7f7 fe5c 	bl	800bb28 <ucdr_deserialize_endian_uint32_t>
 8013e70:	682b      	ldr	r3, [r5, #0]
 8013e72:	429e      	cmp	r6, r3
 8013e74:	bf3c      	itt	cc
 8013e76:	2201      	movcc	r2, #1
 8013e78:	75a2      	strbcc	r2, [r4, #22]
 8013e7a:	b913      	cbnz	r3, 8013e82 <ucdr_deserialize_sequence_char+0x26>
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e82:	7d21      	ldrb	r1, [r4, #20]
 8013e84:	463a      	mov	r2, r7
 8013e86:	4620      	mov	r0, r4
 8013e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e8c:	f7ff beda 	b.w	8013c44 <ucdr_deserialize_endian_array_char>

08013e90 <ucdr_serialize_sequence_uint8_t>:
 8013e90:	b570      	push	{r4, r5, r6, lr}
 8013e92:	4615      	mov	r5, r2
 8013e94:	460e      	mov	r6, r1
 8013e96:	7d01      	ldrb	r1, [r0, #20]
 8013e98:	4604      	mov	r4, r0
 8013e9a:	f7f7 fd1d 	bl	800b8d8 <ucdr_serialize_endian_uint32_t>
 8013e9e:	b90d      	cbnz	r5, 8013ea4 <ucdr_serialize_sequence_uint8_t+0x14>
 8013ea0:	2001      	movs	r0, #1
 8013ea2:	bd70      	pop	{r4, r5, r6, pc}
 8013ea4:	7d21      	ldrb	r1, [r4, #20]
 8013ea6:	462b      	mov	r3, r5
 8013ea8:	4632      	mov	r2, r6
 8013eaa:	4620      	mov	r0, r4
 8013eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013eb0:	f7ff bf2c 	b.w	8013d0c <ucdr_serialize_endian_array_uint8_t>

08013eb4 <ucdr_deserialize_sequence_uint8_t>:
 8013eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb8:	461d      	mov	r5, r3
 8013eba:	4616      	mov	r6, r2
 8013ebc:	460f      	mov	r7, r1
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	7d01      	ldrb	r1, [r0, #20]
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	f7f7 fe30 	bl	800bb28 <ucdr_deserialize_endian_uint32_t>
 8013ec8:	682b      	ldr	r3, [r5, #0]
 8013eca:	429e      	cmp	r6, r3
 8013ecc:	bf3c      	itt	cc
 8013ece:	2201      	movcc	r2, #1
 8013ed0:	75a2      	strbcc	r2, [r4, #22]
 8013ed2:	b913      	cbnz	r3, 8013eda <ucdr_deserialize_sequence_uint8_t+0x26>
 8013ed4:	2001      	movs	r0, #1
 8013ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eda:	7d21      	ldrb	r1, [r4, #20]
 8013edc:	463a      	mov	r2, r7
 8013ede:	4620      	mov	r0, r4
 8013ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee4:	f7ff bf76 	b.w	8013dd4 <ucdr_deserialize_endian_array_uint8_t>

08013ee8 <ucdr_serialize_string>:
 8013ee8:	b510      	push	{r4, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	4604      	mov	r4, r0
 8013eee:	4608      	mov	r0, r1
 8013ef0:	9101      	str	r1, [sp, #4]
 8013ef2:	f7ec f997 	bl	8000224 <strlen>
 8013ef6:	9901      	ldr	r1, [sp, #4]
 8013ef8:	1c42      	adds	r2, r0, #1
 8013efa:	4620      	mov	r0, r4
 8013efc:	b002      	add	sp, #8
 8013efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f02:	f7ff bf99 	b.w	8013e38 <ucdr_serialize_sequence_char>
 8013f06:	bf00      	nop

08013f08 <ucdr_deserialize_string>:
 8013f08:	b500      	push	{lr}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	ab01      	add	r3, sp, #4
 8013f0e:	f7ff ffa5 	bl	8013e5c <ucdr_deserialize_sequence_char>
 8013f12:	b003      	add	sp, #12
 8013f14:	f85d fb04 	ldr.w	pc, [sp], #4

08013f18 <get_custom_error>:
 8013f18:	4b01      	ldr	r3, [pc, #4]	; (8013f20 <get_custom_error+0x8>)
 8013f1a:	7818      	ldrb	r0, [r3, #0]
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop
 8013f20:	20013188 	.word	0x20013188

08013f24 <recv_custom_msg>:
 8013f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f28:	4693      	mov	fp, r2
 8013f2a:	b089      	sub	sp, #36	; 0x24
 8013f2c:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8013f30:	9305      	str	r3, [sp, #20]
 8013f32:	468a      	mov	sl, r1
 8013f34:	2100      	movs	r1, #0
 8013f36:	4604      	mov	r4, r0
 8013f38:	f88d 101e 	strb.w	r1, [sp, #30]
 8013f3c:	b322      	cbz	r2, 8013f88 <recv_custom_msg+0x64>
 8013f3e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8013f42:	f10d 081f 	add.w	r8, sp, #31
 8013f46:	af05      	add	r7, sp, #20
 8013f48:	f10d 061e 	add.w	r6, sp, #30
 8013f4c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8013f50:	e002      	b.n	8013f58 <recv_custom_msg+0x34>
 8013f52:	9b05      	ldr	r3, [sp, #20]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	dd0f      	ble.n	8013f78 <recv_custom_msg+0x54>
 8013f58:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8013f5c:	4623      	mov	r3, r4
 8013f5e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013f62:	e9cd 5600 	strd	r5, r6, [sp]
 8013f66:	4622      	mov	r2, r4
 8013f68:	4648      	mov	r0, r9
 8013f6a:	f001 f92d 	bl	80151c8 <uxr_read_framed_msg>
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d0ef      	beq.n	8013f52 <recv_custom_msg+0x2e>
 8013f72:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013f76:	b1b3      	cbz	r3, 8013fa6 <recv_custom_msg+0x82>
 8013f78:	4b0f      	ldr	r3, [pc, #60]	; (8013fb8 <recv_custom_msg+0x94>)
 8013f7a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013f7e:	701a      	strb	r2, [r3, #0]
 8013f80:	2000      	movs	r0, #0
 8013f82:	b009      	add	sp, #36	; 0x24
 8013f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f88:	f10d 021f 	add.w	r2, sp, #31
 8013f8c:	9200      	str	r2, [sp, #0]
 8013f8e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8013f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f96:	4601      	mov	r1, r0
 8013f98:	47a8      	blx	r5
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d0ec      	beq.n	8013f78 <recv_custom_msg+0x54>
 8013f9e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d1e8      	bne.n	8013f78 <recv_custom_msg+0x54>
 8013fa6:	f8cb 0000 	str.w	r0, [fp]
 8013faa:	2001      	movs	r0, #1
 8013fac:	f8ca 4000 	str.w	r4, [sl]
 8013fb0:	b009      	add	sp, #36	; 0x24
 8013fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb6:	bf00      	nop
 8013fb8:	20013188 	.word	0x20013188

08013fbc <send_custom_msg>:
 8013fbc:	b530      	push	{r4, r5, lr}
 8013fbe:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8013fc2:	b087      	sub	sp, #28
 8013fc4:	4615      	mov	r5, r2
 8013fc6:	b974      	cbnz	r4, 8013fe6 <send_custom_msg+0x2a>
 8013fc8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8013fcc:	f10d 0317 	add.w	r3, sp, #23
 8013fd0:	47a0      	blx	r4
 8013fd2:	b108      	cbz	r0, 8013fd8 <send_custom_msg+0x1c>
 8013fd4:	42a8      	cmp	r0, r5
 8013fd6:	d015      	beq.n	8014004 <send_custom_msg+0x48>
 8013fd8:	4b0c      	ldr	r3, [pc, #48]	; (801400c <send_custom_msg+0x50>)
 8013fda:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013fde:	701a      	strb	r2, [r3, #0]
 8013fe0:	2000      	movs	r0, #0
 8013fe2:	b007      	add	sp, #28
 8013fe4:	bd30      	pop	{r4, r5, pc}
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	2200      	movs	r2, #0
 8013fea:	f10d 0117 	add.w	r1, sp, #23
 8013fee:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8013ff8:	9500      	str	r5, [sp, #0]
 8013ffa:	f200 2002 	addw	r0, r0, #514	; 0x202
 8013ffe:	f000 feeb 	bl	8014dd8 <uxr_write_framed_msg>
 8014002:	e7e6      	b.n	8013fd2 <send_custom_msg+0x16>
 8014004:	2001      	movs	r0, #1
 8014006:	b007      	add	sp, #28
 8014008:	bd30      	pop	{r4, r5, pc}
 801400a:	bf00      	nop
 801400c:	20013188 	.word	0x20013188

08014010 <uxr_set_custom_transport_callbacks>:
 8014010:	b410      	push	{r4}
 8014012:	9c01      	ldr	r4, [sp, #4]
 8014014:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8014018:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801401c:	9b02      	ldr	r3, [sp, #8]
 801401e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8014022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014026:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 801402a:	4770      	bx	lr

0801402c <uxr_init_custom_transport>:
 801402c:	b538      	push	{r3, r4, r5, lr}
 801402e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014032:	b303      	cbz	r3, 8014076 <uxr_init_custom_transport+0x4a>
 8014034:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8014038:	4604      	mov	r4, r0
 801403a:	b1e2      	cbz	r2, 8014076 <uxr_init_custom_transport+0x4a>
 801403c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8014040:	b1ca      	cbz	r2, 8014076 <uxr_init_custom_transport+0x4a>
 8014042:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8014046:	b1b2      	cbz	r2, 8014076 <uxr_init_custom_transport+0x4a>
 8014048:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801404c:	4798      	blx	r3
 801404e:	4605      	mov	r5, r0
 8014050:	b188      	cbz	r0, 8014076 <uxr_init_custom_transport+0x4a>
 8014052:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8014056:	b98b      	cbnz	r3, 801407c <uxr_init_custom_transport+0x50>
 8014058:	490b      	ldr	r1, [pc, #44]	; (8014088 <uxr_init_custom_transport+0x5c>)
 801405a:	4b0c      	ldr	r3, [pc, #48]	; (801408c <uxr_init_custom_transport+0x60>)
 801405c:	4a0c      	ldr	r2, [pc, #48]	; (8014090 <uxr_init_custom_transport+0x64>)
 801405e:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8014062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014066:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801406a:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801406e:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8014072:	4628      	mov	r0, r5
 8014074:	bd38      	pop	{r3, r4, r5, pc}
 8014076:	2500      	movs	r5, #0
 8014078:	4628      	mov	r0, r5
 801407a:	bd38      	pop	{r3, r4, r5, pc}
 801407c:	2100      	movs	r1, #0
 801407e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8014082:	f000 fea3 	bl	8014dcc <uxr_init_framing_io>
 8014086:	e7e7      	b.n	8014058 <uxr_init_custom_transport+0x2c>
 8014088:	08013fbd 	.word	0x08013fbd
 801408c:	08013f25 	.word	0x08013f25
 8014090:	08013f19 	.word	0x08013f19

08014094 <uxr_close_custom_transport>:
 8014094:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8014098:	4718      	bx	r3
 801409a:	bf00      	nop

0801409c <uxr_init_input_best_effort_stream>:
 801409c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140a0:	8003      	strh	r3, [r0, #0]
 80140a2:	4770      	bx	lr

080140a4 <uxr_reset_input_best_effort_stream>:
 80140a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140a8:	8003      	strh	r3, [r0, #0]
 80140aa:	4770      	bx	lr

080140ac <uxr_receive_best_effort_message>:
 80140ac:	b538      	push	{r3, r4, r5, lr}
 80140ae:	4604      	mov	r4, r0
 80140b0:	8800      	ldrh	r0, [r0, #0]
 80140b2:	460d      	mov	r5, r1
 80140b4:	f000 fe72 	bl	8014d9c <uxr_seq_num_cmp>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80140c0:	bfb8      	it	lt
 80140c2:	8025      	strhlt	r5, [r4, #0]
 80140c4:	bd38      	pop	{r3, r4, r5, pc}
 80140c6:	bf00      	nop

080140c8 <on_full_input_buffer>:
 80140c8:	b570      	push	{r4, r5, r6, lr}
 80140ca:	4605      	mov	r5, r0
 80140cc:	460c      	mov	r4, r1
 80140ce:	682b      	ldr	r3, [r5, #0]
 80140d0:	6809      	ldr	r1, [r1, #0]
 80140d2:	8920      	ldrh	r0, [r4, #8]
 80140d4:	6862      	ldr	r2, [r4, #4]
 80140d6:	fbb2 f2f0 	udiv	r2, r2, r0
 80140da:	eba3 0c01 	sub.w	ip, r3, r1
 80140de:	fbbc fcf2 	udiv	ip, ip, r2
 80140e2:	f10c 0c01 	add.w	ip, ip, #1
 80140e6:	fa1f f38c 	uxth.w	r3, ip
 80140ea:	fbb3 f6f0 	udiv	r6, r3, r0
 80140ee:	fb00 3316 	mls	r3, r0, r6, r3
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	fb02 f303 	mul.w	r3, r2, r3
 80140f8:	1d18      	adds	r0, r3, #4
 80140fa:	4408      	add	r0, r1
 80140fc:	7d26      	ldrb	r6, [r4, #20]
 80140fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014102:	b116      	cbz	r6, 801410a <on_full_input_buffer+0x42>
 8014104:	2600      	movs	r6, #0
 8014106:	f840 6c04 	str.w	r6, [r0, #-4]
 801410a:	2a03      	cmp	r2, #3
 801410c:	d801      	bhi.n	8014112 <on_full_input_buffer+0x4a>
 801410e:	2001      	movs	r0, #1
 8014110:	bd70      	pop	{r4, r5, r6, pc}
 8014112:	3308      	adds	r3, #8
 8014114:	4419      	add	r1, r3
 8014116:	4628      	mov	r0, r5
 8014118:	692b      	ldr	r3, [r5, #16]
 801411a:	3a04      	subs	r2, #4
 801411c:	f7f8 f9fa 	bl	800c514 <ucdr_init_buffer_origin>
 8014120:	4628      	mov	r0, r5
 8014122:	4903      	ldr	r1, [pc, #12]	; (8014130 <on_full_input_buffer+0x68>)
 8014124:	4622      	mov	r2, r4
 8014126:	f7f8 f9d1 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 801412a:	2000      	movs	r0, #0
 801412c:	bd70      	pop	{r4, r5, r6, pc}
 801412e:	bf00      	nop
 8014130:	080140c9 	.word	0x080140c9

08014134 <uxr_init_input_reliable_stream>:
 8014134:	b500      	push	{lr}
 8014136:	e9c0 1200 	strd	r1, r2, [r0]
 801413a:	f04f 0e00 	mov.w	lr, #0
 801413e:	9a01      	ldr	r2, [sp, #4]
 8014140:	8103      	strh	r3, [r0, #8]
 8014142:	6102      	str	r2, [r0, #16]
 8014144:	f880 e014 	strb.w	lr, [r0, #20]
 8014148:	b1d3      	cbz	r3, 8014180 <uxr_init_input_reliable_stream+0x4c>
 801414a:	f8c1 e000 	str.w	lr, [r1]
 801414e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014152:	f1bc 0f01 	cmp.w	ip, #1
 8014156:	d913      	bls.n	8014180 <uxr_init_input_reliable_stream+0x4c>
 8014158:	2301      	movs	r3, #1
 801415a:	fbb3 f1fc 	udiv	r1, r3, ip
 801415e:	fb0c 3111 	mls	r1, ip, r1, r3
 8014162:	b289      	uxth	r1, r1
 8014164:	6842      	ldr	r2, [r0, #4]
 8014166:	fbb2 f2fc 	udiv	r2, r2, ip
 801416a:	fb01 f202 	mul.w	r2, r1, r2
 801416e:	6801      	ldr	r1, [r0, #0]
 8014170:	f841 e002 	str.w	lr, [r1, r2]
 8014174:	3301      	adds	r3, #1
 8014176:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801417a:	b29b      	uxth	r3, r3
 801417c:	459c      	cmp	ip, r3
 801417e:	d8ec      	bhi.n	801415a <uxr_init_input_reliable_stream+0x26>
 8014180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014184:	60c3      	str	r3, [r0, #12]
 8014186:	f85d fb04 	ldr.w	pc, [sp], #4
 801418a:	bf00      	nop

0801418c <uxr_reset_input_reliable_stream>:
 801418c:	8901      	ldrh	r1, [r0, #8]
 801418e:	b1e9      	cbz	r1, 80141cc <uxr_reset_input_reliable_stream+0x40>
 8014190:	f04f 0c00 	mov.w	ip, #0
 8014194:	b500      	push	{lr}
 8014196:	4663      	mov	r3, ip
 8014198:	46e6      	mov	lr, ip
 801419a:	fbb3 f2f1 	udiv	r2, r3, r1
 801419e:	fb01 3312 	mls	r3, r1, r2, r3
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	6842      	ldr	r2, [r0, #4]
 80141a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80141aa:	fb02 f303 	mul.w	r3, r2, r3
 80141ae:	6802      	ldr	r2, [r0, #0]
 80141b0:	f842 e003 	str.w	lr, [r2, r3]
 80141b4:	f10c 0c01 	add.w	ip, ip, #1
 80141b8:	8901      	ldrh	r1, [r0, #8]
 80141ba:	fa1f f38c 	uxth.w	r3, ip
 80141be:	4299      	cmp	r1, r3
 80141c0:	d8eb      	bhi.n	801419a <uxr_reset_input_reliable_stream+0xe>
 80141c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141c6:	60c3      	str	r3, [r0, #12]
 80141c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80141cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141d0:	60c3      	str	r3, [r0, #12]
 80141d2:	4770      	bx	lr

080141d4 <uxr_receive_reliable_message>:
 80141d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141d8:	4604      	mov	r4, r0
 80141da:	460d      	mov	r5, r1
 80141dc:	8901      	ldrh	r1, [r0, #8]
 80141de:	8980      	ldrh	r0, [r0, #12]
 80141e0:	4690      	mov	r8, r2
 80141e2:	461f      	mov	r7, r3
 80141e4:	f000 fdd2 	bl	8014d8c <uxr_seq_num_add>
 80141e8:	4629      	mov	r1, r5
 80141ea:	4606      	mov	r6, r0
 80141ec:	89a0      	ldrh	r0, [r4, #12]
 80141ee:	f000 fdd5 	bl	8014d9c <uxr_seq_num_cmp>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	db0a      	blt.n	801420c <uxr_receive_reliable_message+0x38>
 80141f6:	2600      	movs	r6, #0
 80141f8:	89e0      	ldrh	r0, [r4, #14]
 80141fa:	4629      	mov	r1, r5
 80141fc:	f000 fdce 	bl	8014d9c <uxr_seq_num_cmp>
 8014200:	2800      	cmp	r0, #0
 8014202:	da00      	bge.n	8014206 <uxr_receive_reliable_message+0x32>
 8014204:	81e5      	strh	r5, [r4, #14]
 8014206:	4630      	mov	r0, r6
 8014208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801420c:	4630      	mov	r0, r6
 801420e:	4629      	mov	r1, r5
 8014210:	f000 fdc4 	bl	8014d9c <uxr_seq_num_cmp>
 8014214:	2800      	cmp	r0, #0
 8014216:	dbee      	blt.n	80141f6 <uxr_receive_reliable_message+0x22>
 8014218:	6923      	ldr	r3, [r4, #16]
 801421a:	4640      	mov	r0, r8
 801421c:	4798      	blx	r3
 801421e:	2101      	movs	r1, #1
 8014220:	4681      	mov	r9, r0
 8014222:	89a0      	ldrh	r0, [r4, #12]
 8014224:	f000 fdb2 	bl	8014d8c <uxr_seq_num_add>
 8014228:	f1b9 0f00 	cmp.w	r9, #0
 801422c:	d101      	bne.n	8014232 <uxr_receive_reliable_message+0x5e>
 801422e:	4285      	cmp	r5, r0
 8014230:	d047      	beq.n	80142c2 <uxr_receive_reliable_message+0xee>
 8014232:	8922      	ldrh	r2, [r4, #8]
 8014234:	fbb5 f0f2 	udiv	r0, r5, r2
 8014238:	fb02 5010 	mls	r0, r2, r0, r5
 801423c:	b280      	uxth	r0, r0
 801423e:	6863      	ldr	r3, [r4, #4]
 8014240:	fbb3 f3f2 	udiv	r3, r3, r2
 8014244:	fb00 f303 	mul.w	r3, r0, r3
 8014248:	6820      	ldr	r0, [r4, #0]
 801424a:	3304      	adds	r3, #4
 801424c:	4418      	add	r0, r3
 801424e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d1cf      	bne.n	80141f6 <uxr_receive_reliable_message+0x22>
 8014256:	4641      	mov	r1, r8
 8014258:	463a      	mov	r2, r7
 801425a:	f002 fb56 	bl	801690a <memcpy>
 801425e:	8921      	ldrh	r1, [r4, #8]
 8014260:	fbb5 f2f1 	udiv	r2, r5, r1
 8014264:	fb01 5212 	mls	r2, r1, r2, r5
 8014268:	b292      	uxth	r2, r2
 801426a:	6863      	ldr	r3, [r4, #4]
 801426c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014270:	fb02 f303 	mul.w	r3, r2, r3
 8014274:	6822      	ldr	r2, [r4, #0]
 8014276:	50d7      	str	r7, [r2, r3]
 8014278:	9a08      	ldr	r2, [sp, #32]
 801427a:	2301      	movs	r3, #1
 801427c:	7013      	strb	r3, [r2, #0]
 801427e:	f1b9 0f00 	cmp.w	r9, #0
 8014282:	d0b8      	beq.n	80141f6 <uxr_receive_reliable_message+0x22>
 8014284:	89a6      	ldrh	r6, [r4, #12]
 8014286:	4630      	mov	r0, r6
 8014288:	2101      	movs	r1, #1
 801428a:	f000 fd7f 	bl	8014d8c <uxr_seq_num_add>
 801428e:	8922      	ldrh	r2, [r4, #8]
 8014290:	6863      	ldr	r3, [r4, #4]
 8014292:	fbb3 f3f2 	udiv	r3, r3, r2
 8014296:	4606      	mov	r6, r0
 8014298:	fbb0 f0f2 	udiv	r0, r0, r2
 801429c:	fb02 6010 	mls	r0, r2, r0, r6
 80142a0:	b280      	uxth	r0, r0
 80142a2:	fb00 f303 	mul.w	r3, r0, r3
 80142a6:	6820      	ldr	r0, [r4, #0]
 80142a8:	3304      	adds	r3, #4
 80142aa:	4418      	add	r0, r3
 80142ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d0a0      	beq.n	80141f6 <uxr_receive_reliable_message+0x22>
 80142b4:	6923      	ldr	r3, [r4, #16]
 80142b6:	4798      	blx	r3
 80142b8:	2802      	cmp	r0, #2
 80142ba:	d008      	beq.n	80142ce <uxr_receive_reliable_message+0xfa>
 80142bc:	2801      	cmp	r0, #1
 80142be:	d0e2      	beq.n	8014286 <uxr_receive_reliable_message+0xb2>
 80142c0:	e799      	b.n	80141f6 <uxr_receive_reliable_message+0x22>
 80142c2:	9b08      	ldr	r3, [sp, #32]
 80142c4:	81a5      	strh	r5, [r4, #12]
 80142c6:	2601      	movs	r6, #1
 80142c8:	f883 9000 	strb.w	r9, [r3]
 80142cc:	e794      	b.n	80141f8 <uxr_receive_reliable_message+0x24>
 80142ce:	2601      	movs	r6, #1
 80142d0:	e792      	b.n	80141f8 <uxr_receive_reliable_message+0x24>
 80142d2:	bf00      	nop

080142d4 <uxr_next_input_reliable_buffer_available>:
 80142d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d8:	4604      	mov	r4, r0
 80142da:	460f      	mov	r7, r1
 80142dc:	8980      	ldrh	r0, [r0, #12]
 80142de:	2101      	movs	r1, #1
 80142e0:	4690      	mov	r8, r2
 80142e2:	f000 fd53 	bl	8014d8c <uxr_seq_num_add>
 80142e6:	8922      	ldrh	r2, [r4, #8]
 80142e8:	fbb0 f6f2 	udiv	r6, r0, r2
 80142ec:	fb02 0616 	mls	r6, r2, r6, r0
 80142f0:	b2b6      	uxth	r6, r6
 80142f2:	6863      	ldr	r3, [r4, #4]
 80142f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80142f8:	fb06 f303 	mul.w	r3, r6, r3
 80142fc:	6826      	ldr	r6, [r4, #0]
 80142fe:	3304      	adds	r3, #4
 8014300:	441e      	add	r6, r3
 8014302:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014306:	f1b9 0f00 	cmp.w	r9, #0
 801430a:	d023      	beq.n	8014354 <uxr_next_input_reliable_buffer_available+0x80>
 801430c:	6923      	ldr	r3, [r4, #16]
 801430e:	4605      	mov	r5, r0
 8014310:	4630      	mov	r0, r6
 8014312:	4798      	blx	r3
 8014314:	4682      	mov	sl, r0
 8014316:	b300      	cbz	r0, 801435a <uxr_next_input_reliable_buffer_available+0x86>
 8014318:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801431c:	2101      	movs	r1, #1
 801431e:	4650      	mov	r0, sl
 8014320:	f000 fd34 	bl	8014d8c <uxr_seq_num_add>
 8014324:	8921      	ldrh	r1, [r4, #8]
 8014326:	fbb0 f2f1 	udiv	r2, r0, r1
 801432a:	4682      	mov	sl, r0
 801432c:	fb01 0212 	mls	r2, r1, r2, r0
 8014330:	e9d4 0300 	ldrd	r0, r3, [r4]
 8014334:	b292      	uxth	r2, r2
 8014336:	fbb3 f3f1 	udiv	r3, r3, r1
 801433a:	fb02 f303 	mul.w	r3, r2, r3
 801433e:	3304      	adds	r3, #4
 8014340:	4418      	add	r0, r3
 8014342:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014346:	b12b      	cbz	r3, 8014354 <uxr_next_input_reliable_buffer_available+0x80>
 8014348:	6923      	ldr	r3, [r4, #16]
 801434a:	4798      	blx	r3
 801434c:	2802      	cmp	r0, #2
 801434e:	d01b      	beq.n	8014388 <uxr_next_input_reliable_buffer_available+0xb4>
 8014350:	2801      	cmp	r0, #1
 8014352:	d0e3      	beq.n	801431c <uxr_next_input_reliable_buffer_available+0x48>
 8014354:	2000      	movs	r0, #0
 8014356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801435a:	464a      	mov	r2, r9
 801435c:	4631      	mov	r1, r6
 801435e:	4638      	mov	r0, r7
 8014360:	f7f8 f8e0 	bl	800c524 <ucdr_init_buffer>
 8014364:	8921      	ldrh	r1, [r4, #8]
 8014366:	fbb5 f2f1 	udiv	r2, r5, r1
 801436a:	fb01 5212 	mls	r2, r1, r2, r5
 801436e:	b292      	uxth	r2, r2
 8014370:	6863      	ldr	r3, [r4, #4]
 8014372:	fbb3 f3f1 	udiv	r3, r3, r1
 8014376:	fb02 f303 	mul.w	r3, r2, r3
 801437a:	6822      	ldr	r2, [r4, #0]
 801437c:	f842 a003 	str.w	sl, [r2, r3]
 8014380:	2001      	movs	r0, #1
 8014382:	81a5      	strh	r5, [r4, #12]
 8014384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014388:	8920      	ldrh	r0, [r4, #8]
 801438a:	fbb5 f3f0 	udiv	r3, r5, r0
 801438e:	fb00 5513 	mls	r5, r0, r3, r5
 8014392:	b2ad      	uxth	r5, r5
 8014394:	6863      	ldr	r3, [r4, #4]
 8014396:	fbb3 f3f0 	udiv	r3, r3, r0
 801439a:	fb03 f505 	mul.w	r5, r3, r5
 801439e:	6823      	ldr	r3, [r4, #0]
 80143a0:	2000      	movs	r0, #0
 80143a2:	5158      	str	r0, [r3, r5]
 80143a4:	eb06 0108 	add.w	r1, r6, r8
 80143a8:	eba9 0208 	sub.w	r2, r9, r8
 80143ac:	4638      	mov	r0, r7
 80143ae:	f7f8 f8b9 	bl	800c524 <ucdr_init_buffer>
 80143b2:	4638      	mov	r0, r7
 80143b4:	4903      	ldr	r1, [pc, #12]	; (80143c4 <uxr_next_input_reliable_buffer_available+0xf0>)
 80143b6:	4622      	mov	r2, r4
 80143b8:	f7f8 f888 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 80143bc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80143c0:	2001      	movs	r0, #1
 80143c2:	e7c8      	b.n	8014356 <uxr_next_input_reliable_buffer_available+0x82>
 80143c4:	080140c9 	.word	0x080140c9

080143c8 <uxr_process_heartbeat>:
 80143c8:	b538      	push	{r3, r4, r5, lr}
 80143ca:	4611      	mov	r1, r2
 80143cc:	4604      	mov	r4, r0
 80143ce:	89c0      	ldrh	r0, [r0, #14]
 80143d0:	4615      	mov	r5, r2
 80143d2:	f000 fce3 	bl	8014d9c <uxr_seq_num_cmp>
 80143d6:	2800      	cmp	r0, #0
 80143d8:	bfb8      	it	lt
 80143da:	81e5      	strhlt	r5, [r4, #14]
 80143dc:	bd38      	pop	{r3, r4, r5, pc}
 80143de:	bf00      	nop

080143e0 <uxr_compute_acknack>:
 80143e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143e4:	8903      	ldrh	r3, [r0, #8]
 80143e6:	8985      	ldrh	r5, [r0, #12]
 80143e8:	4604      	mov	r4, r0
 80143ea:	460e      	mov	r6, r1
 80143ec:	b1d3      	cbz	r3, 8014424 <uxr_compute_acknack+0x44>
 80143ee:	4628      	mov	r0, r5
 80143f0:	2701      	movs	r7, #1
 80143f2:	e003      	b.n	80143fc <uxr_compute_acknack+0x1c>
 80143f4:	4567      	cmp	r7, ip
 80143f6:	d215      	bcs.n	8014424 <uxr_compute_acknack+0x44>
 80143f8:	89a0      	ldrh	r0, [r4, #12]
 80143fa:	3701      	adds	r7, #1
 80143fc:	b2b9      	uxth	r1, r7
 80143fe:	f000 fcc5 	bl	8014d8c <uxr_seq_num_add>
 8014402:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014406:	fbb0 f3fc 	udiv	r3, r0, ip
 801440a:	fb0c 0313 	mls	r3, ip, r3, r0
 801440e:	b29a      	uxth	r2, r3
 8014410:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014414:	fbb3 f3fc 	udiv	r3, r3, ip
 8014418:	fb02 f303 	mul.w	r3, r2, r3
 801441c:	58cb      	ldr	r3, [r1, r3]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d1e8      	bne.n	80143f4 <uxr_compute_acknack+0x14>
 8014422:	4605      	mov	r5, r0
 8014424:	8035      	strh	r5, [r6, #0]
 8014426:	2101      	movs	r1, #1
 8014428:	4628      	mov	r0, r5
 801442a:	89e7      	ldrh	r7, [r4, #14]
 801442c:	f000 fcb2 	bl	8014d94 <uxr_seq_num_sub>
 8014430:	4601      	mov	r1, r0
 8014432:	4638      	mov	r0, r7
 8014434:	f000 fcae 	bl	8014d94 <uxr_seq_num_sub>
 8014438:	4605      	mov	r5, r0
 801443a:	b318      	cbz	r0, 8014484 <uxr_compute_acknack+0xa4>
 801443c:	f04f 0900 	mov.w	r9, #0
 8014440:	464f      	mov	r7, r9
 8014442:	f04f 0801 	mov.w	r8, #1
 8014446:	fa1f f189 	uxth.w	r1, r9
 801444a:	8830      	ldrh	r0, [r6, #0]
 801444c:	f000 fc9e 	bl	8014d8c <uxr_seq_num_add>
 8014450:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014454:	fbb0 f3fc 	udiv	r3, r0, ip
 8014458:	e9d4 1200 	ldrd	r1, r2, [r4]
 801445c:	fb03 001c 	mls	r0, r3, ip, r0
 8014460:	b283      	uxth	r3, r0
 8014462:	fbb2 f2fc 	udiv	r2, r2, ip
 8014466:	fb02 f303 	mul.w	r3, r2, r3
 801446a:	fa08 f209 	lsl.w	r2, r8, r9
 801446e:	58cb      	ldr	r3, [r1, r3]
 8014470:	f109 0901 	add.w	r9, r9, #1
 8014474:	b90b      	cbnz	r3, 801447a <uxr_compute_acknack+0x9a>
 8014476:	4317      	orrs	r7, r2
 8014478:	b2bf      	uxth	r7, r7
 801447a:	454d      	cmp	r5, r9
 801447c:	d1e3      	bne.n	8014446 <uxr_compute_acknack+0x66>
 801447e:	4638      	mov	r0, r7
 8014480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014484:	4607      	mov	r7, r0
 8014486:	4638      	mov	r0, r7
 8014488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801448c <uxr_init_output_best_effort_stream>:
 801448c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8014490:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014494:	6001      	str	r1, [r0, #0]
 8014496:	7303      	strb	r3, [r0, #12]
 8014498:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801449c:	4770      	bx	lr
 801449e:	bf00      	nop

080144a0 <uxr_reset_output_best_effort_stream>:
 80144a0:	7b02      	ldrb	r2, [r0, #12]
 80144a2:	6042      	str	r2, [r0, #4]
 80144a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144a8:	81c3      	strh	r3, [r0, #14]
 80144aa:	4770      	bx	lr

080144ac <uxr_prepare_best_effort_buffer_to_write>:
 80144ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ae:	4604      	mov	r4, r0
 80144b0:	b083      	sub	sp, #12
 80144b2:	6840      	ldr	r0, [r0, #4]
 80144b4:	460d      	mov	r5, r1
 80144b6:	4616      	mov	r6, r2
 80144b8:	f7f9 fce2 	bl	800de80 <uxr_submessage_padding>
 80144bc:	6863      	ldr	r3, [r4, #4]
 80144be:	4418      	add	r0, r3
 80144c0:	68a3      	ldr	r3, [r4, #8]
 80144c2:	1942      	adds	r2, r0, r5
 80144c4:	4293      	cmp	r3, r2
 80144c6:	bf2c      	ite	cs
 80144c8:	2701      	movcs	r7, #1
 80144ca:	2700      	movcc	r7, #0
 80144cc:	d202      	bcs.n	80144d4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80144ce:	4638      	mov	r0, r7
 80144d0:	b003      	add	sp, #12
 80144d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144d4:	9000      	str	r0, [sp, #0]
 80144d6:	6821      	ldr	r1, [r4, #0]
 80144d8:	4630      	mov	r0, r6
 80144da:	2300      	movs	r3, #0
 80144dc:	f7f8 f810 	bl	800c500 <ucdr_init_buffer_origin_offset>
 80144e0:	6861      	ldr	r1, [r4, #4]
 80144e2:	4638      	mov	r0, r7
 80144e4:	4429      	add	r1, r5
 80144e6:	6061      	str	r1, [r4, #4]
 80144e8:	b003      	add	sp, #12
 80144ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080144ec <uxr_prepare_best_effort_buffer_to_send>:
 80144ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f0:	4604      	mov	r4, r0
 80144f2:	461d      	mov	r5, r3
 80144f4:	6840      	ldr	r0, [r0, #4]
 80144f6:	7b23      	ldrb	r3, [r4, #12]
 80144f8:	4298      	cmp	r0, r3
 80144fa:	bf8c      	ite	hi
 80144fc:	2601      	movhi	r6, #1
 80144fe:	2600      	movls	r6, #0
 8014500:	d802      	bhi.n	8014508 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014502:	4630      	mov	r0, r6
 8014504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014508:	4688      	mov	r8, r1
 801450a:	89e0      	ldrh	r0, [r4, #14]
 801450c:	2101      	movs	r1, #1
 801450e:	4617      	mov	r7, r2
 8014510:	f000 fc3c 	bl	8014d8c <uxr_seq_num_add>
 8014514:	6823      	ldr	r3, [r4, #0]
 8014516:	81e0      	strh	r0, [r4, #14]
 8014518:	8028      	strh	r0, [r5, #0]
 801451a:	f8c8 3000 	str.w	r3, [r8]
 801451e:	6863      	ldr	r3, [r4, #4]
 8014520:	603b      	str	r3, [r7, #0]
 8014522:	7b23      	ldrb	r3, [r4, #12]
 8014524:	6063      	str	r3, [r4, #4]
 8014526:	4630      	mov	r0, r6
 8014528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801452c <on_full_output_buffer>:
 801452c:	b538      	push	{r3, r4, r5, lr}
 801452e:	6802      	ldr	r2, [r0, #0]
 8014530:	460c      	mov	r4, r1
 8014532:	6809      	ldr	r1, [r1, #0]
 8014534:	8923      	ldrh	r3, [r4, #8]
 8014536:	eba2 0c01 	sub.w	ip, r2, r1
 801453a:	6862      	ldr	r2, [r4, #4]
 801453c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014540:	fbbc fcf2 	udiv	ip, ip, r2
 8014544:	f10c 0c01 	add.w	ip, ip, #1
 8014548:	fa1f fc8c 	uxth.w	ip, ip
 801454c:	fbbc fef3 	udiv	lr, ip, r3
 8014550:	fb03 c31e 	mls	r3, r3, lr, ip
 8014554:	b29b      	uxth	r3, r3
 8014556:	fb02 f303 	mul.w	r3, r2, r3
 801455a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801455e:	58ca      	ldr	r2, [r1, r3]
 8014560:	4463      	add	r3, ip
 8014562:	eba2 020c 	sub.w	r2, r2, ip
 8014566:	3308      	adds	r3, #8
 8014568:	4605      	mov	r5, r0
 801456a:	4419      	add	r1, r3
 801456c:	3a04      	subs	r2, #4
 801456e:	6903      	ldr	r3, [r0, #16]
 8014570:	f7f7 ffd0 	bl	800c514 <ucdr_init_buffer_origin>
 8014574:	4628      	mov	r0, r5
 8014576:	4903      	ldr	r1, [pc, #12]	; (8014584 <on_full_output_buffer+0x58>)
 8014578:	4622      	mov	r2, r4
 801457a:	f7f7 ffa7 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 801457e:	2000      	movs	r0, #0
 8014580:	bd38      	pop	{r3, r4, r5, pc}
 8014582:	bf00      	nop
 8014584:	0801452d 	.word	0x0801452d

08014588 <uxr_init_output_reliable_stream>:
 8014588:	b410      	push	{r4}
 801458a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801458e:	8103      	strh	r3, [r0, #8]
 8014590:	e9c0 1200 	strd	r1, r2, [r0]
 8014594:	f880 c00c 	strb.w	ip, [r0, #12]
 8014598:	b1d3      	cbz	r3, 80145d0 <uxr_init_output_reliable_stream+0x48>
 801459a:	f8c1 c000 	str.w	ip, [r1]
 801459e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80145a2:	f1bc 0f01 	cmp.w	ip, #1
 80145a6:	d913      	bls.n	80145d0 <uxr_init_output_reliable_stream+0x48>
 80145a8:	2301      	movs	r3, #1
 80145aa:	fbb3 f1fc 	udiv	r1, r3, ip
 80145ae:	fb0c 3111 	mls	r1, ip, r1, r3
 80145b2:	b289      	uxth	r1, r1
 80145b4:	6842      	ldr	r2, [r0, #4]
 80145b6:	6804      	ldr	r4, [r0, #0]
 80145b8:	fbb2 f2fc 	udiv	r2, r2, ip
 80145bc:	fb01 f202 	mul.w	r2, r1, r2
 80145c0:	7b01      	ldrb	r1, [r0, #12]
 80145c2:	50a1      	str	r1, [r4, r2]
 80145c4:	3301      	adds	r3, #1
 80145c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80145ca:	b29b      	uxth	r3, r3
 80145cc:	459c      	cmp	ip, r3
 80145ce:	d8ec      	bhi.n	80145aa <uxr_init_output_reliable_stream+0x22>
 80145d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80145d8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80145dc:	4905      	ldr	r1, [pc, #20]	; (80145f4 <uxr_init_output_reliable_stream+0x6c>)
 80145de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145e2:	f8c0 100e 	str.w	r1, [r0, #14]
 80145e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145ea:	2300      	movs	r3, #0
 80145ec:	8242      	strh	r2, [r0, #18]
 80145ee:	8403      	strh	r3, [r0, #32]
 80145f0:	4770      	bx	lr
 80145f2:	bf00      	nop
 80145f4:	ffff0000 	.word	0xffff0000

080145f8 <uxr_reset_output_reliable_stream>:
 80145f8:	8901      	ldrh	r1, [r0, #8]
 80145fa:	b1b1      	cbz	r1, 801462a <uxr_reset_output_reliable_stream+0x32>
 80145fc:	f04f 0c00 	mov.w	ip, #0
 8014600:	4663      	mov	r3, ip
 8014602:	fbb3 f2f1 	udiv	r2, r3, r1
 8014606:	fb01 3312 	mls	r3, r1, r2, r3
 801460a:	b29b      	uxth	r3, r3
 801460c:	6842      	ldr	r2, [r0, #4]
 801460e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014612:	6801      	ldr	r1, [r0, #0]
 8014614:	fb02 f303 	mul.w	r3, r2, r3
 8014618:	7b02      	ldrb	r2, [r0, #12]
 801461a:	50ca      	str	r2, [r1, r3]
 801461c:	f10c 0c01 	add.w	ip, ip, #1
 8014620:	8901      	ldrh	r1, [r0, #8]
 8014622:	fa1f f38c 	uxth.w	r3, ip
 8014626:	4299      	cmp	r1, r3
 8014628:	d8eb      	bhi.n	8014602 <uxr_reset_output_reliable_stream+0xa>
 801462a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801462e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014632:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014636:	4904      	ldr	r1, [pc, #16]	; (8014648 <uxr_reset_output_reliable_stream+0x50>)
 8014638:	f8c0 100e 	str.w	r1, [r0, #14]
 801463c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014640:	2300      	movs	r3, #0
 8014642:	8242      	strh	r2, [r0, #18]
 8014644:	8403      	strh	r3, [r0, #32]
 8014646:	4770      	bx	lr
 8014648:	ffff0000 	.word	0xffff0000

0801464c <uxr_prepare_reliable_buffer_to_write>:
 801464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014650:	4604      	mov	r4, r0
 8014652:	b091      	sub	sp, #68	; 0x44
 8014654:	8900      	ldrh	r0, [r0, #8]
 8014656:	89e6      	ldrh	r6, [r4, #14]
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	9204      	str	r2, [sp, #16]
 801465c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014660:	fb00 6212 	mls	r2, r0, r2, r6
 8014664:	b292      	uxth	r2, r2
 8014666:	6865      	ldr	r5, [r4, #4]
 8014668:	fbb5 f5f0 	udiv	r5, r5, r0
 801466c:	fb05 3202 	mla	r2, r5, r2, r3
 8014670:	3204      	adds	r2, #4
 8014672:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8014676:	f894 900c 	ldrb.w	r9, [r4, #12]
 801467a:	9203      	str	r2, [sp, #12]
 801467c:	468b      	mov	fp, r1
 801467e:	1f2f      	subs	r7, r5, #4
 8014680:	2800      	cmp	r0, #0
 8014682:	f000 814c 	beq.w	801491e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014686:	f04f 0c00 	mov.w	ip, #0
 801468a:	46e2      	mov	sl, ip
 801468c:	4661      	mov	r1, ip
 801468e:	fbb1 f2f0 	udiv	r2, r1, r0
 8014692:	fb00 1212 	mls	r2, r0, r2, r1
 8014696:	b292      	uxth	r2, r2
 8014698:	fb05 f202 	mul.w	r2, r5, r2
 801469c:	f10c 0c01 	add.w	ip, ip, #1
 80146a0:	589a      	ldr	r2, [r3, r2]
 80146a2:	454a      	cmp	r2, r9
 80146a4:	bf08      	it	eq
 80146a6:	f10a 0a01 	addeq.w	sl, sl, #1
 80146aa:	fa1f f18c 	uxth.w	r1, ip
 80146ae:	bf08      	it	eq
 80146b0:	fa1f fa8a 	uxtheq.w	sl, sl
 80146b4:	4281      	cmp	r1, r0
 80146b6:	d3ea      	bcc.n	801468e <uxr_prepare_reliable_buffer_to_write+0x42>
 80146b8:	4640      	mov	r0, r8
 80146ba:	2104      	movs	r1, #4
 80146bc:	f8cd a014 	str.w	sl, [sp, #20]
 80146c0:	f7f7 ff34 	bl	800c52c <ucdr_alignment>
 80146c4:	4480      	add	r8, r0
 80146c6:	eb08 020b 	add.w	r2, r8, fp
 80146ca:	42ba      	cmp	r2, r7
 80146cc:	f240 80cd 	bls.w	801486a <uxr_prepare_reliable_buffer_to_write+0x21e>
 80146d0:	7b22      	ldrb	r2, [r4, #12]
 80146d2:	445a      	add	r2, fp
 80146d4:	42ba      	cmp	r2, r7
 80146d6:	f240 80b5 	bls.w	8014844 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80146da:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 80146de:	33fc      	adds	r3, #252	; 0xfc
 80146e0:	b2ba      	uxth	r2, r7
 80146e2:	4413      	add	r3, r2
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	fb0a f903 	mul.w	r9, sl, r3
 80146ea:	45d9      	cmp	r9, fp
 80146ec:	9305      	str	r3, [sp, #20]
 80146ee:	9306      	str	r3, [sp, #24]
 80146f0:	f0c0 80b7 	bcc.w	8014862 <uxr_prepare_reliable_buffer_to_write+0x216>
 80146f4:	f108 0304 	add.w	r3, r8, #4
 80146f8:	42bb      	cmp	r3, r7
 80146fa:	f080 80db 	bcs.w	80148b4 <uxr_prepare_reliable_buffer_to_write+0x268>
 80146fe:	f1a2 0904 	sub.w	r9, r2, #4
 8014702:	eba9 0908 	sub.w	r9, r9, r8
 8014706:	9b05      	ldr	r3, [sp, #20]
 8014708:	fa1f f989 	uxth.w	r9, r9
 801470c:	ebab 0b09 	sub.w	fp, fp, r9
 8014710:	fbbb f2f3 	udiv	r2, fp, r3
 8014714:	fb03 b312 	mls	r3, r3, r2, fp
 8014718:	2b00      	cmp	r3, #0
 801471a:	f000 80c8 	beq.w	80148ae <uxr_prepare_reliable_buffer_to_write+0x262>
 801471e:	3201      	adds	r2, #1
 8014720:	b292      	uxth	r2, r2
 8014722:	9306      	str	r3, [sp, #24]
 8014724:	4552      	cmp	r2, sl
 8014726:	f200 809c 	bhi.w	8014862 <uxr_prepare_reliable_buffer_to_write+0x216>
 801472a:	f10d 0b20 	add.w	fp, sp, #32
 801472e:	2a00      	cmp	r2, #0
 8014730:	d042      	beq.n	80147b8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014732:	f8cd 801c 	str.w	r8, [sp, #28]
 8014736:	f04f 0a00 	mov.w	sl, #0
 801473a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801473e:	9505      	str	r5, [sp, #20]
 8014740:	f10d 0b20 	add.w	fp, sp, #32
 8014744:	4615      	mov	r5, r2
 8014746:	e000      	b.n	801474a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014748:	46c1      	mov	r9, r8
 801474a:	8920      	ldrh	r0, [r4, #8]
 801474c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014750:	fb00 6112 	mls	r1, r0, r2, r6
 8014754:	b28a      	uxth	r2, r1
 8014756:	6863      	ldr	r3, [r4, #4]
 8014758:	fbb3 f1f0 	udiv	r1, r3, r0
 801475c:	6823      	ldr	r3, [r4, #0]
 801475e:	fb02 f101 	mul.w	r1, r2, r1
 8014762:	3104      	adds	r1, #4
 8014764:	4419      	add	r1, r3
 8014766:	4658      	mov	r0, fp
 8014768:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801476c:	9200      	str	r2, [sp, #0]
 801476e:	2300      	movs	r3, #0
 8014770:	463a      	mov	r2, r7
 8014772:	f7f7 fec5 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8014776:	464a      	mov	r2, r9
 8014778:	2300      	movs	r3, #0
 801477a:	210d      	movs	r1, #13
 801477c:	4658      	mov	r0, fp
 801477e:	f7f9 fb3f 	bl	800de00 <uxr_buffer_submessage_header>
 8014782:	8921      	ldrh	r1, [r4, #8]
 8014784:	fbb6 f2f1 	udiv	r2, r6, r1
 8014788:	fb01 6212 	mls	r2, r1, r2, r6
 801478c:	b292      	uxth	r2, r2
 801478e:	6863      	ldr	r3, [r4, #4]
 8014790:	fbb3 f3f1 	udiv	r3, r3, r1
 8014794:	fb02 f303 	mul.w	r3, r2, r3
 8014798:	6822      	ldr	r2, [r4, #0]
 801479a:	4630      	mov	r0, r6
 801479c:	50d7      	str	r7, [r2, r3]
 801479e:	2101      	movs	r1, #1
 80147a0:	f000 faf4 	bl	8014d8c <uxr_seq_num_add>
 80147a4:	f10a 0a01 	add.w	sl, sl, #1
 80147a8:	fa1f f38a 	uxth.w	r3, sl
 80147ac:	429d      	cmp	r5, r3
 80147ae:	4606      	mov	r6, r0
 80147b0:	d8ca      	bhi.n	8014748 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80147b2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80147b6:	9d05      	ldr	r5, [sp, #20]
 80147b8:	8920      	ldrh	r0, [r4, #8]
 80147ba:	fbb6 f3f0 	udiv	r3, r6, r0
 80147be:	fb00 6313 	mls	r3, r0, r3, r6
 80147c2:	b299      	uxth	r1, r3
 80147c4:	6863      	ldr	r3, [r4, #4]
 80147c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80147ca:	fb01 f303 	mul.w	r3, r1, r3
 80147ce:	6821      	ldr	r1, [r4, #0]
 80147d0:	3304      	adds	r3, #4
 80147d2:	4419      	add	r1, r3
 80147d4:	463a      	mov	r2, r7
 80147d6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80147da:	9000      	str	r0, [sp, #0]
 80147dc:	2300      	movs	r3, #0
 80147de:	4658      	mov	r0, fp
 80147e0:	f7f7 fe8e 	bl	800c500 <ucdr_init_buffer_origin_offset>
 80147e4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80147e8:	4658      	mov	r0, fp
 80147ea:	fa1f f289 	uxth.w	r2, r9
 80147ee:	2302      	movs	r3, #2
 80147f0:	210d      	movs	r1, #13
 80147f2:	f7f9 fb05 	bl	800de00 <uxr_buffer_submessage_header>
 80147f6:	9b03      	ldr	r3, [sp, #12]
 80147f8:	8927      	ldrh	r7, [r4, #8]
 80147fa:	7b20      	ldrb	r0, [r4, #12]
 80147fc:	f108 0104 	add.w	r1, r8, #4
 8014800:	440b      	add	r3, r1
 8014802:	4619      	mov	r1, r3
 8014804:	fbb6 f3f7 	udiv	r3, r6, r7
 8014808:	fb07 6313 	mls	r3, r7, r3, r6
 801480c:	f1a5 0208 	sub.w	r2, r5, #8
 8014810:	b29d      	uxth	r5, r3
 8014812:	3004      	adds	r0, #4
 8014814:	6863      	ldr	r3, [r4, #4]
 8014816:	fbb3 f3f7 	udiv	r3, r3, r7
 801481a:	fb05 f303 	mul.w	r3, r5, r3
 801481e:	6825      	ldr	r5, [r4, #0]
 8014820:	4448      	add	r0, r9
 8014822:	50e8      	str	r0, [r5, r3]
 8014824:	9d04      	ldr	r5, [sp, #16]
 8014826:	eba2 0208 	sub.w	r2, r2, r8
 801482a:	4628      	mov	r0, r5
 801482c:	f7f7 fe7a 	bl	800c524 <ucdr_init_buffer>
 8014830:	4628      	mov	r0, r5
 8014832:	493c      	ldr	r1, [pc, #240]	; (8014924 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014834:	4622      	mov	r2, r4
 8014836:	f7f7 fe49 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 801483a:	2001      	movs	r0, #1
 801483c:	81e6      	strh	r6, [r4, #14]
 801483e:	b011      	add	sp, #68	; 0x44
 8014840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014844:	2101      	movs	r1, #1
 8014846:	89e0      	ldrh	r0, [r4, #14]
 8014848:	f000 faa0 	bl	8014d8c <uxr_seq_num_add>
 801484c:	8921      	ldrh	r1, [r4, #8]
 801484e:	4605      	mov	r5, r0
 8014850:	8a60      	ldrh	r0, [r4, #18]
 8014852:	f000 fa9b 	bl	8014d8c <uxr_seq_num_add>
 8014856:	4601      	mov	r1, r0
 8014858:	4628      	mov	r0, r5
 801485a:	f000 fa9f 	bl	8014d9c <uxr_seq_num_cmp>
 801485e:	2800      	cmp	r0, #0
 8014860:	dd42      	ble.n	80148e8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8014862:	2000      	movs	r0, #0
 8014864:	b011      	add	sp, #68	; 0x44
 8014866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486a:	8921      	ldrh	r1, [r4, #8]
 801486c:	8a60      	ldrh	r0, [r4, #18]
 801486e:	9205      	str	r2, [sp, #20]
 8014870:	f000 fa8c 	bl	8014d8c <uxr_seq_num_add>
 8014874:	4601      	mov	r1, r0
 8014876:	4630      	mov	r0, r6
 8014878:	f000 fa90 	bl	8014d9c <uxr_seq_num_cmp>
 801487c:	2800      	cmp	r0, #0
 801487e:	9a05      	ldr	r2, [sp, #20]
 8014880:	dcef      	bgt.n	8014862 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014882:	8927      	ldrh	r7, [r4, #8]
 8014884:	fbb6 f3f7 	udiv	r3, r6, r7
 8014888:	fb07 6313 	mls	r3, r7, r3, r6
 801488c:	b29d      	uxth	r5, r3
 801488e:	6863      	ldr	r3, [r4, #4]
 8014890:	6824      	ldr	r4, [r4, #0]
 8014892:	fbb3 f3f7 	udiv	r3, r3, r7
 8014896:	fb05 f303 	mul.w	r3, r5, r3
 801489a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801489e:	50e2      	str	r2, [r4, r3]
 80148a0:	2300      	movs	r3, #0
 80148a2:	f8cd 8000 	str.w	r8, [sp]
 80148a6:	f7f7 fe2b 	bl	800c500 <ucdr_init_buffer_origin_offset>
 80148aa:	2001      	movs	r0, #1
 80148ac:	e7da      	b.n	8014864 <uxr_prepare_reliable_buffer_to_write+0x218>
 80148ae:	b293      	uxth	r3, r2
 80148b0:	461a      	mov	r2, r3
 80148b2:	e737      	b.n	8014724 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80148b4:	4630      	mov	r0, r6
 80148b6:	2101      	movs	r1, #1
 80148b8:	9207      	str	r2, [sp, #28]
 80148ba:	f000 fa67 	bl	8014d8c <uxr_seq_num_add>
 80148be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80148c2:	fbb0 f1fc 	udiv	r1, r0, ip
 80148c6:	fb0c 0111 	mls	r1, ip, r1, r0
 80148ca:	4606      	mov	r6, r0
 80148cc:	b288      	uxth	r0, r1
 80148ce:	6863      	ldr	r3, [r4, #4]
 80148d0:	fbb3 f1fc 	udiv	r1, r3, ip
 80148d4:	6823      	ldr	r3, [r4, #0]
 80148d6:	9a07      	ldr	r2, [sp, #28]
 80148d8:	fb00 f101 	mul.w	r1, r0, r1
 80148dc:	3104      	adds	r1, #4
 80148de:	440b      	add	r3, r1
 80148e0:	9303      	str	r3, [sp, #12]
 80148e2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80148e6:	e70a      	b.n	80146fe <uxr_prepare_reliable_buffer_to_write+0xb2>
 80148e8:	8921      	ldrh	r1, [r4, #8]
 80148ea:	fbb5 f3f1 	udiv	r3, r5, r1
 80148ee:	fb01 5313 	mls	r3, r1, r3, r5
 80148f2:	b29a      	uxth	r2, r3
 80148f4:	6863      	ldr	r3, [r4, #4]
 80148f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80148fa:	6821      	ldr	r1, [r4, #0]
 80148fc:	9804      	ldr	r0, [sp, #16]
 80148fe:	fb02 f303 	mul.w	r3, r2, r3
 8014902:	3304      	adds	r3, #4
 8014904:	7b22      	ldrb	r2, [r4, #12]
 8014906:	4419      	add	r1, r3
 8014908:	445a      	add	r2, fp
 801490a:	f841 2c04 	str.w	r2, [r1, #-4]
 801490e:	7b23      	ldrb	r3, [r4, #12]
 8014910:	9300      	str	r3, [sp, #0]
 8014912:	2300      	movs	r3, #0
 8014914:	f7f7 fdf4 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8014918:	81e5      	strh	r5, [r4, #14]
 801491a:	2001      	movs	r0, #1
 801491c:	e7a2      	b.n	8014864 <uxr_prepare_reliable_buffer_to_write+0x218>
 801491e:	4682      	mov	sl, r0
 8014920:	e6ca      	b.n	80146b8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014922:	bf00      	nop
 8014924:	0801452d 	.word	0x0801452d

08014928 <uxr_prepare_next_reliable_buffer_to_send>:
 8014928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801492a:	4604      	mov	r4, r0
 801492c:	460f      	mov	r7, r1
 801492e:	8a00      	ldrh	r0, [r0, #16]
 8014930:	2101      	movs	r1, #1
 8014932:	4616      	mov	r6, r2
 8014934:	461d      	mov	r5, r3
 8014936:	f000 fa29 	bl	8014d8c <uxr_seq_num_add>
 801493a:	8028      	strh	r0, [r5, #0]
 801493c:	8922      	ldrh	r2, [r4, #8]
 801493e:	fbb0 f3f2 	udiv	r3, r0, r2
 8014942:	fb02 0c13 	mls	ip, r2, r3, r0
 8014946:	fa1f fc8c 	uxth.w	ip, ip
 801494a:	6863      	ldr	r3, [r4, #4]
 801494c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014950:	fb0c fc03 	mul.w	ip, ip, r3
 8014954:	6823      	ldr	r3, [r4, #0]
 8014956:	89e1      	ldrh	r1, [r4, #14]
 8014958:	f10c 0c04 	add.w	ip, ip, #4
 801495c:	4463      	add	r3, ip
 801495e:	603b      	str	r3, [r7, #0]
 8014960:	6823      	ldr	r3, [r4, #0]
 8014962:	449c      	add	ip, r3
 8014964:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014968:	6033      	str	r3, [r6, #0]
 801496a:	f000 fa17 	bl	8014d9c <uxr_seq_num_cmp>
 801496e:	2800      	cmp	r0, #0
 8014970:	dd01      	ble.n	8014976 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014972:	2000      	movs	r0, #0
 8014974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014976:	7b23      	ldrb	r3, [r4, #12]
 8014978:	6832      	ldr	r2, [r6, #0]
 801497a:	429a      	cmp	r2, r3
 801497c:	d9f9      	bls.n	8014972 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801497e:	8a61      	ldrh	r1, [r4, #18]
 8014980:	8a20      	ldrh	r0, [r4, #16]
 8014982:	f000 fa07 	bl	8014d94 <uxr_seq_num_sub>
 8014986:	8923      	ldrh	r3, [r4, #8]
 8014988:	4283      	cmp	r3, r0
 801498a:	d0f2      	beq.n	8014972 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801498c:	8828      	ldrh	r0, [r5, #0]
 801498e:	89e3      	ldrh	r3, [r4, #14]
 8014990:	8220      	strh	r0, [r4, #16]
 8014992:	4298      	cmp	r0, r3
 8014994:	d001      	beq.n	801499a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014996:	2001      	movs	r0, #1
 8014998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801499a:	2101      	movs	r1, #1
 801499c:	f000 f9f6 	bl	8014d8c <uxr_seq_num_add>
 80149a0:	81e0      	strh	r0, [r4, #14]
 80149a2:	2001      	movs	r0, #1
 80149a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149a6:	bf00      	nop

080149a8 <uxr_update_output_stream_heartbeat_timestamp>:
 80149a8:	b570      	push	{r4, r5, r6, lr}
 80149aa:	8a01      	ldrh	r1, [r0, #16]
 80149ac:	4604      	mov	r4, r0
 80149ae:	8a40      	ldrh	r0, [r0, #18]
 80149b0:	4615      	mov	r5, r2
 80149b2:	461e      	mov	r6, r3
 80149b4:	f000 f9f2 	bl	8014d9c <uxr_seq_num_cmp>
 80149b8:	2800      	cmp	r0, #0
 80149ba:	db07      	blt.n	80149cc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80149bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80149c4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80149c8:	2000      	movs	r0, #0
 80149ca:	bd70      	pop	{r4, r5, r6, pc}
 80149cc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80149d0:	b940      	cbnz	r0, 80149e4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80149d2:	2301      	movs	r3, #1
 80149d4:	f884 3020 	strb.w	r3, [r4, #32]
 80149d8:	3564      	adds	r5, #100	; 0x64
 80149da:	f146 0600 	adc.w	r6, r6, #0
 80149de:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80149e2:	bd70      	pop	{r4, r5, r6, pc}
 80149e4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80149e8:	4295      	cmp	r5, r2
 80149ea:	eb76 0303 	sbcs.w	r3, r6, r3
 80149ee:	bfa5      	ittet	ge
 80149f0:	3001      	addge	r0, #1
 80149f2:	f884 0020 	strbge.w	r0, [r4, #32]
 80149f6:	2000      	movlt	r0, #0
 80149f8:	2001      	movge	r0, #1
 80149fa:	e7ed      	b.n	80149d8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080149fc <uxr_begin_output_nack_buffer_it>:
 80149fc:	8a40      	ldrh	r0, [r0, #18]
 80149fe:	4770      	bx	lr

08014a00 <uxr_next_reliable_nack_buffer_to_send>:
 8014a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a04:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8014a08:	b082      	sub	sp, #8
 8014a0a:	f1b8 0f00 	cmp.w	r8, #0
 8014a0e:	d011      	beq.n	8014a34 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014a10:	4604      	mov	r4, r0
 8014a12:	8818      	ldrh	r0, [r3, #0]
 8014a14:	460e      	mov	r6, r1
 8014a16:	4617      	mov	r7, r2
 8014a18:	461d      	mov	r5, r3
 8014a1a:	2101      	movs	r1, #1
 8014a1c:	f000 f9b6 	bl	8014d8c <uxr_seq_num_add>
 8014a20:	8028      	strh	r0, [r5, #0]
 8014a22:	8a21      	ldrh	r1, [r4, #16]
 8014a24:	f000 f9ba 	bl	8014d9c <uxr_seq_num_cmp>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	dd07      	ble.n	8014a3c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8014a2c:	f04f 0800 	mov.w	r8, #0
 8014a30:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8014a34:	4640      	mov	r0, r8
 8014a36:	b002      	add	sp, #8
 8014a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a3c:	8921      	ldrh	r1, [r4, #8]
 8014a3e:	8828      	ldrh	r0, [r5, #0]
 8014a40:	6823      	ldr	r3, [r4, #0]
 8014a42:	fbb0 f2f1 	udiv	r2, r0, r1
 8014a46:	fb01 0c12 	mls	ip, r1, r2, r0
 8014a4a:	fa1f f28c 	uxth.w	r2, ip
 8014a4e:	9301      	str	r3, [sp, #4]
 8014a50:	6863      	ldr	r3, [r4, #4]
 8014a52:	fbb3 fcf1 	udiv	ip, r3, r1
 8014a56:	9b01      	ldr	r3, [sp, #4]
 8014a58:	fb02 fc0c 	mul.w	ip, r2, ip
 8014a5c:	f10c 0c04 	add.w	ip, ip, #4
 8014a60:	4463      	add	r3, ip
 8014a62:	6033      	str	r3, [r6, #0]
 8014a64:	6823      	ldr	r3, [r4, #0]
 8014a66:	4463      	add	r3, ip
 8014a68:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014a6c:	603b      	str	r3, [r7, #0]
 8014a6e:	7b22      	ldrb	r2, [r4, #12]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d0d2      	beq.n	8014a1a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8014a74:	4640      	mov	r0, r8
 8014a76:	b002      	add	sp, #8
 8014a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a7c <uxr_process_acknack>:
 8014a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7e:	4604      	mov	r4, r0
 8014a80:	460e      	mov	r6, r1
 8014a82:	4610      	mov	r0, r2
 8014a84:	2101      	movs	r1, #1
 8014a86:	f000 f985 	bl	8014d94 <uxr_seq_num_sub>
 8014a8a:	8a61      	ldrh	r1, [r4, #18]
 8014a8c:	f000 f982 	bl	8014d94 <uxr_seq_num_sub>
 8014a90:	b1c0      	cbz	r0, 8014ac4 <uxr_process_acknack+0x48>
 8014a92:	4605      	mov	r5, r0
 8014a94:	2700      	movs	r7, #0
 8014a96:	2101      	movs	r1, #1
 8014a98:	8a60      	ldrh	r0, [r4, #18]
 8014a9a:	f000 f977 	bl	8014d8c <uxr_seq_num_add>
 8014a9e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014aa2:	fbb0 f1fc 	udiv	r1, r0, ip
 8014aa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014aaa:	fb0c 0111 	mls	r1, ip, r1, r0
 8014aae:	b289      	uxth	r1, r1
 8014ab0:	3701      	adds	r7, #1
 8014ab2:	fbb3 f3fc 	udiv	r3, r3, ip
 8014ab6:	fb01 f303 	mul.w	r3, r1, r3
 8014aba:	42bd      	cmp	r5, r7
 8014abc:	7b21      	ldrb	r1, [r4, #12]
 8014abe:	8260      	strh	r0, [r4, #18]
 8014ac0:	50d1      	str	r1, [r2, r3]
 8014ac2:	d1e8      	bne.n	8014a96 <uxr_process_acknack+0x1a>
 8014ac4:	3e00      	subs	r6, #0
 8014ac6:	f04f 0300 	mov.w	r3, #0
 8014aca:	bf18      	it	ne
 8014acc:	2601      	movne	r6, #1
 8014ace:	f884 3020 	strb.w	r3, [r4, #32]
 8014ad2:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8014ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014ad8 <uxr_is_output_up_to_date>:
 8014ad8:	8a01      	ldrh	r1, [r0, #16]
 8014ada:	8a40      	ldrh	r0, [r0, #18]
 8014adc:	b508      	push	{r3, lr}
 8014ade:	f000 f95d 	bl	8014d9c <uxr_seq_num_cmp>
 8014ae2:	fab0 f080 	clz	r0, r0
 8014ae6:	0940      	lsrs	r0, r0, #5
 8014ae8:	bd08      	pop	{r3, pc}
 8014aea:	bf00      	nop

08014aec <get_available_free_slots>:
 8014aec:	8902      	ldrh	r2, [r0, #8]
 8014aee:	b1da      	cbz	r2, 8014b28 <get_available_free_slots+0x3c>
 8014af0:	b530      	push	{r4, r5, lr}
 8014af2:	2100      	movs	r1, #0
 8014af4:	6843      	ldr	r3, [r0, #4]
 8014af6:	6805      	ldr	r5, [r0, #0]
 8014af8:	7b04      	ldrb	r4, [r0, #12]
 8014afa:	fbb3 fef2 	udiv	lr, r3, r2
 8014afe:	4608      	mov	r0, r1
 8014b00:	460b      	mov	r3, r1
 8014b02:	fbb3 fcf2 	udiv	ip, r3, r2
 8014b06:	fb02 331c 	mls	r3, r2, ip, r3
 8014b0a:	b29b      	uxth	r3, r3
 8014b0c:	fb0e f303 	mul.w	r3, lr, r3
 8014b10:	3101      	adds	r1, #1
 8014b12:	f855 c003 	ldr.w	ip, [r5, r3]
 8014b16:	4564      	cmp	r4, ip
 8014b18:	bf08      	it	eq
 8014b1a:	3001      	addeq	r0, #1
 8014b1c:	b28b      	uxth	r3, r1
 8014b1e:	bf08      	it	eq
 8014b20:	b280      	uxtheq	r0, r0
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d3ed      	bcc.n	8014b02 <get_available_free_slots+0x16>
 8014b26:	bd30      	pop	{r4, r5, pc}
 8014b28:	4610      	mov	r0, r2
 8014b2a:	4770      	bx	lr

08014b2c <uxr_buffer_request_data>:
 8014b2c:	b530      	push	{r4, r5, lr}
 8014b2e:	b095      	sub	sp, #84	; 0x54
 8014b30:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014b34:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8014b36:	9303      	str	r3, [sp, #12]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	2d00      	cmp	r5, #0
 8014b3c:	bf14      	ite	ne
 8014b3e:	2101      	movne	r1, #1
 8014b40:	4611      	moveq	r1, r2
 8014b42:	4604      	mov	r4, r0
 8014b44:	f88d 301c 	strb.w	r3, [sp, #28]
 8014b48:	f88d 201d 	strb.w	r2, [sp, #29]
 8014b4c:	f88d 201e 	strb.w	r2, [sp, #30]
 8014b50:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8014b54:	d021      	beq.n	8014b9a <uxr_buffer_request_data+0x6e>
 8014b56:	682a      	ldr	r2, [r5, #0]
 8014b58:	686b      	ldr	r3, [r5, #4]
 8014b5a:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 8014b5e:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014b62:	2210      	movs	r2, #16
 8014b64:	2308      	movs	r3, #8
 8014b66:	2100      	movs	r1, #0
 8014b68:	e9cd 3100 	strd	r3, r1, [sp]
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	9905      	ldr	r1, [sp, #20]
 8014b70:	ab0c      	add	r3, sp, #48	; 0x30
 8014b72:	f7f8 fea7 	bl	800d8c4 <uxr_prepare_stream_to_write_submessage>
 8014b76:	b918      	cbnz	r0, 8014b80 <uxr_buffer_request_data+0x54>
 8014b78:	4604      	mov	r4, r0
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	b015      	add	sp, #84	; 0x54
 8014b7e:	bd30      	pop	{r4, r5, pc}
 8014b80:	9904      	ldr	r1, [sp, #16]
 8014b82:	aa06      	add	r2, sp, #24
 8014b84:	4620      	mov	r0, r4
 8014b86:	f7f8 ffd3 	bl	800db30 <uxr_init_base_object_request>
 8014b8a:	a906      	add	r1, sp, #24
 8014b8c:	4604      	mov	r4, r0
 8014b8e:	a80c      	add	r0, sp, #48	; 0x30
 8014b90:	f7fa face 	bl	800f130 <uxr_serialize_READ_DATA_Payload>
 8014b94:	4620      	mov	r0, r4
 8014b96:	b015      	add	sp, #84	; 0x54
 8014b98:	bd30      	pop	{r4, r5, pc}
 8014b9a:	2208      	movs	r2, #8
 8014b9c:	e7e2      	b.n	8014b64 <uxr_buffer_request_data+0x38>
 8014b9e:	bf00      	nop

08014ba0 <uxr_buffer_cancel_data>:
 8014ba0:	b510      	push	{r4, lr}
 8014ba2:	b094      	sub	sp, #80	; 0x50
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	9202      	str	r2, [sp, #8]
 8014ba8:	9205      	str	r2, [sp, #20]
 8014baa:	9301      	str	r3, [sp, #4]
 8014bac:	2201      	movs	r2, #1
 8014bae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014bb2:	f88d 301e 	strb.w	r3, [sp, #30]
 8014bb6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8014bba:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014bbe:	2308      	movs	r3, #8
 8014bc0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	2210      	movs	r2, #16
 8014bc8:	ab0c      	add	r3, sp, #48	; 0x30
 8014bca:	4604      	mov	r4, r0
 8014bcc:	9103      	str	r1, [sp, #12]
 8014bce:	f7f8 fe79 	bl	800d8c4 <uxr_prepare_stream_to_write_submessage>
 8014bd2:	b918      	cbnz	r0, 8014bdc <uxr_buffer_cancel_data+0x3c>
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	b014      	add	sp, #80	; 0x50
 8014bda:	bd10      	pop	{r4, pc}
 8014bdc:	9905      	ldr	r1, [sp, #20]
 8014bde:	aa06      	add	r2, sp, #24
 8014be0:	4620      	mov	r0, r4
 8014be2:	f7f8 ffa5 	bl	800db30 <uxr_init_base_object_request>
 8014be6:	a906      	add	r1, sp, #24
 8014be8:	4604      	mov	r4, r0
 8014bea:	a80c      	add	r0, sp, #48	; 0x30
 8014bec:	f7fa faa0 	bl	800f130 <uxr_serialize_READ_DATA_Payload>
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	b014      	add	sp, #80	; 0x50
 8014bf4:	bd10      	pop	{r4, pc}
 8014bf6:	bf00      	nop

08014bf8 <read_submessage_format>:
 8014bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bfc:	b095      	sub	sp, #84	; 0x54
 8014bfe:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8014c02:	b113      	cbz	r3, 8014c0a <read_submessage_format+0x12>
 8014c04:	b015      	add	sp, #84	; 0x54
 8014c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c0a:	460c      	mov	r4, r1
 8014c0c:	4615      	mov	r5, r2
 8014c0e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014c12:	4607      	mov	r7, r0
 8014c14:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014c16:	9004      	str	r0, [sp, #16]
 8014c18:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014c1a:	9005      	str	r0, [sp, #20]
 8014c1c:	1a52      	subs	r2, r2, r1
 8014c1e:	a80c      	add	r0, sp, #48	; 0x30
 8014c20:	4699      	mov	r9, r3
 8014c22:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8014c26:	f7f7 fc7d 	bl	800c524 <ucdr_init_buffer>
 8014c2a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014c2e:	a80c      	add	r0, sp, #48	; 0x30
 8014c30:	f7f7 fc4c 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8014c34:	69e2      	ldr	r2, [r4, #28]
 8014c36:	b19a      	cbz	r2, 8014c60 <read_submessage_format+0x68>
 8014c38:	f1b8 0f07 	cmp.w	r8, #7
 8014c3c:	f882 9014 	strb.w	r9, [r2, #20]
 8014c40:	d040      	beq.n	8014cc4 <read_submessage_format+0xcc>
 8014c42:	f1b8 0f08 	cmp.w	r8, #8
 8014c46:	d02e      	beq.n	8014ca6 <read_submessage_format+0xae>
 8014c48:	f1b8 0f06 	cmp.w	r8, #6
 8014c4c:	d011      	beq.n	8014c72 <read_submessage_format+0x7a>
 8014c4e:	2301      	movs	r3, #1
 8014c50:	7513      	strb	r3, [r2, #20]
 8014c52:	4629      	mov	r1, r5
 8014c54:	4620      	mov	r0, r4
 8014c56:	f7f7 fcb5 	bl	800c5c4 <ucdr_advance_buffer>
 8014c5a:	b015      	add	sp, #84	; 0x54
 8014c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c60:	f1b8 0f07 	cmp.w	r8, #7
 8014c64:	d02e      	beq.n	8014cc4 <read_submessage_format+0xcc>
 8014c66:	f1b8 0f08 	cmp.w	r8, #8
 8014c6a:	d01c      	beq.n	8014ca6 <read_submessage_format+0xae>
 8014c6c:	f1b8 0f06 	cmp.w	r8, #6
 8014c70:	d1ef      	bne.n	8014c52 <read_submessage_format+0x5a>
 8014c72:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8014c76:	f1b8 0f00 	cmp.w	r8, #0
 8014c7a:	d011      	beq.n	8014ca0 <read_submessage_format+0xa8>
 8014c7c:	ab0c      	add	r3, sp, #48	; 0x30
 8014c7e:	e9cd 3500 	strd	r3, r5, [sp]
 8014c82:	2306      	movs	r3, #6
 8014c84:	f88d 3016 	strb.w	r3, [sp, #22]
 8014c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014c8c:	9302      	str	r3, [sp, #8]
 8014c8e:	4632      	mov	r2, r6
 8014c90:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014c94:	4638      	mov	r0, r7
 8014c96:	47c0      	blx	r8
 8014c98:	2301      	movs	r3, #1
 8014c9a:	69e2      	ldr	r2, [r4, #28]
 8014c9c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8014ca0:	2a00      	cmp	r2, #0
 8014ca2:	d1d4      	bne.n	8014c4e <read_submessage_format+0x56>
 8014ca4:	e7d5      	b.n	8014c52 <read_submessage_format+0x5a>
 8014ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d0f8      	beq.n	8014ca0 <read_submessage_format+0xa8>
 8014cae:	a906      	add	r1, sp, #24
 8014cb0:	a80c      	add	r0, sp, #48	; 0x30
 8014cb2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014cb6:	f7fa fb01 	bl	800f2bc <uxr_deserialize_SampleIdentity>
 8014cba:	b9a0      	cbnz	r0, 8014ce6 <read_submessage_format+0xee>
 8014cbc:	69e2      	ldr	r2, [r4, #28]
 8014cbe:	2a00      	cmp	r2, #0
 8014cc0:	d1c5      	bne.n	8014c4e <read_submessage_format+0x56>
 8014cc2:	e7c6      	b.n	8014c52 <read_submessage_format+0x5a>
 8014cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014cc8:	b13b      	cbz	r3, 8014cda <read_submessage_format+0xe2>
 8014cca:	a906      	add	r1, sp, #24
 8014ccc:	a80c      	add	r0, sp, #48	; 0x30
 8014cce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014cd2:	f7f9 ffc7 	bl	800ec64 <uxr_deserialize_BaseObjectRequest>
 8014cd6:	bb60      	cbnz	r0, 8014d32 <read_submessage_format+0x13a>
 8014cd8:	69e2      	ldr	r2, [r4, #28]
 8014cda:	68a3      	ldr	r3, [r4, #8]
 8014cdc:	442b      	add	r3, r5
 8014cde:	60a3      	str	r3, [r4, #8]
 8014ce0:	2a00      	cmp	r2, #0
 8014ce2:	d1b4      	bne.n	8014c4e <read_submessage_format+0x56>
 8014ce4:	e7b5      	b.n	8014c52 <read_submessage_format+0x5a>
 8014ce6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8014cea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cec:	1a52      	subs	r2, r2, r1
 8014cee:	eba8 0803 	sub.w	r8, r8, r3
 8014cf2:	a80c      	add	r0, sp, #48	; 0x30
 8014cf4:	f7f7 fc16 	bl	800c524 <ucdr_init_buffer>
 8014cf8:	44a8      	add	r8, r5
 8014cfa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014cfe:	a80c      	add	r0, sp, #48	; 0x30
 8014d00:	f7f7 fbe4 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8014d04:	fa1f f888 	uxth.w	r8, r8
 8014d08:	ab0c      	add	r3, sp, #48	; 0x30
 8014d0a:	9300      	str	r3, [sp, #0]
 8014d0c:	f8cd 8004 	str.w	r8, [sp, #4]
 8014d10:	2108      	movs	r1, #8
 8014d12:	f88d 1016 	strb.w	r1, [sp, #22]
 8014d16:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8014d1a:	9102      	str	r1, [sp, #8]
 8014d1c:	ab06      	add	r3, sp, #24
 8014d1e:	4632      	mov	r2, r6
 8014d20:	9905      	ldr	r1, [sp, #20]
 8014d22:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8014d26:	4638      	mov	r0, r7
 8014d28:	47b0      	blx	r6
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8014d30:	e7c4      	b.n	8014cbc <read_submessage_format+0xc4>
 8014d32:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8014d36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d38:	1a52      	subs	r2, r2, r1
 8014d3a:	a80c      	add	r0, sp, #48	; 0x30
 8014d3c:	eba8 0803 	sub.w	r8, r8, r3
 8014d40:	f7f7 fbf0 	bl	800c524 <ucdr_init_buffer>
 8014d44:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014d48:	a80c      	add	r0, sp, #48	; 0x30
 8014d4a:	f7f7 fbbf 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8014d4e:	ab0c      	add	r3, sp, #48	; 0x30
 8014d50:	9300      	str	r3, [sp, #0]
 8014d52:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014d56:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014d5a:	44a8      	add	r8, r5
 8014d5c:	fa1f f888 	uxth.w	r8, r8
 8014d60:	f8cd 8004 	str.w	r8, [sp, #4]
 8014d64:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014d68:	2107      	movs	r1, #7
 8014d6a:	f88d 1016 	strb.w	r1, [sp, #22]
 8014d6e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8014d72:	9102      	str	r1, [sp, #8]
 8014d74:	4632      	mov	r2, r6
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8014d7c:	9905      	ldr	r1, [sp, #20]
 8014d7e:	4638      	mov	r0, r7
 8014d80:	47b0      	blx	r6
 8014d82:	2301      	movs	r3, #1
 8014d84:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8014d88:	e7a6      	b.n	8014cd8 <read_submessage_format+0xe0>
 8014d8a:	bf00      	nop

08014d8c <uxr_seq_num_add>:
 8014d8c:	4408      	add	r0, r1
 8014d8e:	b280      	uxth	r0, r0
 8014d90:	4770      	bx	lr
 8014d92:	bf00      	nop

08014d94 <uxr_seq_num_sub>:
 8014d94:	1a40      	subs	r0, r0, r1
 8014d96:	b280      	uxth	r0, r0
 8014d98:	4770      	bx	lr
 8014d9a:	bf00      	nop

08014d9c <uxr_seq_num_cmp>:
 8014d9c:	4288      	cmp	r0, r1
 8014d9e:	d011      	beq.n	8014dc4 <uxr_seq_num_cmp+0x28>
 8014da0:	d309      	bcc.n	8014db6 <uxr_seq_num_cmp+0x1a>
 8014da2:	4288      	cmp	r0, r1
 8014da4:	d910      	bls.n	8014dc8 <uxr_seq_num_cmp+0x2c>
 8014da6:	1a40      	subs	r0, r0, r1
 8014da8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014dac:	bfd4      	ite	le
 8014dae:	2001      	movle	r0, #1
 8014db0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8014db4:	4770      	bx	lr
 8014db6:	1a0b      	subs	r3, r1, r0
 8014db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014dbc:	daf1      	bge.n	8014da2 <uxr_seq_num_cmp+0x6>
 8014dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014dc2:	4770      	bx	lr
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	4770      	bx	lr
 8014dc8:	2001      	movs	r0, #1
 8014dca:	4770      	bx	lr

08014dcc <uxr_init_framing_io>:
 8014dcc:	2300      	movs	r3, #0
 8014dce:	7041      	strb	r1, [r0, #1]
 8014dd0:	7003      	strb	r3, [r0, #0]
 8014dd2:	8583      	strh	r3, [r0, #44]	; 0x2c
 8014dd4:	4770      	bx	lr
 8014dd6:	bf00      	nop

08014dd8 <uxr_write_framed_msg>:
 8014dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ddc:	4617      	mov	r7, r2
 8014dde:	7842      	ldrb	r2, [r0, #1]
 8014de0:	b083      	sub	sp, #12
 8014de2:	460e      	mov	r6, r1
 8014de4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8014de8:	469a      	mov	sl, r3
 8014dea:	2901      	cmp	r1, #1
 8014dec:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8014df0:	4604      	mov	r4, r0
 8014df2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014df6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8014dfa:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8014dfe:	f240 8137 	bls.w	8015070 <uxr_write_framed_msg+0x298>
 8014e02:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8014e06:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8014e0a:	2901      	cmp	r1, #1
 8014e0c:	f04f 0202 	mov.w	r2, #2
 8014e10:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014e14:	f240 808f 	bls.w	8014f36 <uxr_write_framed_msg+0x15e>
 8014e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e1a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8014e1e:	b2dd      	uxtb	r5, r3
 8014e20:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8014e24:	2203      	movs	r2, #3
 8014e26:	2901      	cmp	r1, #1
 8014e28:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014e2c:	f240 809a 	bls.w	8014f64 <uxr_write_framed_msg+0x18c>
 8014e30:	18a1      	adds	r1, r4, r2
 8014e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e34:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8014e38:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014e3c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8014e40:	3201      	adds	r2, #1
 8014e42:	2801      	cmp	r0, #1
 8014e44:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014e48:	f240 80a0 	bls.w	8014f8c <uxr_write_framed_msg+0x1b4>
 8014e4c:	18a0      	adds	r0, r4, r2
 8014e4e:	3201      	adds	r2, #1
 8014e50:	b2d2      	uxtb	r2, r2
 8014e52:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8014e56:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	f000 80a9 	beq.w	8014fb2 <uxr_write_framed_msg+0x1da>
 8014e60:	f04f 0900 	mov.w	r9, #0
 8014e64:	46c8      	mov	r8, r9
 8014e66:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014e6a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014e6e:	2901      	cmp	r1, #1
 8014e70:	f240 80c3 	bls.w	8014ffa <uxr_write_framed_msg+0x222>
 8014e74:	2a29      	cmp	r2, #41	; 0x29
 8014e76:	f200 809f 	bhi.w	8014fb8 <uxr_write_framed_msg+0x1e0>
 8014e7a:	18a1      	adds	r1, r4, r2
 8014e7c:	3201      	adds	r2, #1
 8014e7e:	b2d2      	uxtb	r2, r2
 8014e80:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8014e84:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014e88:	ea89 0303 	eor.w	r3, r9, r3
 8014e8c:	498c      	ldr	r1, [pc, #560]	; (80150c0 <uxr_write_framed_msg+0x2e8>)
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	f108 0801 	add.w	r8, r8, #1
 8014e94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e98:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e9e:	4543      	cmp	r3, r8
 8014ea0:	d8e1      	bhi.n	8014e66 <uxr_write_framed_msg+0x8e>
 8014ea2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014ea6:	fa5f f889 	uxtb.w	r8, r9
 8014eaa:	9301      	str	r3, [sp, #4]
 8014eac:	f04f 0900 	mov.w	r9, #0
 8014eb0:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8014eb4:	fa5f f18a 	uxtb.w	r1, sl
 8014eb8:	2901      	cmp	r1, #1
 8014eba:	d921      	bls.n	8014f00 <uxr_write_framed_msg+0x128>
 8014ebc:	2a29      	cmp	r2, #41	; 0x29
 8014ebe:	f240 80af 	bls.w	8015020 <uxr_write_framed_msg+0x248>
 8014ec2:	2500      	movs	r5, #0
 8014ec4:	e000      	b.n	8014ec8 <uxr_write_framed_msg+0xf0>
 8014ec6:	b160      	cbz	r0, 8014ee2 <uxr_write_framed_msg+0x10a>
 8014ec8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014ecc:	1b52      	subs	r2, r2, r5
 8014ece:	465b      	mov	r3, fp
 8014ed0:	4421      	add	r1, r4
 8014ed2:	4638      	mov	r0, r7
 8014ed4:	47b0      	blx	r6
 8014ed6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014eda:	4405      	add	r5, r0
 8014edc:	4295      	cmp	r5, r2
 8014ede:	d3f2      	bcc.n	8014ec6 <uxr_write_framed_msg+0xee>
 8014ee0:	d003      	beq.n	8014eea <uxr_write_framed_msg+0x112>
 8014ee2:	2000      	movs	r0, #0
 8014ee4:	b003      	add	sp, #12
 8014ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eea:	fa5f f18a 	uxtb.w	r1, sl
 8014eee:	f04f 0300 	mov.w	r3, #0
 8014ef2:	2901      	cmp	r1, #1
 8014ef4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014ef8:	f04f 0200 	mov.w	r2, #0
 8014efc:	f200 8090 	bhi.w	8015020 <uxr_write_framed_msg+0x248>
 8014f00:	1c51      	adds	r1, r2, #1
 8014f02:	b2c9      	uxtb	r1, r1
 8014f04:	2929      	cmp	r1, #41	; 0x29
 8014f06:	d8dc      	bhi.n	8014ec2 <uxr_write_framed_msg+0xea>
 8014f08:	18a5      	adds	r5, r4, r2
 8014f0a:	4421      	add	r1, r4
 8014f0c:	3202      	adds	r2, #2
 8014f0e:	f088 0820 	eor.w	r8, r8, #32
 8014f12:	4648      	mov	r0, r9
 8014f14:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8014f18:	b2d2      	uxtb	r2, r2
 8014f1a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8014f1e:	f04f 0901 	mov.w	r9, #1
 8014f22:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8014f26:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	f040 8085 	bne.w	801503a <uxr_write_framed_msg+0x262>
 8014f30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014f34:	e7bc      	b.n	8014eb0 <uxr_write_framed_msg+0xd8>
 8014f36:	4611      	mov	r1, r2
 8014f38:	f04f 0c03 	mov.w	ip, #3
 8014f3c:	2204      	movs	r2, #4
 8014f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f40:	4421      	add	r1, r4
 8014f42:	b2dd      	uxtb	r5, r3
 8014f44:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8014f48:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8014f4c:	44a4      	add	ip, r4
 8014f4e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8014f52:	f080 0020 	eor.w	r0, r0, #32
 8014f56:	2901      	cmp	r1, #1
 8014f58:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8014f5c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014f60:	f63f af66 	bhi.w	8014e30 <uxr_write_framed_msg+0x58>
 8014f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f66:	18a0      	adds	r0, r4, r2
 8014f68:	f085 0520 	eor.w	r5, r5, #32
 8014f6c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8014f70:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014f74:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8014f78:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8014f7c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8014f80:	3202      	adds	r2, #2
 8014f82:	2801      	cmp	r0, #1
 8014f84:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014f88:	f63f af60 	bhi.w	8014e4c <uxr_write_framed_msg+0x74>
 8014f8c:	1c50      	adds	r0, r2, #1
 8014f8e:	18a5      	adds	r5, r4, r2
 8014f90:	fa54 f080 	uxtab	r0, r4, r0
 8014f94:	3202      	adds	r2, #2
 8014f96:	f081 0120 	eor.w	r1, r1, #32
 8014f9a:	b2d2      	uxtb	r2, r2
 8014f9c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8014fa0:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8014fa4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8014fa8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	f47f af57 	bne.w	8014e60 <uxr_write_framed_msg+0x88>
 8014fb2:	9301      	str	r3, [sp, #4]
 8014fb4:	4698      	mov	r8, r3
 8014fb6:	e779      	b.n	8014eac <uxr_write_framed_msg+0xd4>
 8014fb8:	2500      	movs	r5, #0
 8014fba:	e001      	b.n	8014fc0 <uxr_write_framed_msg+0x1e8>
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	d090      	beq.n	8014ee2 <uxr_write_framed_msg+0x10a>
 8014fc0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014fc4:	1b52      	subs	r2, r2, r5
 8014fc6:	465b      	mov	r3, fp
 8014fc8:	4421      	add	r1, r4
 8014fca:	4638      	mov	r0, r7
 8014fcc:	47b0      	blx	r6
 8014fce:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014fd2:	4405      	add	r5, r0
 8014fd4:	4295      	cmp	r5, r2
 8014fd6:	d3f1      	bcc.n	8014fbc <uxr_write_framed_msg+0x1e4>
 8014fd8:	d183      	bne.n	8014ee2 <uxr_write_framed_msg+0x10a>
 8014fda:	f04f 0300 	mov.w	r3, #0
 8014fde:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fe4:	4543      	cmp	r3, r8
 8014fe6:	d964      	bls.n	80150b2 <uxr_write_framed_msg+0x2da>
 8014fe8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014fec:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014ff0:	2901      	cmp	r1, #1
 8014ff2:	f04f 0200 	mov.w	r2, #0
 8014ff6:	f63f af3d 	bhi.w	8014e74 <uxr_write_framed_msg+0x9c>
 8014ffa:	1c51      	adds	r1, r2, #1
 8014ffc:	b2c9      	uxtb	r1, r1
 8014ffe:	2929      	cmp	r1, #41	; 0x29
 8015000:	d8da      	bhi.n	8014fb8 <uxr_write_framed_msg+0x1e0>
 8015002:	18a0      	adds	r0, r4, r2
 8015004:	4421      	add	r1, r4
 8015006:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801500a:	3202      	adds	r2, #2
 801500c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8015010:	b2d2      	uxtb	r2, r2
 8015012:	f083 0020 	eor.w	r0, r3, #32
 8015016:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801501a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801501e:	e733      	b.n	8014e88 <uxr_write_framed_msg+0xb0>
 8015020:	18a1      	adds	r1, r4, r2
 8015022:	3201      	adds	r2, #1
 8015024:	4648      	mov	r0, r9
 8015026:	b2d2      	uxtb	r2, r2
 8015028:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 801502c:	f04f 0901 	mov.w	r9, #1
 8015030:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015034:	2800      	cmp	r0, #0
 8015036:	f43f af7b 	beq.w	8014f30 <uxr_write_framed_msg+0x158>
 801503a:	2500      	movs	r5, #0
 801503c:	e002      	b.n	8015044 <uxr_write_framed_msg+0x26c>
 801503e:	2800      	cmp	r0, #0
 8015040:	f43f af4f 	beq.w	8014ee2 <uxr_write_framed_msg+0x10a>
 8015044:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015048:	1b52      	subs	r2, r2, r5
 801504a:	465b      	mov	r3, fp
 801504c:	4421      	add	r1, r4
 801504e:	4638      	mov	r0, r7
 8015050:	47b0      	blx	r6
 8015052:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015056:	4405      	add	r5, r0
 8015058:	4295      	cmp	r5, r2
 801505a:	d3f0      	bcc.n	801503e <uxr_write_framed_msg+0x266>
 801505c:	f47f af41 	bne.w	8014ee2 <uxr_write_framed_msg+0x10a>
 8015060:	2300      	movs	r3, #0
 8015062:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015068:	b298      	uxth	r0, r3
 801506a:	b003      	add	sp, #12
 801506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015070:	217d      	movs	r1, #125	; 0x7d
 8015072:	f082 0220 	eor.w	r2, r2, #32
 8015076:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801507a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801507e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8015082:	2901      	cmp	r1, #1
 8015084:	f04f 0203 	mov.w	r2, #3
 8015088:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801508c:	d804      	bhi.n	8015098 <uxr_write_framed_msg+0x2c0>
 801508e:	4611      	mov	r1, r2
 8015090:	f04f 0c04 	mov.w	ip, #4
 8015094:	2205      	movs	r2, #5
 8015096:	e752      	b.n	8014f3e <uxr_write_framed_msg+0x166>
 8015098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801509a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801509e:	b2dd      	uxtb	r5, r3
 80150a0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80150a4:	2204      	movs	r2, #4
 80150a6:	2901      	cmp	r1, #1
 80150a8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80150ac:	f63f aec0 	bhi.w	8014e30 <uxr_write_framed_msg+0x58>
 80150b0:	e758      	b.n	8014f64 <uxr_write_framed_msg+0x18c>
 80150b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80150b6:	fa5f f889 	uxtb.w	r8, r9
 80150ba:	9301      	str	r3, [sp, #4]
 80150bc:	2200      	movs	r2, #0
 80150be:	e6f5      	b.n	8014eac <uxr_write_framed_msg+0xd4>
 80150c0:	080181a8 	.word	0x080181a8

080150c4 <uxr_framing_read_transport>:
 80150c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c8:	4604      	mov	r4, r0
 80150ca:	b083      	sub	sp, #12
 80150cc:	461f      	mov	r7, r3
 80150ce:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80150d2:	4689      	mov	r9, r1
 80150d4:	4692      	mov	sl, r2
 80150d6:	f7f8 fed9 	bl	800de8c <uxr_millis>
 80150da:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80150de:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80150e2:	42b3      	cmp	r3, r6
 80150e4:	4680      	mov	r8, r0
 80150e6:	d061      	beq.n	80151ac <uxr_framing_read_transport+0xe8>
 80150e8:	d81c      	bhi.n	8015124 <uxr_framing_read_transport+0x60>
 80150ea:	1e75      	subs	r5, r6, #1
 80150ec:	1aed      	subs	r5, r5, r3
 80150ee:	b2ed      	uxtb	r5, r5
 80150f0:	2600      	movs	r6, #0
 80150f2:	455d      	cmp	r5, fp
 80150f4:	d81f      	bhi.n	8015136 <uxr_framing_read_transport+0x72>
 80150f6:	19ab      	adds	r3, r5, r6
 80150f8:	455b      	cmp	r3, fp
 80150fa:	bf84      	itt	hi
 80150fc:	ebab 0605 	subhi.w	r6, fp, r5
 8015100:	b2f6      	uxtbhi	r6, r6
 8015102:	b9ed      	cbnz	r5, 8015140 <uxr_framing_read_transport+0x7c>
 8015104:	f04f 0b00 	mov.w	fp, #0
 8015108:	f7f8 fec0 	bl	800de8c <uxr_millis>
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	eba0 0808 	sub.w	r8, r0, r8
 8015112:	eba3 0308 	sub.w	r3, r3, r8
 8015116:	4658      	mov	r0, fp
 8015118:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801511c:	603b      	str	r3, [r7, #0]
 801511e:	b003      	add	sp, #12
 8015120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015124:	2e00      	cmp	r6, #0
 8015126:	d049      	beq.n	80151bc <uxr_framing_read_transport+0xf8>
 8015128:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801512c:	b2ed      	uxtb	r5, r5
 801512e:	3e01      	subs	r6, #1
 8015130:	455d      	cmp	r5, fp
 8015132:	b2f6      	uxtb	r6, r6
 8015134:	d9df      	bls.n	80150f6 <uxr_framing_read_transport+0x32>
 8015136:	fa5f f58b 	uxtb.w	r5, fp
 801513a:	2600      	movs	r6, #0
 801513c:	2d00      	cmp	r5, #0
 801513e:	d0e1      	beq.n	8015104 <uxr_framing_read_transport+0x40>
 8015140:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015144:	3102      	adds	r1, #2
 8015146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015148:	9300      	str	r3, [sp, #0]
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	4421      	add	r1, r4
 801514e:	462a      	mov	r2, r5
 8015150:	4650      	mov	r0, sl
 8015152:	47c8      	blx	r9
 8015154:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015158:	4a1a      	ldr	r2, [pc, #104]	; (80151c4 <uxr_framing_read_transport+0x100>)
 801515a:	4403      	add	r3, r0
 801515c:	0859      	lsrs	r1, r3, #1
 801515e:	fba2 2101 	umull	r2, r1, r2, r1
 8015162:	0889      	lsrs	r1, r1, #2
 8015164:	222a      	movs	r2, #42	; 0x2a
 8015166:	fb02 3111 	mls	r1, r2, r1, r3
 801516a:	4683      	mov	fp, r0
 801516c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015170:	2800      	cmp	r0, #0
 8015172:	d0c7      	beq.n	8015104 <uxr_framing_read_transport+0x40>
 8015174:	42a8      	cmp	r0, r5
 8015176:	d1c7      	bne.n	8015108 <uxr_framing_read_transport+0x44>
 8015178:	2e00      	cmp	r6, #0
 801517a:	d0c5      	beq.n	8015108 <uxr_framing_read_transport+0x44>
 801517c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801517e:	9300      	str	r3, [sp, #0]
 8015180:	3102      	adds	r1, #2
 8015182:	4632      	mov	r2, r6
 8015184:	4421      	add	r1, r4
 8015186:	2300      	movs	r3, #0
 8015188:	4650      	mov	r0, sl
 801518a:	47c8      	blx	r9
 801518c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015190:	4a0c      	ldr	r2, [pc, #48]	; (80151c4 <uxr_framing_read_transport+0x100>)
 8015192:	180b      	adds	r3, r1, r0
 8015194:	0859      	lsrs	r1, r3, #1
 8015196:	fba2 1201 	umull	r1, r2, r2, r1
 801519a:	0892      	lsrs	r2, r2, #2
 801519c:	212a      	movs	r1, #42	; 0x2a
 801519e:	fb01 3312 	mls	r3, r1, r2, r3
 80151a2:	eb00 0b05 	add.w	fp, r0, r5
 80151a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80151aa:	e7ad      	b.n	8015108 <uxr_framing_read_transport+0x44>
 80151ac:	2600      	movs	r6, #0
 80151ae:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80151b2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80151b4:	d9bf      	bls.n	8015136 <uxr_framing_read_transport+0x72>
 80151b6:	2102      	movs	r1, #2
 80151b8:	2529      	movs	r5, #41	; 0x29
 80151ba:	e7c4      	b.n	8015146 <uxr_framing_read_transport+0x82>
 80151bc:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80151c0:	b2ed      	uxtb	r5, r5
 80151c2:	e796      	b.n	80150f2 <uxr_framing_read_transport+0x2e>
 80151c4:	30c30c31 	.word	0x30c30c31

080151c8 <uxr_read_framed_msg>:
 80151c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151cc:	461e      	mov	r6, r3
 80151ce:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80151d2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80151d6:	429d      	cmp	r5, r3
 80151d8:	b083      	sub	sp, #12
 80151da:	4604      	mov	r4, r0
 80151dc:	4688      	mov	r8, r1
 80151de:	4691      	mov	r9, r2
 80151e0:	f000 8188 	beq.w	80154f4 <uxr_read_framed_msg+0x32c>
 80151e4:	7823      	ldrb	r3, [r4, #0]
 80151e6:	4dc1      	ldr	r5, [pc, #772]	; (80154ec <uxr_read_framed_msg+0x324>)
 80151e8:	4fc1      	ldr	r7, [pc, #772]	; (80154f0 <uxr_read_framed_msg+0x328>)
 80151ea:	2b07      	cmp	r3, #7
 80151ec:	d8fd      	bhi.n	80151ea <uxr_read_framed_msg+0x22>
 80151ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80151f2:	0115      	.short	0x0115
 80151f4:	00d600f6 	.word	0x00d600f6
 80151f8:	009000b9 	.word	0x009000b9
 80151fc:	0030004d 	.word	0x0030004d
 8015200:	0008      	.short	0x0008
 8015202:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015206:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801520a:	4299      	cmp	r1, r3
 801520c:	f000 814a 	beq.w	80154a4 <uxr_read_framed_msg+0x2dc>
 8015210:	18e2      	adds	r2, r4, r3
 8015212:	7892      	ldrb	r2, [r2, #2]
 8015214:	2a7d      	cmp	r2, #125	; 0x7d
 8015216:	f000 8199 	beq.w	801554c <uxr_read_framed_msg+0x384>
 801521a:	3301      	adds	r3, #1
 801521c:	0858      	lsrs	r0, r3, #1
 801521e:	fba5 1000 	umull	r1, r0, r5, r0
 8015222:	0880      	lsrs	r0, r0, #2
 8015224:	212a      	movs	r1, #42	; 0x2a
 8015226:	fb01 3310 	mls	r3, r1, r0, r3
 801522a:	2a7e      	cmp	r2, #126	; 0x7e
 801522c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015230:	f000 8252 	beq.w	80156d8 <uxr_read_framed_msg+0x510>
 8015234:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015236:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015238:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801523c:	b29b      	uxth	r3, r3
 801523e:	2200      	movs	r2, #0
 8015240:	4299      	cmp	r1, r3
 8015242:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015244:	7022      	strb	r2, [r4, #0]
 8015246:	f000 8179 	beq.w	801553c <uxr_read_framed_msg+0x374>
 801524a:	2000      	movs	r0, #0
 801524c:	b003      	add	sp, #12
 801524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015252:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015256:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801525a:	4299      	cmp	r1, r3
 801525c:	f000 8131 	beq.w	80154c2 <uxr_read_framed_msg+0x2fa>
 8015260:	18e2      	adds	r2, r4, r3
 8015262:	7890      	ldrb	r0, [r2, #2]
 8015264:	287d      	cmp	r0, #125	; 0x7d
 8015266:	f000 8190 	beq.w	801558a <uxr_read_framed_msg+0x3c2>
 801526a:	3301      	adds	r3, #1
 801526c:	085a      	lsrs	r2, r3, #1
 801526e:	fba5 1202 	umull	r1, r2, r5, r2
 8015272:	0892      	lsrs	r2, r2, #2
 8015274:	212a      	movs	r1, #42	; 0x2a
 8015276:	fb01 3312 	mls	r3, r1, r2, r3
 801527a:	287e      	cmp	r0, #126	; 0x7e
 801527c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015280:	f000 821a 	beq.w	80156b8 <uxr_read_framed_msg+0x4f0>
 8015284:	2307      	movs	r3, #7
 8015286:	86a0      	strh	r0, [r4, #52]	; 0x34
 8015288:	7023      	strb	r3, [r4, #0]
 801528a:	e7ae      	b.n	80151ea <uxr_read_framed_msg+0x22>
 801528c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801528e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015292:	459e      	cmp	lr, r3
 8015294:	d938      	bls.n	8015308 <uxr_read_framed_msg+0x140>
 8015296:	ee07 8a90 	vmov	s15, r8
 801529a:	212a      	movs	r1, #42	; 0x2a
 801529c:	e020      	b.n	80152e0 <uxr_read_framed_msg+0x118>
 801529e:	f89b c002 	ldrb.w	ip, [fp, #2]
 80152a2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80152a6:	f000 80d4 	beq.w	8015452 <uxr_read_framed_msg+0x28a>
 80152aa:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80152ae:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80152b2:	f000 8219 	beq.w	80156e8 <uxr_read_framed_msg+0x520>
 80152b6:	f806 c003 	strb.w	ip, [r6, r3]
 80152ba:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 80152be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80152c0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80152c4:	ea8a 000c 	eor.w	r0, sl, ip
 80152c8:	b2c0      	uxtb	r0, r0
 80152ca:	3301      	adds	r3, #1
 80152cc:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80152d0:	b29b      	uxth	r3, r3
 80152d2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80152d6:	4573      	cmp	r3, lr
 80152d8:	8663      	strh	r3, [r4, #50]	; 0x32
 80152da:	86e2      	strh	r2, [r4, #54]	; 0x36
 80152dc:	f080 8120 	bcs.w	8015520 <uxr_read_framed_msg+0x358>
 80152e0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80152e4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80152e8:	f100 0c01 	add.w	ip, r0, #1
 80152ec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80152f0:	fba5 8202 	umull	r8, r2, r5, r2
 80152f4:	0892      	lsrs	r2, r2, #2
 80152f6:	4582      	cmp	sl, r0
 80152f8:	eb04 0b00 	add.w	fp, r4, r0
 80152fc:	fb01 c212 	mls	r2, r1, r2, ip
 8015300:	d1cd      	bne.n	801529e <uxr_read_framed_msg+0xd6>
 8015302:	ee17 8a90 	vmov	r8, s15
 8015306:	459e      	cmp	lr, r3
 8015308:	f040 8111 	bne.w	801552e <uxr_read_framed_msg+0x366>
 801530c:	2306      	movs	r3, #6
 801530e:	7023      	strb	r3, [r4, #0]
 8015310:	e76b      	b.n	80151ea <uxr_read_framed_msg+0x22>
 8015312:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015316:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801531a:	4298      	cmp	r0, r3
 801531c:	f000 80c2 	beq.w	80154a4 <uxr_read_framed_msg+0x2dc>
 8015320:	18e2      	adds	r2, r4, r3
 8015322:	7891      	ldrb	r1, [r2, #2]
 8015324:	297d      	cmp	r1, #125	; 0x7d
 8015326:	f000 814c 	beq.w	80155c2 <uxr_read_framed_msg+0x3fa>
 801532a:	3301      	adds	r3, #1
 801532c:	085a      	lsrs	r2, r3, #1
 801532e:	fba5 0202 	umull	r0, r2, r5, r2
 8015332:	0892      	lsrs	r2, r2, #2
 8015334:	202a      	movs	r0, #42	; 0x2a
 8015336:	fb00 3312 	mls	r3, r0, r2, r3
 801533a:	297e      	cmp	r1, #126	; 0x7e
 801533c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015340:	f000 81ca 	beq.w	80156d8 <uxr_read_framed_msg+0x510>
 8015344:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015346:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801534a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801534c:	b29b      	uxth	r3, r3
 801534e:	2000      	movs	r0, #0
 8015350:	428b      	cmp	r3, r1
 8015352:	8623      	strh	r3, [r4, #48]	; 0x30
 8015354:	8660      	strh	r0, [r4, #50]	; 0x32
 8015356:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015358:	f240 80df 	bls.w	801551a <uxr_read_framed_msg+0x352>
 801535c:	7020      	strb	r0, [r4, #0]
 801535e:	b003      	add	sp, #12
 8015360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015364:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015368:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801536c:	4299      	cmp	r1, r3
 801536e:	f000 80a8 	beq.w	80154c2 <uxr_read_framed_msg+0x2fa>
 8015372:	18e2      	adds	r2, r4, r3
 8015374:	7890      	ldrb	r0, [r2, #2]
 8015376:	287d      	cmp	r0, #125	; 0x7d
 8015378:	f000 8164 	beq.w	8015644 <uxr_read_framed_msg+0x47c>
 801537c:	3301      	adds	r3, #1
 801537e:	085a      	lsrs	r2, r3, #1
 8015380:	fba5 1202 	umull	r1, r2, r5, r2
 8015384:	0892      	lsrs	r2, r2, #2
 8015386:	212a      	movs	r1, #42	; 0x2a
 8015388:	fb01 3312 	mls	r3, r1, r2, r3
 801538c:	287e      	cmp	r0, #126	; 0x7e
 801538e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015392:	f000 8191 	beq.w	80156b8 <uxr_read_framed_msg+0x4f0>
 8015396:	2304      	movs	r3, #4
 8015398:	8620      	strh	r0, [r4, #48]	; 0x30
 801539a:	7023      	strb	r3, [r4, #0]
 801539c:	e725      	b.n	80151ea <uxr_read_framed_msg+0x22>
 801539e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80153a2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80153a6:	4290      	cmp	r0, r2
 80153a8:	f000 80b3 	beq.w	8015512 <uxr_read_framed_msg+0x34a>
 80153ac:	18a3      	adds	r3, r4, r2
 80153ae:	7899      	ldrb	r1, [r3, #2]
 80153b0:	297d      	cmp	r1, #125	; 0x7d
 80153b2:	f000 8164 	beq.w	801567e <uxr_read_framed_msg+0x4b6>
 80153b6:	3201      	adds	r2, #1
 80153b8:	0850      	lsrs	r0, r2, #1
 80153ba:	fba5 3000 	umull	r3, r0, r5, r0
 80153be:	0880      	lsrs	r0, r0, #2
 80153c0:	232a      	movs	r3, #42	; 0x2a
 80153c2:	fb03 2210 	mls	r2, r3, r0, r2
 80153c6:	297e      	cmp	r1, #126	; 0x7e
 80153c8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80153cc:	f000 8188 	beq.w	80156e0 <uxr_read_framed_msg+0x518>
 80153d0:	7863      	ldrb	r3, [r4, #1]
 80153d2:	428b      	cmp	r3, r1
 80153d4:	bf0c      	ite	eq
 80153d6:	2303      	moveq	r3, #3
 80153d8:	2300      	movne	r3, #0
 80153da:	7023      	strb	r3, [r4, #0]
 80153dc:	e705      	b.n	80151ea <uxr_read_framed_msg+0x22>
 80153de:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80153e2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80153e6:	2200      	movs	r2, #0
 80153e8:	4299      	cmp	r1, r3
 80153ea:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80153ee:	d06c      	beq.n	80154ca <uxr_read_framed_msg+0x302>
 80153f0:	18e2      	adds	r2, r4, r3
 80153f2:	7890      	ldrb	r0, [r2, #2]
 80153f4:	287d      	cmp	r0, #125	; 0x7d
 80153f6:	f000 8101 	beq.w	80155fc <uxr_read_framed_msg+0x434>
 80153fa:	3301      	adds	r3, #1
 80153fc:	085a      	lsrs	r2, r3, #1
 80153fe:	fba5 1202 	umull	r1, r2, r5, r2
 8015402:	0892      	lsrs	r2, r2, #2
 8015404:	212a      	movs	r1, #42	; 0x2a
 8015406:	fb01 3312 	mls	r3, r1, r2, r3
 801540a:	287e      	cmp	r0, #126	; 0x7e
 801540c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8015410:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015414:	d059      	beq.n	80154ca <uxr_read_framed_msg+0x302>
 8015416:	2302      	movs	r3, #2
 8015418:	7023      	strb	r3, [r4, #0]
 801541a:	e6e6      	b.n	80151ea <uxr_read_framed_msg+0x22>
 801541c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015420:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015424:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015428:	1c51      	adds	r1, r2, #1
 801542a:	084b      	lsrs	r3, r1, #1
 801542c:	fba5 c303 	umull	ip, r3, r5, r3
 8015430:	089b      	lsrs	r3, r3, #2
 8015432:	fb0e 1313 	mls	r3, lr, r3, r1
 8015436:	4592      	cmp	sl, r2
 8015438:	eb04 0002 	add.w	r0, r4, r2
 801543c:	b2da      	uxtb	r2, r3
 801543e:	f43f af04 	beq.w	801524a <uxr_read_framed_msg+0x82>
 8015442:	7883      	ldrb	r3, [r0, #2]
 8015444:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015448:	2b7e      	cmp	r3, #126	; 0x7e
 801544a:	d1ed      	bne.n	8015428 <uxr_read_framed_msg+0x260>
 801544c:	2301      	movs	r3, #1
 801544e:	7023      	strb	r3, [r4, #0]
 8015450:	e6cb      	b.n	80151ea <uxr_read_framed_msg+0x22>
 8015452:	f100 0c01 	add.w	ip, r0, #1
 8015456:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801545a:	fba5 8202 	umull	r8, r2, r5, r2
 801545e:	0892      	lsrs	r2, r2, #2
 8015460:	fb01 c212 	mls	r2, r1, r2, ip
 8015464:	eb04 0c02 	add.w	ip, r4, r2
 8015468:	b2d2      	uxtb	r2, r2
 801546a:	4592      	cmp	sl, r2
 801546c:	f100 0002 	add.w	r0, r0, #2
 8015470:	f43f af47 	beq.w	8015302 <uxr_read_framed_msg+0x13a>
 8015474:	0842      	lsrs	r2, r0, #1
 8015476:	f89c a002 	ldrb.w	sl, [ip, #2]
 801547a:	fba5 8202 	umull	r8, r2, r5, r2
 801547e:	0892      	lsrs	r2, r2, #2
 8015480:	fb01 0012 	mls	r0, r1, r2, r0
 8015484:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8015488:	f08a 0c20 	eor.w	ip, sl, #32
 801548c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8015490:	f47f af11 	bne.w	80152b6 <uxr_read_framed_msg+0xee>
 8015494:	459e      	cmp	lr, r3
 8015496:	ee17 8a90 	vmov	r8, s15
 801549a:	f43f af37 	beq.w	801530c <uxr_read_framed_msg+0x144>
 801549e:	2301      	movs	r3, #1
 80154a0:	7023      	strb	r3, [r4, #0]
 80154a2:	e6a2      	b.n	80151ea <uxr_read_framed_msg+0x22>
 80154a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	2301      	movs	r3, #1
 80154aa:	9301      	str	r3, [sp, #4]
 80154ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154ae:	464a      	mov	r2, r9
 80154b0:	4641      	mov	r1, r8
 80154b2:	4620      	mov	r0, r4
 80154b4:	f7ff fe06 	bl	80150c4 <uxr_framing_read_transport>
 80154b8:	2800      	cmp	r0, #0
 80154ba:	f43f aec6 	beq.w	801524a <uxr_read_framed_msg+0x82>
 80154be:	7823      	ldrb	r3, [r4, #0]
 80154c0:	e693      	b.n	80151ea <uxr_read_framed_msg+0x22>
 80154c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154c4:	9300      	str	r3, [sp, #0]
 80154c6:	2302      	movs	r3, #2
 80154c8:	e7ef      	b.n	80154aa <uxr_read_framed_msg+0x2e2>
 80154ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154cc:	9300      	str	r3, [sp, #0]
 80154ce:	2304      	movs	r3, #4
 80154d0:	9301      	str	r3, [sp, #4]
 80154d2:	464a      	mov	r2, r9
 80154d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154d6:	4641      	mov	r1, r8
 80154d8:	4620      	mov	r0, r4
 80154da:	f7ff fdf3 	bl	80150c4 <uxr_framing_read_transport>
 80154de:	2800      	cmp	r0, #0
 80154e0:	d1ed      	bne.n	80154be <uxr_read_framed_msg+0x2f6>
 80154e2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80154e6:	2b7e      	cmp	r3, #126	; 0x7e
 80154e8:	d0e9      	beq.n	80154be <uxr_read_framed_msg+0x2f6>
 80154ea:	e6ae      	b.n	801524a <uxr_read_framed_msg+0x82>
 80154ec:	30c30c31 	.word	0x30c30c31
 80154f0:	080181a8 	.word	0x080181a8
 80154f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	2305      	movs	r3, #5
 80154fa:	9301      	str	r3, [sp, #4]
 80154fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154fe:	f7ff fde1 	bl	80150c4 <uxr_framing_read_transport>
 8015502:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015506:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801550a:	429a      	cmp	r2, r3
 801550c:	f43f ae9d 	beq.w	801524a <uxr_read_framed_msg+0x82>
 8015510:	e668      	b.n	80151e4 <uxr_read_framed_msg+0x1c>
 8015512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015514:	9300      	str	r3, [sp, #0]
 8015516:	2303      	movs	r3, #3
 8015518:	e7c7      	b.n	80154aa <uxr_read_framed_msg+0x2e2>
 801551a:	2305      	movs	r3, #5
 801551c:	7023      	strb	r3, [r4, #0]
 801551e:	e664      	b.n	80151ea <uxr_read_framed_msg+0x22>
 8015520:	ee17 8a90 	vmov	r8, s15
 8015524:	f43f aef2 	beq.w	801530c <uxr_read_framed_msg+0x144>
 8015528:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801552c:	d08e      	beq.n	801544c <uxr_read_framed_msg+0x284>
 801552e:	ebae 0303 	sub.w	r3, lr, r3
 8015532:	3302      	adds	r3, #2
 8015534:	9301      	str	r3, [sp, #4]
 8015536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015538:	9300      	str	r3, [sp, #0]
 801553a:	e7b7      	b.n	80154ac <uxr_read_framed_msg+0x2e4>
 801553c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801553e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015542:	7013      	strb	r3, [r2, #0]
 8015544:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015546:	b003      	add	sp, #12
 8015548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801554c:	f103 0c01 	add.w	ip, r3, #1
 8015550:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015554:	fba5 0202 	umull	r0, r2, r5, r2
 8015558:	0892      	lsrs	r2, r2, #2
 801555a:	202a      	movs	r0, #42	; 0x2a
 801555c:	fb00 c212 	mls	r2, r0, r2, ip
 8015560:	fa5f fc82 	uxtb.w	ip, r2
 8015564:	4561      	cmp	r1, ip
 8015566:	d09d      	beq.n	80154a4 <uxr_read_framed_msg+0x2dc>
 8015568:	3302      	adds	r3, #2
 801556a:	4422      	add	r2, r4
 801556c:	0859      	lsrs	r1, r3, #1
 801556e:	7892      	ldrb	r2, [r2, #2]
 8015570:	fba5 c101 	umull	ip, r1, r5, r1
 8015574:	0889      	lsrs	r1, r1, #2
 8015576:	fb00 3311 	mls	r3, r0, r1, r3
 801557a:	2a7e      	cmp	r2, #126	; 0x7e
 801557c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015580:	f000 80aa 	beq.w	80156d8 <uxr_read_framed_msg+0x510>
 8015584:	f082 0220 	eor.w	r2, r2, #32
 8015588:	e654      	b.n	8015234 <uxr_read_framed_msg+0x6c>
 801558a:	1c58      	adds	r0, r3, #1
 801558c:	0842      	lsrs	r2, r0, #1
 801558e:	fba5 c202 	umull	ip, r2, r5, r2
 8015592:	0892      	lsrs	r2, r2, #2
 8015594:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015598:	fb0c 0212 	mls	r2, ip, r2, r0
 801559c:	b2d0      	uxtb	r0, r2
 801559e:	4281      	cmp	r1, r0
 80155a0:	d08f      	beq.n	80154c2 <uxr_read_framed_msg+0x2fa>
 80155a2:	4422      	add	r2, r4
 80155a4:	3302      	adds	r3, #2
 80155a6:	7890      	ldrb	r0, [r2, #2]
 80155a8:	085a      	lsrs	r2, r3, #1
 80155aa:	fba5 1202 	umull	r1, r2, r5, r2
 80155ae:	0892      	lsrs	r2, r2, #2
 80155b0:	fb0c 3312 	mls	r3, ip, r2, r3
 80155b4:	287e      	cmp	r0, #126	; 0x7e
 80155b6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80155ba:	d07d      	beq.n	80156b8 <uxr_read_framed_msg+0x4f0>
 80155bc:	f080 0020 	eor.w	r0, r0, #32
 80155c0:	e660      	b.n	8015284 <uxr_read_framed_msg+0xbc>
 80155c2:	1c59      	adds	r1, r3, #1
 80155c4:	084a      	lsrs	r2, r1, #1
 80155c6:	fba5 c202 	umull	ip, r2, r5, r2
 80155ca:	0892      	lsrs	r2, r2, #2
 80155cc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80155d0:	fb0c 1212 	mls	r2, ip, r2, r1
 80155d4:	b2d1      	uxtb	r1, r2
 80155d6:	4288      	cmp	r0, r1
 80155d8:	f43f af64 	beq.w	80154a4 <uxr_read_framed_msg+0x2dc>
 80155dc:	4422      	add	r2, r4
 80155de:	3302      	adds	r3, #2
 80155e0:	7891      	ldrb	r1, [r2, #2]
 80155e2:	085a      	lsrs	r2, r3, #1
 80155e4:	fba5 0202 	umull	r0, r2, r5, r2
 80155e8:	0892      	lsrs	r2, r2, #2
 80155ea:	fb0c 3312 	mls	r3, ip, r2, r3
 80155ee:	297e      	cmp	r1, #126	; 0x7e
 80155f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80155f4:	d070      	beq.n	80156d8 <uxr_read_framed_msg+0x510>
 80155f6:	f081 0120 	eor.w	r1, r1, #32
 80155fa:	e6a3      	b.n	8015344 <uxr_read_framed_msg+0x17c>
 80155fc:	f103 0c01 	add.w	ip, r3, #1
 8015600:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015604:	fba5 0202 	umull	r0, r2, r5, r2
 8015608:	0892      	lsrs	r2, r2, #2
 801560a:	202a      	movs	r0, #42	; 0x2a
 801560c:	fb00 c212 	mls	r2, r0, r2, ip
 8015610:	fa5f fc82 	uxtb.w	ip, r2
 8015614:	4561      	cmp	r1, ip
 8015616:	f43f af58 	beq.w	80154ca <uxr_read_framed_msg+0x302>
 801561a:	4422      	add	r2, r4
 801561c:	3302      	adds	r3, #2
 801561e:	7891      	ldrb	r1, [r2, #2]
 8015620:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015624:	085a      	lsrs	r2, r3, #1
 8015626:	fba5 c202 	umull	ip, r2, r5, r2
 801562a:	0892      	lsrs	r2, r2, #2
 801562c:	fb00 3312 	mls	r3, r0, r2, r3
 8015630:	297e      	cmp	r1, #126	; 0x7e
 8015632:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015636:	f43f af48 	beq.w	80154ca <uxr_read_framed_msg+0x302>
 801563a:	f081 0120 	eor.w	r1, r1, #32
 801563e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015642:	e6e8      	b.n	8015416 <uxr_read_framed_msg+0x24e>
 8015644:	1c58      	adds	r0, r3, #1
 8015646:	0842      	lsrs	r2, r0, #1
 8015648:	fba5 c202 	umull	ip, r2, r5, r2
 801564c:	0892      	lsrs	r2, r2, #2
 801564e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015652:	fb0c 0212 	mls	r2, ip, r2, r0
 8015656:	b2d0      	uxtb	r0, r2
 8015658:	4281      	cmp	r1, r0
 801565a:	f43f af32 	beq.w	80154c2 <uxr_read_framed_msg+0x2fa>
 801565e:	4422      	add	r2, r4
 8015660:	3302      	adds	r3, #2
 8015662:	7890      	ldrb	r0, [r2, #2]
 8015664:	085a      	lsrs	r2, r3, #1
 8015666:	fba5 1202 	umull	r1, r2, r5, r2
 801566a:	0892      	lsrs	r2, r2, #2
 801566c:	fb0c 3312 	mls	r3, ip, r2, r3
 8015670:	287e      	cmp	r0, #126	; 0x7e
 8015672:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015676:	d01f      	beq.n	80156b8 <uxr_read_framed_msg+0x4f0>
 8015678:	f080 0020 	eor.w	r0, r0, #32
 801567c:	e68b      	b.n	8015396 <uxr_read_framed_msg+0x1ce>
 801567e:	1c51      	adds	r1, r2, #1
 8015680:	084b      	lsrs	r3, r1, #1
 8015682:	fba5 c303 	umull	ip, r3, r5, r3
 8015686:	089b      	lsrs	r3, r3, #2
 8015688:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801568c:	fb0c 1313 	mls	r3, ip, r3, r1
 8015690:	b2d9      	uxtb	r1, r3
 8015692:	4288      	cmp	r0, r1
 8015694:	f43f af3d 	beq.w	8015512 <uxr_read_framed_msg+0x34a>
 8015698:	3202      	adds	r2, #2
 801569a:	4423      	add	r3, r4
 801569c:	0850      	lsrs	r0, r2, #1
 801569e:	789b      	ldrb	r3, [r3, #2]
 80156a0:	fba5 1000 	umull	r1, r0, r5, r0
 80156a4:	0880      	lsrs	r0, r0, #2
 80156a6:	fb0c 2210 	mls	r2, ip, r0, r2
 80156aa:	2b7e      	cmp	r3, #126	; 0x7e
 80156ac:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80156b0:	d016      	beq.n	80156e0 <uxr_read_framed_msg+0x518>
 80156b2:	f083 0120 	eor.w	r1, r3, #32
 80156b6:	e68b      	b.n	80153d0 <uxr_read_framed_msg+0x208>
 80156b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	2302      	movs	r3, #2
 80156be:	9301      	str	r3, [sp, #4]
 80156c0:	464a      	mov	r2, r9
 80156c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156c4:	4641      	mov	r1, r8
 80156c6:	4620      	mov	r0, r4
 80156c8:	f7ff fcfc 	bl	80150c4 <uxr_framing_read_transport>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	f47f aef6 	bne.w	80154be <uxr_read_framed_msg+0x2f6>
 80156d2:	2301      	movs	r3, #1
 80156d4:	7023      	strb	r3, [r4, #0]
 80156d6:	e588      	b.n	80151ea <uxr_read_framed_msg+0x22>
 80156d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156da:	9300      	str	r3, [sp, #0]
 80156dc:	2301      	movs	r3, #1
 80156de:	e7ee      	b.n	80156be <uxr_read_framed_msg+0x4f6>
 80156e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156e2:	9300      	str	r3, [sp, #0]
 80156e4:	2303      	movs	r3, #3
 80156e6:	e7ea      	b.n	80156be <uxr_read_framed_msg+0x4f6>
 80156e8:	ee17 8a90 	vmov	r8, s15
 80156ec:	e6ae      	b.n	801544c <uxr_read_framed_msg+0x284>
 80156ee:	bf00      	nop

080156f0 <rcl_get_default_domain_id>:
 80156f0:	b530      	push	{r4, r5, lr}
 80156f2:	b083      	sub	sp, #12
 80156f4:	2300      	movs	r3, #0
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	b1d0      	cbz	r0, 8015730 <rcl_get_default_domain_id+0x40>
 80156fa:	4604      	mov	r4, r0
 80156fc:	4669      	mov	r1, sp
 80156fe:	4815      	ldr	r0, [pc, #84]	; (8015754 <rcl_get_default_domain_id+0x64>)
 8015700:	f7fc fc32 	bl	8011f68 <rcutils_get_env>
 8015704:	4602      	mov	r2, r0
 8015706:	b110      	cbz	r0, 801570e <rcl_get_default_domain_id+0x1e>
 8015708:	2001      	movs	r0, #1
 801570a:	b003      	add	sp, #12
 801570c:	bd30      	pop	{r4, r5, pc}
 801570e:	9b00      	ldr	r3, [sp, #0]
 8015710:	b18b      	cbz	r3, 8015736 <rcl_get_default_domain_id+0x46>
 8015712:	7818      	ldrb	r0, [r3, #0]
 8015714:	2800      	cmp	r0, #0
 8015716:	d0f8      	beq.n	801570a <rcl_get_default_domain_id+0x1a>
 8015718:	a901      	add	r1, sp, #4
 801571a:	4618      	mov	r0, r3
 801571c:	9201      	str	r2, [sp, #4]
 801571e:	f000 fe73 	bl	8016408 <strtoul>
 8015722:	4605      	mov	r5, r0
 8015724:	b150      	cbz	r0, 801573c <rcl_get_default_domain_id+0x4c>
 8015726:	1c43      	adds	r3, r0, #1
 8015728:	d00d      	beq.n	8015746 <rcl_get_default_domain_id+0x56>
 801572a:	6025      	str	r5, [r4, #0]
 801572c:	2000      	movs	r0, #0
 801572e:	e7ec      	b.n	801570a <rcl_get_default_domain_id+0x1a>
 8015730:	200b      	movs	r0, #11
 8015732:	b003      	add	sp, #12
 8015734:	bd30      	pop	{r4, r5, pc}
 8015736:	4618      	mov	r0, r3
 8015738:	b003      	add	sp, #12
 801573a:	bd30      	pop	{r4, r5, pc}
 801573c:	9b01      	ldr	r3, [sp, #4]
 801573e:	781b      	ldrb	r3, [r3, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d0f2      	beq.n	801572a <rcl_get_default_domain_id+0x3a>
 8015744:	e7e0      	b.n	8015708 <rcl_get_default_domain_id+0x18>
 8015746:	f001 f8ab 	bl	80168a0 <__errno>
 801574a:	6803      	ldr	r3, [r0, #0]
 801574c:	2b22      	cmp	r3, #34	; 0x22
 801574e:	d1ec      	bne.n	801572a <rcl_get_default_domain_id+0x3a>
 8015750:	e7da      	b.n	8015708 <rcl_get_default_domain_id+0x18>
 8015752:	bf00      	nop
 8015754:	080183a8 	.word	0x080183a8

08015758 <rcl_expand_topic_name>:
 8015758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801575c:	b08b      	sub	sp, #44	; 0x2c
 801575e:	9306      	str	r3, [sp, #24]
 8015760:	2800      	cmp	r0, #0
 8015762:	f000 80ad 	beq.w	80158c0 <rcl_expand_topic_name+0x168>
 8015766:	460e      	mov	r6, r1
 8015768:	2900      	cmp	r1, #0
 801576a:	f000 80a9 	beq.w	80158c0 <rcl_expand_topic_name+0x168>
 801576e:	4617      	mov	r7, r2
 8015770:	2a00      	cmp	r2, #0
 8015772:	f000 80a5 	beq.w	80158c0 <rcl_expand_topic_name+0x168>
 8015776:	2b00      	cmp	r3, #0
 8015778:	f000 80a2 	beq.w	80158c0 <rcl_expand_topic_name+0x168>
 801577c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801577e:	2b00      	cmp	r3, #0
 8015780:	f000 809e 	beq.w	80158c0 <rcl_expand_topic_name+0x168>
 8015784:	2200      	movs	r2, #0
 8015786:	a909      	add	r1, sp, #36	; 0x24
 8015788:	4680      	mov	r8, r0
 801578a:	f000 f9fb 	bl	8015b84 <rcl_validate_topic_name>
 801578e:	4604      	mov	r4, r0
 8015790:	2800      	cmp	r0, #0
 8015792:	f040 8096 	bne.w	80158c2 <rcl_expand_topic_name+0x16a>
 8015796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015798:	2b00      	cmp	r3, #0
 801579a:	f040 809a 	bne.w	80158d2 <rcl_expand_topic_name+0x17a>
 801579e:	4602      	mov	r2, r0
 80157a0:	a909      	add	r1, sp, #36	; 0x24
 80157a2:	4630      	mov	r0, r6
 80157a4:	f7fd f83e 	bl	8012824 <rmw_validate_node_name>
 80157a8:	2800      	cmp	r0, #0
 80157aa:	f040 808e 	bne.w	80158ca <rcl_expand_topic_name+0x172>
 80157ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157b0:	2a00      	cmp	r2, #0
 80157b2:	f040 8093 	bne.w	80158dc <rcl_expand_topic_name+0x184>
 80157b6:	a909      	add	r1, sp, #36	; 0x24
 80157b8:	4638      	mov	r0, r7
 80157ba:	f7fd f815 	bl	80127e8 <rmw_validate_namespace>
 80157be:	2800      	cmp	r0, #0
 80157c0:	f040 8083 	bne.w	80158ca <rcl_expand_topic_name+0x172>
 80157c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80157c6:	2c00      	cmp	r4, #0
 80157c8:	f040 80ed 	bne.w	80159a6 <rcl_expand_topic_name+0x24e>
 80157cc:	217b      	movs	r1, #123	; 0x7b
 80157ce:	4640      	mov	r0, r8
 80157d0:	f000 ffda 	bl	8016788 <strchr>
 80157d4:	f898 3000 	ldrb.w	r3, [r8]
 80157d8:	2b2f      	cmp	r3, #47	; 0x2f
 80157da:	4605      	mov	r5, r0
 80157dc:	f000 809e 	beq.w	801591c <rcl_expand_topic_name+0x1c4>
 80157e0:	2b7e      	cmp	r3, #126	; 0x7e
 80157e2:	f040 80a2 	bne.w	801592a <rcl_expand_topic_name+0x1d2>
 80157e6:	4638      	mov	r0, r7
 80157e8:	f7ea fd1c 	bl	8000224 <strlen>
 80157ec:	4a82      	ldr	r2, [pc, #520]	; (80159f8 <rcl_expand_topic_name+0x2a0>)
 80157ee:	4b83      	ldr	r3, [pc, #524]	; (80159fc <rcl_expand_topic_name+0x2a4>)
 80157f0:	2801      	cmp	r0, #1
 80157f2:	bf18      	it	ne
 80157f4:	4613      	movne	r3, r2
 80157f6:	9302      	str	r3, [sp, #8]
 80157f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80157fa:	9300      	str	r3, [sp, #0]
 80157fc:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015800:	f108 0301 	add.w	r3, r8, #1
 8015804:	9305      	str	r3, [sp, #20]
 8015806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801580a:	9301      	str	r3, [sp, #4]
 801580c:	ab14      	add	r3, sp, #80	; 0x50
 801580e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015810:	f7fc fbd2 	bl	8011fb8 <rcutils_format_string_limit>
 8015814:	4682      	mov	sl, r0
 8015816:	2800      	cmp	r0, #0
 8015818:	f000 80c7 	beq.w	80159aa <rcl_expand_topic_name+0x252>
 801581c:	2d00      	cmp	r5, #0
 801581e:	f000 80a2 	beq.w	8015966 <rcl_expand_topic_name+0x20e>
 8015822:	217b      	movs	r1, #123	; 0x7b
 8015824:	f000 ffb0 	bl	8016788 <strchr>
 8015828:	46d1      	mov	r9, sl
 801582a:	4605      	mov	r5, r0
 801582c:	9407      	str	r4, [sp, #28]
 801582e:	46d3      	mov	fp, sl
 8015830:	464c      	mov	r4, r9
 8015832:	2d00      	cmp	r5, #0
 8015834:	f000 80be 	beq.w	80159b4 <rcl_expand_topic_name+0x25c>
 8015838:	217d      	movs	r1, #125	; 0x7d
 801583a:	4620      	mov	r0, r4
 801583c:	f000 ffa4 	bl	8016788 <strchr>
 8015840:	eba0 0905 	sub.w	r9, r0, r5
 8015844:	f109 0a01 	add.w	sl, r9, #1
 8015848:	486d      	ldr	r0, [pc, #436]	; (8015a00 <rcl_expand_topic_name+0x2a8>)
 801584a:	4652      	mov	r2, sl
 801584c:	4629      	mov	r1, r5
 801584e:	f000 ffa8 	bl	80167a2 <strncmp>
 8015852:	2800      	cmp	r0, #0
 8015854:	d067      	beq.n	8015926 <rcl_expand_topic_name+0x1ce>
 8015856:	486b      	ldr	r0, [pc, #428]	; (8015a04 <rcl_expand_topic_name+0x2ac>)
 8015858:	4652      	mov	r2, sl
 801585a:	4629      	mov	r1, r5
 801585c:	f000 ffa1 	bl	80167a2 <strncmp>
 8015860:	b130      	cbz	r0, 8015870 <rcl_expand_topic_name+0x118>
 8015862:	4869      	ldr	r0, [pc, #420]	; (8015a08 <rcl_expand_topic_name+0x2b0>)
 8015864:	4652      	mov	r2, sl
 8015866:	4629      	mov	r1, r5
 8015868:	f000 ff9b 	bl	80167a2 <strncmp>
 801586c:	2800      	cmp	r0, #0
 801586e:	d137      	bne.n	80158e0 <rcl_expand_topic_name+0x188>
 8015870:	46b9      	mov	r9, r7
 8015872:	ab16      	add	r3, sp, #88	; 0x58
 8015874:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015878:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801587c:	ab14      	add	r3, sp, #80	; 0x50
 801587e:	4628      	mov	r0, r5
 8015880:	cb0c      	ldmia	r3, {r2, r3}
 8015882:	4651      	mov	r1, sl
 8015884:	f7fc fcd4 	bl	8012230 <rcutils_strndup>
 8015888:	4605      	mov	r5, r0
 801588a:	2800      	cmp	r0, #0
 801588c:	f000 809c 	beq.w	80159c8 <rcl_expand_topic_name+0x270>
 8015890:	464a      	mov	r2, r9
 8015892:	4620      	mov	r0, r4
 8015894:	ab14      	add	r3, sp, #80	; 0x50
 8015896:	4629      	mov	r1, r5
 8015898:	f7fc fbc8 	bl	801202c <rcutils_repl_str>
 801589c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801589e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158a0:	4604      	mov	r4, r0
 80158a2:	4628      	mov	r0, r5
 80158a4:	4798      	blx	r3
 80158a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80158aa:	4658      	mov	r0, fp
 80158ac:	4798      	blx	r3
 80158ae:	2c00      	cmp	r4, #0
 80158b0:	d07b      	beq.n	80159aa <rcl_expand_topic_name+0x252>
 80158b2:	217b      	movs	r1, #123	; 0x7b
 80158b4:	4620      	mov	r0, r4
 80158b6:	f000 ff67 	bl	8016788 <strchr>
 80158ba:	46a3      	mov	fp, r4
 80158bc:	4605      	mov	r5, r0
 80158be:	e7b8      	b.n	8015832 <rcl_expand_topic_name+0xda>
 80158c0:	240b      	movs	r4, #11
 80158c2:	4620      	mov	r0, r4
 80158c4:	b00b      	add	sp, #44	; 0x2c
 80158c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ca:	f7f9 fdaf 	bl	800f42c <rcl_convert_rmw_ret_to_rcl_ret>
 80158ce:	4604      	mov	r4, r0
 80158d0:	e7f7      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 80158d2:	2467      	movs	r4, #103	; 0x67
 80158d4:	4620      	mov	r0, r4
 80158d6:	b00b      	add	sp, #44	; 0x2c
 80158d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158dc:	24c9      	movs	r4, #201	; 0xc9
 80158de:	e7f0      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 80158e0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80158e4:	9806      	ldr	r0, [sp, #24]
 80158e6:	1c69      	adds	r1, r5, #1
 80158e8:	f7fc fdbc 	bl	8012464 <rcutils_string_map_getn>
 80158ec:	4681      	mov	r9, r0
 80158ee:	2800      	cmp	r0, #0
 80158f0:	d1bf      	bne.n	8015872 <rcl_expand_topic_name+0x11a>
 80158f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80158f4:	aa16      	add	r2, sp, #88	; 0x58
 80158f6:	6018      	str	r0, [r3, #0]
 80158f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80158fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80158fe:	ab14      	add	r3, sp, #80	; 0x50
 8015900:	cb0c      	ldmia	r3, {r2, r3}
 8015902:	4651      	mov	r1, sl
 8015904:	4628      	mov	r0, r5
 8015906:	f7fc fc93 	bl	8012230 <rcutils_strndup>
 801590a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801590c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801590e:	4798      	blx	r3
 8015910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015912:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015914:	4658      	mov	r0, fp
 8015916:	2469      	movs	r4, #105	; 0x69
 8015918:	4798      	blx	r3
 801591a:	e7d2      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 801591c:	2800      	cmp	r0, #0
 801591e:	d05b      	beq.n	80159d8 <rcl_expand_topic_name+0x280>
 8015920:	46c1      	mov	r9, r8
 8015922:	46a2      	mov	sl, r4
 8015924:	e782      	b.n	801582c <rcl_expand_topic_name+0xd4>
 8015926:	46b1      	mov	r9, r6
 8015928:	e7a3      	b.n	8015872 <rcl_expand_topic_name+0x11a>
 801592a:	2800      	cmp	r0, #0
 801592c:	d1f8      	bne.n	8015920 <rcl_expand_topic_name+0x1c8>
 801592e:	4638      	mov	r0, r7
 8015930:	f7ea fc78 	bl	8000224 <strlen>
 8015934:	4a35      	ldr	r2, [pc, #212]	; (8015a0c <rcl_expand_topic_name+0x2b4>)
 8015936:	4b36      	ldr	r3, [pc, #216]	; (8015a10 <rcl_expand_topic_name+0x2b8>)
 8015938:	f8cd 8010 	str.w	r8, [sp, #16]
 801593c:	2801      	cmp	r0, #1
 801593e:	bf18      	it	ne
 8015940:	4613      	movne	r3, r2
 8015942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015946:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801594a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801594c:	9703      	str	r7, [sp, #12]
 801594e:	9200      	str	r2, [sp, #0]
 8015950:	ab14      	add	r3, sp, #80	; 0x50
 8015952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015954:	f7fc fb30 	bl	8011fb8 <rcutils_format_string_limit>
 8015958:	4682      	mov	sl, r0
 801595a:	4653      	mov	r3, sl
 801595c:	b32b      	cbz	r3, 80159aa <rcl_expand_topic_name+0x252>
 801595e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015960:	f8c3 a000 	str.w	sl, [r3]
 8015964:	e7ad      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 8015966:	f89a 3000 	ldrb.w	r3, [sl]
 801596a:	2b2f      	cmp	r3, #47	; 0x2f
 801596c:	d0f7      	beq.n	801595e <rcl_expand_topic_name+0x206>
 801596e:	4638      	mov	r0, r7
 8015970:	f7ea fc58 	bl	8000224 <strlen>
 8015974:	4a25      	ldr	r2, [pc, #148]	; (8015a0c <rcl_expand_topic_name+0x2b4>)
 8015976:	4b26      	ldr	r3, [pc, #152]	; (8015a10 <rcl_expand_topic_name+0x2b8>)
 8015978:	f8cd a010 	str.w	sl, [sp, #16]
 801597c:	2801      	cmp	r0, #1
 801597e:	bf18      	it	ne
 8015980:	4613      	movne	r3, r2
 8015982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015986:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801598a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801598c:	9703      	str	r7, [sp, #12]
 801598e:	9200      	str	r2, [sp, #0]
 8015990:	ab14      	add	r3, sp, #80	; 0x50
 8015992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015994:	f7fc fb10 	bl	8011fb8 <rcutils_format_string_limit>
 8015998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801599a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801599c:	4605      	mov	r5, r0
 801599e:	4650      	mov	r0, sl
 80159a0:	4798      	blx	r3
 80159a2:	46aa      	mov	sl, r5
 80159a4:	e7d9      	b.n	801595a <rcl_expand_topic_name+0x202>
 80159a6:	24ca      	movs	r4, #202	; 0xca
 80159a8:	e78b      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 80159aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80159ac:	2300      	movs	r3, #0
 80159ae:	6013      	str	r3, [r2, #0]
 80159b0:	240a      	movs	r4, #10
 80159b2:	e786      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 80159b4:	465b      	mov	r3, fp
 80159b6:	9c07      	ldr	r4, [sp, #28]
 80159b8:	46da      	mov	sl, fp
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d1d3      	bne.n	8015966 <rcl_expand_topic_name+0x20e>
 80159be:	f898 3000 	ldrb.w	r3, [r8]
 80159c2:	2b2f      	cmp	r3, #47	; 0x2f
 80159c4:	d0cb      	beq.n	801595e <rcl_expand_topic_name+0x206>
 80159c6:	e7b2      	b.n	801592e <rcl_expand_topic_name+0x1d6>
 80159c8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80159cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159ce:	6015      	str	r5, [r2, #0]
 80159d0:	4658      	mov	r0, fp
 80159d2:	4798      	blx	r3
 80159d4:	240a      	movs	r4, #10
 80159d6:	e774      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 80159d8:	ab17      	add	r3, sp, #92	; 0x5c
 80159da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80159e2:	ab14      	add	r3, sp, #80	; 0x50
 80159e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80159e6:	4640      	mov	r0, r8
 80159e8:	f7fc fc00 	bl	80121ec <rcutils_strdup>
 80159ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159ee:	2800      	cmp	r0, #0
 80159f0:	6018      	str	r0, [r3, #0]
 80159f2:	bf08      	it	eq
 80159f4:	240a      	moveq	r4, #10
 80159f6:	e764      	b.n	80158c2 <rcl_expand_topic_name+0x16a>
 80159f8:	080183b8 	.word	0x080183b8
 80159fc:	08017a68 	.word	0x08017a68
 8015a00:	080183c0 	.word	0x080183c0
 8015a04:	080183c8 	.word	0x080183c8
 8015a08:	080183d0 	.word	0x080183d0
 8015a0c:	08017bfc 	.word	0x08017bfc
 8015a10:	08017a78 	.word	0x08017a78

08015a14 <rcl_get_default_topic_name_substitutions>:
 8015a14:	2800      	cmp	r0, #0
 8015a16:	bf0c      	ite	eq
 8015a18:	200b      	moveq	r0, #11
 8015a1a:	2000      	movne	r0, #0
 8015a1c:	4770      	bx	lr
 8015a1e:	bf00      	nop

08015a20 <rcl_get_zero_initialized_guard_condition>:
 8015a20:	4a03      	ldr	r2, [pc, #12]	; (8015a30 <rcl_get_zero_initialized_guard_condition+0x10>)
 8015a22:	4603      	mov	r3, r0
 8015a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a28:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	4770      	bx	lr
 8015a30:	080183dc 	.word	0x080183dc

08015a34 <rcl_guard_condition_init_from_rmw>:
 8015a34:	b082      	sub	sp, #8
 8015a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a3a:	b086      	sub	sp, #24
 8015a3c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015a40:	4604      	mov	r4, r0
 8015a42:	f84c 3f04 	str.w	r3, [ip, #4]!
 8015a46:	460e      	mov	r6, r1
 8015a48:	4617      	mov	r7, r2
 8015a4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a4e:	f10d 0e04 	add.w	lr, sp, #4
 8015a52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015a56:	f8dc 3000 	ldr.w	r3, [ip]
 8015a5a:	f8ce 3000 	str.w	r3, [lr]
 8015a5e:	a801      	add	r0, sp, #4
 8015a60:	f7f4 fe46 	bl	800a6f0 <rcutils_allocator_is_valid>
 8015a64:	b350      	cbz	r0, 8015abc <rcl_guard_condition_init_from_rmw+0x88>
 8015a66:	b34c      	cbz	r4, 8015abc <rcl_guard_condition_init_from_rmw+0x88>
 8015a68:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015a6c:	f1b8 0f00 	cmp.w	r8, #0
 8015a70:	d11e      	bne.n	8015ab0 <rcl_guard_condition_init_from_rmw+0x7c>
 8015a72:	b31f      	cbz	r7, 8015abc <rcl_guard_condition_init_from_rmw+0x88>
 8015a74:	4638      	mov	r0, r7
 8015a76:	f7f9 fcf7 	bl	800f468 <rcl_context_is_valid>
 8015a7a:	b328      	cbz	r0, 8015ac8 <rcl_guard_condition_init_from_rmw+0x94>
 8015a7c:	9b01      	ldr	r3, [sp, #4]
 8015a7e:	9905      	ldr	r1, [sp, #20]
 8015a80:	201c      	movs	r0, #28
 8015a82:	4798      	blx	r3
 8015a84:	4605      	mov	r5, r0
 8015a86:	6060      	str	r0, [r4, #4]
 8015a88:	b358      	cbz	r0, 8015ae2 <rcl_guard_condition_init_from_rmw+0xae>
 8015a8a:	b1fe      	cbz	r6, 8015acc <rcl_guard_condition_init_from_rmw+0x98>
 8015a8c:	6006      	str	r6, [r0, #0]
 8015a8e:	f880 8004 	strb.w	r8, [r0, #4]
 8015a92:	ac01      	add	r4, sp, #4
 8015a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a96:	f105 0c08 	add.w	ip, r5, #8
 8015a9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a9e:	6823      	ldr	r3, [r4, #0]
 8015aa0:	f8cc 3000 	str.w	r3, [ip]
 8015aa4:	2000      	movs	r0, #0
 8015aa6:	b006      	add	sp, #24
 8015aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015aac:	b002      	add	sp, #8
 8015aae:	4770      	bx	lr
 8015ab0:	2064      	movs	r0, #100	; 0x64
 8015ab2:	b006      	add	sp, #24
 8015ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab8:	b002      	add	sp, #8
 8015aba:	4770      	bx	lr
 8015abc:	200b      	movs	r0, #11
 8015abe:	b006      	add	sp, #24
 8015ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac4:	b002      	add	sp, #8
 8015ac6:	4770      	bx	lr
 8015ac8:	2065      	movs	r0, #101	; 0x65
 8015aca:	e7f2      	b.n	8015ab2 <rcl_guard_condition_init_from_rmw+0x7e>
 8015acc:	6838      	ldr	r0, [r7, #0]
 8015ace:	3028      	adds	r0, #40	; 0x28
 8015ad0:	f000 fa3a 	bl	8015f48 <rmw_create_guard_condition>
 8015ad4:	6028      	str	r0, [r5, #0]
 8015ad6:	6865      	ldr	r5, [r4, #4]
 8015ad8:	682e      	ldr	r6, [r5, #0]
 8015ada:	b126      	cbz	r6, 8015ae6 <rcl_guard_condition_init_from_rmw+0xb2>
 8015adc:	2301      	movs	r3, #1
 8015ade:	712b      	strb	r3, [r5, #4]
 8015ae0:	e7d7      	b.n	8015a92 <rcl_guard_condition_init_from_rmw+0x5e>
 8015ae2:	200a      	movs	r0, #10
 8015ae4:	e7e5      	b.n	8015ab2 <rcl_guard_condition_init_from_rmw+0x7e>
 8015ae6:	4628      	mov	r0, r5
 8015ae8:	9b02      	ldr	r3, [sp, #8]
 8015aea:	9905      	ldr	r1, [sp, #20]
 8015aec:	4798      	blx	r3
 8015aee:	6066      	str	r6, [r4, #4]
 8015af0:	2001      	movs	r0, #1
 8015af2:	e7de      	b.n	8015ab2 <rcl_guard_condition_init_from_rmw+0x7e>

08015af4 <rcl_guard_condition_fini>:
 8015af4:	b570      	push	{r4, r5, r6, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	b1f0      	cbz	r0, 8015b38 <rcl_guard_condition_fini+0x44>
 8015afa:	6843      	ldr	r3, [r0, #4]
 8015afc:	4604      	mov	r4, r0
 8015afe:	b163      	cbz	r3, 8015b1a <rcl_guard_condition_fini+0x26>
 8015b00:	6818      	ldr	r0, [r3, #0]
 8015b02:	68de      	ldr	r6, [r3, #12]
 8015b04:	6999      	ldr	r1, [r3, #24]
 8015b06:	b160      	cbz	r0, 8015b22 <rcl_guard_condition_fini+0x2e>
 8015b08:	791d      	ldrb	r5, [r3, #4]
 8015b0a:	b965      	cbnz	r5, 8015b26 <rcl_guard_condition_fini+0x32>
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	47b0      	blx	r6
 8015b10:	2300      	movs	r3, #0
 8015b12:	4628      	mov	r0, r5
 8015b14:	6063      	str	r3, [r4, #4]
 8015b16:	b002      	add	sp, #8
 8015b18:	bd70      	pop	{r4, r5, r6, pc}
 8015b1a:	461d      	mov	r5, r3
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	b002      	add	sp, #8
 8015b20:	bd70      	pop	{r4, r5, r6, pc}
 8015b22:	4605      	mov	r5, r0
 8015b24:	e7f2      	b.n	8015b0c <rcl_guard_condition_fini+0x18>
 8015b26:	9101      	str	r1, [sp, #4]
 8015b28:	f000 fa22 	bl	8015f70 <rmw_destroy_guard_condition>
 8015b2c:	1e05      	subs	r5, r0, #0
 8015b2e:	6863      	ldr	r3, [r4, #4]
 8015b30:	9901      	ldr	r1, [sp, #4]
 8015b32:	bf18      	it	ne
 8015b34:	2501      	movne	r5, #1
 8015b36:	e7e9      	b.n	8015b0c <rcl_guard_condition_fini+0x18>
 8015b38:	250b      	movs	r5, #11
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	b002      	add	sp, #8
 8015b3e:	bd70      	pop	{r4, r5, r6, pc}

08015b40 <rcl_guard_condition_get_default_options>:
 8015b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b42:	b087      	sub	sp, #28
 8015b44:	4606      	mov	r6, r0
 8015b46:	4668      	mov	r0, sp
 8015b48:	f7f4 fdc4 	bl	800a6d4 <rcutils_get_default_allocator>
 8015b4c:	4b09      	ldr	r3, [pc, #36]	; (8015b74 <rcl_guard_condition_get_default_options+0x34>)
 8015b4e:	46ee      	mov	lr, sp
 8015b50:	469c      	mov	ip, r3
 8015b52:	461d      	mov	r5, r3
 8015b54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b5e:	4634      	mov	r4, r6
 8015b60:	f8de 7000 	ldr.w	r7, [lr]
 8015b64:	f8cc 7000 	str.w	r7, [ip]
 8015b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	6027      	str	r7, [r4, #0]
 8015b6e:	b007      	add	sp, #28
 8015b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b72:	bf00      	nop
 8015b74:	2001318c 	.word	0x2001318c

08015b78 <rcl_guard_condition_get_rmw_handle>:
 8015b78:	b110      	cbz	r0, 8015b80 <rcl_guard_condition_get_rmw_handle+0x8>
 8015b7a:	6840      	ldr	r0, [r0, #4]
 8015b7c:	b100      	cbz	r0, 8015b80 <rcl_guard_condition_get_rmw_handle+0x8>
 8015b7e:	6800      	ldr	r0, [r0, #0]
 8015b80:	4770      	bx	lr
 8015b82:	bf00      	nop

08015b84 <rcl_validate_topic_name>:
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d07a      	beq.n	8015c7e <rcl_validate_topic_name+0xfa>
 8015b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b8c:	460e      	mov	r6, r1
 8015b8e:	2900      	cmp	r1, #0
 8015b90:	d07c      	beq.n	8015c8c <rcl_validate_topic_name+0x108>
 8015b92:	4617      	mov	r7, r2
 8015b94:	4605      	mov	r5, r0
 8015b96:	f7ea fb45 	bl	8000224 <strlen>
 8015b9a:	b1b0      	cbz	r0, 8015bca <rcl_validate_topic_name+0x46>
 8015b9c:	f895 9000 	ldrb.w	r9, [r5]
 8015ba0:	f8df c180 	ldr.w	ip, [pc, #384]	; 8015d24 <rcl_validate_topic_name+0x1a0>
 8015ba4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015ba8:	f013 0304 	ands.w	r3, r3, #4
 8015bac:	d169      	bne.n	8015c82 <rcl_validate_topic_name+0xfe>
 8015bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8015bb2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015bb6:	2a2f      	cmp	r2, #47	; 0x2f
 8015bb8:	d10e      	bne.n	8015bd8 <rcl_validate_topic_name+0x54>
 8015bba:	2202      	movs	r2, #2
 8015bbc:	6032      	str	r2, [r6, #0]
 8015bbe:	b36f      	cbz	r7, 8015c1c <rcl_validate_topic_name+0x98>
 8015bc0:	f8c7 8000 	str.w	r8, [r7]
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bca:	2301      	movs	r3, #1
 8015bcc:	6033      	str	r3, [r6, #0]
 8015bce:	b32f      	cbz	r7, 8015c1c <rcl_validate_topic_name+0x98>
 8015bd0:	2000      	movs	r0, #0
 8015bd2:	6038      	str	r0, [r7, #0]
 8015bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bd8:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8015bdc:	461c      	mov	r4, r3
 8015bde:	4619      	mov	r1, r3
 8015be0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015be4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015be8:	f1be 0f09 	cmp.w	lr, #9
 8015bec:	d919      	bls.n	8015c22 <rcl_validate_topic_name+0x9e>
 8015bee:	f022 0e20 	bic.w	lr, r2, #32
 8015bf2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015bf6:	f1be 0f19 	cmp.w	lr, #25
 8015bfa:	d912      	bls.n	8015c22 <rcl_validate_topic_name+0x9e>
 8015bfc:	2a5f      	cmp	r2, #95	; 0x5f
 8015bfe:	d019      	beq.n	8015c34 <rcl_validate_topic_name+0xb0>
 8015c00:	2a2f      	cmp	r2, #47	; 0x2f
 8015c02:	d051      	beq.n	8015ca8 <rcl_validate_topic_name+0x124>
 8015c04:	2a7e      	cmp	r2, #126	; 0x7e
 8015c06:	d048      	beq.n	8015c9a <rcl_validate_topic_name+0x116>
 8015c08:	2a7b      	cmp	r2, #123	; 0x7b
 8015c0a:	d054      	beq.n	8015cb6 <rcl_validate_topic_name+0x132>
 8015c0c:	2a7d      	cmp	r2, #125	; 0x7d
 8015c0e:	d161      	bne.n	8015cd4 <rcl_validate_topic_name+0x150>
 8015c10:	2c00      	cmp	r4, #0
 8015c12:	d155      	bne.n	8015cc0 <rcl_validate_topic_name+0x13c>
 8015c14:	2305      	movs	r3, #5
 8015c16:	6033      	str	r3, [r6, #0]
 8015c18:	b107      	cbz	r7, 8015c1c <rcl_validate_topic_name+0x98>
 8015c1a:	6039      	str	r1, [r7, #0]
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c22:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015c26:	0752      	lsls	r2, r2, #29
 8015c28:	d504      	bpl.n	8015c34 <rcl_validate_topic_name+0xb0>
 8015c2a:	b11c      	cbz	r4, 8015c34 <rcl_validate_topic_name+0xb0>
 8015c2c:	b111      	cbz	r1, 8015c34 <rcl_validate_topic_name+0xb0>
 8015c2e:	1e4a      	subs	r2, r1, #1
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d02d      	beq.n	8015c90 <rcl_validate_topic_name+0x10c>
 8015c34:	3101      	adds	r1, #1
 8015c36:	4288      	cmp	r0, r1
 8015c38:	d1d2      	bne.n	8015be0 <rcl_validate_topic_name+0x5c>
 8015c3a:	2c00      	cmp	r4, #0
 8015c3c:	d145      	bne.n	8015cca <rcl_validate_topic_name+0x146>
 8015c3e:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015c42:	d04f      	beq.n	8015ce4 <rcl_validate_topic_name+0x160>
 8015c44:	4620      	mov	r0, r4
 8015c46:	2301      	movs	r3, #1
 8015c48:	e006      	b.n	8015c58 <rcl_validate_topic_name+0xd4>
 8015c4a:	428b      	cmp	r3, r1
 8015c4c:	f105 0501 	add.w	r5, r5, #1
 8015c50:	f103 0201 	add.w	r2, r3, #1
 8015c54:	d236      	bcs.n	8015cc4 <rcl_validate_topic_name+0x140>
 8015c56:	4613      	mov	r3, r2
 8015c58:	4580      	cmp	r8, r0
 8015c5a:	f100 0001 	add.w	r0, r0, #1
 8015c5e:	d0f4      	beq.n	8015c4a <rcl_validate_topic_name+0xc6>
 8015c60:	782a      	ldrb	r2, [r5, #0]
 8015c62:	2a2f      	cmp	r2, #47	; 0x2f
 8015c64:	d1f1      	bne.n	8015c4a <rcl_validate_topic_name+0xc6>
 8015c66:	786a      	ldrb	r2, [r5, #1]
 8015c68:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015c6c:	0754      	lsls	r4, r2, #29
 8015c6e:	d5ec      	bpl.n	8015c4a <rcl_validate_topic_name+0xc6>
 8015c70:	2204      	movs	r2, #4
 8015c72:	6032      	str	r2, [r6, #0]
 8015c74:	2f00      	cmp	r7, #0
 8015c76:	d0d1      	beq.n	8015c1c <rcl_validate_topic_name+0x98>
 8015c78:	603b      	str	r3, [r7, #0]
 8015c7a:	2000      	movs	r0, #0
 8015c7c:	e7aa      	b.n	8015bd4 <rcl_validate_topic_name+0x50>
 8015c7e:	200b      	movs	r0, #11
 8015c80:	4770      	bx	lr
 8015c82:	2304      	movs	r3, #4
 8015c84:	6033      	str	r3, [r6, #0]
 8015c86:	2f00      	cmp	r7, #0
 8015c88:	d1a2      	bne.n	8015bd0 <rcl_validate_topic_name+0x4c>
 8015c8a:	e7c7      	b.n	8015c1c <rcl_validate_topic_name+0x98>
 8015c8c:	200b      	movs	r0, #11
 8015c8e:	e7a1      	b.n	8015bd4 <rcl_validate_topic_name+0x50>
 8015c90:	2309      	movs	r3, #9
 8015c92:	6033      	str	r3, [r6, #0]
 8015c94:	2f00      	cmp	r7, #0
 8015c96:	d1c0      	bne.n	8015c1a <rcl_validate_topic_name+0x96>
 8015c98:	e7c0      	b.n	8015c1c <rcl_validate_topic_name+0x98>
 8015c9a:	2900      	cmp	r1, #0
 8015c9c:	d0ca      	beq.n	8015c34 <rcl_validate_topic_name+0xb0>
 8015c9e:	2306      	movs	r3, #6
 8015ca0:	6033      	str	r3, [r6, #0]
 8015ca2:	2f00      	cmp	r7, #0
 8015ca4:	d1b9      	bne.n	8015c1a <rcl_validate_topic_name+0x96>
 8015ca6:	e7b9      	b.n	8015c1c <rcl_validate_topic_name+0x98>
 8015ca8:	2c00      	cmp	r4, #0
 8015caa:	d0c3      	beq.n	8015c34 <rcl_validate_topic_name+0xb0>
 8015cac:	2308      	movs	r3, #8
 8015cae:	6033      	str	r3, [r6, #0]
 8015cb0:	2f00      	cmp	r7, #0
 8015cb2:	d1b2      	bne.n	8015c1a <rcl_validate_topic_name+0x96>
 8015cb4:	e7b2      	b.n	8015c1c <rcl_validate_topic_name+0x98>
 8015cb6:	2c00      	cmp	r4, #0
 8015cb8:	d1f8      	bne.n	8015cac <rcl_validate_topic_name+0x128>
 8015cba:	460b      	mov	r3, r1
 8015cbc:	2401      	movs	r4, #1
 8015cbe:	e7b9      	b.n	8015c34 <rcl_validate_topic_name+0xb0>
 8015cc0:	2400      	movs	r4, #0
 8015cc2:	e7b7      	b.n	8015c34 <rcl_validate_topic_name+0xb0>
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	6030      	str	r0, [r6, #0]
 8015cc8:	e784      	b.n	8015bd4 <rcl_validate_topic_name+0x50>
 8015cca:	2205      	movs	r2, #5
 8015ccc:	6032      	str	r2, [r6, #0]
 8015cce:	2f00      	cmp	r7, #0
 8015cd0:	d1d2      	bne.n	8015c78 <rcl_validate_topic_name+0xf4>
 8015cd2:	e7a3      	b.n	8015c1c <rcl_validate_topic_name+0x98>
 8015cd4:	2c00      	cmp	r4, #0
 8015cd6:	bf14      	ite	ne
 8015cd8:	2308      	movne	r3, #8
 8015cda:	2303      	moveq	r3, #3
 8015cdc:	6033      	str	r3, [r6, #0]
 8015cde:	2f00      	cmp	r7, #0
 8015ce0:	d19b      	bne.n	8015c1a <rcl_validate_topic_name+0x96>
 8015ce2:	e79b      	b.n	8015c1c <rcl_validate_topic_name+0x98>
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	e00a      	b.n	8015cfe <rcl_validate_topic_name+0x17a>
 8015ce8:	2c01      	cmp	r4, #1
 8015cea:	d013      	beq.n	8015d14 <rcl_validate_topic_name+0x190>
 8015cec:	4299      	cmp	r1, r3
 8015cee:	f104 0401 	add.w	r4, r4, #1
 8015cf2:	f105 0501 	add.w	r5, r5, #1
 8015cf6:	f103 0201 	add.w	r2, r3, #1
 8015cfa:	d9e3      	bls.n	8015cc4 <rcl_validate_topic_name+0x140>
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	45a0      	cmp	r8, r4
 8015d00:	d0f4      	beq.n	8015cec <rcl_validate_topic_name+0x168>
 8015d02:	782a      	ldrb	r2, [r5, #0]
 8015d04:	2a2f      	cmp	r2, #47	; 0x2f
 8015d06:	d1ef      	bne.n	8015ce8 <rcl_validate_topic_name+0x164>
 8015d08:	786a      	ldrb	r2, [r5, #1]
 8015d0a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015d0e:	0752      	lsls	r2, r2, #29
 8015d10:	d5ec      	bpl.n	8015cec <rcl_validate_topic_name+0x168>
 8015d12:	e7ad      	b.n	8015c70 <rcl_validate_topic_name+0xec>
 8015d14:	2307      	movs	r3, #7
 8015d16:	6033      	str	r3, [r6, #0]
 8015d18:	2f00      	cmp	r7, #0
 8015d1a:	f43f af7f 	beq.w	8015c1c <rcl_validate_topic_name+0x98>
 8015d1e:	603c      	str	r4, [r7, #0]
 8015d20:	2000      	movs	r0, #0
 8015d22:	e757      	b.n	8015bd4 <rcl_validate_topic_name+0x50>
 8015d24:	08018454 	.word	0x08018454

08015d28 <rcutils_string_array_fini>:
 8015d28:	b320      	cbz	r0, 8015d74 <rcutils_string_array_fini+0x4c>
 8015d2a:	b570      	push	{r4, r5, r6, lr}
 8015d2c:	4604      	mov	r4, r0
 8015d2e:	6840      	ldr	r0, [r0, #4]
 8015d30:	b1d8      	cbz	r0, 8015d6a <rcutils_string_array_fini+0x42>
 8015d32:	f104 0008 	add.w	r0, r4, #8
 8015d36:	f7f4 fcdb 	bl	800a6f0 <rcutils_allocator_is_valid>
 8015d3a:	b1b8      	cbz	r0, 8015d6c <rcutils_string_array_fini+0x44>
 8015d3c:	6823      	ldr	r3, [r4, #0]
 8015d3e:	b1bb      	cbz	r3, 8015d70 <rcutils_string_array_fini+0x48>
 8015d40:	2500      	movs	r5, #0
 8015d42:	6860      	ldr	r0, [r4, #4]
 8015d44:	462e      	mov	r6, r5
 8015d46:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015d4a:	68e3      	ldr	r3, [r4, #12]
 8015d4c:	69a1      	ldr	r1, [r4, #24]
 8015d4e:	4798      	blx	r3
 8015d50:	e9d4 3000 	ldrd	r3, r0, [r4]
 8015d54:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8015d58:	3501      	adds	r5, #1
 8015d5a:	429d      	cmp	r5, r3
 8015d5c:	d3f3      	bcc.n	8015d46 <rcutils_string_array_fini+0x1e>
 8015d5e:	68e3      	ldr	r3, [r4, #12]
 8015d60:	69a1      	ldr	r1, [r4, #24]
 8015d62:	4798      	blx	r3
 8015d64:	2000      	movs	r0, #0
 8015d66:	e9c4 0000 	strd	r0, r0, [r4]
 8015d6a:	bd70      	pop	{r4, r5, r6, pc}
 8015d6c:	200b      	movs	r0, #11
 8015d6e:	bd70      	pop	{r4, r5, r6, pc}
 8015d70:	6860      	ldr	r0, [r4, #4]
 8015d72:	e7f4      	b.n	8015d5e <rcutils_string_array_fini+0x36>
 8015d74:	200b      	movs	r0, #11
 8015d76:	4770      	bx	lr

08015d78 <on_status>:
 8015d78:	b082      	sub	sp, #8
 8015d7a:	b002      	add	sp, #8
 8015d7c:	4770      	bx	lr
 8015d7e:	bf00      	nop

08015d80 <on_topic>:
 8015d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d84:	4a22      	ldr	r2, [pc, #136]	; (8015e10 <on_topic+0x90>)
 8015d86:	b094      	sub	sp, #80	; 0x50
 8015d88:	6812      	ldr	r2, [r2, #0]
 8015d8a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8015d8c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8015d90:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8015d94:	b3c2      	cbz	r2, 8015e08 <on_topic+0x88>
 8015d96:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8015d9a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8015d9e:	e001      	b.n	8015da4 <on_topic+0x24>
 8015da0:	6852      	ldr	r2, [r2, #4]
 8015da2:	b38a      	cbz	r2, 8015e08 <on_topic+0x88>
 8015da4:	6894      	ldr	r4, [r2, #8]
 8015da6:	8aa3      	ldrh	r3, [r4, #20]
 8015da8:	428b      	cmp	r3, r1
 8015daa:	d1f9      	bne.n	8015da0 <on_topic+0x20>
 8015dac:	7da3      	ldrb	r3, [r4, #22]
 8015dae:	4283      	cmp	r3, r0
 8015db0:	d1f6      	bne.n	8015da0 <on_topic+0x20>
 8015db2:	2248      	movs	r2, #72	; 0x48
 8015db4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015db8:	4668      	mov	r0, sp
 8015dba:	f000 fda6 	bl	801690a <memcpy>
 8015dbe:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8015dc2:	cb0c      	ldmia	r3, {r2, r3}
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	f7f5 f8c3 	bl	800af50 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015dca:	4607      	mov	r7, r0
 8015dcc:	b1e0      	cbz	r0, 8015e08 <on_topic+0x88>
 8015dce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015dd2:	4632      	mov	r2, r6
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	f108 0110 	add.w	r1, r8, #16
 8015dda:	f7fd ffc9 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8015dde:	b930      	cbnz	r0, 8015dee <on_topic+0x6e>
 8015de0:	480c      	ldr	r0, [pc, #48]	; (8015e14 <on_topic+0x94>)
 8015de2:	4639      	mov	r1, r7
 8015de4:	b014      	add	sp, #80	; 0x50
 8015de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dea:	f7fc bd89 	b.w	8012900 <put_memory>
 8015dee:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8015df2:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8015df6:	f7fd feb1 	bl	8013b5c <rmw_uros_epoch_nanos>
 8015dfa:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8015dfe:	2305      	movs	r3, #5
 8015e00:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015e04:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8015e08:	b014      	add	sp, #80	; 0x50
 8015e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e0e:	bf00      	nop
 8015e10:	20012fec 	.word	0x20012fec
 8015e14:	20012fdc 	.word	0x20012fdc

08015e18 <on_request>:
 8015e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e1c:	4823      	ldr	r0, [pc, #140]	; (8015eac <on_request+0x94>)
 8015e1e:	b094      	sub	sp, #80	; 0x50
 8015e20:	6800      	ldr	r0, [r0, #0]
 8015e22:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015e24:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8015e28:	9113      	str	r1, [sp, #76]	; 0x4c
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	d03b      	beq.n	8015ea6 <on_request+0x8e>
 8015e2e:	461d      	mov	r5, r3
 8015e30:	e001      	b.n	8015e36 <on_request+0x1e>
 8015e32:	6840      	ldr	r0, [r0, #4]
 8015e34:	b3b8      	cbz	r0, 8015ea6 <on_request+0x8e>
 8015e36:	6884      	ldr	r4, [r0, #8]
 8015e38:	8b21      	ldrh	r1, [r4, #24]
 8015e3a:	4291      	cmp	r1, r2
 8015e3c:	d1f9      	bne.n	8015e32 <on_request+0x1a>
 8015e3e:	2248      	movs	r2, #72	; 0x48
 8015e40:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015e44:	4668      	mov	r0, sp
 8015e46:	f000 fd60 	bl	801690a <memcpy>
 8015e4a:	f104 0320 	add.w	r3, r4, #32
 8015e4e:	cb0c      	ldmia	r3, {r2, r3}
 8015e50:	4620      	mov	r0, r4
 8015e52:	f7f5 f87d 	bl	800af50 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015e56:	4680      	mov	r8, r0
 8015e58:	b328      	cbz	r0, 8015ea6 <on_request+0x8e>
 8015e5a:	4638      	mov	r0, r7
 8015e5c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015e60:	4632      	mov	r2, r6
 8015e62:	f107 0110 	add.w	r1, r7, #16
 8015e66:	f7fd ff83 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8015e6a:	b930      	cbnz	r0, 8015e7a <on_request+0x62>
 8015e6c:	4810      	ldr	r0, [pc, #64]	; (8015eb0 <on_request+0x98>)
 8015e6e:	4641      	mov	r1, r8
 8015e70:	b014      	add	sp, #80	; 0x50
 8015e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e76:	f7fc bd43 	b.w	8012900 <put_memory>
 8015e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e7c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8015e80:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8015e84:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8015e88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015e90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e94:	f7fd fe62 	bl	8013b5c <rmw_uros_epoch_nanos>
 8015e98:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8015e9c:	2303      	movs	r3, #3
 8015e9e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015ea2:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8015ea6:	b014      	add	sp, #80	; 0x50
 8015ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eac:	20012fbc 	.word	0x20012fbc
 8015eb0:	20012fdc 	.word	0x20012fdc

08015eb4 <on_reply>:
 8015eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb8:	4821      	ldr	r0, [pc, #132]	; (8015f40 <on_reply+0x8c>)
 8015eba:	b094      	sub	sp, #80	; 0x50
 8015ebc:	6800      	ldr	r0, [r0, #0]
 8015ebe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015ec0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8015ec4:	9113      	str	r1, [sp, #76]	; 0x4c
 8015ec6:	b3b8      	cbz	r0, 8015f38 <on_reply+0x84>
 8015ec8:	461d      	mov	r5, r3
 8015eca:	e001      	b.n	8015ed0 <on_reply+0x1c>
 8015ecc:	6840      	ldr	r0, [r0, #4]
 8015ece:	b398      	cbz	r0, 8015f38 <on_reply+0x84>
 8015ed0:	6884      	ldr	r4, [r0, #8]
 8015ed2:	8b21      	ldrh	r1, [r4, #24]
 8015ed4:	4291      	cmp	r1, r2
 8015ed6:	d1f9      	bne.n	8015ecc <on_reply+0x18>
 8015ed8:	2248      	movs	r2, #72	; 0x48
 8015eda:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015ede:	4668      	mov	r0, sp
 8015ee0:	f000 fd13 	bl	801690a <memcpy>
 8015ee4:	f104 0320 	add.w	r3, r4, #32
 8015ee8:	cb0c      	ldmia	r3, {r2, r3}
 8015eea:	4620      	mov	r0, r4
 8015eec:	f7f5 f830 	bl	800af50 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015ef0:	4680      	mov	r8, r0
 8015ef2:	b308      	cbz	r0, 8015f38 <on_reply+0x84>
 8015ef4:	4638      	mov	r0, r7
 8015ef6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015efa:	4632      	mov	r2, r6
 8015efc:	f107 0110 	add.w	r1, r7, #16
 8015f00:	f7fd ff36 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8015f04:	b930      	cbnz	r0, 8015f14 <on_reply+0x60>
 8015f06:	480f      	ldr	r0, [pc, #60]	; (8015f44 <on_reply+0x90>)
 8015f08:	4641      	mov	r1, r8
 8015f0a:	b014      	add	sp, #80	; 0x50
 8015f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f10:	f7fc bcf6 	b.w	8012900 <put_memory>
 8015f14:	2200      	movs	r2, #0
 8015f16:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8015f1a:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8015f1e:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8015f22:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8015f26:	f7fd fe19 	bl	8013b5c <rmw_uros_epoch_nanos>
 8015f2a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8015f2e:	2304      	movs	r3, #4
 8015f30:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015f34:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8015f38:	b014      	add	sp, #80	; 0x50
 8015f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f3e:	bf00      	nop
 8015f40:	2000e6d0 	.word	0x2000e6d0
 8015f44:	20012fdc 	.word	0x20012fdc

08015f48 <rmw_create_guard_condition>:
 8015f48:	b538      	push	{r3, r4, r5, lr}
 8015f4a:	4605      	mov	r5, r0
 8015f4c:	4807      	ldr	r0, [pc, #28]	; (8015f6c <rmw_create_guard_condition+0x24>)
 8015f4e:	f7fc fcc7 	bl	80128e0 <get_memory>
 8015f52:	b148      	cbz	r0, 8015f68 <rmw_create_guard_condition+0x20>
 8015f54:	6884      	ldr	r4, [r0, #8]
 8015f56:	2300      	movs	r3, #0
 8015f58:	7423      	strb	r3, [r4, #16]
 8015f5a:	61e5      	str	r5, [r4, #28]
 8015f5c:	f7fc fd28 	bl	80129b0 <rmw_get_implementation_identifier>
 8015f60:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015f64:	f104 0014 	add.w	r0, r4, #20
 8015f68:	bd38      	pop	{r3, r4, r5, pc}
 8015f6a:	bf00      	nop
 8015f6c:	20012f7c 	.word	0x20012f7c

08015f70 <rmw_destroy_guard_condition>:
 8015f70:	b508      	push	{r3, lr}
 8015f72:	4b08      	ldr	r3, [pc, #32]	; (8015f94 <rmw_destroy_guard_condition+0x24>)
 8015f74:	6819      	ldr	r1, [r3, #0]
 8015f76:	b911      	cbnz	r1, 8015f7e <rmw_destroy_guard_condition+0xe>
 8015f78:	e00a      	b.n	8015f90 <rmw_destroy_guard_condition+0x20>
 8015f7a:	6849      	ldr	r1, [r1, #4]
 8015f7c:	b141      	cbz	r1, 8015f90 <rmw_destroy_guard_condition+0x20>
 8015f7e:	688b      	ldr	r3, [r1, #8]
 8015f80:	3314      	adds	r3, #20
 8015f82:	4298      	cmp	r0, r3
 8015f84:	d1f9      	bne.n	8015f7a <rmw_destroy_guard_condition+0xa>
 8015f86:	4803      	ldr	r0, [pc, #12]	; (8015f94 <rmw_destroy_guard_condition+0x24>)
 8015f88:	f7fc fcba 	bl	8012900 <put_memory>
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	bd08      	pop	{r3, pc}
 8015f90:	2001      	movs	r0, #1
 8015f92:	bd08      	pop	{r3, pc}
 8015f94:	20012f7c 	.word	0x20012f7c

08015f98 <calloc>:
 8015f98:	4b02      	ldr	r3, [pc, #8]	; (8015fa4 <calloc+0xc>)
 8015f9a:	460a      	mov	r2, r1
 8015f9c:	4601      	mov	r1, r0
 8015f9e:	6818      	ldr	r0, [r3, #0]
 8015fa0:	f000 b802 	b.w	8015fa8 <_calloc_r>
 8015fa4:	2000010c 	.word	0x2000010c

08015fa8 <_calloc_r>:
 8015fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015faa:	fba1 2402 	umull	r2, r4, r1, r2
 8015fae:	b94c      	cbnz	r4, 8015fc4 <_calloc_r+0x1c>
 8015fb0:	4611      	mov	r1, r2
 8015fb2:	9201      	str	r2, [sp, #4]
 8015fb4:	f000 f886 	bl	80160c4 <_malloc_r>
 8015fb8:	9a01      	ldr	r2, [sp, #4]
 8015fba:	4605      	mov	r5, r0
 8015fbc:	b930      	cbnz	r0, 8015fcc <_calloc_r+0x24>
 8015fbe:	4628      	mov	r0, r5
 8015fc0:	b003      	add	sp, #12
 8015fc2:	bd30      	pop	{r4, r5, pc}
 8015fc4:	220c      	movs	r2, #12
 8015fc6:	6002      	str	r2, [r0, #0]
 8015fc8:	2500      	movs	r5, #0
 8015fca:	e7f8      	b.n	8015fbe <_calloc_r+0x16>
 8015fcc:	4621      	mov	r1, r4
 8015fce:	f000 fbd3 	bl	8016778 <memset>
 8015fd2:	e7f4      	b.n	8015fbe <_calloc_r+0x16>

08015fd4 <getenv>:
 8015fd4:	b507      	push	{r0, r1, r2, lr}
 8015fd6:	4b04      	ldr	r3, [pc, #16]	; (8015fe8 <getenv+0x14>)
 8015fd8:	4601      	mov	r1, r0
 8015fda:	aa01      	add	r2, sp, #4
 8015fdc:	6818      	ldr	r0, [r3, #0]
 8015fde:	f000 f805 	bl	8015fec <_findenv_r>
 8015fe2:	b003      	add	sp, #12
 8015fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015fe8:	2000010c 	.word	0x2000010c

08015fec <_findenv_r>:
 8015fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016060 <_findenv_r+0x74>
 8015ff4:	4607      	mov	r7, r0
 8015ff6:	4689      	mov	r9, r1
 8015ff8:	4616      	mov	r6, r2
 8015ffa:	f000 fcb3 	bl	8016964 <__env_lock>
 8015ffe:	f8da 4000 	ldr.w	r4, [sl]
 8016002:	b134      	cbz	r4, 8016012 <_findenv_r+0x26>
 8016004:	464b      	mov	r3, r9
 8016006:	4698      	mov	r8, r3
 8016008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801600c:	b13a      	cbz	r2, 801601e <_findenv_r+0x32>
 801600e:	2a3d      	cmp	r2, #61	; 0x3d
 8016010:	d1f9      	bne.n	8016006 <_findenv_r+0x1a>
 8016012:	4638      	mov	r0, r7
 8016014:	f000 fcac 	bl	8016970 <__env_unlock>
 8016018:	2000      	movs	r0, #0
 801601a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601e:	eba8 0809 	sub.w	r8, r8, r9
 8016022:	46a3      	mov	fp, r4
 8016024:	f854 0b04 	ldr.w	r0, [r4], #4
 8016028:	2800      	cmp	r0, #0
 801602a:	d0f2      	beq.n	8016012 <_findenv_r+0x26>
 801602c:	4642      	mov	r2, r8
 801602e:	4649      	mov	r1, r9
 8016030:	f000 fbb7 	bl	80167a2 <strncmp>
 8016034:	2800      	cmp	r0, #0
 8016036:	d1f4      	bne.n	8016022 <_findenv_r+0x36>
 8016038:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801603c:	eb03 0508 	add.w	r5, r3, r8
 8016040:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016044:	2b3d      	cmp	r3, #61	; 0x3d
 8016046:	d1ec      	bne.n	8016022 <_findenv_r+0x36>
 8016048:	f8da 3000 	ldr.w	r3, [sl]
 801604c:	ebab 0303 	sub.w	r3, fp, r3
 8016050:	109b      	asrs	r3, r3, #2
 8016052:	4638      	mov	r0, r7
 8016054:	6033      	str	r3, [r6, #0]
 8016056:	f000 fc8b 	bl	8016970 <__env_unlock>
 801605a:	1c68      	adds	r0, r5, #1
 801605c:	e7dd      	b.n	801601a <_findenv_r+0x2e>
 801605e:	bf00      	nop
 8016060:	20000000 	.word	0x20000000

08016064 <malloc>:
 8016064:	4b02      	ldr	r3, [pc, #8]	; (8016070 <malloc+0xc>)
 8016066:	4601      	mov	r1, r0
 8016068:	6818      	ldr	r0, [r3, #0]
 801606a:	f000 b82b 	b.w	80160c4 <_malloc_r>
 801606e:	bf00      	nop
 8016070:	2000010c 	.word	0x2000010c

08016074 <free>:
 8016074:	4b02      	ldr	r3, [pc, #8]	; (8016080 <free+0xc>)
 8016076:	4601      	mov	r1, r0
 8016078:	6818      	ldr	r0, [r3, #0]
 801607a:	f000 bc7f 	b.w	801697c <_free_r>
 801607e:	bf00      	nop
 8016080:	2000010c 	.word	0x2000010c

08016084 <sbrk_aligned>:
 8016084:	b570      	push	{r4, r5, r6, lr}
 8016086:	4e0e      	ldr	r6, [pc, #56]	; (80160c0 <sbrk_aligned+0x3c>)
 8016088:	460c      	mov	r4, r1
 801608a:	6831      	ldr	r1, [r6, #0]
 801608c:	4605      	mov	r5, r0
 801608e:	b911      	cbnz	r1, 8016096 <sbrk_aligned+0x12>
 8016090:	f000 fbe4 	bl	801685c <_sbrk_r>
 8016094:	6030      	str	r0, [r6, #0]
 8016096:	4621      	mov	r1, r4
 8016098:	4628      	mov	r0, r5
 801609a:	f000 fbdf 	bl	801685c <_sbrk_r>
 801609e:	1c43      	adds	r3, r0, #1
 80160a0:	d00a      	beq.n	80160b8 <sbrk_aligned+0x34>
 80160a2:	1cc4      	adds	r4, r0, #3
 80160a4:	f024 0403 	bic.w	r4, r4, #3
 80160a8:	42a0      	cmp	r0, r4
 80160aa:	d007      	beq.n	80160bc <sbrk_aligned+0x38>
 80160ac:	1a21      	subs	r1, r4, r0
 80160ae:	4628      	mov	r0, r5
 80160b0:	f000 fbd4 	bl	801685c <_sbrk_r>
 80160b4:	3001      	adds	r0, #1
 80160b6:	d101      	bne.n	80160bc <sbrk_aligned+0x38>
 80160b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80160bc:	4620      	mov	r0, r4
 80160be:	bd70      	pop	{r4, r5, r6, pc}
 80160c0:	200131a4 	.word	0x200131a4

080160c4 <_malloc_r>:
 80160c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160c8:	1ccd      	adds	r5, r1, #3
 80160ca:	f025 0503 	bic.w	r5, r5, #3
 80160ce:	3508      	adds	r5, #8
 80160d0:	2d0c      	cmp	r5, #12
 80160d2:	bf38      	it	cc
 80160d4:	250c      	movcc	r5, #12
 80160d6:	2d00      	cmp	r5, #0
 80160d8:	4607      	mov	r7, r0
 80160da:	db01      	blt.n	80160e0 <_malloc_r+0x1c>
 80160dc:	42a9      	cmp	r1, r5
 80160de:	d905      	bls.n	80160ec <_malloc_r+0x28>
 80160e0:	230c      	movs	r3, #12
 80160e2:	603b      	str	r3, [r7, #0]
 80160e4:	2600      	movs	r6, #0
 80160e6:	4630      	mov	r0, r6
 80160e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80161c0 <_malloc_r+0xfc>
 80160f0:	f000 f868 	bl	80161c4 <__malloc_lock>
 80160f4:	f8d8 3000 	ldr.w	r3, [r8]
 80160f8:	461c      	mov	r4, r3
 80160fa:	bb5c      	cbnz	r4, 8016154 <_malloc_r+0x90>
 80160fc:	4629      	mov	r1, r5
 80160fe:	4638      	mov	r0, r7
 8016100:	f7ff ffc0 	bl	8016084 <sbrk_aligned>
 8016104:	1c43      	adds	r3, r0, #1
 8016106:	4604      	mov	r4, r0
 8016108:	d155      	bne.n	80161b6 <_malloc_r+0xf2>
 801610a:	f8d8 4000 	ldr.w	r4, [r8]
 801610e:	4626      	mov	r6, r4
 8016110:	2e00      	cmp	r6, #0
 8016112:	d145      	bne.n	80161a0 <_malloc_r+0xdc>
 8016114:	2c00      	cmp	r4, #0
 8016116:	d048      	beq.n	80161aa <_malloc_r+0xe6>
 8016118:	6823      	ldr	r3, [r4, #0]
 801611a:	4631      	mov	r1, r6
 801611c:	4638      	mov	r0, r7
 801611e:	eb04 0903 	add.w	r9, r4, r3
 8016122:	f000 fb9b 	bl	801685c <_sbrk_r>
 8016126:	4581      	cmp	r9, r0
 8016128:	d13f      	bne.n	80161aa <_malloc_r+0xe6>
 801612a:	6821      	ldr	r1, [r4, #0]
 801612c:	1a6d      	subs	r5, r5, r1
 801612e:	4629      	mov	r1, r5
 8016130:	4638      	mov	r0, r7
 8016132:	f7ff ffa7 	bl	8016084 <sbrk_aligned>
 8016136:	3001      	adds	r0, #1
 8016138:	d037      	beq.n	80161aa <_malloc_r+0xe6>
 801613a:	6823      	ldr	r3, [r4, #0]
 801613c:	442b      	add	r3, r5
 801613e:	6023      	str	r3, [r4, #0]
 8016140:	f8d8 3000 	ldr.w	r3, [r8]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d038      	beq.n	80161ba <_malloc_r+0xf6>
 8016148:	685a      	ldr	r2, [r3, #4]
 801614a:	42a2      	cmp	r2, r4
 801614c:	d12b      	bne.n	80161a6 <_malloc_r+0xe2>
 801614e:	2200      	movs	r2, #0
 8016150:	605a      	str	r2, [r3, #4]
 8016152:	e00f      	b.n	8016174 <_malloc_r+0xb0>
 8016154:	6822      	ldr	r2, [r4, #0]
 8016156:	1b52      	subs	r2, r2, r5
 8016158:	d41f      	bmi.n	801619a <_malloc_r+0xd6>
 801615a:	2a0b      	cmp	r2, #11
 801615c:	d917      	bls.n	801618e <_malloc_r+0xca>
 801615e:	1961      	adds	r1, r4, r5
 8016160:	42a3      	cmp	r3, r4
 8016162:	6025      	str	r5, [r4, #0]
 8016164:	bf18      	it	ne
 8016166:	6059      	strne	r1, [r3, #4]
 8016168:	6863      	ldr	r3, [r4, #4]
 801616a:	bf08      	it	eq
 801616c:	f8c8 1000 	streq.w	r1, [r8]
 8016170:	5162      	str	r2, [r4, r5]
 8016172:	604b      	str	r3, [r1, #4]
 8016174:	4638      	mov	r0, r7
 8016176:	f104 060b 	add.w	r6, r4, #11
 801617a:	f000 f829 	bl	80161d0 <__malloc_unlock>
 801617e:	f026 0607 	bic.w	r6, r6, #7
 8016182:	1d23      	adds	r3, r4, #4
 8016184:	1af2      	subs	r2, r6, r3
 8016186:	d0ae      	beq.n	80160e6 <_malloc_r+0x22>
 8016188:	1b9b      	subs	r3, r3, r6
 801618a:	50a3      	str	r3, [r4, r2]
 801618c:	e7ab      	b.n	80160e6 <_malloc_r+0x22>
 801618e:	42a3      	cmp	r3, r4
 8016190:	6862      	ldr	r2, [r4, #4]
 8016192:	d1dd      	bne.n	8016150 <_malloc_r+0x8c>
 8016194:	f8c8 2000 	str.w	r2, [r8]
 8016198:	e7ec      	b.n	8016174 <_malloc_r+0xb0>
 801619a:	4623      	mov	r3, r4
 801619c:	6864      	ldr	r4, [r4, #4]
 801619e:	e7ac      	b.n	80160fa <_malloc_r+0x36>
 80161a0:	4634      	mov	r4, r6
 80161a2:	6876      	ldr	r6, [r6, #4]
 80161a4:	e7b4      	b.n	8016110 <_malloc_r+0x4c>
 80161a6:	4613      	mov	r3, r2
 80161a8:	e7cc      	b.n	8016144 <_malloc_r+0x80>
 80161aa:	230c      	movs	r3, #12
 80161ac:	603b      	str	r3, [r7, #0]
 80161ae:	4638      	mov	r0, r7
 80161b0:	f000 f80e 	bl	80161d0 <__malloc_unlock>
 80161b4:	e797      	b.n	80160e6 <_malloc_r+0x22>
 80161b6:	6025      	str	r5, [r4, #0]
 80161b8:	e7dc      	b.n	8016174 <_malloc_r+0xb0>
 80161ba:	605b      	str	r3, [r3, #4]
 80161bc:	deff      	udf	#255	; 0xff
 80161be:	bf00      	nop
 80161c0:	200131a0 	.word	0x200131a0

080161c4 <__malloc_lock>:
 80161c4:	4801      	ldr	r0, [pc, #4]	; (80161cc <__malloc_lock+0x8>)
 80161c6:	f000 bb96 	b.w	80168f6 <__retarget_lock_acquire_recursive>
 80161ca:	bf00      	nop
 80161cc:	200132e9 	.word	0x200132e9

080161d0 <__malloc_unlock>:
 80161d0:	4801      	ldr	r0, [pc, #4]	; (80161d8 <__malloc_unlock+0x8>)
 80161d2:	f000 bb91 	b.w	80168f8 <__retarget_lock_release_recursive>
 80161d6:	bf00      	nop
 80161d8:	200132e9 	.word	0x200132e9

080161dc <srand>:
 80161dc:	b538      	push	{r3, r4, r5, lr}
 80161de:	4b10      	ldr	r3, [pc, #64]	; (8016220 <srand+0x44>)
 80161e0:	681d      	ldr	r5, [r3, #0]
 80161e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80161e4:	4604      	mov	r4, r0
 80161e6:	b9b3      	cbnz	r3, 8016216 <srand+0x3a>
 80161e8:	2018      	movs	r0, #24
 80161ea:	f7ff ff3b 	bl	8016064 <malloc>
 80161ee:	4602      	mov	r2, r0
 80161f0:	6328      	str	r0, [r5, #48]	; 0x30
 80161f2:	b920      	cbnz	r0, 80161fe <srand+0x22>
 80161f4:	4b0b      	ldr	r3, [pc, #44]	; (8016224 <srand+0x48>)
 80161f6:	480c      	ldr	r0, [pc, #48]	; (8016228 <srand+0x4c>)
 80161f8:	2146      	movs	r1, #70	; 0x46
 80161fa:	f000 fb95 	bl	8016928 <__assert_func>
 80161fe:	490b      	ldr	r1, [pc, #44]	; (801622c <srand+0x50>)
 8016200:	4b0b      	ldr	r3, [pc, #44]	; (8016230 <srand+0x54>)
 8016202:	e9c0 1300 	strd	r1, r3, [r0]
 8016206:	4b0b      	ldr	r3, [pc, #44]	; (8016234 <srand+0x58>)
 8016208:	6083      	str	r3, [r0, #8]
 801620a:	230b      	movs	r3, #11
 801620c:	8183      	strh	r3, [r0, #12]
 801620e:	2100      	movs	r1, #0
 8016210:	2001      	movs	r0, #1
 8016212:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016216:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016218:	2200      	movs	r2, #0
 801621a:	611c      	str	r4, [r3, #16]
 801621c:	615a      	str	r2, [r3, #20]
 801621e:	bd38      	pop	{r3, r4, r5, pc}
 8016220:	2000010c 	.word	0x2000010c
 8016224:	080183e4 	.word	0x080183e4
 8016228:	080183fb 	.word	0x080183fb
 801622c:	abcd330e 	.word	0xabcd330e
 8016230:	e66d1234 	.word	0xe66d1234
 8016234:	0005deec 	.word	0x0005deec

08016238 <rand>:
 8016238:	4b16      	ldr	r3, [pc, #88]	; (8016294 <rand+0x5c>)
 801623a:	b510      	push	{r4, lr}
 801623c:	681c      	ldr	r4, [r3, #0]
 801623e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016240:	b9b3      	cbnz	r3, 8016270 <rand+0x38>
 8016242:	2018      	movs	r0, #24
 8016244:	f7ff ff0e 	bl	8016064 <malloc>
 8016248:	4602      	mov	r2, r0
 801624a:	6320      	str	r0, [r4, #48]	; 0x30
 801624c:	b920      	cbnz	r0, 8016258 <rand+0x20>
 801624e:	4b12      	ldr	r3, [pc, #72]	; (8016298 <rand+0x60>)
 8016250:	4812      	ldr	r0, [pc, #72]	; (801629c <rand+0x64>)
 8016252:	2152      	movs	r1, #82	; 0x52
 8016254:	f000 fb68 	bl	8016928 <__assert_func>
 8016258:	4911      	ldr	r1, [pc, #68]	; (80162a0 <rand+0x68>)
 801625a:	4b12      	ldr	r3, [pc, #72]	; (80162a4 <rand+0x6c>)
 801625c:	e9c0 1300 	strd	r1, r3, [r0]
 8016260:	4b11      	ldr	r3, [pc, #68]	; (80162a8 <rand+0x70>)
 8016262:	6083      	str	r3, [r0, #8]
 8016264:	230b      	movs	r3, #11
 8016266:	8183      	strh	r3, [r0, #12]
 8016268:	2100      	movs	r1, #0
 801626a:	2001      	movs	r0, #1
 801626c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016270:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016272:	480e      	ldr	r0, [pc, #56]	; (80162ac <rand+0x74>)
 8016274:	690b      	ldr	r3, [r1, #16]
 8016276:	694c      	ldr	r4, [r1, #20]
 8016278:	4a0d      	ldr	r2, [pc, #52]	; (80162b0 <rand+0x78>)
 801627a:	4358      	muls	r0, r3
 801627c:	fb02 0004 	mla	r0, r2, r4, r0
 8016280:	fba3 3202 	umull	r3, r2, r3, r2
 8016284:	3301      	adds	r3, #1
 8016286:	eb40 0002 	adc.w	r0, r0, r2
 801628a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801628e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016292:	bd10      	pop	{r4, pc}
 8016294:	2000010c 	.word	0x2000010c
 8016298:	080183e4 	.word	0x080183e4
 801629c:	080183fb 	.word	0x080183fb
 80162a0:	abcd330e 	.word	0xabcd330e
 80162a4:	e66d1234 	.word	0xe66d1234
 80162a8:	0005deec 	.word	0x0005deec
 80162ac:	5851f42d 	.word	0x5851f42d
 80162b0:	4c957f2d 	.word	0x4c957f2d

080162b4 <realloc>:
 80162b4:	4b02      	ldr	r3, [pc, #8]	; (80162c0 <realloc+0xc>)
 80162b6:	460a      	mov	r2, r1
 80162b8:	4601      	mov	r1, r0
 80162ba:	6818      	ldr	r0, [r3, #0]
 80162bc:	f000 b802 	b.w	80162c4 <_realloc_r>
 80162c0:	2000010c 	.word	0x2000010c

080162c4 <_realloc_r>:
 80162c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162c8:	4680      	mov	r8, r0
 80162ca:	4614      	mov	r4, r2
 80162cc:	460e      	mov	r6, r1
 80162ce:	b921      	cbnz	r1, 80162da <_realloc_r+0x16>
 80162d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162d4:	4611      	mov	r1, r2
 80162d6:	f7ff bef5 	b.w	80160c4 <_malloc_r>
 80162da:	b92a      	cbnz	r2, 80162e8 <_realloc_r+0x24>
 80162dc:	f000 fb4e 	bl	801697c <_free_r>
 80162e0:	4625      	mov	r5, r4
 80162e2:	4628      	mov	r0, r5
 80162e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162e8:	f000 fb94 	bl	8016a14 <_malloc_usable_size_r>
 80162ec:	4284      	cmp	r4, r0
 80162ee:	4607      	mov	r7, r0
 80162f0:	d802      	bhi.n	80162f8 <_realloc_r+0x34>
 80162f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162f6:	d812      	bhi.n	801631e <_realloc_r+0x5a>
 80162f8:	4621      	mov	r1, r4
 80162fa:	4640      	mov	r0, r8
 80162fc:	f7ff fee2 	bl	80160c4 <_malloc_r>
 8016300:	4605      	mov	r5, r0
 8016302:	2800      	cmp	r0, #0
 8016304:	d0ed      	beq.n	80162e2 <_realloc_r+0x1e>
 8016306:	42bc      	cmp	r4, r7
 8016308:	4622      	mov	r2, r4
 801630a:	4631      	mov	r1, r6
 801630c:	bf28      	it	cs
 801630e:	463a      	movcs	r2, r7
 8016310:	f000 fafb 	bl	801690a <memcpy>
 8016314:	4631      	mov	r1, r6
 8016316:	4640      	mov	r0, r8
 8016318:	f000 fb30 	bl	801697c <_free_r>
 801631c:	e7e1      	b.n	80162e2 <_realloc_r+0x1e>
 801631e:	4635      	mov	r5, r6
 8016320:	e7df      	b.n	80162e2 <_realloc_r+0x1e>
	...

08016324 <_strtoul_l.constprop.0>:
 8016324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016328:	4f36      	ldr	r7, [pc, #216]	; (8016404 <_strtoul_l.constprop.0+0xe0>)
 801632a:	4686      	mov	lr, r0
 801632c:	460d      	mov	r5, r1
 801632e:	4628      	mov	r0, r5
 8016330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016334:	5d3e      	ldrb	r6, [r7, r4]
 8016336:	f016 0608 	ands.w	r6, r6, #8
 801633a:	d1f8      	bne.n	801632e <_strtoul_l.constprop.0+0xa>
 801633c:	2c2d      	cmp	r4, #45	; 0x2d
 801633e:	d130      	bne.n	80163a2 <_strtoul_l.constprop.0+0x7e>
 8016340:	782c      	ldrb	r4, [r5, #0]
 8016342:	2601      	movs	r6, #1
 8016344:	1c85      	adds	r5, r0, #2
 8016346:	2b00      	cmp	r3, #0
 8016348:	d057      	beq.n	80163fa <_strtoul_l.constprop.0+0xd6>
 801634a:	2b10      	cmp	r3, #16
 801634c:	d109      	bne.n	8016362 <_strtoul_l.constprop.0+0x3e>
 801634e:	2c30      	cmp	r4, #48	; 0x30
 8016350:	d107      	bne.n	8016362 <_strtoul_l.constprop.0+0x3e>
 8016352:	7828      	ldrb	r0, [r5, #0]
 8016354:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016358:	2858      	cmp	r0, #88	; 0x58
 801635a:	d149      	bne.n	80163f0 <_strtoul_l.constprop.0+0xcc>
 801635c:	786c      	ldrb	r4, [r5, #1]
 801635e:	2310      	movs	r3, #16
 8016360:	3502      	adds	r5, #2
 8016362:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016366:	2700      	movs	r7, #0
 8016368:	fbb8 f8f3 	udiv	r8, r8, r3
 801636c:	fb03 f908 	mul.w	r9, r3, r8
 8016370:	ea6f 0909 	mvn.w	r9, r9
 8016374:	4638      	mov	r0, r7
 8016376:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801637a:	f1bc 0f09 	cmp.w	ip, #9
 801637e:	d815      	bhi.n	80163ac <_strtoul_l.constprop.0+0x88>
 8016380:	4664      	mov	r4, ip
 8016382:	42a3      	cmp	r3, r4
 8016384:	dd23      	ble.n	80163ce <_strtoul_l.constprop.0+0xaa>
 8016386:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801638a:	d007      	beq.n	801639c <_strtoul_l.constprop.0+0x78>
 801638c:	4580      	cmp	r8, r0
 801638e:	d31b      	bcc.n	80163c8 <_strtoul_l.constprop.0+0xa4>
 8016390:	d101      	bne.n	8016396 <_strtoul_l.constprop.0+0x72>
 8016392:	45a1      	cmp	r9, r4
 8016394:	db18      	blt.n	80163c8 <_strtoul_l.constprop.0+0xa4>
 8016396:	fb00 4003 	mla	r0, r0, r3, r4
 801639a:	2701      	movs	r7, #1
 801639c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163a0:	e7e9      	b.n	8016376 <_strtoul_l.constprop.0+0x52>
 80163a2:	2c2b      	cmp	r4, #43	; 0x2b
 80163a4:	bf04      	itt	eq
 80163a6:	782c      	ldrbeq	r4, [r5, #0]
 80163a8:	1c85      	addeq	r5, r0, #2
 80163aa:	e7cc      	b.n	8016346 <_strtoul_l.constprop.0+0x22>
 80163ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80163b0:	f1bc 0f19 	cmp.w	ip, #25
 80163b4:	d801      	bhi.n	80163ba <_strtoul_l.constprop.0+0x96>
 80163b6:	3c37      	subs	r4, #55	; 0x37
 80163b8:	e7e3      	b.n	8016382 <_strtoul_l.constprop.0+0x5e>
 80163ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80163be:	f1bc 0f19 	cmp.w	ip, #25
 80163c2:	d804      	bhi.n	80163ce <_strtoul_l.constprop.0+0xaa>
 80163c4:	3c57      	subs	r4, #87	; 0x57
 80163c6:	e7dc      	b.n	8016382 <_strtoul_l.constprop.0+0x5e>
 80163c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80163cc:	e7e6      	b.n	801639c <_strtoul_l.constprop.0+0x78>
 80163ce:	1c7b      	adds	r3, r7, #1
 80163d0:	d106      	bne.n	80163e0 <_strtoul_l.constprop.0+0xbc>
 80163d2:	2322      	movs	r3, #34	; 0x22
 80163d4:	f8ce 3000 	str.w	r3, [lr]
 80163d8:	4638      	mov	r0, r7
 80163da:	b932      	cbnz	r2, 80163ea <_strtoul_l.constprop.0+0xc6>
 80163dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163e0:	b106      	cbz	r6, 80163e4 <_strtoul_l.constprop.0+0xc0>
 80163e2:	4240      	negs	r0, r0
 80163e4:	2a00      	cmp	r2, #0
 80163e6:	d0f9      	beq.n	80163dc <_strtoul_l.constprop.0+0xb8>
 80163e8:	b107      	cbz	r7, 80163ec <_strtoul_l.constprop.0+0xc8>
 80163ea:	1e69      	subs	r1, r5, #1
 80163ec:	6011      	str	r1, [r2, #0]
 80163ee:	e7f5      	b.n	80163dc <_strtoul_l.constprop.0+0xb8>
 80163f0:	2430      	movs	r4, #48	; 0x30
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d1b5      	bne.n	8016362 <_strtoul_l.constprop.0+0x3e>
 80163f6:	2308      	movs	r3, #8
 80163f8:	e7b3      	b.n	8016362 <_strtoul_l.constprop.0+0x3e>
 80163fa:	2c30      	cmp	r4, #48	; 0x30
 80163fc:	d0a9      	beq.n	8016352 <_strtoul_l.constprop.0+0x2e>
 80163fe:	230a      	movs	r3, #10
 8016400:	e7af      	b.n	8016362 <_strtoul_l.constprop.0+0x3e>
 8016402:	bf00      	nop
 8016404:	08018454 	.word	0x08018454

08016408 <strtoul>:
 8016408:	4613      	mov	r3, r2
 801640a:	460a      	mov	r2, r1
 801640c:	4601      	mov	r1, r0
 801640e:	4802      	ldr	r0, [pc, #8]	; (8016418 <strtoul+0x10>)
 8016410:	6800      	ldr	r0, [r0, #0]
 8016412:	f7ff bf87 	b.w	8016324 <_strtoul_l.constprop.0>
 8016416:	bf00      	nop
 8016418:	2000010c 	.word	0x2000010c

0801641c <std>:
 801641c:	2300      	movs	r3, #0
 801641e:	b510      	push	{r4, lr}
 8016420:	4604      	mov	r4, r0
 8016422:	e9c0 3300 	strd	r3, r3, [r0]
 8016426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801642a:	6083      	str	r3, [r0, #8]
 801642c:	8181      	strh	r1, [r0, #12]
 801642e:	6643      	str	r3, [r0, #100]	; 0x64
 8016430:	81c2      	strh	r2, [r0, #14]
 8016432:	6183      	str	r3, [r0, #24]
 8016434:	4619      	mov	r1, r3
 8016436:	2208      	movs	r2, #8
 8016438:	305c      	adds	r0, #92	; 0x5c
 801643a:	f000 f99d 	bl	8016778 <memset>
 801643e:	4b0d      	ldr	r3, [pc, #52]	; (8016474 <std+0x58>)
 8016440:	6263      	str	r3, [r4, #36]	; 0x24
 8016442:	4b0d      	ldr	r3, [pc, #52]	; (8016478 <std+0x5c>)
 8016444:	62a3      	str	r3, [r4, #40]	; 0x28
 8016446:	4b0d      	ldr	r3, [pc, #52]	; (801647c <std+0x60>)
 8016448:	62e3      	str	r3, [r4, #44]	; 0x2c
 801644a:	4b0d      	ldr	r3, [pc, #52]	; (8016480 <std+0x64>)
 801644c:	6323      	str	r3, [r4, #48]	; 0x30
 801644e:	4b0d      	ldr	r3, [pc, #52]	; (8016484 <std+0x68>)
 8016450:	6224      	str	r4, [r4, #32]
 8016452:	429c      	cmp	r4, r3
 8016454:	d006      	beq.n	8016464 <std+0x48>
 8016456:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801645a:	4294      	cmp	r4, r2
 801645c:	d002      	beq.n	8016464 <std+0x48>
 801645e:	33d0      	adds	r3, #208	; 0xd0
 8016460:	429c      	cmp	r4, r3
 8016462:	d105      	bne.n	8016470 <std+0x54>
 8016464:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801646c:	f000 ba42 	b.w	80168f4 <__retarget_lock_init_recursive>
 8016470:	bd10      	pop	{r4, pc}
 8016472:	bf00      	nop
 8016474:	0801662d 	.word	0x0801662d
 8016478:	0801664f 	.word	0x0801664f
 801647c:	08016687 	.word	0x08016687
 8016480:	080166ab 	.word	0x080166ab
 8016484:	200131a8 	.word	0x200131a8

08016488 <stdio_exit_handler>:
 8016488:	4a02      	ldr	r2, [pc, #8]	; (8016494 <stdio_exit_handler+0xc>)
 801648a:	4903      	ldr	r1, [pc, #12]	; (8016498 <stdio_exit_handler+0x10>)
 801648c:	4803      	ldr	r0, [pc, #12]	; (801649c <stdio_exit_handler+0x14>)
 801648e:	f000 b869 	b.w	8016564 <_fwalk_sglue>
 8016492:	bf00      	nop
 8016494:	200000b4 	.word	0x200000b4
 8016498:	08017389 	.word	0x08017389
 801649c:	200000c0 	.word	0x200000c0

080164a0 <cleanup_stdio>:
 80164a0:	6841      	ldr	r1, [r0, #4]
 80164a2:	4b0c      	ldr	r3, [pc, #48]	; (80164d4 <cleanup_stdio+0x34>)
 80164a4:	4299      	cmp	r1, r3
 80164a6:	b510      	push	{r4, lr}
 80164a8:	4604      	mov	r4, r0
 80164aa:	d001      	beq.n	80164b0 <cleanup_stdio+0x10>
 80164ac:	f000 ff6c 	bl	8017388 <_fflush_r>
 80164b0:	68a1      	ldr	r1, [r4, #8]
 80164b2:	4b09      	ldr	r3, [pc, #36]	; (80164d8 <cleanup_stdio+0x38>)
 80164b4:	4299      	cmp	r1, r3
 80164b6:	d002      	beq.n	80164be <cleanup_stdio+0x1e>
 80164b8:	4620      	mov	r0, r4
 80164ba:	f000 ff65 	bl	8017388 <_fflush_r>
 80164be:	68e1      	ldr	r1, [r4, #12]
 80164c0:	4b06      	ldr	r3, [pc, #24]	; (80164dc <cleanup_stdio+0x3c>)
 80164c2:	4299      	cmp	r1, r3
 80164c4:	d004      	beq.n	80164d0 <cleanup_stdio+0x30>
 80164c6:	4620      	mov	r0, r4
 80164c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164cc:	f000 bf5c 	b.w	8017388 <_fflush_r>
 80164d0:	bd10      	pop	{r4, pc}
 80164d2:	bf00      	nop
 80164d4:	200131a8 	.word	0x200131a8
 80164d8:	20013210 	.word	0x20013210
 80164dc:	20013278 	.word	0x20013278

080164e0 <global_stdio_init.part.0>:
 80164e0:	b510      	push	{r4, lr}
 80164e2:	4b0b      	ldr	r3, [pc, #44]	; (8016510 <global_stdio_init.part.0+0x30>)
 80164e4:	4c0b      	ldr	r4, [pc, #44]	; (8016514 <global_stdio_init.part.0+0x34>)
 80164e6:	4a0c      	ldr	r2, [pc, #48]	; (8016518 <global_stdio_init.part.0+0x38>)
 80164e8:	601a      	str	r2, [r3, #0]
 80164ea:	4620      	mov	r0, r4
 80164ec:	2200      	movs	r2, #0
 80164ee:	2104      	movs	r1, #4
 80164f0:	f7ff ff94 	bl	801641c <std>
 80164f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80164f8:	2201      	movs	r2, #1
 80164fa:	2109      	movs	r1, #9
 80164fc:	f7ff ff8e 	bl	801641c <std>
 8016500:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016504:	2202      	movs	r2, #2
 8016506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801650a:	2112      	movs	r1, #18
 801650c:	f7ff bf86 	b.w	801641c <std>
 8016510:	200132e0 	.word	0x200132e0
 8016514:	200131a8 	.word	0x200131a8
 8016518:	08016489 	.word	0x08016489

0801651c <__sfp_lock_acquire>:
 801651c:	4801      	ldr	r0, [pc, #4]	; (8016524 <__sfp_lock_acquire+0x8>)
 801651e:	f000 b9ea 	b.w	80168f6 <__retarget_lock_acquire_recursive>
 8016522:	bf00      	nop
 8016524:	200132ea 	.word	0x200132ea

08016528 <__sfp_lock_release>:
 8016528:	4801      	ldr	r0, [pc, #4]	; (8016530 <__sfp_lock_release+0x8>)
 801652a:	f000 b9e5 	b.w	80168f8 <__retarget_lock_release_recursive>
 801652e:	bf00      	nop
 8016530:	200132ea 	.word	0x200132ea

08016534 <__sinit>:
 8016534:	b510      	push	{r4, lr}
 8016536:	4604      	mov	r4, r0
 8016538:	f7ff fff0 	bl	801651c <__sfp_lock_acquire>
 801653c:	6a23      	ldr	r3, [r4, #32]
 801653e:	b11b      	cbz	r3, 8016548 <__sinit+0x14>
 8016540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016544:	f7ff bff0 	b.w	8016528 <__sfp_lock_release>
 8016548:	4b04      	ldr	r3, [pc, #16]	; (801655c <__sinit+0x28>)
 801654a:	6223      	str	r3, [r4, #32]
 801654c:	4b04      	ldr	r3, [pc, #16]	; (8016560 <__sinit+0x2c>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d1f5      	bne.n	8016540 <__sinit+0xc>
 8016554:	f7ff ffc4 	bl	80164e0 <global_stdio_init.part.0>
 8016558:	e7f2      	b.n	8016540 <__sinit+0xc>
 801655a:	bf00      	nop
 801655c:	080164a1 	.word	0x080164a1
 8016560:	200132e0 	.word	0x200132e0

08016564 <_fwalk_sglue>:
 8016564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016568:	4607      	mov	r7, r0
 801656a:	4688      	mov	r8, r1
 801656c:	4614      	mov	r4, r2
 801656e:	2600      	movs	r6, #0
 8016570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016574:	f1b9 0901 	subs.w	r9, r9, #1
 8016578:	d505      	bpl.n	8016586 <_fwalk_sglue+0x22>
 801657a:	6824      	ldr	r4, [r4, #0]
 801657c:	2c00      	cmp	r4, #0
 801657e:	d1f7      	bne.n	8016570 <_fwalk_sglue+0xc>
 8016580:	4630      	mov	r0, r6
 8016582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016586:	89ab      	ldrh	r3, [r5, #12]
 8016588:	2b01      	cmp	r3, #1
 801658a:	d907      	bls.n	801659c <_fwalk_sglue+0x38>
 801658c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016590:	3301      	adds	r3, #1
 8016592:	d003      	beq.n	801659c <_fwalk_sglue+0x38>
 8016594:	4629      	mov	r1, r5
 8016596:	4638      	mov	r0, r7
 8016598:	47c0      	blx	r8
 801659a:	4306      	orrs	r6, r0
 801659c:	3568      	adds	r5, #104	; 0x68
 801659e:	e7e9      	b.n	8016574 <_fwalk_sglue+0x10>

080165a0 <iprintf>:
 80165a0:	b40f      	push	{r0, r1, r2, r3}
 80165a2:	b507      	push	{r0, r1, r2, lr}
 80165a4:	4906      	ldr	r1, [pc, #24]	; (80165c0 <iprintf+0x20>)
 80165a6:	ab04      	add	r3, sp, #16
 80165a8:	6808      	ldr	r0, [r1, #0]
 80165aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80165ae:	6881      	ldr	r1, [r0, #8]
 80165b0:	9301      	str	r3, [sp, #4]
 80165b2:	f000 fbb9 	bl	8016d28 <_vfiprintf_r>
 80165b6:	b003      	add	sp, #12
 80165b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80165bc:	b004      	add	sp, #16
 80165be:	4770      	bx	lr
 80165c0:	2000010c 	.word	0x2000010c

080165c4 <sniprintf>:
 80165c4:	b40c      	push	{r2, r3}
 80165c6:	b530      	push	{r4, r5, lr}
 80165c8:	4b17      	ldr	r3, [pc, #92]	; (8016628 <sniprintf+0x64>)
 80165ca:	1e0c      	subs	r4, r1, #0
 80165cc:	681d      	ldr	r5, [r3, #0]
 80165ce:	b09d      	sub	sp, #116	; 0x74
 80165d0:	da08      	bge.n	80165e4 <sniprintf+0x20>
 80165d2:	238b      	movs	r3, #139	; 0x8b
 80165d4:	602b      	str	r3, [r5, #0]
 80165d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165da:	b01d      	add	sp, #116	; 0x74
 80165dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165e0:	b002      	add	sp, #8
 80165e2:	4770      	bx	lr
 80165e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80165e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165ec:	bf14      	ite	ne
 80165ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80165f2:	4623      	moveq	r3, r4
 80165f4:	9304      	str	r3, [sp, #16]
 80165f6:	9307      	str	r3, [sp, #28]
 80165f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165fc:	9002      	str	r0, [sp, #8]
 80165fe:	9006      	str	r0, [sp, #24]
 8016600:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016606:	ab21      	add	r3, sp, #132	; 0x84
 8016608:	a902      	add	r1, sp, #8
 801660a:	4628      	mov	r0, r5
 801660c:	9301      	str	r3, [sp, #4]
 801660e:	f000 fa63 	bl	8016ad8 <_svfiprintf_r>
 8016612:	1c43      	adds	r3, r0, #1
 8016614:	bfbc      	itt	lt
 8016616:	238b      	movlt	r3, #139	; 0x8b
 8016618:	602b      	strlt	r3, [r5, #0]
 801661a:	2c00      	cmp	r4, #0
 801661c:	d0dd      	beq.n	80165da <sniprintf+0x16>
 801661e:	9b02      	ldr	r3, [sp, #8]
 8016620:	2200      	movs	r2, #0
 8016622:	701a      	strb	r2, [r3, #0]
 8016624:	e7d9      	b.n	80165da <sniprintf+0x16>
 8016626:	bf00      	nop
 8016628:	2000010c 	.word	0x2000010c

0801662c <__sread>:
 801662c:	b510      	push	{r4, lr}
 801662e:	460c      	mov	r4, r1
 8016630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016634:	f000 f900 	bl	8016838 <_read_r>
 8016638:	2800      	cmp	r0, #0
 801663a:	bfab      	itete	ge
 801663c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801663e:	89a3      	ldrhlt	r3, [r4, #12]
 8016640:	181b      	addge	r3, r3, r0
 8016642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016646:	bfac      	ite	ge
 8016648:	6563      	strge	r3, [r4, #84]	; 0x54
 801664a:	81a3      	strhlt	r3, [r4, #12]
 801664c:	bd10      	pop	{r4, pc}

0801664e <__swrite>:
 801664e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016652:	461f      	mov	r7, r3
 8016654:	898b      	ldrh	r3, [r1, #12]
 8016656:	05db      	lsls	r3, r3, #23
 8016658:	4605      	mov	r5, r0
 801665a:	460c      	mov	r4, r1
 801665c:	4616      	mov	r6, r2
 801665e:	d505      	bpl.n	801666c <__swrite+0x1e>
 8016660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016664:	2302      	movs	r3, #2
 8016666:	2200      	movs	r2, #0
 8016668:	f000 f8d4 	bl	8016814 <_lseek_r>
 801666c:	89a3      	ldrh	r3, [r4, #12]
 801666e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016676:	81a3      	strh	r3, [r4, #12]
 8016678:	4632      	mov	r2, r6
 801667a:	463b      	mov	r3, r7
 801667c:	4628      	mov	r0, r5
 801667e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016682:	f000 b8fb 	b.w	801687c <_write_r>

08016686 <__sseek>:
 8016686:	b510      	push	{r4, lr}
 8016688:	460c      	mov	r4, r1
 801668a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801668e:	f000 f8c1 	bl	8016814 <_lseek_r>
 8016692:	1c43      	adds	r3, r0, #1
 8016694:	89a3      	ldrh	r3, [r4, #12]
 8016696:	bf15      	itete	ne
 8016698:	6560      	strne	r0, [r4, #84]	; 0x54
 801669a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801669e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80166a2:	81a3      	strheq	r3, [r4, #12]
 80166a4:	bf18      	it	ne
 80166a6:	81a3      	strhne	r3, [r4, #12]
 80166a8:	bd10      	pop	{r4, pc}

080166aa <__sclose>:
 80166aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166ae:	f000 b8a1 	b.w	80167f4 <_close_r>

080166b2 <_vsniprintf_r>:
 80166b2:	b530      	push	{r4, r5, lr}
 80166b4:	4614      	mov	r4, r2
 80166b6:	2c00      	cmp	r4, #0
 80166b8:	b09b      	sub	sp, #108	; 0x6c
 80166ba:	4605      	mov	r5, r0
 80166bc:	461a      	mov	r2, r3
 80166be:	da05      	bge.n	80166cc <_vsniprintf_r+0x1a>
 80166c0:	238b      	movs	r3, #139	; 0x8b
 80166c2:	6003      	str	r3, [r0, #0]
 80166c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166c8:	b01b      	add	sp, #108	; 0x6c
 80166ca:	bd30      	pop	{r4, r5, pc}
 80166cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80166d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80166d4:	bf14      	ite	ne
 80166d6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80166da:	4623      	moveq	r3, r4
 80166dc:	9302      	str	r3, [sp, #8]
 80166de:	9305      	str	r3, [sp, #20]
 80166e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166e4:	9100      	str	r1, [sp, #0]
 80166e6:	9104      	str	r1, [sp, #16]
 80166e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80166ec:	4669      	mov	r1, sp
 80166ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80166f0:	f000 f9f2 	bl	8016ad8 <_svfiprintf_r>
 80166f4:	1c43      	adds	r3, r0, #1
 80166f6:	bfbc      	itt	lt
 80166f8:	238b      	movlt	r3, #139	; 0x8b
 80166fa:	602b      	strlt	r3, [r5, #0]
 80166fc:	2c00      	cmp	r4, #0
 80166fe:	d0e3      	beq.n	80166c8 <_vsniprintf_r+0x16>
 8016700:	9b00      	ldr	r3, [sp, #0]
 8016702:	2200      	movs	r2, #0
 8016704:	701a      	strb	r2, [r3, #0]
 8016706:	e7df      	b.n	80166c8 <_vsniprintf_r+0x16>

08016708 <vsniprintf>:
 8016708:	b507      	push	{r0, r1, r2, lr}
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	4613      	mov	r3, r2
 801670e:	460a      	mov	r2, r1
 8016710:	4601      	mov	r1, r0
 8016712:	4803      	ldr	r0, [pc, #12]	; (8016720 <vsniprintf+0x18>)
 8016714:	6800      	ldr	r0, [r0, #0]
 8016716:	f7ff ffcc 	bl	80166b2 <_vsniprintf_r>
 801671a:	b003      	add	sp, #12
 801671c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016720:	2000010c 	.word	0x2000010c

08016724 <memcmp>:
 8016724:	b510      	push	{r4, lr}
 8016726:	3901      	subs	r1, #1
 8016728:	4402      	add	r2, r0
 801672a:	4290      	cmp	r0, r2
 801672c:	d101      	bne.n	8016732 <memcmp+0xe>
 801672e:	2000      	movs	r0, #0
 8016730:	e005      	b.n	801673e <memcmp+0x1a>
 8016732:	7803      	ldrb	r3, [r0, #0]
 8016734:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016738:	42a3      	cmp	r3, r4
 801673a:	d001      	beq.n	8016740 <memcmp+0x1c>
 801673c:	1b18      	subs	r0, r3, r4
 801673e:	bd10      	pop	{r4, pc}
 8016740:	3001      	adds	r0, #1
 8016742:	e7f2      	b.n	801672a <memcmp+0x6>

08016744 <memmove>:
 8016744:	4288      	cmp	r0, r1
 8016746:	b510      	push	{r4, lr}
 8016748:	eb01 0402 	add.w	r4, r1, r2
 801674c:	d902      	bls.n	8016754 <memmove+0x10>
 801674e:	4284      	cmp	r4, r0
 8016750:	4623      	mov	r3, r4
 8016752:	d807      	bhi.n	8016764 <memmove+0x20>
 8016754:	1e43      	subs	r3, r0, #1
 8016756:	42a1      	cmp	r1, r4
 8016758:	d008      	beq.n	801676c <memmove+0x28>
 801675a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801675e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016762:	e7f8      	b.n	8016756 <memmove+0x12>
 8016764:	4402      	add	r2, r0
 8016766:	4601      	mov	r1, r0
 8016768:	428a      	cmp	r2, r1
 801676a:	d100      	bne.n	801676e <memmove+0x2a>
 801676c:	bd10      	pop	{r4, pc}
 801676e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016776:	e7f7      	b.n	8016768 <memmove+0x24>

08016778 <memset>:
 8016778:	4402      	add	r2, r0
 801677a:	4603      	mov	r3, r0
 801677c:	4293      	cmp	r3, r2
 801677e:	d100      	bne.n	8016782 <memset+0xa>
 8016780:	4770      	bx	lr
 8016782:	f803 1b01 	strb.w	r1, [r3], #1
 8016786:	e7f9      	b.n	801677c <memset+0x4>

08016788 <strchr>:
 8016788:	b2c9      	uxtb	r1, r1
 801678a:	4603      	mov	r3, r0
 801678c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016790:	b11a      	cbz	r2, 801679a <strchr+0x12>
 8016792:	428a      	cmp	r2, r1
 8016794:	d1f9      	bne.n	801678a <strchr+0x2>
 8016796:	4618      	mov	r0, r3
 8016798:	4770      	bx	lr
 801679a:	2900      	cmp	r1, #0
 801679c:	bf18      	it	ne
 801679e:	2300      	movne	r3, #0
 80167a0:	e7f9      	b.n	8016796 <strchr+0xe>

080167a2 <strncmp>:
 80167a2:	b510      	push	{r4, lr}
 80167a4:	b16a      	cbz	r2, 80167c2 <strncmp+0x20>
 80167a6:	3901      	subs	r1, #1
 80167a8:	1884      	adds	r4, r0, r2
 80167aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d103      	bne.n	80167be <strncmp+0x1c>
 80167b6:	42a0      	cmp	r0, r4
 80167b8:	d001      	beq.n	80167be <strncmp+0x1c>
 80167ba:	2a00      	cmp	r2, #0
 80167bc:	d1f5      	bne.n	80167aa <strncmp+0x8>
 80167be:	1ad0      	subs	r0, r2, r3
 80167c0:	bd10      	pop	{r4, pc}
 80167c2:	4610      	mov	r0, r2
 80167c4:	e7fc      	b.n	80167c0 <strncmp+0x1e>

080167c6 <strstr>:
 80167c6:	780a      	ldrb	r2, [r1, #0]
 80167c8:	b570      	push	{r4, r5, r6, lr}
 80167ca:	b96a      	cbnz	r2, 80167e8 <strstr+0x22>
 80167cc:	bd70      	pop	{r4, r5, r6, pc}
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d109      	bne.n	80167e6 <strstr+0x20>
 80167d2:	460c      	mov	r4, r1
 80167d4:	4605      	mov	r5, r0
 80167d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d0f6      	beq.n	80167cc <strstr+0x6>
 80167de:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80167e2:	429e      	cmp	r6, r3
 80167e4:	d0f7      	beq.n	80167d6 <strstr+0x10>
 80167e6:	3001      	adds	r0, #1
 80167e8:	7803      	ldrb	r3, [r0, #0]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d1ef      	bne.n	80167ce <strstr+0x8>
 80167ee:	4618      	mov	r0, r3
 80167f0:	e7ec      	b.n	80167cc <strstr+0x6>
	...

080167f4 <_close_r>:
 80167f4:	b538      	push	{r3, r4, r5, lr}
 80167f6:	4d06      	ldr	r5, [pc, #24]	; (8016810 <_close_r+0x1c>)
 80167f8:	2300      	movs	r3, #0
 80167fa:	4604      	mov	r4, r0
 80167fc:	4608      	mov	r0, r1
 80167fe:	602b      	str	r3, [r5, #0]
 8016800:	f7eb fa1d 	bl	8001c3e <_close>
 8016804:	1c43      	adds	r3, r0, #1
 8016806:	d102      	bne.n	801680e <_close_r+0x1a>
 8016808:	682b      	ldr	r3, [r5, #0]
 801680a:	b103      	cbz	r3, 801680e <_close_r+0x1a>
 801680c:	6023      	str	r3, [r4, #0]
 801680e:	bd38      	pop	{r3, r4, r5, pc}
 8016810:	200132e4 	.word	0x200132e4

08016814 <_lseek_r>:
 8016814:	b538      	push	{r3, r4, r5, lr}
 8016816:	4d07      	ldr	r5, [pc, #28]	; (8016834 <_lseek_r+0x20>)
 8016818:	4604      	mov	r4, r0
 801681a:	4608      	mov	r0, r1
 801681c:	4611      	mov	r1, r2
 801681e:	2200      	movs	r2, #0
 8016820:	602a      	str	r2, [r5, #0]
 8016822:	461a      	mov	r2, r3
 8016824:	f7eb fa32 	bl	8001c8c <_lseek>
 8016828:	1c43      	adds	r3, r0, #1
 801682a:	d102      	bne.n	8016832 <_lseek_r+0x1e>
 801682c:	682b      	ldr	r3, [r5, #0]
 801682e:	b103      	cbz	r3, 8016832 <_lseek_r+0x1e>
 8016830:	6023      	str	r3, [r4, #0]
 8016832:	bd38      	pop	{r3, r4, r5, pc}
 8016834:	200132e4 	.word	0x200132e4

08016838 <_read_r>:
 8016838:	b538      	push	{r3, r4, r5, lr}
 801683a:	4d07      	ldr	r5, [pc, #28]	; (8016858 <_read_r+0x20>)
 801683c:	4604      	mov	r4, r0
 801683e:	4608      	mov	r0, r1
 8016840:	4611      	mov	r1, r2
 8016842:	2200      	movs	r2, #0
 8016844:	602a      	str	r2, [r5, #0]
 8016846:	461a      	mov	r2, r3
 8016848:	f7eb f9c0 	bl	8001bcc <_read>
 801684c:	1c43      	adds	r3, r0, #1
 801684e:	d102      	bne.n	8016856 <_read_r+0x1e>
 8016850:	682b      	ldr	r3, [r5, #0]
 8016852:	b103      	cbz	r3, 8016856 <_read_r+0x1e>
 8016854:	6023      	str	r3, [r4, #0]
 8016856:	bd38      	pop	{r3, r4, r5, pc}
 8016858:	200132e4 	.word	0x200132e4

0801685c <_sbrk_r>:
 801685c:	b538      	push	{r3, r4, r5, lr}
 801685e:	4d06      	ldr	r5, [pc, #24]	; (8016878 <_sbrk_r+0x1c>)
 8016860:	2300      	movs	r3, #0
 8016862:	4604      	mov	r4, r0
 8016864:	4608      	mov	r0, r1
 8016866:	602b      	str	r3, [r5, #0]
 8016868:	f7eb fa1e 	bl	8001ca8 <_sbrk>
 801686c:	1c43      	adds	r3, r0, #1
 801686e:	d102      	bne.n	8016876 <_sbrk_r+0x1a>
 8016870:	682b      	ldr	r3, [r5, #0]
 8016872:	b103      	cbz	r3, 8016876 <_sbrk_r+0x1a>
 8016874:	6023      	str	r3, [r4, #0]
 8016876:	bd38      	pop	{r3, r4, r5, pc}
 8016878:	200132e4 	.word	0x200132e4

0801687c <_write_r>:
 801687c:	b538      	push	{r3, r4, r5, lr}
 801687e:	4d07      	ldr	r5, [pc, #28]	; (801689c <_write_r+0x20>)
 8016880:	4604      	mov	r4, r0
 8016882:	4608      	mov	r0, r1
 8016884:	4611      	mov	r1, r2
 8016886:	2200      	movs	r2, #0
 8016888:	602a      	str	r2, [r5, #0]
 801688a:	461a      	mov	r2, r3
 801688c:	f7eb f9bb 	bl	8001c06 <_write>
 8016890:	1c43      	adds	r3, r0, #1
 8016892:	d102      	bne.n	801689a <_write_r+0x1e>
 8016894:	682b      	ldr	r3, [r5, #0]
 8016896:	b103      	cbz	r3, 801689a <_write_r+0x1e>
 8016898:	6023      	str	r3, [r4, #0]
 801689a:	bd38      	pop	{r3, r4, r5, pc}
 801689c:	200132e4 	.word	0x200132e4

080168a0 <__errno>:
 80168a0:	4b01      	ldr	r3, [pc, #4]	; (80168a8 <__errno+0x8>)
 80168a2:	6818      	ldr	r0, [r3, #0]
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	2000010c 	.word	0x2000010c

080168ac <__libc_init_array>:
 80168ac:	b570      	push	{r4, r5, r6, lr}
 80168ae:	4d0d      	ldr	r5, [pc, #52]	; (80168e4 <__libc_init_array+0x38>)
 80168b0:	4c0d      	ldr	r4, [pc, #52]	; (80168e8 <__libc_init_array+0x3c>)
 80168b2:	1b64      	subs	r4, r4, r5
 80168b4:	10a4      	asrs	r4, r4, #2
 80168b6:	2600      	movs	r6, #0
 80168b8:	42a6      	cmp	r6, r4
 80168ba:	d109      	bne.n	80168d0 <__libc_init_array+0x24>
 80168bc:	4d0b      	ldr	r5, [pc, #44]	; (80168ec <__libc_init_array+0x40>)
 80168be:	4c0c      	ldr	r4, [pc, #48]	; (80168f0 <__libc_init_array+0x44>)
 80168c0:	f000 ff02 	bl	80176c8 <_init>
 80168c4:	1b64      	subs	r4, r4, r5
 80168c6:	10a4      	asrs	r4, r4, #2
 80168c8:	2600      	movs	r6, #0
 80168ca:	42a6      	cmp	r6, r4
 80168cc:	d105      	bne.n	80168da <__libc_init_array+0x2e>
 80168ce:	bd70      	pop	{r4, r5, r6, pc}
 80168d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80168d4:	4798      	blx	r3
 80168d6:	3601      	adds	r6, #1
 80168d8:	e7ee      	b.n	80168b8 <__libc_init_array+0xc>
 80168da:	f855 3b04 	ldr.w	r3, [r5], #4
 80168de:	4798      	blx	r3
 80168e0:	3601      	adds	r6, #1
 80168e2:	e7f2      	b.n	80168ca <__libc_init_array+0x1e>
 80168e4:	080185cc 	.word	0x080185cc
 80168e8:	080185cc 	.word	0x080185cc
 80168ec:	080185cc 	.word	0x080185cc
 80168f0:	080185d4 	.word	0x080185d4

080168f4 <__retarget_lock_init_recursive>:
 80168f4:	4770      	bx	lr

080168f6 <__retarget_lock_acquire_recursive>:
 80168f6:	4770      	bx	lr

080168f8 <__retarget_lock_release_recursive>:
 80168f8:	4770      	bx	lr

080168fa <strcpy>:
 80168fa:	4603      	mov	r3, r0
 80168fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016900:	f803 2b01 	strb.w	r2, [r3], #1
 8016904:	2a00      	cmp	r2, #0
 8016906:	d1f9      	bne.n	80168fc <strcpy+0x2>
 8016908:	4770      	bx	lr

0801690a <memcpy>:
 801690a:	440a      	add	r2, r1
 801690c:	4291      	cmp	r1, r2
 801690e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016912:	d100      	bne.n	8016916 <memcpy+0xc>
 8016914:	4770      	bx	lr
 8016916:	b510      	push	{r4, lr}
 8016918:	f811 4b01 	ldrb.w	r4, [r1], #1
 801691c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016920:	4291      	cmp	r1, r2
 8016922:	d1f9      	bne.n	8016918 <memcpy+0xe>
 8016924:	bd10      	pop	{r4, pc}
	...

08016928 <__assert_func>:
 8016928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801692a:	4614      	mov	r4, r2
 801692c:	461a      	mov	r2, r3
 801692e:	4b09      	ldr	r3, [pc, #36]	; (8016954 <__assert_func+0x2c>)
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	4605      	mov	r5, r0
 8016934:	68d8      	ldr	r0, [r3, #12]
 8016936:	b14c      	cbz	r4, 801694c <__assert_func+0x24>
 8016938:	4b07      	ldr	r3, [pc, #28]	; (8016958 <__assert_func+0x30>)
 801693a:	9100      	str	r1, [sp, #0]
 801693c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016940:	4906      	ldr	r1, [pc, #24]	; (801695c <__assert_func+0x34>)
 8016942:	462b      	mov	r3, r5
 8016944:	f000 fd48 	bl	80173d8 <fiprintf>
 8016948:	f000 fdee 	bl	8017528 <abort>
 801694c:	4b04      	ldr	r3, [pc, #16]	; (8016960 <__assert_func+0x38>)
 801694e:	461c      	mov	r4, r3
 8016950:	e7f3      	b.n	801693a <__assert_func+0x12>
 8016952:	bf00      	nop
 8016954:	2000010c 	.word	0x2000010c
 8016958:	08018554 	.word	0x08018554
 801695c:	08018561 	.word	0x08018561
 8016960:	0801858f 	.word	0x0801858f

08016964 <__env_lock>:
 8016964:	4801      	ldr	r0, [pc, #4]	; (801696c <__env_lock+0x8>)
 8016966:	f7ff bfc6 	b.w	80168f6 <__retarget_lock_acquire_recursive>
 801696a:	bf00      	nop
 801696c:	200132e8 	.word	0x200132e8

08016970 <__env_unlock>:
 8016970:	4801      	ldr	r0, [pc, #4]	; (8016978 <__env_unlock+0x8>)
 8016972:	f7ff bfc1 	b.w	80168f8 <__retarget_lock_release_recursive>
 8016976:	bf00      	nop
 8016978:	200132e8 	.word	0x200132e8

0801697c <_free_r>:
 801697c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801697e:	2900      	cmp	r1, #0
 8016980:	d044      	beq.n	8016a0c <_free_r+0x90>
 8016982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016986:	9001      	str	r0, [sp, #4]
 8016988:	2b00      	cmp	r3, #0
 801698a:	f1a1 0404 	sub.w	r4, r1, #4
 801698e:	bfb8      	it	lt
 8016990:	18e4      	addlt	r4, r4, r3
 8016992:	f7ff fc17 	bl	80161c4 <__malloc_lock>
 8016996:	4a1e      	ldr	r2, [pc, #120]	; (8016a10 <_free_r+0x94>)
 8016998:	9801      	ldr	r0, [sp, #4]
 801699a:	6813      	ldr	r3, [r2, #0]
 801699c:	b933      	cbnz	r3, 80169ac <_free_r+0x30>
 801699e:	6063      	str	r3, [r4, #4]
 80169a0:	6014      	str	r4, [r2, #0]
 80169a2:	b003      	add	sp, #12
 80169a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80169a8:	f7ff bc12 	b.w	80161d0 <__malloc_unlock>
 80169ac:	42a3      	cmp	r3, r4
 80169ae:	d908      	bls.n	80169c2 <_free_r+0x46>
 80169b0:	6825      	ldr	r5, [r4, #0]
 80169b2:	1961      	adds	r1, r4, r5
 80169b4:	428b      	cmp	r3, r1
 80169b6:	bf01      	itttt	eq
 80169b8:	6819      	ldreq	r1, [r3, #0]
 80169ba:	685b      	ldreq	r3, [r3, #4]
 80169bc:	1949      	addeq	r1, r1, r5
 80169be:	6021      	streq	r1, [r4, #0]
 80169c0:	e7ed      	b.n	801699e <_free_r+0x22>
 80169c2:	461a      	mov	r2, r3
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	b10b      	cbz	r3, 80169cc <_free_r+0x50>
 80169c8:	42a3      	cmp	r3, r4
 80169ca:	d9fa      	bls.n	80169c2 <_free_r+0x46>
 80169cc:	6811      	ldr	r1, [r2, #0]
 80169ce:	1855      	adds	r5, r2, r1
 80169d0:	42a5      	cmp	r5, r4
 80169d2:	d10b      	bne.n	80169ec <_free_r+0x70>
 80169d4:	6824      	ldr	r4, [r4, #0]
 80169d6:	4421      	add	r1, r4
 80169d8:	1854      	adds	r4, r2, r1
 80169da:	42a3      	cmp	r3, r4
 80169dc:	6011      	str	r1, [r2, #0]
 80169de:	d1e0      	bne.n	80169a2 <_free_r+0x26>
 80169e0:	681c      	ldr	r4, [r3, #0]
 80169e2:	685b      	ldr	r3, [r3, #4]
 80169e4:	6053      	str	r3, [r2, #4]
 80169e6:	440c      	add	r4, r1
 80169e8:	6014      	str	r4, [r2, #0]
 80169ea:	e7da      	b.n	80169a2 <_free_r+0x26>
 80169ec:	d902      	bls.n	80169f4 <_free_r+0x78>
 80169ee:	230c      	movs	r3, #12
 80169f0:	6003      	str	r3, [r0, #0]
 80169f2:	e7d6      	b.n	80169a2 <_free_r+0x26>
 80169f4:	6825      	ldr	r5, [r4, #0]
 80169f6:	1961      	adds	r1, r4, r5
 80169f8:	428b      	cmp	r3, r1
 80169fa:	bf04      	itt	eq
 80169fc:	6819      	ldreq	r1, [r3, #0]
 80169fe:	685b      	ldreq	r3, [r3, #4]
 8016a00:	6063      	str	r3, [r4, #4]
 8016a02:	bf04      	itt	eq
 8016a04:	1949      	addeq	r1, r1, r5
 8016a06:	6021      	streq	r1, [r4, #0]
 8016a08:	6054      	str	r4, [r2, #4]
 8016a0a:	e7ca      	b.n	80169a2 <_free_r+0x26>
 8016a0c:	b003      	add	sp, #12
 8016a0e:	bd30      	pop	{r4, r5, pc}
 8016a10:	200131a0 	.word	0x200131a0

08016a14 <_malloc_usable_size_r>:
 8016a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a18:	1f18      	subs	r0, r3, #4
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	bfbc      	itt	lt
 8016a1e:	580b      	ldrlt	r3, [r1, r0]
 8016a20:	18c0      	addlt	r0, r0, r3
 8016a22:	4770      	bx	lr

08016a24 <__ssputs_r>:
 8016a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a28:	688e      	ldr	r6, [r1, #8]
 8016a2a:	461f      	mov	r7, r3
 8016a2c:	42be      	cmp	r6, r7
 8016a2e:	680b      	ldr	r3, [r1, #0]
 8016a30:	4682      	mov	sl, r0
 8016a32:	460c      	mov	r4, r1
 8016a34:	4690      	mov	r8, r2
 8016a36:	d82c      	bhi.n	8016a92 <__ssputs_r+0x6e>
 8016a38:	898a      	ldrh	r2, [r1, #12]
 8016a3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a3e:	d026      	beq.n	8016a8e <__ssputs_r+0x6a>
 8016a40:	6965      	ldr	r5, [r4, #20]
 8016a42:	6909      	ldr	r1, [r1, #16]
 8016a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a48:	eba3 0901 	sub.w	r9, r3, r1
 8016a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a50:	1c7b      	adds	r3, r7, #1
 8016a52:	444b      	add	r3, r9
 8016a54:	106d      	asrs	r5, r5, #1
 8016a56:	429d      	cmp	r5, r3
 8016a58:	bf38      	it	cc
 8016a5a:	461d      	movcc	r5, r3
 8016a5c:	0553      	lsls	r3, r2, #21
 8016a5e:	d527      	bpl.n	8016ab0 <__ssputs_r+0x8c>
 8016a60:	4629      	mov	r1, r5
 8016a62:	f7ff fb2f 	bl	80160c4 <_malloc_r>
 8016a66:	4606      	mov	r6, r0
 8016a68:	b360      	cbz	r0, 8016ac4 <__ssputs_r+0xa0>
 8016a6a:	6921      	ldr	r1, [r4, #16]
 8016a6c:	464a      	mov	r2, r9
 8016a6e:	f7ff ff4c 	bl	801690a <memcpy>
 8016a72:	89a3      	ldrh	r3, [r4, #12]
 8016a74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a7c:	81a3      	strh	r3, [r4, #12]
 8016a7e:	6126      	str	r6, [r4, #16]
 8016a80:	6165      	str	r5, [r4, #20]
 8016a82:	444e      	add	r6, r9
 8016a84:	eba5 0509 	sub.w	r5, r5, r9
 8016a88:	6026      	str	r6, [r4, #0]
 8016a8a:	60a5      	str	r5, [r4, #8]
 8016a8c:	463e      	mov	r6, r7
 8016a8e:	42be      	cmp	r6, r7
 8016a90:	d900      	bls.n	8016a94 <__ssputs_r+0x70>
 8016a92:	463e      	mov	r6, r7
 8016a94:	6820      	ldr	r0, [r4, #0]
 8016a96:	4632      	mov	r2, r6
 8016a98:	4641      	mov	r1, r8
 8016a9a:	f7ff fe53 	bl	8016744 <memmove>
 8016a9e:	68a3      	ldr	r3, [r4, #8]
 8016aa0:	1b9b      	subs	r3, r3, r6
 8016aa2:	60a3      	str	r3, [r4, #8]
 8016aa4:	6823      	ldr	r3, [r4, #0]
 8016aa6:	4433      	add	r3, r6
 8016aa8:	6023      	str	r3, [r4, #0]
 8016aaa:	2000      	movs	r0, #0
 8016aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ab0:	462a      	mov	r2, r5
 8016ab2:	f7ff fc07 	bl	80162c4 <_realloc_r>
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	d1e0      	bne.n	8016a7e <__ssputs_r+0x5a>
 8016abc:	6921      	ldr	r1, [r4, #16]
 8016abe:	4650      	mov	r0, sl
 8016ac0:	f7ff ff5c 	bl	801697c <_free_r>
 8016ac4:	230c      	movs	r3, #12
 8016ac6:	f8ca 3000 	str.w	r3, [sl]
 8016aca:	89a3      	ldrh	r3, [r4, #12]
 8016acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ad0:	81a3      	strh	r3, [r4, #12]
 8016ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ad6:	e7e9      	b.n	8016aac <__ssputs_r+0x88>

08016ad8 <_svfiprintf_r>:
 8016ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016adc:	4698      	mov	r8, r3
 8016ade:	898b      	ldrh	r3, [r1, #12]
 8016ae0:	061b      	lsls	r3, r3, #24
 8016ae2:	b09d      	sub	sp, #116	; 0x74
 8016ae4:	4607      	mov	r7, r0
 8016ae6:	460d      	mov	r5, r1
 8016ae8:	4614      	mov	r4, r2
 8016aea:	d50e      	bpl.n	8016b0a <_svfiprintf_r+0x32>
 8016aec:	690b      	ldr	r3, [r1, #16]
 8016aee:	b963      	cbnz	r3, 8016b0a <_svfiprintf_r+0x32>
 8016af0:	2140      	movs	r1, #64	; 0x40
 8016af2:	f7ff fae7 	bl	80160c4 <_malloc_r>
 8016af6:	6028      	str	r0, [r5, #0]
 8016af8:	6128      	str	r0, [r5, #16]
 8016afa:	b920      	cbnz	r0, 8016b06 <_svfiprintf_r+0x2e>
 8016afc:	230c      	movs	r3, #12
 8016afe:	603b      	str	r3, [r7, #0]
 8016b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b04:	e0d0      	b.n	8016ca8 <_svfiprintf_r+0x1d0>
 8016b06:	2340      	movs	r3, #64	; 0x40
 8016b08:	616b      	str	r3, [r5, #20]
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b0e:	2320      	movs	r3, #32
 8016b10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b18:	2330      	movs	r3, #48	; 0x30
 8016b1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016cc0 <_svfiprintf_r+0x1e8>
 8016b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b22:	f04f 0901 	mov.w	r9, #1
 8016b26:	4623      	mov	r3, r4
 8016b28:	469a      	mov	sl, r3
 8016b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b2e:	b10a      	cbz	r2, 8016b34 <_svfiprintf_r+0x5c>
 8016b30:	2a25      	cmp	r2, #37	; 0x25
 8016b32:	d1f9      	bne.n	8016b28 <_svfiprintf_r+0x50>
 8016b34:	ebba 0b04 	subs.w	fp, sl, r4
 8016b38:	d00b      	beq.n	8016b52 <_svfiprintf_r+0x7a>
 8016b3a:	465b      	mov	r3, fp
 8016b3c:	4622      	mov	r2, r4
 8016b3e:	4629      	mov	r1, r5
 8016b40:	4638      	mov	r0, r7
 8016b42:	f7ff ff6f 	bl	8016a24 <__ssputs_r>
 8016b46:	3001      	adds	r0, #1
 8016b48:	f000 80a9 	beq.w	8016c9e <_svfiprintf_r+0x1c6>
 8016b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b4e:	445a      	add	r2, fp
 8016b50:	9209      	str	r2, [sp, #36]	; 0x24
 8016b52:	f89a 3000 	ldrb.w	r3, [sl]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	f000 80a1 	beq.w	8016c9e <_svfiprintf_r+0x1c6>
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b66:	f10a 0a01 	add.w	sl, sl, #1
 8016b6a:	9304      	str	r3, [sp, #16]
 8016b6c:	9307      	str	r3, [sp, #28]
 8016b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b72:	931a      	str	r3, [sp, #104]	; 0x68
 8016b74:	4654      	mov	r4, sl
 8016b76:	2205      	movs	r2, #5
 8016b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b7c:	4850      	ldr	r0, [pc, #320]	; (8016cc0 <_svfiprintf_r+0x1e8>)
 8016b7e:	f7e9 fb5f 	bl	8000240 <memchr>
 8016b82:	9a04      	ldr	r2, [sp, #16]
 8016b84:	b9d8      	cbnz	r0, 8016bbe <_svfiprintf_r+0xe6>
 8016b86:	06d0      	lsls	r0, r2, #27
 8016b88:	bf44      	itt	mi
 8016b8a:	2320      	movmi	r3, #32
 8016b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b90:	0711      	lsls	r1, r2, #28
 8016b92:	bf44      	itt	mi
 8016b94:	232b      	movmi	r3, #43	; 0x2b
 8016b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8016b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8016ba0:	d015      	beq.n	8016bce <_svfiprintf_r+0xf6>
 8016ba2:	9a07      	ldr	r2, [sp, #28]
 8016ba4:	4654      	mov	r4, sl
 8016ba6:	2000      	movs	r0, #0
 8016ba8:	f04f 0c0a 	mov.w	ip, #10
 8016bac:	4621      	mov	r1, r4
 8016bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bb2:	3b30      	subs	r3, #48	; 0x30
 8016bb4:	2b09      	cmp	r3, #9
 8016bb6:	d94d      	bls.n	8016c54 <_svfiprintf_r+0x17c>
 8016bb8:	b1b0      	cbz	r0, 8016be8 <_svfiprintf_r+0x110>
 8016bba:	9207      	str	r2, [sp, #28]
 8016bbc:	e014      	b.n	8016be8 <_svfiprintf_r+0x110>
 8016bbe:	eba0 0308 	sub.w	r3, r0, r8
 8016bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8016bc6:	4313      	orrs	r3, r2
 8016bc8:	9304      	str	r3, [sp, #16]
 8016bca:	46a2      	mov	sl, r4
 8016bcc:	e7d2      	b.n	8016b74 <_svfiprintf_r+0x9c>
 8016bce:	9b03      	ldr	r3, [sp, #12]
 8016bd0:	1d19      	adds	r1, r3, #4
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	9103      	str	r1, [sp, #12]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	bfbb      	ittet	lt
 8016bda:	425b      	neglt	r3, r3
 8016bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8016be0:	9307      	strge	r3, [sp, #28]
 8016be2:	9307      	strlt	r3, [sp, #28]
 8016be4:	bfb8      	it	lt
 8016be6:	9204      	strlt	r2, [sp, #16]
 8016be8:	7823      	ldrb	r3, [r4, #0]
 8016bea:	2b2e      	cmp	r3, #46	; 0x2e
 8016bec:	d10c      	bne.n	8016c08 <_svfiprintf_r+0x130>
 8016bee:	7863      	ldrb	r3, [r4, #1]
 8016bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8016bf2:	d134      	bne.n	8016c5e <_svfiprintf_r+0x186>
 8016bf4:	9b03      	ldr	r3, [sp, #12]
 8016bf6:	1d1a      	adds	r2, r3, #4
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	9203      	str	r2, [sp, #12]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	bfb8      	it	lt
 8016c00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016c04:	3402      	adds	r4, #2
 8016c06:	9305      	str	r3, [sp, #20]
 8016c08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016cd0 <_svfiprintf_r+0x1f8>
 8016c0c:	7821      	ldrb	r1, [r4, #0]
 8016c0e:	2203      	movs	r2, #3
 8016c10:	4650      	mov	r0, sl
 8016c12:	f7e9 fb15 	bl	8000240 <memchr>
 8016c16:	b138      	cbz	r0, 8016c28 <_svfiprintf_r+0x150>
 8016c18:	9b04      	ldr	r3, [sp, #16]
 8016c1a:	eba0 000a 	sub.w	r0, r0, sl
 8016c1e:	2240      	movs	r2, #64	; 0x40
 8016c20:	4082      	lsls	r2, r0
 8016c22:	4313      	orrs	r3, r2
 8016c24:	3401      	adds	r4, #1
 8016c26:	9304      	str	r3, [sp, #16]
 8016c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c2c:	4825      	ldr	r0, [pc, #148]	; (8016cc4 <_svfiprintf_r+0x1ec>)
 8016c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c32:	2206      	movs	r2, #6
 8016c34:	f7e9 fb04 	bl	8000240 <memchr>
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d038      	beq.n	8016cae <_svfiprintf_r+0x1d6>
 8016c3c:	4b22      	ldr	r3, [pc, #136]	; (8016cc8 <_svfiprintf_r+0x1f0>)
 8016c3e:	bb1b      	cbnz	r3, 8016c88 <_svfiprintf_r+0x1b0>
 8016c40:	9b03      	ldr	r3, [sp, #12]
 8016c42:	3307      	adds	r3, #7
 8016c44:	f023 0307 	bic.w	r3, r3, #7
 8016c48:	3308      	adds	r3, #8
 8016c4a:	9303      	str	r3, [sp, #12]
 8016c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c4e:	4433      	add	r3, r6
 8016c50:	9309      	str	r3, [sp, #36]	; 0x24
 8016c52:	e768      	b.n	8016b26 <_svfiprintf_r+0x4e>
 8016c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c58:	460c      	mov	r4, r1
 8016c5a:	2001      	movs	r0, #1
 8016c5c:	e7a6      	b.n	8016bac <_svfiprintf_r+0xd4>
 8016c5e:	2300      	movs	r3, #0
 8016c60:	3401      	adds	r4, #1
 8016c62:	9305      	str	r3, [sp, #20]
 8016c64:	4619      	mov	r1, r3
 8016c66:	f04f 0c0a 	mov.w	ip, #10
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c70:	3a30      	subs	r2, #48	; 0x30
 8016c72:	2a09      	cmp	r2, #9
 8016c74:	d903      	bls.n	8016c7e <_svfiprintf_r+0x1a6>
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d0c6      	beq.n	8016c08 <_svfiprintf_r+0x130>
 8016c7a:	9105      	str	r1, [sp, #20]
 8016c7c:	e7c4      	b.n	8016c08 <_svfiprintf_r+0x130>
 8016c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c82:	4604      	mov	r4, r0
 8016c84:	2301      	movs	r3, #1
 8016c86:	e7f0      	b.n	8016c6a <_svfiprintf_r+0x192>
 8016c88:	ab03      	add	r3, sp, #12
 8016c8a:	9300      	str	r3, [sp, #0]
 8016c8c:	462a      	mov	r2, r5
 8016c8e:	4b0f      	ldr	r3, [pc, #60]	; (8016ccc <_svfiprintf_r+0x1f4>)
 8016c90:	a904      	add	r1, sp, #16
 8016c92:	4638      	mov	r0, r7
 8016c94:	f3af 8000 	nop.w
 8016c98:	1c42      	adds	r2, r0, #1
 8016c9a:	4606      	mov	r6, r0
 8016c9c:	d1d6      	bne.n	8016c4c <_svfiprintf_r+0x174>
 8016c9e:	89ab      	ldrh	r3, [r5, #12]
 8016ca0:	065b      	lsls	r3, r3, #25
 8016ca2:	f53f af2d 	bmi.w	8016b00 <_svfiprintf_r+0x28>
 8016ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ca8:	b01d      	add	sp, #116	; 0x74
 8016caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cae:	ab03      	add	r3, sp, #12
 8016cb0:	9300      	str	r3, [sp, #0]
 8016cb2:	462a      	mov	r2, r5
 8016cb4:	4b05      	ldr	r3, [pc, #20]	; (8016ccc <_svfiprintf_r+0x1f4>)
 8016cb6:	a904      	add	r1, sp, #16
 8016cb8:	4638      	mov	r0, r7
 8016cba:	f000 f9bd 	bl	8017038 <_printf_i>
 8016cbe:	e7eb      	b.n	8016c98 <_svfiprintf_r+0x1c0>
 8016cc0:	08018590 	.word	0x08018590
 8016cc4:	0801859a 	.word	0x0801859a
 8016cc8:	00000000 	.word	0x00000000
 8016ccc:	08016a25 	.word	0x08016a25
 8016cd0:	08018596 	.word	0x08018596

08016cd4 <__sfputc_r>:
 8016cd4:	6893      	ldr	r3, [r2, #8]
 8016cd6:	3b01      	subs	r3, #1
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	b410      	push	{r4}
 8016cdc:	6093      	str	r3, [r2, #8]
 8016cde:	da08      	bge.n	8016cf2 <__sfputc_r+0x1e>
 8016ce0:	6994      	ldr	r4, [r2, #24]
 8016ce2:	42a3      	cmp	r3, r4
 8016ce4:	db01      	blt.n	8016cea <__sfputc_r+0x16>
 8016ce6:	290a      	cmp	r1, #10
 8016ce8:	d103      	bne.n	8016cf2 <__sfputc_r+0x1e>
 8016cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cee:	f000 bb85 	b.w	80173fc <__swbuf_r>
 8016cf2:	6813      	ldr	r3, [r2, #0]
 8016cf4:	1c58      	adds	r0, r3, #1
 8016cf6:	6010      	str	r0, [r2, #0]
 8016cf8:	7019      	strb	r1, [r3, #0]
 8016cfa:	4608      	mov	r0, r1
 8016cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d00:	4770      	bx	lr

08016d02 <__sfputs_r>:
 8016d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d04:	4606      	mov	r6, r0
 8016d06:	460f      	mov	r7, r1
 8016d08:	4614      	mov	r4, r2
 8016d0a:	18d5      	adds	r5, r2, r3
 8016d0c:	42ac      	cmp	r4, r5
 8016d0e:	d101      	bne.n	8016d14 <__sfputs_r+0x12>
 8016d10:	2000      	movs	r0, #0
 8016d12:	e007      	b.n	8016d24 <__sfputs_r+0x22>
 8016d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d18:	463a      	mov	r2, r7
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	f7ff ffda 	bl	8016cd4 <__sfputc_r>
 8016d20:	1c43      	adds	r3, r0, #1
 8016d22:	d1f3      	bne.n	8016d0c <__sfputs_r+0xa>
 8016d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d28 <_vfiprintf_r>:
 8016d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2c:	460d      	mov	r5, r1
 8016d2e:	b09d      	sub	sp, #116	; 0x74
 8016d30:	4614      	mov	r4, r2
 8016d32:	4698      	mov	r8, r3
 8016d34:	4606      	mov	r6, r0
 8016d36:	b118      	cbz	r0, 8016d40 <_vfiprintf_r+0x18>
 8016d38:	6a03      	ldr	r3, [r0, #32]
 8016d3a:	b90b      	cbnz	r3, 8016d40 <_vfiprintf_r+0x18>
 8016d3c:	f7ff fbfa 	bl	8016534 <__sinit>
 8016d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d42:	07d9      	lsls	r1, r3, #31
 8016d44:	d405      	bmi.n	8016d52 <_vfiprintf_r+0x2a>
 8016d46:	89ab      	ldrh	r3, [r5, #12]
 8016d48:	059a      	lsls	r2, r3, #22
 8016d4a:	d402      	bmi.n	8016d52 <_vfiprintf_r+0x2a>
 8016d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d4e:	f7ff fdd2 	bl	80168f6 <__retarget_lock_acquire_recursive>
 8016d52:	89ab      	ldrh	r3, [r5, #12]
 8016d54:	071b      	lsls	r3, r3, #28
 8016d56:	d501      	bpl.n	8016d5c <_vfiprintf_r+0x34>
 8016d58:	692b      	ldr	r3, [r5, #16]
 8016d5a:	b99b      	cbnz	r3, 8016d84 <_vfiprintf_r+0x5c>
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	4630      	mov	r0, r6
 8016d60:	f000 fb8a 	bl	8017478 <__swsetup_r>
 8016d64:	b170      	cbz	r0, 8016d84 <_vfiprintf_r+0x5c>
 8016d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d68:	07dc      	lsls	r4, r3, #31
 8016d6a:	d504      	bpl.n	8016d76 <_vfiprintf_r+0x4e>
 8016d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d70:	b01d      	add	sp, #116	; 0x74
 8016d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d76:	89ab      	ldrh	r3, [r5, #12]
 8016d78:	0598      	lsls	r0, r3, #22
 8016d7a:	d4f7      	bmi.n	8016d6c <_vfiprintf_r+0x44>
 8016d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d7e:	f7ff fdbb 	bl	80168f8 <__retarget_lock_release_recursive>
 8016d82:	e7f3      	b.n	8016d6c <_vfiprintf_r+0x44>
 8016d84:	2300      	movs	r3, #0
 8016d86:	9309      	str	r3, [sp, #36]	; 0x24
 8016d88:	2320      	movs	r3, #32
 8016d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d92:	2330      	movs	r3, #48	; 0x30
 8016d94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016f48 <_vfiprintf_r+0x220>
 8016d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d9c:	f04f 0901 	mov.w	r9, #1
 8016da0:	4623      	mov	r3, r4
 8016da2:	469a      	mov	sl, r3
 8016da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016da8:	b10a      	cbz	r2, 8016dae <_vfiprintf_r+0x86>
 8016daa:	2a25      	cmp	r2, #37	; 0x25
 8016dac:	d1f9      	bne.n	8016da2 <_vfiprintf_r+0x7a>
 8016dae:	ebba 0b04 	subs.w	fp, sl, r4
 8016db2:	d00b      	beq.n	8016dcc <_vfiprintf_r+0xa4>
 8016db4:	465b      	mov	r3, fp
 8016db6:	4622      	mov	r2, r4
 8016db8:	4629      	mov	r1, r5
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f7ff ffa1 	bl	8016d02 <__sfputs_r>
 8016dc0:	3001      	adds	r0, #1
 8016dc2:	f000 80a9 	beq.w	8016f18 <_vfiprintf_r+0x1f0>
 8016dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016dc8:	445a      	add	r2, fp
 8016dca:	9209      	str	r2, [sp, #36]	; 0x24
 8016dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	f000 80a1 	beq.w	8016f18 <_vfiprintf_r+0x1f0>
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016de0:	f10a 0a01 	add.w	sl, sl, #1
 8016de4:	9304      	str	r3, [sp, #16]
 8016de6:	9307      	str	r3, [sp, #28]
 8016de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016dec:	931a      	str	r3, [sp, #104]	; 0x68
 8016dee:	4654      	mov	r4, sl
 8016df0:	2205      	movs	r2, #5
 8016df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016df6:	4854      	ldr	r0, [pc, #336]	; (8016f48 <_vfiprintf_r+0x220>)
 8016df8:	f7e9 fa22 	bl	8000240 <memchr>
 8016dfc:	9a04      	ldr	r2, [sp, #16]
 8016dfe:	b9d8      	cbnz	r0, 8016e38 <_vfiprintf_r+0x110>
 8016e00:	06d1      	lsls	r1, r2, #27
 8016e02:	bf44      	itt	mi
 8016e04:	2320      	movmi	r3, #32
 8016e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e0a:	0713      	lsls	r3, r2, #28
 8016e0c:	bf44      	itt	mi
 8016e0e:	232b      	movmi	r3, #43	; 0x2b
 8016e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e14:	f89a 3000 	ldrb.w	r3, [sl]
 8016e18:	2b2a      	cmp	r3, #42	; 0x2a
 8016e1a:	d015      	beq.n	8016e48 <_vfiprintf_r+0x120>
 8016e1c:	9a07      	ldr	r2, [sp, #28]
 8016e1e:	4654      	mov	r4, sl
 8016e20:	2000      	movs	r0, #0
 8016e22:	f04f 0c0a 	mov.w	ip, #10
 8016e26:	4621      	mov	r1, r4
 8016e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e2c:	3b30      	subs	r3, #48	; 0x30
 8016e2e:	2b09      	cmp	r3, #9
 8016e30:	d94d      	bls.n	8016ece <_vfiprintf_r+0x1a6>
 8016e32:	b1b0      	cbz	r0, 8016e62 <_vfiprintf_r+0x13a>
 8016e34:	9207      	str	r2, [sp, #28]
 8016e36:	e014      	b.n	8016e62 <_vfiprintf_r+0x13a>
 8016e38:	eba0 0308 	sub.w	r3, r0, r8
 8016e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8016e40:	4313      	orrs	r3, r2
 8016e42:	9304      	str	r3, [sp, #16]
 8016e44:	46a2      	mov	sl, r4
 8016e46:	e7d2      	b.n	8016dee <_vfiprintf_r+0xc6>
 8016e48:	9b03      	ldr	r3, [sp, #12]
 8016e4a:	1d19      	adds	r1, r3, #4
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	9103      	str	r1, [sp, #12]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	bfbb      	ittet	lt
 8016e54:	425b      	neglt	r3, r3
 8016e56:	f042 0202 	orrlt.w	r2, r2, #2
 8016e5a:	9307      	strge	r3, [sp, #28]
 8016e5c:	9307      	strlt	r3, [sp, #28]
 8016e5e:	bfb8      	it	lt
 8016e60:	9204      	strlt	r2, [sp, #16]
 8016e62:	7823      	ldrb	r3, [r4, #0]
 8016e64:	2b2e      	cmp	r3, #46	; 0x2e
 8016e66:	d10c      	bne.n	8016e82 <_vfiprintf_r+0x15a>
 8016e68:	7863      	ldrb	r3, [r4, #1]
 8016e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8016e6c:	d134      	bne.n	8016ed8 <_vfiprintf_r+0x1b0>
 8016e6e:	9b03      	ldr	r3, [sp, #12]
 8016e70:	1d1a      	adds	r2, r3, #4
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	9203      	str	r2, [sp, #12]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	bfb8      	it	lt
 8016e7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016e7e:	3402      	adds	r4, #2
 8016e80:	9305      	str	r3, [sp, #20]
 8016e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016f58 <_vfiprintf_r+0x230>
 8016e86:	7821      	ldrb	r1, [r4, #0]
 8016e88:	2203      	movs	r2, #3
 8016e8a:	4650      	mov	r0, sl
 8016e8c:	f7e9 f9d8 	bl	8000240 <memchr>
 8016e90:	b138      	cbz	r0, 8016ea2 <_vfiprintf_r+0x17a>
 8016e92:	9b04      	ldr	r3, [sp, #16]
 8016e94:	eba0 000a 	sub.w	r0, r0, sl
 8016e98:	2240      	movs	r2, #64	; 0x40
 8016e9a:	4082      	lsls	r2, r0
 8016e9c:	4313      	orrs	r3, r2
 8016e9e:	3401      	adds	r4, #1
 8016ea0:	9304      	str	r3, [sp, #16]
 8016ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ea6:	4829      	ldr	r0, [pc, #164]	; (8016f4c <_vfiprintf_r+0x224>)
 8016ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016eac:	2206      	movs	r2, #6
 8016eae:	f7e9 f9c7 	bl	8000240 <memchr>
 8016eb2:	2800      	cmp	r0, #0
 8016eb4:	d03f      	beq.n	8016f36 <_vfiprintf_r+0x20e>
 8016eb6:	4b26      	ldr	r3, [pc, #152]	; (8016f50 <_vfiprintf_r+0x228>)
 8016eb8:	bb1b      	cbnz	r3, 8016f02 <_vfiprintf_r+0x1da>
 8016eba:	9b03      	ldr	r3, [sp, #12]
 8016ebc:	3307      	adds	r3, #7
 8016ebe:	f023 0307 	bic.w	r3, r3, #7
 8016ec2:	3308      	adds	r3, #8
 8016ec4:	9303      	str	r3, [sp, #12]
 8016ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ec8:	443b      	add	r3, r7
 8016eca:	9309      	str	r3, [sp, #36]	; 0x24
 8016ecc:	e768      	b.n	8016da0 <_vfiprintf_r+0x78>
 8016ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ed2:	460c      	mov	r4, r1
 8016ed4:	2001      	movs	r0, #1
 8016ed6:	e7a6      	b.n	8016e26 <_vfiprintf_r+0xfe>
 8016ed8:	2300      	movs	r3, #0
 8016eda:	3401      	adds	r4, #1
 8016edc:	9305      	str	r3, [sp, #20]
 8016ede:	4619      	mov	r1, r3
 8016ee0:	f04f 0c0a 	mov.w	ip, #10
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016eea:	3a30      	subs	r2, #48	; 0x30
 8016eec:	2a09      	cmp	r2, #9
 8016eee:	d903      	bls.n	8016ef8 <_vfiprintf_r+0x1d0>
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d0c6      	beq.n	8016e82 <_vfiprintf_r+0x15a>
 8016ef4:	9105      	str	r1, [sp, #20]
 8016ef6:	e7c4      	b.n	8016e82 <_vfiprintf_r+0x15a>
 8016ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016efc:	4604      	mov	r4, r0
 8016efe:	2301      	movs	r3, #1
 8016f00:	e7f0      	b.n	8016ee4 <_vfiprintf_r+0x1bc>
 8016f02:	ab03      	add	r3, sp, #12
 8016f04:	9300      	str	r3, [sp, #0]
 8016f06:	462a      	mov	r2, r5
 8016f08:	4b12      	ldr	r3, [pc, #72]	; (8016f54 <_vfiprintf_r+0x22c>)
 8016f0a:	a904      	add	r1, sp, #16
 8016f0c:	4630      	mov	r0, r6
 8016f0e:	f3af 8000 	nop.w
 8016f12:	4607      	mov	r7, r0
 8016f14:	1c78      	adds	r0, r7, #1
 8016f16:	d1d6      	bne.n	8016ec6 <_vfiprintf_r+0x19e>
 8016f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f1a:	07d9      	lsls	r1, r3, #31
 8016f1c:	d405      	bmi.n	8016f2a <_vfiprintf_r+0x202>
 8016f1e:	89ab      	ldrh	r3, [r5, #12]
 8016f20:	059a      	lsls	r2, r3, #22
 8016f22:	d402      	bmi.n	8016f2a <_vfiprintf_r+0x202>
 8016f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f26:	f7ff fce7 	bl	80168f8 <__retarget_lock_release_recursive>
 8016f2a:	89ab      	ldrh	r3, [r5, #12]
 8016f2c:	065b      	lsls	r3, r3, #25
 8016f2e:	f53f af1d 	bmi.w	8016d6c <_vfiprintf_r+0x44>
 8016f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f34:	e71c      	b.n	8016d70 <_vfiprintf_r+0x48>
 8016f36:	ab03      	add	r3, sp, #12
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	462a      	mov	r2, r5
 8016f3c:	4b05      	ldr	r3, [pc, #20]	; (8016f54 <_vfiprintf_r+0x22c>)
 8016f3e:	a904      	add	r1, sp, #16
 8016f40:	4630      	mov	r0, r6
 8016f42:	f000 f879 	bl	8017038 <_printf_i>
 8016f46:	e7e4      	b.n	8016f12 <_vfiprintf_r+0x1ea>
 8016f48:	08018590 	.word	0x08018590
 8016f4c:	0801859a 	.word	0x0801859a
 8016f50:	00000000 	.word	0x00000000
 8016f54:	08016d03 	.word	0x08016d03
 8016f58:	08018596 	.word	0x08018596

08016f5c <_printf_common>:
 8016f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f60:	4616      	mov	r6, r2
 8016f62:	4699      	mov	r9, r3
 8016f64:	688a      	ldr	r2, [r1, #8]
 8016f66:	690b      	ldr	r3, [r1, #16]
 8016f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016f6c:	4293      	cmp	r3, r2
 8016f6e:	bfb8      	it	lt
 8016f70:	4613      	movlt	r3, r2
 8016f72:	6033      	str	r3, [r6, #0]
 8016f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016f78:	4607      	mov	r7, r0
 8016f7a:	460c      	mov	r4, r1
 8016f7c:	b10a      	cbz	r2, 8016f82 <_printf_common+0x26>
 8016f7e:	3301      	adds	r3, #1
 8016f80:	6033      	str	r3, [r6, #0]
 8016f82:	6823      	ldr	r3, [r4, #0]
 8016f84:	0699      	lsls	r1, r3, #26
 8016f86:	bf42      	ittt	mi
 8016f88:	6833      	ldrmi	r3, [r6, #0]
 8016f8a:	3302      	addmi	r3, #2
 8016f8c:	6033      	strmi	r3, [r6, #0]
 8016f8e:	6825      	ldr	r5, [r4, #0]
 8016f90:	f015 0506 	ands.w	r5, r5, #6
 8016f94:	d106      	bne.n	8016fa4 <_printf_common+0x48>
 8016f96:	f104 0a19 	add.w	sl, r4, #25
 8016f9a:	68e3      	ldr	r3, [r4, #12]
 8016f9c:	6832      	ldr	r2, [r6, #0]
 8016f9e:	1a9b      	subs	r3, r3, r2
 8016fa0:	42ab      	cmp	r3, r5
 8016fa2:	dc26      	bgt.n	8016ff2 <_printf_common+0x96>
 8016fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016fa8:	1e13      	subs	r3, r2, #0
 8016faa:	6822      	ldr	r2, [r4, #0]
 8016fac:	bf18      	it	ne
 8016fae:	2301      	movne	r3, #1
 8016fb0:	0692      	lsls	r2, r2, #26
 8016fb2:	d42b      	bmi.n	801700c <_printf_common+0xb0>
 8016fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016fb8:	4649      	mov	r1, r9
 8016fba:	4638      	mov	r0, r7
 8016fbc:	47c0      	blx	r8
 8016fbe:	3001      	adds	r0, #1
 8016fc0:	d01e      	beq.n	8017000 <_printf_common+0xa4>
 8016fc2:	6823      	ldr	r3, [r4, #0]
 8016fc4:	6922      	ldr	r2, [r4, #16]
 8016fc6:	f003 0306 	and.w	r3, r3, #6
 8016fca:	2b04      	cmp	r3, #4
 8016fcc:	bf02      	ittt	eq
 8016fce:	68e5      	ldreq	r5, [r4, #12]
 8016fd0:	6833      	ldreq	r3, [r6, #0]
 8016fd2:	1aed      	subeq	r5, r5, r3
 8016fd4:	68a3      	ldr	r3, [r4, #8]
 8016fd6:	bf0c      	ite	eq
 8016fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016fdc:	2500      	movne	r5, #0
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	bfc4      	itt	gt
 8016fe2:	1a9b      	subgt	r3, r3, r2
 8016fe4:	18ed      	addgt	r5, r5, r3
 8016fe6:	2600      	movs	r6, #0
 8016fe8:	341a      	adds	r4, #26
 8016fea:	42b5      	cmp	r5, r6
 8016fec:	d11a      	bne.n	8017024 <_printf_common+0xc8>
 8016fee:	2000      	movs	r0, #0
 8016ff0:	e008      	b.n	8017004 <_printf_common+0xa8>
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	4652      	mov	r2, sl
 8016ff6:	4649      	mov	r1, r9
 8016ff8:	4638      	mov	r0, r7
 8016ffa:	47c0      	blx	r8
 8016ffc:	3001      	adds	r0, #1
 8016ffe:	d103      	bne.n	8017008 <_printf_common+0xac>
 8017000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017008:	3501      	adds	r5, #1
 801700a:	e7c6      	b.n	8016f9a <_printf_common+0x3e>
 801700c:	18e1      	adds	r1, r4, r3
 801700e:	1c5a      	adds	r2, r3, #1
 8017010:	2030      	movs	r0, #48	; 0x30
 8017012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017016:	4422      	add	r2, r4
 8017018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801701c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017020:	3302      	adds	r3, #2
 8017022:	e7c7      	b.n	8016fb4 <_printf_common+0x58>
 8017024:	2301      	movs	r3, #1
 8017026:	4622      	mov	r2, r4
 8017028:	4649      	mov	r1, r9
 801702a:	4638      	mov	r0, r7
 801702c:	47c0      	blx	r8
 801702e:	3001      	adds	r0, #1
 8017030:	d0e6      	beq.n	8017000 <_printf_common+0xa4>
 8017032:	3601      	adds	r6, #1
 8017034:	e7d9      	b.n	8016fea <_printf_common+0x8e>
	...

08017038 <_printf_i>:
 8017038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801703c:	7e0f      	ldrb	r7, [r1, #24]
 801703e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017040:	2f78      	cmp	r7, #120	; 0x78
 8017042:	4691      	mov	r9, r2
 8017044:	4680      	mov	r8, r0
 8017046:	460c      	mov	r4, r1
 8017048:	469a      	mov	sl, r3
 801704a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801704e:	d807      	bhi.n	8017060 <_printf_i+0x28>
 8017050:	2f62      	cmp	r7, #98	; 0x62
 8017052:	d80a      	bhi.n	801706a <_printf_i+0x32>
 8017054:	2f00      	cmp	r7, #0
 8017056:	f000 80d4 	beq.w	8017202 <_printf_i+0x1ca>
 801705a:	2f58      	cmp	r7, #88	; 0x58
 801705c:	f000 80c0 	beq.w	80171e0 <_printf_i+0x1a8>
 8017060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017068:	e03a      	b.n	80170e0 <_printf_i+0xa8>
 801706a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801706e:	2b15      	cmp	r3, #21
 8017070:	d8f6      	bhi.n	8017060 <_printf_i+0x28>
 8017072:	a101      	add	r1, pc, #4	; (adr r1, 8017078 <_printf_i+0x40>)
 8017074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017078:	080170d1 	.word	0x080170d1
 801707c:	080170e5 	.word	0x080170e5
 8017080:	08017061 	.word	0x08017061
 8017084:	08017061 	.word	0x08017061
 8017088:	08017061 	.word	0x08017061
 801708c:	08017061 	.word	0x08017061
 8017090:	080170e5 	.word	0x080170e5
 8017094:	08017061 	.word	0x08017061
 8017098:	08017061 	.word	0x08017061
 801709c:	08017061 	.word	0x08017061
 80170a0:	08017061 	.word	0x08017061
 80170a4:	080171e9 	.word	0x080171e9
 80170a8:	08017111 	.word	0x08017111
 80170ac:	080171a3 	.word	0x080171a3
 80170b0:	08017061 	.word	0x08017061
 80170b4:	08017061 	.word	0x08017061
 80170b8:	0801720b 	.word	0x0801720b
 80170bc:	08017061 	.word	0x08017061
 80170c0:	08017111 	.word	0x08017111
 80170c4:	08017061 	.word	0x08017061
 80170c8:	08017061 	.word	0x08017061
 80170cc:	080171ab 	.word	0x080171ab
 80170d0:	682b      	ldr	r3, [r5, #0]
 80170d2:	1d1a      	adds	r2, r3, #4
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	602a      	str	r2, [r5, #0]
 80170d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80170dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80170e0:	2301      	movs	r3, #1
 80170e2:	e09f      	b.n	8017224 <_printf_i+0x1ec>
 80170e4:	6820      	ldr	r0, [r4, #0]
 80170e6:	682b      	ldr	r3, [r5, #0]
 80170e8:	0607      	lsls	r7, r0, #24
 80170ea:	f103 0104 	add.w	r1, r3, #4
 80170ee:	6029      	str	r1, [r5, #0]
 80170f0:	d501      	bpl.n	80170f6 <_printf_i+0xbe>
 80170f2:	681e      	ldr	r6, [r3, #0]
 80170f4:	e003      	b.n	80170fe <_printf_i+0xc6>
 80170f6:	0646      	lsls	r6, r0, #25
 80170f8:	d5fb      	bpl.n	80170f2 <_printf_i+0xba>
 80170fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80170fe:	2e00      	cmp	r6, #0
 8017100:	da03      	bge.n	801710a <_printf_i+0xd2>
 8017102:	232d      	movs	r3, #45	; 0x2d
 8017104:	4276      	negs	r6, r6
 8017106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801710a:	485a      	ldr	r0, [pc, #360]	; (8017274 <_printf_i+0x23c>)
 801710c:	230a      	movs	r3, #10
 801710e:	e012      	b.n	8017136 <_printf_i+0xfe>
 8017110:	682b      	ldr	r3, [r5, #0]
 8017112:	6820      	ldr	r0, [r4, #0]
 8017114:	1d19      	adds	r1, r3, #4
 8017116:	6029      	str	r1, [r5, #0]
 8017118:	0605      	lsls	r5, r0, #24
 801711a:	d501      	bpl.n	8017120 <_printf_i+0xe8>
 801711c:	681e      	ldr	r6, [r3, #0]
 801711e:	e002      	b.n	8017126 <_printf_i+0xee>
 8017120:	0641      	lsls	r1, r0, #25
 8017122:	d5fb      	bpl.n	801711c <_printf_i+0xe4>
 8017124:	881e      	ldrh	r6, [r3, #0]
 8017126:	4853      	ldr	r0, [pc, #332]	; (8017274 <_printf_i+0x23c>)
 8017128:	2f6f      	cmp	r7, #111	; 0x6f
 801712a:	bf0c      	ite	eq
 801712c:	2308      	moveq	r3, #8
 801712e:	230a      	movne	r3, #10
 8017130:	2100      	movs	r1, #0
 8017132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017136:	6865      	ldr	r5, [r4, #4]
 8017138:	60a5      	str	r5, [r4, #8]
 801713a:	2d00      	cmp	r5, #0
 801713c:	bfa2      	ittt	ge
 801713e:	6821      	ldrge	r1, [r4, #0]
 8017140:	f021 0104 	bicge.w	r1, r1, #4
 8017144:	6021      	strge	r1, [r4, #0]
 8017146:	b90e      	cbnz	r6, 801714c <_printf_i+0x114>
 8017148:	2d00      	cmp	r5, #0
 801714a:	d04b      	beq.n	80171e4 <_printf_i+0x1ac>
 801714c:	4615      	mov	r5, r2
 801714e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017152:	fb03 6711 	mls	r7, r3, r1, r6
 8017156:	5dc7      	ldrb	r7, [r0, r7]
 8017158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801715c:	4637      	mov	r7, r6
 801715e:	42bb      	cmp	r3, r7
 8017160:	460e      	mov	r6, r1
 8017162:	d9f4      	bls.n	801714e <_printf_i+0x116>
 8017164:	2b08      	cmp	r3, #8
 8017166:	d10b      	bne.n	8017180 <_printf_i+0x148>
 8017168:	6823      	ldr	r3, [r4, #0]
 801716a:	07de      	lsls	r6, r3, #31
 801716c:	d508      	bpl.n	8017180 <_printf_i+0x148>
 801716e:	6923      	ldr	r3, [r4, #16]
 8017170:	6861      	ldr	r1, [r4, #4]
 8017172:	4299      	cmp	r1, r3
 8017174:	bfde      	ittt	le
 8017176:	2330      	movle	r3, #48	; 0x30
 8017178:	f805 3c01 	strble.w	r3, [r5, #-1]
 801717c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017180:	1b52      	subs	r2, r2, r5
 8017182:	6122      	str	r2, [r4, #16]
 8017184:	f8cd a000 	str.w	sl, [sp]
 8017188:	464b      	mov	r3, r9
 801718a:	aa03      	add	r2, sp, #12
 801718c:	4621      	mov	r1, r4
 801718e:	4640      	mov	r0, r8
 8017190:	f7ff fee4 	bl	8016f5c <_printf_common>
 8017194:	3001      	adds	r0, #1
 8017196:	d14a      	bne.n	801722e <_printf_i+0x1f6>
 8017198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801719c:	b004      	add	sp, #16
 801719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171a2:	6823      	ldr	r3, [r4, #0]
 80171a4:	f043 0320 	orr.w	r3, r3, #32
 80171a8:	6023      	str	r3, [r4, #0]
 80171aa:	4833      	ldr	r0, [pc, #204]	; (8017278 <_printf_i+0x240>)
 80171ac:	2778      	movs	r7, #120	; 0x78
 80171ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80171b2:	6823      	ldr	r3, [r4, #0]
 80171b4:	6829      	ldr	r1, [r5, #0]
 80171b6:	061f      	lsls	r7, r3, #24
 80171b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80171bc:	d402      	bmi.n	80171c4 <_printf_i+0x18c>
 80171be:	065f      	lsls	r7, r3, #25
 80171c0:	bf48      	it	mi
 80171c2:	b2b6      	uxthmi	r6, r6
 80171c4:	07df      	lsls	r7, r3, #31
 80171c6:	bf48      	it	mi
 80171c8:	f043 0320 	orrmi.w	r3, r3, #32
 80171cc:	6029      	str	r1, [r5, #0]
 80171ce:	bf48      	it	mi
 80171d0:	6023      	strmi	r3, [r4, #0]
 80171d2:	b91e      	cbnz	r6, 80171dc <_printf_i+0x1a4>
 80171d4:	6823      	ldr	r3, [r4, #0]
 80171d6:	f023 0320 	bic.w	r3, r3, #32
 80171da:	6023      	str	r3, [r4, #0]
 80171dc:	2310      	movs	r3, #16
 80171de:	e7a7      	b.n	8017130 <_printf_i+0xf8>
 80171e0:	4824      	ldr	r0, [pc, #144]	; (8017274 <_printf_i+0x23c>)
 80171e2:	e7e4      	b.n	80171ae <_printf_i+0x176>
 80171e4:	4615      	mov	r5, r2
 80171e6:	e7bd      	b.n	8017164 <_printf_i+0x12c>
 80171e8:	682b      	ldr	r3, [r5, #0]
 80171ea:	6826      	ldr	r6, [r4, #0]
 80171ec:	6961      	ldr	r1, [r4, #20]
 80171ee:	1d18      	adds	r0, r3, #4
 80171f0:	6028      	str	r0, [r5, #0]
 80171f2:	0635      	lsls	r5, r6, #24
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	d501      	bpl.n	80171fc <_printf_i+0x1c4>
 80171f8:	6019      	str	r1, [r3, #0]
 80171fa:	e002      	b.n	8017202 <_printf_i+0x1ca>
 80171fc:	0670      	lsls	r0, r6, #25
 80171fe:	d5fb      	bpl.n	80171f8 <_printf_i+0x1c0>
 8017200:	8019      	strh	r1, [r3, #0]
 8017202:	2300      	movs	r3, #0
 8017204:	6123      	str	r3, [r4, #16]
 8017206:	4615      	mov	r5, r2
 8017208:	e7bc      	b.n	8017184 <_printf_i+0x14c>
 801720a:	682b      	ldr	r3, [r5, #0]
 801720c:	1d1a      	adds	r2, r3, #4
 801720e:	602a      	str	r2, [r5, #0]
 8017210:	681d      	ldr	r5, [r3, #0]
 8017212:	6862      	ldr	r2, [r4, #4]
 8017214:	2100      	movs	r1, #0
 8017216:	4628      	mov	r0, r5
 8017218:	f7e9 f812 	bl	8000240 <memchr>
 801721c:	b108      	cbz	r0, 8017222 <_printf_i+0x1ea>
 801721e:	1b40      	subs	r0, r0, r5
 8017220:	6060      	str	r0, [r4, #4]
 8017222:	6863      	ldr	r3, [r4, #4]
 8017224:	6123      	str	r3, [r4, #16]
 8017226:	2300      	movs	r3, #0
 8017228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801722c:	e7aa      	b.n	8017184 <_printf_i+0x14c>
 801722e:	6923      	ldr	r3, [r4, #16]
 8017230:	462a      	mov	r2, r5
 8017232:	4649      	mov	r1, r9
 8017234:	4640      	mov	r0, r8
 8017236:	47d0      	blx	sl
 8017238:	3001      	adds	r0, #1
 801723a:	d0ad      	beq.n	8017198 <_printf_i+0x160>
 801723c:	6823      	ldr	r3, [r4, #0]
 801723e:	079b      	lsls	r3, r3, #30
 8017240:	d413      	bmi.n	801726a <_printf_i+0x232>
 8017242:	68e0      	ldr	r0, [r4, #12]
 8017244:	9b03      	ldr	r3, [sp, #12]
 8017246:	4298      	cmp	r0, r3
 8017248:	bfb8      	it	lt
 801724a:	4618      	movlt	r0, r3
 801724c:	e7a6      	b.n	801719c <_printf_i+0x164>
 801724e:	2301      	movs	r3, #1
 8017250:	4632      	mov	r2, r6
 8017252:	4649      	mov	r1, r9
 8017254:	4640      	mov	r0, r8
 8017256:	47d0      	blx	sl
 8017258:	3001      	adds	r0, #1
 801725a:	d09d      	beq.n	8017198 <_printf_i+0x160>
 801725c:	3501      	adds	r5, #1
 801725e:	68e3      	ldr	r3, [r4, #12]
 8017260:	9903      	ldr	r1, [sp, #12]
 8017262:	1a5b      	subs	r3, r3, r1
 8017264:	42ab      	cmp	r3, r5
 8017266:	dcf2      	bgt.n	801724e <_printf_i+0x216>
 8017268:	e7eb      	b.n	8017242 <_printf_i+0x20a>
 801726a:	2500      	movs	r5, #0
 801726c:	f104 0619 	add.w	r6, r4, #25
 8017270:	e7f5      	b.n	801725e <_printf_i+0x226>
 8017272:	bf00      	nop
 8017274:	080185a1 	.word	0x080185a1
 8017278:	080185b2 	.word	0x080185b2

0801727c <__sflush_r>:
 801727c:	898a      	ldrh	r2, [r1, #12]
 801727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017282:	4605      	mov	r5, r0
 8017284:	0710      	lsls	r0, r2, #28
 8017286:	460c      	mov	r4, r1
 8017288:	d458      	bmi.n	801733c <__sflush_r+0xc0>
 801728a:	684b      	ldr	r3, [r1, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	dc05      	bgt.n	801729c <__sflush_r+0x20>
 8017290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017292:	2b00      	cmp	r3, #0
 8017294:	dc02      	bgt.n	801729c <__sflush_r+0x20>
 8017296:	2000      	movs	r0, #0
 8017298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801729c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801729e:	2e00      	cmp	r6, #0
 80172a0:	d0f9      	beq.n	8017296 <__sflush_r+0x1a>
 80172a2:	2300      	movs	r3, #0
 80172a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80172a8:	682f      	ldr	r7, [r5, #0]
 80172aa:	6a21      	ldr	r1, [r4, #32]
 80172ac:	602b      	str	r3, [r5, #0]
 80172ae:	d032      	beq.n	8017316 <__sflush_r+0x9a>
 80172b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80172b2:	89a3      	ldrh	r3, [r4, #12]
 80172b4:	075a      	lsls	r2, r3, #29
 80172b6:	d505      	bpl.n	80172c4 <__sflush_r+0x48>
 80172b8:	6863      	ldr	r3, [r4, #4]
 80172ba:	1ac0      	subs	r0, r0, r3
 80172bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172be:	b10b      	cbz	r3, 80172c4 <__sflush_r+0x48>
 80172c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172c2:	1ac0      	subs	r0, r0, r3
 80172c4:	2300      	movs	r3, #0
 80172c6:	4602      	mov	r2, r0
 80172c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172ca:	6a21      	ldr	r1, [r4, #32]
 80172cc:	4628      	mov	r0, r5
 80172ce:	47b0      	blx	r6
 80172d0:	1c43      	adds	r3, r0, #1
 80172d2:	89a3      	ldrh	r3, [r4, #12]
 80172d4:	d106      	bne.n	80172e4 <__sflush_r+0x68>
 80172d6:	6829      	ldr	r1, [r5, #0]
 80172d8:	291d      	cmp	r1, #29
 80172da:	d82b      	bhi.n	8017334 <__sflush_r+0xb8>
 80172dc:	4a29      	ldr	r2, [pc, #164]	; (8017384 <__sflush_r+0x108>)
 80172de:	410a      	asrs	r2, r1
 80172e0:	07d6      	lsls	r6, r2, #31
 80172e2:	d427      	bmi.n	8017334 <__sflush_r+0xb8>
 80172e4:	2200      	movs	r2, #0
 80172e6:	6062      	str	r2, [r4, #4]
 80172e8:	04d9      	lsls	r1, r3, #19
 80172ea:	6922      	ldr	r2, [r4, #16]
 80172ec:	6022      	str	r2, [r4, #0]
 80172ee:	d504      	bpl.n	80172fa <__sflush_r+0x7e>
 80172f0:	1c42      	adds	r2, r0, #1
 80172f2:	d101      	bne.n	80172f8 <__sflush_r+0x7c>
 80172f4:	682b      	ldr	r3, [r5, #0]
 80172f6:	b903      	cbnz	r3, 80172fa <__sflush_r+0x7e>
 80172f8:	6560      	str	r0, [r4, #84]	; 0x54
 80172fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172fc:	602f      	str	r7, [r5, #0]
 80172fe:	2900      	cmp	r1, #0
 8017300:	d0c9      	beq.n	8017296 <__sflush_r+0x1a>
 8017302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017306:	4299      	cmp	r1, r3
 8017308:	d002      	beq.n	8017310 <__sflush_r+0x94>
 801730a:	4628      	mov	r0, r5
 801730c:	f7ff fb36 	bl	801697c <_free_r>
 8017310:	2000      	movs	r0, #0
 8017312:	6360      	str	r0, [r4, #52]	; 0x34
 8017314:	e7c0      	b.n	8017298 <__sflush_r+0x1c>
 8017316:	2301      	movs	r3, #1
 8017318:	4628      	mov	r0, r5
 801731a:	47b0      	blx	r6
 801731c:	1c41      	adds	r1, r0, #1
 801731e:	d1c8      	bne.n	80172b2 <__sflush_r+0x36>
 8017320:	682b      	ldr	r3, [r5, #0]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d0c5      	beq.n	80172b2 <__sflush_r+0x36>
 8017326:	2b1d      	cmp	r3, #29
 8017328:	d001      	beq.n	801732e <__sflush_r+0xb2>
 801732a:	2b16      	cmp	r3, #22
 801732c:	d101      	bne.n	8017332 <__sflush_r+0xb6>
 801732e:	602f      	str	r7, [r5, #0]
 8017330:	e7b1      	b.n	8017296 <__sflush_r+0x1a>
 8017332:	89a3      	ldrh	r3, [r4, #12]
 8017334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017338:	81a3      	strh	r3, [r4, #12]
 801733a:	e7ad      	b.n	8017298 <__sflush_r+0x1c>
 801733c:	690f      	ldr	r7, [r1, #16]
 801733e:	2f00      	cmp	r7, #0
 8017340:	d0a9      	beq.n	8017296 <__sflush_r+0x1a>
 8017342:	0793      	lsls	r3, r2, #30
 8017344:	680e      	ldr	r6, [r1, #0]
 8017346:	bf08      	it	eq
 8017348:	694b      	ldreq	r3, [r1, #20]
 801734a:	600f      	str	r7, [r1, #0]
 801734c:	bf18      	it	ne
 801734e:	2300      	movne	r3, #0
 8017350:	eba6 0807 	sub.w	r8, r6, r7
 8017354:	608b      	str	r3, [r1, #8]
 8017356:	f1b8 0f00 	cmp.w	r8, #0
 801735a:	dd9c      	ble.n	8017296 <__sflush_r+0x1a>
 801735c:	6a21      	ldr	r1, [r4, #32]
 801735e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017360:	4643      	mov	r3, r8
 8017362:	463a      	mov	r2, r7
 8017364:	4628      	mov	r0, r5
 8017366:	47b0      	blx	r6
 8017368:	2800      	cmp	r0, #0
 801736a:	dc06      	bgt.n	801737a <__sflush_r+0xfe>
 801736c:	89a3      	ldrh	r3, [r4, #12]
 801736e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017372:	81a3      	strh	r3, [r4, #12]
 8017374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017378:	e78e      	b.n	8017298 <__sflush_r+0x1c>
 801737a:	4407      	add	r7, r0
 801737c:	eba8 0800 	sub.w	r8, r8, r0
 8017380:	e7e9      	b.n	8017356 <__sflush_r+0xda>
 8017382:	bf00      	nop
 8017384:	dfbffffe 	.word	0xdfbffffe

08017388 <_fflush_r>:
 8017388:	b538      	push	{r3, r4, r5, lr}
 801738a:	690b      	ldr	r3, [r1, #16]
 801738c:	4605      	mov	r5, r0
 801738e:	460c      	mov	r4, r1
 8017390:	b913      	cbnz	r3, 8017398 <_fflush_r+0x10>
 8017392:	2500      	movs	r5, #0
 8017394:	4628      	mov	r0, r5
 8017396:	bd38      	pop	{r3, r4, r5, pc}
 8017398:	b118      	cbz	r0, 80173a2 <_fflush_r+0x1a>
 801739a:	6a03      	ldr	r3, [r0, #32]
 801739c:	b90b      	cbnz	r3, 80173a2 <_fflush_r+0x1a>
 801739e:	f7ff f8c9 	bl	8016534 <__sinit>
 80173a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d0f3      	beq.n	8017392 <_fflush_r+0xa>
 80173aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80173ac:	07d0      	lsls	r0, r2, #31
 80173ae:	d404      	bmi.n	80173ba <_fflush_r+0x32>
 80173b0:	0599      	lsls	r1, r3, #22
 80173b2:	d402      	bmi.n	80173ba <_fflush_r+0x32>
 80173b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173b6:	f7ff fa9e 	bl	80168f6 <__retarget_lock_acquire_recursive>
 80173ba:	4628      	mov	r0, r5
 80173bc:	4621      	mov	r1, r4
 80173be:	f7ff ff5d 	bl	801727c <__sflush_r>
 80173c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173c4:	07da      	lsls	r2, r3, #31
 80173c6:	4605      	mov	r5, r0
 80173c8:	d4e4      	bmi.n	8017394 <_fflush_r+0xc>
 80173ca:	89a3      	ldrh	r3, [r4, #12]
 80173cc:	059b      	lsls	r3, r3, #22
 80173ce:	d4e1      	bmi.n	8017394 <_fflush_r+0xc>
 80173d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173d2:	f7ff fa91 	bl	80168f8 <__retarget_lock_release_recursive>
 80173d6:	e7dd      	b.n	8017394 <_fflush_r+0xc>

080173d8 <fiprintf>:
 80173d8:	b40e      	push	{r1, r2, r3}
 80173da:	b503      	push	{r0, r1, lr}
 80173dc:	4601      	mov	r1, r0
 80173de:	ab03      	add	r3, sp, #12
 80173e0:	4805      	ldr	r0, [pc, #20]	; (80173f8 <fiprintf+0x20>)
 80173e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80173e6:	6800      	ldr	r0, [r0, #0]
 80173e8:	9301      	str	r3, [sp, #4]
 80173ea:	f7ff fc9d 	bl	8016d28 <_vfiprintf_r>
 80173ee:	b002      	add	sp, #8
 80173f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80173f4:	b003      	add	sp, #12
 80173f6:	4770      	bx	lr
 80173f8:	2000010c 	.word	0x2000010c

080173fc <__swbuf_r>:
 80173fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173fe:	460e      	mov	r6, r1
 8017400:	4614      	mov	r4, r2
 8017402:	4605      	mov	r5, r0
 8017404:	b118      	cbz	r0, 801740e <__swbuf_r+0x12>
 8017406:	6a03      	ldr	r3, [r0, #32]
 8017408:	b90b      	cbnz	r3, 801740e <__swbuf_r+0x12>
 801740a:	f7ff f893 	bl	8016534 <__sinit>
 801740e:	69a3      	ldr	r3, [r4, #24]
 8017410:	60a3      	str	r3, [r4, #8]
 8017412:	89a3      	ldrh	r3, [r4, #12]
 8017414:	071a      	lsls	r2, r3, #28
 8017416:	d525      	bpl.n	8017464 <__swbuf_r+0x68>
 8017418:	6923      	ldr	r3, [r4, #16]
 801741a:	b31b      	cbz	r3, 8017464 <__swbuf_r+0x68>
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	6922      	ldr	r2, [r4, #16]
 8017420:	1a98      	subs	r0, r3, r2
 8017422:	6963      	ldr	r3, [r4, #20]
 8017424:	b2f6      	uxtb	r6, r6
 8017426:	4283      	cmp	r3, r0
 8017428:	4637      	mov	r7, r6
 801742a:	dc04      	bgt.n	8017436 <__swbuf_r+0x3a>
 801742c:	4621      	mov	r1, r4
 801742e:	4628      	mov	r0, r5
 8017430:	f7ff ffaa 	bl	8017388 <_fflush_r>
 8017434:	b9e0      	cbnz	r0, 8017470 <__swbuf_r+0x74>
 8017436:	68a3      	ldr	r3, [r4, #8]
 8017438:	3b01      	subs	r3, #1
 801743a:	60a3      	str	r3, [r4, #8]
 801743c:	6823      	ldr	r3, [r4, #0]
 801743e:	1c5a      	adds	r2, r3, #1
 8017440:	6022      	str	r2, [r4, #0]
 8017442:	701e      	strb	r6, [r3, #0]
 8017444:	6962      	ldr	r2, [r4, #20]
 8017446:	1c43      	adds	r3, r0, #1
 8017448:	429a      	cmp	r2, r3
 801744a:	d004      	beq.n	8017456 <__swbuf_r+0x5a>
 801744c:	89a3      	ldrh	r3, [r4, #12]
 801744e:	07db      	lsls	r3, r3, #31
 8017450:	d506      	bpl.n	8017460 <__swbuf_r+0x64>
 8017452:	2e0a      	cmp	r6, #10
 8017454:	d104      	bne.n	8017460 <__swbuf_r+0x64>
 8017456:	4621      	mov	r1, r4
 8017458:	4628      	mov	r0, r5
 801745a:	f7ff ff95 	bl	8017388 <_fflush_r>
 801745e:	b938      	cbnz	r0, 8017470 <__swbuf_r+0x74>
 8017460:	4638      	mov	r0, r7
 8017462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017464:	4621      	mov	r1, r4
 8017466:	4628      	mov	r0, r5
 8017468:	f000 f806 	bl	8017478 <__swsetup_r>
 801746c:	2800      	cmp	r0, #0
 801746e:	d0d5      	beq.n	801741c <__swbuf_r+0x20>
 8017470:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017474:	e7f4      	b.n	8017460 <__swbuf_r+0x64>
	...

08017478 <__swsetup_r>:
 8017478:	b538      	push	{r3, r4, r5, lr}
 801747a:	4b2a      	ldr	r3, [pc, #168]	; (8017524 <__swsetup_r+0xac>)
 801747c:	4605      	mov	r5, r0
 801747e:	6818      	ldr	r0, [r3, #0]
 8017480:	460c      	mov	r4, r1
 8017482:	b118      	cbz	r0, 801748c <__swsetup_r+0x14>
 8017484:	6a03      	ldr	r3, [r0, #32]
 8017486:	b90b      	cbnz	r3, 801748c <__swsetup_r+0x14>
 8017488:	f7ff f854 	bl	8016534 <__sinit>
 801748c:	89a3      	ldrh	r3, [r4, #12]
 801748e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017492:	0718      	lsls	r0, r3, #28
 8017494:	d422      	bmi.n	80174dc <__swsetup_r+0x64>
 8017496:	06d9      	lsls	r1, r3, #27
 8017498:	d407      	bmi.n	80174aa <__swsetup_r+0x32>
 801749a:	2309      	movs	r3, #9
 801749c:	602b      	str	r3, [r5, #0]
 801749e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80174a2:	81a3      	strh	r3, [r4, #12]
 80174a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174a8:	e034      	b.n	8017514 <__swsetup_r+0x9c>
 80174aa:	0758      	lsls	r0, r3, #29
 80174ac:	d512      	bpl.n	80174d4 <__swsetup_r+0x5c>
 80174ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80174b0:	b141      	cbz	r1, 80174c4 <__swsetup_r+0x4c>
 80174b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174b6:	4299      	cmp	r1, r3
 80174b8:	d002      	beq.n	80174c0 <__swsetup_r+0x48>
 80174ba:	4628      	mov	r0, r5
 80174bc:	f7ff fa5e 	bl	801697c <_free_r>
 80174c0:	2300      	movs	r3, #0
 80174c2:	6363      	str	r3, [r4, #52]	; 0x34
 80174c4:	89a3      	ldrh	r3, [r4, #12]
 80174c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80174ca:	81a3      	strh	r3, [r4, #12]
 80174cc:	2300      	movs	r3, #0
 80174ce:	6063      	str	r3, [r4, #4]
 80174d0:	6923      	ldr	r3, [r4, #16]
 80174d2:	6023      	str	r3, [r4, #0]
 80174d4:	89a3      	ldrh	r3, [r4, #12]
 80174d6:	f043 0308 	orr.w	r3, r3, #8
 80174da:	81a3      	strh	r3, [r4, #12]
 80174dc:	6923      	ldr	r3, [r4, #16]
 80174de:	b94b      	cbnz	r3, 80174f4 <__swsetup_r+0x7c>
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80174e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80174ea:	d003      	beq.n	80174f4 <__swsetup_r+0x7c>
 80174ec:	4621      	mov	r1, r4
 80174ee:	4628      	mov	r0, r5
 80174f0:	f000 f847 	bl	8017582 <__smakebuf_r>
 80174f4:	89a0      	ldrh	r0, [r4, #12]
 80174f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80174fa:	f010 0301 	ands.w	r3, r0, #1
 80174fe:	d00a      	beq.n	8017516 <__swsetup_r+0x9e>
 8017500:	2300      	movs	r3, #0
 8017502:	60a3      	str	r3, [r4, #8]
 8017504:	6963      	ldr	r3, [r4, #20]
 8017506:	425b      	negs	r3, r3
 8017508:	61a3      	str	r3, [r4, #24]
 801750a:	6923      	ldr	r3, [r4, #16]
 801750c:	b943      	cbnz	r3, 8017520 <__swsetup_r+0xa8>
 801750e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017512:	d1c4      	bne.n	801749e <__swsetup_r+0x26>
 8017514:	bd38      	pop	{r3, r4, r5, pc}
 8017516:	0781      	lsls	r1, r0, #30
 8017518:	bf58      	it	pl
 801751a:	6963      	ldrpl	r3, [r4, #20]
 801751c:	60a3      	str	r3, [r4, #8]
 801751e:	e7f4      	b.n	801750a <__swsetup_r+0x92>
 8017520:	2000      	movs	r0, #0
 8017522:	e7f7      	b.n	8017514 <__swsetup_r+0x9c>
 8017524:	2000010c 	.word	0x2000010c

08017528 <abort>:
 8017528:	b508      	push	{r3, lr}
 801752a:	2006      	movs	r0, #6
 801752c:	f000 f88e 	bl	801764c <raise>
 8017530:	2001      	movs	r0, #1
 8017532:	f7ea fb41 	bl	8001bb8 <_exit>

08017536 <__swhatbuf_r>:
 8017536:	b570      	push	{r4, r5, r6, lr}
 8017538:	460c      	mov	r4, r1
 801753a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801753e:	2900      	cmp	r1, #0
 8017540:	b096      	sub	sp, #88	; 0x58
 8017542:	4615      	mov	r5, r2
 8017544:	461e      	mov	r6, r3
 8017546:	da0d      	bge.n	8017564 <__swhatbuf_r+0x2e>
 8017548:	89a3      	ldrh	r3, [r4, #12]
 801754a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801754e:	f04f 0100 	mov.w	r1, #0
 8017552:	bf0c      	ite	eq
 8017554:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017558:	2340      	movne	r3, #64	; 0x40
 801755a:	2000      	movs	r0, #0
 801755c:	6031      	str	r1, [r6, #0]
 801755e:	602b      	str	r3, [r5, #0]
 8017560:	b016      	add	sp, #88	; 0x58
 8017562:	bd70      	pop	{r4, r5, r6, pc}
 8017564:	466a      	mov	r2, sp
 8017566:	f000 f879 	bl	801765c <_fstat_r>
 801756a:	2800      	cmp	r0, #0
 801756c:	dbec      	blt.n	8017548 <__swhatbuf_r+0x12>
 801756e:	9901      	ldr	r1, [sp, #4]
 8017570:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017574:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017578:	4259      	negs	r1, r3
 801757a:	4159      	adcs	r1, r3
 801757c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017580:	e7eb      	b.n	801755a <__swhatbuf_r+0x24>

08017582 <__smakebuf_r>:
 8017582:	898b      	ldrh	r3, [r1, #12]
 8017584:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017586:	079d      	lsls	r5, r3, #30
 8017588:	4606      	mov	r6, r0
 801758a:	460c      	mov	r4, r1
 801758c:	d507      	bpl.n	801759e <__smakebuf_r+0x1c>
 801758e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017592:	6023      	str	r3, [r4, #0]
 8017594:	6123      	str	r3, [r4, #16]
 8017596:	2301      	movs	r3, #1
 8017598:	6163      	str	r3, [r4, #20]
 801759a:	b002      	add	sp, #8
 801759c:	bd70      	pop	{r4, r5, r6, pc}
 801759e:	ab01      	add	r3, sp, #4
 80175a0:	466a      	mov	r2, sp
 80175a2:	f7ff ffc8 	bl	8017536 <__swhatbuf_r>
 80175a6:	9900      	ldr	r1, [sp, #0]
 80175a8:	4605      	mov	r5, r0
 80175aa:	4630      	mov	r0, r6
 80175ac:	f7fe fd8a 	bl	80160c4 <_malloc_r>
 80175b0:	b948      	cbnz	r0, 80175c6 <__smakebuf_r+0x44>
 80175b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175b6:	059a      	lsls	r2, r3, #22
 80175b8:	d4ef      	bmi.n	801759a <__smakebuf_r+0x18>
 80175ba:	f023 0303 	bic.w	r3, r3, #3
 80175be:	f043 0302 	orr.w	r3, r3, #2
 80175c2:	81a3      	strh	r3, [r4, #12]
 80175c4:	e7e3      	b.n	801758e <__smakebuf_r+0xc>
 80175c6:	89a3      	ldrh	r3, [r4, #12]
 80175c8:	6020      	str	r0, [r4, #0]
 80175ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175ce:	81a3      	strh	r3, [r4, #12]
 80175d0:	9b00      	ldr	r3, [sp, #0]
 80175d2:	6163      	str	r3, [r4, #20]
 80175d4:	9b01      	ldr	r3, [sp, #4]
 80175d6:	6120      	str	r0, [r4, #16]
 80175d8:	b15b      	cbz	r3, 80175f2 <__smakebuf_r+0x70>
 80175da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175de:	4630      	mov	r0, r6
 80175e0:	f000 f84e 	bl	8017680 <_isatty_r>
 80175e4:	b128      	cbz	r0, 80175f2 <__smakebuf_r+0x70>
 80175e6:	89a3      	ldrh	r3, [r4, #12]
 80175e8:	f023 0303 	bic.w	r3, r3, #3
 80175ec:	f043 0301 	orr.w	r3, r3, #1
 80175f0:	81a3      	strh	r3, [r4, #12]
 80175f2:	89a3      	ldrh	r3, [r4, #12]
 80175f4:	431d      	orrs	r5, r3
 80175f6:	81a5      	strh	r5, [r4, #12]
 80175f8:	e7cf      	b.n	801759a <__smakebuf_r+0x18>

080175fa <_raise_r>:
 80175fa:	291f      	cmp	r1, #31
 80175fc:	b538      	push	{r3, r4, r5, lr}
 80175fe:	4604      	mov	r4, r0
 8017600:	460d      	mov	r5, r1
 8017602:	d904      	bls.n	801760e <_raise_r+0x14>
 8017604:	2316      	movs	r3, #22
 8017606:	6003      	str	r3, [r0, #0]
 8017608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801760c:	bd38      	pop	{r3, r4, r5, pc}
 801760e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017610:	b112      	cbz	r2, 8017618 <_raise_r+0x1e>
 8017612:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017616:	b94b      	cbnz	r3, 801762c <_raise_r+0x32>
 8017618:	4620      	mov	r0, r4
 801761a:	f000 f853 	bl	80176c4 <_getpid_r>
 801761e:	462a      	mov	r2, r5
 8017620:	4601      	mov	r1, r0
 8017622:	4620      	mov	r0, r4
 8017624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017628:	f000 b83a 	b.w	80176a0 <_kill_r>
 801762c:	2b01      	cmp	r3, #1
 801762e:	d00a      	beq.n	8017646 <_raise_r+0x4c>
 8017630:	1c59      	adds	r1, r3, #1
 8017632:	d103      	bne.n	801763c <_raise_r+0x42>
 8017634:	2316      	movs	r3, #22
 8017636:	6003      	str	r3, [r0, #0]
 8017638:	2001      	movs	r0, #1
 801763a:	e7e7      	b.n	801760c <_raise_r+0x12>
 801763c:	2400      	movs	r4, #0
 801763e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017642:	4628      	mov	r0, r5
 8017644:	4798      	blx	r3
 8017646:	2000      	movs	r0, #0
 8017648:	e7e0      	b.n	801760c <_raise_r+0x12>
	...

0801764c <raise>:
 801764c:	4b02      	ldr	r3, [pc, #8]	; (8017658 <raise+0xc>)
 801764e:	4601      	mov	r1, r0
 8017650:	6818      	ldr	r0, [r3, #0]
 8017652:	f7ff bfd2 	b.w	80175fa <_raise_r>
 8017656:	bf00      	nop
 8017658:	2000010c 	.word	0x2000010c

0801765c <_fstat_r>:
 801765c:	b538      	push	{r3, r4, r5, lr}
 801765e:	4d07      	ldr	r5, [pc, #28]	; (801767c <_fstat_r+0x20>)
 8017660:	2300      	movs	r3, #0
 8017662:	4604      	mov	r4, r0
 8017664:	4608      	mov	r0, r1
 8017666:	4611      	mov	r1, r2
 8017668:	602b      	str	r3, [r5, #0]
 801766a:	f7ea faf4 	bl	8001c56 <_fstat>
 801766e:	1c43      	adds	r3, r0, #1
 8017670:	d102      	bne.n	8017678 <_fstat_r+0x1c>
 8017672:	682b      	ldr	r3, [r5, #0]
 8017674:	b103      	cbz	r3, 8017678 <_fstat_r+0x1c>
 8017676:	6023      	str	r3, [r4, #0]
 8017678:	bd38      	pop	{r3, r4, r5, pc}
 801767a:	bf00      	nop
 801767c:	200132e4 	.word	0x200132e4

08017680 <_isatty_r>:
 8017680:	b538      	push	{r3, r4, r5, lr}
 8017682:	4d06      	ldr	r5, [pc, #24]	; (801769c <_isatty_r+0x1c>)
 8017684:	2300      	movs	r3, #0
 8017686:	4604      	mov	r4, r0
 8017688:	4608      	mov	r0, r1
 801768a:	602b      	str	r3, [r5, #0]
 801768c:	f7ea faf3 	bl	8001c76 <_isatty>
 8017690:	1c43      	adds	r3, r0, #1
 8017692:	d102      	bne.n	801769a <_isatty_r+0x1a>
 8017694:	682b      	ldr	r3, [r5, #0]
 8017696:	b103      	cbz	r3, 801769a <_isatty_r+0x1a>
 8017698:	6023      	str	r3, [r4, #0]
 801769a:	bd38      	pop	{r3, r4, r5, pc}
 801769c:	200132e4 	.word	0x200132e4

080176a0 <_kill_r>:
 80176a0:	b538      	push	{r3, r4, r5, lr}
 80176a2:	4d07      	ldr	r5, [pc, #28]	; (80176c0 <_kill_r+0x20>)
 80176a4:	2300      	movs	r3, #0
 80176a6:	4604      	mov	r4, r0
 80176a8:	4608      	mov	r0, r1
 80176aa:	4611      	mov	r1, r2
 80176ac:	602b      	str	r3, [r5, #0]
 80176ae:	f7ea fa73 	bl	8001b98 <_kill>
 80176b2:	1c43      	adds	r3, r0, #1
 80176b4:	d102      	bne.n	80176bc <_kill_r+0x1c>
 80176b6:	682b      	ldr	r3, [r5, #0]
 80176b8:	b103      	cbz	r3, 80176bc <_kill_r+0x1c>
 80176ba:	6023      	str	r3, [r4, #0]
 80176bc:	bd38      	pop	{r3, r4, r5, pc}
 80176be:	bf00      	nop
 80176c0:	200132e4 	.word	0x200132e4

080176c4 <_getpid_r>:
 80176c4:	f7ea ba60 	b.w	8001b88 <_getpid>

080176c8 <_init>:
 80176c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ca:	bf00      	nop
 80176cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176ce:	bc08      	pop	{r3}
 80176d0:	469e      	mov	lr, r3
 80176d2:	4770      	bx	lr

080176d4 <_fini>:
 80176d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d6:	bf00      	nop
 80176d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176da:	bc08      	pop	{r3}
 80176dc:	469e      	mov	lr, r3
 80176de:	4770      	bx	lr
