
microros_prueba_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018134  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  080183d8  080183d8  000283d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018fe4  08018fe4  00028fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08018fec  08018fec  00028fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018ff4  08018ff4  00028ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000114  24000000  08018ff8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000114  0801910c  00030114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000174  0801916c  00030174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e20c  240001d8  080191cc  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400e3e4  080191cc  0003e3e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026205  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a4f  00000000  00000000  0005647d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  0005aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013dc  00000000  00000000  0005c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a1e5  00000000  00000000  0005dc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000225a0  00000000  00000000  00067e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00173ce0  00000000  00000000  0008a409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007aa8  00000000  00000000  001fe0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00205b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080183bc 	.word	0x080183bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080183bc 	.word	0x080183bc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003ce:	f000 b9bb 	b.w	8000748 <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000464:	f000 b970 	b.w	8000748 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	460d      	mov	r5, r1
 8000488:	4604      	mov	r4, r0
 800048a:	460f      	mov	r7, r1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d14a      	bne.n	8000526 <__udivmoddi4+0xa6>
 8000490:	428a      	cmp	r2, r1
 8000492:	4694      	mov	ip, r2
 8000494:	d965      	bls.n	8000562 <__udivmoddi4+0xe2>
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	b143      	cbz	r3, 80004ae <__udivmoddi4+0x2e>
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	f1c3 0220 	rsb	r2, r3, #32
 80004a4:	409f      	lsls	r7, r3
 80004a6:	fa20 f202 	lsr.w	r2, r0, r2
 80004aa:	4317      	orrs	r7, r2
 80004ac:	409c      	lsls	r4, r3
 80004ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004b2:	fa1f f58c 	uxth.w	r5, ip
 80004b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80004ba:	0c22      	lsrs	r2, r4, #16
 80004bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80004c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004c4:	fb01 f005 	mul.w	r0, r1, r5
 80004c8:	4290      	cmp	r0, r2
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x62>
 80004cc:	eb1c 0202 	adds.w	r2, ip, r2
 80004d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80004d4:	f080 811c 	bcs.w	8000710 <__udivmoddi4+0x290>
 80004d8:	4290      	cmp	r0, r2
 80004da:	f240 8119 	bls.w	8000710 <__udivmoddi4+0x290>
 80004de:	3902      	subs	r1, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a12      	subs	r2, r2, r0
 80004e4:	b2a4      	uxth	r4, r4
 80004e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80004ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f2:	fb00 f505 	mul.w	r5, r0, r5
 80004f6:	42a5      	cmp	r5, r4
 80004f8:	d90a      	bls.n	8000510 <__udivmoddi4+0x90>
 80004fa:	eb1c 0404 	adds.w	r4, ip, r4
 80004fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000502:	f080 8107 	bcs.w	8000714 <__udivmoddi4+0x294>
 8000506:	42a5      	cmp	r5, r4
 8000508:	f240 8104 	bls.w	8000714 <__udivmoddi4+0x294>
 800050c:	4464      	add	r4, ip
 800050e:	3802      	subs	r0, #2
 8000510:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	2100      	movs	r1, #0
 8000518:	b11e      	cbz	r6, 8000522 <__udivmoddi4+0xa2>
 800051a:	40dc      	lsrs	r4, r3
 800051c:	2300      	movs	r3, #0
 800051e:	e9c6 4300 	strd	r4, r3, [r6]
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0xbc>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80ed 	beq.w	800070a <__udivmoddi4+0x28a>
 8000530:	2100      	movs	r1, #0
 8000532:	e9c6 0500 	strd	r0, r5, [r6]
 8000536:	4608      	mov	r0, r1
 8000538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053c:	fab3 f183 	clz	r1, r3
 8000540:	2900      	cmp	r1, #0
 8000542:	d149      	bne.n	80005d8 <__udivmoddi4+0x158>
 8000544:	42ab      	cmp	r3, r5
 8000546:	d302      	bcc.n	800054e <__udivmoddi4+0xce>
 8000548:	4282      	cmp	r2, r0
 800054a:	f200 80f8 	bhi.w	800073e <__udivmoddi4+0x2be>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	2e00      	cmp	r6, #0
 800055a:	d0e2      	beq.n	8000522 <__udivmoddi4+0xa2>
 800055c:	e9c6 4700 	strd	r4, r7, [r6]
 8000560:	e7df      	b.n	8000522 <__udivmoddi4+0xa2>
 8000562:	b902      	cbnz	r2, 8000566 <__udivmoddi4+0xe6>
 8000564:	deff      	udf	#255	; 0xff
 8000566:	fab2 f382 	clz	r3, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	f040 8090 	bne.w	8000690 <__udivmoddi4+0x210>
 8000570:	1a8a      	subs	r2, r1, r2
 8000572:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000576:	fa1f fe8c 	uxth.w	lr, ip
 800057a:	2101      	movs	r1, #1
 800057c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000580:	fb07 2015 	mls	r0, r7, r5, r2
 8000584:	0c22      	lsrs	r2, r4, #16
 8000586:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800058a:	fb0e f005 	mul.w	r0, lr, r5
 800058e:	4290      	cmp	r0, r2
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000592:	eb1c 0202 	adds.w	r2, ip, r2
 8000596:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4290      	cmp	r0, r2
 800059e:	f200 80cb 	bhi.w	8000738 <__udivmoddi4+0x2b8>
 80005a2:	4645      	mov	r5, r8
 80005a4:	1a12      	subs	r2, r2, r0
 80005a6:	b2a4      	uxth	r4, r4
 80005a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80005ac:	fb07 2210 	mls	r2, r7, r0, r2
 80005b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005b4:	fb0e fe00 	mul.w	lr, lr, r0
 80005b8:	45a6      	cmp	lr, r4
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x14e>
 80005bc:	eb1c 0404 	adds.w	r4, ip, r4
 80005c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80005c4:	d202      	bcs.n	80005cc <__udivmoddi4+0x14c>
 80005c6:	45a6      	cmp	lr, r4
 80005c8:	f200 80bb 	bhi.w	8000742 <__udivmoddi4+0x2c2>
 80005cc:	4610      	mov	r0, r2
 80005ce:	eba4 040e 	sub.w	r4, r4, lr
 80005d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005d6:	e79f      	b.n	8000518 <__udivmoddi4+0x98>
 80005d8:	f1c1 0720 	rsb	r7, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 fc07 	lsr.w	ip, r2, r7
 80005e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005e6:	fa05 f401 	lsl.w	r4, r5, r1
 80005ea:	fa20 f307 	lsr.w	r3, r0, r7
 80005ee:	40fd      	lsrs	r5, r7
 80005f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005f4:	4323      	orrs	r3, r4
 80005f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80005fa:	fa1f fe8c 	uxth.w	lr, ip
 80005fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000602:	0c1c      	lsrs	r4, r3, #16
 8000604:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000608:	fb08 f50e 	mul.w	r5, r8, lr
 800060c:	42a5      	cmp	r5, r4
 800060e:	fa02 f201 	lsl.w	r2, r2, r1
 8000612:	fa00 f001 	lsl.w	r0, r0, r1
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1c 0404 	adds.w	r4, ip, r4
 800061c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000620:	f080 8088 	bcs.w	8000734 <__udivmoddi4+0x2b4>
 8000624:	42a5      	cmp	r5, r4
 8000626:	f240 8085 	bls.w	8000734 <__udivmoddi4+0x2b4>
 800062a:	f1a8 0802 	sub.w	r8, r8, #2
 800062e:	4464      	add	r4, ip
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	b29d      	uxth	r5, r3
 8000634:	fbb4 f3f9 	udiv	r3, r4, r9
 8000638:	fb09 4413 	mls	r4, r9, r3, r4
 800063c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000640:	fb03 fe0e 	mul.w	lr, r3, lr
 8000644:	45a6      	cmp	lr, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1c 0404 	adds.w	r4, ip, r4
 800064c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000650:	d26c      	bcs.n	800072c <__udivmoddi4+0x2ac>
 8000652:	45a6      	cmp	lr, r4
 8000654:	d96a      	bls.n	800072c <__udivmoddi4+0x2ac>
 8000656:	3b02      	subs	r3, #2
 8000658:	4464      	add	r4, ip
 800065a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800065e:	fba3 9502 	umull	r9, r5, r3, r2
 8000662:	eba4 040e 	sub.w	r4, r4, lr
 8000666:	42ac      	cmp	r4, r5
 8000668:	46c8      	mov	r8, r9
 800066a:	46ae      	mov	lr, r5
 800066c:	d356      	bcc.n	800071c <__udivmoddi4+0x29c>
 800066e:	d053      	beq.n	8000718 <__udivmoddi4+0x298>
 8000670:	b156      	cbz	r6, 8000688 <__udivmoddi4+0x208>
 8000672:	ebb0 0208 	subs.w	r2, r0, r8
 8000676:	eb64 040e 	sbc.w	r4, r4, lr
 800067a:	fa04 f707 	lsl.w	r7, r4, r7
 800067e:	40ca      	lsrs	r2, r1
 8000680:	40cc      	lsrs	r4, r1
 8000682:	4317      	orrs	r7, r2
 8000684:	e9c6 7400 	strd	r7, r4, [r6]
 8000688:	4618      	mov	r0, r3
 800068a:	2100      	movs	r1, #0
 800068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000690:	f1c3 0120 	rsb	r1, r3, #32
 8000694:	fa02 fc03 	lsl.w	ip, r2, r3
 8000698:	fa20 f201 	lsr.w	r2, r0, r1
 800069c:	fa25 f101 	lsr.w	r1, r5, r1
 80006a0:	409d      	lsls	r5, r3
 80006a2:	432a      	orrs	r2, r5
 80006a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006a8:	fa1f fe8c 	uxth.w	lr, ip
 80006ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80006b0:	fb07 1510 	mls	r5, r7, r0, r1
 80006b4:	0c11      	lsrs	r1, r2, #16
 80006b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006ba:	fb00 f50e 	mul.w	r5, r0, lr
 80006be:	428d      	cmp	r5, r1
 80006c0:	fa04 f403 	lsl.w	r4, r4, r3
 80006c4:	d908      	bls.n	80006d8 <__udivmoddi4+0x258>
 80006c6:	eb1c 0101 	adds.w	r1, ip, r1
 80006ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006ce:	d22f      	bcs.n	8000730 <__udivmoddi4+0x2b0>
 80006d0:	428d      	cmp	r5, r1
 80006d2:	d92d      	bls.n	8000730 <__udivmoddi4+0x2b0>
 80006d4:	3802      	subs	r0, #2
 80006d6:	4461      	add	r1, ip
 80006d8:	1b49      	subs	r1, r1, r5
 80006da:	b292      	uxth	r2, r2
 80006dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80006e0:	fb07 1115 	mls	r1, r7, r5, r1
 80006e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006e8:	fb05 f10e 	mul.w	r1, r5, lr
 80006ec:	4291      	cmp	r1, r2
 80006ee:	d908      	bls.n	8000702 <__udivmoddi4+0x282>
 80006f0:	eb1c 0202 	adds.w	r2, ip, r2
 80006f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80006f8:	d216      	bcs.n	8000728 <__udivmoddi4+0x2a8>
 80006fa:	4291      	cmp	r1, r2
 80006fc:	d914      	bls.n	8000728 <__udivmoddi4+0x2a8>
 80006fe:	3d02      	subs	r5, #2
 8000700:	4462      	add	r2, ip
 8000702:	1a52      	subs	r2, r2, r1
 8000704:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000708:	e738      	b.n	800057c <__udivmoddi4+0xfc>
 800070a:	4631      	mov	r1, r6
 800070c:	4630      	mov	r0, r6
 800070e:	e708      	b.n	8000522 <__udivmoddi4+0xa2>
 8000710:	4639      	mov	r1, r7
 8000712:	e6e6      	b.n	80004e2 <__udivmoddi4+0x62>
 8000714:	4610      	mov	r0, r2
 8000716:	e6fb      	b.n	8000510 <__udivmoddi4+0x90>
 8000718:	4548      	cmp	r0, r9
 800071a:	d2a9      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 800071c:	ebb9 0802 	subs.w	r8, r9, r2
 8000720:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000724:	3b01      	subs	r3, #1
 8000726:	e7a3      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000728:	4645      	mov	r5, r8
 800072a:	e7ea      	b.n	8000702 <__udivmoddi4+0x282>
 800072c:	462b      	mov	r3, r5
 800072e:	e794      	b.n	800065a <__udivmoddi4+0x1da>
 8000730:	4640      	mov	r0, r8
 8000732:	e7d1      	b.n	80006d8 <__udivmoddi4+0x258>
 8000734:	46d0      	mov	r8, sl
 8000736:	e77b      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000738:	3d02      	subs	r5, #2
 800073a:	4462      	add	r2, ip
 800073c:	e732      	b.n	80005a4 <__udivmoddi4+0x124>
 800073e:	4608      	mov	r0, r1
 8000740:	e70a      	b.n	8000558 <__udivmoddi4+0xd8>
 8000742:	4464      	add	r4, ip
 8000744:	3802      	subs	r0, #2
 8000746:	e742      	b.n	80005ce <__udivmoddi4+0x14e>

08000748 <__aeabi_idiv0>:
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000758:	f00b ff72 	bl	800c640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800075c:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <pvPortMallocMicroROS+0x174>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d101      	bne.n	8000768 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000764:	f000 f980 	bl	8000a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000768:	4b56      	ldr	r3, [pc, #344]	; (80008c4 <pvPortMallocMicroROS+0x178>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4013      	ands	r3, r2
 8000770:	2b00      	cmp	r3, #0
 8000772:	f040 808e 	bne.w	8000892 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d01d      	beq.n	80007b8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800077c:	2208      	movs	r2, #8
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	2b00      	cmp	r3, #0
 800078c:	d014      	beq.n	80007b8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f023 0307 	bic.w	r3, r3, #7
 8000794:	3308      	adds	r3, #8
 8000796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00a      	beq.n	80007b8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a6:	f383 8811 	msr	BASEPRI, r3
 80007aa:	f3bf 8f6f 	isb	sy
 80007ae:	f3bf 8f4f 	dsb	sy
 80007b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007b4:	bf00      	nop
 80007b6:	e7fe      	b.n	80007b6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d069      	beq.n	8000892 <pvPortMallocMicroROS+0x146>
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <pvPortMallocMicroROS+0x17c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d864      	bhi.n	8000892 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007c8:	4b40      	ldr	r3, [pc, #256]	; (80008cc <pvPortMallocMicroROS+0x180>)
 80007ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007cc:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <pvPortMallocMicroROS+0x180>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007d2:	e004      	b.n	80007de <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d903      	bls.n	80007f0 <pvPortMallocMicroROS+0xa4>
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f1      	bne.n	80007d4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007f0:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <pvPortMallocMicroROS+0x174>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d04b      	beq.n	8000892 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2208      	movs	r2, #8
 8000800:	4413      	add	r3, r2
 8000802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	2308      	movs	r3, #8
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	429a      	cmp	r2, r3
 800081a:	d91f      	bls.n	800085c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800081c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00a      	beq.n	8000844 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000832:	f383 8811 	msr	BASEPRI, r3
 8000836:	f3bf 8f6f 	isb	sy
 800083a:	f3bf 8f4f 	dsb	sy
 800083e:	613b      	str	r3, [r7, #16]
}
 8000840:	bf00      	nop
 8000842:	e7fe      	b.n	8000842 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000856:	69b8      	ldr	r0, [r7, #24]
 8000858:	f000 f968 	bl	8000b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <pvPortMallocMicroROS+0x17c>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <pvPortMallocMicroROS+0x17c>)
 8000868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <pvPortMallocMicroROS+0x17c>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <pvPortMallocMicroROS+0x184>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	d203      	bcs.n	800087e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <pvPortMallocMicroROS+0x17c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <pvPortMallocMicroROS+0x184>)
 800087c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <pvPortMallocMicroROS+0x178>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	431a      	orrs	r2, r3
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000892:	f00b fee3 	bl	800c65c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	2b00      	cmp	r3, #0
 800089e:	d00a      	beq.n	80008b6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80008a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a4:	f383 8811 	msr	BASEPRI, r3
 80008a8:	f3bf 8f6f 	isb	sy
 80008ac:	f3bf 8f4f 	dsb	sy
 80008b0:	60fb      	str	r3, [r7, #12]
}
 80008b2:	bf00      	nop
 80008b4:	e7fe      	b.n	80008b4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80008b6:	69fb      	ldr	r3, [r7, #28]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	24003dfc 	.word	0x24003dfc
 80008c4:	24003e08 	.word	0x24003e08
 80008c8:	24003e00 	.word	0x24003e00
 80008cc:	24003df4 	.word	0x24003df4
 80008d0:	24003e04 	.word	0x24003e04

080008d4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d048      	beq.n	8000978 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008e6:	2308      	movs	r3, #8
 80008e8:	425b      	negs	r3, r3
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	4413      	add	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <vPortFreeMicroROS+0xac>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4013      	ands	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10a      	bne.n	8000918 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
}
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00a      	beq.n	8000936 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000924:	f383 8811 	msr	BASEPRI, r3
 8000928:	f3bf 8f6f 	isb	sy
 800092c:	f3bf 8f4f 	dsb	sy
 8000930:	60bb      	str	r3, [r7, #8]
}
 8000932:	bf00      	nop
 8000934:	e7fe      	b.n	8000934 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <vPortFreeMicroROS+0xac>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d019      	beq.n	8000978 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d115      	bne.n	8000978 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <vPortFreeMicroROS+0xac>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800095c:	f00b fe70 	bl	800c640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <vPortFreeMicroROS+0xb0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4a06      	ldr	r2, [pc, #24]	; (8000984 <vPortFreeMicroROS+0xb0>)
 800096c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800096e:	6938      	ldr	r0, [r7, #16]
 8000970:	f000 f8dc 	bl	8000b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000974:	f00b fe72 	bl	800c65c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	24003e08 	.word	0x24003e08
 8000984:	24003e00 	.word	0x24003e00

08000988 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000994:	2308      	movs	r3, #8
 8000996:	425b      	negs	r3, r3
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <getBlockSize+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	return count;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24003e08 	.word	0x24003e08

080009c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009ce:	f00b fe37 	bl	800c640 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f7ff feba 	bl	800074c <pvPortMallocMicroROS>
 80009d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d017      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d014      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffce 	bl	8000988 <getBlockSize>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2208      	movs	r2, #8
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d201      	bcs.n	8000a00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f016 fde0 	bl	80175ca <memcpy>

		vPortFreeMicroROS(pv);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff62 	bl	80008d4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a10:	f00b fe24 	bl	800c65c <xTaskResumeAll>

	return newmem;
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a28:	f00b fe0a 	bl	800c640 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff fe88 	bl	800074c <pvPortMallocMicroROS>
 8000a3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a42:	e004      	b.n	8000a4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	613a      	str	r2, [r7, #16]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	617a      	str	r2, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f5      	bne.n	8000a44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a58:	f00b fe00 	bl	800c65c <xTaskResumeAll>
  	return mem;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <prvHeapInit+0xac>)
 8000a76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00c      	beq.n	8000a9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3307      	adds	r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f023 0307 	bic.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <prvHeapInit+0xac>)
 8000a98:	4413      	add	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <prvHeapInit+0xb0>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <prvHeapInit+0xb0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	1a9b      	subs	r3, r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f023 0307 	bic.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <prvHeapInit+0xb4>)
 8000ac8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <prvHeapInit+0xb4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <prvHeapInit+0xb4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	1ad2      	subs	r2, r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <prvHeapInit+0xb4>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <prvHeapInit+0xb8>)
 8000af6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <prvHeapInit+0xbc>)
 8000afe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <prvHeapInit+0xc0>)
 8000b02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	240001f4 	.word	0x240001f4
 8000b18:	24003df4 	.word	0x24003df4
 8000b1c:	24003dfc 	.word	0x24003dfc
 8000b20:	24003e04 	.word	0x24003e04
 8000b24:	24003e00 	.word	0x24003e00
 8000b28:	24003e08 	.word	0x24003e08

08000b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <prvInsertBlockIntoFreeList+0xac>)
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e002      	b.n	8000b40 <prvInsertBlockIntoFreeList+0x14>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d8f7      	bhi.n	8000b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	4413      	add	r3, r2
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d108      	bne.n	8000b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	441a      	add	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	441a      	add	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d118      	bne.n	8000bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <prvInsertBlockIntoFreeList+0xb0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d00d      	beq.n	8000baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	441a      	add	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	e008      	b.n	8000bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <prvInsertBlockIntoFreeList+0xb0>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e003      	b.n	8000bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d002      	beq.n	8000bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	24003df4 	.word	0x24003df4
 8000bdc:	24003dfc 	.word	0x24003dfc

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be4:	f001 fa64 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be8:	f000 f820 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bec:	f000 f9dc 	bl	8000fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf0:	f000 f9b2 	bl	8000f58 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bf4:	f000 f932 	bl	8000e5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bf8:	f000 f97c 	bl	8000ef4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000bfc:	f000 f8e2 	bl	8000dc4 <MX_USART2_UART_Init>
  MX_ETH_Init();
 8000c00:	f000 f894 	bl	8000d2c <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c04:	f00a fc14 	bl	800b430 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <main+0x40>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <main+0x44>)
 8000c0e:	f00a fc59 	bl	800b4c4 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <main+0x48>)
 8000c16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c18:	f00a fc2e 	bl	800b478 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <main+0x3c>
 8000c1e:	bf00      	nop
 8000c20:	08018470 	.word	0x08018470
 8000c24:	08001161 	.word	0x08001161
 8000c28:	24004618 	.word	0x24004618

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	; 0x70
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	224c      	movs	r2, #76	; 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f016 fbfc 	bl	8017438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2220      	movs	r2, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f016 fbf6 	bl	8017438 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f005 f993 	bl	8005f78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <SystemClock_Config+0xf8>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5a:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <SystemClock_Config+0xf8>)
 8000c5c:	f023 0301 	bic.w	r3, r3, #1
 8000c60:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <SystemClock_Config+0xf8>)
 8000c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <SystemClock_Config+0xfc>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c74:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <SystemClock_Config+0xfc>)
 8000c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <SystemClock_Config+0xfc>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c88:	bf00      	nop
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <SystemClock_Config+0xfc>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c96:	d1f8      	bne.n	8000c8a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca6:	2340      	movs	r3, #64	; 0x40
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000cb6:	2318      	movs	r3, #24
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f005 f998 	bl	800600c <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ce2:	f000 fac7 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	233f      	movs	r3, #63	; 0x3f
 8000ce8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f005 fdd8 	bl	80068c0 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d16:	f000 faad 	bl	8001274 <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3770      	adds	r7, #112	; 0x70
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	58000400 	.word	0x58000400
 8000d28:	58024800 	.word	0x58024800

08000d2c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_ETH_Init+0x80>)
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <MX_ETH_Init+0x84>)
 8000d34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_ETH_Init+0x88>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ETH_Init+0x88>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_ETH_Init+0x88>)
 8000d44:	22e1      	movs	r2, #225	; 0xe1
 8000d46:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ETH_Init+0x88>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_ETH_Init+0x88>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_ETH_Init+0x88>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_ETH_Init+0x80>)
 8000d5c:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_ETH_Init+0x88>)
 8000d5e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_ETH_Init+0x80>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_ETH_Init+0x80>)
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <MX_ETH_Init+0x8c>)
 8000d6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_ETH_Init+0x80>)
 8000d6e:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <MX_ETH_Init+0x90>)
 8000d70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_ETH_Init+0x80>)
 8000d74:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <MX_ETH_Init+0x80>)
 8000d7c:	f004 f9c6 	bl	800510c <HAL_ETH_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d86:	f000 fa75 	bl	8001274 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d8a:	2238      	movs	r2, #56	; 0x38
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_ETH_Init+0x94>)
 8000d90:	f016 fb52 	bl	8017438 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_ETH_Init+0x94>)
 8000d96:	2221      	movs	r2, #33	; 0x21
 8000d98:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_ETH_Init+0x94>)
 8000d9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000da0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_ETH_Init+0x94>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24003e44 	.word	0x24003e44
 8000db0:	40028000 	.word	0x40028000
 8000db4:	2400461c 	.word	0x2400461c
 8000db8:	24000174 	.word	0x24000174
 8000dbc:	24000114 	.word	0x24000114
 8000dc0:	24003e0c 	.word	0x24003e0c

08000dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e0e:	f007 ff0f 	bl	8008c30 <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f000 fa2c 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e20:	f009 fefe 	bl	800ac20 <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f000 fa23 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e32:	f009 ff33 	bl	800ac9c <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f000 fa1a 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e42:	f009 feb4 	bl	800abae <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 fa12 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24003ef4 	.word	0x24003ef4
 8000e58:	40004400 	.word	0x40004400

08000e5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <MX_USART3_UART_Init+0x94>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea4:	4811      	ldr	r0, [pc, #68]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000ea6:	f007 fec3 	bl	8008c30 <HAL_UART_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000eb0:	f000 f9e0 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000eb8:	f009 feb2 	bl	800ac20 <HAL_UARTEx_SetTxFifoThreshold>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec2:	f000 f9d7 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000eca:	f009 fee7 	bl	800ac9c <HAL_UARTEx_SetRxFifoThreshold>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed4:	f000 f9ce 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_USART3_UART_Init+0x90>)
 8000eda:	f009 fe68 	bl	800abae <HAL_UARTEx_DisableFifoMode>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee4:	f000 f9c6 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	24003f88 	.word	0x24003f88
 8000ef0:	40004800 	.word	0x40004800

08000ef4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000efc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f00:	2209      	movs	r2, #9
 8000f02:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f3c:	f004 fed3 	bl	8005ce6 <HAL_PCD_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f46:	f000 f995 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2400410c 	.word	0x2400410c
 8000f54:	40080000 	.word	0x40080000

08000f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_DMA_Init+0x4c>)
 8000f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f64:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <MX_DMA_Init+0x4c>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_DMA_Init+0x4c>)
 8000f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2105      	movs	r1, #5
 8000f80:	200b      	movs	r0, #11
 8000f82:	f001 fa46 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f86:	200b      	movs	r0, #11
 8000f88:	f001 fa5d 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2105      	movs	r1, #5
 8000f90:	200c      	movs	r0, #12
 8000f92:	f001 fa3e 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f96:	200c      	movs	r0, #12
 8000f98:	f001 fa55 	bl	8002446 <HAL_NVIC_EnableIRQ>

}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b62      	ldr	r3, [pc, #392]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a60      	ldr	r2, [pc, #384]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fdc:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a59      	ldr	r2, [pc, #356]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b56      	ldr	r3, [pc, #344]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b53      	ldr	r3, [pc, #332]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <MX_GPIO_Init+0x1a0>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <MX_GPIO_Init+0x1a0>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <MX_GPIO_Init+0x1a0>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	4b44      	ldr	r3, [pc, #272]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a42      	ldr	r2, [pc, #264]	; (8001148 <MX_GPIO_Init+0x1a0>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b40      	ldr	r3, [pc, #256]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	4a3b      	ldr	r2, [pc, #236]	; (8001148 <MX_GPIO_Init+0x1a0>)
 800105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a33      	ldr	r2, [pc, #204]	; (8001148 <MX_GPIO_Init+0x1a0>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <MX_GPIO_Init+0x1a0>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f244 0101 	movw	r1, #16385	; 0x4001
 8001096:	482d      	ldr	r0, [pc, #180]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001098:	f004 fe0c 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	482b      	ldr	r0, [pc, #172]	; (8001150 <MX_GPIO_Init+0x1a8>)
 80010a4:	f004 fe06 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2102      	movs	r1, #2
 80010ac:	4829      	ldr	r0, [pc, #164]	; (8001154 <MX_GPIO_Init+0x1ac>)
 80010ae:	f004 fe01 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4824      	ldr	r0, [pc, #144]	; (8001158 <MX_GPIO_Init+0x1b0>)
 80010c8:	f004 fc44 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80010cc:	f244 0301 	movw	r3, #16385	; 0x4001
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4819      	ldr	r0, [pc, #100]	; (800114c <MX_GPIO_Init+0x1a4>)
 80010e6:	f004 fc35 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_GPIO_Init+0x1a8>)
 8001104:	f004 fc26 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_GPIO_Init+0x1b4>)
 800111e:	f004 fc19 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_GPIO_Init+0x1ac>)
 800113a:	f004 fc0b 	bl	8005954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	58024400 	.word	0x58024400
 800114c:	58020400 	.word	0x58020400
 8001150:	58020c00 	.word	0x58020c00
 8001154:	58021000 	.word	0x58021000
 8001158:	58020800 	.word	0x58020800
 800115c:	58021800 	.word	0x58021800

08001160 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b0a6      	sub	sp, #152	; 0x98
 8001164:	af02      	add	r7, sp, #8
 8001166:	61f8      	str	r0, [r7, #28]
	 /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8001168:	4b34      	ldr	r3, [pc, #208]	; (800123c <StartDefaultTask+0xdc>)
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	4b34      	ldr	r3, [pc, #208]	; (8001240 <StartDefaultTask+0xe0>)
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <StartDefaultTask+0xe4>)
 8001172:	4a35      	ldr	r2, [pc, #212]	; (8001248 <StartDefaultTask+0xe8>)
 8001174:	4935      	ldr	r1, [pc, #212]	; (800124c <StartDefaultTask+0xec>)
 8001176:	2001      	movs	r0, #1
 8001178:	f00d f90e 	bl	800e398 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800117c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001180:	4618      	mov	r0, r3
 8001182:	f00d f88b 	bl	800e29c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001186:	4b32      	ldr	r3, [pc, #200]	; (8001250 <StartDefaultTask+0xf0>)
 8001188:	67bb      	str	r3, [r7, #120]	; 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <StartDefaultTask+0xf4>)
 800118c:	67fb      	str	r3, [r7, #124]	; 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <StartDefaultTask+0xf8>)
 8001190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <StartDefaultTask+0xfc>)
 8001196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800119a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800119e:	4618      	mov	r0, r3
 80011a0:	f00d f88a 	bl	800e2b8 <rcutils_set_default_allocator>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f083 0301 	eor.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <StartDefaultTask+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80011b0:	f240 2132 	movw	r1, #562	; 0x232
 80011b4:	482a      	ldr	r0, [pc, #168]	; (8001260 <StartDefaultTask+0x100>)
 80011b6:	f016 f87d 	bl	80172b4 <iprintf>


	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 80011ba:	463b      	mov	r3, r7
 80011bc:	4618      	mov	r0, r3
 80011be:	f00d f899 	bl	800e2f4 <rcutils_get_default_allocator>
 80011c2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80011c6:	463d      	mov	r5, r7
 80011c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 80011d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	f00c ff90 	bl	800e100 <rclc_support_init>
	          osDelay(1000);
	      } while (ret != RCL_RET_OK);
*/
	  // create node

	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80011e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011e4:	f107 0020 	add.w	r0, r7, #32
 80011e8:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <StartDefaultTask+0x104>)
 80011ea:	491f      	ldr	r1, [pc, #124]	; (8001268 <StartDefaultTask+0x108>)
 80011ec:	f00c ffd2 	bl	800e194 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 80011f0:	f00d fd68 	bl	800ecc4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f107 0120 	add.w	r1, r7, #32
 80011fa:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <StartDefaultTask+0x10c>)
 8001200:	f00d f80a 	bl	800e218 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	673b      	str	r3, [r7, #112]	; 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8001208:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800120c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001210:	2200      	movs	r2, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f00c ff50 	bl	800e0b8 <rcl_publish>
 8001218:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    if (ret != RCL_RET_OK)
 800121c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <StartDefaultTask+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001224:	f240 215f 	movw	r1, #607	; 0x25f
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <StartDefaultTask+0x110>)
 800122a:	f016 f843 	bl	80172b4 <iprintf>
	    }

	    msg.data++;
 800122e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001230:	3301      	adds	r3, #1
 8001232:	673b      	str	r3, [r7, #112]	; 0x70
	    osDelay(10);
 8001234:	200a      	movs	r0, #10
 8001236:	f00a f9d7 	bl	800b5e8 <osDelay>
	  {
 800123a:	e7e5      	b.n	8001208 <StartDefaultTask+0xa8>
 800123c:	08001e81 	.word	0x08001e81
 8001240:	08001e1d 	.word	0x08001e1d
 8001244:	08001dfd 	.word	0x08001dfd
 8001248:	08001dd1 	.word	0x08001dd1
 800124c:	24003ef4 	.word	0x24003ef4
 8001250:	08001281 	.word	0x08001281
 8001254:	080012c5 	.word	0x080012c5
 8001258:	080012fd 	.word	0x080012fd
 800125c:	08001369 	.word	0x08001369
 8001260:	080183e4 	.word	0x080183e4
 8001264:	0801840c 	.word	0x0801840c
 8001268:	08018410 	.word	0x08018410
 800126c:	0801841c 	.word	0x0801841c
 8001270:	08018430 	.word	0x08018430

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <microros_allocate+0x3c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <microros_allocate+0x3c>)
 8001298:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <microros_allocate+0x40>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <microros_allocate+0x40>)
 80012a8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fa4e 	bl	800074c <pvPortMallocMicroROS>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	24004624 	.word	0x24004624
 80012c0:	24004628 	.word	0x24004628

080012c4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fb57 	bl	8000988 <getBlockSize>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <microros_deallocate+0x34>)
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <microros_deallocate+0x34>)
 80012e6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff faf3 	bl	80008d4 <vPortFreeMicroROS>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	24004628 	.word	0x24004628

080012fc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <microros_reallocate+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	461a      	mov	r2, r3
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <microros_reallocate+0x64>)
 8001316:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <microros_reallocate+0x68>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4413      	add	r3, r2
 8001322:	461a      	mov	r2, r3
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <microros_reallocate+0x68>)
 8001326:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d104      	bne.n	8001338 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f7ff fa0c 	bl	800074c <pvPortMallocMicroROS>
 8001334:	4603      	mov	r3, r0
 8001336:	e00e      	b.n	8001356 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff fb25 	bl	8000988 <getBlockSize>
 800133e:	4603      	mov	r3, r0
 8001340:	4a08      	ldr	r2, [pc, #32]	; (8001364 <microros_reallocate+0x68>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	461a      	mov	r2, r3
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <microros_reallocate+0x68>)
 800134a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff fb38 	bl	80009c4 <pvPortReallocMicroROS>
 8001354:	4603      	mov	r3, r0
  }
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	24004624 	.word	0x24004624
 8001364:	24004628 	.word	0x24004628

08001368 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <microros_zero_allocate+0x48>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4413      	add	r3, r2
 8001382:	461a      	mov	r2, r3
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <microros_zero_allocate+0x48>)
 8001386:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <microros_zero_allocate+0x4c>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	4413      	add	r3, r2
 8001396:	461a      	mov	r2, r3
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <microros_zero_allocate+0x4c>)
 800139a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fb3d 	bl	8000a1e <pvPortCallocMicroROS>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24004624 	.word	0x24004624
 80013b4:	24004628 	.word	0x24004628

080013b8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80013ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ce:	a320      	add	r3, pc, #128	; (adr r3, 8001450 <UTILS_NanosecondsToTimespec+0x98>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7fe ffec 	bl	80003b0 <__aeabi_ldivmod>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80013e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e6:	a31a      	add	r3, pc, #104	; (adr r3, 8001450 <UTILS_NanosecondsToTimespec+0x98>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7fe ffe0 	bl	80003b0 <__aeabi_ldivmod>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da20      	bge.n	800143e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <UTILS_NanosecondsToTimespec+0x90>)
 8001402:	fb82 1203 	smull	r1, r2, r2, r3
 8001406:	1712      	asrs	r2, r2, #28
 8001408:	17db      	asrs	r3, r3, #31
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	6979      	ldr	r1, [r7, #20]
 8001418:	17c8      	asrs	r0, r1, #31
 800141a:	460c      	mov	r4, r1
 800141c:	4605      	mov	r5, r0
 800141e:	ebb2 0804 	subs.w	r8, r2, r4
 8001422:	eb63 0905 	sbc.w	r9, r3, r5
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4906      	ldr	r1, [pc, #24]	; (800144c <UTILS_NanosecondsToTimespec+0x94>)
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	441a      	add	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
    }
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001448:	44b82fa1 	.word	0x44b82fa1
 800144c:	3b9aca00 	.word	0x3b9aca00
 8001450:	3b9aca00 	.word	0x3b9aca00
 8001454:	00000000 	.word	0x00000000

08001458 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b08e      	sub	sp, #56	; 0x38
 800145e:	af00      	add	r7, sp, #0
 8001460:	6278      	str	r0, [r7, #36]	; 0x24
 8001462:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001464:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001468:	2300      	movs	r3, #0
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	4618      	mov	r0, r3
 8001480:	f00b fb66 	bl	800cb50 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	17da      	asrs	r2, r3, #31
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	61fa      	str	r2, [r7, #28]
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	69b9      	ldr	r1, [r7, #24]
 8001496:	000b      	movs	r3, r1
 8001498:	2200      	movs	r2, #0
 800149a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	2200      	movs	r2, #0
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014aa:	1911      	adds	r1, r2, r4
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	416b      	adcs	r3, r5
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80014ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	f04f 0400 	mov.w	r4, #0
 80014c6:	f04f 0500 	mov.w	r5, #0
 80014ca:	015d      	lsls	r5, r3, #5
 80014cc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80014d0:	0154      	lsls	r4, r2, #5
 80014d2:	4622      	mov	r2, r4
 80014d4:	462b      	mov	r3, r5
 80014d6:	ebb2 0800 	subs.w	r8, r2, r0
 80014da:	eb63 0901 	sbc.w	r9, r3, r1
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80014ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80014ee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80014f2:	4690      	mov	r8, r2
 80014f4:	4699      	mov	r9, r3
 80014f6:	eb18 0a00 	adds.w	sl, r8, r0
 80014fa:	eb49 0b01 	adc.w	fp, r9, r1
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800150a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800150e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001512:	ebb2 040a 	subs.w	r4, r2, sl
 8001516:	603c      	str	r4, [r7, #0]
 8001518:	eb63 030b 	sbc.w	r3, r3, fp
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001522:	4623      	mov	r3, r4
 8001524:	181b      	adds	r3, r3, r0
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	462b      	mov	r3, r5
 800152a:	eb41 0303 	adc.w	r3, r1, r3
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	6a3a      	ldr	r2, [r7, #32]
 8001532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001536:	f7ff ff3f 	bl	80013b8 <UTILS_NanosecondsToTimespec>

    return 0;
 800153a:	2300      	movs	r3, #0
 800153c:	4618      	mov	r0, r3
 800153e:	3738      	adds	r7, #56	; 0x38
 8001540:	46bd      	mov	sp, r7
 8001542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_MspInit+0x38>)
 8001550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_MspInit+0x38>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_MspInit+0x38>)
 8001560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	210f      	movs	r1, #15
 8001570:	f06f 0001 	mvn.w	r0, #1
 8001574:	f000 ff4d 	bl	8002412 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	58024400 	.word	0x58024400

08001584 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a59      	ldr	r2, [pc, #356]	; (8001708 <HAL_ETH_MspInit+0x184>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f040 80ab 	bne.w	80016fe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015a8:	4b58      	ldr	r3, [pc, #352]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ae:	4a57      	ldr	r2, [pc, #348]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b8:	4b54      	ldr	r3, [pc, #336]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015c6:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ea:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f4:	4b45      	ldr	r3, [pc, #276]	; (800170c <HAL_ETH_MspInit+0x188>)
 80015f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a40      	ldr	r2, [pc, #256]	; (800170c <HAL_ETH_MspInit+0x188>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b3e      	ldr	r3, [pc, #248]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a39      	ldr	r2, [pc, #228]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a31      	ldr	r2, [pc, #196]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_ETH_MspInit+0x188>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	4a2a      	ldr	r2, [pc, #168]	; (800170c <HAL_ETH_MspInit+0x188>)
 8001664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_ETH_MspInit+0x188>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800167a:	2332      	movs	r3, #50	; 0x32
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168a:	230b      	movs	r3, #11
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	481e      	ldr	r0, [pc, #120]	; (8001710 <HAL_ETH_MspInit+0x18c>)
 8001696:	f004 f95d 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800169a:	2386      	movs	r3, #134	; 0x86
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016aa:	230b      	movs	r3, #11
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	4817      	ldr	r0, [pc, #92]	; (8001714 <HAL_ETH_MspInit+0x190>)
 80016b6:	f004 f94d 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016cc:	230b      	movs	r3, #11
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	4810      	ldr	r0, [pc, #64]	; (8001718 <HAL_ETH_MspInit+0x194>)
 80016d8:	f004 f93c 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80016dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ee:	230b      	movs	r3, #11
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <HAL_ETH_MspInit+0x198>)
 80016fa:	f004 f92b 	bl	8005954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3738      	adds	r7, #56	; 0x38
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40028000 	.word	0x40028000
 800170c:	58024400 	.word	0x58024400
 8001710:	58020800 	.word	0x58020800
 8001714:	58020000 	.word	0x58020000
 8001718:	58020400 	.word	0x58020400
 800171c:	58021800 	.word	0x58021800

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0be      	sub	sp, #248	; 0xf8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	22c0      	movs	r2, #192	; 0xc0
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f015 fe79 	bl	8017438 <memset>
  if(huart->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a92      	ldr	r2, [pc, #584]	; (8001994 <HAL_UART_MspInit+0x274>)
 800174c:	4293      	cmp	r3, r2
 800174e:	f040 80d1 	bne.w	80018f4 <HAL_UART_MspInit+0x1d4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001752:	f04f 0202 	mov.w	r2, #2
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	4618      	mov	r0, r3
 800176a:	f005 fc35 	bl	8006fd8 <HAL_RCCEx_PeriphCLKConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001774:	f7ff fd7e 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001778:	4b87      	ldr	r3, [pc, #540]	; (8001998 <HAL_UART_MspInit+0x278>)
 800177a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177e:	4a86      	ldr	r2, [pc, #536]	; (8001998 <HAL_UART_MspInit+0x278>)
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001788:	4b83      	ldr	r3, [pc, #524]	; (8001998 <HAL_UART_MspInit+0x278>)
 800178a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b80      	ldr	r3, [pc, #512]	; (8001998 <HAL_UART_MspInit+0x278>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	4a7e      	ldr	r2, [pc, #504]	; (8001998 <HAL_UART_MspInit+0x278>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a6:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <HAL_UART_MspInit+0x278>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	4b78      	ldr	r3, [pc, #480]	; (8001998 <HAL_UART_MspInit+0x278>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	4a77      	ldr	r2, [pc, #476]	; (8001998 <HAL_UART_MspInit+0x278>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c4:	4b74      	ldr	r3, [pc, #464]	; (8001998 <HAL_UART_MspInit+0x278>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d2:	2308      	movs	r3, #8
 80017d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ea:	2307      	movs	r3, #7
 80017ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4869      	ldr	r0, [pc, #420]	; (800199c <HAL_UART_MspInit+0x27c>)
 80017f8:	f004 f8ac 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017fc:	2320      	movs	r3, #32
 80017fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001814:	2307      	movs	r3, #7
 8001816:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800181e:	4619      	mov	r1, r3
 8001820:	485f      	ldr	r0, [pc, #380]	; (80019a0 <HAL_UART_MspInit+0x280>)
 8001822:	f004 f897 	bl	8005954 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_UART_MspInit+0x284>)
 8001828:	4a5f      	ldr	r2, [pc, #380]	; (80019a8 <HAL_UART_MspInit+0x288>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800182c:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_UART_MspInit+0x284>)
 800182e:	222b      	movs	r2, #43	; 0x2b
 8001830:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001832:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <HAL_UART_MspInit+0x284>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <HAL_UART_MspInit+0x284>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_UART_MspInit+0x284>)
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001846:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <HAL_UART_MspInit+0x284>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184c:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <HAL_UART_MspInit+0x284>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001852:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <HAL_UART_MspInit+0x284>)
 8001854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001858:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_UART_MspInit+0x284>)
 800185c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001860:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_UART_MspInit+0x284>)
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001868:	484e      	ldr	r0, [pc, #312]	; (80019a4 <HAL_UART_MspInit+0x284>)
 800186a:	f000 fe07 	bl	800247c <HAL_DMA_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001874:	f7ff fcfe 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_UART_MspInit+0x284>)
 800187c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_UART_MspInit+0x284>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <HAL_UART_MspInit+0x28c>)
 8001888:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <HAL_UART_MspInit+0x290>)
 800188a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800188c:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_UART_MspInit+0x28c>)
 800188e:	222c      	movs	r2, #44	; 0x2c
 8001890:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001892:	4b46      	ldr	r3, [pc, #280]	; (80019ac <HAL_UART_MspInit+0x28c>)
 8001894:	2240      	movs	r2, #64	; 0x40
 8001896:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001898:	4b44      	ldr	r3, [pc, #272]	; (80019ac <HAL_UART_MspInit+0x28c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018b8:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018be:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018c6:	4839      	ldr	r0, [pc, #228]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018c8:	f000 fdd8 	bl	800247c <HAL_DMA_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_UART_MspInit+0x1b6>
    {
      Error_Handler();
 80018d2:	f7ff fccf 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a34      	ldr	r2, [pc, #208]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018da:	67da      	str	r2, [r3, #124]	; 0x7c
 80018dc:	4a33      	ldr	r2, [pc, #204]	; (80019ac <HAL_UART_MspInit+0x28c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2105      	movs	r1, #5
 80018e6:	2026      	movs	r0, #38	; 0x26
 80018e8:	f000 fd93 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ec:	2026      	movs	r0, #38	; 0x26
 80018ee:	f000 fdaa 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018f2:	e04b      	b.n	800198c <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==USART3)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <HAL_UART_MspInit+0x294>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d146      	bne.n	800198c <HAL_UART_MspInit+0x26c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018fe:	f04f 0202 	mov.w	r2, #2
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fb5f 	bl	8006fd8 <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_UART_MspInit+0x204>
      Error_Handler();
 8001920:	f7ff fca8 	bl	8001274 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_UART_MspInit+0x278>)
 8001926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x278>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_UART_MspInit+0x278>)
 8001936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800193a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_UART_MspInit+0x278>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <HAL_UART_MspInit+0x278>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_UART_MspInit+0x278>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001960:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001964:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800197a:	2307      	movs	r3, #7
 800197c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <HAL_UART_MspInit+0x280>)
 8001988:	f003 ffe4 	bl	8005954 <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	37f8      	adds	r7, #248	; 0xf8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40004400 	.word	0x40004400
 8001998:	58024400 	.word	0x58024400
 800199c:	58020000 	.word	0x58020000
 80019a0:	58020c00 	.word	0x58020c00
 80019a4:	2400401c 	.word	0x2400401c
 80019a8:	40020010 	.word	0x40020010
 80019ac:	24004094 	.word	0x24004094
 80019b0:	40020028 	.word	0x40020028
 80019b4:	40004800 	.word	0x40004800

080019b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0ba      	sub	sp, #232	; 0xe8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	22c0      	movs	r2, #192	; 0xc0
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f015 fd2d 	bl	8017438 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <HAL_PCD_MspInit+0xec>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d159      	bne.n	8001a9c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80019f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 fae9 	bl	8006fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001a0c:	f7ff fc32 	bl	8001274 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001a10:	f004 faec 	bl	8005fec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_PCD_MspInit+0xf0>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_PCD_MspInit+0xf0>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_PCD_MspInit+0xf0>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a32:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4814      	ldr	r0, [pc, #80]	; (8001aac <HAL_PCD_MspInit+0xf4>)
 8001a5a:	f003 ff7b 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a76:	4619      	mov	r1, r3
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <HAL_PCD_MspInit+0xf4>)
 8001a7a:	f003 ff6b 	bl	8005954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_PCD_MspInit+0xf0>)
 8001a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_PCD_MspInit+0xf0>)
 8001a86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_PCD_MspInit+0xf0>)
 8001a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	37e8      	adds	r7, #232	; 0xe8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40080000 	.word	0x40080000
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	58020000 	.word	0x58020000

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 fb58 	bl	8002194 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ae4:	f00b f9b4 	bl	800ce50 <xTaskGetSchedulerState>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001aee:	f00b ff9b 	bl	800da28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <DMA1_Stream0_IRQHandler+0x10>)
 8001afe:	f001 ffe7 	bl	8003ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2400401c 	.word	0x2400401c

08001b0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <DMA1_Stream1_IRQHandler+0x10>)
 8001b12:	f001 ffdd 	bl	8003ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	24004094 	.word	0x24004094

08001b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART2_IRQHandler+0x10>)
 8001b26:	f007 fa35 	bl	8008f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	24003ef4 	.word	0x24003ef4

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b4e:	f015 fd07 	bl	8017560 <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
  return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0x12>

08001b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00a      	b.n	8001ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8a:	f3af 8000 	nop.w
 8001b8e:	4601      	mov	r1, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf0      	blt.n	8001b8a <_read+0x12>
  }

  return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e009      	b.n	8001bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf1      	blt.n	8001bc4 <_write+0x12>
  }
  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_close>:

int _close(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_isatty>:

int _isatty(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f015 fc6c 	bl	8017560 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	24080000 	.word	0x24080000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	24004630 	.word	0x24004630
 8001cbc:	2400e3e8 	.word	0x2400e3e8

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <SystemInit+0xe4>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cca:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <SystemInit+0xe4>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cd4:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <SystemInit+0xe8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	2b06      	cmp	r3, #6
 8001cde:	d807      	bhi.n	8001cf0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <SystemInit+0xe8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 030f 	bic.w	r3, r3, #15
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <SystemInit+0xe8>)
 8001cea:	f043 0307 	orr.w	r3, r3, #7
 8001cee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <SystemInit+0xec>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <SystemInit+0xec>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <SystemInit+0xec>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <SystemInit+0xec>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4929      	ldr	r1, [pc, #164]	; (8001dac <SystemInit+0xec>)
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <SystemInit+0xf0>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <SystemInit+0xe8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <SystemInit+0xe8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 030f 	bic.w	r3, r3, #15
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <SystemInit+0xe8>)
 8001d24:	f043 0307 	orr.w	r3, r3, #7
 8001d28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <SystemInit+0xec>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <SystemInit+0xec>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <SystemInit+0xec>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <SystemInit+0xec>)
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <SystemInit+0xf4>)
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <SystemInit+0xec>)
 8001d44:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <SystemInit+0xf8>)
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <SystemInit+0xec>)
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <SystemInit+0xfc>)
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <SystemInit+0xec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <SystemInit+0xec>)
 8001d56:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <SystemInit+0xfc>)
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <SystemInit+0xec>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <SystemInit+0xec>)
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <SystemInit+0xfc>)
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <SystemInit+0xec>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <SystemInit+0xec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <SystemInit+0xec>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <SystemInit+0xec>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <SystemInit+0x100>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <SystemInit+0x104>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d8a:	d202      	bcs.n	8001d92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <SystemInit+0x108>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <SystemInit+0x10c>)
 8001d94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	52002000 	.word	0x52002000
 8001dac:	58024400 	.word	0x58024400
 8001db0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001db4:	02020200 	.word	0x02020200
 8001db8:	01ff0000 	.word	0x01ff0000
 8001dbc:	01010280 	.word	0x01010280
 8001dc0:	5c001000 	.word	0x5c001000
 8001dc4:	ffff0000 	.word	0xffff0000
 8001dc8:	51008108 	.word	0x51008108
 8001dcc:	52004000 	.word	0x52004000

08001dd0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001dde:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <cubemx_transport_open+0x28>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f006 fff2 	bl	8008dd0 <HAL_UART_Receive_DMA>
    return true;
 8001dec:	2301      	movs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24004634 	.word	0x24004634

08001dfc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e0a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f007 f82b 	bl	8008e68 <HAL_UART_DMAStop>
    return true;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e30:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d11b      	bne.n	8001e74 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	6978      	ldr	r0, [r7, #20]
 8001e46:	f006 ff43 	bl	8008cd0 <HAL_UART_Transmit_DMA>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e4e:	e002      	b.n	8001e56 <cubemx_transport_write+0x3a>
            osDelay(1);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f009 fbc9 	bl	800b5e8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e56:	7cfb      	ldrb	r3, [r7, #19]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <cubemx_transport_write+0x4a>
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d1f4      	bne.n	8001e50 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <cubemx_transport_write+0x54>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	e002      	b.n	8001e76 <cubemx_transport_write+0x5a>
 8001e70:	2300      	movs	r3, #0
 8001e72:	e000      	b.n	8001e76 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001e74:	2300      	movs	r3, #0
    }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e94:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9a:	b672      	cpsid	i
}
 8001e9c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <cubemx_transport_read+0x190>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d068      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a57      	ldr	r2, [pc, #348]	; (8002014 <cubemx_transport_read+0x194>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d061      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a55      	ldr	r2, [pc, #340]	; (8002018 <cubemx_transport_read+0x198>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d05a      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <cubemx_transport_read+0x19c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d053      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a50      	ldr	r2, [pc, #320]	; (8002020 <cubemx_transport_read+0x1a0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04c      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4d      	ldr	r2, [pc, #308]	; (8002024 <cubemx_transport_read+0x1a4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d045      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a4b      	ldr	r2, [pc, #300]	; (8002028 <cubemx_transport_read+0x1a8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d03e      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a48      	ldr	r2, [pc, #288]	; (800202c <cubemx_transport_read+0x1ac>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d037      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a46      	ldr	r2, [pc, #280]	; (8002030 <cubemx_transport_read+0x1b0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d030      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a43      	ldr	r2, [pc, #268]	; (8002034 <cubemx_transport_read+0x1b4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d029      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a41      	ldr	r2, [pc, #260]	; (8002038 <cubemx_transport_read+0x1b8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d022      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a3e      	ldr	r2, [pc, #248]	; (800203c <cubemx_transport_read+0x1bc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01b      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a3c      	ldr	r2, [pc, #240]	; (8002040 <cubemx_transport_read+0x1c0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d014      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a39      	ldr	r2, [pc, #228]	; (8002044 <cubemx_transport_read+0x1c4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00d      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a37      	ldr	r2, [pc, #220]	; (8002048 <cubemx_transport_read+0x1c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d006      	beq.n	8001f7e <cubemx_transport_read+0xfe>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a34      	ldr	r2, [pc, #208]	; (800204c <cubemx_transport_read+0x1cc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d107      	bne.n	8001f8e <cubemx_transport_read+0x10e>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001f8c:	e006      	b.n	8001f9c <cubemx_transport_read+0x11c>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001f9c:	4a2c      	ldr	r2, [pc, #176]	; (8002050 <cubemx_transport_read+0x1d0>)
 8001f9e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa0:	b662      	cpsie	i
}
 8001fa2:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f009 fb1c 	bl	800b5e8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <cubemx_transport_read+0x1d4>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b26      	ldr	r3, [pc, #152]	; (8002050 <cubemx_transport_read+0x1d0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d104      	bne.n	8001fc6 <cubemx_transport_read+0x146>
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f6ff af6a 	blt.w	8001e9a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001fca:	e011      	b.n	8001ff0 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <cubemx_transport_read+0x1d4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	4920      	ldr	r1, [pc, #128]	; (8002058 <cubemx_transport_read+0x1d8>)
 8001fd8:	5c8a      	ldrb	r2, [r1, r2]
 8001fda:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <cubemx_transport_read+0x1d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <cubemx_transport_read+0x1d4>)
 8001fe8:	6013      	str	r3, [r2, #0]
        wrote++;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <cubemx_transport_read+0x1d4>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <cubemx_transport_read+0x1d0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d003      	beq.n	8002004 <cubemx_transport_read+0x184>
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3e3      	bcc.n	8001fcc <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8002004:	69bb      	ldr	r3, [r7, #24]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40020010 	.word	0x40020010
 8002014:	40020028 	.word	0x40020028
 8002018:	40020040 	.word	0x40020040
 800201c:	40020058 	.word	0x40020058
 8002020:	40020070 	.word	0x40020070
 8002024:	40020088 	.word	0x40020088
 8002028:	400200a0 	.word	0x400200a0
 800202c:	400200b8 	.word	0x400200b8
 8002030:	40020410 	.word	0x40020410
 8002034:	40020428 	.word	0x40020428
 8002038:	40020440 	.word	0x40020440
 800203c:	40020458 	.word	0x40020458
 8002040:	40020470 	.word	0x40020470
 8002044:	40020488 	.word	0x40020488
 8002048:	400204a0 	.word	0x400204a0
 800204c:	400204b8 	.word	0x400204b8
 8002050:	24004e38 	.word	0x24004e38
 8002054:	24004e34 	.word	0x24004e34
 8002058:	24004634 	.word	0x24004634

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002060:	f7ff fe2e 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002066:	490d      	ldr	r1, [pc, #52]	; (800209c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800207c:	4c0a      	ldr	r4, [pc, #40]	; (80020a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800208a:	f015 fa6f 	bl	801756c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7fe fda7 	bl	8000be0 <main>
  bx  lr
 8002092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002094:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002098:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800209c:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 80020a0:	08018ff8 	.word	0x08018ff8
  ldr r2, =_sbss
 80020a4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80020a8:	2400e3e4 	.word	0x2400e3e4

080020ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC3_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b6:	2003      	movs	r0, #3
 80020b8:	f000 f9a0 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020bc:	f004 fdb6 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_Init+0x68>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	4913      	ldr	r1, [pc, #76]	; (800211c <HAL_Init+0x6c>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_Init+0x68>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_Init+0x6c>)
 80020e4:	5cd3      	ldrb	r3, [r2, r3]
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <HAL_Init+0x70>)
 80020f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020f4:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_Init+0x74>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fa:	200f      	movs	r0, #15
 80020fc:	f000 f814 	bl	8002128 <HAL_InitTick>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e002      	b.n	8002110 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800210a:	f7ff fa1d 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	58024400 	.word	0x58024400
 800211c:	08018494 	.word	0x08018494
 8002120:	24000008 	.word	0x24000008
 8002124:	24000004 	.word	0x24000004

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_InitTick+0x60>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e021      	b.n	8002180 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_InitTick+0x64>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_InitTick+0x60>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214a:	fbb3 f3f1 	udiv	r3, r3, r1
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f985 	bl	8002462 <HAL_SYSTICK_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00e      	b.n	8002180 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d80a      	bhi.n	800217e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002168:	2200      	movs	r2, #0
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002170:	f000 f94f 	bl	8002412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002174:	4a06      	ldr	r2, [pc, #24]	; (8002190 <HAL_InitTick+0x68>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	24000010 	.word	0x24000010
 800218c:	24000004 	.word	0x24000004
 8002190:	2400000c 	.word	0x2400000c

08002194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x20>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x24>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_IncTick+0x24>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	24000010 	.word	0x24000010
 80021b8:	24004e3c 	.word	0x24004e3c

080021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_GetTick+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	24004e3c 	.word	0x24004e3c

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff ffee 	bl	80021bc <HAL_GetTick>
 80021e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ec:	d005      	beq.n	80021fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_Delay+0x44>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021fa:	bf00      	nop
 80021fc:	f7ff ffde 	bl	80021bc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d8f7      	bhi.n	80021fc <HAL_Delay+0x28>
  {
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	24000010 	.word	0x24000010

0800221c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetREVID+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0c1b      	lsrs	r3, r3, #16
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	5c001000 	.word	0x5c001000

08002234 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	58000400 	.word	0x58000400

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <__NVIC_SetPriorityGrouping+0x40>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	4313      	orrs	r3, r2
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <__NVIC_SetPriorityGrouping+0x40>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	05fa0000 	.word	0x05fa0000

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023dc:	f7ff ff8e 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff29 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002420:	f7ff ff40 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 8002424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f7ff ff90 	bl	8002350 <NVIC_EncodePriority>
 8002430:	4602      	mov	r2, r0
 8002432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff5f 	bl	80022fc <__NVIC_SetPriority>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff33 	bl	80022c0 <__NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffa4 	bl	80023b8 <SysTick_Config>
 8002470:	4603      	mov	r3, r0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff fe9a 	bl	80021bc <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e316      	b.n	8002ac2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a66      	ldr	r2, [pc, #408]	; (8002634 <HAL_DMA_Init+0x1b8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04a      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_DMA_Init+0x1bc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d045      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a63      	ldr	r2, [pc, #396]	; (800263c <HAL_DMA_Init+0x1c0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d040      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a62      	ldr	r2, [pc, #392]	; (8002640 <HAL_DMA_Init+0x1c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a60      	ldr	r2, [pc, #384]	; (8002644 <HAL_DMA_Init+0x1c8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d036      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a5f      	ldr	r2, [pc, #380]	; (8002648 <HAL_DMA_Init+0x1cc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5d      	ldr	r2, [pc, #372]	; (800264c <HAL_DMA_Init+0x1d0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02c      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5c      	ldr	r2, [pc, #368]	; (8002650 <HAL_DMA_Init+0x1d4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d027      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5a      	ldr	r2, [pc, #360]	; (8002654 <HAL_DMA_Init+0x1d8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a59      	ldr	r2, [pc, #356]	; (8002658 <HAL_DMA_Init+0x1dc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_DMA_Init+0x1e0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a56      	ldr	r2, [pc, #344]	; (8002660 <HAL_DMA_Init+0x1e4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_DMA_Init+0x1e8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_DMA_Init+0x1ec>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a51      	ldr	r2, [pc, #324]	; (800266c <HAL_DMA_Init+0x1f0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_Init+0xb8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a50      	ldr	r2, [pc, #320]	; (8002670 <HAL_DMA_Init+0x1f4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_DMA_Init+0xbc>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_DMA_Init+0xbe>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 813b 	beq.w	80027b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a37      	ldr	r2, [pc, #220]	; (8002634 <HAL_DMA_Init+0x1b8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d04a      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a36      	ldr	r2, [pc, #216]	; (8002638 <HAL_DMA_Init+0x1bc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d045      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a34      	ldr	r2, [pc, #208]	; (800263c <HAL_DMA_Init+0x1c0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d040      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a33      	ldr	r2, [pc, #204]	; (8002640 <HAL_DMA_Init+0x1c4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d03b      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_DMA_Init+0x1c8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d036      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a30      	ldr	r2, [pc, #192]	; (8002648 <HAL_DMA_Init+0x1cc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d031      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2e      	ldr	r2, [pc, #184]	; (800264c <HAL_DMA_Init+0x1d0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d02c      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <HAL_DMA_Init+0x1d4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d027      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <HAL_DMA_Init+0x1d8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d022      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_DMA_Init+0x1dc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d01d      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a28      	ldr	r2, [pc, #160]	; (800265c <HAL_DMA_Init+0x1e0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d018      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a27      	ldr	r2, [pc, #156]	; (8002660 <HAL_DMA_Init+0x1e4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a25      	ldr	r2, [pc, #148]	; (8002664 <HAL_DMA_Init+0x1e8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00e      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_DMA_Init+0x1ec>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a22      	ldr	r2, [pc, #136]	; (800266c <HAL_DMA_Init+0x1f0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_DMA_Init+0x174>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a21      	ldr	r2, [pc, #132]	; (8002670 <HAL_DMA_Init+0x1f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d108      	bne.n	8002602 <HAL_DMA_Init+0x186>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <HAL_DMA_Init+0x196>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002612:	e02f      	b.n	8002674 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002614:	f7ff fdd2 	bl	80021bc <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d928      	bls.n	8002674 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2203      	movs	r2, #3
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e246      	b.n	8002ac2 <HAL_DMA_Init+0x646>
 8002634:	40020010 	.word	0x40020010
 8002638:	40020028 	.word	0x40020028
 800263c:	40020040 	.word	0x40020040
 8002640:	40020058 	.word	0x40020058
 8002644:	40020070 	.word	0x40020070
 8002648:	40020088 	.word	0x40020088
 800264c:	400200a0 	.word	0x400200a0
 8002650:	400200b8 	.word	0x400200b8
 8002654:	40020410 	.word	0x40020410
 8002658:	40020428 	.word	0x40020428
 800265c:	40020440 	.word	0x40020440
 8002660:	40020458 	.word	0x40020458
 8002664:	40020470 	.word	0x40020470
 8002668:	40020488 	.word	0x40020488
 800266c:	400204a0 	.word	0x400204a0
 8002670:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1c8      	bne.n	8002614 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4b83      	ldr	r3, [pc, #524]	; (800289c <HAL_DMA_Init+0x420>)
 800268e:	4013      	ands	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800269a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4313      	orrs	r3, r2
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026d8:	4b71      	ldr	r3, [pc, #452]	; (80028a0 <HAL_DMA_Init+0x424>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <HAL_DMA_Init+0x428>)
 80026de:	4013      	ands	r3, r2
 80026e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e4:	d328      	bcc.n	8002738 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b28      	cmp	r3, #40	; 0x28
 80026ec:	d903      	bls.n	80026f6 <HAL_DMA_Init+0x27a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b2e      	cmp	r3, #46	; 0x2e
 80026f4:	d917      	bls.n	8002726 <HAL_DMA_Init+0x2aa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b3e      	cmp	r3, #62	; 0x3e
 80026fc:	d903      	bls.n	8002706 <HAL_DMA_Init+0x28a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b42      	cmp	r3, #66	; 0x42
 8002704:	d90f      	bls.n	8002726 <HAL_DMA_Init+0x2aa>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b46      	cmp	r3, #70	; 0x46
 800270c:	d903      	bls.n	8002716 <HAL_DMA_Init+0x29a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b48      	cmp	r3, #72	; 0x48
 8002714:	d907      	bls.n	8002726 <HAL_DMA_Init+0x2aa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b4e      	cmp	r3, #78	; 0x4e
 800271c:	d905      	bls.n	800272a <HAL_DMA_Init+0x2ae>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b52      	cmp	r3, #82	; 0x52
 8002724:	d801      	bhi.n	800272a <HAL_DMA_Init+0x2ae>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_DMA_Init+0x2b0>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0307 	bic.w	r3, r3, #7
 800274e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2b04      	cmp	r3, #4
 8002760:	d117      	bne.n	8002792 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f002 fb3f 	bl	8004df8 <DMA_CheckFifoParam>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e197      	b.n	8002ac2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f002 fa7a 	bl	8004c94 <DMA_CalcBaseAndBitshift>
 80027a0:	4603      	mov	r3, r0
 80027a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	223f      	movs	r2, #63	; 0x3f
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e0cd      	b.n	8002952 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a3b      	ldr	r2, [pc, #236]	; (80028a8 <HAL_DMA_Init+0x42c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <HAL_DMA_Init+0x38a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a39      	ldr	r2, [pc, #228]	; (80028ac <HAL_DMA_Init+0x430>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01d      	beq.n	8002806 <HAL_DMA_Init+0x38a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_DMA_Init+0x434>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d018      	beq.n	8002806 <HAL_DMA_Init+0x38a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a36      	ldr	r2, [pc, #216]	; (80028b4 <HAL_DMA_Init+0x438>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_DMA_Init+0x38a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <HAL_DMA_Init+0x43c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_Init+0x38a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_DMA_Init+0x440>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_DMA_Init+0x38a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a32      	ldr	r2, [pc, #200]	; (80028c0 <HAL_DMA_Init+0x444>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_DMA_Init+0x38a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <HAL_DMA_Init+0x448>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_DMA_Init+0x38e>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_DMA_Init+0x390>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8097 	beq.w	8002940 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_DMA_Init+0x42c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d021      	beq.n	8002860 <HAL_DMA_Init+0x3e4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_DMA_Init+0x430>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01c      	beq.n	8002860 <HAL_DMA_Init+0x3e4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_DMA_Init+0x434>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d017      	beq.n	8002860 <HAL_DMA_Init+0x3e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_DMA_Init+0x438>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d012      	beq.n	8002860 <HAL_DMA_Init+0x3e4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_DMA_Init+0x43c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00d      	beq.n	8002860 <HAL_DMA_Init+0x3e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <HAL_DMA_Init+0x440>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d008      	beq.n	8002860 <HAL_DMA_Init+0x3e4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_DMA_Init+0x444>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <HAL_DMA_Init+0x3e4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_DMA_Init+0x448>)
 800285e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_DMA_Init+0x44c>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d021      	beq.n	80028cc <HAL_DMA_Init+0x450>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d102      	bne.n	8002896 <HAL_DMA_Init+0x41a>
 8002890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002894:	e01b      	b.n	80028ce <HAL_DMA_Init+0x452>
 8002896:	2300      	movs	r3, #0
 8002898:	e019      	b.n	80028ce <HAL_DMA_Init+0x452>
 800289a:	bf00      	nop
 800289c:	fe10803f 	.word	0xfe10803f
 80028a0:	5c001000 	.word	0x5c001000
 80028a4:	ffff0000 	.word	0xffff0000
 80028a8:	58025408 	.word	0x58025408
 80028ac:	5802541c 	.word	0x5802541c
 80028b0:	58025430 	.word	0x58025430
 80028b4:	58025444 	.word	0x58025444
 80028b8:	58025458 	.word	0x58025458
 80028bc:	5802546c 	.word	0x5802546c
 80028c0:	58025480 	.word	0x58025480
 80028c4:	58025494 	.word	0x58025494
 80028c8:	fffe000f 	.word	0xfffe000f
 80028cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4b6e      	ldr	r3, [pc, #440]	; (8002acc <HAL_DMA_Init+0x650>)
 8002914:	4413      	add	r3, r2
 8002916:	4a6e      	ldr	r2, [pc, #440]	; (8002ad0 <HAL_DMA_Init+0x654>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	009a      	lsls	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f002 f9b5 	bl	8004c94 <DMA_CalcBaseAndBitshift>
 800292a:	4603      	mov	r3, r0
 800292c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e008      	b.n	8002952 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2203      	movs	r2, #3
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0b7      	b.n	8002ac2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5f      	ldr	r2, [pc, #380]	; (8002ad4 <HAL_DMA_Init+0x658>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d072      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5d      	ldr	r2, [pc, #372]	; (8002ad8 <HAL_DMA_Init+0x65c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d06d      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a5c      	ldr	r2, [pc, #368]	; (8002adc <HAL_DMA_Init+0x660>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d068      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5a      	ldr	r2, [pc, #360]	; (8002ae0 <HAL_DMA_Init+0x664>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d063      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a59      	ldr	r2, [pc, #356]	; (8002ae4 <HAL_DMA_Init+0x668>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d05e      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a57      	ldr	r2, [pc, #348]	; (8002ae8 <HAL_DMA_Init+0x66c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d059      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_DMA_Init+0x670>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d054      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_DMA_Init+0x674>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04f      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a53      	ldr	r2, [pc, #332]	; (8002af4 <HAL_DMA_Init+0x678>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d04a      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_DMA_Init+0x67c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d045      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a50      	ldr	r2, [pc, #320]	; (8002afc <HAL_DMA_Init+0x680>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d040      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4e      	ldr	r2, [pc, #312]	; (8002b00 <HAL_DMA_Init+0x684>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d03b      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4d      	ldr	r2, [pc, #308]	; (8002b04 <HAL_DMA_Init+0x688>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d036      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_DMA_Init+0x68c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d031      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4a      	ldr	r2, [pc, #296]	; (8002b0c <HAL_DMA_Init+0x690>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d02c      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_DMA_Init+0x694>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d027      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <HAL_DMA_Init+0x698>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a45      	ldr	r2, [pc, #276]	; (8002b18 <HAL_DMA_Init+0x69c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01d      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a44      	ldr	r2, [pc, #272]	; (8002b1c <HAL_DMA_Init+0x6a0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d018      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_DMA_Init+0x6a4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a41      	ldr	r2, [pc, #260]	; (8002b24 <HAL_DMA_Init+0x6a8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00e      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a3f      	ldr	r2, [pc, #252]	; (8002b28 <HAL_DMA_Init+0x6ac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a3e      	ldr	r2, [pc, #248]	; (8002b2c <HAL_DMA_Init+0x6b0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_DMA_Init+0x5c6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3c      	ldr	r2, [pc, #240]	; (8002b30 <HAL_DMA_Init+0x6b4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_DMA_Init+0x5ca>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_Init+0x5cc>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d032      	beq.n	8002ab2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f002 fa4f 	bl	8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d102      	bne.n	8002a60 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a74:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d010      	beq.n	8002aa0 <HAL_DMA_Init+0x624>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d80c      	bhi.n	8002aa0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f002 facc 	bl	8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	e008      	b.n	8002ab2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	a7fdabf8 	.word	0xa7fdabf8
 8002ad0:	cccccccd 	.word	0xcccccccd
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	40020028 	.word	0x40020028
 8002adc:	40020040 	.word	0x40020040
 8002ae0:	40020058 	.word	0x40020058
 8002ae4:	40020070 	.word	0x40020070
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	400200a0 	.word	0x400200a0
 8002af0:	400200b8 	.word	0x400200b8
 8002af4:	40020410 	.word	0x40020410
 8002af8:	40020428 	.word	0x40020428
 8002afc:	40020440 	.word	0x40020440
 8002b00:	40020458 	.word	0x40020458
 8002b04:	40020470 	.word	0x40020470
 8002b08:	40020488 	.word	0x40020488
 8002b0c:	400204a0 	.word	0x400204a0
 8002b10:	400204b8 	.word	0x400204b8
 8002b14:	58025408 	.word	0x58025408
 8002b18:	5802541c 	.word	0x5802541c
 8002b1c:	58025430 	.word	0x58025430
 8002b20:	58025444 	.word	0x58025444
 8002b24:	58025458 	.word	0x58025458
 8002b28:	5802546c 	.word	0x5802546c
 8002b2c:	58025480 	.word	0x58025480
 8002b30:	58025494 	.word	0x58025494

08002b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e226      	b.n	8002f9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_DMA_Start_IT+0x2a>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e21f      	b.n	8002f9e <HAL_DMA_Start_IT+0x46a>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	f040 820a 	bne.w	8002f88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a68      	ldr	r2, [pc, #416]	; (8002d28 <HAL_DMA_Start_IT+0x1f4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d04a      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a66      	ldr	r2, [pc, #408]	; (8002d2c <HAL_DMA_Start_IT+0x1f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d045      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a65      	ldr	r2, [pc, #404]	; (8002d30 <HAL_DMA_Start_IT+0x1fc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d040      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <HAL_DMA_Start_IT+0x200>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d03b      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a62      	ldr	r2, [pc, #392]	; (8002d38 <HAL_DMA_Start_IT+0x204>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d036      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a60      	ldr	r2, [pc, #384]	; (8002d3c <HAL_DMA_Start_IT+0x208>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d031      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5f      	ldr	r2, [pc, #380]	; (8002d40 <HAL_DMA_Start_IT+0x20c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d02c      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a5d      	ldr	r2, [pc, #372]	; (8002d44 <HAL_DMA_Start_IT+0x210>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d027      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5c      	ldr	r2, [pc, #368]	; (8002d48 <HAL_DMA_Start_IT+0x214>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a5a      	ldr	r2, [pc, #360]	; (8002d4c <HAL_DMA_Start_IT+0x218>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01d      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a59      	ldr	r2, [pc, #356]	; (8002d50 <HAL_DMA_Start_IT+0x21c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d018      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a57      	ldr	r2, [pc, #348]	; (8002d54 <HAL_DMA_Start_IT+0x220>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a56      	ldr	r2, [pc, #344]	; (8002d58 <HAL_DMA_Start_IT+0x224>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <HAL_DMA_Start_IT+0x228>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a53      	ldr	r2, [pc, #332]	; (8002d60 <HAL_DMA_Start_IT+0x22c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_DMA_Start_IT+0xee>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a51      	ldr	r2, [pc, #324]	; (8002d64 <HAL_DMA_Start_IT+0x230>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d108      	bne.n	8002c34 <HAL_DMA_Start_IT+0x100>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <HAL_DMA_Start_IT+0x110>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f001 fe76 	bl	800493c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_DMA_Start_IT+0x1f4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a33      	ldr	r2, [pc, #204]	; (8002d2c <HAL_DMA_Start_IT+0x1f8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a31      	ldr	r2, [pc, #196]	; (8002d30 <HAL_DMA_Start_IT+0x1fc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_DMA_Start_IT+0x200>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <HAL_DMA_Start_IT+0x204>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2d      	ldr	r2, [pc, #180]	; (8002d3c <HAL_DMA_Start_IT+0x208>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2b      	ldr	r2, [pc, #172]	; (8002d40 <HAL_DMA_Start_IT+0x20c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <HAL_DMA_Start_IT+0x210>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_DMA_Start_IT+0x214>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <HAL_DMA_Start_IT+0x218>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <HAL_DMA_Start_IT+0x21c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <HAL_DMA_Start_IT+0x220>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_DMA_Start_IT+0x224>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_DMA_Start_IT+0x228>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <HAL_DMA_Start_IT+0x22c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x1bc>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <HAL_DMA_Start_IT+0x230>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Start_IT+0x1c0>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_DMA_Start_IT+0x1c2>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d036      	beq.n	8002d68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 021e 	bic.w	r2, r3, #30
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0216 	orr.w	r2, r2, #22
 8002d0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03e      	beq.n	8002d94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0208 	orr.w	r2, r2, #8
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e035      	b.n	8002d94 <HAL_DMA_Start_IT+0x260>
 8002d28:	40020010 	.word	0x40020010
 8002d2c:	40020028 	.word	0x40020028
 8002d30:	40020040 	.word	0x40020040
 8002d34:	40020058 	.word	0x40020058
 8002d38:	40020070 	.word	0x40020070
 8002d3c:	40020088 	.word	0x40020088
 8002d40:	400200a0 	.word	0x400200a0
 8002d44:	400200b8 	.word	0x400200b8
 8002d48:	40020410 	.word	0x40020410
 8002d4c:	40020428 	.word	0x40020428
 8002d50:	40020440 	.word	0x40020440
 8002d54:	40020458 	.word	0x40020458
 8002d58:	40020470 	.word	0x40020470
 8002d5c:	40020488 	.word	0x40020488
 8002d60:	400204a0 	.word	0x400204a0
 8002d64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 020e 	bic.w	r2, r3, #14
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 020a 	orr.w	r2, r2, #10
 8002d7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0204 	orr.w	r2, r2, #4
 8002d92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a83      	ldr	r2, [pc, #524]	; (8002fa8 <HAL_DMA_Start_IT+0x474>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d072      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a82      	ldr	r2, [pc, #520]	; (8002fac <HAL_DMA_Start_IT+0x478>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d06d      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a80      	ldr	r2, [pc, #512]	; (8002fb0 <HAL_DMA_Start_IT+0x47c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d068      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7f      	ldr	r2, [pc, #508]	; (8002fb4 <HAL_DMA_Start_IT+0x480>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d063      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7d      	ldr	r2, [pc, #500]	; (8002fb8 <HAL_DMA_Start_IT+0x484>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d05e      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7c      	ldr	r2, [pc, #496]	; (8002fbc <HAL_DMA_Start_IT+0x488>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d059      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <HAL_DMA_Start_IT+0x48c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d054      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a79      	ldr	r2, [pc, #484]	; (8002fc4 <HAL_DMA_Start_IT+0x490>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d04f      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a77      	ldr	r2, [pc, #476]	; (8002fc8 <HAL_DMA_Start_IT+0x494>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d04a      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a76      	ldr	r2, [pc, #472]	; (8002fcc <HAL_DMA_Start_IT+0x498>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d045      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a74      	ldr	r2, [pc, #464]	; (8002fd0 <HAL_DMA_Start_IT+0x49c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d040      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a73      	ldr	r2, [pc, #460]	; (8002fd4 <HAL_DMA_Start_IT+0x4a0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d03b      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a71      	ldr	r2, [pc, #452]	; (8002fd8 <HAL_DMA_Start_IT+0x4a4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d036      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a70      	ldr	r2, [pc, #448]	; (8002fdc <HAL_DMA_Start_IT+0x4a8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d031      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_DMA_Start_IT+0x4ac>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02c      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6d      	ldr	r2, [pc, #436]	; (8002fe4 <HAL_DMA_Start_IT+0x4b0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d027      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6b      	ldr	r2, [pc, #428]	; (8002fe8 <HAL_DMA_Start_IT+0x4b4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d022      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_DMA_Start_IT+0x4b8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d01d      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a68      	ldr	r2, [pc, #416]	; (8002ff0 <HAL_DMA_Start_IT+0x4bc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d018      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a67      	ldr	r2, [pc, #412]	; (8002ff4 <HAL_DMA_Start_IT+0x4c0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_DMA_Start_IT+0x4c4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00e      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a64      	ldr	r2, [pc, #400]	; (8002ffc <HAL_DMA_Start_IT+0x4c8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a62      	ldr	r2, [pc, #392]	; (8003000 <HAL_DMA_Start_IT+0x4cc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <HAL_DMA_Start_IT+0x350>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a61      	ldr	r2, [pc, #388]	; (8003004 <HAL_DMA_Start_IT+0x4d0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d101      	bne.n	8002e88 <HAL_DMA_Start_IT+0x354>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_DMA_Start_IT+0x356>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01a      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eaa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <HAL_DMA_Start_IT+0x474>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a36      	ldr	r2, [pc, #216]	; (8002fac <HAL_DMA_Start_IT+0x478>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a34      	ldr	r2, [pc, #208]	; (8002fb0 <HAL_DMA_Start_IT+0x47c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <HAL_DMA_Start_IT+0x480>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a31      	ldr	r2, [pc, #196]	; (8002fb8 <HAL_DMA_Start_IT+0x484>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a30      	ldr	r2, [pc, #192]	; (8002fbc <HAL_DMA_Start_IT+0x488>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	; (8002fc0 <HAL_DMA_Start_IT+0x48c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <HAL_DMA_Start_IT+0x490>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <HAL_DMA_Start_IT+0x494>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_DMA_Start_IT+0x498>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_DMA_Start_IT+0x49c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <HAL_DMA_Start_IT+0x4a0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <HAL_DMA_Start_IT+0x4a4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <HAL_DMA_Start_IT+0x4a8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_DMA_Start_IT+0x4ac>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_Start_IT+0x430>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <HAL_DMA_Start_IT+0x4b0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <HAL_DMA_Start_IT+0x442>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e012      	b.n	8002f9c <HAL_DMA_Start_IT+0x468>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e009      	b.n	8002f9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40020010 	.word	0x40020010
 8002fac:	40020028 	.word	0x40020028
 8002fb0:	40020040 	.word	0x40020040
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	40020070 	.word	0x40020070
 8002fbc:	40020088 	.word	0x40020088
 8002fc0:	400200a0 	.word	0x400200a0
 8002fc4:	400200b8 	.word	0x400200b8
 8002fc8:	40020410 	.word	0x40020410
 8002fcc:	40020428 	.word	0x40020428
 8002fd0:	40020440 	.word	0x40020440
 8002fd4:	40020458 	.word	0x40020458
 8002fd8:	40020470 	.word	0x40020470
 8002fdc:	40020488 	.word	0x40020488
 8002fe0:	400204a0 	.word	0x400204a0
 8002fe4:	400204b8 	.word	0x400204b8
 8002fe8:	58025408 	.word	0x58025408
 8002fec:	5802541c 	.word	0x5802541c
 8002ff0:	58025430 	.word	0x58025430
 8002ff4:	58025444 	.word	0x58025444
 8002ff8:	58025458 	.word	0x58025458
 8002ffc:	5802546c 	.word	0x5802546c
 8003000:	58025480 	.word	0x58025480
 8003004:	58025494 	.word	0x58025494

08003008 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff f8d4 	bl	80021bc <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e2dc      	b.n	80035da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d008      	beq.n	800303e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e2cd      	b.n	80035da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a76      	ldr	r2, [pc, #472]	; (800321c <HAL_DMA_Abort+0x214>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d04a      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a74      	ldr	r2, [pc, #464]	; (8003220 <HAL_DMA_Abort+0x218>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d045      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a73      	ldr	r2, [pc, #460]	; (8003224 <HAL_DMA_Abort+0x21c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d040      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a71      	ldr	r2, [pc, #452]	; (8003228 <HAL_DMA_Abort+0x220>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d03b      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a70      	ldr	r2, [pc, #448]	; (800322c <HAL_DMA_Abort+0x224>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d036      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <HAL_DMA_Abort+0x228>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d031      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6d      	ldr	r2, [pc, #436]	; (8003234 <HAL_DMA_Abort+0x22c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d02c      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6b      	ldr	r2, [pc, #428]	; (8003238 <HAL_DMA_Abort+0x230>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d027      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_DMA_Abort+0x234>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d022      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a68      	ldr	r2, [pc, #416]	; (8003240 <HAL_DMA_Abort+0x238>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01d      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a67      	ldr	r2, [pc, #412]	; (8003244 <HAL_DMA_Abort+0x23c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d018      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_DMA_Abort+0x240>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a64      	ldr	r2, [pc, #400]	; (800324c <HAL_DMA_Abort+0x244>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00e      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a62      	ldr	r2, [pc, #392]	; (8003250 <HAL_DMA_Abort+0x248>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_DMA_Abort+0x24c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_DMA_Abort+0xd6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5f      	ldr	r2, [pc, #380]	; (8003258 <HAL_DMA_Abort+0x250>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_DMA_Abort+0xda>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_DMA_Abort+0xdc>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 021e 	bic.w	r2, r2, #30
 80030f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003106:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e00a      	b.n	8003126 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 020e 	bic.w	r2, r2, #14
 800311e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3c      	ldr	r2, [pc, #240]	; (800321c <HAL_DMA_Abort+0x214>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d072      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a3a      	ldr	r2, [pc, #232]	; (8003220 <HAL_DMA_Abort+0x218>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d06d      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a39      	ldr	r2, [pc, #228]	; (8003224 <HAL_DMA_Abort+0x21c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d068      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a37      	ldr	r2, [pc, #220]	; (8003228 <HAL_DMA_Abort+0x220>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d063      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a36      	ldr	r2, [pc, #216]	; (800322c <HAL_DMA_Abort+0x224>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d05e      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a34      	ldr	r2, [pc, #208]	; (8003230 <HAL_DMA_Abort+0x228>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d059      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_DMA_Abort+0x22c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d054      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a31      	ldr	r2, [pc, #196]	; (8003238 <HAL_DMA_Abort+0x230>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04f      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a30      	ldr	r2, [pc, #192]	; (800323c <HAL_DMA_Abort+0x234>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2e      	ldr	r2, [pc, #184]	; (8003240 <HAL_DMA_Abort+0x238>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_DMA_Abort+0x23c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <HAL_DMA_Abort+0x240>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2a      	ldr	r2, [pc, #168]	; (800324c <HAL_DMA_Abort+0x244>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a28      	ldr	r2, [pc, #160]	; (8003250 <HAL_DMA_Abort+0x248>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a27      	ldr	r2, [pc, #156]	; (8003254 <HAL_DMA_Abort+0x24c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <HAL_DMA_Abort+0x250>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a24      	ldr	r2, [pc, #144]	; (800325c <HAL_DMA_Abort+0x254>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a22      	ldr	r2, [pc, #136]	; (8003260 <HAL_DMA_Abort+0x258>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a21      	ldr	r2, [pc, #132]	; (8003264 <HAL_DMA_Abort+0x25c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <HAL_DMA_Abort+0x260>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_DMA_Abort+0x264>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <HAL_DMA_Abort+0x268>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <HAL_DMA_Abort+0x26c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_Abort+0x20e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a19      	ldr	r2, [pc, #100]	; (8003278 <HAL_DMA_Abort+0x270>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d132      	bne.n	800327c <HAL_DMA_Abort+0x274>
 8003216:	2301      	movs	r3, #1
 8003218:	e031      	b.n	800327e <HAL_DMA_Abort+0x276>
 800321a:	bf00      	nop
 800321c:	40020010 	.word	0x40020010
 8003220:	40020028 	.word	0x40020028
 8003224:	40020040 	.word	0x40020040
 8003228:	40020058 	.word	0x40020058
 800322c:	40020070 	.word	0x40020070
 8003230:	40020088 	.word	0x40020088
 8003234:	400200a0 	.word	0x400200a0
 8003238:	400200b8 	.word	0x400200b8
 800323c:	40020410 	.word	0x40020410
 8003240:	40020428 	.word	0x40020428
 8003244:	40020440 	.word	0x40020440
 8003248:	40020458 	.word	0x40020458
 800324c:	40020470 	.word	0x40020470
 8003250:	40020488 	.word	0x40020488
 8003254:	400204a0 	.word	0x400204a0
 8003258:	400204b8 	.word	0x400204b8
 800325c:	58025408 	.word	0x58025408
 8003260:	5802541c 	.word	0x5802541c
 8003264:	58025430 	.word	0x58025430
 8003268:	58025444 	.word	0x58025444
 800326c:	58025458 	.word	0x58025458
 8003270:	5802546c 	.word	0x5802546c
 8003274:	58025480 	.word	0x58025480
 8003278:	58025494 	.word	0x58025494
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003290:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6d      	ldr	r2, [pc, #436]	; (800344c <HAL_DMA_Abort+0x444>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d04a      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6b      	ldr	r2, [pc, #428]	; (8003450 <HAL_DMA_Abort+0x448>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d045      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6a      	ldr	r2, [pc, #424]	; (8003454 <HAL_DMA_Abort+0x44c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d040      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a68      	ldr	r2, [pc, #416]	; (8003458 <HAL_DMA_Abort+0x450>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d03b      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a67      	ldr	r2, [pc, #412]	; (800345c <HAL_DMA_Abort+0x454>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d036      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a65      	ldr	r2, [pc, #404]	; (8003460 <HAL_DMA_Abort+0x458>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d031      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a64      	ldr	r2, [pc, #400]	; (8003464 <HAL_DMA_Abort+0x45c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d02c      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a62      	ldr	r2, [pc, #392]	; (8003468 <HAL_DMA_Abort+0x460>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d027      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a61      	ldr	r2, [pc, #388]	; (800346c <HAL_DMA_Abort+0x464>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5f      	ldr	r2, [pc, #380]	; (8003470 <HAL_DMA_Abort+0x468>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01d      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5e      	ldr	r2, [pc, #376]	; (8003474 <HAL_DMA_Abort+0x46c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5c      	ldr	r2, [pc, #368]	; (8003478 <HAL_DMA_Abort+0x470>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_DMA_Abort+0x474>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a59      	ldr	r2, [pc, #356]	; (8003480 <HAL_DMA_Abort+0x478>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_DMA_Abort+0x47c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_DMA_Abort+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a56      	ldr	r2, [pc, #344]	; (8003488 <HAL_DMA_Abort+0x480>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <HAL_DMA_Abort+0x33c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e007      	b.n	8003354 <HAL_DMA_Abort+0x34c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003354:	e013      	b.n	800337e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003356:	f7fe ff31 	bl	80021bc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b05      	cmp	r3, #5
 8003362:	d90c      	bls.n	800337e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2203      	movs	r2, #3
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e12d      	b.n	80035da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e5      	bne.n	8003356 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <HAL_DMA_Abort+0x444>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d04a      	beq.n	800342a <HAL_DMA_Abort+0x422>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2d      	ldr	r2, [pc, #180]	; (8003450 <HAL_DMA_Abort+0x448>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d045      	beq.n	800342a <HAL_DMA_Abort+0x422>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <HAL_DMA_Abort+0x44c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d040      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <HAL_DMA_Abort+0x450>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d03b      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a29      	ldr	r2, [pc, #164]	; (800345c <HAL_DMA_Abort+0x454>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d036      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <HAL_DMA_Abort+0x458>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_DMA_Abort+0x45c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_DMA_Abort+0x460>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a23      	ldr	r2, [pc, #140]	; (800346c <HAL_DMA_Abort+0x464>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a21      	ldr	r2, [pc, #132]	; (8003470 <HAL_DMA_Abort+0x468>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a20      	ldr	r2, [pc, #128]	; (8003474 <HAL_DMA_Abort+0x46c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d018      	beq.n	800342a <HAL_DMA_Abort+0x422>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_DMA_Abort+0x470>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_DMA_Abort+0x422>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_DMA_Abort+0x474>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_DMA_Abort+0x422>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_DMA_Abort+0x478>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_DMA_Abort+0x422>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <HAL_DMA_Abort+0x47c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_DMA_Abort+0x422>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_DMA_Abort+0x480>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_DMA_Abort+0x426>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_DMA_Abort+0x428>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02b      	beq.n	800348c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	223f      	movs	r2, #63	; 0x3f
 8003444:	409a      	lsls	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	e02a      	b.n	80034a2 <HAL_DMA_Abort+0x49a>
 800344c:	40020010 	.word	0x40020010
 8003450:	40020028 	.word	0x40020028
 8003454:	40020040 	.word	0x40020040
 8003458:	40020058 	.word	0x40020058
 800345c:	40020070 	.word	0x40020070
 8003460:	40020088 	.word	0x40020088
 8003464:	400200a0 	.word	0x400200a0
 8003468:	400200b8 	.word	0x400200b8
 800346c:	40020410 	.word	0x40020410
 8003470:	40020428 	.word	0x40020428
 8003474:	40020440 	.word	0x40020440
 8003478:	40020458 	.word	0x40020458
 800347c:	40020470 	.word	0x40020470
 8003480:	40020488 	.word	0x40020488
 8003484:	400204a0 	.word	0x400204a0
 8003488:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2201      	movs	r2, #1
 800349c:	409a      	lsls	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4f      	ldr	r2, [pc, #316]	; (80035e4 <HAL_DMA_Abort+0x5dc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d072      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a4d      	ldr	r2, [pc, #308]	; (80035e8 <HAL_DMA_Abort+0x5e0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d06d      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a4c      	ldr	r2, [pc, #304]	; (80035ec <HAL_DMA_Abort+0x5e4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d068      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_DMA_Abort+0x5e8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d063      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a49      	ldr	r2, [pc, #292]	; (80035f4 <HAL_DMA_Abort+0x5ec>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d05e      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a47      	ldr	r2, [pc, #284]	; (80035f8 <HAL_DMA_Abort+0x5f0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d059      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a46      	ldr	r2, [pc, #280]	; (80035fc <HAL_DMA_Abort+0x5f4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d054      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a44      	ldr	r2, [pc, #272]	; (8003600 <HAL_DMA_Abort+0x5f8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d04f      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a43      	ldr	r2, [pc, #268]	; (8003604 <HAL_DMA_Abort+0x5fc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d04a      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a41      	ldr	r2, [pc, #260]	; (8003608 <HAL_DMA_Abort+0x600>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d045      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a40      	ldr	r2, [pc, #256]	; (800360c <HAL_DMA_Abort+0x604>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d040      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3e      	ldr	r2, [pc, #248]	; (8003610 <HAL_DMA_Abort+0x608>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d03b      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a3d      	ldr	r2, [pc, #244]	; (8003614 <HAL_DMA_Abort+0x60c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d036      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <HAL_DMA_Abort+0x610>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d031      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3a      	ldr	r2, [pc, #232]	; (800361c <HAL_DMA_Abort+0x614>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d02c      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a38      	ldr	r2, [pc, #224]	; (8003620 <HAL_DMA_Abort+0x618>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d027      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a37      	ldr	r2, [pc, #220]	; (8003624 <HAL_DMA_Abort+0x61c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d022      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a35      	ldr	r2, [pc, #212]	; (8003628 <HAL_DMA_Abort+0x620>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a34      	ldr	r2, [pc, #208]	; (800362c <HAL_DMA_Abort+0x624>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d018      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a32      	ldr	r2, [pc, #200]	; (8003630 <HAL_DMA_Abort+0x628>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_DMA_Abort+0x62c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <HAL_DMA_Abort+0x630>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2e      	ldr	r2, [pc, #184]	; (800363c <HAL_DMA_Abort+0x634>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_DMA_Abort+0x58a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <HAL_DMA_Abort+0x638>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_DMA_Abort+0x58e>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_DMA_Abort+0x590>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d015      	beq.n	80035c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8
 8003624:	58025408 	.word	0x58025408
 8003628:	5802541c 	.word	0x5802541c
 800362c:	58025430 	.word	0x58025430
 8003630:	58025444 	.word	0x58025444
 8003634:	58025458 	.word	0x58025458
 8003638:	5802546c 	.word	0x5802546c
 800363c:	58025480 	.word	0x58025480
 8003640:	58025494 	.word	0x58025494

08003644 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e237      	b.n	8003ac6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d004      	beq.n	800366c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e22c      	b.n	8003ac6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5c      	ldr	r2, [pc, #368]	; (80037e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04a      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5b      	ldr	r2, [pc, #364]	; (80037e8 <HAL_DMA_Abort_IT+0x1a4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d045      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a59      	ldr	r2, [pc, #356]	; (80037ec <HAL_DMA_Abort_IT+0x1a8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d040      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d03b      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a56      	ldr	r2, [pc, #344]	; (80037f4 <HAL_DMA_Abort_IT+0x1b0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d036      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a55      	ldr	r2, [pc, #340]	; (80037f8 <HAL_DMA_Abort_IT+0x1b4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d031      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a53      	ldr	r2, [pc, #332]	; (80037fc <HAL_DMA_Abort_IT+0x1b8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02c      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a52      	ldr	r2, [pc, #328]	; (8003800 <HAL_DMA_Abort_IT+0x1bc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d027      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a50      	ldr	r2, [pc, #320]	; (8003804 <HAL_DMA_Abort_IT+0x1c0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a4f      	ldr	r2, [pc, #316]	; (8003808 <HAL_DMA_Abort_IT+0x1c4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4d      	ldr	r2, [pc, #308]	; (800380c <HAL_DMA_Abort_IT+0x1c8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4c      	ldr	r2, [pc, #304]	; (8003810 <HAL_DMA_Abort_IT+0x1cc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <HAL_DMA_Abort_IT+0x1d0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a49      	ldr	r2, [pc, #292]	; (8003818 <HAL_DMA_Abort_IT+0x1d4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_DMA_Abort_IT+0x1d8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a46      	ldr	r2, [pc, #280]	; (8003820 <HAL_DMA_Abort_IT+0x1dc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Abort_IT+0xcc>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_DMA_Abort_IT+0xce>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8086 	beq.w	8003824 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2204      	movs	r2, #4
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2f      	ldr	r2, [pc, #188]	; (80037e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d04a      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <HAL_DMA_Abort_IT+0x1a4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d045      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_DMA_Abort_IT+0x1a8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d040      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d03b      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <HAL_DMA_Abort_IT+0x1b0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d036      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_DMA_Abort_IT+0x1b4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d031      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_DMA_Abort_IT+0x1b8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02c      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_DMA_Abort_IT+0x1bc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d027      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a23      	ldr	r2, [pc, #140]	; (8003804 <HAL_DMA_Abort_IT+0x1c0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d022      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_DMA_Abort_IT+0x1c4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d01d      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a20      	ldr	r2, [pc, #128]	; (800380c <HAL_DMA_Abort_IT+0x1c8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d018      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_DMA_Abort_IT+0x1cc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_DMA_Abort_IT+0x1d0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00e      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_DMA_Abort_IT+0x1d4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_DMA_Abort_IT+0x1d8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x17c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_DMA_Abort_IT+0x1dc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <HAL_DMA_Abort_IT+0x18e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e178      	b.n	8003ac4 <HAL_DMA_Abort_IT+0x480>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e16f      	b.n	8003ac4 <HAL_DMA_Abort_IT+0x480>
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 020e 	bic.w	r2, r2, #14
 8003832:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6c      	ldr	r2, [pc, #432]	; (80039ec <HAL_DMA_Abort_IT+0x3a8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6b      	ldr	r2, [pc, #428]	; (80039f0 <HAL_DMA_Abort_IT+0x3ac>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d045      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a69      	ldr	r2, [pc, #420]	; (80039f4 <HAL_DMA_Abort_IT+0x3b0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d040      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a68      	ldr	r2, [pc, #416]	; (80039f8 <HAL_DMA_Abort_IT+0x3b4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a66      	ldr	r2, [pc, #408]	; (80039fc <HAL_DMA_Abort_IT+0x3b8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d036      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_DMA_Abort_IT+0x3bc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a63      	ldr	r2, [pc, #396]	; (8003a04 <HAL_DMA_Abort_IT+0x3c0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02c      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a62      	ldr	r2, [pc, #392]	; (8003a08 <HAL_DMA_Abort_IT+0x3c4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d027      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a60      	ldr	r2, [pc, #384]	; (8003a0c <HAL_DMA_Abort_IT+0x3c8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5f      	ldr	r2, [pc, #380]	; (8003a10 <HAL_DMA_Abort_IT+0x3cc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5d      	ldr	r2, [pc, #372]	; (8003a14 <HAL_DMA_Abort_IT+0x3d0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5c      	ldr	r2, [pc, #368]	; (8003a18 <HAL_DMA_Abort_IT+0x3d4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5a      	ldr	r2, [pc, #360]	; (8003a1c <HAL_DMA_Abort_IT+0x3d8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a59      	ldr	r2, [pc, #356]	; (8003a20 <HAL_DMA_Abort_IT+0x3dc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <HAL_DMA_Abort_IT+0x3e0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x290>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a56      	ldr	r2, [pc, #344]	; (8003a28 <HAL_DMA_Abort_IT+0x3e4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d108      	bne.n	80038e6 <HAL_DMA_Abort_IT+0x2a2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e007      	b.n	80038f6 <HAL_DMA_Abort_IT+0x2b2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a3c      	ldr	r2, [pc, #240]	; (80039ec <HAL_DMA_Abort_IT+0x3a8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d072      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3a      	ldr	r2, [pc, #232]	; (80039f0 <HAL_DMA_Abort_IT+0x3ac>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d06d      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <HAL_DMA_Abort_IT+0x3b0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d068      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a37      	ldr	r2, [pc, #220]	; (80039f8 <HAL_DMA_Abort_IT+0x3b4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d063      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a36      	ldr	r2, [pc, #216]	; (80039fc <HAL_DMA_Abort_IT+0x3b8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d05e      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a34      	ldr	r2, [pc, #208]	; (8003a00 <HAL_DMA_Abort_IT+0x3bc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d059      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a33      	ldr	r2, [pc, #204]	; (8003a04 <HAL_DMA_Abort_IT+0x3c0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d054      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a31      	ldr	r2, [pc, #196]	; (8003a08 <HAL_DMA_Abort_IT+0x3c4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04f      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a30      	ldr	r2, [pc, #192]	; (8003a0c <HAL_DMA_Abort_IT+0x3c8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04a      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2e      	ldr	r2, [pc, #184]	; (8003a10 <HAL_DMA_Abort_IT+0x3cc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <HAL_DMA_Abort_IT+0x3d0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d040      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2b      	ldr	r2, [pc, #172]	; (8003a18 <HAL_DMA_Abort_IT+0x3d4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d03b      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_DMA_Abort_IT+0x3d8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d036      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <HAL_DMA_Abort_IT+0x3dc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <HAL_DMA_Abort_IT+0x3e0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d02c      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <HAL_DMA_Abort_IT+0x3e4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d027      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <HAL_DMA_Abort_IT+0x3e8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a22      	ldr	r2, [pc, #136]	; (8003a30 <HAL_DMA_Abort_IT+0x3ec>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <HAL_DMA_Abort_IT+0x3f0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_DMA_Abort_IT+0x3f4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <HAL_DMA_Abort_IT+0x3f8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <HAL_DMA_Abort_IT+0x3fc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_DMA_Abort_IT+0x400>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x3a2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <HAL_DMA_Abort_IT+0x404>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d132      	bne.n	8003a4c <HAL_DMA_Abort_IT+0x408>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e031      	b.n	8003a4e <HAL_DMA_Abort_IT+0x40a>
 80039ea:	bf00      	nop
 80039ec:	40020010 	.word	0x40020010
 80039f0:	40020028 	.word	0x40020028
 80039f4:	40020040 	.word	0x40020040
 80039f8:	40020058 	.word	0x40020058
 80039fc:	40020070 	.word	0x40020070
 8003a00:	40020088 	.word	0x40020088
 8003a04:	400200a0 	.word	0x400200a0
 8003a08:	400200b8 	.word	0x400200b8
 8003a0c:	40020410 	.word	0x40020410
 8003a10:	40020428 	.word	0x40020428
 8003a14:	40020440 	.word	0x40020440
 8003a18:	40020458 	.word	0x40020458
 8003a1c:	40020470 	.word	0x40020470
 8003a20:	40020488 	.word	0x40020488
 8003a24:	400204a0 	.word	0x400204a0
 8003a28:	400204b8 	.word	0x400204b8
 8003a2c:	58025408 	.word	0x58025408
 8003a30:	5802541c 	.word	0x5802541c
 8003a34:	58025430 	.word	0x58025430
 8003a38:	58025444 	.word	0x58025444
 8003a3c:	58025458 	.word	0x58025458
 8003a40:	5802546c 	.word	0x5802546c
 8003a44:	58025480 	.word	0x58025480
 8003a48:	58025494 	.word	0x58025494
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d028      	beq.n	8003aa4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2201      	movs	r2, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aa2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop

08003ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003adc:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <HAL_DMA_IRQHandler+0x1ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a67      	ldr	r2, [pc, #412]	; (8003c80 <HAL_DMA_IRQHandler+0x1b0>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0a9b      	lsrs	r3, r3, #10
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5f      	ldr	r2, [pc, #380]	; (8003c84 <HAL_DMA_IRQHandler+0x1b4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d04a      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	; (8003c88 <HAL_DMA_IRQHandler+0x1b8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d045      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_DMA_IRQHandler+0x1bc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d040      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a5a      	ldr	r2, [pc, #360]	; (8003c90 <HAL_DMA_IRQHandler+0x1c0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d03b      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <HAL_DMA_IRQHandler+0x1c4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d036      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <HAL_DMA_IRQHandler+0x1c8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d031      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a56      	ldr	r2, [pc, #344]	; (8003c9c <HAL_DMA_IRQHandler+0x1cc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d02c      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <HAL_DMA_IRQHandler+0x1d0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d027      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a53      	ldr	r2, [pc, #332]	; (8003ca4 <HAL_DMA_IRQHandler+0x1d4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a51      	ldr	r2, [pc, #324]	; (8003ca8 <HAL_DMA_IRQHandler+0x1d8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a50      	ldr	r2, [pc, #320]	; (8003cac <HAL_DMA_IRQHandler+0x1dc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4e      	ldr	r2, [pc, #312]	; (8003cb0 <HAL_DMA_IRQHandler+0x1e0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4d      	ldr	r2, [pc, #308]	; (8003cb4 <HAL_DMA_IRQHandler+0x1e4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_DMA_IRQHandler+0x1e8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_DMA_IRQHandler+0x1ec>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xd2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <HAL_DMA_IRQHandler+0x1f0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DMA_IRQHandler+0xd6>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_DMA_IRQHandler+0xd8>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 842b 	beq.w	8004404 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80a2 	beq.w	8003d08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a2e      	ldr	r2, [pc, #184]	; (8003c84 <HAL_DMA_IRQHandler+0x1b4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d04a      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <HAL_DMA_IRQHandler+0x1b8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d045      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <HAL_DMA_IRQHandler+0x1bc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d040      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_DMA_IRQHandler+0x1c0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d03b      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <HAL_DMA_IRQHandler+0x1c4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d036      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <HAL_DMA_IRQHandler+0x1c8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d031      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <HAL_DMA_IRQHandler+0x1cc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02c      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <HAL_DMA_IRQHandler+0x1d0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d027      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <HAL_DMA_IRQHandler+0x1d4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d022      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <HAL_DMA_IRQHandler+0x1d8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d01d      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_DMA_IRQHandler+0x1dc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d018      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_DMA_IRQHandler+0x1e0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_DMA_IRQHandler+0x1e4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00e      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_DMA_IRQHandler+0x1e8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_DMA_IRQHandler+0x1ec>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x194>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_DMA_IRQHandler+0x1f0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d12f      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x1f4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e02e      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x208>
 8003c7a:	bf00      	nop
 8003c7c:	24000004 	.word	0x24000004
 8003c80:	1b4e81b5 	.word	0x1b4e81b5
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0204 	bic.w	r2, r2, #4
 8003cea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f043 0201 	orr.w	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	fa22 f303 	lsr.w	r3, r2, r3
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d06e      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a69      	ldr	r2, [pc, #420]	; (8003ec8 <HAL_DMA_IRQHandler+0x3f8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d04a      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a67      	ldr	r2, [pc, #412]	; (8003ecc <HAL_DMA_IRQHandler+0x3fc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d045      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a66      	ldr	r2, [pc, #408]	; (8003ed0 <HAL_DMA_IRQHandler+0x400>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d040      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a64      	ldr	r2, [pc, #400]	; (8003ed4 <HAL_DMA_IRQHandler+0x404>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d03b      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a63      	ldr	r2, [pc, #396]	; (8003ed8 <HAL_DMA_IRQHandler+0x408>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d036      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a61      	ldr	r2, [pc, #388]	; (8003edc <HAL_DMA_IRQHandler+0x40c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d031      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a60      	ldr	r2, [pc, #384]	; (8003ee0 <HAL_DMA_IRQHandler+0x410>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d02c      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a5e      	ldr	r2, [pc, #376]	; (8003ee4 <HAL_DMA_IRQHandler+0x414>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d027      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a5d      	ldr	r2, [pc, #372]	; (8003ee8 <HAL_DMA_IRQHandler+0x418>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5b      	ldr	r2, [pc, #364]	; (8003eec <HAL_DMA_IRQHandler+0x41c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a5a      	ldr	r2, [pc, #360]	; (8003ef0 <HAL_DMA_IRQHandler+0x420>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_DMA_IRQHandler+0x424>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a57      	ldr	r2, [pc, #348]	; (8003ef8 <HAL_DMA_IRQHandler+0x428>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a55      	ldr	r2, [pc, #340]	; (8003efc <HAL_DMA_IRQHandler+0x42c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a54      	ldr	r2, [pc, #336]	; (8003f00 <HAL_DMA_IRQHandler+0x430>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x2ee>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_DMA_IRQHandler+0x434>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x304>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e003      	b.n	8003ddc <HAL_DMA_IRQHandler+0x30c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f043 0202 	orr.w	r2, r3, #2
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2204      	movs	r2, #4
 8003e06:	409a      	lsls	r2, r3
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 808f 	beq.w	8003f30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <HAL_DMA_IRQHandler+0x3f8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d04a      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <HAL_DMA_IRQHandler+0x3fc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d045      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <HAL_DMA_IRQHandler+0x400>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d040      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <HAL_DMA_IRQHandler+0x404>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d03b      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <HAL_DMA_IRQHandler+0x408>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d036      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a24      	ldr	r2, [pc, #144]	; (8003edc <HAL_DMA_IRQHandler+0x40c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d031      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a23      	ldr	r2, [pc, #140]	; (8003ee0 <HAL_DMA_IRQHandler+0x410>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d02c      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <HAL_DMA_IRQHandler+0x414>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d027      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <HAL_DMA_IRQHandler+0x418>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_DMA_IRQHandler+0x41c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01d      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_DMA_IRQHandler+0x420>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d018      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <HAL_DMA_IRQHandler+0x424>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_DMA_IRQHandler+0x428>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_DMA_IRQHandler+0x42c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_DMA_IRQHandler+0x430>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x3e2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <HAL_DMA_IRQHandler+0x434>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d12a      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x438>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf14      	ite	ne
 8003ec0:	2301      	movne	r3, #1
 8003ec2:	2300      	moveq	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e023      	b.n	8003f10 <HAL_DMA_IRQHandler+0x440>
 8003ec8:	40020010 	.word	0x40020010
 8003ecc:	40020028 	.word	0x40020028
 8003ed0:	40020040 	.word	0x40020040
 8003ed4:	40020058 	.word	0x40020058
 8003ed8:	40020070 	.word	0x40020070
 8003edc:	40020088 	.word	0x40020088
 8003ee0:	400200a0 	.word	0x400200a0
 8003ee4:	400200b8 	.word	0x400200b8
 8003ee8:	40020410 	.word	0x40020410
 8003eec:	40020428 	.word	0x40020428
 8003ef0:	40020440 	.word	0x40020440
 8003ef4:	40020458 	.word	0x40020458
 8003ef8:	40020470 	.word	0x40020470
 8003efc:	40020488 	.word	0x40020488
 8003f00:	400204a0 	.word	0x400204a0
 8003f04:	400204b8 	.word	0x400204b8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00d      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0204 	orr.w	r2, r3, #4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2210      	movs	r2, #16
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80a6 	beq.w	8004092 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a85      	ldr	r2, [pc, #532]	; (8004160 <HAL_DMA_IRQHandler+0x690>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d04a      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a83      	ldr	r2, [pc, #524]	; (8004164 <HAL_DMA_IRQHandler+0x694>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d045      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a82      	ldr	r2, [pc, #520]	; (8004168 <HAL_DMA_IRQHandler+0x698>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d040      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a80      	ldr	r2, [pc, #512]	; (800416c <HAL_DMA_IRQHandler+0x69c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d03b      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7f      	ldr	r2, [pc, #508]	; (8004170 <HAL_DMA_IRQHandler+0x6a0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d036      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a7d      	ldr	r2, [pc, #500]	; (8004174 <HAL_DMA_IRQHandler+0x6a4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d031      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7c      	ldr	r2, [pc, #496]	; (8004178 <HAL_DMA_IRQHandler+0x6a8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d02c      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7a      	ldr	r2, [pc, #488]	; (800417c <HAL_DMA_IRQHandler+0x6ac>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d027      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a79      	ldr	r2, [pc, #484]	; (8004180 <HAL_DMA_IRQHandler+0x6b0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a77      	ldr	r2, [pc, #476]	; (8004184 <HAL_DMA_IRQHandler+0x6b4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a76      	ldr	r2, [pc, #472]	; (8004188 <HAL_DMA_IRQHandler+0x6b8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a74      	ldr	r2, [pc, #464]	; (800418c <HAL_DMA_IRQHandler+0x6bc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_DMA_IRQHandler+0x6c0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_DMA_IRQHandler+0x6c4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a70      	ldr	r2, [pc, #448]	; (8004198 <HAL_DMA_IRQHandler+0x6c8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x516>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_DMA_IRQHandler+0x6cc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10a      	bne.n	8003ffc <HAL_DMA_IRQHandler+0x52c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e009      	b.n	8004010 <HAL_DMA_IRQHandler+0x540>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03e      	beq.n	8004092 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	2210      	movs	r2, #16
 800401e:	409a      	lsls	r2, r3
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d018      	beq.n	8004064 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d108      	bne.n	8004052 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d024      	beq.n	8004092 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	e01f      	b.n	8004092 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01b      	beq.n	8004092 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
 8004062:	e016      	b.n	8004092 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0208 	bic.w	r2, r2, #8
 8004080:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2220      	movs	r2, #32
 800409c:	409a      	lsls	r2, r3
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8110 	beq.w	80042c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2c      	ldr	r2, [pc, #176]	; (8004160 <HAL_DMA_IRQHandler+0x690>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04a      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2b      	ldr	r2, [pc, #172]	; (8004164 <HAL_DMA_IRQHandler+0x694>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d045      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a29      	ldr	r2, [pc, #164]	; (8004168 <HAL_DMA_IRQHandler+0x698>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a28      	ldr	r2, [pc, #160]	; (800416c <HAL_DMA_IRQHandler+0x69c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d03b      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a26      	ldr	r2, [pc, #152]	; (8004170 <HAL_DMA_IRQHandler+0x6a0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d036      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a25      	ldr	r2, [pc, #148]	; (8004174 <HAL_DMA_IRQHandler+0x6a4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d031      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a23      	ldr	r2, [pc, #140]	; (8004178 <HAL_DMA_IRQHandler+0x6a8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02c      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <HAL_DMA_IRQHandler+0x6ac>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a20      	ldr	r2, [pc, #128]	; (8004180 <HAL_DMA_IRQHandler+0x6b0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <HAL_DMA_IRQHandler+0x6b4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01d      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <HAL_DMA_IRQHandler+0x6b8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <HAL_DMA_IRQHandler+0x6bc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1a      	ldr	r2, [pc, #104]	; (8004190 <HAL_DMA_IRQHandler+0x6c0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a19      	ldr	r2, [pc, #100]	; (8004194 <HAL_DMA_IRQHandler+0x6c4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a17      	ldr	r2, [pc, #92]	; (8004198 <HAL_DMA_IRQHandler+0x6c8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_DMA_IRQHandler+0x678>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a16      	ldr	r2, [pc, #88]	; (800419c <HAL_DMA_IRQHandler+0x6cc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d12b      	bne.n	80041a0 <HAL_DMA_IRQHandler+0x6d0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e02a      	b.n	80041b4 <HAL_DMA_IRQHandler+0x6e4>
 800415e:	bf00      	nop
 8004160:	40020010 	.word	0x40020010
 8004164:	40020028 	.word	0x40020028
 8004168:	40020040 	.word	0x40020040
 800416c:	40020058 	.word	0x40020058
 8004170:	40020070 	.word	0x40020070
 8004174:	40020088 	.word	0x40020088
 8004178:	400200a0 	.word	0x400200a0
 800417c:	400200b8 	.word	0x400200b8
 8004180:	40020410 	.word	0x40020410
 8004184:	40020428 	.word	0x40020428
 8004188:	40020440 	.word	0x40020440
 800418c:	40020458 	.word	0x40020458
 8004190:	40020470 	.word	0x40020470
 8004194:	40020488 	.word	0x40020488
 8004198:	400204a0 	.word	0x400204a0
 800419c:	400204b8 	.word	0x400204b8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8087 	beq.w	80042c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	2220      	movs	r2, #32
 80041c4:	409a      	lsls	r2, r3
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d139      	bne.n	800424a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0216 	bic.w	r2, r2, #22
 80041e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_DMA_IRQHandler+0x736>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	223f      	movs	r2, #63	; 0x3f
 8004220:	409a      	lsls	r2, r3
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 834a 	beq.w	80048d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
          }
          return;
 8004248:	e344      	b.n	80048d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d018      	beq.n	800428a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	2b00      	cmp	r3, #0
 800426c:	d02c      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
 8004276:	e027      	b.n	80042c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
 8004288:	e01e      	b.n	80042c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10f      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0210 	bic.w	r2, r2, #16
 80042a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8306 	beq.w	80048de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8088 	beq.w	80043f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2204      	movs	r2, #4
 80042e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a7a      	ldr	r2, [pc, #488]	; (80044d8 <HAL_DMA_IRQHandler+0xa08>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d04a      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a79      	ldr	r2, [pc, #484]	; (80044dc <HAL_DMA_IRQHandler+0xa0c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d045      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a77      	ldr	r2, [pc, #476]	; (80044e0 <HAL_DMA_IRQHandler+0xa10>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d040      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a76      	ldr	r2, [pc, #472]	; (80044e4 <HAL_DMA_IRQHandler+0xa14>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d03b      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a74      	ldr	r2, [pc, #464]	; (80044e8 <HAL_DMA_IRQHandler+0xa18>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d036      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a73      	ldr	r2, [pc, #460]	; (80044ec <HAL_DMA_IRQHandler+0xa1c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d031      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a71      	ldr	r2, [pc, #452]	; (80044f0 <HAL_DMA_IRQHandler+0xa20>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02c      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a70      	ldr	r2, [pc, #448]	; (80044f4 <HAL_DMA_IRQHandler+0xa24>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_DMA_IRQHandler+0xa28>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6d      	ldr	r2, [pc, #436]	; (80044fc <HAL_DMA_IRQHandler+0xa2c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <HAL_DMA_IRQHandler+0xa30>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6a      	ldr	r2, [pc, #424]	; (8004504 <HAL_DMA_IRQHandler+0xa34>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a68      	ldr	r2, [pc, #416]	; (8004508 <HAL_DMA_IRQHandler+0xa38>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a67      	ldr	r2, [pc, #412]	; (800450c <HAL_DMA_IRQHandler+0xa3c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a65      	ldr	r2, [pc, #404]	; (8004510 <HAL_DMA_IRQHandler+0xa40>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_DMA_IRQHandler+0x8b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a64      	ldr	r2, [pc, #400]	; (8004514 <HAL_DMA_IRQHandler+0xa44>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <HAL_DMA_IRQHandler+0x8ca>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e007      	b.n	80043aa <HAL_DMA_IRQHandler+0x8da>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d307      	bcc.n	80043c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f2      	bne.n	80043aa <HAL_DMA_IRQHandler+0x8da>
 80043c4:	e000      	b.n	80043c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2203      	movs	r2, #3
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043de:	e003      	b.n	80043e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8272 	beq.w	80048de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	4798      	blx	r3
 8004402:	e26c      	b.n	80048de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a43      	ldr	r2, [pc, #268]	; (8004518 <HAL_DMA_IRQHandler+0xa48>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d022      	beq.n	8004454 <HAL_DMA_IRQHandler+0x984>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a42      	ldr	r2, [pc, #264]	; (800451c <HAL_DMA_IRQHandler+0xa4c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d01d      	beq.n	8004454 <HAL_DMA_IRQHandler+0x984>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a40      	ldr	r2, [pc, #256]	; (8004520 <HAL_DMA_IRQHandler+0xa50>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_DMA_IRQHandler+0x984>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3f      	ldr	r2, [pc, #252]	; (8004524 <HAL_DMA_IRQHandler+0xa54>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <HAL_DMA_IRQHandler+0x984>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3d      	ldr	r2, [pc, #244]	; (8004528 <HAL_DMA_IRQHandler+0xa58>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_DMA_IRQHandler+0x984>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3c      	ldr	r2, [pc, #240]	; (800452c <HAL_DMA_IRQHandler+0xa5c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_DMA_IRQHandler+0x984>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3a      	ldr	r2, [pc, #232]	; (8004530 <HAL_DMA_IRQHandler+0xa60>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_DMA_IRQHandler+0x984>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a39      	ldr	r2, [pc, #228]	; (8004534 <HAL_DMA_IRQHandler+0xa64>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_DMA_IRQHandler+0x988>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_DMA_IRQHandler+0x98a>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 823f 	beq.w	80048de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2204      	movs	r2, #4
 8004472:	409a      	lsls	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80cd 	beq.w	8004618 <HAL_DMA_IRQHandler+0xb48>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80c7 	beq.w	8004618 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2204      	movs	r2, #4
 8004494:	409a      	lsls	r2, r3
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d049      	beq.n	8004538 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8210 	beq.w	80048d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c0:	e20a      	b.n	80048d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8206 	beq.w	80048d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d4:	e200      	b.n	80048d8 <HAL_DMA_IRQHandler+0xe08>
 80044d6:	bf00      	nop
 80044d8:	40020010 	.word	0x40020010
 80044dc:	40020028 	.word	0x40020028
 80044e0:	40020040 	.word	0x40020040
 80044e4:	40020058 	.word	0x40020058
 80044e8:	40020070 	.word	0x40020070
 80044ec:	40020088 	.word	0x40020088
 80044f0:	400200a0 	.word	0x400200a0
 80044f4:	400200b8 	.word	0x400200b8
 80044f8:	40020410 	.word	0x40020410
 80044fc:	40020428 	.word	0x40020428
 8004500:	40020440 	.word	0x40020440
 8004504:	40020458 	.word	0x40020458
 8004508:	40020470 	.word	0x40020470
 800450c:	40020488 	.word	0x40020488
 8004510:	400204a0 	.word	0x400204a0
 8004514:	400204b8 	.word	0x400204b8
 8004518:	58025408 	.word	0x58025408
 800451c:	5802541c 	.word	0x5802541c
 8004520:	58025430 	.word	0x58025430
 8004524:	58025444 	.word	0x58025444
 8004528:	58025458 	.word	0x58025458
 800452c:	5802546c 	.word	0x5802546c
 8004530:	58025480 	.word	0x58025480
 8004534:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d160      	bne.n	8004604 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7f      	ldr	r2, [pc, #508]	; (8004744 <HAL_DMA_IRQHandler+0xc74>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04a      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7d      	ldr	r2, [pc, #500]	; (8004748 <HAL_DMA_IRQHandler+0xc78>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d045      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7c      	ldr	r2, [pc, #496]	; (800474c <HAL_DMA_IRQHandler+0xc7c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d040      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a7a      	ldr	r2, [pc, #488]	; (8004750 <HAL_DMA_IRQHandler+0xc80>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d03b      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a79      	ldr	r2, [pc, #484]	; (8004754 <HAL_DMA_IRQHandler+0xc84>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d036      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a77      	ldr	r2, [pc, #476]	; (8004758 <HAL_DMA_IRQHandler+0xc88>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d031      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a76      	ldr	r2, [pc, #472]	; (800475c <HAL_DMA_IRQHandler+0xc8c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d02c      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a74      	ldr	r2, [pc, #464]	; (8004760 <HAL_DMA_IRQHandler+0xc90>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d027      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a73      	ldr	r2, [pc, #460]	; (8004764 <HAL_DMA_IRQHandler+0xc94>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a71      	ldr	r2, [pc, #452]	; (8004768 <HAL_DMA_IRQHandler+0xc98>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01d      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a70      	ldr	r2, [pc, #448]	; (800476c <HAL_DMA_IRQHandler+0xc9c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d018      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_DMA_IRQHandler+0xca0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6d      	ldr	r2, [pc, #436]	; (8004774 <HAL_DMA_IRQHandler+0xca4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a6b      	ldr	r2, [pc, #428]	; (8004778 <HAL_DMA_IRQHandler+0xca8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6a      	ldr	r2, [pc, #424]	; (800477c <HAL_DMA_IRQHandler+0xcac>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xb12>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a68      	ldr	r2, [pc, #416]	; (8004780 <HAL_DMA_IRQHandler+0xcb0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <HAL_DMA_IRQHandler+0xb24>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0208 	bic.w	r2, r2, #8
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e007      	b.n	8004604 <HAL_DMA_IRQHandler+0xb34>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0204 	bic.w	r2, r2, #4
 8004602:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8165 	beq.w	80048d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004616:	e15f      	b.n	80048d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	2202      	movs	r2, #2
 8004622:	409a      	lsls	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80c5 	beq.w	80047b8 <HAL_DMA_IRQHandler+0xce8>
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80bf 	beq.w	80047b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2202      	movs	r2, #2
 8004644:	409a      	lsls	r2, r3
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d018      	beq.n	8004686 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 813a 	beq.w	80048dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004670:	e134      	b.n	80048dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8130 	beq.w	80048dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004684:	e12a      	b.n	80048dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 8089 	bne.w	80047a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <HAL_DMA_IRQHandler+0xc74>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d04a      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a29      	ldr	r2, [pc, #164]	; (8004748 <HAL_DMA_IRQHandler+0xc78>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d045      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a28      	ldr	r2, [pc, #160]	; (800474c <HAL_DMA_IRQHandler+0xc7c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d040      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <HAL_DMA_IRQHandler+0xc80>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d03b      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <HAL_DMA_IRQHandler+0xc84>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d036      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a23      	ldr	r2, [pc, #140]	; (8004758 <HAL_DMA_IRQHandler+0xc88>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d031      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <HAL_DMA_IRQHandler+0xc8c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d02c      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_DMA_IRQHandler+0xc90>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d027      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <HAL_DMA_IRQHandler+0xc94>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d022      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_DMA_IRQHandler+0xc98>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01d      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_DMA_IRQHandler+0xc9c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d018      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_DMA_IRQHandler+0xca0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a19      	ldr	r2, [pc, #100]	; (8004774 <HAL_DMA_IRQHandler+0xca4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_DMA_IRQHandler+0xca8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a16      	ldr	r2, [pc, #88]	; (800477c <HAL_DMA_IRQHandler+0xcac>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_DMA_IRQHandler+0xc62>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a14      	ldr	r2, [pc, #80]	; (8004780 <HAL_DMA_IRQHandler+0xcb0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d128      	bne.n	8004784 <HAL_DMA_IRQHandler+0xcb4>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0214 	bic.w	r2, r2, #20
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e027      	b.n	8004794 <HAL_DMA_IRQHandler+0xcc4>
 8004744:	40020010 	.word	0x40020010
 8004748:	40020028 	.word	0x40020028
 800474c:	40020040 	.word	0x40020040
 8004750:	40020058 	.word	0x40020058
 8004754:	40020070 	.word	0x40020070
 8004758:	40020088 	.word	0x40020088
 800475c:	400200a0 	.word	0x400200a0
 8004760:	400200b8 	.word	0x400200b8
 8004764:	40020410 	.word	0x40020410
 8004768:	40020428 	.word	0x40020428
 800476c:	40020440 	.word	0x40020440
 8004770:	40020458 	.word	0x40020458
 8004774:	40020470 	.word	0x40020470
 8004778:	40020488 	.word	0x40020488
 800477c:	400204a0 	.word	0x400204a0
 8004780:	400204b8 	.word	0x400204b8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 020a 	bic.w	r2, r2, #10
 8004792:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8097 	beq.w	80048dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b6:	e091      	b.n	80048dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2208      	movs	r2, #8
 80047c2:	409a      	lsls	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8088 	beq.w	80048de <HAL_DMA_IRQHandler+0xe0e>
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8082 	beq.w	80048de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a41      	ldr	r2, [pc, #260]	; (80048e4 <HAL_DMA_IRQHandler+0xe14>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d04a      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <HAL_DMA_IRQHandler+0xe18>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d045      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3e      	ldr	r2, [pc, #248]	; (80048ec <HAL_DMA_IRQHandler+0xe1c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d040      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3c      	ldr	r2, [pc, #240]	; (80048f0 <HAL_DMA_IRQHandler+0xe20>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d03b      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a3b      	ldr	r2, [pc, #236]	; (80048f4 <HAL_DMA_IRQHandler+0xe24>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d036      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a39      	ldr	r2, [pc, #228]	; (80048f8 <HAL_DMA_IRQHandler+0xe28>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d031      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a38      	ldr	r2, [pc, #224]	; (80048fc <HAL_DMA_IRQHandler+0xe2c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d02c      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a36      	ldr	r2, [pc, #216]	; (8004900 <HAL_DMA_IRQHandler+0xe30>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d027      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a35      	ldr	r2, [pc, #212]	; (8004904 <HAL_DMA_IRQHandler+0xe34>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d022      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a33      	ldr	r2, [pc, #204]	; (8004908 <HAL_DMA_IRQHandler+0xe38>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01d      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a32      	ldr	r2, [pc, #200]	; (800490c <HAL_DMA_IRQHandler+0xe3c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d018      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a30      	ldr	r2, [pc, #192]	; (8004910 <HAL_DMA_IRQHandler+0xe40>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <HAL_DMA_IRQHandler+0xe44>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2d      	ldr	r2, [pc, #180]	; (8004918 <HAL_DMA_IRQHandler+0xe48>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2c      	ldr	r2, [pc, #176]	; (800491c <HAL_DMA_IRQHandler+0xe4c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_DMA_IRQHandler+0xdaa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <HAL_DMA_IRQHandler+0xe50>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d108      	bne.n	800488c <HAL_DMA_IRQHandler+0xdbc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 021c 	bic.w	r2, r2, #28
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e007      	b.n	800489c <HAL_DMA_IRQHandler+0xdcc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 020e 	bic.w	r2, r2, #14
 800489a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
 80048d2:	e004      	b.n	80048de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048d4:	bf00      	nop
 80048d6:	e002      	b.n	80048de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d8:	bf00      	nop
 80048da:	e000      	b.n	80048de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048de:	3728      	adds	r7, #40	; 0x28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40020010 	.word	0x40020010
 80048e8:	40020028 	.word	0x40020028
 80048ec:	40020040 	.word	0x40020040
 80048f0:	40020058 	.word	0x40020058
 80048f4:	40020070 	.word	0x40020070
 80048f8:	40020088 	.word	0x40020088
 80048fc:	400200a0 	.word	0x400200a0
 8004900:	400200b8 	.word	0x400200b8
 8004904:	40020410 	.word	0x40020410
 8004908:	40020428 	.word	0x40020428
 800490c:	40020440 	.word	0x40020440
 8004910:	40020458 	.word	0x40020458
 8004914:	40020470 	.word	0x40020470
 8004918:	40020488 	.word	0x40020488
 800491c:	400204a0 	.word	0x400204a0
 8004920:	400204b8 	.word	0x400204b8

08004924 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a7f      	ldr	r2, [pc, #508]	; (8004b58 <DMA_SetConfig+0x21c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d072      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a7d      	ldr	r2, [pc, #500]	; (8004b5c <DMA_SetConfig+0x220>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d06d      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a7c      	ldr	r2, [pc, #496]	; (8004b60 <DMA_SetConfig+0x224>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d068      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a7a      	ldr	r2, [pc, #488]	; (8004b64 <DMA_SetConfig+0x228>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d063      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a79      	ldr	r2, [pc, #484]	; (8004b68 <DMA_SetConfig+0x22c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d05e      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a77      	ldr	r2, [pc, #476]	; (8004b6c <DMA_SetConfig+0x230>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d059      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a76      	ldr	r2, [pc, #472]	; (8004b70 <DMA_SetConfig+0x234>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d054      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a74      	ldr	r2, [pc, #464]	; (8004b74 <DMA_SetConfig+0x238>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d04f      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a73      	ldr	r2, [pc, #460]	; (8004b78 <DMA_SetConfig+0x23c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d04a      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a71      	ldr	r2, [pc, #452]	; (8004b7c <DMA_SetConfig+0x240>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d045      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a70      	ldr	r2, [pc, #448]	; (8004b80 <DMA_SetConfig+0x244>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d040      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6e      	ldr	r2, [pc, #440]	; (8004b84 <DMA_SetConfig+0x248>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d03b      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6d      	ldr	r2, [pc, #436]	; (8004b88 <DMA_SetConfig+0x24c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d036      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a6b      	ldr	r2, [pc, #428]	; (8004b8c <DMA_SetConfig+0x250>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6a      	ldr	r2, [pc, #424]	; (8004b90 <DMA_SetConfig+0x254>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d02c      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a68      	ldr	r2, [pc, #416]	; (8004b94 <DMA_SetConfig+0x258>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d027      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a67      	ldr	r2, [pc, #412]	; (8004b98 <DMA_SetConfig+0x25c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a65      	ldr	r2, [pc, #404]	; (8004b9c <DMA_SetConfig+0x260>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01d      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a64      	ldr	r2, [pc, #400]	; (8004ba0 <DMA_SetConfig+0x264>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a62      	ldr	r2, [pc, #392]	; (8004ba4 <DMA_SetConfig+0x268>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a61      	ldr	r2, [pc, #388]	; (8004ba8 <DMA_SetConfig+0x26c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5f      	ldr	r2, [pc, #380]	; (8004bac <DMA_SetConfig+0x270>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5e      	ldr	r2, [pc, #376]	; (8004bb0 <DMA_SetConfig+0x274>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <DMA_SetConfig+0x10a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a5c      	ldr	r2, [pc, #368]	; (8004bb4 <DMA_SetConfig+0x278>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d101      	bne.n	8004a4a <DMA_SetConfig+0x10e>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <DMA_SetConfig+0x110>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00d      	beq.n	8004a6c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a58:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d004      	beq.n	8004a6c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a6a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a39      	ldr	r2, [pc, #228]	; (8004b58 <DMA_SetConfig+0x21c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d04a      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <DMA_SetConfig+0x220>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d045      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a36      	ldr	r2, [pc, #216]	; (8004b60 <DMA_SetConfig+0x224>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d040      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a35      	ldr	r2, [pc, #212]	; (8004b64 <DMA_SetConfig+0x228>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d03b      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <DMA_SetConfig+0x22c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d036      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a32      	ldr	r2, [pc, #200]	; (8004b6c <DMA_SetConfig+0x230>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d031      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <DMA_SetConfig+0x234>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d02c      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <DMA_SetConfig+0x238>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d027      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	; (8004b78 <DMA_SetConfig+0x23c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <DMA_SetConfig+0x240>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d01d      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <DMA_SetConfig+0x244>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <DMA_SetConfig+0x248>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <DMA_SetConfig+0x24c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <DMA_SetConfig+0x250>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <DMA_SetConfig+0x254>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <DMA_SetConfig+0x1d0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <DMA_SetConfig+0x258>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <DMA_SetConfig+0x1d4>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <DMA_SetConfig+0x1d6>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d059      	beq.n	8004bca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	223f      	movs	r2, #63	; 0x3f
 8004b20:	409a      	lsls	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d138      	bne.n	8004bb8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b56:	e086      	b.n	8004c66 <DMA_SetConfig+0x32a>
 8004b58:	40020010 	.word	0x40020010
 8004b5c:	40020028 	.word	0x40020028
 8004b60:	40020040 	.word	0x40020040
 8004b64:	40020058 	.word	0x40020058
 8004b68:	40020070 	.word	0x40020070
 8004b6c:	40020088 	.word	0x40020088
 8004b70:	400200a0 	.word	0x400200a0
 8004b74:	400200b8 	.word	0x400200b8
 8004b78:	40020410 	.word	0x40020410
 8004b7c:	40020428 	.word	0x40020428
 8004b80:	40020440 	.word	0x40020440
 8004b84:	40020458 	.word	0x40020458
 8004b88:	40020470 	.word	0x40020470
 8004b8c:	40020488 	.word	0x40020488
 8004b90:	400204a0 	.word	0x400204a0
 8004b94:	400204b8 	.word	0x400204b8
 8004b98:	58025408 	.word	0x58025408
 8004b9c:	5802541c 	.word	0x5802541c
 8004ba0:	58025430 	.word	0x58025430
 8004ba4:	58025444 	.word	0x58025444
 8004ba8:	58025458 	.word	0x58025458
 8004bac:	5802546c 	.word	0x5802546c
 8004bb0:	58025480 	.word	0x58025480
 8004bb4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	60da      	str	r2, [r3, #12]
}
 8004bc8:	e04d      	b.n	8004c66 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <DMA_SetConfig+0x338>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d022      	beq.n	8004c1a <DMA_SetConfig+0x2de>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <DMA_SetConfig+0x33c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01d      	beq.n	8004c1a <DMA_SetConfig+0x2de>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <DMA_SetConfig+0x340>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d018      	beq.n	8004c1a <DMA_SetConfig+0x2de>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a24      	ldr	r2, [pc, #144]	; (8004c80 <DMA_SetConfig+0x344>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <DMA_SetConfig+0x2de>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <DMA_SetConfig+0x348>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <DMA_SetConfig+0x2de>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <DMA_SetConfig+0x34c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <DMA_SetConfig+0x2de>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <DMA_SetConfig+0x350>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <DMA_SetConfig+0x2de>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <DMA_SetConfig+0x354>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <DMA_SetConfig+0x2e2>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <DMA_SetConfig+0x2e4>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d108      	bne.n	8004c56 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	60da      	str	r2, [r3, #12]
}
 8004c54:	e007      	b.n	8004c66 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	58025408 	.word	0x58025408
 8004c78:	5802541c 	.word	0x5802541c
 8004c7c:	58025430 	.word	0x58025430
 8004c80:	58025444 	.word	0x58025444
 8004c84:	58025458 	.word	0x58025458
 8004c88:	5802546c 	.word	0x5802546c
 8004c8c:	58025480 	.word	0x58025480
 8004c90:	58025494 	.word	0x58025494

08004c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a42      	ldr	r2, [pc, #264]	; (8004dac <DMA_CalcBaseAndBitshift+0x118>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d04a      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a41      	ldr	r2, [pc, #260]	; (8004db0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d045      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3f      	ldr	r2, [pc, #252]	; (8004db4 <DMA_CalcBaseAndBitshift+0x120>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d040      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <DMA_CalcBaseAndBitshift+0x124>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d03b      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3c      	ldr	r2, [pc, #240]	; (8004dbc <DMA_CalcBaseAndBitshift+0x128>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d036      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3b      	ldr	r2, [pc, #236]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d031      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a39      	ldr	r2, [pc, #228]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x130>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d02c      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x134>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d027      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a36      	ldr	r2, [pc, #216]	; (8004dcc <DMA_CalcBaseAndBitshift+0x138>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d022      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01d      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a33      	ldr	r2, [pc, #204]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x140>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d018      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a32      	ldr	r2, [pc, #200]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x144>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <DMA_CalcBaseAndBitshift+0x148>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2d      	ldr	r2, [pc, #180]	; (8004de4 <DMA_CalcBaseAndBitshift+0x150>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <DMA_CalcBaseAndBitshift+0xa8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <DMA_CalcBaseAndBitshift+0x154>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <DMA_CalcBaseAndBitshift+0xac>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <DMA_CalcBaseAndBitshift+0xae>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d024      	beq.n	8004d90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	3b10      	subs	r3, #16
 8004d4e:	4a27      	ldr	r2, [pc, #156]	; (8004dec <DMA_CalcBaseAndBitshift+0x158>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	4a24      	ldr	r2, [pc, #144]	; (8004df0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d60:	5cd3      	ldrb	r3, [r2, r3]
 8004d62:	461a      	mov	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d908      	bls.n	8004d80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	4b1f      	ldr	r3, [pc, #124]	; (8004df4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	1d1a      	adds	r2, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	659a      	str	r2, [r3, #88]	; 0x58
 8004d7e:	e00d      	b.n	8004d9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d8e:	e005      	b.n	8004d9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40020010 	.word	0x40020010
 8004db0:	40020028 	.word	0x40020028
 8004db4:	40020040 	.word	0x40020040
 8004db8:	40020058 	.word	0x40020058
 8004dbc:	40020070 	.word	0x40020070
 8004dc0:	40020088 	.word	0x40020088
 8004dc4:	400200a0 	.word	0x400200a0
 8004dc8:	400200b8 	.word	0x400200b8
 8004dcc:	40020410 	.word	0x40020410
 8004dd0:	40020428 	.word	0x40020428
 8004dd4:	40020440 	.word	0x40020440
 8004dd8:	40020458 	.word	0x40020458
 8004ddc:	40020470 	.word	0x40020470
 8004de0:	40020488 	.word	0x40020488
 8004de4:	400204a0 	.word	0x400204a0
 8004de8:	400204b8 	.word	0x400204b8
 8004dec:	aaaaaaab 	.word	0xaaaaaaab
 8004df0:	080184a4 	.word	0x080184a4
 8004df4:	fffffc00 	.word	0xfffffc00

08004df8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d120      	bne.n	8004e4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d858      	bhi.n	8004ec6 <DMA_CheckFifoParam+0xce>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <DMA_CheckFifoParam+0x24>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e3f 	.word	0x08004e3f
 8004e24:	08004e2d 	.word	0x08004e2d
 8004e28:	08004ec7 	.word	0x08004ec7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d048      	beq.n	8004eca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e3c:	e045      	b.n	8004eca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e46:	d142      	bne.n	8004ece <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e4c:	e03f      	b.n	8004ece <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	d123      	bne.n	8004ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d838      	bhi.n	8004ed2 <DMA_CheckFifoParam+0xda>
 8004e60:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <DMA_CheckFifoParam+0x70>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004e7f 	.word	0x08004e7f
 8004e70:	08004e79 	.word	0x08004e79
 8004e74:	08004e91 	.word	0x08004e91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e7c:	e030      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d025      	beq.n	8004ed6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e8e:	e022      	b.n	8004ed6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e98:	d11f      	bne.n	8004eda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e9e:	e01c      	b.n	8004eda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d902      	bls.n	8004eae <DMA_CheckFifoParam+0xb6>
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d003      	beq.n	8004eb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004eac:	e018      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb2:	e015      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ec4:	e00b      	b.n	8004ede <DMA_CheckFifoParam+0xe6>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e00a      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e008      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e006      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ed2:	bf00      	nop
 8004ed4:	e004      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <DMA_CheckFifoParam+0xe8>
    break;
 8004ede:	bf00      	nop
    }
  }

  return status;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop

08004ef0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a38      	ldr	r2, [pc, #224]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a36      	ldr	r2, [pc, #216]	; (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a35      	ldr	r2, [pc, #212]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a33      	ldr	r2, [pc, #204]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a32      	ldr	r2, [pc, #200]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a30      	ldr	r2, [pc, #192]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2f      	ldr	r2, [pc, #188]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2d      	ldr	r2, [pc, #180]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01a      	beq.n	8004f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	3b08      	subs	r3, #8
 8004f60:	4a28      	ldr	r2, [pc, #160]	; (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4b26      	ldr	r3, [pc, #152]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a24      	ldr	r2, [pc, #144]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2201      	movs	r2, #1
 8004f86:	409a      	lsls	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f8c:	e024      	b.n	8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	3b10      	subs	r3, #16
 8004f96:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d806      	bhi.n	8004fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d902      	bls.n	8004fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4b18      	ldr	r3, [pc, #96]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fc8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	58025408 	.word	0x58025408
 8004fe8:	5802541c 	.word	0x5802541c
 8004fec:	58025430 	.word	0x58025430
 8004ff0:	58025444 	.word	0x58025444
 8004ff4:	58025458 	.word	0x58025458
 8004ff8:	5802546c 	.word	0x5802546c
 8004ffc:	58025480 	.word	0x58025480
 8005000:	58025494 	.word	0x58025494
 8005004:	cccccccd 	.word	0xcccccccd
 8005008:	16009600 	.word	0x16009600
 800500c:	58025880 	.word	0x58025880
 8005010:	aaaaaaab 	.word	0xaaaaaaab
 8005014:	400204b8 	.word	0x400204b8
 8005018:	4002040f 	.word	0x4002040f
 800501c:	10008200 	.word	0x10008200
 8005020:	40020880 	.word	0x40020880

08005024 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d04a      	beq.n	80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d847      	bhi.n	80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a25      	ldr	r2, [pc, #148]	; (80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d022      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d01d      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1f      	ldr	r2, [pc, #124]	; (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1e      	ldr	r2, [pc, #120]	; (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005094:	2300      	movs	r3, #0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	461a      	mov	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050ac:	671a      	str	r2, [r3, #112]	; 0x70
 80050ae:	e009      	b.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a11      	ldr	r2, [pc, #68]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050c2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	58025408 	.word	0x58025408
 80050e0:	5802541c 	.word	0x5802541c
 80050e4:	58025430 	.word	0x58025430
 80050e8:	58025444 	.word	0x58025444
 80050ec:	58025458 	.word	0x58025458
 80050f0:	5802546c 	.word	0x5802546c
 80050f4:	58025480 	.word	0x58025480
 80050f8:	58025494 	.word	0x58025494
 80050fc:	1600963f 	.word	0x1600963f
 8005100:	58025940 	.word	0x58025940
 8005104:	1000823f 	.word	0x1000823f
 8005108:	40020940 	.word	0x40020940

0800510c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0cf      	b.n	80052be <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2223      	movs	r2, #35	; 0x23
 800512c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fc fa27 	bl	8001584 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005136:	4b64      	ldr	r3, [pc, #400]	; (80052c8 <HAL_ETH_Init+0x1bc>)
 8005138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800513c:	4a62      	ldr	r2, [pc, #392]	; (80052c8 <HAL_ETH_Init+0x1bc>)
 800513e:	f043 0302 	orr.w	r3, r3, #2
 8005142:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005146:	4b60      	ldr	r3, [pc, #384]	; (80052c8 <HAL_ETH_Init+0x1bc>)
 8005148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	7a1b      	ldrb	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d103      	bne.n	8005164 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800515c:	2000      	movs	r0, #0
 800515e:	f7fd f869 	bl	8002234 <HAL_SYSCFG_ETHInterfaceSelect>
 8005162:	e003      	b.n	800516c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005164:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005168:	f7fd f864 	bl	8002234 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800516c:	4b57      	ldr	r3, [pc, #348]	; (80052cc <HAL_ETH_Init+0x1c0>)
 800516e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005186:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005188:	f7fd f818 	bl	80021bc <HAL_GetTick>
 800518c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800518e:	e011      	b.n	80051b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005190:	f7fd f814 	bl	80021bc <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800519e:	d909      	bls.n	80051b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2204      	movs	r2, #4
 80051a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	22e0      	movs	r2, #224	; 0xe0
 80051ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e084      	b.n	80052be <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e4      	bne.n	8005190 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f886 	bl	80052d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80051cc:	f001 fea8 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4a3f      	ldr	r2, [pc, #252]	; (80052d0 <HAL_ETH_Init+0x1c4>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	0c9a      	lsrs	r2, r3, #18
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3a01      	subs	r2, #1
 80051e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fa71 	bl	80056cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80051f6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005202:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005206:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	22e0      	movs	r2, #224	; 0xe0
 8005222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e049      	b.n	80052be <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005232:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_ETH_Init+0x1c8>)
 8005238:	4013      	ands	r3, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6952      	ldr	r2, [r2, #20]
 800523e:	0051      	lsls	r1, r2, #1
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	430b      	orrs	r3, r1
 8005246:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800524a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fad9 	bl	8005806 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fb1f 	bl	8005898 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	3305      	adds	r3, #5
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	4619      	mov	r1, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	3303      	adds	r3, #3
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	061a      	lsls	r2, r3, #24
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	3302      	adds	r3, #2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	3301      	adds	r3, #1
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005298:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2210      	movs	r2, #16
 80052b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
 80052cc:	58000400 	.word	0x58000400
 80052d0:	431bde83 	.word	0x431bde83
 80052d4:	ffff8001 	.word	0xffff8001

080052d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052f2:	f001 fe15 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 80052f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d908      	bls.n	8005312 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d804      	bhi.n	8005312 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e027      	b.n	8005362 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a18      	ldr	r2, [pc, #96]	; (8005378 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d908      	bls.n	800532c <HAL_ETH_SetMDIOClockRange+0x54>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a17      	ldr	r2, [pc, #92]	; (800537c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d204      	bcs.n	800532c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e01a      	b.n	8005362 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a13      	ldr	r2, [pc, #76]	; (800537c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d303      	bcc.n	800533c <HAL_ETH_SetMDIOClockRange+0x64>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d911      	bls.n	8005360 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a10      	ldr	r2, [pc, #64]	; (8005380 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d908      	bls.n	8005356 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a0f      	ldr	r2, [pc, #60]	; (8005384 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d804      	bhi.n	8005356 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e005      	b.n	8005362 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e000      	b.n	8005362 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005360:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	01312cff 	.word	0x01312cff
 8005378:	02160ebf 	.word	0x02160ebf
 800537c:	03938700 	.word	0x03938700
 8005380:	05f5e0ff 	.word	0x05f5e0ff
 8005384:	08f0d17f 	.word	0x08f0d17f

08005388 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800539a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	791b      	ldrb	r3, [r3, #4]
 80053a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	7b1b      	ldrb	r3, [r3, #12]
 80053a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	7b5b      	ldrb	r3, [r3, #13]
 80053b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	7b9b      	ldrb	r3, [r3, #14]
 80053b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	7bdb      	ldrb	r3, [r3, #15]
 80053c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	7c12      	ldrb	r2, [r2, #16]
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	d102      	bne.n	80053d2 <ETH_SetMACConfig+0x4a>
 80053cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80053d0:	e000      	b.n	80053d4 <ETH_SetMACConfig+0x4c>
 80053d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	7c52      	ldrb	r2, [r2, #17]
 80053da:	2a00      	cmp	r2, #0
 80053dc:	d102      	bne.n	80053e4 <ETH_SetMACConfig+0x5c>
 80053de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053e2:	e000      	b.n	80053e6 <ETH_SetMACConfig+0x5e>
 80053e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7c9b      	ldrb	r3, [r3, #18]
 80053ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053ee:	431a      	orrs	r2, r3
               macconf->Speed |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80053f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80053fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	7f1b      	ldrb	r3, [r3, #28]
 8005400:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005402:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	7f5b      	ldrb	r3, [r3, #29]
 8005408:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800540a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	7f92      	ldrb	r2, [r2, #30]
 8005410:	2a00      	cmp	r2, #0
 8005412:	d102      	bne.n	800541a <ETH_SetMACConfig+0x92>
 8005414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005418:	e000      	b.n	800541c <ETH_SetMACConfig+0x94>
 800541a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800541c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	7fdb      	ldrb	r3, [r3, #31]
 8005422:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005424:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	f892 2020 	ldrb.w	r2, [r2, #32]
 800542c:	2a00      	cmp	r2, #0
 800542e:	d102      	bne.n	8005436 <ETH_SetMACConfig+0xae>
 8005430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005434:	e000      	b.n	8005438 <ETH_SetMACConfig+0xb0>
 8005436:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005438:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800543e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005446:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005448:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4b56      	ldr	r3, [pc, #344]	; (80055b4 <ETH_SetMACConfig+0x22c>)
 800545a:	4013      	ands	r3, r2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	430b      	orrs	r3, r1
 8005464:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005472:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005474:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800547c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800547e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005486:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005488:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005490:	2a00      	cmp	r2, #0
 8005492:	d102      	bne.n	800549a <ETH_SetMACConfig+0x112>
 8005494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005498:	e000      	b.n	800549c <ETH_SetMACConfig+0x114>
 800549a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800549c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <ETH_SetMACConfig+0x230>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	68f9      	ldr	r1, [r7, #12]
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	4b3a      	ldr	r3, [pc, #232]	; (80055bc <ETH_SetMACConfig+0x234>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	430b      	orrs	r3, r1
 80054dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	d101      	bne.n	80054fa <ETH_SetMACConfig+0x172>
 80054f6:	2280      	movs	r2, #128	; 0x80
 80054f8:	e000      	b.n	80054fc <ETH_SetMACConfig+0x174>
 80054fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80054fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800550e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005512:	4013      	ands	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	430b      	orrs	r3, r1
 800551c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005524:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800552c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	f023 0103 	bic.w	r1, r3, #3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	430a      	orrs	r2, r1
 8005546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005552:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800556e:	2a00      	cmp	r2, #0
 8005570:	d101      	bne.n	8005576 <ETH_SetMACConfig+0x1ee>
 8005572:	2240      	movs	r2, #64	; 0x40
 8005574:	e000      	b.n	8005578 <ETH_SetMACConfig+0x1f0>
 8005576:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005578:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005580:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800558a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005598:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	00048083 	.word	0x00048083
 80055b8:	c0f88000 	.word	0xc0f88000
 80055bc:	fffffef0 	.word	0xfffffef0

080055c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b38      	ldr	r3, [pc, #224]	; (80056b8 <ETH_SetDMAConfig+0xf8>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	6811      	ldr	r1, [r2, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	430b      	orrs	r3, r1
 80055e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	791b      	ldrb	r3, [r3, #4]
 80055ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	7b1b      	ldrb	r3, [r3, #12]
 80055f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	4b2c      	ldr	r3, [pc, #176]	; (80056bc <ETH_SetDMAConfig+0xfc>)
 800560a:	4013      	ands	r3, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	68f9      	ldr	r1, [r7, #12]
 8005612:	430b      	orrs	r3, r1
 8005614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005618:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	7b5b      	ldrb	r3, [r3, #13]
 800561e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005630:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005634:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <ETH_SetDMAConfig+0x100>)
 8005636:	4013      	ands	r3, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	430b      	orrs	r3, r1
 8005640:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005644:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	7d1b      	ldrb	r3, [r3, #20]
 8005650:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005652:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	7f5b      	ldrb	r3, [r3, #29]
 8005658:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005666:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <ETH_SetDMAConfig+0x104>)
 800566c:	4013      	ands	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	430b      	orrs	r3, r1
 8005676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800567a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	7f1b      	ldrb	r3, [r3, #28]
 8005682:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005694:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <ETH_SetDMAConfig+0x108>)
 800569a:	4013      	ands	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	430b      	orrs	r3, r1
 80056a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	ffff87fd 	.word	0xffff87fd
 80056bc:	ffff2ffe 	.word	0xffff2ffe
 80056c0:	fffec000 	.word	0xfffec000
 80056c4:	ffc0efef 	.word	0xffc0efef
 80056c8:	7fc0ffff 	.word	0x7fc0ffff

080056cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b0a4      	sub	sp, #144	; 0x90
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80056da:	2300      	movs	r3, #0
 80056dc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800570c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005714:	2300      	movs	r3, #0
 8005716:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005718:	2300      	movs	r3, #0
 800571a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800571e:	2300      	movs	r3, #0
 8005720:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005724:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005728:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005730:	2300      	movs	r3, #0
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800573a:	2300      	movs	r3, #0
 800573c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005746:	2300      	movs	r3, #0
 8005748:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800574a:	2300      	movs	r3, #0
 800574c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800574e:	2300      	movs	r3, #0
 8005750:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005752:	2300      	movs	r3, #0
 8005754:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005758:	2300      	movs	r3, #0
 800575a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005764:	2320      	movs	r3, #32
 8005766:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005776:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800577c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005782:	2300      	movs	r3, #0
 8005784:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005788:	2302      	movs	r3, #2
 800578a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057a6:	2300      	movs	r3, #0
 80057a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fde6 	bl	8005388 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057bc:	2301      	movs	r3, #1
 80057be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057c0:	2301      	movs	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80057d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80057e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80057ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80057f2:	f107 0308 	add.w	r3, r7, #8
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fee1 	bl	80055c0 <ETH_SetDMAConfig>
}
 80057fe:	bf00      	nop
 8005800:	3790      	adds	r7, #144	; 0x90
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e01d      	b.n	8005850 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68d9      	ldr	r1, [r3, #12]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	3206      	adds	r2, #6
 8005846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3301      	adds	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d9de      	bls.n	8005814 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005864:	461a      	mov	r2, r3
 8005866:	2303      	movs	r3, #3
 8005868:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005878:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005888:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e023      	b.n	80058ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6919      	ldr	r1, [r3, #16]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	440b      	add	r3, r1
 80058b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2200      	movs	r2, #0
 80058c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	3212      	adds	r2, #18
 80058e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d9d8      	bls.n	80058a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591a:	461a      	mov	r2, r3
 800591c:	2303      	movs	r3, #3
 800591e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005962:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <HAL_GPIO_Init+0x234>)
 8005964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005966:	e194      	b.n	8005c92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2101      	movs	r1, #1
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8186 	beq.w	8005c8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d005      	beq.n	8005998 <HAL_GPIO_Init+0x44>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d130      	bne.n	80059fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	2203      	movs	r2, #3
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4313      	orrs	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ce:	2201      	movs	r2, #1
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4013      	ands	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0201 	and.w	r2, r3, #1
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d017      	beq.n	8005a36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	2203      	movs	r2, #3
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d123      	bne.n	8005a8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	08da      	lsrs	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3208      	adds	r2, #8
 8005a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	220f      	movs	r2, #15
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4013      	ands	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	08da      	lsrs	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3208      	adds	r2, #8
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	2203      	movs	r2, #3
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0203 	and.w	r2, r3, #3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80e0 	beq.w	8005c8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ad2:	4a2e      	ldr	r2, [pc, #184]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005adc:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aea:	4a29      	ldr	r2, [pc, #164]	; (8005b90 <HAL_GPIO_Init+0x23c>)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	3302      	adds	r3, #2
 8005af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	220f      	movs	r2, #15
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_GPIO_Init+0x240>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d052      	beq.n	8005bbc <HAL_GPIO_Init+0x268>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <HAL_GPIO_Init+0x244>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_GPIO_Init+0x22e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1e      	ldr	r2, [pc, #120]	; (8005b9c <HAL_GPIO_Init+0x248>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d02b      	beq.n	8005b7e <HAL_GPIO_Init+0x22a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_GPIO_Init+0x24c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d025      	beq.n	8005b7a <HAL_GPIO_Init+0x226>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <HAL_GPIO_Init+0x250>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01f      	beq.n	8005b76 <HAL_GPIO_Init+0x222>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_GPIO_Init+0x254>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d019      	beq.n	8005b72 <HAL_GPIO_Init+0x21e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_GPIO_Init+0x258>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_GPIO_Init+0x21a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_GPIO_Init+0x25c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00d      	beq.n	8005b6a <HAL_GPIO_Init+0x216>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_GPIO_Init+0x260>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <HAL_GPIO_Init+0x212>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_GPIO_Init+0x264>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_GPIO_Init+0x20e>
 8005b5e:	2309      	movs	r3, #9
 8005b60:	e02d      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b62:	230a      	movs	r3, #10
 8005b64:	e02b      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b66:	2308      	movs	r3, #8
 8005b68:	e029      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b6a:	2307      	movs	r3, #7
 8005b6c:	e027      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b6e:	2306      	movs	r3, #6
 8005b70:	e025      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b72:	2305      	movs	r3, #5
 8005b74:	e023      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b76:	2304      	movs	r3, #4
 8005b78:	e021      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e01f      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e01d      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e01b      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b86:	bf00      	nop
 8005b88:	58000080 	.word	0x58000080
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	58000400 	.word	0x58000400
 8005b94:	58020000 	.word	0x58020000
 8005b98:	58020400 	.word	0x58020400
 8005b9c:	58020800 	.word	0x58020800
 8005ba0:	58020c00 	.word	0x58020c00
 8005ba4:	58021000 	.word	0x58021000
 8005ba8:	58021400 	.word	0x58021400
 8005bac:	58021800 	.word	0x58021800
 8005bb0:	58021c00 	.word	0x58021c00
 8005bb4:	58022000 	.word	0x58022000
 8005bb8:	58022400 	.word	0x58022400
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	f002 0203 	and.w	r2, r2, #3
 8005bc4:	0092      	lsls	r2, r2, #2
 8005bc6:	4093      	lsls	r3, r2
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bce:	4938      	ldr	r1, [pc, #224]	; (8005cb0 <HAL_GPIO_Init+0x35c>)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f47f ae63 	bne.w	8005968 <HAL_GPIO_Init+0x14>
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	3724      	adds	r7, #36	; 0x24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	58000400 	.word	0x58000400

08005cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cc4:	787b      	ldrb	r3, [r7, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cd0:	e003      	b.n	8005cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	041a      	lsls	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	619a      	str	r2, [r3, #24]
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce8:	b08f      	sub	sp, #60	; 0x3c
 8005cea:	af0a      	add	r7, sp, #40	; 0x28
 8005cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e116      	b.n	8005f26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb fe50 	bl	80019b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f005 f8aa 	bl	800ae90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	687e      	ldr	r6, [r7, #4]
 8005d44:	466d      	mov	r5, sp
 8005d46:	f106 0410 	add.w	r4, r6, #16
 8005d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d5a:	1d33      	adds	r3, r6, #4
 8005d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d5e:	6838      	ldr	r0, [r7, #0]
 8005d60:	f005 f828 	bl	800adb4 <USB_CoreInit>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e0d7      	b.n	8005f26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f005 f898 	bl	800aeb2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	e04a      	b.n	8005e1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d88:	7bfa      	ldrb	r2, [r7, #15]
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	333d      	adds	r3, #61	; 0x3d
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	333c      	adds	r3, #60	; 0x3c
 8005dac:	7bfa      	ldrb	r2, [r7, #15]
 8005dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005db0:	7bfa      	ldrb	r2, [r7, #15]
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	b298      	uxth	r0, r3
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	3356      	adds	r3, #86	; 0x56
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3340      	adds	r3, #64	; 0x40
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ddc:	7bfa      	ldrb	r2, [r7, #15]
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	3344      	adds	r3, #68	; 0x44
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005df0:	7bfa      	ldrb	r2, [r7, #15]
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3348      	adds	r3, #72	; 0x48
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e04:	7bfa      	ldrb	r2, [r7, #15]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	334c      	adds	r3, #76	; 0x4c
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
 8005e1e:	7bfa      	ldrb	r2, [r7, #15]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d3af      	bcc.n	8005d88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]
 8005e2c:	e044      	b.n	8005eb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e2e:	7bfa      	ldrb	r2, [r7, #15]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e44:	7bfa      	ldrb	r2, [r7, #15]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e70:	7bfa      	ldrb	r2, [r7, #15]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e86:	7bfa      	ldrb	r2, [r7, #15]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	7bfa      	ldrb	r2, [r7, #15]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d3b5      	bcc.n	8005e2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	687e      	ldr	r6, [r7, #4]
 8005eca:	466d      	mov	r5, sp
 8005ecc:	f106 0410 	add.w	r4, r6, #16
 8005ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005edc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ee0:	1d33      	adds	r3, r6, #4
 8005ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ee4:	6838      	ldr	r0, [r7, #0]
 8005ee6:	f005 f831 	bl	800af4c <USB_DevInit>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e014      	b.n	8005f26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d102      	bne.n	8005f1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f80b 	bl	8005f30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f005 f9ef 	bl	800b302 <USB_DevDisconnect>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005f30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_PCDEx_ActivateLPM+0x44>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	10000003 	.word	0x10000003

08005f78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f80:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d00a      	beq.n	8005fa2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d001      	beq.n	8005f9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e01f      	b.n	8005fde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e01d      	b.n	8005fde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f023 0207 	bic.w	r2, r3, #7
 8005faa:	490f      	ldr	r1, [pc, #60]	; (8005fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005fb2:	f7fc f903 	bl	80021bc <HAL_GetTick>
 8005fb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fb8:	e009      	b.n	8005fce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fba:	f7fc f8ff 	bl	80021bc <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc8:	d901      	bls.n	8005fce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e007      	b.n	8005fde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d1ee      	bne.n	8005fba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	58024800 	.word	0x58024800

08005fec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a04      	ldr	r2, [pc, #16]	; (8006008 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ffa:	60d3      	str	r3, [r2, #12]
}
 8005ffc:	bf00      	nop
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	58024800 	.word	0x58024800

0800600c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08c      	sub	sp, #48	; 0x30
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f000 bc48 	b.w	80068b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8088 	beq.w	800613e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602e:	4b99      	ldr	r3, [pc, #612]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006038:	4b96      	ldr	r3, [pc, #600]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	2b10      	cmp	r3, #16
 8006042:	d007      	beq.n	8006054 <HAL_RCC_OscConfig+0x48>
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	2b18      	cmp	r3, #24
 8006048:	d111      	bne.n	800606e <HAL_RCC_OscConfig+0x62>
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d10c      	bne.n	800606e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006054:	4b8f      	ldr	r3, [pc, #572]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d06d      	beq.n	800613c <HAL_RCC_OscConfig+0x130>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d169      	bne.n	800613c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	f000 bc21 	b.w	80068b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006076:	d106      	bne.n	8006086 <HAL_RCC_OscConfig+0x7a>
 8006078:	4b86      	ldr	r3, [pc, #536]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a85      	ldr	r2, [pc, #532]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800607e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	e02e      	b.n	80060e4 <HAL_RCC_OscConfig+0xd8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x9c>
 800608e:	4b81      	ldr	r3, [pc, #516]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a80      	ldr	r2, [pc, #512]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4b7e      	ldr	r3, [pc, #504]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a7d      	ldr	r2, [pc, #500]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e01d      	b.n	80060e4 <HAL_RCC_OscConfig+0xd8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060b0:	d10c      	bne.n	80060cc <HAL_RCC_OscConfig+0xc0>
 80060b2:	4b78      	ldr	r3, [pc, #480]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a77      	ldr	r2, [pc, #476]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	4b75      	ldr	r3, [pc, #468]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a74      	ldr	r2, [pc, #464]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e00b      	b.n	80060e4 <HAL_RCC_OscConfig+0xd8>
 80060cc:	4b71      	ldr	r3, [pc, #452]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a70      	ldr	r2, [pc, #448]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	4b6e      	ldr	r3, [pc, #440]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a6d      	ldr	r2, [pc, #436]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80060de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d013      	beq.n	8006114 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fc f866 	bl	80021bc <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060f4:	f7fc f862 	bl	80021bc <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b64      	cmp	r3, #100	; 0x64
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e3d4      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006106:	4b63      	ldr	r3, [pc, #396]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0xe8>
 8006112:	e014      	b.n	800613e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fc f852 	bl	80021bc <HAL_GetTick>
 8006118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800611c:	f7fc f84e 	bl	80021bc <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b64      	cmp	r3, #100	; 0x64
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e3c0      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800612e:	4b59      	ldr	r3, [pc, #356]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x110>
 800613a:	e000      	b.n	800613e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80ca 	beq.w	80062e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800614c:	4b51      	ldr	r3, [pc, #324]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006154:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006156:	4b4f      	ldr	r3, [pc, #316]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <HAL_RCC_OscConfig+0x166>
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2b18      	cmp	r3, #24
 8006166:	d156      	bne.n	8006216 <HAL_RCC_OscConfig+0x20a>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d151      	bne.n	8006216 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006172:	4b48      	ldr	r3, [pc, #288]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_RCC_OscConfig+0x17e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e392      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800618a:	4b42      	ldr	r3, [pc, #264]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 0219 	bic.w	r2, r3, #25
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	493f      	ldr	r1, [pc, #252]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fc f80e 	bl	80021bc <HAL_GetTick>
 80061a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061a4:	f7fc f80a 	bl	80021bc <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e37c      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061b6:	4b37      	ldr	r3, [pc, #220]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c2:	f7fc f82b 	bl	800221c <HAL_GetREVID>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d817      	bhi.n	8006200 <HAL_RCC_OscConfig+0x1f4>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d108      	bne.n	80061ea <HAL_RCC_OscConfig+0x1de>
 80061d8:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061e0:	4a2c      	ldr	r2, [pc, #176]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80061e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e8:	e07a      	b.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ea:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	031b      	lsls	r3, r3, #12
 80061f8:	4926      	ldr	r1, [pc, #152]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061fe:	e06f      	b.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006200:	4b24      	ldr	r3, [pc, #144]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	4921      	ldr	r1, [pc, #132]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006210:	4313      	orrs	r3, r2
 8006212:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006214:	e064      	b.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d047      	beq.n	80062ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 0219 	bic.w	r2, r3, #25
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	491a      	ldr	r1, [pc, #104]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fb ffc4 	bl	80021bc <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006238:	f7fb ffc0 	bl	80021bc <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e332      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f0      	beq.n	8006238 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006256:	f7fb ffe1 	bl	800221c <HAL_GetREVID>
 800625a:	4603      	mov	r3, r0
 800625c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006260:	4293      	cmp	r3, r2
 8006262:	d819      	bhi.n	8006298 <HAL_RCC_OscConfig+0x28c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d108      	bne.n	800627e <HAL_RCC_OscConfig+0x272>
 800626c:	4b09      	ldr	r3, [pc, #36]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006274:	4a07      	ldr	r2, [pc, #28]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627a:	6053      	str	r3, [r2, #4]
 800627c:	e030      	b.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	031b      	lsls	r3, r3, #12
 800628c:	4901      	ldr	r1, [pc, #4]	; (8006294 <HAL_RCC_OscConfig+0x288>)
 800628e:	4313      	orrs	r3, r2
 8006290:	604b      	str	r3, [r1, #4]
 8006292:	e025      	b.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
 8006294:	58024400 	.word	0x58024400
 8006298:	4b9a      	ldr	r3, [pc, #616]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	4997      	ldr	r1, [pc, #604]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]
 80062ac:	e018      	b.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ae:	4b95      	ldr	r3, [pc, #596]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a94      	ldr	r2, [pc, #592]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ba:	f7fb ff7f 	bl	80021bc <HAL_GetTick>
 80062be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c2:	f7fb ff7b 	bl	80021bc <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e2ed      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062d4:	4b8b      	ldr	r3, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f0      	bne.n	80062c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80a9 	beq.w	8006440 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ee:	4b85      	ldr	r3, [pc, #532]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062f8:	4b82      	ldr	r3, [pc, #520]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b08      	cmp	r3, #8
 8006302:	d007      	beq.n	8006314 <HAL_RCC_OscConfig+0x308>
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b18      	cmp	r3, #24
 8006308:	d13a      	bne.n	8006380 <HAL_RCC_OscConfig+0x374>
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d135      	bne.n	8006380 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006314:	4b7b      	ldr	r3, [pc, #492]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_OscConfig+0x320>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	d001      	beq.n	800632c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e2c1      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800632c:	f7fb ff76 	bl	800221c <HAL_GetREVID>
 8006330:	4603      	mov	r3, r0
 8006332:	f241 0203 	movw	r2, #4099	; 0x1003
 8006336:	4293      	cmp	r3, r2
 8006338:	d817      	bhi.n	800636a <HAL_RCC_OscConfig+0x35e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2b20      	cmp	r3, #32
 8006340:	d108      	bne.n	8006354 <HAL_RCC_OscConfig+0x348>
 8006342:	4b70      	ldr	r3, [pc, #448]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800634a:	4a6e      	ldr	r2, [pc, #440]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800634c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006350:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006352:	e075      	b.n	8006440 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006354:	4b6b      	ldr	r3, [pc, #428]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	069b      	lsls	r3, r3, #26
 8006362:	4968      	ldr	r1, [pc, #416]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006368:	e06a      	b.n	8006440 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800636a:	4b66      	ldr	r3, [pc, #408]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	061b      	lsls	r3, r3, #24
 8006378:	4962      	ldr	r1, [pc, #392]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800637a:	4313      	orrs	r3, r2
 800637c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800637e:	e05f      	b.n	8006440 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d042      	beq.n	800640e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006388:	4b5e      	ldr	r3, [pc, #376]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a5d      	ldr	r2, [pc, #372]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800638e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fb ff12 	bl	80021bc <HAL_GetTick>
 8006398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800639c:	f7fb ff0e 	bl	80021bc <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e280      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063ae:	4b55      	ldr	r3, [pc, #340]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063ba:	f7fb ff2f 	bl	800221c <HAL_GetREVID>
 80063be:	4603      	mov	r3, r0
 80063c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d817      	bhi.n	80063f8 <HAL_RCC_OscConfig+0x3ec>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d108      	bne.n	80063e2 <HAL_RCC_OscConfig+0x3d6>
 80063d0:	4b4c      	ldr	r3, [pc, #304]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063d8:	4a4a      	ldr	r2, [pc, #296]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80063da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063de:	6053      	str	r3, [r2, #4]
 80063e0:	e02e      	b.n	8006440 <HAL_RCC_OscConfig+0x434>
 80063e2:	4b48      	ldr	r3, [pc, #288]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	069b      	lsls	r3, r3, #26
 80063f0:	4944      	ldr	r1, [pc, #272]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	604b      	str	r3, [r1, #4]
 80063f6:	e023      	b.n	8006440 <HAL_RCC_OscConfig+0x434>
 80063f8:	4b42      	ldr	r3, [pc, #264]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	061b      	lsls	r3, r3, #24
 8006406:	493f      	ldr	r1, [pc, #252]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006408:	4313      	orrs	r3, r2
 800640a:	60cb      	str	r3, [r1, #12]
 800640c:	e018      	b.n	8006440 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800640e:	4b3d      	ldr	r3, [pc, #244]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3c      	ldr	r2, [pc, #240]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641a:	f7fb fecf 	bl	80021bc <HAL_GetTick>
 800641e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006422:	f7fb fecb 	bl	80021bc <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e23d      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006434:	4b33      	ldr	r3, [pc, #204]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f0      	bne.n	8006422 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d036      	beq.n	80064ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d019      	beq.n	8006488 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006454:	4b2b      	ldr	r3, [pc, #172]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 8006456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006458:	4a2a      	ldr	r2, [pc, #168]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fb feac 	bl	80021bc <HAL_GetTick>
 8006464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006468:	f7fb fea8 	bl	80021bc <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e21a      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800647a:	4b22      	ldr	r3, [pc, #136]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0x45c>
 8006486:	e018      	b.n	80064ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006488:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800648a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648c:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006494:	f7fb fe92 	bl	80021bc <HAL_GetTick>
 8006498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800649c:	f7fb fe8e 	bl	80021bc <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e200      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ae:	4b15      	ldr	r3, [pc, #84]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d039      	beq.n	800653a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01c      	beq.n	8006508 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064ce:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a0c      	ldr	r2, [pc, #48]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80064d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064da:	f7fb fe6f 	bl	80021bc <HAL_GetTick>
 80064de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e2:	f7fb fe6b 	bl	80021bc <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e1dd      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <HAL_RCC_OscConfig+0x4f8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <HAL_RCC_OscConfig+0x4d6>
 8006500:	e01b      	b.n	800653a <HAL_RCC_OscConfig+0x52e>
 8006502:	bf00      	nop
 8006504:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006508:	4b9b      	ldr	r3, [pc, #620]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a9a      	ldr	r2, [pc, #616]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800650e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006512:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006514:	f7fb fe52 	bl	80021bc <HAL_GetTick>
 8006518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800651c:	f7fb fe4e 	bl	80021bc <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e1c0      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800652e:	4b92      	ldr	r3, [pc, #584]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8081 	beq.w	800664a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006548:	4b8c      	ldr	r3, [pc, #560]	; (800677c <HAL_RCC_OscConfig+0x770>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a8b      	ldr	r2, [pc, #556]	; (800677c <HAL_RCC_OscConfig+0x770>)
 800654e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006554:	f7fb fe32 	bl	80021bc <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800655c:	f7fb fe2e 	bl	80021bc <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e1a0      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800656e:	4b83      	ldr	r3, [pc, #524]	; (800677c <HAL_RCC_OscConfig+0x770>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d106      	bne.n	8006590 <HAL_RCC_OscConfig+0x584>
 8006582:	4b7d      	ldr	r3, [pc, #500]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	4a7c      	ldr	r2, [pc, #496]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	6713      	str	r3, [r2, #112]	; 0x70
 800658e:	e02d      	b.n	80065ec <HAL_RCC_OscConfig+0x5e0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10c      	bne.n	80065b2 <HAL_RCC_OscConfig+0x5a6>
 8006598:	4b77      	ldr	r3, [pc, #476]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659c:	4a76      	ldr	r2, [pc, #472]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6713      	str	r3, [r2, #112]	; 0x70
 80065a4:	4b74      	ldr	r3, [pc, #464]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a73      	ldr	r2, [pc, #460]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065aa:	f023 0304 	bic.w	r3, r3, #4
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
 80065b0:	e01c      	b.n	80065ec <HAL_RCC_OscConfig+0x5e0>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d10c      	bne.n	80065d4 <HAL_RCC_OscConfig+0x5c8>
 80065ba:	4b6f      	ldr	r3, [pc, #444]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065be:	4a6e      	ldr	r2, [pc, #440]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	f043 0304 	orr.w	r3, r3, #4
 80065c4:	6713      	str	r3, [r2, #112]	; 0x70
 80065c6:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	4a6b      	ldr	r2, [pc, #428]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065cc:	f043 0301 	orr.w	r3, r3, #1
 80065d0:	6713      	str	r3, [r2, #112]	; 0x70
 80065d2:	e00b      	b.n	80065ec <HAL_RCC_OscConfig+0x5e0>
 80065d4:	4b68      	ldr	r3, [pc, #416]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	4a67      	ldr	r2, [pc, #412]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	6713      	str	r3, [r2, #112]	; 0x70
 80065e0:	4b65      	ldr	r3, [pc, #404]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e4:	4a64      	ldr	r2, [pc, #400]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80065e6:	f023 0304 	bic.w	r3, r3, #4
 80065ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d015      	beq.n	8006620 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f4:	f7fb fde2 	bl	80021bc <HAL_GetTick>
 80065f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065fa:	e00a      	b.n	8006612 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fc:	f7fb fdde 	bl	80021bc <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	f241 3288 	movw	r2, #5000	; 0x1388
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e14e      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006612:	4b59      	ldr	r3, [pc, #356]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ee      	beq.n	80065fc <HAL_RCC_OscConfig+0x5f0>
 800661e:	e014      	b.n	800664a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7fb fdcc 	bl	80021bc <HAL_GetTick>
 8006624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006626:	e00a      	b.n	800663e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006628:	f7fb fdc8 	bl	80021bc <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	; 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e138      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800663e:	4b4e      	ldr	r3, [pc, #312]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ee      	bne.n	8006628 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 812d 	beq.w	80068ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665c:	2b18      	cmp	r3, #24
 800665e:	f000 80bd 	beq.w	80067dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	2b02      	cmp	r3, #2
 8006668:	f040 809e 	bne.w	80067a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a41      	ldr	r2, [pc, #260]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006678:	f7fb fda0 	bl	80021bc <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006680:	f7fb fd9c 	bl	80021bc <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e10e      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006692:	4b39      	ldr	r3, [pc, #228]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f0      	bne.n	8006680 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800669e:	4b36      	ldr	r3, [pc, #216]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80066a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066a2:	4b37      	ldr	r3, [pc, #220]	; (8006780 <HAL_RCC_OscConfig+0x774>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066ae:	0112      	lsls	r2, r2, #4
 80066b0:	430a      	orrs	r2, r1
 80066b2:	4931      	ldr	r1, [pc, #196]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	628b      	str	r3, [r1, #40]	; 0x28
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	3b01      	subs	r3, #1
 80066be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	3b01      	subs	r3, #1
 80066c8:	025b      	lsls	r3, r3, #9
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	3b01      	subs	r3, #1
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e0:	3b01      	subs	r3, #1
 80066e2:	061b      	lsls	r3, r3, #24
 80066e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066e8:	4923      	ldr	r1, [pc, #140]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a21      	ldr	r2, [pc, #132]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066fa:	4b1f      	ldr	r3, [pc, #124]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 80066fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fe:	4b21      	ldr	r3, [pc, #132]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006700:	4013      	ands	r3, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006706:	00d2      	lsls	r2, r2, #3
 8006708:	491b      	ldr	r1, [pc, #108]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800670a:	4313      	orrs	r3, r2
 800670c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800670e:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	f023 020c 	bic.w	r2, r3, #12
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	4917      	ldr	r1, [pc, #92]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800671c:	4313      	orrs	r3, r2
 800671e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006720:	4b15      	ldr	r3, [pc, #84]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	f023 0202 	bic.w	r2, r3, #2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	4912      	ldr	r1, [pc, #72]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800672e:	4313      	orrs	r3, r2
 8006730:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006732:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	4a10      	ldr	r2, [pc, #64]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673e:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006756:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a04      	ldr	r2, [pc, #16]	; (8006778 <HAL_RCC_OscConfig+0x76c>)
 8006768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800676c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fb fd25 	bl	80021bc <HAL_GetTick>
 8006772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006774:	e011      	b.n	800679a <HAL_RCC_OscConfig+0x78e>
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
 800677c:	58024800 	.word	0x58024800
 8006780:	fffffc0c 	.word	0xfffffc0c
 8006784:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006788:	f7fb fd18 	bl	80021bc <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e08a      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800679a:	4b47      	ldr	r3, [pc, #284]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x77c>
 80067a6:	e082      	b.n	80068ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a8:	4b43      	ldr	r3, [pc, #268]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a42      	ldr	r2, [pc, #264]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 80067ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7fb fd02 	bl	80021bc <HAL_GetTick>
 80067b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067bc:	f7fb fcfe 	bl	80021bc <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e070      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067ce:	4b3a      	ldr	r3, [pc, #232]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x7b0>
 80067da:	e068      	b.n	80068ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067dc:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067e2:	4b35      	ldr	r3, [pc, #212]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d031      	beq.n	8006854 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f003 0203 	and.w	r2, r3, #3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d12a      	bne.n	8006854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d122      	bne.n	8006854 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800681a:	429a      	cmp	r2, r3
 800681c:	d11a      	bne.n	8006854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	0a5b      	lsrs	r3, r3, #9
 8006822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800682c:	429a      	cmp	r2, r3
 800682e:	d111      	bne.n	8006854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d108      	bne.n	8006854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	0e1b      	lsrs	r3, r3, #24
 8006846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006850:	429a      	cmp	r2, r3
 8006852:	d001      	beq.n	8006858 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e02b      	b.n	80068b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006858:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 800685a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006862:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	d01f      	beq.n	80068ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800686e:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 8006874:	f023 0301 	bic.w	r3, r3, #1
 8006878:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800687a:	f7fb fc9f 	bl	80021bc <HAL_GetTick>
 800687e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006880:	bf00      	nop
 8006882:	f7fb fc9b 	bl	80021bc <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	4293      	cmp	r3, r2
 800688c:	d0f9      	beq.n	8006882 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 8006890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <HAL_RCC_OscConfig+0x8b0>)
 8006894:	4013      	ands	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800689a:	00d2      	lsls	r2, r2, #3
 800689c:	4906      	ldr	r1, [pc, #24]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	4a04      	ldr	r2, [pc, #16]	; (80068b8 <HAL_RCC_OscConfig+0x8ac>)
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3730      	adds	r7, #48	; 0x30
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	58024400 	.word	0x58024400
 80068bc:	ffff0007 	.word	0xffff0007

080068c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e19c      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068d4:	4b8a      	ldr	r3, [pc, #552]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d910      	bls.n	8006904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e2:	4b87      	ldr	r3, [pc, #540]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 020f 	bic.w	r2, r3, #15
 80068ea:	4985      	ldr	r1, [pc, #532]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b83      	ldr	r3, [pc, #524]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e184      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	4b7b      	ldr	r3, [pc, #492]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800691c:	429a      	cmp	r2, r3
 800691e:	d908      	bls.n	8006932 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006920:	4b78      	ldr	r3, [pc, #480]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	4975      	ldr	r1, [pc, #468]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 800692e:	4313      	orrs	r3, r2
 8006930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	4b70      	ldr	r3, [pc, #448]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800694a:	429a      	cmp	r2, r3
 800694c:	d908      	bls.n	8006960 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800694e:	4b6d      	ldr	r3, [pc, #436]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	496a      	ldr	r1, [pc, #424]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 800695c:	4313      	orrs	r3, r2
 800695e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d010      	beq.n	800698e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	4b64      	ldr	r3, [pc, #400]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006978:	429a      	cmp	r2, r3
 800697a:	d908      	bls.n	800698e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800697c:	4b61      	ldr	r3, [pc, #388]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	495e      	ldr	r1, [pc, #376]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 800698a:	4313      	orrs	r3, r2
 800698c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	4b59      	ldr	r3, [pc, #356]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d908      	bls.n	80069bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069aa:	4b56      	ldr	r3, [pc, #344]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	4953      	ldr	r1, [pc, #332]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	4b4d      	ldr	r3, [pc, #308]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d908      	bls.n	80069ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d8:	4b4a      	ldr	r3, [pc, #296]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f023 020f 	bic.w	r2, r3, #15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4947      	ldr	r1, [pc, #284]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d055      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80069f6:	4b43      	ldr	r3, [pc, #268]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	4940      	ldr	r1, [pc, #256]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a10:	4b3c      	ldr	r3, [pc, #240]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d121      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0f6      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d107      	bne.n	8006a38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a28:	4b36      	ldr	r3, [pc, #216]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d115      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e0ea      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a40:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e0de      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a50:	4b2c      	ldr	r3, [pc, #176]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e0d6      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a60:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f023 0207 	bic.w	r2, r3, #7
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4925      	ldr	r1, [pc, #148]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a72:	f7fb fba3 	bl	80021bc <HAL_GetTick>
 8006a76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a78:	e00a      	b.n	8006a90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a7a:	f7fb fb9f 	bl	80021bc <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e0be      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a90:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d1eb      	bne.n	8006a7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d010      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d208      	bcs.n	8006ad0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f023 020f 	bic.w	r2, r3, #15
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	490e      	ldr	r1, [pc, #56]	; (8006b04 <HAL_RCC_ClockConfig+0x244>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d214      	bcs.n	8006b08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ade:	4b08      	ldr	r3, [pc, #32]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f023 020f 	bic.w	r2, r3, #15
 8006ae6:	4906      	ldr	r1, [pc, #24]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <HAL_RCC_ClockConfig+0x240>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d005      	beq.n	8006b08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e086      	b.n	8006c0e <HAL_RCC_ClockConfig+0x34e>
 8006b00:	52002000 	.word	0x52002000
 8006b04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d010      	beq.n	8006b36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	4b3f      	ldr	r3, [pc, #252]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d208      	bcs.n	8006b36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b24:	4b3c      	ldr	r3, [pc, #240]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	4939      	ldr	r1, [pc, #228]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	4b34      	ldr	r3, [pc, #208]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d208      	bcs.n	8006b64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b52:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	492e      	ldr	r1, [pc, #184]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699a      	ldr	r2, [r3, #24]
 8006b74:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d208      	bcs.n	8006b92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b80:	4b25      	ldr	r3, [pc, #148]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	4922      	ldr	r1, [pc, #136]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d010      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69da      	ldr	r2, [r3, #28]
 8006ba2:	4b1d      	ldr	r3, [pc, #116]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d208      	bcs.n	8006bc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006bae:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	4917      	ldr	r1, [pc, #92]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bc0:	f000 f834 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	4912      	ldr	r1, [pc, #72]	; (8006c1c <HAL_RCC_ClockConfig+0x35c>)
 8006bd2:	5ccb      	ldrb	r3, [r1, r3]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bde:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <HAL_RCC_ClockConfig+0x358>)
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <HAL_RCC_ClockConfig+0x35c>)
 8006be8:	5cd3      	ldrb	r3, [r2, r3]
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf4:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <HAL_RCC_ClockConfig+0x360>)
 8006bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bf8:	4a0a      	ldr	r2, [pc, #40]	; (8006c24 <HAL_RCC_ClockConfig+0x364>)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <HAL_RCC_ClockConfig+0x368>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fb fa90 	bl	8002128 <HAL_InitTick>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	08018494 	.word	0x08018494
 8006c20:	24000008 	.word	0x24000008
 8006c24:	24000004 	.word	0x24000004
 8006c28:	2400000c 	.word	0x2400000c

08006c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b089      	sub	sp, #36	; 0x24
 8006c30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c32:	4bb3      	ldr	r3, [pc, #716]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c3a:	2b18      	cmp	r3, #24
 8006c3c:	f200 8155 	bhi.w	8006eea <HAL_RCC_GetSysClockFreq+0x2be>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006cad 	.word	0x08006cad
 8006c4c:	08006eeb 	.word	0x08006eeb
 8006c50:	08006eeb 	.word	0x08006eeb
 8006c54:	08006eeb 	.word	0x08006eeb
 8006c58:	08006eeb 	.word	0x08006eeb
 8006c5c:	08006eeb 	.word	0x08006eeb
 8006c60:	08006eeb 	.word	0x08006eeb
 8006c64:	08006eeb 	.word	0x08006eeb
 8006c68:	08006cd3 	.word	0x08006cd3
 8006c6c:	08006eeb 	.word	0x08006eeb
 8006c70:	08006eeb 	.word	0x08006eeb
 8006c74:	08006eeb 	.word	0x08006eeb
 8006c78:	08006eeb 	.word	0x08006eeb
 8006c7c:	08006eeb 	.word	0x08006eeb
 8006c80:	08006eeb 	.word	0x08006eeb
 8006c84:	08006eeb 	.word	0x08006eeb
 8006c88:	08006cd9 	.word	0x08006cd9
 8006c8c:	08006eeb 	.word	0x08006eeb
 8006c90:	08006eeb 	.word	0x08006eeb
 8006c94:	08006eeb 	.word	0x08006eeb
 8006c98:	08006eeb 	.word	0x08006eeb
 8006c9c:	08006eeb 	.word	0x08006eeb
 8006ca0:	08006eeb 	.word	0x08006eeb
 8006ca4:	08006eeb 	.word	0x08006eeb
 8006ca8:	08006cdf 	.word	0x08006cdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cac:	4b94      	ldr	r3, [pc, #592]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cb8:	4b91      	ldr	r3, [pc, #580]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	08db      	lsrs	r3, r3, #3
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	4a90      	ldr	r2, [pc, #576]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006cca:	e111      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ccc:	4b8d      	ldr	r3, [pc, #564]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cce:	61bb      	str	r3, [r7, #24]
      break;
 8006cd0:	e10e      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006cd2:	4b8d      	ldr	r3, [pc, #564]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cd4:	61bb      	str	r3, [r7, #24]
      break;
 8006cd6:	e10b      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006cd8:	4b8c      	ldr	r3, [pc, #560]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006cda:	61bb      	str	r3, [r7, #24]
      break;
 8006cdc:	e108      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cde:	4b88      	ldr	r3, [pc, #544]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ce8:	4b85      	ldr	r3, [pc, #532]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cf4:	4b82      	ldr	r3, [pc, #520]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006cfe:	4b80      	ldr	r3, [pc, #512]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	08db      	lsrs	r3, r3, #3
 8006d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80e1 	beq.w	8006ee4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	f000 8083 	beq.w	8006e30 <HAL_RCC_GetSysClockFreq+0x204>
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	f200 80a1 	bhi.w	8006e74 <HAL_RCC_GetSysClockFreq+0x248>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCC_GetSysClockFreq+0x114>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d056      	beq.n	8006dec <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d3e:	e099      	b.n	8006e74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d40:	4b6f      	ldr	r3, [pc, #444]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d02d      	beq.n	8006da8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d4c:	4b6c      	ldr	r3, [pc, #432]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	4a6b      	ldr	r2, [pc, #428]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b62      	ldr	r3, [pc, #392]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006da6:	e087      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b51      	ldr	r3, [pc, #324]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dea:	e065      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b40      	ldr	r3, [pc, #256]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e2e:	e043      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b2f      	ldr	r3, [pc, #188]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e72:	e021      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b1e      	ldr	r3, [pc, #120]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	0a5b      	lsrs	r3, r3, #9
 8006ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	ee07 3a90 	vmov	s15, r3
 8006ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006edc:	ee17 3a90 	vmov	r3, s15
 8006ee0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006ee2:	e005      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61bb      	str	r3, [r7, #24]
      break;
 8006ee8:	e002      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006eec:	61bb      	str	r3, [r7, #24]
      break;
 8006eee:	bf00      	nop
  }

  return sysclockfreq;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3724      	adds	r7, #36	; 0x24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
 8006f04:	03d09000 	.word	0x03d09000
 8006f08:	003d0900 	.word	0x003d0900
 8006f0c:	007a1200 	.word	0x007a1200
 8006f10:	46000000 	.word	0x46000000
 8006f14:	4c742400 	.word	0x4c742400
 8006f18:	4a742400 	.word	0x4a742400
 8006f1c:	4af42400 	.word	0x4af42400

08006f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f26:	f7ff fe81 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	490f      	ldr	r1, [pc, #60]	; (8006f74 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f38:	5ccb      	ldrb	r3, [r1, r3]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f44:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f4e:	5cd3      	ldrb	r3, [r2, r3]
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5a:	4a07      	ldr	r2, [pc, #28]	; (8006f78 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f5e:	4a07      	ldr	r2, [pc, #28]	; (8006f7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f66:	681b      	ldr	r3, [r3, #0]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	58024400 	.word	0x58024400
 8006f74:	08018494 	.word	0x08018494
 8006f78:	24000008 	.word	0x24000008
 8006f7c:	24000004 	.word	0x24000004

08006f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f84:	f7ff ffcc 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	091b      	lsrs	r3, r3, #4
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	4904      	ldr	r1, [pc, #16]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f96:	5ccb      	ldrb	r3, [r1, r3]
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	08018494 	.word	0x08018494

08006fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006fb0:	f7ff ffb6 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	4904      	ldr	r1, [pc, #16]	; (8006fd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fc2:	5ccb      	ldrb	r3, [r1, r3]
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	58024400 	.word	0x58024400
 8006fd4:	08018494 	.word	0x08018494

08006fd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fdc:	b0ca      	sub	sp, #296	; 0x128
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fea:	2300      	movs	r3, #0
 8006fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006ffc:	2500      	movs	r5, #0
 8006ffe:	ea54 0305 	orrs.w	r3, r4, r5
 8007002:	d049      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800700a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800700e:	d02f      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007010:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007014:	d828      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800701a:	d01a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800701c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007020:	d822      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702a:	d007      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800702c:	e01c      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702e:	4bb8      	ldr	r3, [pc, #736]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4ab7      	ldr	r2, [pc, #732]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800703a:	e01a      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007040:	3308      	adds	r3, #8
 8007042:	2102      	movs	r1, #2
 8007044:	4618      	mov	r0, r3
 8007046:	f001 fc8f 	bl	8008968 <RCCEx_PLL2_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007050:	e00f      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007056:	3328      	adds	r3, #40	; 0x28
 8007058:	2102      	movs	r1, #2
 800705a:	4618      	mov	r0, r3
 800705c:	f001 fd36 	bl	8008acc <RCCEx_PLL3_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007066:	e004      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800706e:	e000      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800707a:	4ba5      	ldr	r3, [pc, #660]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800707c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007088:	4aa1      	ldr	r2, [pc, #644]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800708a:	430b      	orrs	r3, r1
 800708c:	6513      	str	r3, [r2, #80]	; 0x50
 800708e:	e003      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80070a4:	f04f 0900 	mov.w	r9, #0
 80070a8:	ea58 0309 	orrs.w	r3, r8, r9
 80070ac:	d047      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d82a      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070d5 	.word	0x080070d5
 80070c4:	080070e3 	.word	0x080070e3
 80070c8:	080070f9 	.word	0x080070f9
 80070cc:	08007117 	.word	0x08007117
 80070d0:	08007117 	.word	0x08007117
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d4:	4b8e      	ldr	r3, [pc, #568]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	4a8d      	ldr	r2, [pc, #564]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070e0:	e01a      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e6:	3308      	adds	r3, #8
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 fc3c 	bl	8008968 <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070f6:	e00f      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fc:	3328      	adds	r3, #40	; 0x28
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fce3 	bl	8008acc <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800710c:	e004      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007114:	e000      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007120:	4b7b      	ldr	r3, [pc, #492]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007124:	f023 0107 	bic.w	r1, r3, #7
 8007128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	4a78      	ldr	r2, [pc, #480]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007130:	430b      	orrs	r3, r1
 8007132:	6513      	str	r3, [r2, #80]	; 0x50
 8007134:	e003      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800713a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800714a:	f04f 0b00 	mov.w	fp, #0
 800714e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007152:	d04c      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715e:	d030      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d829      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007166:	2bc0      	cmp	r3, #192	; 0xc0
 8007168:	d02d      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800716a:	2bc0      	cmp	r3, #192	; 0xc0
 800716c:	d825      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800716e:	2b80      	cmp	r3, #128	; 0x80
 8007170:	d018      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007172:	2b80      	cmp	r3, #128	; 0x80
 8007174:	d821      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d007      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800717e:	e01c      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007180:	4b63      	ldr	r3, [pc, #396]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a62      	ldr	r2, [pc, #392]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800718c:	e01c      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007192:	3308      	adds	r3, #8
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fbe6 	bl	8008968 <RCCEx_PLL2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80071a2:	e011      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a8:	3328      	adds	r3, #40	; 0x28
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 fc8d 	bl	8008acc <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80071b8:	e006      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071c0:	e002      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80071c2:	bf00      	nop
 80071c4:	e000      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80071c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80071d0:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071de:	4a4c      	ldr	r2, [pc, #304]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071e0:	430b      	orrs	r3, r1
 80071e2:	6513      	str	r3, [r2, #80]	; 0x50
 80071e4:	e003      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80071fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007204:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007208:	460b      	mov	r3, r1
 800720a:	4313      	orrs	r3, r2
 800720c:	d053      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007212:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800721a:	d035      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800721c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007220:	d82e      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007222:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007226:	d031      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007228:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800722c:	d828      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800722e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007232:	d01a      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007238:	d822      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800723e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007242:	d007      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007244:	e01c      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007246:	4b32      	ldr	r3, [pc, #200]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a31      	ldr	r2, [pc, #196]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800724c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007250:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007252:	e01c      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007258:	3308      	adds	r3, #8
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f001 fb83 	bl	8008968 <RCCEx_PLL2_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007268:	e011      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726e:	3328      	adds	r3, #40	; 0x28
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f001 fc2a 	bl	8008acc <RCCEx_PLL3_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800727e:	e006      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007286:	e002      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800728c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007296:	4b1e      	ldr	r3, [pc, #120]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072a6:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6593      	str	r3, [r2, #88]	; 0x58
 80072ac:	e003      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80072c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80072d0:	460b      	mov	r3, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	d056      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072e2:	d038      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80072e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072e8:	d831      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072ee:	d034      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80072f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072f4:	d82b      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072fa:	d01d      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80072fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007300:	d825      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d006      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800730a:	d00a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800730c:	e01f      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800730e:	bf00      	nop
 8007310:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007314:	4ba2      	ldr	r3, [pc, #648]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	4aa1      	ldr	r2, [pc, #644]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800731a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800731e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007320:	e01c      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007326:	3308      	adds	r3, #8
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f001 fb1c 	bl	8008968 <RCCEx_PLL2_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007336:	e011      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733c:	3328      	adds	r3, #40	; 0x28
 800733e:	2100      	movs	r1, #0
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fbc3 	bl	8008acc <RCCEx_PLL3_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800734c:	e006      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007354:	e002      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007356:	bf00      	nop
 8007358:	e000      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800735a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007364:	4b8e      	ldr	r3, [pc, #568]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007368:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007370:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007374:	4a8a      	ldr	r2, [pc, #552]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007376:	430b      	orrs	r3, r1
 8007378:	6593      	str	r3, [r2, #88]	; 0x58
 800737a:	e003      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800739a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800739e:	460b      	mov	r3, r1
 80073a0:	4313      	orrs	r3, r2
 80073a2:	d03a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073aa:	2b30      	cmp	r3, #48	; 0x30
 80073ac:	d01f      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80073ae:	2b30      	cmp	r3, #48	; 0x30
 80073b0:	d819      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d00c      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d815      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d019      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80073be:	2b10      	cmp	r3, #16
 80073c0:	d111      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c2:	4b77      	ldr	r3, [pc, #476]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	4a76      	ldr	r2, [pc, #472]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80073ce:	e011      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d4:	3308      	adds	r3, #8
 80073d6:	2102      	movs	r1, #2
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 fac5 	bl	8008968 <RCCEx_PLL2_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80073e4:	e006      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80073f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073fc:	4b68      	ldr	r3, [pc, #416]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007400:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740a:	4a65      	ldr	r2, [pc, #404]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740c:	430b      	orrs	r3, r1
 800740e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007410:	e003      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007426:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800742a:	2300      	movs	r3, #0
 800742c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007430:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007434:	460b      	mov	r3, r1
 8007436:	4313      	orrs	r3, r2
 8007438:	d051      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007444:	d035      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800744a:	d82e      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800744c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007450:	d031      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007456:	d828      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745c:	d01a      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800745e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007462:	d822      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746c:	d007      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800746e:	e01c      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007470:	4b4b      	ldr	r3, [pc, #300]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4a4a      	ldr	r2, [pc, #296]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800747a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800747c:	e01c      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007482:	3308      	adds	r3, #8
 8007484:	2100      	movs	r1, #0
 8007486:	4618      	mov	r0, r3
 8007488:	f001 fa6e 	bl	8008968 <RCCEx_PLL2_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007492:	e011      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007498:	3328      	adds	r3, #40	; 0x28
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f001 fb15 	bl	8008acc <RCCEx_PLL3_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074a8:	e006      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074b0:	e002      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80074b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074c0:	4b37      	ldr	r3, [pc, #220]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ce:	4a34      	ldr	r2, [pc, #208]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6513      	str	r3, [r2, #80]	; 0x50
 80074d4:	e003      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80074ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ee:	2300      	movs	r3, #0
 80074f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80074f8:	460b      	mov	r3, r1
 80074fa:	4313      	orrs	r3, r2
 80074fc:	d056      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007508:	d033      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800750a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800750e:	d82c      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007514:	d02f      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800751a:	d826      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800751c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007520:	d02b      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007526:	d820      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800752c:	d012      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800752e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007532:	d81a      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d022      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753c:	d115      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007542:	3308      	adds	r3, #8
 8007544:	2101      	movs	r1, #1
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fa0e 	bl	8008968 <RCCEx_PLL2_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007552:	e015      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007558:	3328      	adds	r3, #40	; 0x28
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fab5 	bl	8008acc <RCCEx_PLL3_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007568:	e00a      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007570:	e006      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007572:	bf00      	nop
 8007574:	e004      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007576:	bf00      	nop
 8007578:	e002      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800757a:	bf00      	nop
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800757e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10d      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007596:	4a02      	ldr	r2, [pc, #8]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007598:	430b      	orrs	r3, r1
 800759a:	6513      	str	r3, [r2, #80]	; 0x50
 800759c:	e006      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800759e:	bf00      	nop
 80075a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80075b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075bc:	2300      	movs	r3, #0
 80075be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	d055      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d8:	d033      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80075da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075de:	d82c      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e4:	d02f      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ea:	d826      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075f0:	d02b      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80075f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075f6:	d820      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fc:	d012      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80075fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007602:	d81a      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d022      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760c:	d115      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007612:	3308      	adds	r3, #8
 8007614:	2101      	movs	r1, #1
 8007616:	4618      	mov	r0, r3
 8007618:	f001 f9a6 	bl	8008968 <RCCEx_PLL2_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007622:	e015      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007628:	3328      	adds	r3, #40	; 0x28
 800762a:	2101      	movs	r1, #1
 800762c:	4618      	mov	r0, r3
 800762e:	f001 fa4d 	bl	8008acc <RCCEx_PLL3_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007638:	e00a      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007640:	e006      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007642:	bf00      	nop
 8007644:	e004      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007646:	bf00      	nop
 8007648:	e002      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800764a:	bf00      	nop
 800764c:	e000      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800764e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007658:	4ba3      	ldr	r3, [pc, #652]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800765a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007668:	4a9f      	ldr	r2, [pc, #636]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800766a:	430b      	orrs	r3, r1
 800766c:	6593      	str	r3, [r2, #88]	; 0x58
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007688:	2300      	movs	r3, #0
 800768a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800768e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007692:	460b      	mov	r3, r1
 8007694:	4313      	orrs	r3, r2
 8007696:	d037      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a2:	d00e      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80076a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a8:	d816      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d018      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80076ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b2:	d111      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b4:	4b8c      	ldr	r3, [pc, #560]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	4a8b      	ldr	r2, [pc, #556]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076c0:	e00f      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c6:	3308      	adds	r3, #8
 80076c8:	2101      	movs	r1, #1
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 f94c 	bl	8008968 <RCCEx_PLL2_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076d6:	e004      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076de:	e000      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80076e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076ea:	4b7f      	ldr	r3, [pc, #508]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f8:	4a7b      	ldr	r2, [pc, #492]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076fa:	430b      	orrs	r3, r1
 80076fc:	6513      	str	r3, [r2, #80]	; 0x50
 80076fe:	e003      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007704:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007718:	2300      	movs	r3, #0
 800771a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800771e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007722:	460b      	mov	r3, r1
 8007724:	4313      	orrs	r3, r2
 8007726:	d039      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800772c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772e:	2b03      	cmp	r3, #3
 8007730:	d81c      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007775 	.word	0x08007775
 800773c:	08007749 	.word	0x08007749
 8007740:	08007757 	.word	0x08007757
 8007744:	08007775 	.word	0x08007775
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007748:	4b67      	ldr	r3, [pc, #412]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a66      	ldr	r2, [pc, #408]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007754:	e00f      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	3308      	adds	r3, #8
 800775c:	2102      	movs	r1, #2
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f902 	bl	8008968 <RCCEx_PLL2_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800776a:	e004      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007772:	e000      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800777e:	4b5a      	ldr	r3, [pc, #360]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007782:	f023 0103 	bic.w	r1, r3, #3
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800778a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800778c:	4a56      	ldr	r2, [pc, #344]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800778e:	430b      	orrs	r3, r1
 8007790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80077a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f000 809f 	beq.w	80078fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077be:	4b4b      	ldr	r3, [pc, #300]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a4a      	ldr	r2, [pc, #296]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80077c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077ca:	f7fa fcf7 	bl	80021bc <HAL_GetTick>
 80077ce:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d2:	e00b      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d4:	f7fa fcf2 	bl	80021bc <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b64      	cmp	r3, #100	; 0x64
 80077e2:	d903      	bls.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077ea:	e005      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ec:	4b3f      	ldr	r3, [pc, #252]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0ed      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80077f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d179      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007800:	4b39      	ldr	r3, [pc, #228]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007808:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800780c:	4053      	eors	r3, r2
 800780e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007812:	2b00      	cmp	r3, #0
 8007814:	d015      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007816:	4b34      	ldr	r3, [pc, #208]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007822:	4b31      	ldr	r3, [pc, #196]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007826:	4a30      	ldr	r2, [pc, #192]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800782c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800782e:	4b2e      	ldr	r3, [pc, #184]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	4a2d      	ldr	r2, [pc, #180]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007838:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800783a:	4a2b      	ldr	r2, [pc, #172]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007840:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d118      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fa fcb4 	bl	80021bc <HAL_GetTick>
 8007854:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007858:	e00d      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fa fcaf 	bl	80021bc <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007864:	1ad2      	subs	r2, r2, r3
 8007866:	f241 3388 	movw	r3, #5000	; 0x1388
 800786a:	429a      	cmp	r2, r3
 800786c:	d903      	bls.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007874:	e005      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007876:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0eb      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007886:	2b00      	cmp	r3, #0
 8007888:	d129      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800789a:	d10e      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800789c:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078ac:	091a      	lsrs	r2, r3, #4
 80078ae:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	4a0d      	ldr	r2, [pc, #52]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6113      	str	r3, [r2, #16]
 80078b8:	e005      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80078ba:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	4a0a      	ldr	r2, [pc, #40]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80078c4:	6113      	str	r3, [r2, #16]
 80078c6:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078d6:	4a04      	ldr	r2, [pc, #16]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d8:	430b      	orrs	r3, r1
 80078da:	6713      	str	r3, [r2, #112]	; 0x70
 80078dc:	e00e      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80078e6:	e009      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80078e8:	58024400 	.word	0x58024400
 80078ec:	58024800 	.word	0x58024800
 80078f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f002 0301 	and.w	r3, r2, #1
 8007908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007912:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	f000 8089 	beq.w	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007924:	2b28      	cmp	r3, #40	; 0x28
 8007926:	d86b      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007a09 	.word	0x08007a09
 8007934:	08007a01 	.word	0x08007a01
 8007938:	08007a01 	.word	0x08007a01
 800793c:	08007a01 	.word	0x08007a01
 8007940:	08007a01 	.word	0x08007a01
 8007944:	08007a01 	.word	0x08007a01
 8007948:	08007a01 	.word	0x08007a01
 800794c:	08007a01 	.word	0x08007a01
 8007950:	080079d5 	.word	0x080079d5
 8007954:	08007a01 	.word	0x08007a01
 8007958:	08007a01 	.word	0x08007a01
 800795c:	08007a01 	.word	0x08007a01
 8007960:	08007a01 	.word	0x08007a01
 8007964:	08007a01 	.word	0x08007a01
 8007968:	08007a01 	.word	0x08007a01
 800796c:	08007a01 	.word	0x08007a01
 8007970:	080079eb 	.word	0x080079eb
 8007974:	08007a01 	.word	0x08007a01
 8007978:	08007a01 	.word	0x08007a01
 800797c:	08007a01 	.word	0x08007a01
 8007980:	08007a01 	.word	0x08007a01
 8007984:	08007a01 	.word	0x08007a01
 8007988:	08007a01 	.word	0x08007a01
 800798c:	08007a01 	.word	0x08007a01
 8007990:	08007a09 	.word	0x08007a09
 8007994:	08007a01 	.word	0x08007a01
 8007998:	08007a01 	.word	0x08007a01
 800799c:	08007a01 	.word	0x08007a01
 80079a0:	08007a01 	.word	0x08007a01
 80079a4:	08007a01 	.word	0x08007a01
 80079a8:	08007a01 	.word	0x08007a01
 80079ac:	08007a01 	.word	0x08007a01
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a01 	.word	0x08007a01
 80079b8:	08007a01 	.word	0x08007a01
 80079bc:	08007a01 	.word	0x08007a01
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	08007a01 	.word	0x08007a01
 80079c8:	08007a01 	.word	0x08007a01
 80079cc:	08007a01 	.word	0x08007a01
 80079d0:	08007a09 	.word	0x08007a09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	3308      	adds	r3, #8
 80079da:	2101      	movs	r1, #1
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 ffc3 	bl	8008968 <RCCEx_PLL2_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079e8:	e00f      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ee:	3328      	adds	r3, #40	; 0x28
 80079f0:	2101      	movs	r1, #1
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f86a 	bl	8008acc <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a12:	4bbf      	ldr	r3, [pc, #764]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a16:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a20:	4abb      	ldr	r2, [pc, #748]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a22:	430b      	orrs	r3, r1
 8007a24:	6553      	str	r3, [r2, #84]	; 0x54
 8007a26:	e003      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f002 0302 	and.w	r3, r2, #2
 8007a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a40:	2300      	movs	r3, #0
 8007a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	d041      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	d824      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007a79 	.word	0x08007a79
 8007a68:	08007a8f 	.word	0x08007a8f
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	2101      	movs	r1, #1
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 ff71 	bl	8008968 <RCCEx_PLL2_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e00f      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a92:	3328      	adds	r3, #40	; 0x28
 8007a94:	2101      	movs	r1, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 f818 	bl	8008acc <RCCEx_PLL3_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007aa2:	e004      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007aaa:	e000      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ab6:	4b96      	ldr	r3, [pc, #600]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f023 0107 	bic.w	r1, r3, #7
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac4:	4a92      	ldr	r2, [pc, #584]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	6553      	str	r3, [r2, #84]	; 0x54
 8007aca:	e003      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f002 0304 	and.w	r3, r2, #4
 8007ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4313      	orrs	r3, r2
 8007af2:	d044      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007afc:	2b05      	cmp	r3, #5
 8007afe:	d825      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b21 	.word	0x08007b21
 8007b10:	08007b37 	.word	0x08007b37
 8007b14:	08007b55 	.word	0x08007b55
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b55 	.word	0x08007b55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	3308      	adds	r3, #8
 8007b26:	2101      	movs	r1, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 ff1d 	bl	8008968 <RCCEx_PLL2_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b34:	e00f      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3a:	3328      	adds	r3, #40	; 0x28
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 ffc4 	bl	8008acc <RCCEx_PLL3_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b4a:	e004      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b52:	e000      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b5e:	4b6c      	ldr	r3, [pc, #432]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b62:	f023 0107 	bic.w	r1, r3, #7
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b6e:	4a68      	ldr	r2, [pc, #416]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6593      	str	r3, [r2, #88]	; 0x58
 8007b74:	e003      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f002 0320 	and.w	r3, r2, #32
 8007b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	d055      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007baa:	d033      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bb0:	d82c      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb6:	d02f      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bbc:	d826      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bc2:	d02b      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bc8:	d820      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bce:	d012      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bd4:	d81a      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d022      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bde:	d115      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be4:	3308      	adds	r3, #8
 8007be6:	2100      	movs	r1, #0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 febd 	bl	8008968 <RCCEx_PLL2_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bf4:	e015      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfa:	3328      	adds	r3, #40	; 0x28
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 ff64 	bl	8008acc <RCCEx_PLL3_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c0a:	e00a      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c12:	e006      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c14:	bf00      	nop
 8007c16:	e004      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c18:	bf00      	nop
 8007c1a:	e002      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c1c:	bf00      	nop
 8007c1e:	e000      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c2a:	4b39      	ldr	r3, [pc, #228]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	4a35      	ldr	r2, [pc, #212]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	6553      	str	r3, [r2, #84]	; 0x54
 8007c40:	e003      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4313      	orrs	r3, r2
 8007c68:	d058      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c76:	d033      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007c78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c7c:	d82c      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c82:	d02f      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c88:	d826      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c8e:	d02b      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c94:	d820      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9a:	d012      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca0:	d81a      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d022      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007caa:	d115      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fe57 	bl	8008968 <RCCEx_PLL2_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007cc0:	e015      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc6:	3328      	adds	r3, #40	; 0x28
 8007cc8:	2102      	movs	r1, #2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fefe 	bl	8008acc <RCCEx_PLL3_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007cd6:	e00a      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cde:	e006      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ce0:	bf00      	nop
 8007ce2:	e004      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ce4:	bf00      	nop
 8007ce6:	e002      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ce8:	bf00      	nop
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10e      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cf6:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d06:	4a02      	ldr	r2, [pc, #8]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d0c:	e006      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007d0e:	bf00      	nop
 8007d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007d36:	460b      	mov	r3, r1
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	d055      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d48:	d033      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007d4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d4e:	d82c      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d54:	d02f      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d5a:	d826      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d60:	d02b      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007d62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d66:	d820      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d6c:	d012      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d72:	d81a      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d022      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7c:	d115      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d82:	3308      	adds	r3, #8
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fdee 	bl	8008968 <RCCEx_PLL2_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d92:	e015      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d98:	3328      	adds	r3, #40	; 0x28
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fe95 	bl	8008acc <RCCEx_PLL3_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007da8:	e00a      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007db0:	e006      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007db2:	bf00      	nop
 8007db4:	e004      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007db6:	bf00      	nop
 8007db8:	e002      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007dba:	bf00      	nop
 8007dbc:	e000      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10b      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007dc8:	4ba1      	ldr	r3, [pc, #644]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dcc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dd8:	4a9d      	ldr	r2, [pc, #628]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8007dde:	e003      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f002 0308 	and.w	r3, r2, #8
 8007df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dfe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007e02:	460b      	mov	r3, r1
 8007e04:	4313      	orrs	r3, r2
 8007e06:	d01e      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e14:	d10c      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1a:	3328      	adds	r3, #40	; 0x28
 8007e1c:	2102      	movs	r1, #2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fe54 	bl	8008acc <RCCEx_PLL3_Config>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e30:	4b87      	ldr	r3, [pc, #540]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e40:	4a83      	ldr	r2, [pc, #524]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f002 0310 	and.w	r3, r2, #16
 8007e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e56:	2300      	movs	r3, #0
 8007e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007e5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007e60:	460b      	mov	r3, r1
 8007e62:	4313      	orrs	r3, r2
 8007e64:	d01e      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e72:	d10c      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e78:	3328      	adds	r3, #40	; 0x28
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fe25 	bl	8008acc <RCCEx_PLL3_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e8e:	4b70      	ldr	r3, [pc, #448]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e9e:	4a6c      	ldr	r2, [pc, #432]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007eba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	d03e      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed0:	d022      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed6:	d81b      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee0:	d00b      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007ee2:	e015      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee8:	3308      	adds	r3, #8
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fd3b 	bl	8008968 <RCCEx_PLL2_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ef8:	e00f      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efe:	3328      	adds	r3, #40	; 0x28
 8007f00:	2102      	movs	r1, #2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fde2 	bl	8008acc <RCCEx_PLL3_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f0e:	e004      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f16:	e000      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10b      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f22:	4b4b      	ldr	r3, [pc, #300]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f32:	4a47      	ldr	r2, [pc, #284]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6593      	str	r3, [r2, #88]	; 0x58
 8007f38:	e003      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007f4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f50:	2300      	movs	r3, #0
 8007f52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	d03b      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f6a:	d01f      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007f6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f70:	d818      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f76:	d003      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f7c:	d007      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007f7e:	e011      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f80:	4b33      	ldr	r3, [pc, #204]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	4a32      	ldr	r2, [pc, #200]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f8c:	e00f      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f92:	3328      	adds	r3, #40	; 0x28
 8007f94:	2101      	movs	r1, #1
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fd98 	bl	8008acc <RCCEx_PLL3_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fa2:	e004      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007faa:	e000      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fb6:	4b26      	ldr	r3, [pc, #152]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc6:	4a22      	ldr	r2, [pc, #136]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6553      	str	r3, [r2, #84]	; 0x54
 8007fcc:	e003      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	677b      	str	r3, [r7, #116]	; 0x74
 8007fe8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007fec:	460b      	mov	r3, r1
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	d034      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008000:	d007      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008002:	e011      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008004:	4b12      	ldr	r3, [pc, #72]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4a11      	ldr	r2, [pc, #68]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800800a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800800e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008010:	e00e      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008016:	3308      	adds	r3, #8
 8008018:	2102      	movs	r1, #2
 800801a:	4618      	mov	r0, r3
 800801c:	f000 fca4 	bl	8008968 <RCCEx_PLL2_Config>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008026:	e003      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800802e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10d      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800803a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008046:	4a02      	ldr	r2, [pc, #8]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008048:	430b      	orrs	r3, r1
 800804a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800804c:	e006      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800804e:	bf00      	nop
 8008050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008054:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008068:	66bb      	str	r3, [r7, #104]	; 0x68
 800806a:	2300      	movs	r3, #0
 800806c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800806e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008072:	460b      	mov	r3, r1
 8008074:	4313      	orrs	r3, r2
 8008076:	d00c      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807c:	3328      	adds	r3, #40	; 0x28
 800807e:	2102      	movs	r1, #2
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fd23 	bl	8008acc <RCCEx_PLL3_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800809e:	663b      	str	r3, [r7, #96]	; 0x60
 80080a0:	2300      	movs	r3, #0
 80080a2:	667b      	str	r3, [r7, #100]	; 0x64
 80080a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80080a8:	460b      	mov	r3, r1
 80080aa:	4313      	orrs	r3, r2
 80080ac:	d038      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ba:	d018      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80080bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080c0:	d811      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80080c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080c6:	d014      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80080c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080cc:	d80b      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d011      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	d106      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d8:	4bc3      	ldr	r3, [pc, #780]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	4ac2      	ldr	r2, [pc, #776]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80080e4:	e008      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080ec:	e004      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080ee:	bf00      	nop
 80080f0:	e002      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80080f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10b      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008100:	4bb9      	ldr	r3, [pc, #740]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008104:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800810c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008110:	4ab5      	ldr	r2, [pc, #724]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008112:	430b      	orrs	r3, r1
 8008114:	6553      	str	r3, [r2, #84]	; 0x54
 8008116:	e003      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800811c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800812c:	65bb      	str	r3, [r7, #88]	; 0x58
 800812e:	2300      	movs	r3, #0
 8008130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008132:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008136:	460b      	mov	r3, r1
 8008138:	4313      	orrs	r3, r2
 800813a:	d009      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800813c:	4baa      	ldr	r3, [pc, #680]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800813e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008140:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814a:	4aa7      	ldr	r2, [pc, #668]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800814c:	430b      	orrs	r3, r1
 800814e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800815c:	653b      	str	r3, [r7, #80]	; 0x50
 800815e:	2300      	movs	r3, #0
 8008160:	657b      	str	r3, [r7, #84]	; 0x54
 8008162:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d00a      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800816c:	4b9e      	ldr	r3, [pc, #632]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008178:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800817c:	4a9a      	ldr	r2, [pc, #616]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800817e:	430b      	orrs	r3, r1
 8008180:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800818e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008190:	2300      	movs	r3, #0
 8008192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008194:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008198:	460b      	mov	r3, r1
 800819a:	4313      	orrs	r3, r2
 800819c:	d009      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800819e:	4b92      	ldr	r3, [pc, #584]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ac:	4a8e      	ldr	r2, [pc, #568]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ae:	430b      	orrs	r3, r1
 80081b0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80081be:	643b      	str	r3, [r7, #64]	; 0x40
 80081c0:	2300      	movs	r3, #0
 80081c2:	647b      	str	r3, [r7, #68]	; 0x44
 80081c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80081c8:	460b      	mov	r3, r1
 80081ca:	4313      	orrs	r3, r2
 80081cc:	d00e      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081ce:	4b86      	ldr	r3, [pc, #536]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	4a85      	ldr	r2, [pc, #532]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081d8:	6113      	str	r3, [r2, #16]
 80081da:	4b83      	ldr	r3, [pc, #524]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081dc:	6919      	ldr	r1, [r3, #16]
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80081e6:	4a80      	ldr	r2, [pc, #512]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081e8:	430b      	orrs	r3, r1
 80081ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80081f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80081fa:	2300      	movs	r3, #0
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008202:	460b      	mov	r3, r1
 8008204:	4313      	orrs	r3, r2
 8008206:	d009      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008208:	4b77      	ldr	r3, [pc, #476]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800820a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008216:	4a74      	ldr	r2, [pc, #464]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008218:	430b      	orrs	r3, r1
 800821a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800821c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008228:	633b      	str	r3, [r7, #48]	; 0x30
 800822a:	2300      	movs	r3, #0
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
 800822e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008232:	460b      	mov	r3, r1
 8008234:	4313      	orrs	r3, r2
 8008236:	d00a      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008238:	4b6b      	ldr	r3, [pc, #428]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800823a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008248:	4a67      	ldr	r2, [pc, #412]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800824a:	430b      	orrs	r3, r1
 800824c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	2100      	movs	r1, #0
 8008258:	62b9      	str	r1, [r7, #40]	; 0x28
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008260:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008264:	460b      	mov	r3, r1
 8008266:	4313      	orrs	r3, r2
 8008268:	d011      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826e:	3308      	adds	r3, #8
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fb78 	bl	8008968 <RCCEx_PLL2_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800827e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800828a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	2100      	movs	r1, #0
 8008298:	6239      	str	r1, [r7, #32]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	627b      	str	r3, [r7, #36]	; 0x24
 80082a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80082a4:	460b      	mov	r3, r1
 80082a6:	4313      	orrs	r3, r2
 80082a8:	d011      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ae:	3308      	adds	r3, #8
 80082b0:	2101      	movs	r1, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fb58 	bl	8008968 <RCCEx_PLL2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80082be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	2100      	movs	r1, #0
 80082d8:	61b9      	str	r1, [r7, #24]
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082e4:	460b      	mov	r3, r1
 80082e6:	4313      	orrs	r3, r2
 80082e8:	d011      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ee:	3308      	adds	r3, #8
 80082f0:	2102      	movs	r1, #2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fb38 	bl	8008968 <RCCEx_PLL2_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80082fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800830a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	2100      	movs	r1, #0
 8008318:	6139      	str	r1, [r7, #16]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008324:	460b      	mov	r3, r1
 8008326:	4313      	orrs	r3, r2
 8008328:	d011      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800832a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800832e:	3328      	adds	r3, #40	; 0x28
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fbca 	bl	8008acc <RCCEx_PLL3_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800833e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800834a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	2100      	movs	r1, #0
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008364:	460b      	mov	r3, r1
 8008366:	4313      	orrs	r3, r2
 8008368:	d011      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	3328      	adds	r3, #40	; 0x28
 8008370:	2101      	movs	r1, #1
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fbaa 	bl	8008acc <RCCEx_PLL3_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800837e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800838a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	2100      	movs	r1, #0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	607b      	str	r3, [r7, #4]
 80083a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80083a4:	460b      	mov	r3, r1
 80083a6:	4313      	orrs	r3, r2
 80083a8:	d011      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ae:	3328      	adds	r3, #40	; 0x28
 80083b0:	2102      	movs	r1, #2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fb8a 	bl	8008acc <RCCEx_PLL3_Config>
 80083b8:	4603      	mov	r3, r0
 80083ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80083be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80083ce:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e000      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
}
 80083dc:	4618      	mov	r0, r3
 80083de:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80083e2:	46bd      	mov	sp, r7
 80083e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e8:	58024400 	.word	0x58024400

080083ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80083f0:	f7fe fd96 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 80083f4:	4602      	mov	r2, r0
 80083f6:	4b06      	ldr	r3, [pc, #24]	; (8008410 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	091b      	lsrs	r3, r3, #4
 80083fc:	f003 0307 	and.w	r3, r3, #7
 8008400:	4904      	ldr	r1, [pc, #16]	; (8008414 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008402:	5ccb      	ldrb	r3, [r1, r3]
 8008404:	f003 031f 	and.w	r3, r3, #31
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800840c:	4618      	mov	r0, r3
 800840e:	bd80      	pop	{r7, pc}
 8008410:	58024400 	.word	0x58024400
 8008414:	08018494 	.word	0x08018494

08008418 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008418:	b480      	push	{r7}
 800841a:	b089      	sub	sp, #36	; 0x24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008420:	4ba1      	ldr	r3, [pc, #644]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800842a:	4b9f      	ldr	r3, [pc, #636]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842e:	0b1b      	lsrs	r3, r3, #12
 8008430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008434:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008436:	4b9c      	ldr	r3, [pc, #624]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	091b      	lsrs	r3, r3, #4
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008442:	4b99      	ldr	r3, [pc, #612]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	08db      	lsrs	r3, r3, #3
 8008448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	fb02 f303 	mul.w	r3, r2, r3
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 8111 	beq.w	8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	2b02      	cmp	r3, #2
 800846a:	f000 8083 	beq.w	8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b02      	cmp	r3, #2
 8008472:	f200 80a1 	bhi.w	80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d056      	beq.n	8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008482:	e099      	b.n	80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008484:	4b88      	ldr	r3, [pc, #544]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d02d      	beq.n	80084ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008490:	4b85      	ldr	r3, [pc, #532]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	08db      	lsrs	r3, r3, #3
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	4a84      	ldr	r2, [pc, #528]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800849c:	fa22 f303 	lsr.w	r3, r2, r3
 80084a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ba:	4b7b      	ldr	r3, [pc, #492]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084ea:	e087      	b.n	80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80084fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fe:	4b6a      	ldr	r3, [pc, #424]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008512:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800852e:	e065      	b.n	80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800853e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008542:	4b59      	ldr	r3, [pc, #356]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008552:	ed97 6a03 	vldr	s12, [r7, #12]
 8008556:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800855a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008572:	e043      	b.n	80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008586:	4b48      	ldr	r3, [pc, #288]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	ed97 6a03 	vldr	s12, [r7, #12]
 800859a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800859e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b6:	e021      	b.n	80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80085c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ca:	4b37      	ldr	r3, [pc, #220]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085da:	ed97 6a03 	vldr	s12, [r7, #12]
 80085de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80085fc:	4b2a      	ldr	r3, [pc, #168]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	0a5b      	lsrs	r3, r3, #9
 8008602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008616:	edd7 6a07 	vldr	s13, [r7, #28]
 800861a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008622:	ee17 2a90 	vmov	r2, s15
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800862a:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	0c1b      	lsrs	r3, r3, #16
 8008630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008640:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008644:	edd7 6a07 	vldr	s13, [r7, #28]
 8008648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800864c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008650:	ee17 2a90 	vmov	r2, s15
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008658:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	0e1b      	lsrs	r3, r3, #24
 800865e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800866e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008672:	edd7 6a07 	vldr	s13, [r7, #28]
 8008676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800867a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867e:	ee17 2a90 	vmov	r2, s15
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008686:	e008      	b.n	800869a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	609a      	str	r2, [r3, #8]
}
 800869a:	bf00      	nop
 800869c:	3724      	adds	r7, #36	; 0x24
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	58024400 	.word	0x58024400
 80086ac:	03d09000 	.word	0x03d09000
 80086b0:	46000000 	.word	0x46000000
 80086b4:	4c742400 	.word	0x4c742400
 80086b8:	4a742400 	.word	0x4a742400
 80086bc:	4af42400 	.word	0x4af42400

080086c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b089      	sub	sp, #36	; 0x24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086c8:	4ba1      	ldr	r3, [pc, #644]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80086d2:	4b9f      	ldr	r3, [pc, #636]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	0d1b      	lsrs	r3, r3, #20
 80086d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80086de:	4b9c      	ldr	r3, [pc, #624]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80086ea:	4b99      	ldr	r3, [pc, #612]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ee:	08db      	lsrs	r3, r3, #3
 80086f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	fb02 f303 	mul.w	r3, r2, r3
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8111 	beq.w	8008930 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b02      	cmp	r3, #2
 8008712:	f000 8083 	beq.w	800881c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b02      	cmp	r3, #2
 800871a:	f200 80a1 	bhi.w	8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d003      	beq.n	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d056      	beq.n	80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800872a:	e099      	b.n	8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800872c:	4b88      	ldr	r3, [pc, #544]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b00      	cmp	r3, #0
 8008736:	d02d      	beq.n	8008794 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008738:	4b85      	ldr	r3, [pc, #532]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	08db      	lsrs	r3, r3, #3
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	4a84      	ldr	r2, [pc, #528]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008744:	fa22 f303 	lsr.w	r3, r2, r3
 8008748:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b7b      	ldr	r3, [pc, #492]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008772:	ed97 6a03 	vldr	s12, [r7, #12]
 8008776:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008792:	e087      	b.n	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800895c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80087a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a6:	4b6a      	ldr	r3, [pc, #424]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087d6:	e065      	b.n	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ea:	4b59      	ldr	r3, [pc, #356]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800880a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800880e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800881a:	e043      	b.n	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	ee07 3a90 	vmov	s15, r3
 8008822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008826:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800882a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882e:	4b48      	ldr	r3, [pc, #288]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008842:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800885e:	e021      	b.n	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800886e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008872:	4b37      	ldr	r3, [pc, #220]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008882:	ed97 6a03 	vldr	s12, [r7, #12]
 8008886:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800888a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800889a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80088a4:	4b2a      	ldr	r3, [pc, #168]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a8:	0a5b      	lsrs	r3, r3, #9
 80088aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088be:	edd7 6a07 	vldr	s13, [r7, #28]
 80088c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ca:	ee17 2a90 	vmov	r2, s15
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80088d2:	4b1f      	ldr	r3, [pc, #124]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	0c1b      	lsrs	r3, r3, #16
 80088d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80088f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088f8:	ee17 2a90 	vmov	r2, s15
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008900:	4b13      	ldr	r3, [pc, #76]	; (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	0e1b      	lsrs	r3, r3, #24
 8008906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800891a:	edd7 6a07 	vldr	s13, [r7, #28]
 800891e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008926:	ee17 2a90 	vmov	r2, s15
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800892e:	e008      	b.n	8008942 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	609a      	str	r2, [r3, #8]
}
 8008942:	bf00      	nop
 8008944:	3724      	adds	r7, #36	; 0x24
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	58024400 	.word	0x58024400
 8008954:	03d09000 	.word	0x03d09000
 8008958:	46000000 	.word	0x46000000
 800895c:	4c742400 	.word	0x4c742400
 8008960:	4a742400 	.word	0x4a742400
 8008964:	4af42400 	.word	0x4af42400

08008968 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008976:	4b53      	ldr	r3, [pc, #332]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	f003 0303 	and.w	r3, r3, #3
 800897e:	2b03      	cmp	r3, #3
 8008980:	d101      	bne.n	8008986 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e099      	b.n	8008aba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008986:	4b4f      	ldr	r3, [pc, #316]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a4e      	ldr	r2, [pc, #312]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 800898c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008992:	f7f9 fc13 	bl	80021bc <HAL_GetTick>
 8008996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008998:	e008      	b.n	80089ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800899a:	f7f9 fc0f 	bl	80021bc <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e086      	b.n	8008aba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089ac:	4b45      	ldr	r3, [pc, #276]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1f0      	bne.n	800899a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089b8:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	031b      	lsls	r3, r3, #12
 80089c6:	493f      	ldr	r1, [pc, #252]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	628b      	str	r3, [r1, #40]	; 0x28
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	3b01      	subs	r3, #1
 80089dc:	025b      	lsls	r3, r3, #9
 80089de:	b29b      	uxth	r3, r3
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	041b      	lsls	r3, r3, #16
 80089ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	061b      	lsls	r3, r3, #24
 80089f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089fc:	4931      	ldr	r1, [pc, #196]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a02:	4b30      	ldr	r3, [pc, #192]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	492d      	ldr	r1, [pc, #180]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a10:	4313      	orrs	r3, r2
 8008a12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a14:	4b2b      	ldr	r3, [pc, #172]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	f023 0220 	bic.w	r2, r3, #32
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	4928      	ldr	r1, [pc, #160]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a26:	4b27      	ldr	r3, [pc, #156]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	4a26      	ldr	r2, [pc, #152]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a2c:	f023 0310 	bic.w	r3, r3, #16
 8008a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a32:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a36:	4b24      	ldr	r3, [pc, #144]	; (8008ac8 <RCCEx_PLL2_Config+0x160>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	69d2      	ldr	r2, [r2, #28]
 8008a3e:	00d2      	lsls	r2, r2, #3
 8008a40:	4920      	ldr	r1, [pc, #128]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a46:	4b1f      	ldr	r3, [pc, #124]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a4c:	f043 0310 	orr.w	r3, r3, #16
 8008a50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a58:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4a19      	ldr	r2, [pc, #100]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a64:	e00f      	b.n	8008a86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d106      	bne.n	8008a7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a6c:	4b15      	ldr	r3, [pc, #84]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	4a14      	ldr	r2, [pc, #80]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a78:	e005      	b.n	8008a86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a7a:	4b12      	ldr	r3, [pc, #72]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	4a11      	ldr	r2, [pc, #68]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a86:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a0e      	ldr	r2, [pc, #56]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008a8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a92:	f7f9 fb93 	bl	80021bc <HAL_GetTick>
 8008a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a98:	e008      	b.n	8008aac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a9a:	f7f9 fb8f 	bl	80021bc <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e006      	b.n	8008aba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <RCCEx_PLL2_Config+0x15c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0f0      	beq.n	8008a9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	ffff0007 	.word	0xffff0007

08008acc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ada:	4b53      	ldr	r3, [pc, #332]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d101      	bne.n	8008aea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e099      	b.n	8008c1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008aea:	4b4f      	ldr	r3, [pc, #316]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a4e      	ldr	r2, [pc, #312]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008af6:	f7f9 fb61 	bl	80021bc <HAL_GetTick>
 8008afa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008afc:	e008      	b.n	8008b10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008afe:	f7f9 fb5d 	bl	80021bc <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e086      	b.n	8008c1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b10:	4b45      	ldr	r3, [pc, #276]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1f0      	bne.n	8008afe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b1c:	4b42      	ldr	r3, [pc, #264]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	051b      	lsls	r3, r3, #20
 8008b2a:	493f      	ldr	r1, [pc, #252]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	628b      	str	r3, [r1, #40]	; 0x28
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	025b      	lsls	r3, r3, #9
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	041b      	lsls	r3, r3, #16
 8008b4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	061b      	lsls	r3, r3, #24
 8008b5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b60:	4931      	ldr	r1, [pc, #196]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b66:	4b30      	ldr	r3, [pc, #192]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	492d      	ldr	r1, [pc, #180]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b78:	4b2b      	ldr	r3, [pc, #172]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	4928      	ldr	r1, [pc, #160]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b8a:	4b27      	ldr	r3, [pc, #156]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b96:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b9a:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <RCCEx_PLL3_Config+0x160>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	69d2      	ldr	r2, [r2, #28]
 8008ba2:	00d2      	lsls	r2, r2, #3
 8008ba4:	4920      	ldr	r1, [pc, #128]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008baa:	4b1f      	ldr	r3, [pc, #124]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	4a1e      	ldr	r2, [pc, #120]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bbc:	4b1a      	ldr	r3, [pc, #104]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	4a19      	ldr	r2, [pc, #100]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bc8:	e00f      	b.n	8008bea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d106      	bne.n	8008bde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008bd0:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	4a14      	ldr	r2, [pc, #80]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bdc:	e005      	b.n	8008bea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be2:	4a11      	ldr	r2, [pc, #68]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008be8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a0e      	ldr	r2, [pc, #56]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bf6:	f7f9 fae1 	bl	80021bc <HAL_GetTick>
 8008bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bfc:	e008      	b.n	8008c10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bfe:	f7f9 fadd 	bl	80021bc <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d901      	bls.n	8008c10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e006      	b.n	8008c1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <RCCEx_PLL3_Config+0x15c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0f0      	beq.n	8008bfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	ffff0007 	.word	0xffff0007

08008c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e042      	b.n	8008cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7f8 fd63 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2224      	movs	r2, #36	; 0x24
 8008c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0201 	bic.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fd86 	bl	8009784 <UART_SetConfig>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e022      	b.n	8008cc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 fae2 	bl	800a254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f042 0201 	orr.w	r2, r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 fb69 	bl	800a398 <UART_CheckIdleState>
 8008cc6:	4603      	mov	r3, r0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08a      	sub	sp, #40	; 0x28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	d167      	bne.n	8008db8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <HAL_UART_Transmit_DMA+0x24>
 8008cee:	88fb      	ldrh	r3, [r7, #6]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e060      	b.n	8008dba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	88fa      	ldrh	r2, [r7, #6]
 8008d02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	88fa      	ldrh	r2, [r7, #6]
 8008d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2221      	movs	r2, #33	; 0x21
 8008d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d028      	beq.n	8008d78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d2a:	4a26      	ldr	r2, [pc, #152]	; (8008dc4 <HAL_UART_Transmit_DMA+0xf4>)
 8008d2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d32:	4a25      	ldr	r2, [pc, #148]	; (8008dc8 <HAL_UART_Transmit_DMA+0xf8>)
 8008d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d3a:	4a24      	ldr	r2, [pc, #144]	; (8008dcc <HAL_UART_Transmit_DMA+0xfc>)
 8008d3c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d42:	2200      	movs	r2, #0
 8008d44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3328      	adds	r3, #40	; 0x28
 8008d56:	461a      	mov	r2, r3
 8008d58:	88fb      	ldrh	r3, [r7, #6]
 8008d5a:	f7f9 feeb 	bl	8002b34 <HAL_DMA_Start_IT>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2210      	movs	r2, #16
 8008d68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e020      	b.n	8008dba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2240      	movs	r2, #64	; 0x40
 8008d7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3308      	adds	r3, #8
 8008d86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da0:	623a      	str	r2, [r7, #32]
 8008da2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	69f9      	ldr	r1, [r7, #28]
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e5      	bne.n	8008d80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e000      	b.n	8008dba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008db8:	2302      	movs	r3, #2
  }
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3728      	adds	r7, #40	; 0x28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800a859 	.word	0x0800a859
 8008dc8:	0800a8ef 	.word	0x0800a8ef
 8008dcc:	0800aa71 	.word	0x0800aa71

08008dd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d137      	bne.n	8008e58 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <HAL_UART_Receive_DMA+0x24>
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e030      	b.n	8008e5a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <HAL_UART_Receive_DMA+0x94>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d01f      	beq.n	8008e48 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d018      	beq.n	8008e48 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	613b      	str	r3, [r7, #16]
   return(result);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	623b      	str	r3, [r7, #32]
 8008e36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	69f9      	ldr	r1, [r7, #28]
 8008e3a:	6a3a      	ldr	r2, [r7, #32]
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e6      	bne.n	8008e16 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e48:	88fb      	ldrh	r3, [r7, #6]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f001 fbb4 	bl	800a5bc <UART_Start_Receive_DMA>
 8008e54:	4603      	mov	r3, r0
 8008e56:	e000      	b.n	8008e5a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e58:	2302      	movs	r3, #2
  }
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3728      	adds	r7, #40	; 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	58000c00 	.word	0x58000c00

08008e68 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b090      	sub	sp, #64	; 0x40
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8a:	2b80      	cmp	r3, #128	; 0x80
 8008e8c:	d139      	bne.n	8008f02 <HAL_UART_DMAStop+0x9a>
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e90:	2b21      	cmp	r3, #33	; 0x21
 8008e92:	d136      	bne.n	8008f02 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3308      	adds	r3, #8
 8008e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e5      	bne.n	8008e94 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d015      	beq.n	8008efc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fa f897 	bl	8003008 <HAL_DMA_Abort>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00d      	beq.n	8008efc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fb fd1d 	bl	8004924 <HAL_DMA_GetError>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	d105      	bne.n	8008efc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e047      	b.n	8008f8c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fc03 	bl	800a708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	d13c      	bne.n	8008f8a <HAL_UART_DMAStop+0x122>
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	2b22      	cmp	r3, #34	; 0x22
 8008f14:	d139      	bne.n	8008f8a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f36:	61ba      	str	r2, [r7, #24]
 8008f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6979      	ldr	r1, [r7, #20]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	613b      	str	r3, [r7, #16]
   return(result);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e5      	bne.n	8008f16 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d017      	beq.n	8008f84 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fa f854 	bl	8003008 <HAL_DMA_Abort>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00e      	beq.n	8008f84 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fb fcd9 	bl	8004924 <HAL_DMA_GetError>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d105      	bne.n	8008f84 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2210      	movs	r2, #16
 8008f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e003      	b.n	8008f8c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 fc01 	bl	800a78c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3740      	adds	r7, #64	; 0x40
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b0ba      	sub	sp, #232	; 0xe8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008fbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11b      	bne.n	8009008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d015      	beq.n	8009008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d105      	bne.n	8008ff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8377 	beq.w	80096ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
      }
      return;
 8009006:	e371      	b.n	80096ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8123 	beq.w	8009258 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009016:	4b8d      	ldr	r3, [pc, #564]	; (800924c <HAL_UART_IRQHandler+0x2b8>)
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800901e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009022:	4b8b      	ldr	r3, [pc, #556]	; (8009250 <HAL_UART_IRQHandler+0x2bc>)
 8009024:	4013      	ands	r3, r2
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 8116 	beq.w	8009258 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800902c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d011      	beq.n	800905c <HAL_UART_IRQHandler+0xc8>
 8009038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800903c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2201      	movs	r2, #1
 800904a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009052:	f043 0201 	orr.w	r2, r3, #1
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800905c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d011      	beq.n	800908c <HAL_UART_IRQHandler+0xf8>
 8009068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00b      	beq.n	800908c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2202      	movs	r2, #2
 800907a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009082:	f043 0204 	orr.w	r2, r3, #4
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800908c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	d011      	beq.n	80090bc <HAL_UART_IRQHandler+0x128>
 8009098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2204      	movs	r2, #4
 80090aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b2:	f043 0202 	orr.w	r2, r3, #2
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d017      	beq.n	80090f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090cc:	f003 0320 	and.w	r3, r3, #32
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80090d8:	4b5c      	ldr	r3, [pc, #368]	; (800924c <HAL_UART_IRQHandler+0x2b8>)
 80090da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2208      	movs	r2, #8
 80090e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ee:	f043 0208 	orr.w	r2, r3, #8
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009100:	2b00      	cmp	r3, #0
 8009102:	d012      	beq.n	800912a <HAL_UART_IRQHandler+0x196>
 8009104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00c      	beq.n	800912a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009120:	f043 0220 	orr.w	r2, r3, #32
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 82dd 	beq.w	80096f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b00      	cmp	r3, #0
 8009140:	d013      	beq.n	800916a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800914e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917e:	2b40      	cmp	r3, #64	; 0x40
 8009180:	d005      	beq.n	800918e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009186:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800918a:	2b00      	cmp	r3, #0
 800918c:	d054      	beq.n	8009238 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fafc 	bl	800a78c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919e:	2b40      	cmp	r3, #64	; 0x40
 80091a0:	d146      	bne.n	8009230 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1d9      	bne.n	80091a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d017      	beq.n	8009228 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091fe:	4a15      	ldr	r2, [pc, #84]	; (8009254 <HAL_UART_IRQHandler+0x2c0>)
 8009200:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009208:	4618      	mov	r0, r3
 800920a:	f7fa fa1b 	bl	8003644 <HAL_DMA_Abort_IT>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d019      	beq.n	8009248 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800921a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009222:	4610      	mov	r0, r2
 8009224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009226:	e00f      	b.n	8009248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fa95 	bl	8009758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922e:	e00b      	b.n	8009248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa91 	bl	8009758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009236:	e007      	b.n	8009248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa8d 	bl	8009758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009246:	e253      	b.n	80096f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009248:	bf00      	nop
    return;
 800924a:	e251      	b.n	80096f0 <HAL_UART_IRQHandler+0x75c>
 800924c:	10000001 	.word	0x10000001
 8009250:	04000120 	.word	0x04000120
 8009254:	0800aaf1 	.word	0x0800aaf1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925c:	2b01      	cmp	r3, #1
 800925e:	f040 81e7 	bne.w	8009630 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009266:	f003 0310 	and.w	r3, r3, #16
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 81e0 	beq.w	8009630 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 81d9 	beq.w	8009630 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2210      	movs	r2, #16
 8009284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009290:	2b40      	cmp	r3, #64	; 0x40
 8009292:	f040 8151 	bne.w	8009538 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a96      	ldr	r2, [pc, #600]	; (80094f8 <HAL_UART_IRQHandler+0x564>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d068      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a93      	ldr	r2, [pc, #588]	; (80094fc <HAL_UART_IRQHandler+0x568>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d061      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a91      	ldr	r2, [pc, #580]	; (8009500 <HAL_UART_IRQHandler+0x56c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d05a      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a8e      	ldr	r2, [pc, #568]	; (8009504 <HAL_UART_IRQHandler+0x570>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d053      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a8c      	ldr	r2, [pc, #560]	; (8009508 <HAL_UART_IRQHandler+0x574>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d04c      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a89      	ldr	r2, [pc, #548]	; (800950c <HAL_UART_IRQHandler+0x578>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d045      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a87      	ldr	r2, [pc, #540]	; (8009510 <HAL_UART_IRQHandler+0x57c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d03e      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a84      	ldr	r2, [pc, #528]	; (8009514 <HAL_UART_IRQHandler+0x580>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d037      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a82      	ldr	r2, [pc, #520]	; (8009518 <HAL_UART_IRQHandler+0x584>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d030      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a7f      	ldr	r2, [pc, #508]	; (800951c <HAL_UART_IRQHandler+0x588>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d029      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a7d      	ldr	r2, [pc, #500]	; (8009520 <HAL_UART_IRQHandler+0x58c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d022      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a7a      	ldr	r2, [pc, #488]	; (8009524 <HAL_UART_IRQHandler+0x590>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d01b      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a78      	ldr	r2, [pc, #480]	; (8009528 <HAL_UART_IRQHandler+0x594>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d014      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a75      	ldr	r2, [pc, #468]	; (800952c <HAL_UART_IRQHandler+0x598>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00d      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a73      	ldr	r2, [pc, #460]	; (8009530 <HAL_UART_IRQHandler+0x59c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d006      	beq.n	8009376 <HAL_UART_IRQHandler+0x3e2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a70      	ldr	r2, [pc, #448]	; (8009534 <HAL_UART_IRQHandler+0x5a0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d106      	bne.n	8009384 <HAL_UART_IRQHandler+0x3f0>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	b29b      	uxth	r3, r3
 8009382:	e005      	b.n	8009390 <HAL_UART_IRQHandler+0x3fc>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	b29b      	uxth	r3, r3
 8009390:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 81ab 	beq.w	80096f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093a8:	429a      	cmp	r2, r3
 80093aa:	f080 81a3 	bcs.w	80096f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c4:	f000 8087 	beq.w	80094d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80093fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800940a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1da      	bne.n	80093c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3308      	adds	r3, #8
 8009418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009424:	f023 0301 	bic.w	r3, r3, #1
 8009428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009436:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800943a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800943e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e1      	bne.n	8009412 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3308      	adds	r3, #8
 8009454:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800945e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009472:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009474:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e3      	bne.n	800944e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a4:	f023 0310 	bic.w	r3, r3, #16
 80094a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80094b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e4      	bne.n	8009494 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f9 fd99 	bl	8003008 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2202      	movs	r2, #2
 80094da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f93b 	bl	800976c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094f6:	e0fd      	b.n	80096f4 <HAL_UART_IRQHandler+0x760>
 80094f8:	40020010 	.word	0x40020010
 80094fc:	40020028 	.word	0x40020028
 8009500:	40020040 	.word	0x40020040
 8009504:	40020058 	.word	0x40020058
 8009508:	40020070 	.word	0x40020070
 800950c:	40020088 	.word	0x40020088
 8009510:	400200a0 	.word	0x400200a0
 8009514:	400200b8 	.word	0x400200b8
 8009518:	40020410 	.word	0x40020410
 800951c:	40020428 	.word	0x40020428
 8009520:	40020440 	.word	0x40020440
 8009524:	40020458 	.word	0x40020458
 8009528:	40020470 	.word	0x40020470
 800952c:	40020488 	.word	0x40020488
 8009530:	400204a0 	.word	0x400204a0
 8009534:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009544:	b29b      	uxth	r3, r3
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 80cf 	beq.w	80096f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800955a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 80ca 	beq.w	80096f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009586:	647b      	str	r3, [r7, #68]	; 0x44
 8009588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800958c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e4      	bne.n	8009564 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3308      	adds	r3, #8
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	623b      	str	r3, [r7, #32]
   return(result);
 80095aa:	6a3a      	ldr	r2, [r7, #32]
 80095ac:	4b55      	ldr	r3, [pc, #340]	; (8009704 <HAL_UART_IRQHandler+0x770>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3308      	adds	r3, #8
 80095ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095be:	633a      	str	r2, [r7, #48]	; 0x30
 80095c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e3      	bne.n	800959a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0310 	bic.w	r3, r3, #16
 80095fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	69b9      	ldr	r1, [r7, #24]
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	617b      	str	r3, [r7, #20]
   return(result);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e4      	bne.n	80095e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f89f 	bl	800976c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800962e:	e063      	b.n	80096f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00e      	beq.n	800965a <HAL_UART_IRQHandler+0x6c6>
 800963c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d008      	beq.n	800965a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 fa8d 	bl	800ab72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009658:	e051      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800965a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009662:	2b00      	cmp	r3, #0
 8009664:	d014      	beq.n	8009690 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800966e:	2b00      	cmp	r3, #0
 8009670:	d105      	bne.n	800967e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d008      	beq.n	8009690 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009682:	2b00      	cmp	r3, #0
 8009684:	d03a      	beq.n	80096fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	4798      	blx	r3
    }
    return;
 800968e:	e035      	b.n	80096fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <HAL_UART_IRQHandler+0x71c>
 800969c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 fa37 	bl	800ab1c <UART_EndTransmit_IT>
    return;
 80096ae:	e026      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <HAL_UART_IRQHandler+0x73c>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 fa66 	bl	800ab9a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ce:	e016      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80096d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d010      	beq.n	80096fe <HAL_UART_IRQHandler+0x76a>
 80096dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	da0c      	bge.n	80096fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f001 fa4e 	bl	800ab86 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ea:	e008      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
      return;
 80096ec:	bf00      	nop
 80096ee:	e006      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
    return;
 80096f0:	bf00      	nop
 80096f2:	e004      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
      return;
 80096f4:	bf00      	nop
 80096f6:	e002      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
      return;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <HAL_UART_IRQHandler+0x76a>
    return;
 80096fc:	bf00      	nop
  }
}
 80096fe:	37e8      	adds	r7, #232	; 0xe8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	effffffe 	.word	0xeffffffe

08009708 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009788:	b092      	sub	sp, #72	; 0x48
 800978a:	af00      	add	r7, sp, #0
 800978c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	431a      	orrs	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	431a      	orrs	r2, r3
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	4bbe      	ldr	r3, [pc, #760]	; (8009aac <UART_SetConfig+0x328>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	6812      	ldr	r2, [r2, #0]
 80097ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097bc:	430b      	orrs	r3, r1
 80097be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	68da      	ldr	r2, [r3, #12]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4ab3      	ldr	r2, [pc, #716]	; (8009ab0 <UART_SetConfig+0x32c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d004      	beq.n	80097f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097ec:	4313      	orrs	r3, r2
 80097ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	4baf      	ldr	r3, [pc, #700]	; (8009ab4 <UART_SetConfig+0x330>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009800:	430b      	orrs	r3, r1
 8009802:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	f023 010f 	bic.w	r1, r3, #15
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4aa6      	ldr	r2, [pc, #664]	; (8009ab8 <UART_SetConfig+0x334>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d177      	bne.n	8009914 <UART_SetConfig+0x190>
 8009824:	4ba5      	ldr	r3, [pc, #660]	; (8009abc <UART_SetConfig+0x338>)
 8009826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800982c:	2b28      	cmp	r3, #40	; 0x28
 800982e:	d86d      	bhi.n	800990c <UART_SetConfig+0x188>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <UART_SetConfig+0xb4>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	080098dd 	.word	0x080098dd
 800983c:	0800990d 	.word	0x0800990d
 8009840:	0800990d 	.word	0x0800990d
 8009844:	0800990d 	.word	0x0800990d
 8009848:	0800990d 	.word	0x0800990d
 800984c:	0800990d 	.word	0x0800990d
 8009850:	0800990d 	.word	0x0800990d
 8009854:	0800990d 	.word	0x0800990d
 8009858:	080098e5 	.word	0x080098e5
 800985c:	0800990d 	.word	0x0800990d
 8009860:	0800990d 	.word	0x0800990d
 8009864:	0800990d 	.word	0x0800990d
 8009868:	0800990d 	.word	0x0800990d
 800986c:	0800990d 	.word	0x0800990d
 8009870:	0800990d 	.word	0x0800990d
 8009874:	0800990d 	.word	0x0800990d
 8009878:	080098ed 	.word	0x080098ed
 800987c:	0800990d 	.word	0x0800990d
 8009880:	0800990d 	.word	0x0800990d
 8009884:	0800990d 	.word	0x0800990d
 8009888:	0800990d 	.word	0x0800990d
 800988c:	0800990d 	.word	0x0800990d
 8009890:	0800990d 	.word	0x0800990d
 8009894:	0800990d 	.word	0x0800990d
 8009898:	080098f5 	.word	0x080098f5
 800989c:	0800990d 	.word	0x0800990d
 80098a0:	0800990d 	.word	0x0800990d
 80098a4:	0800990d 	.word	0x0800990d
 80098a8:	0800990d 	.word	0x0800990d
 80098ac:	0800990d 	.word	0x0800990d
 80098b0:	0800990d 	.word	0x0800990d
 80098b4:	0800990d 	.word	0x0800990d
 80098b8:	080098fd 	.word	0x080098fd
 80098bc:	0800990d 	.word	0x0800990d
 80098c0:	0800990d 	.word	0x0800990d
 80098c4:	0800990d 	.word	0x0800990d
 80098c8:	0800990d 	.word	0x0800990d
 80098cc:	0800990d 	.word	0x0800990d
 80098d0:	0800990d 	.word	0x0800990d
 80098d4:	0800990d 	.word	0x0800990d
 80098d8:	08009905 	.word	0x08009905
 80098dc:	2301      	movs	r3, #1
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098e2:	e222      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80098e4:	2304      	movs	r3, #4
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ea:	e21e      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80098ec:	2308      	movs	r3, #8
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098f2:	e21a      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80098f4:	2310      	movs	r3, #16
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098fa:	e216      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80098fc:	2320      	movs	r3, #32
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009902:	e212      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990a:	e20e      	b.n	8009d2a <UART_SetConfig+0x5a6>
 800990c:	2380      	movs	r3, #128	; 0x80
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009912:	e20a      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a69      	ldr	r2, [pc, #420]	; (8009ac0 <UART_SetConfig+0x33c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d130      	bne.n	8009980 <UART_SetConfig+0x1fc>
 800991e:	4b67      	ldr	r3, [pc, #412]	; (8009abc <UART_SetConfig+0x338>)
 8009920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	2b05      	cmp	r3, #5
 8009928:	d826      	bhi.n	8009978 <UART_SetConfig+0x1f4>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <UART_SetConfig+0x1ac>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009949 	.word	0x08009949
 8009934:	08009951 	.word	0x08009951
 8009938:	08009959 	.word	0x08009959
 800993c:	08009961 	.word	0x08009961
 8009940:	08009969 	.word	0x08009969
 8009944:	08009971 	.word	0x08009971
 8009948:	2300      	movs	r3, #0
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994e:	e1ec      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009950:	2304      	movs	r3, #4
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009956:	e1e8      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009958:	2308      	movs	r3, #8
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995e:	e1e4      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009960:	2310      	movs	r3, #16
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009966:	e1e0      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009968:	2320      	movs	r3, #32
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996e:	e1dc      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e1d8      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e1d4      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a4f      	ldr	r2, [pc, #316]	; (8009ac4 <UART_SetConfig+0x340>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d130      	bne.n	80099ec <UART_SetConfig+0x268>
 800998a:	4b4c      	ldr	r3, [pc, #304]	; (8009abc <UART_SetConfig+0x338>)
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b05      	cmp	r3, #5
 8009994:	d826      	bhi.n	80099e4 <UART_SetConfig+0x260>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <UART_SetConfig+0x218>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	080099c5 	.word	0x080099c5
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	080099dd 	.word	0x080099dd
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ba:	e1b6      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c2:	e1b2      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ca:	e1ae      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d2:	e1aa      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80099d4:	2320      	movs	r3, #32
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099da:	e1a6      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80099dc:	2340      	movs	r3, #64	; 0x40
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e2:	e1a2      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80099e4:	2380      	movs	r3, #128	; 0x80
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e19e      	b.n	8009d2a <UART_SetConfig+0x5a6>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a35      	ldr	r2, [pc, #212]	; (8009ac8 <UART_SetConfig+0x344>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d130      	bne.n	8009a58 <UART_SetConfig+0x2d4>
 80099f6:	4b31      	ldr	r3, [pc, #196]	; (8009abc <UART_SetConfig+0x338>)
 80099f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	2b05      	cmp	r3, #5
 8009a00:	d826      	bhi.n	8009a50 <UART_SetConfig+0x2cc>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <UART_SetConfig+0x284>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a21 	.word	0x08009a21
 8009a0c:	08009a29 	.word	0x08009a29
 8009a10:	08009a31 	.word	0x08009a31
 8009a14:	08009a39 	.word	0x08009a39
 8009a18:	08009a41 	.word	0x08009a41
 8009a1c:	08009a49 	.word	0x08009a49
 8009a20:	2300      	movs	r3, #0
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a26:	e180      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2e:	e17c      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a30:	2308      	movs	r3, #8
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a36:	e178      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3e:	e174      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a40:	2320      	movs	r3, #32
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a46:	e170      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a48:	2340      	movs	r3, #64	; 0x40
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e16c      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a50:	2380      	movs	r3, #128	; 0x80
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e168      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1b      	ldr	r2, [pc, #108]	; (8009acc <UART_SetConfig+0x348>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d142      	bne.n	8009ae8 <UART_SetConfig+0x364>
 8009a62:	4b16      	ldr	r3, [pc, #88]	; (8009abc <UART_SetConfig+0x338>)
 8009a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b05      	cmp	r3, #5
 8009a6c:	d838      	bhi.n	8009ae0 <UART_SetConfig+0x35c>
 8009a6e:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <UART_SetConfig+0x2f0>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a8d 	.word	0x08009a8d
 8009a78:	08009a95 	.word	0x08009a95
 8009a7c:	08009a9d 	.word	0x08009a9d
 8009a80:	08009aa5 	.word	0x08009aa5
 8009a84:	08009ad1 	.word	0x08009ad1
 8009a88:	08009ad9 	.word	0x08009ad9
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a92:	e14a      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a94:	2304      	movs	r3, #4
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9a:	e146      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009a9c:	2308      	movs	r3, #8
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa2:	e142      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aaa:	e13e      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009aac:	cfff69f3 	.word	0xcfff69f3
 8009ab0:	58000c00 	.word	0x58000c00
 8009ab4:	11fff4ff 	.word	0x11fff4ff
 8009ab8:	40011000 	.word	0x40011000
 8009abc:	58024400 	.word	0x58024400
 8009ac0:	40004400 	.word	0x40004400
 8009ac4:	40004800 	.word	0x40004800
 8009ac8:	40004c00 	.word	0x40004c00
 8009acc:	40005000 	.word	0x40005000
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e128      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009ad8:	2340      	movs	r3, #64	; 0x40
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ade:	e124      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae6:	e120      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4acb      	ldr	r2, [pc, #812]	; (8009e1c <UART_SetConfig+0x698>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d176      	bne.n	8009be0 <UART_SetConfig+0x45c>
 8009af2:	4bcb      	ldr	r3, [pc, #812]	; (8009e20 <UART_SetConfig+0x69c>)
 8009af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009afa:	2b28      	cmp	r3, #40	; 0x28
 8009afc:	d86c      	bhi.n	8009bd8 <UART_SetConfig+0x454>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x380>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009ba9 	.word	0x08009ba9
 8009b08:	08009bd9 	.word	0x08009bd9
 8009b0c:	08009bd9 	.word	0x08009bd9
 8009b10:	08009bd9 	.word	0x08009bd9
 8009b14:	08009bd9 	.word	0x08009bd9
 8009b18:	08009bd9 	.word	0x08009bd9
 8009b1c:	08009bd9 	.word	0x08009bd9
 8009b20:	08009bd9 	.word	0x08009bd9
 8009b24:	08009bb1 	.word	0x08009bb1
 8009b28:	08009bd9 	.word	0x08009bd9
 8009b2c:	08009bd9 	.word	0x08009bd9
 8009b30:	08009bd9 	.word	0x08009bd9
 8009b34:	08009bd9 	.word	0x08009bd9
 8009b38:	08009bd9 	.word	0x08009bd9
 8009b3c:	08009bd9 	.word	0x08009bd9
 8009b40:	08009bd9 	.word	0x08009bd9
 8009b44:	08009bb9 	.word	0x08009bb9
 8009b48:	08009bd9 	.word	0x08009bd9
 8009b4c:	08009bd9 	.word	0x08009bd9
 8009b50:	08009bd9 	.word	0x08009bd9
 8009b54:	08009bd9 	.word	0x08009bd9
 8009b58:	08009bd9 	.word	0x08009bd9
 8009b5c:	08009bd9 	.word	0x08009bd9
 8009b60:	08009bd9 	.word	0x08009bd9
 8009b64:	08009bc1 	.word	0x08009bc1
 8009b68:	08009bd9 	.word	0x08009bd9
 8009b6c:	08009bd9 	.word	0x08009bd9
 8009b70:	08009bd9 	.word	0x08009bd9
 8009b74:	08009bd9 	.word	0x08009bd9
 8009b78:	08009bd9 	.word	0x08009bd9
 8009b7c:	08009bd9 	.word	0x08009bd9
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	08009bc9 	.word	0x08009bc9
 8009b88:	08009bd9 	.word	0x08009bd9
 8009b8c:	08009bd9 	.word	0x08009bd9
 8009b90:	08009bd9 	.word	0x08009bd9
 8009b94:	08009bd9 	.word	0x08009bd9
 8009b98:	08009bd9 	.word	0x08009bd9
 8009b9c:	08009bd9 	.word	0x08009bd9
 8009ba0:	08009bd9 	.word	0x08009bd9
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bae:	e0bc      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb6:	e0b8      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009bb8:	2308      	movs	r3, #8
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bbe:	e0b4      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc6:	e0b0      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009bc8:	2320      	movs	r3, #32
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bce:	e0ac      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd6:	e0a8      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bde:	e0a4      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a8f      	ldr	r2, [pc, #572]	; (8009e24 <UART_SetConfig+0x6a0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d130      	bne.n	8009c4c <UART_SetConfig+0x4c8>
 8009bea:	4b8d      	ldr	r3, [pc, #564]	; (8009e20 <UART_SetConfig+0x69c>)
 8009bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	d826      	bhi.n	8009c44 <UART_SetConfig+0x4c0>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x478>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c15 	.word	0x08009c15
 8009c00:	08009c1d 	.word	0x08009c1d
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c35 	.word	0x08009c35
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	2300      	movs	r3, #0
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1a:	e086      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c22:	e082      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2a:	e07e      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c32:	e07a      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c34:	2320      	movs	r3, #32
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3a:	e076      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c3c:	2340      	movs	r3, #64	; 0x40
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c42:	e072      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c44:	2380      	movs	r3, #128	; 0x80
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4a:	e06e      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a75      	ldr	r2, [pc, #468]	; (8009e28 <UART_SetConfig+0x6a4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d130      	bne.n	8009cb8 <UART_SetConfig+0x534>
 8009c56:	4b72      	ldr	r3, [pc, #456]	; (8009e20 <UART_SetConfig+0x69c>)
 8009c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	2b05      	cmp	r3, #5
 8009c60:	d826      	bhi.n	8009cb0 <UART_SetConfig+0x52c>
 8009c62:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <UART_SetConfig+0x4e4>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009c81 	.word	0x08009c81
 8009c6c:	08009c89 	.word	0x08009c89
 8009c70:	08009c91 	.word	0x08009c91
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009ca9 	.word	0x08009ca9
 8009c80:	2300      	movs	r3, #0
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c86:	e050      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c88:	2304      	movs	r3, #4
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8e:	e04c      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c90:	2308      	movs	r3, #8
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c96:	e048      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009c98:	2310      	movs	r3, #16
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9e:	e044      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca6:	e040      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009ca8:	2340      	movs	r3, #64	; 0x40
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cae:	e03c      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009cb0:	2380      	movs	r3, #128	; 0x80
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb6:	e038      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a5b      	ldr	r2, [pc, #364]	; (8009e2c <UART_SetConfig+0x6a8>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d130      	bne.n	8009d24 <UART_SetConfig+0x5a0>
 8009cc2:	4b57      	ldr	r3, [pc, #348]	; (8009e20 <UART_SetConfig+0x69c>)
 8009cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b05      	cmp	r3, #5
 8009ccc:	d826      	bhi.n	8009d1c <UART_SetConfig+0x598>
 8009cce:	a201      	add	r2, pc, #4	; (adr r2, 8009cd4 <UART_SetConfig+0x550>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009ced 	.word	0x08009ced
 8009cd8:	08009cf5 	.word	0x08009cf5
 8009cdc:	08009cfd 	.word	0x08009cfd
 8009ce0:	08009d05 	.word	0x08009d05
 8009ce4:	08009d0d 	.word	0x08009d0d
 8009ce8:	08009d15 	.word	0x08009d15
 8009cec:	2302      	movs	r3, #2
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e01a      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfa:	e016      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d02:	e012      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009d04:	2310      	movs	r3, #16
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0a:	e00e      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009d0c:	2320      	movs	r3, #32
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d12:	e00a      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009d14:	2340      	movs	r3, #64	; 0x40
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1a:	e006      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009d1c:	2380      	movs	r3, #128	; 0x80
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d22:	e002      	b.n	8009d2a <UART_SetConfig+0x5a6>
 8009d24:	2380      	movs	r3, #128	; 0x80
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a3f      	ldr	r2, [pc, #252]	; (8009e2c <UART_SetConfig+0x6a8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	f040 80f8 	bne.w	8009f26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	dc46      	bgt.n	8009dcc <UART_SetConfig+0x648>
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	f2c0 8082 	blt.w	8009e48 <UART_SetConfig+0x6c4>
 8009d44:	3b02      	subs	r3, #2
 8009d46:	2b1e      	cmp	r3, #30
 8009d48:	d87e      	bhi.n	8009e48 <UART_SetConfig+0x6c4>
 8009d4a:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <UART_SetConfig+0x5cc>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009dd3 	.word	0x08009dd3
 8009d54:	08009e49 	.word	0x08009e49
 8009d58:	08009ddb 	.word	0x08009ddb
 8009d5c:	08009e49 	.word	0x08009e49
 8009d60:	08009e49 	.word	0x08009e49
 8009d64:	08009e49 	.word	0x08009e49
 8009d68:	08009deb 	.word	0x08009deb
 8009d6c:	08009e49 	.word	0x08009e49
 8009d70:	08009e49 	.word	0x08009e49
 8009d74:	08009e49 	.word	0x08009e49
 8009d78:	08009e49 	.word	0x08009e49
 8009d7c:	08009e49 	.word	0x08009e49
 8009d80:	08009e49 	.word	0x08009e49
 8009d84:	08009e49 	.word	0x08009e49
 8009d88:	08009dfb 	.word	0x08009dfb
 8009d8c:	08009e49 	.word	0x08009e49
 8009d90:	08009e49 	.word	0x08009e49
 8009d94:	08009e49 	.word	0x08009e49
 8009d98:	08009e49 	.word	0x08009e49
 8009d9c:	08009e49 	.word	0x08009e49
 8009da0:	08009e49 	.word	0x08009e49
 8009da4:	08009e49 	.word	0x08009e49
 8009da8:	08009e49 	.word	0x08009e49
 8009dac:	08009e49 	.word	0x08009e49
 8009db0:	08009e49 	.word	0x08009e49
 8009db4:	08009e49 	.word	0x08009e49
 8009db8:	08009e49 	.word	0x08009e49
 8009dbc:	08009e49 	.word	0x08009e49
 8009dc0:	08009e49 	.word	0x08009e49
 8009dc4:	08009e49 	.word	0x08009e49
 8009dc8:	08009e3b 	.word	0x08009e3b
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d037      	beq.n	8009e40 <UART_SetConfig+0x6bc>
 8009dd0:	e03a      	b.n	8009e48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009dd2:	f7fe fb0b 	bl	80083ec <HAL_RCCEx_GetD3PCLK1Freq>
 8009dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009dd8:	e03c      	b.n	8009e54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fb1a 	bl	8008418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de8:	e034      	b.n	8009e54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dea:	f107 0318 	add.w	r3, r7, #24
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fc66 	bl	80086c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df8:	e02c      	b.n	8009e54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <UART_SetConfig+0x69c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d016      	beq.n	8009e34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <UART_SetConfig+0x69c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	08db      	lsrs	r3, r3, #3
 8009e0c:	f003 0303 	and.w	r3, r3, #3
 8009e10:	4a07      	ldr	r2, [pc, #28]	; (8009e30 <UART_SetConfig+0x6ac>)
 8009e12:	fa22 f303 	lsr.w	r3, r2, r3
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e18:	e01c      	b.n	8009e54 <UART_SetConfig+0x6d0>
 8009e1a:	bf00      	nop
 8009e1c:	40011400 	.word	0x40011400
 8009e20:	58024400 	.word	0x58024400
 8009e24:	40007800 	.word	0x40007800
 8009e28:	40007c00 	.word	0x40007c00
 8009e2c:	58000c00 	.word	0x58000c00
 8009e30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009e34:	4b9d      	ldr	r3, [pc, #628]	; (800a0ac <UART_SetConfig+0x928>)
 8009e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e38:	e00c      	b.n	8009e54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e3a:	4b9d      	ldr	r3, [pc, #628]	; (800a0b0 <UART_SetConfig+0x92c>)
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e3e:	e009      	b.n	8009e54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e46:	e005      	b.n	8009e54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 81de 	beq.w	800a218 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	4a94      	ldr	r2, [pc, #592]	; (800a0b4 <UART_SetConfig+0x930>)
 8009e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e66:	461a      	mov	r2, r3
 8009e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	4613      	mov	r3, r2
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	4413      	add	r3, r2
 8009e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d305      	bcc.n	8009e8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d903      	bls.n	8009e94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e92:	e1c1      	b.n	800a218 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e96:	2200      	movs	r2, #0
 8009e98:	60bb      	str	r3, [r7, #8]
 8009e9a:	60fa      	str	r2, [r7, #12]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	4a84      	ldr	r2, [pc, #528]	; (800a0b4 <UART_SetConfig+0x930>)
 8009ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009eb6:	f7f6 facb 	bl	8000450 <__aeabi_uldivmod>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	f04f 0300 	mov.w	r3, #0
 8009eca:	020b      	lsls	r3, r1, #8
 8009ecc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ed0:	0202      	lsls	r2, r0, #8
 8009ed2:	6979      	ldr	r1, [r7, #20]
 8009ed4:	6849      	ldr	r1, [r1, #4]
 8009ed6:	0849      	lsrs	r1, r1, #1
 8009ed8:	2000      	movs	r0, #0
 8009eda:	460c      	mov	r4, r1
 8009edc:	4605      	mov	r5, r0
 8009ede:	eb12 0804 	adds.w	r8, r2, r4
 8009ee2:	eb43 0905 	adc.w	r9, r3, r5
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	469a      	mov	sl, r3
 8009eee:	4693      	mov	fp, r2
 8009ef0:	4652      	mov	r2, sl
 8009ef2:	465b      	mov	r3, fp
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	f7f6 faaa 	bl	8000450 <__aeabi_uldivmod>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4613      	mov	r3, r2
 8009f02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f0a:	d308      	bcc.n	8009f1e <UART_SetConfig+0x79a>
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f12:	d204      	bcs.n	8009f1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f1a:	60da      	str	r2, [r3, #12]
 8009f1c:	e17c      	b.n	800a218 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009f24:	e178      	b.n	800a218 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f2e:	f040 80c5 	bne.w	800a0bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009f32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	dc48      	bgt.n	8009fcc <UART_SetConfig+0x848>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	db7b      	blt.n	800a036 <UART_SetConfig+0x8b2>
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	d879      	bhi.n	800a036 <UART_SetConfig+0x8b2>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <UART_SetConfig+0x7c4>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009fd3 	.word	0x08009fd3
 8009f4c:	08009fdb 	.word	0x08009fdb
 8009f50:	0800a037 	.word	0x0800a037
 8009f54:	0800a037 	.word	0x0800a037
 8009f58:	08009fe3 	.word	0x08009fe3
 8009f5c:	0800a037 	.word	0x0800a037
 8009f60:	0800a037 	.word	0x0800a037
 8009f64:	0800a037 	.word	0x0800a037
 8009f68:	08009ff3 	.word	0x08009ff3
 8009f6c:	0800a037 	.word	0x0800a037
 8009f70:	0800a037 	.word	0x0800a037
 8009f74:	0800a037 	.word	0x0800a037
 8009f78:	0800a037 	.word	0x0800a037
 8009f7c:	0800a037 	.word	0x0800a037
 8009f80:	0800a037 	.word	0x0800a037
 8009f84:	0800a037 	.word	0x0800a037
 8009f88:	0800a003 	.word	0x0800a003
 8009f8c:	0800a037 	.word	0x0800a037
 8009f90:	0800a037 	.word	0x0800a037
 8009f94:	0800a037 	.word	0x0800a037
 8009f98:	0800a037 	.word	0x0800a037
 8009f9c:	0800a037 	.word	0x0800a037
 8009fa0:	0800a037 	.word	0x0800a037
 8009fa4:	0800a037 	.word	0x0800a037
 8009fa8:	0800a037 	.word	0x0800a037
 8009fac:	0800a037 	.word	0x0800a037
 8009fb0:	0800a037 	.word	0x0800a037
 8009fb4:	0800a037 	.word	0x0800a037
 8009fb8:	0800a037 	.word	0x0800a037
 8009fbc:	0800a037 	.word	0x0800a037
 8009fc0:	0800a037 	.word	0x0800a037
 8009fc4:	0800a037 	.word	0x0800a037
 8009fc8:	0800a029 	.word	0x0800a029
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	d02e      	beq.n	800a02e <UART_SetConfig+0x8aa>
 8009fd0:	e031      	b.n	800a036 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fd2:	f7fc ffd5 	bl	8006f80 <HAL_RCC_GetPCLK1Freq>
 8009fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fd8:	e033      	b.n	800a042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fda:	f7fc ffe7 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 8009fde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fe0:	e02f      	b.n	800a042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fa16 	bl	8008418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff0:	e027      	b.n	800a042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff2:	f107 0318 	add.w	r3, r7, #24
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fb62 	bl	80086c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a000:	e01f      	b.n	800a042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a002:	4b2d      	ldr	r3, [pc, #180]	; (800a0b8 <UART_SetConfig+0x934>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d009      	beq.n	800a022 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a00e:	4b2a      	ldr	r3, [pc, #168]	; (800a0b8 <UART_SetConfig+0x934>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	08db      	lsrs	r3, r3, #3
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	4a24      	ldr	r2, [pc, #144]	; (800a0ac <UART_SetConfig+0x928>)
 800a01a:	fa22 f303 	lsr.w	r3, r2, r3
 800a01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a020:	e00f      	b.n	800a042 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a022:	4b22      	ldr	r3, [pc, #136]	; (800a0ac <UART_SetConfig+0x928>)
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a026:	e00c      	b.n	800a042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a028:	4b21      	ldr	r3, [pc, #132]	; (800a0b0 <UART_SetConfig+0x92c>)
 800a02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a02c:	e009      	b.n	800a042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a02e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a034:	e005      	b.n	800a042 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a040:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 80e7 	beq.w	800a218 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	4a19      	ldr	r2, [pc, #100]	; (800a0b4 <UART_SetConfig+0x930>)
 800a050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a054:	461a      	mov	r2, r3
 800a056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a058:	fbb3 f3f2 	udiv	r3, r3, r2
 800a05c:	005a      	lsls	r2, r3, #1
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	085b      	lsrs	r3, r3, #1
 800a064:	441a      	add	r2, r3
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a072:	2b0f      	cmp	r3, #15
 800a074:	d916      	bls.n	800a0a4 <UART_SetConfig+0x920>
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a07c:	d212      	bcs.n	800a0a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	b29b      	uxth	r3, r3
 800a082:	f023 030f 	bic.w	r3, r3, #15
 800a086:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	085b      	lsrs	r3, r3, #1
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	b29a      	uxth	r2, r3
 800a094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a096:	4313      	orrs	r3, r2
 800a098:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a0a0:	60da      	str	r2, [r3, #12]
 800a0a2:	e0b9      	b.n	800a218 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a0aa:	e0b5      	b.n	800a218 <UART_SetConfig+0xa94>
 800a0ac:	03d09000 	.word	0x03d09000
 800a0b0:	003d0900 	.word	0x003d0900
 800a0b4:	080184ac 	.word	0x080184ac
 800a0b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	dc49      	bgt.n	800a158 <UART_SetConfig+0x9d4>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	db7c      	blt.n	800a1c2 <UART_SetConfig+0xa3e>
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	d87a      	bhi.n	800a1c2 <UART_SetConfig+0xa3e>
 800a0cc:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <UART_SetConfig+0x950>)
 800a0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d2:	bf00      	nop
 800a0d4:	0800a15f 	.word	0x0800a15f
 800a0d8:	0800a167 	.word	0x0800a167
 800a0dc:	0800a1c3 	.word	0x0800a1c3
 800a0e0:	0800a1c3 	.word	0x0800a1c3
 800a0e4:	0800a16f 	.word	0x0800a16f
 800a0e8:	0800a1c3 	.word	0x0800a1c3
 800a0ec:	0800a1c3 	.word	0x0800a1c3
 800a0f0:	0800a1c3 	.word	0x0800a1c3
 800a0f4:	0800a17f 	.word	0x0800a17f
 800a0f8:	0800a1c3 	.word	0x0800a1c3
 800a0fc:	0800a1c3 	.word	0x0800a1c3
 800a100:	0800a1c3 	.word	0x0800a1c3
 800a104:	0800a1c3 	.word	0x0800a1c3
 800a108:	0800a1c3 	.word	0x0800a1c3
 800a10c:	0800a1c3 	.word	0x0800a1c3
 800a110:	0800a1c3 	.word	0x0800a1c3
 800a114:	0800a18f 	.word	0x0800a18f
 800a118:	0800a1c3 	.word	0x0800a1c3
 800a11c:	0800a1c3 	.word	0x0800a1c3
 800a120:	0800a1c3 	.word	0x0800a1c3
 800a124:	0800a1c3 	.word	0x0800a1c3
 800a128:	0800a1c3 	.word	0x0800a1c3
 800a12c:	0800a1c3 	.word	0x0800a1c3
 800a130:	0800a1c3 	.word	0x0800a1c3
 800a134:	0800a1c3 	.word	0x0800a1c3
 800a138:	0800a1c3 	.word	0x0800a1c3
 800a13c:	0800a1c3 	.word	0x0800a1c3
 800a140:	0800a1c3 	.word	0x0800a1c3
 800a144:	0800a1c3 	.word	0x0800a1c3
 800a148:	0800a1c3 	.word	0x0800a1c3
 800a14c:	0800a1c3 	.word	0x0800a1c3
 800a150:	0800a1c3 	.word	0x0800a1c3
 800a154:	0800a1b5 	.word	0x0800a1b5
 800a158:	2b40      	cmp	r3, #64	; 0x40
 800a15a:	d02e      	beq.n	800a1ba <UART_SetConfig+0xa36>
 800a15c:	e031      	b.n	800a1c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a15e:	f7fc ff0f 	bl	8006f80 <HAL_RCC_GetPCLK1Freq>
 800a162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a164:	e033      	b.n	800a1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a166:	f7fc ff21 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 800a16a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a16c:	e02f      	b.n	800a1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a16e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe f950 	bl	8008418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a17c:	e027      	b.n	800a1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17e:	f107 0318 	add.w	r3, r7, #24
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fa9c 	bl	80086c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18c:	e01f      	b.n	800a1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a18e:	4b2d      	ldr	r3, [pc, #180]	; (800a244 <UART_SetConfig+0xac0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a19a:	4b2a      	ldr	r3, [pc, #168]	; (800a244 <UART_SetConfig+0xac0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	08db      	lsrs	r3, r3, #3
 800a1a0:	f003 0303 	and.w	r3, r3, #3
 800a1a4:	4a28      	ldr	r2, [pc, #160]	; (800a248 <UART_SetConfig+0xac4>)
 800a1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1ac:	e00f      	b.n	800a1ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a1ae:	4b26      	ldr	r3, [pc, #152]	; (800a248 <UART_SetConfig+0xac4>)
 800a1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b2:	e00c      	b.n	800a1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1b4:	4b25      	ldr	r3, [pc, #148]	; (800a24c <UART_SetConfig+0xac8>)
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b8:	e009      	b.n	800a1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1c0:	e005      	b.n	800a1ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a1cc:	bf00      	nop
    }

    if (pclk != 0U)
 800a1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d021      	beq.n	800a218 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	4a1d      	ldr	r2, [pc, #116]	; (800a250 <UART_SetConfig+0xacc>)
 800a1da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	085b      	lsrs	r3, r3, #1
 800a1ec:	441a      	add	r2, r3
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	2b0f      	cmp	r3, #15
 800a1fc:	d909      	bls.n	800a212 <UART_SetConfig+0xa8e>
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a204:	d205      	bcs.n	800a212 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	b29a      	uxth	r2, r3
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	60da      	str	r2, [r3, #12]
 800a210:	e002      	b.n	800a218 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2201      	movs	r2, #1
 800a224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2200      	movs	r2, #0
 800a22c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2200      	movs	r2, #0
 800a232:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a234:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3748      	adds	r7, #72	; 0x48
 800a23c:	46bd      	mov	sp, r7
 800a23e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a242:	bf00      	nop
 800a244:	58024400 	.word	0x58024400
 800a248:	03d09000 	.word	0x03d09000
 800a24c:	003d0900 	.word	0x003d0900
 800a250:	080184ac 	.word	0x080184ac

0800a254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f003 0310 	and.w	r3, r3, #16
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	f003 0320 	and.w	r3, r3, #32
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	430a      	orrs	r2, r1
 800a326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01a      	beq.n	800a36a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a352:	d10a      	bne.n	800a36a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00a      	beq.n	800a38c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	605a      	str	r2, [r3, #4]
  }
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b098      	sub	sp, #96	; 0x60
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3a8:	f7f7 ff08 	bl	80021bc <HAL_GetTick>
 800a3ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d12f      	bne.n	800a41c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f88e 	bl	800a4ec <UART_WaitOnFlagUntilTimeout>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d022      	beq.n	800a41c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	e853 3f00 	ldrex	r3, [r3]
 800a3e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a3f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3fc:	e841 2300 	strex	r3, r2, [r1]
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e6      	bne.n	800a3d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2220      	movs	r2, #32
 800a40c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e063      	b.n	800a4e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0304 	and.w	r3, r3, #4
 800a426:	2b04      	cmp	r3, #4
 800a428:	d149      	bne.n	800a4be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a42a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a432:	2200      	movs	r2, #0
 800a434:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f857 	bl	800a4ec <UART_WaitOnFlagUntilTimeout>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d03c      	beq.n	800a4be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	623b      	str	r3, [r7, #32]
   return(result);
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a462:	633b      	str	r3, [r7, #48]	; 0x30
 800a464:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46a:	e841 2300 	strex	r3, r2, [r1]
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1e6      	bne.n	800a444 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3308      	adds	r3, #8
 800a47c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	60fb      	str	r3, [r7, #12]
   return(result);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f023 0301 	bic.w	r3, r3, #1
 800a48c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3308      	adds	r3, #8
 800a494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a496:	61fa      	str	r2, [r7, #28]
 800a498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	69b9      	ldr	r1, [r7, #24]
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e5      	bne.n	800a476 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e012      	b.n	800a4e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3758      	adds	r7, #88	; 0x58
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4fc:	e049      	b.n	800a592 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a504:	d045      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a506:	f7f7 fe59 	bl	80021bc <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	429a      	cmp	r2, r3
 800a514:	d302      	bcc.n	800a51c <UART_WaitOnFlagUntilTimeout+0x30>
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e048      	b.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0304 	and.w	r3, r3, #4
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d031      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	f003 0308 	and.w	r3, r3, #8
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d110      	bne.n	800a55e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2208      	movs	r2, #8
 800a542:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 f921 	bl	800a78c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2208      	movs	r2, #8
 800a54e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e029      	b.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a56c:	d111      	bne.n	800a592 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 f907 	bl	800a78c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e00f      	b.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69da      	ldr	r2, [r3, #28]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4013      	ands	r3, r2
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	bf0c      	ite	eq
 800a5a2:	2301      	moveq	r3, #1
 800a5a4:	2300      	movne	r3, #0
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d0a6      	beq.n	800a4fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b096      	sub	sp, #88	; 0x58
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2222      	movs	r2, #34	; 0x22
 800a5e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d02d      	beq.n	800a64e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5f8:	4a40      	ldr	r2, [pc, #256]	; (800a6fc <UART_Start_Receive_DMA+0x140>)
 800a5fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a602:	4a3f      	ldr	r2, [pc, #252]	; (800a700 <UART_Start_Receive_DMA+0x144>)
 800a604:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a60c:	4a3d      	ldr	r2, [pc, #244]	; (800a704 <UART_Start_Receive_DMA+0x148>)
 800a60e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a616:	2200      	movs	r2, #0
 800a618:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3324      	adds	r3, #36	; 0x24
 800a626:	4619      	mov	r1, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a62c:	461a      	mov	r2, r3
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	f7f8 fa80 	bl	8002b34 <HAL_DMA_Start_IT>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d009      	beq.n	800a64e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2210      	movs	r2, #16
 800a63e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e051      	b.n	800a6f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d018      	beq.n	800a688 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a66a:	657b      	str	r3, [r7, #84]	; 0x54
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	461a      	mov	r2, r3
 800a672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a674:	64bb      	str	r3, [r7, #72]	; 0x48
 800a676:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a67a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e6      	bne.n	800a656 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3308      	adds	r3, #8
 800a68e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	f043 0301 	orr.w	r3, r3, #1
 800a69e:	653b      	str	r3, [r7, #80]	; 0x50
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6a8:	637a      	str	r2, [r7, #52]	; 0x34
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e5      	bne.n	800a688 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	e853 3f00 	ldrex	r3, [r3]
 800a6ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3308      	adds	r3, #8
 800a6da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6dc:	623a      	str	r2, [r7, #32]
 800a6de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e0:	69f9      	ldr	r1, [r7, #28]
 800a6e2:	6a3a      	ldr	r2, [r7, #32]
 800a6e4:	e841 2300 	strex	r3, r2, [r1]
 800a6e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1e5      	bne.n	800a6bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3758      	adds	r7, #88	; 0x58
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0800a90b 	.word	0x0800a90b
 800a700:	0800aa33 	.word	0x0800aa33
 800a704:	0800aa71 	.word	0x0800aa71

0800a708 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a708:	b480      	push	{r7}
 800a70a:	b08f      	sub	sp, #60	; 0x3c
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a724:	637b      	str	r3, [r7, #52]	; 0x34
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a730:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e6      	bne.n	800a710 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3308      	adds	r3, #8
 800a748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	60bb      	str	r3, [r7, #8]
   return(result);
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a758:	633b      	str	r3, [r7, #48]	; 0x30
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3308      	adds	r3, #8
 800a760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a762:	61ba      	str	r2, [r7, #24]
 800a764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a766:	6979      	ldr	r1, [r7, #20]
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	e841 2300 	strex	r3, r2, [r1]
 800a76e:	613b      	str	r3, [r7, #16]
   return(result);
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1e5      	bne.n	800a742 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a77e:	bf00      	nop
 800a780:	373c      	adds	r7, #60	; 0x3c
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
	...

0800a78c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b095      	sub	sp, #84	; 0x54
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79c:	e853 3f00 	ldrex	r3, [r3]
 800a7a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b2:	643b      	str	r3, [r7, #64]	; 0x40
 800a7b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7ba:	e841 2300 	strex	r3, r2, [r1]
 800a7be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1e6      	bne.n	800a794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	e853 3f00 	ldrex	r3, [r3]
 800a7d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <UART_EndRxTransfer+0xc8>)
 800a7da:	4013      	ands	r3, r2
 800a7dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ee:	e841 2300 	strex	r3, r2, [r1]
 800a7f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1e5      	bne.n	800a7c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d118      	bne.n	800a834 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f023 0310 	bic.w	r3, r3, #16
 800a816:	647b      	str	r3, [r7, #68]	; 0x44
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a820:	61bb      	str	r3, [r7, #24]
 800a822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6979      	ldr	r1, [r7, #20]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	613b      	str	r3, [r7, #16]
   return(result);
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e6      	bne.n	800a802 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a848:	bf00      	nop
 800a84a:	3754      	adds	r7, #84	; 0x54
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	effffffe 	.word	0xeffffffe

0800a858 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b090      	sub	sp, #64	; 0x40
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a864:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a86e:	d037      	beq.n	800a8e0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a872:	2200      	movs	r2, #0
 800a874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3308      	adds	r3, #8
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	e853 3f00 	ldrex	r3, [r3]
 800a886:	623b      	str	r3, [r7, #32]
   return(result);
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a88e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3308      	adds	r3, #8
 800a896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a898:	633a      	str	r2, [r7, #48]	; 0x30
 800a89a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a89e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8a0:	e841 2300 	strex	r3, r2, [r1]
 800a8a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1e5      	bne.n	800a878 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	61fb      	str	r3, [r7, #28]
 800a8cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ce:	69b9      	ldr	r1, [r7, #24]
 800a8d0:	69fa      	ldr	r2, [r7, #28]
 800a8d2:	e841 2300 	strex	r3, r2, [r1]
 800a8d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1e6      	bne.n	800a8ac <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8de:	e002      	b.n	800a8e6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a8e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a8e2:	f7fe ff11 	bl	8009708 <HAL_UART_TxCpltCallback>
}
 800a8e6:	bf00      	nop
 800a8e8:	3740      	adds	r7, #64	; 0x40
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f7fe ff0d 	bl	800971c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a902:	bf00      	nop
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b09c      	sub	sp, #112	; 0x70
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a916:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a920:	d071      	beq.n	800aa06 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a924:	2200      	movs	r2, #0
 800a926:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a932:	e853 3f00 	ldrex	r3, [r3]
 800a936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a93a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a93e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	461a      	mov	r2, r3
 800a946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a948:	65bb      	str	r3, [r7, #88]	; 0x58
 800a94a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a94e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a950:	e841 2300 	strex	r3, r2, [r1]
 800a954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e6      	bne.n	800a92a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3308      	adds	r3, #8
 800a962:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	e853 3f00 	ldrex	r3, [r3]
 800a96a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96e:	f023 0301 	bic.w	r3, r3, #1
 800a972:	667b      	str	r3, [r7, #100]	; 0x64
 800a974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3308      	adds	r3, #8
 800a97a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a97c:	647a      	str	r2, [r7, #68]	; 0x44
 800a97e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a984:	e841 2300 	strex	r3, r2, [r1]
 800a988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1e5      	bne.n	800a95c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3308      	adds	r3, #8
 800a996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	623b      	str	r3, [r7, #32]
   return(result);
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9a6:	663b      	str	r3, [r7, #96]	; 0x60
 800a9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9b0:	633a      	str	r2, [r7, #48]	; 0x30
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e5      	bne.n	800a990 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d118      	bne.n	800aa06 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f023 0310 	bic.w	r3, r3, #16
 800a9e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	69b9      	ldr	r1, [r7, #24]
 800a9f8:	69fa      	ldr	r2, [r7, #28]
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	617b      	str	r3, [r7, #20]
   return(result);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e6      	bne.n	800a9d4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa08:	2200      	movs	r2, #0
 800aa0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d107      	bne.n	800aa24 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa1e:	f7fe fea5 	bl	800976c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa22:	e002      	b.n	800aa2a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800aa24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa26:	f7fe fe83 	bl	8009730 <HAL_UART_RxCpltCallback>
}
 800aa2a:	bf00      	nop
 800aa2c:	3770      	adds	r7, #112	; 0x70
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2201      	movs	r2, #1
 800aa44:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d109      	bne.n	800aa62 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa54:	085b      	lsrs	r3, r3, #1
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	4619      	mov	r1, r3
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f7fe fe86 	bl	800976c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa60:	e002      	b.n	800aa68 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7fe fe6e 	bl	8009744 <HAL_UART_RxHalfCpltCallback>
}
 800aa68:	bf00      	nop
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa98:	2b80      	cmp	r3, #128	; 0x80
 800aa9a:	d109      	bne.n	800aab0 <UART_DMAError+0x40>
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	2b21      	cmp	r3, #33	; 0x21
 800aaa0:	d106      	bne.n	800aab0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800aaaa:	6978      	ldr	r0, [r7, #20]
 800aaac:	f7ff fe2c 	bl	800a708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaba:	2b40      	cmp	r3, #64	; 0x40
 800aabc:	d109      	bne.n	800aad2 <UART_DMAError+0x62>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b22      	cmp	r3, #34	; 0x22
 800aac2:	d106      	bne.n	800aad2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800aacc:	6978      	ldr	r0, [r7, #20]
 800aace:	f7ff fe5d 	bl	800a78c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad8:	f043 0210 	orr.w	r2, r3, #16
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f7fe fe38 	bl	8009758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aae8:	bf00      	nop
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7fe fe22 	bl	8009758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab38:	61fb      	str	r3, [r7, #28]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	61bb      	str	r3, [r7, #24]
 800ab44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6979      	ldr	r1, [r7, #20]
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e6      	bne.n	800ab24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7fe fdcf 	bl	8009708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab6a:	bf00      	nop
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b083      	sub	sp, #12
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab7a:	bf00      	nop
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abae:	b480      	push	{r7}
 800abb0:	b085      	sub	sp, #20
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_UARTEx_DisableFifoMode+0x16>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e027      	b.n	800ac14 <HAL_UARTEx_DisableFifoMode+0x66>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2224      	movs	r2, #36	; 0x24
 800abd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0201 	bic.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800abf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2220      	movs	r2, #32
 800ac06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d101      	bne.n	800ac38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac34:	2302      	movs	r3, #2
 800ac36:	e02d      	b.n	800ac94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2224      	movs	r2, #36	; 0x24
 800ac44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0201 	bic.w	r2, r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f84f 	bl	800ad18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2220      	movs	r2, #32
 800ac86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800acac:	2b01      	cmp	r3, #1
 800acae:	d101      	bne.n	800acb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e02d      	b.n	800ad10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2224      	movs	r2, #36	; 0x24
 800acc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0201 	bic.w	r2, r2, #1
 800acda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	430a      	orrs	r2, r1
 800acee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f811 	bl	800ad18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2220      	movs	r2, #32
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d108      	bne.n	800ad3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad38:	e031      	b.n	800ad9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad3a:	2310      	movs	r3, #16
 800ad3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad3e:	2310      	movs	r3, #16
 800ad40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	0e5b      	lsrs	r3, r3, #25
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	f003 0307 	and.w	r3, r3, #7
 800ad50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	0f5b      	lsrs	r3, r3, #29
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad62:	7bbb      	ldrb	r3, [r7, #14]
 800ad64:	7b3a      	ldrb	r2, [r7, #12]
 800ad66:	4911      	ldr	r1, [pc, #68]	; (800adac <UARTEx_SetNbDataToProcess+0x94>)
 800ad68:	5c8a      	ldrb	r2, [r1, r2]
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad6e:	7b3a      	ldrb	r2, [r7, #12]
 800ad70:	490f      	ldr	r1, [pc, #60]	; (800adb0 <UARTEx_SetNbDataToProcess+0x98>)
 800ad72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	7b7a      	ldrb	r2, [r7, #13]
 800ad84:	4909      	ldr	r1, [pc, #36]	; (800adac <UARTEx_SetNbDataToProcess+0x94>)
 800ad86:	5c8a      	ldrb	r2, [r1, r2]
 800ad88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad8c:	7b7a      	ldrb	r2, [r7, #13]
 800ad8e:	4908      	ldr	r1, [pc, #32]	; (800adb0 <UARTEx_SetNbDataToProcess+0x98>)
 800ad90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ad9e:	bf00      	nop
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	080184c4 	.word	0x080184c4
 800adb0:	080184cc 	.word	0x080184cc

0800adb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adb4:	b084      	sub	sp, #16
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	f107 001c 	add.w	r0, r7, #28
 800adc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d120      	bne.n	800ae0e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	4b2a      	ldr	r3, [pc, #168]	; (800ae88 <USB_CoreInit+0xd4>)
 800adde:	4013      	ands	r3, r2
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800adf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d105      	bne.n	800ae02 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 faac 	bl	800b360 <USB_CoreReset>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]
 800ae0c:	e01a      	b.n	800ae44 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 faa0 	bl	800b360 <USB_CoreReset>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	639a      	str	r2, [r3, #56]	; 0x38
 800ae36:	e005      	b.n	800ae44 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d116      	bne.n	800ae78 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae58:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <USB_CoreInit+0xd8>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f043 0206 	orr.w	r2, r3, #6
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f043 0220 	orr.w	r2, r3, #32
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae84:	b004      	add	sp, #16
 800ae86:	4770      	bx	lr
 800ae88:	ffbdffbf 	.word	0xffbdffbf
 800ae8c:	03ee0000 	.word	0x03ee0000

0800ae90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	f023 0201 	bic.w	r2, r3, #1
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	460b      	mov	r3, r1
 800aebc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aece:	78fb      	ldrb	r3, [r7, #3]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d115      	bne.n	800af00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aee0:	2001      	movs	r0, #1
 800aee2:	f7f7 f977 	bl	80021d4 <HAL_Delay>
      ms++;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3301      	adds	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fa29 	bl	800b344 <USB_GetMode>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d01e      	beq.n	800af36 <USB_SetCurrentMode+0x84>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b31      	cmp	r3, #49	; 0x31
 800aefc:	d9f0      	bls.n	800aee0 <USB_SetCurrentMode+0x2e>
 800aefe:	e01a      	b.n	800af36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d115      	bne.n	800af32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af12:	2001      	movs	r0, #1
 800af14:	f7f7 f95e 	bl	80021d4 <HAL_Delay>
      ms++;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fa10 	bl	800b344 <USB_GetMode>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d005      	beq.n	800af36 <USB_SetCurrentMode+0x84>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b31      	cmp	r3, #49	; 0x31
 800af2e:	d9f0      	bls.n	800af12 <USB_SetCurrentMode+0x60>
 800af30:	e001      	b.n	800af36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e005      	b.n	800af42 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b32      	cmp	r3, #50	; 0x32
 800af3a:	d101      	bne.n	800af40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e000      	b.n	800af42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
	...

0800af4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af4c:	b084      	sub	sp, #16
 800af4e:	b580      	push	{r7, lr}
 800af50:	b086      	sub	sp, #24
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800af5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af66:	2300      	movs	r3, #0
 800af68:	613b      	str	r3, [r7, #16]
 800af6a:	e009      	b.n	800af80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	3340      	adds	r3, #64	; 0x40
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	2200      	movs	r2, #0
 800af78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	3301      	adds	r3, #1
 800af7e:	613b      	str	r3, [r7, #16]
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b0e      	cmp	r3, #14
 800af84:	d9f2      	bls.n	800af6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800af86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d11c      	bne.n	800afc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af9a:	f043 0302 	orr.w	r3, r3, #2
 800af9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	e005      	b.n	800afd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afd8:	461a      	mov	r2, r3
 800afda:	2300      	movs	r3, #0
 800afdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe4:	4619      	mov	r1, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afec:	461a      	mov	r2, r3
 800afee:	680b      	ldr	r3, [r1, #0]
 800aff0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d10c      	bne.n	800b012 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	2b00      	cmp	r3, #0
 800affc:	d104      	bne.n	800b008 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800affe:	2100      	movs	r1, #0
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f965 	bl	800b2d0 <USB_SetDevSpeed>
 800b006:	e008      	b.n	800b01a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b008:	2101      	movs	r1, #1
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f960 	bl	800b2d0 <USB_SetDevSpeed>
 800b010:	e003      	b.n	800b01a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b012:	2103      	movs	r1, #3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f95b 	bl	800b2d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b01a:	2110      	movs	r1, #16
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f8f3 	bl	800b208 <USB_FlushTxFifo>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f91f 	bl	800b270 <USB_FlushRxFifo>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b042:	461a      	mov	r2, r3
 800b044:	2300      	movs	r3, #0
 800b046:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b04e:	461a      	mov	r2, r3
 800b050:	2300      	movs	r3, #0
 800b052:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05a:	461a      	mov	r2, r3
 800b05c:	2300      	movs	r3, #0
 800b05e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b060:	2300      	movs	r3, #0
 800b062:	613b      	str	r3, [r7, #16]
 800b064:	e043      	b.n	800b0ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b07c:	d118      	bne.n	800b0b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10a      	bne.n	800b09a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b090:	461a      	mov	r2, r3
 800b092:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	e013      	b.n	800b0c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	015a      	lsls	r2, r3, #5
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	e008      	b.n	800b0c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	015a      	lsls	r2, r3, #5
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0bc:	461a      	mov	r2, r3
 800b0be:	2300      	movs	r3, #0
 800b0c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	613b      	str	r3, [r7, #16]
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d3b7      	bcc.n	800b066 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
 800b0fa:	e043      	b.n	800b184 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b10e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b112:	d118      	bne.n	800b146 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b126:	461a      	mov	r2, r3
 800b128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	e013      	b.n	800b158 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13c:	461a      	mov	r2, r3
 800b13e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b142:	6013      	str	r3, [r2, #0]
 800b144:	e008      	b.n	800b158 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b152:	461a      	mov	r2, r3
 800b154:	2300      	movs	r3, #0
 800b156:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b164:	461a      	mov	r2, r3
 800b166:	2300      	movs	r3, #0
 800b168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	015a      	lsls	r2, r3, #5
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	4413      	add	r3, r2
 800b172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b176:	461a      	mov	r2, r3
 800b178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b17c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	3301      	adds	r3, #1
 800b182:	613b      	str	r3, [r7, #16]
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d3b7      	bcc.n	800b0fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b19a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b19e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b1ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d105      	bne.n	800b1c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	f043 0210 	orr.w	r2, r3, #16
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	699a      	ldr	r2, [r3, #24]
 800b1c4:	4b0e      	ldr	r3, [pc, #56]	; (800b200 <USB_DevInit+0x2b4>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d005      	beq.n	800b1de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	f043 0208 	orr.w	r2, r3, #8
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d105      	bne.n	800b1f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	699a      	ldr	r2, [r3, #24]
 800b1e8:	4b06      	ldr	r3, [pc, #24]	; (800b204 <USB_DevInit+0x2b8>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1fc:	b004      	add	sp, #16
 800b1fe:	4770      	bx	lr
 800b200:	803c3800 	.word	0x803c3800
 800b204:	40000004 	.word	0x40000004

0800b208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4a13      	ldr	r2, [pc, #76]	; (800b26c <USB_FlushTxFifo+0x64>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d901      	bls.n	800b228 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e01b      	b.n	800b260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	daf2      	bge.n	800b216 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	019b      	lsls	r3, r3, #6
 800b238:	f043 0220 	orr.w	r2, r3, #32
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	3301      	adds	r3, #1
 800b244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4a08      	ldr	r2, [pc, #32]	; (800b26c <USB_FlushTxFifo+0x64>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d901      	bls.n	800b252 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b24e:	2303      	movs	r3, #3
 800b250:	e006      	b.n	800b260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d0f0      	beq.n	800b240 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	00030d40 	.word	0x00030d40

0800b270 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3301      	adds	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <USB_FlushRxFifo+0x5c>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d901      	bls.n	800b28e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e018      	b.n	800b2c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	daf2      	bge.n	800b27c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2210      	movs	r2, #16
 800b29e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4a08      	ldr	r2, [pc, #32]	; (800b2cc <USB_FlushRxFifo+0x5c>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d901      	bls.n	800b2b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e006      	b.n	800b2c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f003 0310 	and.w	r3, r3, #16
 800b2ba:	2b10      	cmp	r3, #16
 800b2bc:	d0f0      	beq.n	800b2a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	00030d40 	.word	0x00030d40

0800b2d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	78fb      	ldrb	r3, [r7, #3]
 800b2ea:	68f9      	ldr	r1, [r7, #12]
 800b2ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b302:	b480      	push	{r7}
 800b304:	b085      	sub	sp, #20
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b330:	f043 0302 	orr.w	r3, r3, #2
 800b334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	695b      	ldr	r3, [r3, #20]
 800b350:	f003 0301 	and.w	r3, r3, #1
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3301      	adds	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4a13      	ldr	r2, [pc, #76]	; (800b3c4 <USB_CoreReset+0x64>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d901      	bls.n	800b37e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e01b      	b.n	800b3b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	daf2      	bge.n	800b36c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	f043 0201 	orr.w	r2, r3, #1
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3301      	adds	r3, #1
 800b39a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <USB_CoreReset+0x64>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d901      	bls.n	800b3a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e006      	b.n	800b3b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d0f0      	beq.n	800b396 <USB_CoreReset+0x36>

  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	00030d40 	.word	0x00030d40

0800b3c8 <__NVIC_SetPriority>:
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b3d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db0a      	blt.n	800b3f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	490c      	ldr	r1, [pc, #48]	; (800b414 <__NVIC_SetPriority+0x4c>)
 800b3e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3e6:	0112      	lsls	r2, r2, #4
 800b3e8:	b2d2      	uxtb	r2, r2
 800b3ea:	440b      	add	r3, r1
 800b3ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b3f0:	e00a      	b.n	800b408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	4908      	ldr	r1, [pc, #32]	; (800b418 <__NVIC_SetPriority+0x50>)
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	3b04      	subs	r3, #4
 800b400:	0112      	lsls	r2, r2, #4
 800b402:	b2d2      	uxtb	r2, r2
 800b404:	440b      	add	r3, r1
 800b406:	761a      	strb	r2, [r3, #24]
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	e000e100 	.word	0xe000e100
 800b418:	e000ed00 	.word	0xe000ed00

0800b41c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b420:	2100      	movs	r1, #0
 800b422:	f06f 0004 	mvn.w	r0, #4
 800b426:	f7ff ffcf 	bl	800b3c8 <__NVIC_SetPriority>
#endif
}
 800b42a:	bf00      	nop
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b436:	f3ef 8305 	mrs	r3, IPSR
 800b43a:	603b      	str	r3, [r7, #0]
  return(result);
 800b43c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b442:	f06f 0305 	mvn.w	r3, #5
 800b446:	607b      	str	r3, [r7, #4]
 800b448:	e00c      	b.n	800b464 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b44a:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <osKernelInitialize+0x44>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d105      	bne.n	800b45e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b452:	4b08      	ldr	r3, [pc, #32]	; (800b474 <osKernelInitialize+0x44>)
 800b454:	2201      	movs	r2, #1
 800b456:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b458:	2300      	movs	r3, #0
 800b45a:	607b      	str	r3, [r7, #4]
 800b45c:	e002      	b.n	800b464 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b45e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b462:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b464:	687b      	ldr	r3, [r7, #4]
}
 800b466:	4618      	mov	r0, r3
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	24004e40 	.word	0x24004e40

0800b478 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b47e:	f3ef 8305 	mrs	r3, IPSR
 800b482:	603b      	str	r3, [r7, #0]
  return(result);
 800b484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b48a:	f06f 0305 	mvn.w	r3, #5
 800b48e:	607b      	str	r3, [r7, #4]
 800b490:	e010      	b.n	800b4b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b492:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <osKernelStart+0x48>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d109      	bne.n	800b4ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b49a:	f7ff ffbf 	bl	800b41c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b49e:	4b08      	ldr	r3, [pc, #32]	; (800b4c0 <osKernelStart+0x48>)
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b4a4:	f001 f866 	bl	800c574 <vTaskStartScheduler>
      stat = osOK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	607b      	str	r3, [r7, #4]
 800b4ac:	e002      	b.n	800b4b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b4ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4b4:	687b      	ldr	r3, [r7, #4]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	24004e40 	.word	0x24004e40

0800b4c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08e      	sub	sp, #56	; 0x38
 800b4c8:	af04      	add	r7, sp, #16
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4d4:	f3ef 8305 	mrs	r3, IPSR
 800b4d8:	617b      	str	r3, [r7, #20]
  return(result);
 800b4da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d17e      	bne.n	800b5de <osThreadNew+0x11a>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d07b      	beq.n	800b5de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b4e6:	2380      	movs	r3, #128	; 0x80
 800b4e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b4ea:	2318      	movs	r3, #24
 800b4ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d045      	beq.n	800b58a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <osThreadNew+0x48>
        name = attr->name;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d008      	beq.n	800b532 <osThreadNew+0x6e>
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	2b38      	cmp	r3, #56	; 0x38
 800b524:	d805      	bhi.n	800b532 <osThreadNew+0x6e>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <osThreadNew+0x72>
        return (NULL);
 800b532:	2300      	movs	r3, #0
 800b534:	e054      	b.n	800b5e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	089b      	lsrs	r3, r3, #2
 800b544:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00e      	beq.n	800b56c <osThreadNew+0xa8>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	2b5b      	cmp	r3, #91	; 0x5b
 800b554:	d90a      	bls.n	800b56c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d006      	beq.n	800b56c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <osThreadNew+0xa8>
        mem = 1;
 800b566:	2301      	movs	r3, #1
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	e010      	b.n	800b58e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10c      	bne.n	800b58e <osThreadNew+0xca>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d108      	bne.n	800b58e <osThreadNew+0xca>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d104      	bne.n	800b58e <osThreadNew+0xca>
          mem = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	61bb      	str	r3, [r7, #24]
 800b588:	e001      	b.n	800b58e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d110      	bne.n	800b5b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b59c:	9202      	str	r2, [sp, #8]
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	6a3a      	ldr	r2, [r7, #32]
 800b5a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f000 fe0c 	bl	800c1c8 <xTaskCreateStatic>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	613b      	str	r3, [r7, #16]
 800b5b4:	e013      	b.n	800b5de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d110      	bne.n	800b5de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	f107 0310 	add.w	r3, r7, #16
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fe57 	bl	800c282 <xTaskCreate>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d001      	beq.n	800b5de <osThreadNew+0x11a>
            hTask = NULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b5de:	693b      	ldr	r3, [r7, #16]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3728      	adds	r7, #40	; 0x28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5f0:	f3ef 8305 	mrs	r3, IPSR
 800b5f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <osDelay+0x1c>
    stat = osErrorISR;
 800b5fc:	f06f 0305 	mvn.w	r3, #5
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	e007      	b.n	800b614 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 ff7c 	bl	800c50c <vTaskDelay>
    }
  }

  return (stat);
 800b614:	68fb      	ldr	r3, [r7, #12]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	4a07      	ldr	r2, [pc, #28]	; (800b64c <vApplicationGetIdleTaskMemory+0x2c>)
 800b630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	4a06      	ldr	r2, [pc, #24]	; (800b650 <vApplicationGetIdleTaskMemory+0x30>)
 800b636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2280      	movs	r2, #128	; 0x80
 800b63c:	601a      	str	r2, [r3, #0]
}
 800b63e:	bf00      	nop
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	24004e44 	.word	0x24004e44
 800b650:	24004ea0 	.word	0x24004ea0

0800b654 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	4a07      	ldr	r2, [pc, #28]	; (800b680 <vApplicationGetTimerTaskMemory+0x2c>)
 800b664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	4a06      	ldr	r2, [pc, #24]	; (800b684 <vApplicationGetTimerTaskMemory+0x30>)
 800b66a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b672:	601a      	str	r2, [r3, #0]
}
 800b674:	bf00      	nop
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	240050a0 	.word	0x240050a0
 800b684:	240050fc 	.word	0x240050fc

0800b688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f103 0208 	add.w	r2, r3, #8
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f103 0208 	add.w	r2, r3, #8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f103 0208 	add.w	r2, r3, #8
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b085      	sub	sp, #20
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	689a      	ldr	r2, [r3, #8]
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	601a      	str	r2, [r3, #0]
}
 800b71e:	bf00      	nop
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b72a:	b480      	push	{r7}
 800b72c:	b085      	sub	sp, #20
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b740:	d103      	bne.n	800b74a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	e00c      	b.n	800b764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	3308      	adds	r3, #8
 800b74e:	60fb      	str	r3, [r7, #12]
 800b750:	e002      	b.n	800b758 <vListInsert+0x2e>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	429a      	cmp	r2, r3
 800b762:	d2f6      	bcs.n	800b752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	601a      	str	r2, [r3, #0]
}
 800b790:	bf00      	nop
 800b792:	3714      	adds	r7, #20
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6892      	ldr	r2, [r2, #8]
 800b7b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6852      	ldr	r2, [r2, #4]
 800b7bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d103      	bne.n	800b7d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	1e5a      	subs	r2, r3, #1
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <xQueueGenericReset+0x2a>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60bb      	str	r3, [r7, #8]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b81a:	f002 f873 	bl	800d904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b826:	68f9      	ldr	r1, [r7, #12]
 800b828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b82a:	fb01 f303 	mul.w	r3, r1, r3
 800b82e:	441a      	add	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84a:	3b01      	subs	r3, #1
 800b84c:	68f9      	ldr	r1, [r7, #12]
 800b84e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b850:	fb01 f303 	mul.w	r3, r1, r3
 800b854:	441a      	add	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	22ff      	movs	r2, #255	; 0xff
 800b85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	22ff      	movs	r2, #255	; 0xff
 800b866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d114      	bne.n	800b89a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d01a      	beq.n	800b8ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	3310      	adds	r3, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 f903 	bl	800ca88 <xTaskRemoveFromEventList>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d012      	beq.n	800b8ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b888:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <xQueueGenericReset+0xcc>)
 800b88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	e009      	b.n	800b8ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3310      	adds	r3, #16
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff fef2 	bl	800b688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3324      	adds	r3, #36	; 0x24
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff feed 	bl	800b688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8ae:	f002 f859 	bl	800d964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8b2:	2301      	movs	r3, #1
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	e000ed04 	.word	0xe000ed04

0800b8c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b08e      	sub	sp, #56	; 0x38
 800b8c4:	af02      	add	r7, sp, #8
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <xQueueGenericCreateStatic+0x52>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <xQueueGenericCreateStatic+0x56>
 800b912:	2301      	movs	r3, #1
 800b914:	e000      	b.n	800b918 <xQueueGenericCreateStatic+0x58>
 800b916:	2300      	movs	r3, #0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	623b      	str	r3, [r7, #32]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <xQueueGenericCreateStatic+0x7e>
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <xQueueGenericCreateStatic+0x82>
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <xQueueGenericCreateStatic+0x84>
 800b942:	2300      	movs	r3, #0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	61fb      	str	r3, [r7, #28]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b95e:	2350      	movs	r3, #80	; 0x50
 800b960:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b50      	cmp	r3, #80	; 0x50
 800b966:	d00a      	beq.n	800b97e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	61bb      	str	r3, [r7, #24]
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b97e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00d      	beq.n	800b9a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b992:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	4613      	mov	r3, r2
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f805 	bl	800b9b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3730      	adds	r7, #48	; 0x30
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d103      	bne.n	800b9cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	69ba      	ldr	r2, [r7, #24]
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	e002      	b.n	800b9d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9de:	2101      	movs	r1, #1
 800b9e0:	69b8      	ldr	r0, [r7, #24]
 800b9e2:	f7ff ff05 	bl	800b7f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	78fa      	ldrb	r2, [r7, #3]
 800b9ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9ee:	bf00      	nop
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08e      	sub	sp, #56	; 0x38
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba06:	2300      	movs	r3, #0
 800ba08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <xQueueGenericSend+0x32>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d103      	bne.n	800ba38 <xQueueGenericSend+0x40>
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <xQueueGenericSend+0x44>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e000      	b.n	800ba3e <xQueueGenericSend+0x46>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10a      	bne.n	800ba58 <xQueueGenericSend+0x60>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba54:	bf00      	nop
 800ba56:	e7fe      	b.n	800ba56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d103      	bne.n	800ba66 <xQueueGenericSend+0x6e>
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d101      	bne.n	800ba6a <xQueueGenericSend+0x72>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e000      	b.n	800ba6c <xQueueGenericSend+0x74>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <xQueueGenericSend+0x8e>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	623b      	str	r3, [r7, #32]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba86:	f001 f9e3 	bl	800ce50 <xTaskGetSchedulerState>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <xQueueGenericSend+0x9e>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <xQueueGenericSend+0xa2>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e000      	b.n	800ba9c <xQueueGenericSend+0xa4>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xQueueGenericSend+0xbe>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	61fb      	str	r3, [r7, #28]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bab6:	f001 ff25 	bl	800d904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d302      	bcc.n	800bacc <xQueueGenericSend+0xd4>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d129      	bne.n	800bb20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	68b9      	ldr	r1, [r7, #8]
 800bad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bad2:	f000 fa0b 	bl	800beec <prvCopyDataToQueue>
 800bad6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	2b00      	cmp	r3, #0
 800bade:	d010      	beq.n	800bb02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	3324      	adds	r3, #36	; 0x24
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 ffcf 	bl	800ca88 <xTaskRemoveFromEventList>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d013      	beq.n	800bb18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800baf0:	4b3f      	ldr	r3, [pc, #252]	; (800bbf0 <xQueueGenericSend+0x1f8>)
 800baf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	e00a      	b.n	800bb18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d007      	beq.n	800bb18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb08:	4b39      	ldr	r3, [pc, #228]	; (800bbf0 <xQueueGenericSend+0x1f8>)
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb18:	f001 ff24 	bl	800d964 <vPortExitCritical>
				return pdPASS;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e063      	b.n	800bbe8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d103      	bne.n	800bb2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb26:	f001 ff1d 	bl	800d964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	e05c      	b.n	800bbe8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d106      	bne.n	800bb42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb34:	f107 0314 	add.w	r3, r7, #20
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f001 f82f 	bl	800cb9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb42:	f001 ff0f 	bl	800d964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb46:	f000 fd7b 	bl	800c640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb4a:	f001 fedb 	bl	800d904 <vPortEnterCritical>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb54:	b25b      	sxtb	r3, r3
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb5a:	d103      	bne.n	800bb64 <xQueueGenericSend+0x16c>
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb6a:	b25b      	sxtb	r3, r3
 800bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb70:	d103      	bne.n	800bb7a <xQueueGenericSend+0x182>
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb7a:	f001 fef3 	bl	800d964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb7e:	1d3a      	adds	r2, r7, #4
 800bb80:	f107 0314 	add.w	r3, r7, #20
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 f81e 	bl	800cbc8 <xTaskCheckForTimeOut>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d124      	bne.n	800bbdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb94:	f000 faa2 	bl	800c0dc <prvIsQueueFull>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d018      	beq.n	800bbd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	3310      	adds	r3, #16
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 ff1e 	bl	800c9e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbae:	f000 fa2d 	bl	800c00c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbb2:	f000 fd53 	bl	800c65c <xTaskResumeAll>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f47f af7c 	bne.w	800bab6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbbe:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <xQueueGenericSend+0x1f8>)
 800bbc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	e772      	b.n	800bab6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd2:	f000 fa1b 	bl	800c00c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbd6:	f000 fd41 	bl	800c65c <xTaskResumeAll>
 800bbda:	e76c      	b.n	800bab6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbde:	f000 fa15 	bl	800c00c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbe2:	f000 fd3b 	bl	800c65c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3738      	adds	r7, #56	; 0x38
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	e000ed04 	.word	0xe000ed04

0800bbf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b090      	sub	sp, #64	; 0x40
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10a      	bne.n	800bc22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d103      	bne.n	800bc30 <xQueueGenericSendFromISR+0x3c>
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <xQueueGenericSendFromISR+0x40>
 800bc30:	2301      	movs	r3, #1
 800bc32:	e000      	b.n	800bc36 <xQueueGenericSendFromISR+0x42>
 800bc34:	2300      	movs	r3, #0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10a      	bne.n	800bc50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc4c:	bf00      	nop
 800bc4e:	e7fe      	b.n	800bc4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d103      	bne.n	800bc5e <xQueueGenericSendFromISR+0x6a>
 800bc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d101      	bne.n	800bc62 <xQueueGenericSendFromISR+0x6e>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e000      	b.n	800bc64 <xQueueGenericSendFromISR+0x70>
 800bc62:	2300      	movs	r3, #0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	623b      	str	r3, [r7, #32]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc7e:	f001 ff23 	bl	800dac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc82:	f3ef 8211 	mrs	r2, BASEPRI
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	61fa      	str	r2, [r7, #28]
 800bc98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d302      	bcc.n	800bcb0 <xQueueGenericSendFromISR+0xbc>
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d12f      	bne.n	800bd10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	68b9      	ldr	r1, [r7, #8]
 800bcc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcc6:	f000 f911 	bl	800beec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcd2:	d112      	bne.n	800bcfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d016      	beq.n	800bd0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	3324      	adds	r3, #36	; 0x24
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 fed1 	bl	800ca88 <xTaskRemoveFromEventList>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00e      	beq.n	800bd0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00b      	beq.n	800bd0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]
 800bcf8:	e007      	b.n	800bd0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bcfe:	3301      	adds	r3, #1
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	b25a      	sxtb	r2, r3
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd0e:	e001      	b.n	800bd14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd10:	2300      	movs	r3, #0
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3740      	adds	r7, #64	; 0x40
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08c      	sub	sp, #48	; 0x30
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10a      	bne.n	800bd5c <xQueueReceive+0x30>
	__asm volatile
 800bd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	623b      	str	r3, [r7, #32]
}
 800bd58:	bf00      	nop
 800bd5a:	e7fe      	b.n	800bd5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d103      	bne.n	800bd6a <xQueueReceive+0x3e>
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <xQueueReceive+0x42>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <xQueueReceive+0x44>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <xQueueReceive+0x5e>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	61fb      	str	r3, [r7, #28]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd8a:	f001 f861 	bl	800ce50 <xTaskGetSchedulerState>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d102      	bne.n	800bd9a <xQueueReceive+0x6e>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <xQueueReceive+0x72>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <xQueueReceive+0x74>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueReceive+0x8e>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	61bb      	str	r3, [r7, #24]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdba:	f001 fda3 	bl	800d904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01f      	beq.n	800be0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdce:	f000 f8f7 	bl	800bfc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	1e5a      	subs	r2, r3, #1
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00f      	beq.n	800be02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	3310      	adds	r3, #16
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 fe4e 	bl	800ca88 <xTaskRemoveFromEventList>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d007      	beq.n	800be02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdf2:	4b3d      	ldr	r3, [pc, #244]	; (800bee8 <xQueueReceive+0x1bc>)
 800bdf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf8:	601a      	str	r2, [r3, #0]
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be02:	f001 fdaf 	bl	800d964 <vPortExitCritical>
				return pdPASS;
 800be06:	2301      	movs	r3, #1
 800be08:	e069      	b.n	800bede <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d103      	bne.n	800be18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be10:	f001 fda8 	bl	800d964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be14:	2300      	movs	r3, #0
 800be16:	e062      	b.n	800bede <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d106      	bne.n	800be2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be1e:	f107 0310 	add.w	r3, r7, #16
 800be22:	4618      	mov	r0, r3
 800be24:	f000 feba 	bl	800cb9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be28:	2301      	movs	r3, #1
 800be2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be2c:	f001 fd9a 	bl	800d964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be30:	f000 fc06 	bl	800c640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be34:	f001 fd66 	bl	800d904 <vPortEnterCritical>
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be3e:	b25b      	sxtb	r3, r3
 800be40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be44:	d103      	bne.n	800be4e <xQueueReceive+0x122>
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be54:	b25b      	sxtb	r3, r3
 800be56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be5a:	d103      	bne.n	800be64 <xQueueReceive+0x138>
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be64:	f001 fd7e 	bl	800d964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be68:	1d3a      	adds	r2, r7, #4
 800be6a:	f107 0310 	add.w	r3, r7, #16
 800be6e:	4611      	mov	r1, r2
 800be70:	4618      	mov	r0, r3
 800be72:	f000 fea9 	bl	800cbc8 <xTaskCheckForTimeOut>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d123      	bne.n	800bec4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be7e:	f000 f917 	bl	800c0b0 <prvIsQueueEmpty>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d017      	beq.n	800beb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	3324      	adds	r3, #36	; 0x24
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	4611      	mov	r1, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f000 fda9 	bl	800c9e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be98:	f000 f8b8 	bl	800c00c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be9c:	f000 fbde 	bl	800c65c <xTaskResumeAll>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d189      	bne.n	800bdba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bea6:	4b10      	ldr	r3, [pc, #64]	; (800bee8 <xQueueReceive+0x1bc>)
 800bea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	e780      	b.n	800bdba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800beb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beba:	f000 f8a7 	bl	800c00c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bebe:	f000 fbcd 	bl	800c65c <xTaskResumeAll>
 800bec2:	e77a      	b.n	800bdba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec6:	f000 f8a1 	bl	800c00c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beca:	f000 fbc7 	bl	800c65c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed0:	f000 f8ee 	bl	800c0b0 <prvIsQueueEmpty>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f43f af6f 	beq.w	800bdba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bedc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3730      	adds	r7, #48	; 0x30
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bef8:	2300      	movs	r3, #0
 800befa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10d      	bne.n	800bf26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d14d      	bne.n	800bfae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 ffb8 	bl	800ce8c <xTaskPriorityDisinherit>
 800bf1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	609a      	str	r2, [r3, #8]
 800bf24:	e043      	b.n	800bfae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d119      	bne.n	800bf60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6858      	ldr	r0, [r3, #4]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf34:	461a      	mov	r2, r3
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	f00b fb47 	bl	80175ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf44:	441a      	add	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d32b      	bcc.n	800bfae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	605a      	str	r2, [r3, #4]
 800bf5e:	e026      	b.n	800bfae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	68d8      	ldr	r0, [r3, #12]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf68:	461a      	mov	r2, r3
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	f00b fb2d 	bl	80175ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	68da      	ldr	r2, [r3, #12]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf78:	425b      	negs	r3, r3
 800bf7a:	441a      	add	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d207      	bcs.n	800bf9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf94:	425b      	negs	r3, r3
 800bf96:	441a      	add	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d105      	bne.n	800bfae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1c5a      	adds	r2, r3, #1
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfb6:	697b      	ldr	r3, [r7, #20]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d018      	beq.n	800c004 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfda:	441a      	add	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d303      	bcc.n	800bff4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68d9      	ldr	r1, [r3, #12]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffc:	461a      	mov	r2, r3
 800bffe:	6838      	ldr	r0, [r7, #0]
 800c000:	f00b fae3 	bl	80175ca <memcpy>
	}
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c014:	f001 fc76 	bl	800d904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c01e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c020:	e011      	b.n	800c046 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c026:	2b00      	cmp	r3, #0
 800c028:	d012      	beq.n	800c050 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	3324      	adds	r3, #36	; 0x24
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 fd2a 	bl	800ca88 <xTaskRemoveFromEventList>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c03a:	f000 fe27 	bl	800cc8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	3b01      	subs	r3, #1
 800c042:	b2db      	uxtb	r3, r3
 800c044:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dce9      	bgt.n	800c022 <prvUnlockQueue+0x16>
 800c04e:	e000      	b.n	800c052 <prvUnlockQueue+0x46>
					break;
 800c050:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	22ff      	movs	r2, #255	; 0xff
 800c056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c05a:	f001 fc83 	bl	800d964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c05e:	f001 fc51 	bl	800d904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c068:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c06a:	e011      	b.n	800c090 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d012      	beq.n	800c09a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3310      	adds	r3, #16
 800c078:	4618      	mov	r0, r3
 800c07a:	f000 fd05 	bl	800ca88 <xTaskRemoveFromEventList>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d001      	beq.n	800c088 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c084:	f000 fe02 	bl	800cc8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c094:	2b00      	cmp	r3, #0
 800c096:	dce9      	bgt.n	800c06c <prvUnlockQueue+0x60>
 800c098:	e000      	b.n	800c09c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c09a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	22ff      	movs	r2, #255	; 0xff
 800c0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0a4:	f001 fc5e 	bl	800d964 <vPortExitCritical>
}
 800c0a8:	bf00      	nop
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0b8:	f001 fc24 	bl	800d904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e001      	b.n	800c0ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0ce:	f001 fc49 	bl	800d964 <vPortExitCritical>

	return xReturn;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0e4:	f001 fc0e 	bl	800d904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d102      	bne.n	800c0fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	e001      	b.n	800c0fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0fe:	f001 fc31 	bl	800d964 <vPortExitCritical>

	return xReturn;
 800c102:	68fb      	ldr	r3, [r7, #12]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	e014      	b.n	800c146 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c11c:	4a0f      	ldr	r2, [pc, #60]	; (800c15c <vQueueAddToRegistry+0x50>)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10b      	bne.n	800c140 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c128:	490c      	ldr	r1, [pc, #48]	; (800c15c <vQueueAddToRegistry+0x50>)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c132:	4a0a      	ldr	r2, [pc, #40]	; (800c15c <vQueueAddToRegistry+0x50>)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	4413      	add	r3, r2
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c13e:	e006      	b.n	800c14e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3301      	adds	r3, #1
 800c144:	60fb      	str	r3, [r7, #12]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2b07      	cmp	r3, #7
 800c14a:	d9e7      	bls.n	800c11c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c14c:	bf00      	nop
 800c14e:	bf00      	nop
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	240054fc 	.word	0x240054fc

0800c160 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c170:	f001 fbc8 	bl	800d904 <vPortEnterCritical>
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c180:	d103      	bne.n	800c18a <vQueueWaitForMessageRestricted+0x2a>
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c190:	b25b      	sxtb	r3, r3
 800c192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c196:	d103      	bne.n	800c1a0 <vQueueWaitForMessageRestricted+0x40>
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1a0:	f001 fbe0 	bl	800d964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d106      	bne.n	800c1ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	3324      	adds	r3, #36	; 0x24
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	68b9      	ldr	r1, [r7, #8]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fc3b 	bl	800ca30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1ba:	6978      	ldr	r0, [r7, #20]
 800c1bc:	f7ff ff26 	bl	800c00c <prvUnlockQueue>
	}
 800c1c0:	bf00      	nop
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08e      	sub	sp, #56	; 0x38
 800c1cc:	af04      	add	r7, sp, #16
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	623b      	str	r3, [r7, #32]
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <xTaskCreateStatic+0x46>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	61fb      	str	r3, [r7, #28]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c20e:	235c      	movs	r3, #92	; 0x5c
 800c210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2b5c      	cmp	r3, #92	; 0x5c
 800c216:	d00a      	beq.n	800c22e <xTaskCreateStatic+0x66>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	61bb      	str	r3, [r7, #24]
}
 800c22a:	bf00      	nop
 800c22c:	e7fe      	b.n	800c22c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c22e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c232:	2b00      	cmp	r3, #0
 800c234:	d01e      	beq.n	800c274 <xTaskCreateStatic+0xac>
 800c236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01b      	beq.n	800c274 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c244:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	2202      	movs	r2, #2
 800c24a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c24e:	2300      	movs	r3, #0
 800c250:	9303      	str	r3, [sp, #12]
 800c252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c254:	9302      	str	r3, [sp, #8]
 800c256:	f107 0314 	add.w	r3, r7, #20
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 f850 	bl	800c30c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c26c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c26e:	f000 f8dd 	bl	800c42c <prvAddNewTaskToReadyList>
 800c272:	e001      	b.n	800c278 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c274:	2300      	movs	r3, #0
 800c276:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c278:	697b      	ldr	r3, [r7, #20]
	}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3728      	adds	r7, #40	; 0x28
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c282:	b580      	push	{r7, lr}
 800c284:	b08c      	sub	sp, #48	; 0x30
 800c286:	af04      	add	r7, sp, #16
 800c288:	60f8      	str	r0, [r7, #12]
 800c28a:	60b9      	str	r1, [r7, #8]
 800c28c:	603b      	str	r3, [r7, #0]
 800c28e:	4613      	mov	r3, r2
 800c290:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c292:	88fb      	ldrh	r3, [r7, #6]
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4618      	mov	r0, r3
 800c298:	f001 fc56 	bl	800db48 <pvPortMalloc>
 800c29c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00e      	beq.n	800c2c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2a4:	205c      	movs	r0, #92	; 0x5c
 800c2a6:	f001 fc4f 	bl	800db48 <pvPortMalloc>
 800c2aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	631a      	str	r2, [r3, #48]	; 0x30
 800c2b8:	e005      	b.n	800c2c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2ba:	6978      	ldr	r0, [r7, #20]
 800c2bc:	f001 fd10 	bl	800dce0 <vPortFree>
 800c2c0:	e001      	b.n	800c2c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d017      	beq.n	800c2fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2d4:	88fa      	ldrh	r2, [r7, #6]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9303      	str	r3, [sp, #12]
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	9302      	str	r3, [sp, #8]
 800c2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e0:	9301      	str	r3, [sp, #4]
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	68b9      	ldr	r1, [r7, #8]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 f80e 	bl	800c30c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2f0:	69f8      	ldr	r0, [r7, #28]
 800c2f2:	f000 f89b 	bl	800c42c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	61bb      	str	r3, [r7, #24]
 800c2fa:	e002      	b.n	800c302 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c300:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c302:	69bb      	ldr	r3, [r7, #24]
	}
 800c304:	4618      	mov	r0, r3
 800c306:	3720      	adds	r7, #32
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	461a      	mov	r2, r3
 800c324:	21a5      	movs	r1, #165	; 0xa5
 800c326:	f00b f887 	bl	8017438 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c334:	440b      	add	r3, r1
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	617b      	str	r3, [r7, #20]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d01f      	beq.n	800c3aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c36a:	2300      	movs	r3, #0
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	e012      	b.n	800c396 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	4413      	add	r3, r2
 800c376:	7819      	ldrb	r1, [r3, #0]
 800c378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	4413      	add	r3, r2
 800c37e:	3334      	adds	r3, #52	; 0x34
 800c380:	460a      	mov	r2, r1
 800c382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	4413      	add	r3, r2
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d006      	beq.n	800c39e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	3301      	adds	r3, #1
 800c394:	61fb      	str	r3, [r7, #28]
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	2b0f      	cmp	r3, #15
 800c39a:	d9e9      	bls.n	800c370 <prvInitialiseNewTask+0x64>
 800c39c:	e000      	b.n	800c3a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800c39e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3a8:	e003      	b.n	800c3b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b4:	2b37      	cmp	r3, #55	; 0x37
 800c3b6:	d901      	bls.n	800c3bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3b8:	2337      	movs	r3, #55	; 0x37
 800c3ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	3304      	adds	r3, #4
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff f978 	bl	800b6c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3da:	3318      	adds	r3, #24
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7ff f973 	bl	800b6c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	2200      	movs	r2, #0
 800c402:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	68f9      	ldr	r1, [r7, #12]
 800c40a:	69b8      	ldr	r0, [r7, #24]
 800c40c:	f001 f94e 	bl	800d6ac <pxPortInitialiseStack>
 800c410:	4602      	mov	r2, r0
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c422:	bf00      	nop
 800c424:	3720      	adds	r7, #32
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
	...

0800c42c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c434:	f001 fa66 	bl	800d904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c438:	4b2d      	ldr	r3, [pc, #180]	; (800c4f0 <prvAddNewTaskToReadyList+0xc4>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3301      	adds	r3, #1
 800c43e:	4a2c      	ldr	r2, [pc, #176]	; (800c4f0 <prvAddNewTaskToReadyList+0xc4>)
 800c440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c442:	4b2c      	ldr	r3, [pc, #176]	; (800c4f4 <prvAddNewTaskToReadyList+0xc8>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d109      	bne.n	800c45e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c44a:	4a2a      	ldr	r2, [pc, #168]	; (800c4f4 <prvAddNewTaskToReadyList+0xc8>)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c450:	4b27      	ldr	r3, [pc, #156]	; (800c4f0 <prvAddNewTaskToReadyList+0xc4>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d110      	bne.n	800c47a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c458:	f000 fc3c 	bl	800ccd4 <prvInitialiseTaskLists>
 800c45c:	e00d      	b.n	800c47a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c45e:	4b26      	ldr	r3, [pc, #152]	; (800c4f8 <prvAddNewTaskToReadyList+0xcc>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d109      	bne.n	800c47a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c466:	4b23      	ldr	r3, [pc, #140]	; (800c4f4 <prvAddNewTaskToReadyList+0xc8>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c470:	429a      	cmp	r2, r3
 800c472:	d802      	bhi.n	800c47a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c474:	4a1f      	ldr	r2, [pc, #124]	; (800c4f4 <prvAddNewTaskToReadyList+0xc8>)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c47a:	4b20      	ldr	r3, [pc, #128]	; (800c4fc <prvAddNewTaskToReadyList+0xd0>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3301      	adds	r3, #1
 800c480:	4a1e      	ldr	r2, [pc, #120]	; (800c4fc <prvAddNewTaskToReadyList+0xd0>)
 800c482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c484:	4b1d      	ldr	r3, [pc, #116]	; (800c4fc <prvAddNewTaskToReadyList+0xd0>)
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c490:	4b1b      	ldr	r3, [pc, #108]	; (800c500 <prvAddNewTaskToReadyList+0xd4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	429a      	cmp	r2, r3
 800c496:	d903      	bls.n	800c4a0 <prvAddNewTaskToReadyList+0x74>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	4a18      	ldr	r2, [pc, #96]	; (800c500 <prvAddNewTaskToReadyList+0xd4>)
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	4413      	add	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4a15      	ldr	r2, [pc, #84]	; (800c504 <prvAddNewTaskToReadyList+0xd8>)
 800c4ae:	441a      	add	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	f7ff f913 	bl	800b6e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4bc:	f001 fa52 	bl	800d964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4c0:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <prvAddNewTaskToReadyList+0xcc>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00e      	beq.n	800c4e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4c8:	4b0a      	ldr	r3, [pc, #40]	; (800c4f4 <prvAddNewTaskToReadyList+0xc8>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d207      	bcs.n	800c4e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4d6:	4b0c      	ldr	r3, [pc, #48]	; (800c508 <prvAddNewTaskToReadyList+0xdc>)
 800c4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4e6:	bf00      	nop
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	24005a10 	.word	0x24005a10
 800c4f4:	2400553c 	.word	0x2400553c
 800c4f8:	24005a1c 	.word	0x24005a1c
 800c4fc:	24005a2c 	.word	0x24005a2c
 800c500:	24005a18 	.word	0x24005a18
 800c504:	24005540 	.word	0x24005540
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c514:	2300      	movs	r3, #0
 800c516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d017      	beq.n	800c54e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c51e:	4b13      	ldr	r3, [pc, #76]	; (800c56c <vTaskDelay+0x60>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <vTaskDelay+0x30>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	60bb      	str	r3, [r7, #8]
}
 800c538:	bf00      	nop
 800c53a:	e7fe      	b.n	800c53a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c53c:	f000 f880 	bl	800c640 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c540:	2100      	movs	r1, #0
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fd10 	bl	800cf68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c548:	f000 f888 	bl	800c65c <xTaskResumeAll>
 800c54c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d107      	bne.n	800c564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c554:	4b06      	ldr	r3, [pc, #24]	; (800c570 <vTaskDelay+0x64>)
 800c556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c564:	bf00      	nop
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	24005a38 	.word	0x24005a38
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08a      	sub	sp, #40	; 0x28
 800c578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c582:	463a      	mov	r2, r7
 800c584:	1d39      	adds	r1, r7, #4
 800c586:	f107 0308 	add.w	r3, r7, #8
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff f848 	bl	800b620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	9202      	str	r2, [sp, #8]
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	2300      	movs	r3, #0
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	460a      	mov	r2, r1
 800c5a2:	4921      	ldr	r1, [pc, #132]	; (800c628 <vTaskStartScheduler+0xb4>)
 800c5a4:	4821      	ldr	r0, [pc, #132]	; (800c62c <vTaskStartScheduler+0xb8>)
 800c5a6:	f7ff fe0f 	bl	800c1c8 <xTaskCreateStatic>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	4a20      	ldr	r2, [pc, #128]	; (800c630 <vTaskStartScheduler+0xbc>)
 800c5ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c5b0:	4b1f      	ldr	r3, [pc, #124]	; (800c630 <vTaskStartScheduler+0xbc>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	617b      	str	r3, [r7, #20]
 800c5bc:	e001      	b.n	800c5c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d102      	bne.n	800c5ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c5c8:	f000 fd22 	bl	800d010 <xTimerCreateTimerTask>
 800c5cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d116      	bne.n	800c602 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	613b      	str	r3, [r7, #16]
}
 800c5e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c5e8:	4b12      	ldr	r3, [pc, #72]	; (800c634 <vTaskStartScheduler+0xc0>)
 800c5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c5f0:	4b11      	ldr	r3, [pc, #68]	; (800c638 <vTaskStartScheduler+0xc4>)
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c5f6:	4b11      	ldr	r3, [pc, #68]	; (800c63c <vTaskStartScheduler+0xc8>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c5fc:	f001 f8e0 	bl	800d7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c600:	e00e      	b.n	800c620 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c608:	d10a      	bne.n	800c620 <vTaskStartScheduler+0xac>
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	60fb      	str	r3, [r7, #12]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <vTaskStartScheduler+0xaa>
}
 800c620:	bf00      	nop
 800c622:	3718      	adds	r7, #24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	0801844c 	.word	0x0801844c
 800c62c:	0800cca5 	.word	0x0800cca5
 800c630:	24005a34 	.word	0x24005a34
 800c634:	24005a30 	.word	0x24005a30
 800c638:	24005a1c 	.word	0x24005a1c
 800c63c:	24005a14 	.word	0x24005a14

0800c640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c640:	b480      	push	{r7}
 800c642:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c644:	4b04      	ldr	r3, [pc, #16]	; (800c658 <vTaskSuspendAll+0x18>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	3301      	adds	r3, #1
 800c64a:	4a03      	ldr	r2, [pc, #12]	; (800c658 <vTaskSuspendAll+0x18>)
 800c64c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c64e:	bf00      	nop
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	24005a38 	.word	0x24005a38

0800c65c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c66a:	4b42      	ldr	r3, [pc, #264]	; (800c774 <xTaskResumeAll+0x118>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10a      	bne.n	800c688 <xTaskResumeAll+0x2c>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	603b      	str	r3, [r7, #0]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c688:	f001 f93c 	bl	800d904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c68c:	4b39      	ldr	r3, [pc, #228]	; (800c774 <xTaskResumeAll+0x118>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3b01      	subs	r3, #1
 800c692:	4a38      	ldr	r2, [pc, #224]	; (800c774 <xTaskResumeAll+0x118>)
 800c694:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c696:	4b37      	ldr	r3, [pc, #220]	; (800c774 <xTaskResumeAll+0x118>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d162      	bne.n	800c764 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c69e:	4b36      	ldr	r3, [pc, #216]	; (800c778 <xTaskResumeAll+0x11c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d05e      	beq.n	800c764 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6a6:	e02f      	b.n	800c708 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a8:	4b34      	ldr	r3, [pc, #208]	; (800c77c <xTaskResumeAll+0x120>)
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3318      	adds	r3, #24
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff f871 	bl	800b79c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7ff f86c 	bl	800b79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c8:	4b2d      	ldr	r3, [pc, #180]	; (800c780 <xTaskResumeAll+0x124>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d903      	bls.n	800c6d8 <xTaskResumeAll+0x7c>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	4a2a      	ldr	r2, [pc, #168]	; (800c780 <xTaskResumeAll+0x124>)
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6dc:	4613      	mov	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4a27      	ldr	r2, [pc, #156]	; (800c784 <xTaskResumeAll+0x128>)
 800c6e6:	441a      	add	r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	f7fe fff7 	bl	800b6e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f8:	4b23      	ldr	r3, [pc, #140]	; (800c788 <xTaskResumeAll+0x12c>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d302      	bcc.n	800c708 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c702:	4b22      	ldr	r3, [pc, #136]	; (800c78c <xTaskResumeAll+0x130>)
 800c704:	2201      	movs	r2, #1
 800c706:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c708:	4b1c      	ldr	r3, [pc, #112]	; (800c77c <xTaskResumeAll+0x120>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1cb      	bne.n	800c6a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c716:	f000 fb7b 	bl	800ce10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c71a:	4b1d      	ldr	r3, [pc, #116]	; (800c790 <xTaskResumeAll+0x134>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d010      	beq.n	800c748 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c726:	f000 f847 	bl	800c7b8 <xTaskIncrementTick>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c730:	4b16      	ldr	r3, [pc, #88]	; (800c78c <xTaskResumeAll+0x130>)
 800c732:	2201      	movs	r2, #1
 800c734:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	3b01      	subs	r3, #1
 800c73a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1f1      	bne.n	800c726 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c742:	4b13      	ldr	r3, [pc, #76]	; (800c790 <xTaskResumeAll+0x134>)
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c748:	4b10      	ldr	r3, [pc, #64]	; (800c78c <xTaskResumeAll+0x130>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d009      	beq.n	800c764 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c750:	2301      	movs	r3, #1
 800c752:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c754:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <xTaskResumeAll+0x138>)
 800c756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c764:	f001 f8fe 	bl	800d964 <vPortExitCritical>

	return xAlreadyYielded;
 800c768:	68bb      	ldr	r3, [r7, #8]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	24005a38 	.word	0x24005a38
 800c778:	24005a10 	.word	0x24005a10
 800c77c:	240059d0 	.word	0x240059d0
 800c780:	24005a18 	.word	0x24005a18
 800c784:	24005540 	.word	0x24005540
 800c788:	2400553c 	.word	0x2400553c
 800c78c:	24005a24 	.word	0x24005a24
 800c790:	24005a20 	.word	0x24005a20
 800c794:	e000ed04 	.word	0xe000ed04

0800c798 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c79e:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <xTaskGetTickCount+0x1c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c7a4:	687b      	ldr	r3, [r7, #4]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	24005a14 	.word	0x24005a14

0800c7b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7c2:	4b4f      	ldr	r3, [pc, #316]	; (800c900 <xTaskIncrementTick+0x148>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f040 808f 	bne.w	800c8ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7cc:	4b4d      	ldr	r3, [pc, #308]	; (800c904 <xTaskIncrementTick+0x14c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7d4:	4a4b      	ldr	r2, [pc, #300]	; (800c904 <xTaskIncrementTick+0x14c>)
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d120      	bne.n	800c822 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7e0:	4b49      	ldr	r3, [pc, #292]	; (800c908 <xTaskIncrementTick+0x150>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00a      	beq.n	800c800 <xTaskIncrementTick+0x48>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	603b      	str	r3, [r7, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	e7fe      	b.n	800c7fe <xTaskIncrementTick+0x46>
 800c800:	4b41      	ldr	r3, [pc, #260]	; (800c908 <xTaskIncrementTick+0x150>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	4b41      	ldr	r3, [pc, #260]	; (800c90c <xTaskIncrementTick+0x154>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a3f      	ldr	r2, [pc, #252]	; (800c908 <xTaskIncrementTick+0x150>)
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	4a3f      	ldr	r2, [pc, #252]	; (800c90c <xTaskIncrementTick+0x154>)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6013      	str	r3, [r2, #0]
 800c814:	4b3e      	ldr	r3, [pc, #248]	; (800c910 <xTaskIncrementTick+0x158>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	3301      	adds	r3, #1
 800c81a:	4a3d      	ldr	r2, [pc, #244]	; (800c910 <xTaskIncrementTick+0x158>)
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	f000 faf7 	bl	800ce10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c822:	4b3c      	ldr	r3, [pc, #240]	; (800c914 <xTaskIncrementTick+0x15c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d349      	bcc.n	800c8c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c82c:	4b36      	ldr	r3, [pc, #216]	; (800c908 <xTaskIncrementTick+0x150>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d104      	bne.n	800c840 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c836:	4b37      	ldr	r3, [pc, #220]	; (800c914 <xTaskIncrementTick+0x15c>)
 800c838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c83c:	601a      	str	r2, [r3, #0]
					break;
 800c83e:	e03f      	b.n	800c8c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c840:	4b31      	ldr	r3, [pc, #196]	; (800c908 <xTaskIncrementTick+0x150>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	429a      	cmp	r2, r3
 800c856:	d203      	bcs.n	800c860 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c858:	4a2e      	ldr	r2, [pc, #184]	; (800c914 <xTaskIncrementTick+0x15c>)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c85e:	e02f      	b.n	800c8c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	3304      	adds	r3, #4
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe ff99 	bl	800b79c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d004      	beq.n	800c87c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	3318      	adds	r3, #24
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe ff90 	bl	800b79c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c880:	4b25      	ldr	r3, [pc, #148]	; (800c918 <xTaskIncrementTick+0x160>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	d903      	bls.n	800c890 <xTaskIncrementTick+0xd8>
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	4a22      	ldr	r2, [pc, #136]	; (800c918 <xTaskIncrementTick+0x160>)
 800c88e:	6013      	str	r3, [r2, #0]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c894:	4613      	mov	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4a1f      	ldr	r2, [pc, #124]	; (800c91c <xTaskIncrementTick+0x164>)
 800c89e:	441a      	add	r2, r3
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f7fe ff1b 	bl	800b6e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b0:	4b1b      	ldr	r3, [pc, #108]	; (800c920 <xTaskIncrementTick+0x168>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d3b8      	bcc.n	800c82c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8be:	e7b5      	b.n	800c82c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8c0:	4b17      	ldr	r3, [pc, #92]	; (800c920 <xTaskIncrementTick+0x168>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c6:	4915      	ldr	r1, [pc, #84]	; (800c91c <xTaskIncrementTick+0x164>)
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d901      	bls.n	800c8dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c8dc:	4b11      	ldr	r3, [pc, #68]	; (800c924 <xTaskIncrementTick+0x16c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d007      	beq.n	800c8f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	e004      	b.n	800c8f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c8ea:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <xTaskIncrementTick+0x170>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	4a0d      	ldr	r2, [pc, #52]	; (800c928 <xTaskIncrementTick+0x170>)
 800c8f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c8f4:	697b      	ldr	r3, [r7, #20]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3718      	adds	r7, #24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	24005a38 	.word	0x24005a38
 800c904:	24005a14 	.word	0x24005a14
 800c908:	240059c8 	.word	0x240059c8
 800c90c:	240059cc 	.word	0x240059cc
 800c910:	24005a28 	.word	0x24005a28
 800c914:	24005a30 	.word	0x24005a30
 800c918:	24005a18 	.word	0x24005a18
 800c91c:	24005540 	.word	0x24005540
 800c920:	2400553c 	.word	0x2400553c
 800c924:	24005a24 	.word	0x24005a24
 800c928:	24005a20 	.word	0x24005a20

0800c92c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c932:	4b28      	ldr	r3, [pc, #160]	; (800c9d4 <vTaskSwitchContext+0xa8>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d003      	beq.n	800c942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c93a:	4b27      	ldr	r3, [pc, #156]	; (800c9d8 <vTaskSwitchContext+0xac>)
 800c93c:	2201      	movs	r2, #1
 800c93e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c940:	e041      	b.n	800c9c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c942:	4b25      	ldr	r3, [pc, #148]	; (800c9d8 <vTaskSwitchContext+0xac>)
 800c944:	2200      	movs	r2, #0
 800c946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c948:	4b24      	ldr	r3, [pc, #144]	; (800c9dc <vTaskSwitchContext+0xb0>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	60fb      	str	r3, [r7, #12]
 800c94e:	e010      	b.n	800c972 <vTaskSwitchContext+0x46>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10a      	bne.n	800c96c <vTaskSwitchContext+0x40>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	607b      	str	r3, [r7, #4]
}
 800c968:	bf00      	nop
 800c96a:	e7fe      	b.n	800c96a <vTaskSwitchContext+0x3e>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3b01      	subs	r3, #1
 800c970:	60fb      	str	r3, [r7, #12]
 800c972:	491b      	ldr	r1, [pc, #108]	; (800c9e0 <vTaskSwitchContext+0xb4>)
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	4613      	mov	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	440b      	add	r3, r1
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0e4      	beq.n	800c950 <vTaskSwitchContext+0x24>
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4a13      	ldr	r2, [pc, #76]	; (800c9e0 <vTaskSwitchContext+0xb4>)
 800c992:	4413      	add	r3, r2
 800c994:	60bb      	str	r3, [r7, #8]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	605a      	str	r2, [r3, #4]
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	685a      	ldr	r2, [r3, #4]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d104      	bne.n	800c9b6 <vTaskSwitchContext+0x8a>
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	605a      	str	r2, [r3, #4]
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	4a09      	ldr	r2, [pc, #36]	; (800c9e4 <vTaskSwitchContext+0xb8>)
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	4a06      	ldr	r2, [pc, #24]	; (800c9dc <vTaskSwitchContext+0xb0>)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6013      	str	r3, [r2, #0]
}
 800c9c6:	bf00      	nop
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	24005a38 	.word	0x24005a38
 800c9d8:	24005a24 	.word	0x24005a24
 800c9dc:	24005a18 	.word	0x24005a18
 800c9e0:	24005540 	.word	0x24005540
 800c9e4:	2400553c 	.word	0x2400553c

0800c9e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10a      	bne.n	800ca0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	60fb      	str	r3, [r7, #12]
}
 800ca0a:	bf00      	nop
 800ca0c:	e7fe      	b.n	800ca0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca0e:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <vTaskPlaceOnEventList+0x44>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	3318      	adds	r3, #24
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7fe fe87 	bl	800b72a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca1c:	2101      	movs	r1, #1
 800ca1e:	6838      	ldr	r0, [r7, #0]
 800ca20:	f000 faa2 	bl	800cf68 <prvAddCurrentTaskToDelayedList>
}
 800ca24:	bf00      	nop
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	2400553c 	.word	0x2400553c

0800ca30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10a      	bne.n	800ca58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ca42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca46:	f383 8811 	msr	BASEPRI, r3
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	617b      	str	r3, [r7, #20]
}
 800ca54:	bf00      	nop
 800ca56:	e7fe      	b.n	800ca56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca58:	4b0a      	ldr	r3, [pc, #40]	; (800ca84 <vTaskPlaceOnEventListRestricted+0x54>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3318      	adds	r3, #24
 800ca5e:	4619      	mov	r1, r3
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7fe fe3e 	bl	800b6e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ca6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	68b8      	ldr	r0, [r7, #8]
 800ca76:	f000 fa77 	bl	800cf68 <prvAddCurrentTaskToDelayedList>
	}
 800ca7a:	bf00      	nop
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	2400553c 	.word	0x2400553c

0800ca88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b086      	sub	sp, #24
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10a      	bne.n	800cab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	60fb      	str	r3, [r7, #12]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	3318      	adds	r3, #24
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe fe6f 	bl	800b79c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cabe:	4b1e      	ldr	r3, [pc, #120]	; (800cb38 <xTaskRemoveFromEventList+0xb0>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d11d      	bne.n	800cb02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	3304      	adds	r3, #4
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fe fe66 	bl	800b79c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad4:	4b19      	ldr	r3, [pc, #100]	; (800cb3c <xTaskRemoveFromEventList+0xb4>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d903      	bls.n	800cae4 <xTaskRemoveFromEventList+0x5c>
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	4a16      	ldr	r2, [pc, #88]	; (800cb3c <xTaskRemoveFromEventList+0xb4>)
 800cae2:	6013      	str	r3, [r2, #0]
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4a13      	ldr	r2, [pc, #76]	; (800cb40 <xTaskRemoveFromEventList+0xb8>)
 800caf2:	441a      	add	r2, r3
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	3304      	adds	r3, #4
 800caf8:	4619      	mov	r1, r3
 800cafa:	4610      	mov	r0, r2
 800cafc:	f7fe fdf1 	bl	800b6e2 <vListInsertEnd>
 800cb00:	e005      	b.n	800cb0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	3318      	adds	r3, #24
 800cb06:	4619      	mov	r1, r3
 800cb08:	480e      	ldr	r0, [pc, #56]	; (800cb44 <xTaskRemoveFromEventList+0xbc>)
 800cb0a:	f7fe fdea 	bl	800b6e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb12:	4b0d      	ldr	r3, [pc, #52]	; (800cb48 <xTaskRemoveFromEventList+0xc0>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d905      	bls.n	800cb28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb20:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <xTaskRemoveFromEventList+0xc4>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	e001      	b.n	800cb2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb2c:	697b      	ldr	r3, [r7, #20]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	24005a38 	.word	0x24005a38
 800cb3c:	24005a18 	.word	0x24005a18
 800cb40:	24005540 	.word	0x24005540
 800cb44:	240059d0 	.word	0x240059d0
 800cb48:	2400553c 	.word	0x2400553c
 800cb4c:	24005a24 	.word	0x24005a24

0800cb50 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10a      	bne.n	800cb74 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	60fb      	str	r3, [r7, #12]
}
 800cb70:	bf00      	nop
 800cb72:	e7fe      	b.n	800cb72 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800cb74:	f000 fec6 	bl	800d904 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb78:	4b06      	ldr	r3, [pc, #24]	; (800cb94 <vTaskSetTimeOutState+0x44>)
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800cb80:	4b05      	ldr	r3, [pc, #20]	; (800cb98 <vTaskSetTimeOutState+0x48>)
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800cb88:	f000 feec 	bl	800d964 <vPortExitCritical>
}
 800cb8c:	bf00      	nop
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	24005a28 	.word	0x24005a28
 800cb98:	24005a14 	.word	0x24005a14

0800cb9c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cba4:	4b06      	ldr	r3, [pc, #24]	; (800cbc0 <vTaskInternalSetTimeOutState+0x24>)
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cbac:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <vTaskInternalSetTimeOutState+0x28>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	605a      	str	r2, [r3, #4]
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	24005a28 	.word	0x24005a28
 800cbc4:	24005a14 	.word	0x24005a14

0800cbc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b088      	sub	sp, #32
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10a      	bne.n	800cbee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	613b      	str	r3, [r7, #16]
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	60fb      	str	r3, [r7, #12]
}
 800cc06:	bf00      	nop
 800cc08:	e7fe      	b.n	800cc08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cc0a:	f000 fe7b 	bl	800d904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc0e:	4b1d      	ldr	r3, [pc, #116]	; (800cc84 <xTaskCheckForTimeOut+0xbc>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc26:	d102      	bne.n	800cc2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	e023      	b.n	800cc76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <xTaskCheckForTimeOut+0xc0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d007      	beq.n	800cc4a <xTaskCheckForTimeOut+0x82>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	69ba      	ldr	r2, [r7, #24]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d302      	bcc.n	800cc4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc44:	2301      	movs	r3, #1
 800cc46:	61fb      	str	r3, [r7, #28]
 800cc48:	e015      	b.n	800cc76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d20b      	bcs.n	800cc6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff ff9b 	bl	800cb9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
 800cc6a:	e004      	b.n	800cc76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc72:	2301      	movs	r3, #1
 800cc74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc76:	f000 fe75 	bl	800d964 <vPortExitCritical>

	return xReturn;
 800cc7a:	69fb      	ldr	r3, [r7, #28]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3720      	adds	r7, #32
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	24005a14 	.word	0x24005a14
 800cc88:	24005a28 	.word	0x24005a28

0800cc8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc90:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <vTaskMissedYield+0x14>)
 800cc92:	2201      	movs	r2, #1
 800cc94:	601a      	str	r2, [r3, #0]
}
 800cc96:	bf00      	nop
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	24005a24 	.word	0x24005a24

0800cca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ccac:	f000 f852 	bl	800cd54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ccb0:	4b06      	ldr	r3, [pc, #24]	; (800cccc <prvIdleTask+0x28>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d9f9      	bls.n	800ccac <prvIdleTask+0x8>
			{
				taskYIELD();
 800ccb8:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <prvIdleTask+0x2c>)
 800ccba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ccc8:	e7f0      	b.n	800ccac <prvIdleTask+0x8>
 800ccca:	bf00      	nop
 800cccc:	24005540 	.word	0x24005540
 800ccd0:	e000ed04 	.word	0xe000ed04

0800ccd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccda:	2300      	movs	r3, #0
 800ccdc:	607b      	str	r3, [r7, #4]
 800ccde:	e00c      	b.n	800ccfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	4613      	mov	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4a12      	ldr	r2, [pc, #72]	; (800cd34 <prvInitialiseTaskLists+0x60>)
 800ccec:	4413      	add	r3, r2
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fe fcca 	bl	800b688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	607b      	str	r3, [r7, #4]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b37      	cmp	r3, #55	; 0x37
 800ccfe:	d9ef      	bls.n	800cce0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd00:	480d      	ldr	r0, [pc, #52]	; (800cd38 <prvInitialiseTaskLists+0x64>)
 800cd02:	f7fe fcc1 	bl	800b688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd06:	480d      	ldr	r0, [pc, #52]	; (800cd3c <prvInitialiseTaskLists+0x68>)
 800cd08:	f7fe fcbe 	bl	800b688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd0c:	480c      	ldr	r0, [pc, #48]	; (800cd40 <prvInitialiseTaskLists+0x6c>)
 800cd0e:	f7fe fcbb 	bl	800b688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd12:	480c      	ldr	r0, [pc, #48]	; (800cd44 <prvInitialiseTaskLists+0x70>)
 800cd14:	f7fe fcb8 	bl	800b688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd18:	480b      	ldr	r0, [pc, #44]	; (800cd48 <prvInitialiseTaskLists+0x74>)
 800cd1a:	f7fe fcb5 	bl	800b688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd1e:	4b0b      	ldr	r3, [pc, #44]	; (800cd4c <prvInitialiseTaskLists+0x78>)
 800cd20:	4a05      	ldr	r2, [pc, #20]	; (800cd38 <prvInitialiseTaskLists+0x64>)
 800cd22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd24:	4b0a      	ldr	r3, [pc, #40]	; (800cd50 <prvInitialiseTaskLists+0x7c>)
 800cd26:	4a05      	ldr	r2, [pc, #20]	; (800cd3c <prvInitialiseTaskLists+0x68>)
 800cd28:	601a      	str	r2, [r3, #0]
}
 800cd2a:	bf00      	nop
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	24005540 	.word	0x24005540
 800cd38:	240059a0 	.word	0x240059a0
 800cd3c:	240059b4 	.word	0x240059b4
 800cd40:	240059d0 	.word	0x240059d0
 800cd44:	240059e4 	.word	0x240059e4
 800cd48:	240059fc 	.word	0x240059fc
 800cd4c:	240059c8 	.word	0x240059c8
 800cd50:	240059cc 	.word	0x240059cc

0800cd54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd5a:	e019      	b.n	800cd90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd5c:	f000 fdd2 	bl	800d904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd60:	4b10      	ldr	r3, [pc, #64]	; (800cda4 <prvCheckTasksWaitingTermination+0x50>)
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fe fd15 	bl	800b79c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd72:	4b0d      	ldr	r3, [pc, #52]	; (800cda8 <prvCheckTasksWaitingTermination+0x54>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	4a0b      	ldr	r2, [pc, #44]	; (800cda8 <prvCheckTasksWaitingTermination+0x54>)
 800cd7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd7c:	4b0b      	ldr	r3, [pc, #44]	; (800cdac <prvCheckTasksWaitingTermination+0x58>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	4a0a      	ldr	r2, [pc, #40]	; (800cdac <prvCheckTasksWaitingTermination+0x58>)
 800cd84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd86:	f000 fded 	bl	800d964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f810 	bl	800cdb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd90:	4b06      	ldr	r3, [pc, #24]	; (800cdac <prvCheckTasksWaitingTermination+0x58>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1e1      	bne.n	800cd5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd98:	bf00      	nop
 800cd9a:	bf00      	nop
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	240059e4 	.word	0x240059e4
 800cda8:	24005a10 	.word	0x24005a10
 800cdac:	240059f8 	.word	0x240059f8

0800cdb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d108      	bne.n	800cdd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 ff8a 	bl	800dce0 <vPortFree>
				vPortFree( pxTCB );
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 ff87 	bl	800dce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cdd2:	e018      	b.n	800ce06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d103      	bne.n	800cde6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 ff7e 	bl	800dce0 <vPortFree>
	}
 800cde4:	e00f      	b.n	800ce06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d00a      	beq.n	800ce06 <prvDeleteTCB+0x56>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	60fb      	str	r3, [r7, #12]
}
 800ce02:	bf00      	nop
 800ce04:	e7fe      	b.n	800ce04 <prvDeleteTCB+0x54>
	}
 800ce06:	bf00      	nop
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
	...

0800ce10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce16:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <prvResetNextTaskUnblockTime+0x38>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d104      	bne.n	800ce2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce20:	4b0a      	ldr	r3, [pc, #40]	; (800ce4c <prvResetNextTaskUnblockTime+0x3c>)
 800ce22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce28:	e008      	b.n	800ce3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <prvResetNextTaskUnblockTime+0x38>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	4a04      	ldr	r2, [pc, #16]	; (800ce4c <prvResetNextTaskUnblockTime+0x3c>)
 800ce3a:	6013      	str	r3, [r2, #0]
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	240059c8 	.word	0x240059c8
 800ce4c:	24005a30 	.word	0x24005a30

0800ce50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <xTaskGetSchedulerState+0x34>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d102      	bne.n	800ce64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	607b      	str	r3, [r7, #4]
 800ce62:	e008      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <xTaskGetSchedulerState+0x38>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	607b      	str	r3, [r7, #4]
 800ce70:	e001      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce72:	2300      	movs	r3, #0
 800ce74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce76:	687b      	ldr	r3, [r7, #4]
	}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	24005a1c 	.word	0x24005a1c
 800ce88:	24005a38 	.word	0x24005a38

0800ce8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d056      	beq.n	800cf50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cea2:	4b2e      	ldr	r3, [pc, #184]	; (800cf5c <xTaskPriorityDisinherit+0xd0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d00a      	beq.n	800cec2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	60fb      	str	r3, [r7, #12]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10a      	bne.n	800cee0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	60bb      	str	r3, [r7, #8]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cee4:	1e5a      	subs	r2, r3, #1
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d02c      	beq.n	800cf50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d128      	bne.n	800cf50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	3304      	adds	r3, #4
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe fc4a 	bl	800b79c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf20:	4b0f      	ldr	r3, [pc, #60]	; (800cf60 <xTaskPriorityDisinherit+0xd4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d903      	bls.n	800cf30 <xTaskPriorityDisinherit+0xa4>
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	4a0c      	ldr	r2, [pc, #48]	; (800cf60 <xTaskPriorityDisinherit+0xd4>)
 800cf2e:	6013      	str	r3, [r2, #0]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf34:	4613      	mov	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4a09      	ldr	r2, [pc, #36]	; (800cf64 <xTaskPriorityDisinherit+0xd8>)
 800cf3e:	441a      	add	r2, r3
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	3304      	adds	r3, #4
 800cf44:	4619      	mov	r1, r3
 800cf46:	4610      	mov	r0, r2
 800cf48:	f7fe fbcb 	bl	800b6e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf50:	697b      	ldr	r3, [r7, #20]
	}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	2400553c 	.word	0x2400553c
 800cf60:	24005a18 	.word	0x24005a18
 800cf64:	24005540 	.word	0x24005540

0800cf68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf72:	4b21      	ldr	r3, [pc, #132]	; (800cff8 <prvAddCurrentTaskToDelayedList+0x90>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf78:	4b20      	ldr	r3, [pc, #128]	; (800cffc <prvAddCurrentTaskToDelayedList+0x94>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fe fc0c 	bl	800b79c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf8a:	d10a      	bne.n	800cfa2 <prvAddCurrentTaskToDelayedList+0x3a>
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d007      	beq.n	800cfa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf92:	4b1a      	ldr	r3, [pc, #104]	; (800cffc <prvAddCurrentTaskToDelayedList+0x94>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4819      	ldr	r0, [pc, #100]	; (800d000 <prvAddCurrentTaskToDelayedList+0x98>)
 800cf9c:	f7fe fba1 	bl	800b6e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfa0:	e026      	b.n	800cff0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfaa:	4b14      	ldr	r3, [pc, #80]	; (800cffc <prvAddCurrentTaskToDelayedList+0x94>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d209      	bcs.n	800cfce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfba:	4b12      	ldr	r3, [pc, #72]	; (800d004 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <prvAddCurrentTaskToDelayedList+0x94>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	f7fe fbaf 	bl	800b72a <vListInsert>
}
 800cfcc:	e010      	b.n	800cff0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfce:	4b0e      	ldr	r3, [pc, #56]	; (800d008 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <prvAddCurrentTaskToDelayedList+0x94>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4610      	mov	r0, r2
 800cfdc:	f7fe fba5 	bl	800b72a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d202      	bcs.n	800cff0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cfea:	4a08      	ldr	r2, [pc, #32]	; (800d00c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	6013      	str	r3, [r2, #0]
}
 800cff0:	bf00      	nop
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	24005a14 	.word	0x24005a14
 800cffc:	2400553c 	.word	0x2400553c
 800d000:	240059fc 	.word	0x240059fc
 800d004:	240059cc 	.word	0x240059cc
 800d008:	240059c8 	.word	0x240059c8
 800d00c:	24005a30 	.word	0x24005a30

0800d010 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	; 0x28
 800d014:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d01a:	f000 fb07 	bl	800d62c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d01e:	4b1c      	ldr	r3, [pc, #112]	; (800d090 <xTimerCreateTimerTask+0x80>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d021      	beq.n	800d06a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d026:	2300      	movs	r3, #0
 800d028:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d02e:	1d3a      	adds	r2, r7, #4
 800d030:	f107 0108 	add.w	r1, r7, #8
 800d034:	f107 030c 	add.w	r3, r7, #12
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fb0b 	bl	800b654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	9202      	str	r2, [sp, #8]
 800d046:	9301      	str	r3, [sp, #4]
 800d048:	2302      	movs	r3, #2
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	2300      	movs	r3, #0
 800d04e:	460a      	mov	r2, r1
 800d050:	4910      	ldr	r1, [pc, #64]	; (800d094 <xTimerCreateTimerTask+0x84>)
 800d052:	4811      	ldr	r0, [pc, #68]	; (800d098 <xTimerCreateTimerTask+0x88>)
 800d054:	f7ff f8b8 	bl	800c1c8 <xTaskCreateStatic>
 800d058:	4603      	mov	r3, r0
 800d05a:	4a10      	ldr	r2, [pc, #64]	; (800d09c <xTimerCreateTimerTask+0x8c>)
 800d05c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <xTimerCreateTimerTask+0x8c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d066:	2301      	movs	r3, #1
 800d068:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10a      	bne.n	800d086 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	613b      	str	r3, [r7, #16]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d086:	697b      	ldr	r3, [r7, #20]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	24005a6c 	.word	0x24005a6c
 800d094:	08018454 	.word	0x08018454
 800d098:	0800d1d5 	.word	0x0800d1d5
 800d09c:	24005a70 	.word	0x24005a70

0800d0a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b08a      	sub	sp, #40	; 0x28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10a      	bne.n	800d0ce <xTimerGenericCommand+0x2e>
	__asm volatile
 800d0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0bc:	f383 8811 	msr	BASEPRI, r3
 800d0c0:	f3bf 8f6f 	isb	sy
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	623b      	str	r3, [r7, #32]
}
 800d0ca:	bf00      	nop
 800d0cc:	e7fe      	b.n	800d0cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d0ce:	4b1a      	ldr	r3, [pc, #104]	; (800d138 <xTimerGenericCommand+0x98>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d02a      	beq.n	800d12c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	2b05      	cmp	r3, #5
 800d0e6:	dc18      	bgt.n	800d11a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d0e8:	f7ff feb2 	bl	800ce50 <xTaskGetSchedulerState>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d109      	bne.n	800d106 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d0f2:	4b11      	ldr	r3, [pc, #68]	; (800d138 <xTimerGenericCommand+0x98>)
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	f107 0110 	add.w	r1, r7, #16
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0fe:	f7fe fc7b 	bl	800b9f8 <xQueueGenericSend>
 800d102:	6278      	str	r0, [r7, #36]	; 0x24
 800d104:	e012      	b.n	800d12c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d106:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <xTimerGenericCommand+0x98>)
 800d108:	6818      	ldr	r0, [r3, #0]
 800d10a:	f107 0110 	add.w	r1, r7, #16
 800d10e:	2300      	movs	r3, #0
 800d110:	2200      	movs	r2, #0
 800d112:	f7fe fc71 	bl	800b9f8 <xQueueGenericSend>
 800d116:	6278      	str	r0, [r7, #36]	; 0x24
 800d118:	e008      	b.n	800d12c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d11a:	4b07      	ldr	r3, [pc, #28]	; (800d138 <xTimerGenericCommand+0x98>)
 800d11c:	6818      	ldr	r0, [r3, #0]
 800d11e:	f107 0110 	add.w	r1, r7, #16
 800d122:	2300      	movs	r3, #0
 800d124:	683a      	ldr	r2, [r7, #0]
 800d126:	f7fe fd65 	bl	800bbf4 <xQueueGenericSendFromISR>
 800d12a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3728      	adds	r7, #40	; 0x28
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	24005a6c 	.word	0x24005a6c

0800d13c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af02      	add	r7, sp, #8
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d146:	4b22      	ldr	r3, [pc, #136]	; (800d1d0 <prvProcessExpiredTimer+0x94>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	3304      	adds	r3, #4
 800d154:	4618      	mov	r0, r3
 800d156:	f7fe fb21 	bl	800b79c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d160:	f003 0304 	and.w	r3, r3, #4
 800d164:	2b00      	cmp	r3, #0
 800d166:	d022      	beq.n	800d1ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	699a      	ldr	r2, [r3, #24]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	18d1      	adds	r1, r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	6978      	ldr	r0, [r7, #20]
 800d176:	f000 f8d1 	bl	800d31c <prvInsertTimerInActiveList>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d01f      	beq.n	800d1c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d180:	2300      	movs	r3, #0
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	2300      	movs	r3, #0
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	2100      	movs	r1, #0
 800d18a:	6978      	ldr	r0, [r7, #20]
 800d18c:	f7ff ff88 	bl	800d0a0 <xTimerGenericCommand>
 800d190:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d113      	bne.n	800d1c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	60fb      	str	r3, [r7, #12]
}
 800d1aa:	bf00      	nop
 800d1ac:	e7fe      	b.n	800d1ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b4:	f023 0301 	bic.w	r3, r3, #1
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	6a1b      	ldr	r3, [r3, #32]
 800d1c4:	6978      	ldr	r0, [r7, #20]
 800d1c6:	4798      	blx	r3
}
 800d1c8:	bf00      	nop
 800d1ca:	3718      	adds	r7, #24
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	24005a64 	.word	0x24005a64

0800d1d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1dc:	f107 0308 	add.w	r3, r7, #8
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 f857 	bl	800d294 <prvGetNextExpireTime>
 800d1e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f000 f803 	bl	800d1f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d1f2:	f000 f8d5 	bl	800d3a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1f6:	e7f1      	b.n	800d1dc <prvTimerTask+0x8>

0800d1f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d202:	f7ff fa1d 	bl	800c640 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d206:	f107 0308 	add.w	r3, r7, #8
 800d20a:	4618      	mov	r0, r3
 800d20c:	f000 f866 	bl	800d2dc <prvSampleTimeNow>
 800d210:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d130      	bne.n	800d27a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10a      	bne.n	800d234 <prvProcessTimerOrBlockTask+0x3c>
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	429a      	cmp	r2, r3
 800d224:	d806      	bhi.n	800d234 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d226:	f7ff fa19 	bl	800c65c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d22a:	68f9      	ldr	r1, [r7, #12]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff ff85 	bl	800d13c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d232:	e024      	b.n	800d27e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d008      	beq.n	800d24c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d23a:	4b13      	ldr	r3, [pc, #76]	; (800d288 <prvProcessTimerOrBlockTask+0x90>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <prvProcessTimerOrBlockTask+0x50>
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <prvProcessTimerOrBlockTask+0x52>
 800d248:	2300      	movs	r3, #0
 800d24a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d24c:	4b0f      	ldr	r3, [pc, #60]	; (800d28c <prvProcessTimerOrBlockTask+0x94>)
 800d24e:	6818      	ldr	r0, [r3, #0]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	4619      	mov	r1, r3
 800d25a:	f7fe ff81 	bl	800c160 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d25e:	f7ff f9fd 	bl	800c65c <xTaskResumeAll>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d10a      	bne.n	800d27e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d268:	4b09      	ldr	r3, [pc, #36]	; (800d290 <prvProcessTimerOrBlockTask+0x98>)
 800d26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	f3bf 8f6f 	isb	sy
}
 800d278:	e001      	b.n	800d27e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d27a:	f7ff f9ef 	bl	800c65c <xTaskResumeAll>
}
 800d27e:	bf00      	nop
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	24005a68 	.word	0x24005a68
 800d28c:	24005a6c 	.word	0x24005a6c
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d29c:	4b0e      	ldr	r3, [pc, #56]	; (800d2d8 <prvGetNextExpireTime+0x44>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d101      	bne.n	800d2aa <prvGetNextExpireTime+0x16>
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	e000      	b.n	800d2ac <prvGetNextExpireTime+0x18>
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d105      	bne.n	800d2c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2b8:	4b07      	ldr	r3, [pc, #28]	; (800d2d8 <prvGetNextExpireTime+0x44>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	e001      	b.n	800d2c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	24005a64 	.word	0x24005a64

0800d2dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d2e4:	f7ff fa58 	bl	800c798 <xTaskGetTickCount>
 800d2e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d2ea:	4b0b      	ldr	r3, [pc, #44]	; (800d318 <prvSampleTimeNow+0x3c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d205      	bcs.n	800d300 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d2f4:	f000 f936 	bl	800d564 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	e002      	b.n	800d306 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d306:	4a04      	ldr	r2, [pc, #16]	; (800d318 <prvSampleTimeNow+0x3c>)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d30c:	68fb      	ldr	r3, [r7, #12]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	24005a74 	.word	0x24005a74

0800d31c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d812      	bhi.n	800d368 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	1ad2      	subs	r2, r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d302      	bcc.n	800d356 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d350:	2301      	movs	r3, #1
 800d352:	617b      	str	r3, [r7, #20]
 800d354:	e01b      	b.n	800d38e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d356:	4b10      	ldr	r3, [pc, #64]	; (800d398 <prvInsertTimerInActiveList+0x7c>)
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3304      	adds	r3, #4
 800d35e:	4619      	mov	r1, r3
 800d360:	4610      	mov	r0, r2
 800d362:	f7fe f9e2 	bl	800b72a <vListInsert>
 800d366:	e012      	b.n	800d38e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d206      	bcs.n	800d37e <prvInsertTimerInActiveList+0x62>
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d302      	bcc.n	800d37e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d378:	2301      	movs	r3, #1
 800d37a:	617b      	str	r3, [r7, #20]
 800d37c:	e007      	b.n	800d38e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d37e:	4b07      	ldr	r3, [pc, #28]	; (800d39c <prvInsertTimerInActiveList+0x80>)
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3304      	adds	r3, #4
 800d386:	4619      	mov	r1, r3
 800d388:	4610      	mov	r0, r2
 800d38a:	f7fe f9ce 	bl	800b72a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d38e:	697b      	ldr	r3, [r7, #20]
}
 800d390:	4618      	mov	r0, r3
 800d392:	3718      	adds	r7, #24
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	24005a68 	.word	0x24005a68
 800d39c:	24005a64 	.word	0x24005a64

0800d3a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b08e      	sub	sp, #56	; 0x38
 800d3a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3a6:	e0ca      	b.n	800d53e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	da18      	bge.n	800d3e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d3ae:	1d3b      	adds	r3, r7, #4
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10a      	bne.n	800d3d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3be:	f383 8811 	msr	BASEPRI, r3
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	61fb      	str	r3, [r7, #28]
}
 800d3cc:	bf00      	nop
 800d3ce:	e7fe      	b.n	800d3ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3d6:	6850      	ldr	r0, [r2, #4]
 800d3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3da:	6892      	ldr	r2, [r2, #8]
 800d3dc:	4611      	mov	r1, r2
 800d3de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f2c0 80ab 	blt.w	800d53e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	695b      	ldr	r3, [r3, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe f9cf 	bl	800b79c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3fe:	463b      	mov	r3, r7
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff ff6b 	bl	800d2dc <prvSampleTimeNow>
 800d406:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b09      	cmp	r3, #9
 800d40c:	f200 8096 	bhi.w	800d53c <prvProcessReceivedCommands+0x19c>
 800d410:	a201      	add	r2, pc, #4	; (adr r2, 800d418 <prvProcessReceivedCommands+0x78>)
 800d412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d416:	bf00      	nop
 800d418:	0800d441 	.word	0x0800d441
 800d41c:	0800d441 	.word	0x0800d441
 800d420:	0800d441 	.word	0x0800d441
 800d424:	0800d4b5 	.word	0x0800d4b5
 800d428:	0800d4c9 	.word	0x0800d4c9
 800d42c:	0800d513 	.word	0x0800d513
 800d430:	0800d441 	.word	0x0800d441
 800d434:	0800d441 	.word	0x0800d441
 800d438:	0800d4b5 	.word	0x0800d4b5
 800d43c:	0800d4c9 	.word	0x0800d4c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d446:	f043 0301 	orr.w	r3, r3, #1
 800d44a:	b2da      	uxtb	r2, r3
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	699b      	ldr	r3, [r3, #24]
 800d458:	18d1      	adds	r1, r2, r3
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d45e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d460:	f7ff ff5c 	bl	800d31c <prvInsertTimerInActiveList>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d069      	beq.n	800d53e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d470:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d478:	f003 0304 	and.w	r3, r3, #4
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d05e      	beq.n	800d53e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	441a      	add	r2, r3
 800d488:	2300      	movs	r3, #0
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	2300      	movs	r3, #0
 800d48e:	2100      	movs	r1, #0
 800d490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d492:	f7ff fe05 	bl	800d0a0 <xTimerGenericCommand>
 800d496:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d14f      	bne.n	800d53e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	61bb      	str	r3, [r7, #24]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4ba:	f023 0301 	bic.w	r3, r3, #1
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d4c6:	e03a      	b.n	800d53e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4ce:	f043 0301 	orr.w	r3, r3, #1
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d10a      	bne.n	800d4fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	617b      	str	r3, [r7, #20]
}
 800d4fa:	bf00      	nop
 800d4fc:	e7fe      	b.n	800d4fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	699a      	ldr	r2, [r3, #24]
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d504:	18d1      	adds	r1, r2, r3
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d50a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d50c:	f7ff ff06 	bl	800d31c <prvInsertTimerInActiveList>
					break;
 800d510:	e015      	b.n	800d53e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d518:	f003 0302 	and.w	r3, r3, #2
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d103      	bne.n	800d528 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d522:	f000 fbdd 	bl	800dce0 <vPortFree>
 800d526:	e00a      	b.n	800d53e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d52e:	f023 0301 	bic.w	r3, r3, #1
 800d532:	b2da      	uxtb	r2, r3
 800d534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d53a:	e000      	b.n	800d53e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d53c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d53e:	4b08      	ldr	r3, [pc, #32]	; (800d560 <prvProcessReceivedCommands+0x1c0>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	1d39      	adds	r1, r7, #4
 800d544:	2200      	movs	r2, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fbf0 	bl	800bd2c <xQueueReceive>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f47f af2a 	bne.w	800d3a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop
 800d558:	3730      	adds	r7, #48	; 0x30
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	24005a6c 	.word	0x24005a6c

0800d564 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d56a:	e048      	b.n	800d5fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d56c:	4b2d      	ldr	r3, [pc, #180]	; (800d624 <prvSwitchTimerLists+0xc0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d576:	4b2b      	ldr	r3, [pc, #172]	; (800d624 <prvSwitchTimerLists+0xc0>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3304      	adds	r3, #4
 800d584:	4618      	mov	r0, r3
 800d586:	f7fe f909 	bl	800b79c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d598:	f003 0304 	and.w	r3, r3, #4
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d02e      	beq.n	800d5fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	693a      	ldr	r2, [r7, #16]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d90e      	bls.n	800d5d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5be:	4b19      	ldr	r3, [pc, #100]	; (800d624 <prvSwitchTimerLists+0xc0>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	f7fe f8ae 	bl	800b72a <vListInsert>
 800d5ce:	e016      	b.n	800d5fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	693a      	ldr	r2, [r7, #16]
 800d5d8:	2100      	movs	r1, #0
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7ff fd60 	bl	800d0a0 <xTimerGenericCommand>
 800d5e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ec:	f383 8811 	msr	BASEPRI, r3
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	603b      	str	r3, [r7, #0]
}
 800d5fa:	bf00      	nop
 800d5fc:	e7fe      	b.n	800d5fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5fe:	4b09      	ldr	r3, [pc, #36]	; (800d624 <prvSwitchTimerLists+0xc0>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1b1      	bne.n	800d56c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d608:	4b06      	ldr	r3, [pc, #24]	; (800d624 <prvSwitchTimerLists+0xc0>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d60e:	4b06      	ldr	r3, [pc, #24]	; (800d628 <prvSwitchTimerLists+0xc4>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a04      	ldr	r2, [pc, #16]	; (800d624 <prvSwitchTimerLists+0xc0>)
 800d614:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d616:	4a04      	ldr	r2, [pc, #16]	; (800d628 <prvSwitchTimerLists+0xc4>)
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	6013      	str	r3, [r2, #0]
}
 800d61c:	bf00      	nop
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	24005a64 	.word	0x24005a64
 800d628:	24005a68 	.word	0x24005a68

0800d62c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d632:	f000 f967 	bl	800d904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d636:	4b15      	ldr	r3, [pc, #84]	; (800d68c <prvCheckForValidListAndQueue+0x60>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d120      	bne.n	800d680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d63e:	4814      	ldr	r0, [pc, #80]	; (800d690 <prvCheckForValidListAndQueue+0x64>)
 800d640:	f7fe f822 	bl	800b688 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d644:	4813      	ldr	r0, [pc, #76]	; (800d694 <prvCheckForValidListAndQueue+0x68>)
 800d646:	f7fe f81f 	bl	800b688 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d64a:	4b13      	ldr	r3, [pc, #76]	; (800d698 <prvCheckForValidListAndQueue+0x6c>)
 800d64c:	4a10      	ldr	r2, [pc, #64]	; (800d690 <prvCheckForValidListAndQueue+0x64>)
 800d64e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d650:	4b12      	ldr	r3, [pc, #72]	; (800d69c <prvCheckForValidListAndQueue+0x70>)
 800d652:	4a10      	ldr	r2, [pc, #64]	; (800d694 <prvCheckForValidListAndQueue+0x68>)
 800d654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d656:	2300      	movs	r3, #0
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	4b11      	ldr	r3, [pc, #68]	; (800d6a0 <prvCheckForValidListAndQueue+0x74>)
 800d65c:	4a11      	ldr	r2, [pc, #68]	; (800d6a4 <prvCheckForValidListAndQueue+0x78>)
 800d65e:	2110      	movs	r1, #16
 800d660:	200a      	movs	r0, #10
 800d662:	f7fe f92d 	bl	800b8c0 <xQueueGenericCreateStatic>
 800d666:	4603      	mov	r3, r0
 800d668:	4a08      	ldr	r2, [pc, #32]	; (800d68c <prvCheckForValidListAndQueue+0x60>)
 800d66a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d66c:	4b07      	ldr	r3, [pc, #28]	; (800d68c <prvCheckForValidListAndQueue+0x60>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d005      	beq.n	800d680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d674:	4b05      	ldr	r3, [pc, #20]	; (800d68c <prvCheckForValidListAndQueue+0x60>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	490b      	ldr	r1, [pc, #44]	; (800d6a8 <prvCheckForValidListAndQueue+0x7c>)
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe fd46 	bl	800c10c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d680:	f000 f970 	bl	800d964 <vPortExitCritical>
}
 800d684:	bf00      	nop
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	24005a6c 	.word	0x24005a6c
 800d690:	24005a3c 	.word	0x24005a3c
 800d694:	24005a50 	.word	0x24005a50
 800d698:	24005a64 	.word	0x24005a64
 800d69c:	24005a68 	.word	0x24005a68
 800d6a0:	24005b18 	.word	0x24005b18
 800d6a4:	24005a78 	.word	0x24005a78
 800d6a8:	0801845c 	.word	0x0801845c

0800d6ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3b04      	subs	r3, #4
 800d6bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	3b04      	subs	r3, #4
 800d6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	f023 0201 	bic.w	r2, r3, #1
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	3b04      	subs	r3, #4
 800d6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6dc:	4a0c      	ldr	r2, [pc, #48]	; (800d710 <pxPortInitialiseStack+0x64>)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	3b14      	subs	r3, #20
 800d6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	3b04      	subs	r3, #4
 800d6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f06f 0202 	mvn.w	r2, #2
 800d6fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	3b20      	subs	r3, #32
 800d700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d702:	68fb      	ldr	r3, [r7, #12]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	0800d715 	.word	0x0800d715

0800d714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d71a:	2300      	movs	r3, #0
 800d71c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d71e:	4b12      	ldr	r3, [pc, #72]	; (800d768 <prvTaskExitError+0x54>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d726:	d00a      	beq.n	800d73e <prvTaskExitError+0x2a>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	60fb      	str	r3, [r7, #12]
}
 800d73a:	bf00      	nop
 800d73c:	e7fe      	b.n	800d73c <prvTaskExitError+0x28>
	__asm volatile
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	f383 8811 	msr	BASEPRI, r3
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	60bb      	str	r3, [r7, #8]
}
 800d750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d752:	bf00      	nop
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d0fc      	beq.n	800d754 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d75a:	bf00      	nop
 800d75c:	bf00      	nop
 800d75e:	3714      	adds	r7, #20
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	24000014 	.word	0x24000014
 800d76c:	00000000 	.word	0x00000000

0800d770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d770:	4b07      	ldr	r3, [pc, #28]	; (800d790 <pxCurrentTCBConst2>)
 800d772:	6819      	ldr	r1, [r3, #0]
 800d774:	6808      	ldr	r0, [r1, #0]
 800d776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77a:	f380 8809 	msr	PSP, r0
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f04f 0000 	mov.w	r0, #0
 800d786:	f380 8811 	msr	BASEPRI, r0
 800d78a:	4770      	bx	lr
 800d78c:	f3af 8000 	nop.w

0800d790 <pxCurrentTCBConst2>:
 800d790:	2400553c 	.word	0x2400553c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop

0800d798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d798:	4808      	ldr	r0, [pc, #32]	; (800d7bc <prvPortStartFirstTask+0x24>)
 800d79a:	6800      	ldr	r0, [r0, #0]
 800d79c:	6800      	ldr	r0, [r0, #0]
 800d79e:	f380 8808 	msr	MSP, r0
 800d7a2:	f04f 0000 	mov.w	r0, #0
 800d7a6:	f380 8814 	msr	CONTROL, r0
 800d7aa:	b662      	cpsie	i
 800d7ac:	b661      	cpsie	f
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	df00      	svc	0
 800d7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d7ba:	bf00      	nop
 800d7bc:	e000ed08 	.word	0xe000ed08

0800d7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7c6:	4b46      	ldr	r3, [pc, #280]	; (800d8e0 <xPortStartScheduler+0x120>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a46      	ldr	r2, [pc, #280]	; (800d8e4 <xPortStartScheduler+0x124>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d10a      	bne.n	800d7e6 <xPortStartScheduler+0x26>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	613b      	str	r3, [r7, #16]
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7e6:	4b3e      	ldr	r3, [pc, #248]	; (800d8e0 <xPortStartScheduler+0x120>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a3f      	ldr	r2, [pc, #252]	; (800d8e8 <xPortStartScheduler+0x128>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d10a      	bne.n	800d806 <xPortStartScheduler+0x46>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	60fb      	str	r3, [r7, #12]
}
 800d802:	bf00      	nop
 800d804:	e7fe      	b.n	800d804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d806:	4b39      	ldr	r3, [pc, #228]	; (800d8ec <xPortStartScheduler+0x12c>)
 800d808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	22ff      	movs	r2, #255	; 0xff
 800d816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d820:	78fb      	ldrb	r3, [r7, #3]
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	4b31      	ldr	r3, [pc, #196]	; (800d8f0 <xPortStartScheduler+0x130>)
 800d82c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d82e:	4b31      	ldr	r3, [pc, #196]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d830:	2207      	movs	r2, #7
 800d832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d834:	e009      	b.n	800d84a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d836:	4b2f      	ldr	r3, [pc, #188]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	4a2d      	ldr	r2, [pc, #180]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d83e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	b2db      	uxtb	r3, r3
 800d848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d852:	2b80      	cmp	r3, #128	; 0x80
 800d854:	d0ef      	beq.n	800d836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d856:	4b27      	ldr	r3, [pc, #156]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f1c3 0307 	rsb	r3, r3, #7
 800d85e:	2b04      	cmp	r3, #4
 800d860:	d00a      	beq.n	800d878 <xPortStartScheduler+0xb8>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	60bb      	str	r3, [r7, #8]
}
 800d874:	bf00      	nop
 800d876:	e7fe      	b.n	800d876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d878:	4b1e      	ldr	r3, [pc, #120]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	021b      	lsls	r3, r3, #8
 800d87e:	4a1d      	ldr	r2, [pc, #116]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d882:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d88a:	4a1a      	ldr	r2, [pc, #104]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d88c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	b2da      	uxtb	r2, r3
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d896:	4b18      	ldr	r3, [pc, #96]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a17      	ldr	r2, [pc, #92]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d89c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d8a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d8a2:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a14      	ldr	r2, [pc, #80]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d8a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d8ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d8ae:	f000 f8dd 	bl	800da6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d8b2:	4b12      	ldr	r3, [pc, #72]	; (800d8fc <xPortStartScheduler+0x13c>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d8b8:	f000 f8fc 	bl	800dab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d8bc:	4b10      	ldr	r3, [pc, #64]	; (800d900 <xPortStartScheduler+0x140>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a0f      	ldr	r2, [pc, #60]	; (800d900 <xPortStartScheduler+0x140>)
 800d8c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d8c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8c8:	f7ff ff66 	bl	800d798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8cc:	f7ff f82e 	bl	800c92c <vTaskSwitchContext>
	prvTaskExitError();
 800d8d0:	f7ff ff20 	bl	800d714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	e000ed00 	.word	0xe000ed00
 800d8e4:	410fc271 	.word	0x410fc271
 800d8e8:	410fc270 	.word	0x410fc270
 800d8ec:	e000e400 	.word	0xe000e400
 800d8f0:	24005b68 	.word	0x24005b68
 800d8f4:	24005b6c 	.word	0x24005b6c
 800d8f8:	e000ed20 	.word	0xe000ed20
 800d8fc:	24000014 	.word	0x24000014
 800d900:	e000ef34 	.word	0xe000ef34

0800d904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	607b      	str	r3, [r7, #4]
}
 800d91c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d91e:	4b0f      	ldr	r3, [pc, #60]	; (800d95c <vPortEnterCritical+0x58>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	3301      	adds	r3, #1
 800d924:	4a0d      	ldr	r2, [pc, #52]	; (800d95c <vPortEnterCritical+0x58>)
 800d926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <vPortEnterCritical+0x58>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d10f      	bne.n	800d950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d930:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <vPortEnterCritical+0x5c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00a      	beq.n	800d950 <vPortEnterCritical+0x4c>
	__asm volatile
 800d93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93e:	f383 8811 	msr	BASEPRI, r3
 800d942:	f3bf 8f6f 	isb	sy
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	603b      	str	r3, [r7, #0]
}
 800d94c:	bf00      	nop
 800d94e:	e7fe      	b.n	800d94e <vPortEnterCritical+0x4a>
	}
}
 800d950:	bf00      	nop
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	24000014 	.word	0x24000014
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d96a:	4b12      	ldr	r3, [pc, #72]	; (800d9b4 <vPortExitCritical+0x50>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10a      	bne.n	800d988 <vPortExitCritical+0x24>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	607b      	str	r3, [r7, #4]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d988:	4b0a      	ldr	r3, [pc, #40]	; (800d9b4 <vPortExitCritical+0x50>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	4a09      	ldr	r2, [pc, #36]	; (800d9b4 <vPortExitCritical+0x50>)
 800d990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d992:	4b08      	ldr	r3, [pc, #32]	; (800d9b4 <vPortExitCritical+0x50>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d105      	bne.n	800d9a6 <vPortExitCritical+0x42>
 800d99a:	2300      	movs	r3, #0
 800d99c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	f383 8811 	msr	BASEPRI, r3
}
 800d9a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	24000014 	.word	0x24000014
	...

0800d9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9c0:	f3ef 8009 	mrs	r0, PSP
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	4b15      	ldr	r3, [pc, #84]	; (800da20 <pxCurrentTCBConst>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	f01e 0f10 	tst.w	lr, #16
 800d9d0:	bf08      	it	eq
 800d9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9da:	6010      	str	r0, [r2, #0]
 800d9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9e4:	f380 8811 	msr	BASEPRI, r0
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f7fe ff9c 	bl	800c92c <vTaskSwitchContext>
 800d9f4:	f04f 0000 	mov.w	r0, #0
 800d9f8:	f380 8811 	msr	BASEPRI, r0
 800d9fc:	bc09      	pop	{r0, r3}
 800d9fe:	6819      	ldr	r1, [r3, #0]
 800da00:	6808      	ldr	r0, [r1, #0]
 800da02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da06:	f01e 0f10 	tst.w	lr, #16
 800da0a:	bf08      	it	eq
 800da0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da10:	f380 8809 	msr	PSP, r0
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	f3af 8000 	nop.w

0800da20 <pxCurrentTCBConst>:
 800da20:	2400553c 	.word	0x2400553c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop

0800da28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	607b      	str	r3, [r7, #4]
}
 800da40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da42:	f7fe feb9 	bl	800c7b8 <xTaskIncrementTick>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da4c:	4b06      	ldr	r3, [pc, #24]	; (800da68 <xPortSysTickHandler+0x40>)
 800da4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	2300      	movs	r3, #0
 800da56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f383 8811 	msr	BASEPRI, r3
}
 800da5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da60:	bf00      	nop
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	e000ed04 	.word	0xe000ed04

0800da6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da6c:	b480      	push	{r7}
 800da6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <vPortSetupTimerInterrupt+0x34>)
 800da72:	2200      	movs	r2, #0
 800da74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da76:	4b0b      	ldr	r3, [pc, #44]	; (800daa4 <vPortSetupTimerInterrupt+0x38>)
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da7c:	4b0a      	ldr	r3, [pc, #40]	; (800daa8 <vPortSetupTimerInterrupt+0x3c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a0a      	ldr	r2, [pc, #40]	; (800daac <vPortSetupTimerInterrupt+0x40>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	099b      	lsrs	r3, r3, #6
 800da88:	4a09      	ldr	r2, [pc, #36]	; (800dab0 <vPortSetupTimerInterrupt+0x44>)
 800da8a:	3b01      	subs	r3, #1
 800da8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da8e:	4b04      	ldr	r3, [pc, #16]	; (800daa0 <vPortSetupTimerInterrupt+0x34>)
 800da90:	2207      	movs	r2, #7
 800da92:	601a      	str	r2, [r3, #0]
}
 800da94:	bf00      	nop
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	e000e010 	.word	0xe000e010
 800daa4:	e000e018 	.word	0xe000e018
 800daa8:	24000004 	.word	0x24000004
 800daac:	10624dd3 	.word	0x10624dd3
 800dab0:	e000e014 	.word	0xe000e014

0800dab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dac4 <vPortEnableVFP+0x10>
 800dab8:	6801      	ldr	r1, [r0, #0]
 800daba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dabe:	6001      	str	r1, [r0, #0]
 800dac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dac2:	bf00      	nop
 800dac4:	e000ed88 	.word	0xe000ed88

0800dac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dace:	f3ef 8305 	mrs	r3, IPSR
 800dad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2b0f      	cmp	r3, #15
 800dad8:	d914      	bls.n	800db04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dada:	4a17      	ldr	r2, [pc, #92]	; (800db38 <vPortValidateInterruptPriority+0x70>)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	4413      	add	r3, r2
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dae4:	4b15      	ldr	r3, [pc, #84]	; (800db3c <vPortValidateInterruptPriority+0x74>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	7afa      	ldrb	r2, [r7, #11]
 800daea:	429a      	cmp	r2, r3
 800daec:	d20a      	bcs.n	800db04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800daee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	607b      	str	r3, [r7, #4]
}
 800db00:	bf00      	nop
 800db02:	e7fe      	b.n	800db02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db04:	4b0e      	ldr	r3, [pc, #56]	; (800db40 <vPortValidateInterruptPriority+0x78>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db0c:	4b0d      	ldr	r3, [pc, #52]	; (800db44 <vPortValidateInterruptPriority+0x7c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d90a      	bls.n	800db2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	603b      	str	r3, [r7, #0]
}
 800db26:	bf00      	nop
 800db28:	e7fe      	b.n	800db28 <vPortValidateInterruptPriority+0x60>
	}
 800db2a:	bf00      	nop
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	e000e3f0 	.word	0xe000e3f0
 800db3c:	24005b68 	.word	0x24005b68
 800db40:	e000ed0c 	.word	0xe000ed0c
 800db44:	24005b6c 	.word	0x24005b6c

0800db48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b08a      	sub	sp, #40	; 0x28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db50:	2300      	movs	r3, #0
 800db52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db54:	f7fe fd74 	bl	800c640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db58:	4b5b      	ldr	r3, [pc, #364]	; (800dcc8 <pvPortMalloc+0x180>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db60:	f000 f920 	bl	800dda4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db64:	4b59      	ldr	r3, [pc, #356]	; (800dccc <pvPortMalloc+0x184>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4013      	ands	r3, r2
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f040 8093 	bne.w	800dc98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d01d      	beq.n	800dbb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db78:	2208      	movs	r2, #8
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4413      	add	r3, r2
 800db7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f003 0307 	and.w	r3, r3, #7
 800db86:	2b00      	cmp	r3, #0
 800db88:	d014      	beq.n	800dbb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f023 0307 	bic.w	r3, r3, #7
 800db90:	3308      	adds	r3, #8
 800db92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f003 0307 	and.w	r3, r3, #7
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <pvPortMalloc+0x6c>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	617b      	str	r3, [r7, #20]
}
 800dbb0:	bf00      	nop
 800dbb2:	e7fe      	b.n	800dbb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d06e      	beq.n	800dc98 <pvPortMalloc+0x150>
 800dbba:	4b45      	ldr	r3, [pc, #276]	; (800dcd0 <pvPortMalloc+0x188>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d869      	bhi.n	800dc98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dbc4:	4b43      	ldr	r3, [pc, #268]	; (800dcd4 <pvPortMalloc+0x18c>)
 800dbc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dbc8:	4b42      	ldr	r3, [pc, #264]	; (800dcd4 <pvPortMalloc+0x18c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbce:	e004      	b.n	800dbda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d903      	bls.n	800dbec <pvPortMalloc+0xa4>
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f1      	bne.n	800dbd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbec:	4b36      	ldr	r3, [pc, #216]	; (800dcc8 <pvPortMalloc+0x180>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d050      	beq.n	800dc98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2208      	movs	r2, #8
 800dbfc:	4413      	add	r3, r2
 800dbfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	1ad2      	subs	r2, r2, r3
 800dc10:	2308      	movs	r3, #8
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d91f      	bls.n	800dc58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	f003 0307 	and.w	r3, r3, #7
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00a      	beq.n	800dc40 <pvPortMalloc+0xf8>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	613b      	str	r3, [r7, #16]
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	1ad2      	subs	r2, r2, r3
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc52:	69b8      	ldr	r0, [r7, #24]
 800dc54:	f000 f908 	bl	800de68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc58:	4b1d      	ldr	r3, [pc, #116]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	4a1b      	ldr	r2, [pc, #108]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc66:	4b1a      	ldr	r3, [pc, #104]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	4b1b      	ldr	r3, [pc, #108]	; (800dcd8 <pvPortMalloc+0x190>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d203      	bcs.n	800dc7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc72:	4b17      	ldr	r3, [pc, #92]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a18      	ldr	r2, [pc, #96]	; (800dcd8 <pvPortMalloc+0x190>)
 800dc78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7c:	685a      	ldr	r2, [r3, #4]
 800dc7e:	4b13      	ldr	r3, [pc, #76]	; (800dccc <pvPortMalloc+0x184>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	431a      	orrs	r2, r3
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc8e:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <pvPortMalloc+0x194>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	3301      	adds	r3, #1
 800dc94:	4a11      	ldr	r2, [pc, #68]	; (800dcdc <pvPortMalloc+0x194>)
 800dc96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc98:	f7fe fce0 	bl	800c65c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	f003 0307 	and.w	r3, r3, #7
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00a      	beq.n	800dcbc <pvPortMalloc+0x174>
	__asm volatile
 800dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	60fb      	str	r3, [r7, #12]
}
 800dcb8:	bf00      	nop
 800dcba:	e7fe      	b.n	800dcba <pvPortMalloc+0x172>
	return pvReturn;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3728      	adds	r7, #40	; 0x28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	24009778 	.word	0x24009778
 800dccc:	2400978c 	.word	0x2400978c
 800dcd0:	2400977c 	.word	0x2400977c
 800dcd4:	24009770 	.word	0x24009770
 800dcd8:	24009780 	.word	0x24009780
 800dcdc:	24009784 	.word	0x24009784

0800dce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d04d      	beq.n	800dd8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dcf2:	2308      	movs	r3, #8
 800dcf4:	425b      	negs	r3, r3
 800dcf6:	697a      	ldr	r2, [r7, #20]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	685a      	ldr	r2, [r3, #4]
 800dd04:	4b24      	ldr	r3, [pc, #144]	; (800dd98 <vPortFree+0xb8>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4013      	ands	r3, r2
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10a      	bne.n	800dd24 <vPortFree+0x44>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	60fb      	str	r3, [r7, #12]
}
 800dd20:	bf00      	nop
 800dd22:	e7fe      	b.n	800dd22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00a      	beq.n	800dd42 <vPortFree+0x62>
	__asm volatile
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	60bb      	str	r3, [r7, #8]
}
 800dd3e:	bf00      	nop
 800dd40:	e7fe      	b.n	800dd40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	685a      	ldr	r2, [r3, #4]
 800dd46:	4b14      	ldr	r3, [pc, #80]	; (800dd98 <vPortFree+0xb8>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d01e      	beq.n	800dd8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d11a      	bne.n	800dd8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	4b0e      	ldr	r3, [pc, #56]	; (800dd98 <vPortFree+0xb8>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	43db      	mvns	r3, r3
 800dd62:	401a      	ands	r2, r3
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd68:	f7fe fc6a 	bl	800c640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	4b0a      	ldr	r3, [pc, #40]	; (800dd9c <vPortFree+0xbc>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4413      	add	r3, r2
 800dd76:	4a09      	ldr	r2, [pc, #36]	; (800dd9c <vPortFree+0xbc>)
 800dd78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd7a:	6938      	ldr	r0, [r7, #16]
 800dd7c:	f000 f874 	bl	800de68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd80:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <vPortFree+0xc0>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3301      	adds	r3, #1
 800dd86:	4a06      	ldr	r2, [pc, #24]	; (800dda0 <vPortFree+0xc0>)
 800dd88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd8a:	f7fe fc67 	bl	800c65c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd8e:	bf00      	nop
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	2400978c 	.word	0x2400978c
 800dd9c:	2400977c 	.word	0x2400977c
 800dda0:	24009788 	.word	0x24009788

0800dda4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ddaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ddae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ddb0:	4b27      	ldr	r3, [pc, #156]	; (800de50 <prvHeapInit+0xac>)
 800ddb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f003 0307 	and.w	r3, r3, #7
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00c      	beq.n	800ddd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3307      	adds	r3, #7
 800ddc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f023 0307 	bic.w	r3, r3, #7
 800ddca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ddcc:	68ba      	ldr	r2, [r7, #8]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	4a1f      	ldr	r2, [pc, #124]	; (800de50 <prvHeapInit+0xac>)
 800ddd4:	4413      	add	r3, r2
 800ddd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dddc:	4a1d      	ldr	r2, [pc, #116]	; (800de54 <prvHeapInit+0xb0>)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dde2:	4b1c      	ldr	r3, [pc, #112]	; (800de54 <prvHeapInit+0xb0>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	4413      	add	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ddf0:	2208      	movs	r2, #8
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f023 0307 	bic.w	r3, r3, #7
 800ddfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	4a15      	ldr	r2, [pc, #84]	; (800de58 <prvHeapInit+0xb4>)
 800de04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de06:	4b14      	ldr	r3, [pc, #80]	; (800de58 <prvHeapInit+0xb4>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2200      	movs	r2, #0
 800de0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de0e:	4b12      	ldr	r3, [pc, #72]	; (800de58 <prvHeapInit+0xb4>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2200      	movs	r2, #0
 800de14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	1ad2      	subs	r2, r2, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de24:	4b0c      	ldr	r3, [pc, #48]	; (800de58 <prvHeapInit+0xb4>)
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	4a0a      	ldr	r2, [pc, #40]	; (800de5c <prvHeapInit+0xb8>)
 800de32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	4a09      	ldr	r2, [pc, #36]	; (800de60 <prvHeapInit+0xbc>)
 800de3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de3c:	4b09      	ldr	r3, [pc, #36]	; (800de64 <prvHeapInit+0xc0>)
 800de3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de42:	601a      	str	r2, [r3, #0]
}
 800de44:	bf00      	nop
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	24005b70 	.word	0x24005b70
 800de54:	24009770 	.word	0x24009770
 800de58:	24009778 	.word	0x24009778
 800de5c:	24009780 	.word	0x24009780
 800de60:	2400977c 	.word	0x2400977c
 800de64:	2400978c 	.word	0x2400978c

0800de68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de70:	4b28      	ldr	r3, [pc, #160]	; (800df14 <prvInsertBlockIntoFreeList+0xac>)
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	e002      	b.n	800de7c <prvInsertBlockIntoFreeList+0x14>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	d8f7      	bhi.n	800de76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	4413      	add	r3, r2
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	429a      	cmp	r2, r3
 800de96:	d108      	bne.n	800deaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	441a      	add	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	441a      	add	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	429a      	cmp	r2, r3
 800debc:	d118      	bne.n	800def0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	4b15      	ldr	r3, [pc, #84]	; (800df18 <prvInsertBlockIntoFreeList+0xb0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d00d      	beq.n	800dee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	441a      	add	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	e008      	b.n	800def8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dee6:	4b0c      	ldr	r3, [pc, #48]	; (800df18 <prvInsertBlockIntoFreeList+0xb0>)
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	e003      	b.n	800def8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	429a      	cmp	r2, r3
 800defe:	d002      	beq.n	800df06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	24009770 	.word	0x24009770
 800df18:	24009778 	.word	0x24009778

0800df1c <rcl_get_zero_initialized_publisher>:
 800df1c:	4b01      	ldr	r3, [pc, #4]	; (800df24 <rcl_get_zero_initialized_publisher+0x8>)
 800df1e:	6818      	ldr	r0, [r3, #0]
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	080184d4 	.word	0x080184d4

0800df28 <rcl_publisher_init>:
 800df28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df2c:	b088      	sub	sp, #32
 800df2e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800df30:	2e00      	cmp	r6, #0
 800df32:	d06b      	beq.n	800e00c <rcl_publisher_init+0xe4>
 800df34:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800df38:	4605      	mov	r5, r0
 800df3a:	460f      	mov	r7, r1
 800df3c:	4690      	mov	r8, r2
 800df3e:	4650      	mov	r0, sl
 800df40:	4699      	mov	r9, r3
 800df42:	f000 f9e5 	bl	800e310 <rcutils_allocator_is_valid>
 800df46:	f080 0401 	eor.w	r4, r0, #1
 800df4a:	b2e4      	uxtb	r4, r4
 800df4c:	2c00      	cmp	r4, #0
 800df4e:	d15d      	bne.n	800e00c <rcl_publisher_init+0xe4>
 800df50:	2d00      	cmp	r5, #0
 800df52:	d05b      	beq.n	800e00c <rcl_publisher_init+0xe4>
 800df54:	682b      	ldr	r3, [r5, #0]
 800df56:	b123      	cbz	r3, 800df62 <rcl_publisher_init+0x3a>
 800df58:	2464      	movs	r4, #100	; 0x64
 800df5a:	4620      	mov	r0, r4
 800df5c:	b008      	add	sp, #32
 800df5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df62:	4638      	mov	r0, r7
 800df64:	f004 fff0 	bl	8012f48 <rcl_node_is_valid>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d054      	beq.n	800e016 <rcl_publisher_init+0xee>
 800df6c:	f1b8 0f00 	cmp.w	r8, #0
 800df70:	d04c      	beq.n	800e00c <rcl_publisher_init+0xe4>
 800df72:	fab9 f389 	clz	r3, r9
 800df76:	095b      	lsrs	r3, r3, #5
 800df78:	f1b9 0f00 	cmp.w	r9, #0
 800df7c:	d046      	beq.n	800e00c <rcl_publisher_init+0xe4>
 800df7e:	aa07      	add	r2, sp, #28
 800df80:	9307      	str	r3, [sp, #28]
 800df82:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800df86:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800df8a:	9205      	str	r2, [sp, #20]
 800df8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800df94:	4649      	mov	r1, r9
 800df96:	4638      	mov	r0, r7
 800df98:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800df9c:	f005 f82c 	bl	8012ff8 <rcl_node_resolve_name>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d14f      	bne.n	800e044 <rcl_publisher_init+0x11c>
 800dfa4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800dfa6:	20c8      	movs	r0, #200	; 0xc8
 800dfa8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800dfaa:	4798      	blx	r3
 800dfac:	6028      	str	r0, [r5, #0]
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d050      	beq.n	800e054 <rcl_publisher_init+0x12c>
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	f004 ffea 	bl	8012f8c <rcl_node_get_rmw_handle>
 800dfb8:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800dfbc:	4641      	mov	r1, r8
 800dfbe:	9a07      	ldr	r2, [sp, #28]
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	4633      	mov	r3, r6
 800dfc4:	682c      	ldr	r4, [r5, #0]
 800dfc6:	f000 fa61 	bl	800e48c <rmw_create_publisher>
 800dfca:	682b      	ldr	r3, [r5, #0]
 800dfcc:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800dfd0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800dfd4:	b370      	cbz	r0, 800e034 <rcl_publisher_init+0x10c>
 800dfd6:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800dfda:	f000 fb3b 	bl	800e654 <rmw_publisher_get_actual_qos>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	b9d0      	cbnz	r0, 800e01a <rcl_publisher_init+0xf2>
 800dfe4:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800dfe8:	4631      	mov	r1, r6
 800dfea:	4618      	mov	r0, r3
 800dfec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800dff0:	2270      	movs	r2, #112	; 0x70
 800dff2:	f009 faea 	bl	80175ca <memcpy>
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800dffc:	9807      	ldr	r0, [sp, #28]
 800dffe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e000:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800e002:	4798      	blx	r3
 800e004:	4620      	mov	r0, r4
 800e006:	b008      	add	sp, #32
 800e008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e00c:	240b      	movs	r4, #11
 800e00e:	4620      	mov	r0, r4
 800e010:	b008      	add	sp, #32
 800e012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e016:	24c8      	movs	r4, #200	; 0xc8
 800e018:	e79f      	b.n	800df5a <rcl_publisher_init+0x32>
 800e01a:	b1cb      	cbz	r3, 800e050 <rcl_publisher_init+0x128>
 800e01c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800e020:	b142      	cbz	r2, 800e034 <rcl_publisher_init+0x10c>
 800e022:	4638      	mov	r0, r7
 800e024:	f004 ffb2 	bl	8012f8c <rcl_node_get_rmw_handle>
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800e02e:	f000 fb25 	bl	800e67c <rmw_destroy_publisher>
 800e032:	682b      	ldr	r3, [r5, #0]
 800e034:	4618      	mov	r0, r3
 800e036:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800e038:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800e03a:	2401      	movs	r4, #1
 800e03c:	4790      	blx	r2
 800e03e:	2300      	movs	r3, #0
 800e040:	602b      	str	r3, [r5, #0]
 800e042:	e7db      	b.n	800dffc <rcl_publisher_init+0xd4>
 800e044:	2867      	cmp	r0, #103	; 0x67
 800e046:	d007      	beq.n	800e058 <rcl_publisher_init+0x130>
 800e048:	2869      	cmp	r0, #105	; 0x69
 800e04a:	d005      	beq.n	800e058 <rcl_publisher_init+0x130>
 800e04c:	280a      	cmp	r0, #10
 800e04e:	d001      	beq.n	800e054 <rcl_publisher_init+0x12c>
 800e050:	2401      	movs	r4, #1
 800e052:	e7d3      	b.n	800dffc <rcl_publisher_init+0xd4>
 800e054:	240a      	movs	r4, #10
 800e056:	e7d1      	b.n	800dffc <rcl_publisher_init+0xd4>
 800e058:	2467      	movs	r4, #103	; 0x67
 800e05a:	e7cf      	b.n	800dffc <rcl_publisher_init+0xd4>

0800e05c <rcl_publisher_get_default_options>:
 800e05c:	b570      	push	{r4, r5, r6, lr}
 800e05e:	4d14      	ldr	r5, [pc, #80]	; (800e0b0 <rcl_publisher_get_default_options+0x54>)
 800e060:	b088      	sub	sp, #32
 800e062:	4604      	mov	r4, r0
 800e064:	2250      	movs	r2, #80	; 0x50
 800e066:	4913      	ldr	r1, [pc, #76]	; (800e0b4 <rcl_publisher_get_default_options+0x58>)
 800e068:	4628      	mov	r0, r5
 800e06a:	f009 faae 	bl	80175ca <memcpy>
 800e06e:	a802      	add	r0, sp, #8
 800e070:	f000 f940 	bl	800e2f4 <rcutils_get_default_allocator>
 800e074:	f10d 0c08 	add.w	ip, sp, #8
 800e078:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800e07c:	466e      	mov	r6, sp
 800e07e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e082:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e086:	f8dc 3000 	ldr.w	r3, [ip]
 800e08a:	4630      	mov	r0, r6
 800e08c:	f8ce 3000 	str.w	r3, [lr]
 800e090:	f000 f97e 	bl	800e390 <rmw_get_default_publisher_options>
 800e094:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800e098:	2270      	movs	r2, #112	; 0x70
 800e09a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e09e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f009 fa90 	bl	80175ca <memcpy>
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	b008      	add	sp, #32
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}
 800e0b0:	24009790 	.word	0x24009790
 800e0b4:	080184d8 	.word	0x080184d8

0800e0b8 <rcl_publish>:
 800e0b8:	b1f8      	cbz	r0, 800e0fa <rcl_publish+0x42>
 800e0ba:	6803      	ldr	r3, [r0, #0]
 800e0bc:	b570      	push	{r4, r5, r6, lr}
 800e0be:	4604      	mov	r4, r0
 800e0c0:	b1b3      	cbz	r3, 800e0f0 <rcl_publish+0x38>
 800e0c2:	4616      	mov	r6, r2
 800e0c4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800e0c8:	b192      	cbz	r2, 800e0f0 <rcl_publish+0x38>
 800e0ca:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800e0ce:	460d      	mov	r5, r1
 800e0d0:	f004 fb5a 	bl	8012788 <rcl_context_is_valid>
 800e0d4:	b160      	cbz	r0, 800e0f0 <rcl_publish+0x38>
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800e0dc:	b140      	cbz	r0, 800e0f0 <rcl_publish+0x38>
 800e0de:	b155      	cbz	r5, 800e0f6 <rcl_publish+0x3e>
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	f000 f972 	bl	800e3cc <rmw_publish>
 800e0e8:	3800      	subs	r0, #0
 800e0ea:	bf18      	it	ne
 800e0ec:	2001      	movne	r0, #1
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e0f4:	bd70      	pop	{r4, r5, r6, pc}
 800e0f6:	200b      	movs	r0, #11
 800e0f8:	bd70      	pop	{r4, r5, r6, pc}
 800e0fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e0fe:	4770      	bx	lr

0800e100 <rclc_support_init>:
 800e100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e104:	b086      	sub	sp, #24
 800e106:	b3bb      	cbz	r3, 800e178 <rclc_support_init+0x78>
 800e108:	4606      	mov	r6, r0
 800e10a:	b3a8      	cbz	r0, 800e178 <rclc_support_init+0x78>
 800e10c:	461c      	mov	r4, r3
 800e10e:	460f      	mov	r7, r1
 800e110:	4690      	mov	r8, r2
 800e112:	f004 fca5 	bl	8012a60 <rcl_get_zero_initialized_init_options>
 800e116:	f104 050c 	add.w	r5, r4, #12
 800e11a:	9005      	str	r0, [sp, #20]
 800e11c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e120:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e124:	a805      	add	r0, sp, #20
 800e126:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e12a:	f004 fc9b 	bl	8012a64 <rcl_init_options_init>
 800e12e:	4605      	mov	r5, r0
 800e130:	b9e0      	cbnz	r0, 800e16c <rclc_support_init+0x6c>
 800e132:	ad02      	add	r5, sp, #8
 800e134:	4628      	mov	r0, r5
 800e136:	f004 fb1d 	bl	8012774 <rcl_get_zero_initialized_context>
 800e13a:	4633      	mov	r3, r6
 800e13c:	aa05      	add	r2, sp, #20
 800e13e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e142:	e886 0003 	stmia.w	r6, {r0, r1}
 800e146:	4641      	mov	r1, r8
 800e148:	4638      	mov	r0, r7
 800e14a:	f004 fb83 	bl	8012854 <rcl_init>
 800e14e:	4605      	mov	r5, r0
 800e150:	b9b8      	cbnz	r0, 800e182 <rclc_support_init+0x82>
 800e152:	4622      	mov	r2, r4
 800e154:	f106 010c 	add.w	r1, r6, #12
 800e158:	2003      	movs	r0, #3
 800e15a:	60b4      	str	r4, [r6, #8]
 800e15c:	f005 f93a 	bl	80133d4 <rcl_clock_init>
 800e160:	4605      	mov	r5, r0
 800e162:	b970      	cbnz	r0, 800e182 <rclc_support_init+0x82>
 800e164:	a805      	add	r0, sp, #20
 800e166:	f004 fce3 	bl	8012b30 <rcl_init_options_fini>
 800e16a:	b108      	cbz	r0, 800e170 <rclc_support_init+0x70>
 800e16c:	f000 f8f4 	bl	800e358 <rcutils_reset_error>
 800e170:	4628      	mov	r0, r5
 800e172:	b006      	add	sp, #24
 800e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e178:	250b      	movs	r5, #11
 800e17a:	4628      	mov	r0, r5
 800e17c:	b006      	add	sp, #24
 800e17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e182:	f000 f8e9 	bl	800e358 <rcutils_reset_error>
 800e186:	a805      	add	r0, sp, #20
 800e188:	f004 fcd2 	bl	8012b30 <rcl_init_options_fini>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d0ef      	beq.n	800e170 <rclc_support_init+0x70>
 800e190:	e7ec      	b.n	800e16c <rclc_support_init+0x6c>
 800e192:	bf00      	nop

0800e194 <rclc_node_init_default>:
 800e194:	2b00      	cmp	r3, #0
 800e196:	bf18      	it	ne
 800e198:	2a00      	cmpne	r2, #0
 800e19a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e19e:	4616      	mov	r6, r2
 800e1a0:	bf0c      	ite	eq
 800e1a2:	2201      	moveq	r2, #1
 800e1a4:	2200      	movne	r2, #0
 800e1a6:	b0a1      	sub	sp, #132	; 0x84
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	bf08      	it	eq
 800e1ac:	f042 0201 	orreq.w	r2, r2, #1
 800e1b0:	bb22      	cbnz	r2, 800e1fc <rclc_node_init_default+0x68>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	b310      	cbz	r0, 800e1fc <rclc_node_init_default+0x68>
 800e1b6:	f10d 0810 	add.w	r8, sp, #16
 800e1ba:	461f      	mov	r7, r3
 800e1bc:	460d      	mov	r5, r1
 800e1be:	f10d 0918 	add.w	r9, sp, #24
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	f004 fd6e 	bl	8012ca4 <rcl_get_zero_initialized_node>
 800e1c8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e1cc:	e884 0003 	stmia.w	r4, {r0, r1}
 800e1d0:	4648      	mov	r0, r9
 800e1d2:	f004 fee1 	bl	8012f98 <rcl_node_get_default_options>
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f004 fd64 	bl	8012ca4 <rcl_get_zero_initialized_node>
 800e1dc:	f8cd 9000 	str.w	r9, [sp]
 800e1e0:	463b      	mov	r3, r7
 800e1e2:	4632      	mov	r2, r6
 800e1e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e1e8:	e884 0003 	stmia.w	r4, {r0, r1}
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f004 fd62 	bl	8012cb8 <rcl_node_init>
 800e1f4:	b930      	cbnz	r0, 800e204 <rclc_node_init_default+0x70>
 800e1f6:	b021      	add	sp, #132	; 0x84
 800e1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1fc:	200b      	movs	r0, #11
 800e1fe:	b021      	add	sp, #132	; 0x84
 800e200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e204:	9003      	str	r0, [sp, #12]
 800e206:	f000 f8a7 	bl	800e358 <rcutils_reset_error>
 800e20a:	f000 f8a5 	bl	800e358 <rcutils_reset_error>
 800e20e:	9803      	ldr	r0, [sp, #12]
 800e210:	b021      	add	sp, #132	; 0x84
 800e212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e216:	bf00      	nop

0800e218 <rclc_publisher_init_default>:
 800e218:	2b00      	cmp	r3, #0
 800e21a:	bf18      	it	ne
 800e21c:	2a00      	cmpne	r2, #0
 800e21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e222:	4616      	mov	r6, r2
 800e224:	bf0c      	ite	eq
 800e226:	2201      	moveq	r2, #1
 800e228:	2200      	movne	r2, #0
 800e22a:	b0a0      	sub	sp, #128	; 0x80
 800e22c:	2900      	cmp	r1, #0
 800e22e:	bf08      	it	eq
 800e230:	f042 0201 	orreq.w	r2, r2, #1
 800e234:	bb1a      	cbnz	r2, 800e27e <rclc_publisher_init_default+0x66>
 800e236:	4604      	mov	r4, r0
 800e238:	b308      	cbz	r0, 800e27e <rclc_publisher_init_default+0x66>
 800e23a:	f10d 0810 	add.w	r8, sp, #16
 800e23e:	461f      	mov	r7, r3
 800e240:	460d      	mov	r5, r1
 800e242:	f7ff fe6b 	bl	800df1c <rcl_get_zero_initialized_publisher>
 800e246:	6020      	str	r0, [r4, #0]
 800e248:	4640      	mov	r0, r8
 800e24a:	f7ff ff07 	bl	800e05c <rcl_publisher_get_default_options>
 800e24e:	2250      	movs	r2, #80	; 0x50
 800e250:	490d      	ldr	r1, [pc, #52]	; (800e288 <rclc_publisher_init_default+0x70>)
 800e252:	4640      	mov	r0, r8
 800e254:	f009 f9b9 	bl	80175ca <memcpy>
 800e258:	463b      	mov	r3, r7
 800e25a:	4632      	mov	r2, r6
 800e25c:	4629      	mov	r1, r5
 800e25e:	4620      	mov	r0, r4
 800e260:	f8cd 8000 	str.w	r8, [sp]
 800e264:	f7ff fe60 	bl	800df28 <rcl_publisher_init>
 800e268:	b910      	cbnz	r0, 800e270 <rclc_publisher_init_default+0x58>
 800e26a:	b020      	add	sp, #128	; 0x80
 800e26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e270:	9003      	str	r0, [sp, #12]
 800e272:	f000 f871 	bl	800e358 <rcutils_reset_error>
 800e276:	9803      	ldr	r0, [sp, #12]
 800e278:	b020      	add	sp, #128	; 0x80
 800e27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27e:	200b      	movs	r0, #11
 800e280:	b020      	add	sp, #128	; 0x80
 800e282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e286:	bf00      	nop
 800e288:	08018528 	.word	0x08018528

0800e28c <__default_zero_allocate>:
 800e28c:	f008 bd0e 	b.w	8016cac <calloc>

0800e290 <__default_reallocate>:
 800e290:	f008 be9a 	b.w	8016fc8 <realloc>

0800e294 <__default_deallocate>:
 800e294:	f008 bd78 	b.w	8016d88 <free>

0800e298 <__default_allocate>:
 800e298:	f008 bd6e 	b.w	8016d78 <malloc>

0800e29c <rcutils_get_zero_initialized_allocator>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	4c05      	ldr	r4, [pc, #20]	; (800e2b4 <rcutils_get_zero_initialized_allocator+0x18>)
 800e2a0:	4686      	mov	lr, r0
 800e2a2:	4684      	mov	ip, r0
 800e2a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2aa:	6823      	ldr	r3, [r4, #0]
 800e2ac:	4670      	mov	r0, lr
 800e2ae:	f8cc 3000 	str.w	r3, [ip]
 800e2b2:	bd10      	pop	{r4, pc}
 800e2b4:	08018578 	.word	0x08018578

0800e2b8 <rcutils_set_default_allocator>:
 800e2b8:	b1a8      	cbz	r0, 800e2e6 <rcutils_set_default_allocator+0x2e>
 800e2ba:	6802      	ldr	r2, [r0, #0]
 800e2bc:	b1a2      	cbz	r2, 800e2e8 <rcutils_set_default_allocator+0x30>
 800e2be:	6841      	ldr	r1, [r0, #4]
 800e2c0:	b1a1      	cbz	r1, 800e2ec <rcutils_set_default_allocator+0x34>
 800e2c2:	b410      	push	{r4}
 800e2c4:	68c4      	ldr	r4, [r0, #12]
 800e2c6:	b164      	cbz	r4, 800e2e2 <rcutils_set_default_allocator+0x2a>
 800e2c8:	6880      	ldr	r0, [r0, #8]
 800e2ca:	b138      	cbz	r0, 800e2dc <rcutils_set_default_allocator+0x24>
 800e2cc:	4b08      	ldr	r3, [pc, #32]	; (800e2f0 <rcutils_set_default_allocator+0x38>)
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	e7fa      	b.n	800e2dc <rcutils_set_default_allocator+0x24>
 800e2e6:	4770      	bx	lr
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	4770      	bx	lr
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	4770      	bx	lr
 800e2f0:	24000018 	.word	0x24000018

0800e2f4 <rcutils_get_default_allocator>:
 800e2f4:	b510      	push	{r4, lr}
 800e2f6:	4c05      	ldr	r4, [pc, #20]	; (800e30c <rcutils_get_default_allocator+0x18>)
 800e2f8:	4686      	mov	lr, r0
 800e2fa:	4684      	mov	ip, r0
 800e2fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e302:	6823      	ldr	r3, [r4, #0]
 800e304:	4670      	mov	r0, lr
 800e306:	f8cc 3000 	str.w	r3, [ip]
 800e30a:	bd10      	pop	{r4, pc}
 800e30c:	24000018 	.word	0x24000018

0800e310 <rcutils_allocator_is_valid>:
 800e310:	b158      	cbz	r0, 800e32a <rcutils_allocator_is_valid+0x1a>
 800e312:	6803      	ldr	r3, [r0, #0]
 800e314:	b143      	cbz	r3, 800e328 <rcutils_allocator_is_valid+0x18>
 800e316:	6843      	ldr	r3, [r0, #4]
 800e318:	b133      	cbz	r3, 800e328 <rcutils_allocator_is_valid+0x18>
 800e31a:	68c3      	ldr	r3, [r0, #12]
 800e31c:	b123      	cbz	r3, 800e328 <rcutils_allocator_is_valid+0x18>
 800e31e:	6880      	ldr	r0, [r0, #8]
 800e320:	3800      	subs	r0, #0
 800e322:	bf18      	it	ne
 800e324:	2001      	movne	r0, #1
 800e326:	4770      	bx	lr
 800e328:	4618      	mov	r0, r3
 800e32a:	4770      	bx	lr

0800e32c <rcutils_get_error_string>:
 800e32c:	4b06      	ldr	r3, [pc, #24]	; (800e348 <rcutils_get_error_string+0x1c>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	b13b      	cbz	r3, 800e342 <rcutils_get_error_string+0x16>
 800e332:	4b06      	ldr	r3, [pc, #24]	; (800e34c <rcutils_get_error_string+0x20>)
 800e334:	781a      	ldrb	r2, [r3, #0]
 800e336:	b90a      	cbnz	r2, 800e33c <rcutils_get_error_string+0x10>
 800e338:	2201      	movs	r2, #1
 800e33a:	701a      	strb	r2, [r3, #0]
 800e33c:	4b04      	ldr	r3, [pc, #16]	; (800e350 <rcutils_get_error_string+0x24>)
 800e33e:	7818      	ldrb	r0, [r3, #0]
 800e340:	4770      	bx	lr
 800e342:	4b04      	ldr	r3, [pc, #16]	; (800e354 <rcutils_get_error_string+0x28>)
 800e344:	7818      	ldrb	r0, [r3, #0]
 800e346:	4770      	bx	lr
 800e348:	24009800 	.word	0x24009800
 800e34c:	24009819 	.word	0x24009819
 800e350:	24009818 	.word	0x24009818
 800e354:	0801858c 	.word	0x0801858c

0800e358 <rcutils_reset_error>:
 800e358:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800e378 <rcutils_reset_error+0x20>
 800e35c:	2300      	movs	r3, #0
 800e35e:	4a08      	ldr	r2, [pc, #32]	; (800e380 <rcutils_reset_error+0x28>)
 800e360:	4808      	ldr	r0, [pc, #32]	; (800e384 <rcutils_reset_error+0x2c>)
 800e362:	8013      	strh	r3, [r2, #0]
 800e364:	4908      	ldr	r1, [pc, #32]	; (800e388 <rcutils_reset_error+0x30>)
 800e366:	7003      	strb	r3, [r0, #0]
 800e368:	700b      	strb	r3, [r1, #0]
 800e36a:	ed82 7b02 	vstr	d7, [r2, #8]
 800e36e:	4a07      	ldr	r2, [pc, #28]	; (800e38c <rcutils_reset_error+0x34>)
 800e370:	7013      	strb	r3, [r2, #0]
 800e372:	4770      	bx	lr
 800e374:	f3af 8000 	nop.w
	...
 800e380:	24009808 	.word	0x24009808
 800e384:	24009819 	.word	0x24009819
 800e388:	24009818 	.word	0x24009818
 800e38c:	24009800 	.word	0x24009800

0800e390 <rmw_get_default_publisher_options>:
 800e390:	2200      	movs	r2, #0
 800e392:	6002      	str	r2, [r0, #0]
 800e394:	7102      	strb	r2, [r0, #4]
 800e396:	4770      	bx	lr

0800e398 <rmw_uros_set_custom_transport>:
 800e398:	b470      	push	{r4, r5, r6}
 800e39a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e39e:	b162      	cbz	r2, 800e3ba <rmw_uros_set_custom_transport+0x22>
 800e3a0:	b15b      	cbz	r3, 800e3ba <rmw_uros_set_custom_transport+0x22>
 800e3a2:	b155      	cbz	r5, 800e3ba <rmw_uros_set_custom_transport+0x22>
 800e3a4:	b14e      	cbz	r6, 800e3ba <rmw_uros_set_custom_transport+0x22>
 800e3a6:	4c06      	ldr	r4, [pc, #24]	; (800e3c0 <rmw_uros_set_custom_transport+0x28>)
 800e3a8:	7020      	strb	r0, [r4, #0]
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	6166      	str	r6, [r4, #20]
 800e3ae:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e3b2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e3b6:	bc70      	pop	{r4, r5, r6}
 800e3b8:	4770      	bx	lr
 800e3ba:	200b      	movs	r0, #11
 800e3bc:	bc70      	pop	{r4, r5, r6}
 800e3be:	4770      	bx	lr
 800e3c0:	2400981c 	.word	0x2400981c

0800e3c4 <flush_session>:
 800e3c4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800e3c6:	f002 bb4d 	b.w	8010a64 <uxr_run_session_until_confirm_delivery>
 800e3ca:	bf00      	nop

0800e3cc <rmw_publish>:
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	d053      	beq.n	800e478 <rmw_publish+0xac>
 800e3d0:	b570      	push	{r4, r5, r6, lr}
 800e3d2:	460d      	mov	r5, r1
 800e3d4:	b08e      	sub	sp, #56	; 0x38
 800e3d6:	2900      	cmp	r1, #0
 800e3d8:	d04b      	beq.n	800e472 <rmw_publish+0xa6>
 800e3da:	4604      	mov	r4, r0
 800e3dc:	6800      	ldr	r0, [r0, #0]
 800e3de:	f000 fc57 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d045      	beq.n	800e472 <rmw_publish+0xa6>
 800e3e6:	6866      	ldr	r6, [r4, #4]
 800e3e8:	2e00      	cmp	r6, #0
 800e3ea:	d042      	beq.n	800e472 <rmw_publish+0xa6>
 800e3ec:	69b4      	ldr	r4, [r6, #24]
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	6923      	ldr	r3, [r4, #16]
 800e3f2:	4798      	blx	r3
 800e3f4:	69f3      	ldr	r3, [r6, #28]
 800e3f6:	9005      	str	r0, [sp, #20]
 800e3f8:	b113      	cbz	r3, 800e400 <rmw_publish+0x34>
 800e3fa:	a805      	add	r0, sp, #20
 800e3fc:	4798      	blx	r3
 800e3fe:	9805      	ldr	r0, [sp, #20]
 800e400:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	9000      	str	r0, [sp, #0]
 800e408:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e40c:	6972      	ldr	r2, [r6, #20]
 800e40e:	ab06      	add	r3, sp, #24
 800e410:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e412:	f003 f925 	bl	8011660 <uxr_prepare_output_stream>
 800e416:	b1d8      	cbz	r0, 800e450 <rmw_publish+0x84>
 800e418:	68a3      	ldr	r3, [r4, #8]
 800e41a:	a906      	add	r1, sp, #24
 800e41c:	4628      	mov	r0, r5
 800e41e:	4798      	blx	r3
 800e420:	6a33      	ldr	r3, [r6, #32]
 800e422:	4604      	mov	r4, r0
 800e424:	b10b      	cbz	r3, 800e42a <rmw_publish+0x5e>
 800e426:	a806      	add	r0, sp, #24
 800e428:	4798      	blx	r3
 800e42a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800e42e:	2b01      	cmp	r3, #1
 800e430:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e434:	d022      	beq.n	800e47c <rmw_publish+0xb0>
 800e436:	6918      	ldr	r0, [r3, #16]
 800e438:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800e43a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e43e:	f002 fb11 	bl	8010a64 <uxr_run_session_until_confirm_delivery>
 800e442:	4020      	ands	r0, r4
 800e444:	b2c4      	uxtb	r4, r0
 800e446:	f084 0001 	eor.w	r0, r4, #1
 800e44a:	b2c0      	uxtb	r0, r0
 800e44c:	b00e      	add	sp, #56	; 0x38
 800e44e:	bd70      	pop	{r4, r5, r6, pc}
 800e450:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e454:	6918      	ldr	r0, [r3, #16]
 800e456:	9b05      	ldr	r3, [sp, #20]
 800e458:	9602      	str	r6, [sp, #8]
 800e45a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	4b09      	ldr	r3, [pc, #36]	; (800e488 <rmw_publish+0xbc>)
 800e462:	9301      	str	r3, [sp, #4]
 800e464:	ab06      	add	r3, sp, #24
 800e466:	6972      	ldr	r2, [r6, #20]
 800e468:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e46a:	f003 f929 	bl	80116c0 <uxr_prepare_output_stream_fragmented>
 800e46e:	2800      	cmp	r0, #0
 800e470:	d1d2      	bne.n	800e418 <rmw_publish+0x4c>
 800e472:	2001      	movs	r0, #1
 800e474:	b00e      	add	sp, #56	; 0x38
 800e476:	bd70      	pop	{r4, r5, r6, pc}
 800e478:	2001      	movs	r0, #1
 800e47a:	4770      	bx	lr
 800e47c:	6918      	ldr	r0, [r3, #16]
 800e47e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e482:	f001 ff6f 	bl	8010364 <uxr_flash_output_streams>
 800e486:	e7de      	b.n	800e446 <rmw_publish+0x7a>
 800e488:	0800e3c5 	.word	0x0800e3c5

0800e48c <rmw_create_publisher>:
 800e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e490:	b087      	sub	sp, #28
 800e492:	2800      	cmp	r0, #0
 800e494:	f000 80d2 	beq.w	800e63c <rmw_create_publisher+0x1b0>
 800e498:	460e      	mov	r6, r1
 800e49a:	2900      	cmp	r1, #0
 800e49c:	f000 80ce 	beq.w	800e63c <rmw_create_publisher+0x1b0>
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	6800      	ldr	r0, [r0, #0]
 800e4a4:	4615      	mov	r5, r2
 800e4a6:	461f      	mov	r7, r3
 800e4a8:	f000 fbf2 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 800e4ac:	f080 0001 	eor.w	r0, r0, #1
 800e4b0:	b2c0      	uxtb	r0, r0
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	f040 80c2 	bne.w	800e63c <rmw_create_publisher+0x1b0>
 800e4b8:	2d00      	cmp	r5, #0
 800e4ba:	f000 80bf 	beq.w	800e63c <rmw_create_publisher+0x1b0>
 800e4be:	782b      	ldrb	r3, [r5, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 80bb 	beq.w	800e63c <rmw_create_publisher+0x1b0>
 800e4c6:	2f00      	cmp	r7, #0
 800e4c8:	f000 80b8 	beq.w	800e63c <rmw_create_publisher+0x1b0>
 800e4cc:	485e      	ldr	r0, [pc, #376]	; (800e648 <rmw_create_publisher+0x1bc>)
 800e4ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e4d2:	f005 fd3b 	bl	8013f4c <get_memory>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	f000 80b0 	beq.w	800e63c <rmw_create_publisher+0x1b0>
 800e4dc:	6884      	ldr	r4, [r0, #8]
 800e4de:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800e4e2:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800e4e6:	f005 fd55 	bl	8013f94 <rmw_get_implementation_identifier>
 800e4ea:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800e4ee:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f7f1 fefe 	bl	80002f4 <strlen>
 800e4f8:	3001      	adds	r0, #1
 800e4fa:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800e4fe:	283c      	cmp	r0, #60	; 0x3c
 800e500:	f200 808f 	bhi.w	800e622 <rmw_create_publisher+0x196>
 800e504:	462b      	mov	r3, r5
 800e506:	4a51      	ldr	r2, [pc, #324]	; (800e64c <rmw_create_publisher+0x1c0>)
 800e508:	213c      	movs	r1, #60	; 0x3c
 800e50a:	4650      	mov	r0, sl
 800e50c:	f008 fee4 	bl	80172d8 <sniprintf>
 800e510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e514:	4639      	mov	r1, r7
 800e516:	2250      	movs	r2, #80	; 0x50
 800e518:	67e3      	str	r3, [r4, #124]	; 0x7c
 800e51a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e51e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800e522:	f009 f852 	bl	80175ca <memcpy>
 800e526:	7a3b      	ldrb	r3, [r7, #8]
 800e528:	4630      	mov	r0, r6
 800e52a:	4949      	ldr	r1, [pc, #292]	; (800e650 <rmw_create_publisher+0x1c4>)
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e532:	bf0c      	ite	eq
 800e534:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800e538:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800e53c:	67a3      	str	r3, [r4, #120]	; 0x78
 800e53e:	2300      	movs	r3, #0
 800e540:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e544:	f000 fbb2 	bl	800ecac <get_message_typesupport_handle>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d06a      	beq.n	800e622 <rmw_create_publisher+0x196>
 800e54c:	6842      	ldr	r2, [r0, #4]
 800e54e:	61a2      	str	r2, [r4, #24]
 800e550:	2a00      	cmp	r2, #0
 800e552:	d066      	beq.n	800e622 <rmw_create_publisher+0x196>
 800e554:	4629      	mov	r1, r5
 800e556:	463b      	mov	r3, r7
 800e558:	4648      	mov	r0, r9
 800e55a:	f005 ff87 	bl	801446c <create_topic>
 800e55e:	6260      	str	r0, [r4, #36]	; 0x24
 800e560:	2800      	cmp	r0, #0
 800e562:	d062      	beq.n	800e62a <rmw_create_publisher+0x19e>
 800e564:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e568:	2103      	movs	r1, #3
 800e56a:	2506      	movs	r5, #6
 800e56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e570:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800e574:	1c42      	adds	r2, r0, #1
 800e576:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800e57a:	f001 fda3 	bl	80100c4 <uxr_object_id>
 800e57e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e582:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e586:	6120      	str	r0, [r4, #16]
 800e588:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800e58c:	6910      	ldr	r0, [r2, #16]
 800e58e:	9500      	str	r5, [sp, #0]
 800e590:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e594:	6819      	ldr	r1, [r3, #0]
 800e596:	6922      	ldr	r2, [r4, #16]
 800e598:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e59c:	f001 fcec 	bl	800ff78 <uxr_buffer_create_publisher_bin>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e5a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e5aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e5ae:	f000 faf5 	bl	800eb9c <run_xrce_session>
 800e5b2:	b3b0      	cbz	r0, 800e622 <rmw_create_publisher+0x196>
 800e5b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5b8:	2105      	movs	r1, #5
 800e5ba:	f10d 0a10 	add.w	sl, sp, #16
 800e5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5c2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800e5c6:	1c42      	adds	r2, r0, #1
 800e5c8:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800e5cc:	f001 fd7a 	bl	80100c4 <uxr_object_id>
 800e5d0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e5d4:	4639      	mov	r1, r7
 800e5d6:	6160      	str	r0, [r4, #20]
 800e5d8:	691e      	ldr	r6, [r3, #16]
 800e5da:	4650      	mov	r0, sl
 800e5dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5e0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800e5e4:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800e5e8:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800e5ec:	f000 faf2 	bl	800ebd4 <convert_qos_profile>
 800e5f0:	9503      	str	r5, [sp, #12]
 800e5f2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e5f6:	9001      	str	r0, [sp, #4]
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e5fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e60a:	f001 fce5 	bl	800ffd8 <uxr_buffer_create_datawriter_bin>
 800e60e:	4602      	mov	r2, r0
 800e610:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e614:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e618:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e61c:	f000 fabe 	bl	800eb9c <run_xrce_session>
 800e620:	b970      	cbnz	r0, 800e640 <rmw_create_publisher+0x1b4>
 800e622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e624:	b108      	cbz	r0, 800e62a <rmw_create_publisher+0x19e>
 800e626:	f000 fa53 	bl	800ead0 <rmw_uxrce_fini_topic_memory>
 800e62a:	4640      	mov	r0, r8
 800e62c:	f04f 0800 	mov.w	r8, #0
 800e630:	f000 f9f6 	bl	800ea20 <rmw_uxrce_fini_publisher_memory>
 800e634:	4640      	mov	r0, r8
 800e636:	b007      	add	sp, #28
 800e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63c:	f04f 0800 	mov.w	r8, #0
 800e640:	4640      	mov	r0, r8
 800e642:	b007      	add	sp, #28
 800e644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e648:	2400e114 	.word	0x2400e114
 800e64c:	080185c4 	.word	0x080185c4
 800e650:	08018590 	.word	0x08018590

0800e654 <rmw_publisher_get_actual_qos>:
 800e654:	b178      	cbz	r0, 800e676 <rmw_publisher_get_actual_qos+0x22>
 800e656:	b510      	push	{r4, lr}
 800e658:	fab1 f481 	clz	r4, r1
 800e65c:	0964      	lsrs	r4, r4, #5
 800e65e:	b141      	cbz	r1, 800e672 <rmw_publisher_get_actual_qos+0x1e>
 800e660:	6843      	ldr	r3, [r0, #4]
 800e662:	2250      	movs	r2, #80	; 0x50
 800e664:	4608      	mov	r0, r1
 800e666:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e66a:	f008 ffae 	bl	80175ca <memcpy>
 800e66e:	4620      	mov	r0, r4
 800e670:	bd10      	pop	{r4, pc}
 800e672:	200b      	movs	r0, #11
 800e674:	bd10      	pop	{r4, pc}
 800e676:	200b      	movs	r0, #11
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop

0800e67c <rmw_destroy_publisher>:
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e680:	b128      	cbz	r0, 800e68e <rmw_destroy_publisher+0x12>
 800e682:	4604      	mov	r4, r0
 800e684:	6800      	ldr	r0, [r0, #0]
 800e686:	460d      	mov	r5, r1
 800e688:	f000 fb02 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 800e68c:	b918      	cbnz	r0, 800e696 <rmw_destroy_publisher+0x1a>
 800e68e:	2401      	movs	r4, #1
 800e690:	4620      	mov	r0, r4
 800e692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e696:	6863      	ldr	r3, [r4, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d0f8      	beq.n	800e68e <rmw_destroy_publisher+0x12>
 800e69c:	fab5 f485 	clz	r4, r5
 800e6a0:	0964      	lsrs	r4, r4, #5
 800e6a2:	2d00      	cmp	r5, #0
 800e6a4:	d0f3      	beq.n	800e68e <rmw_destroy_publisher+0x12>
 800e6a6:	6828      	ldr	r0, [r5, #0]
 800e6a8:	f000 faf2 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d0ee      	beq.n	800e68e <rmw_destroy_publisher+0x12>
 800e6b0:	686e      	ldr	r6, [r5, #4]
 800e6b2:	2e00      	cmp	r6, #0
 800e6b4:	d0eb      	beq.n	800e68e <rmw_destroy_publisher+0x12>
 800e6b6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800e6b8:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800e6bc:	f005 ff26 	bl	801450c <destroy_topic>
 800e6c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e6c4:	6972      	ldr	r2, [r6, #20]
 800e6c6:	6918      	ldr	r0, [r3, #16]
 800e6c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e6cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6d0:	6819      	ldr	r1, [r3, #0]
 800e6d2:	f001 fb9d 	bl	800fe10 <uxr_buffer_delete_entity>
 800e6d6:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e6da:	4680      	mov	r8, r0
 800e6dc:	6932      	ldr	r2, [r6, #16]
 800e6de:	6918      	ldr	r0, [r3, #16]
 800e6e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e6e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6e8:	6819      	ldr	r1, [r3, #0]
 800e6ea:	f001 fb91 	bl	800fe10 <uxr_buffer_delete_entity>
 800e6ee:	4606      	mov	r6, r0
 800e6f0:	6938      	ldr	r0, [r7, #16]
 800e6f2:	4642      	mov	r2, r8
 800e6f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e6f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e6fc:	f000 fa4e 	bl	800eb9c <run_xrce_session>
 800e700:	693f      	ldr	r7, [r7, #16]
 800e702:	4632      	mov	r2, r6
 800e704:	4606      	mov	r6, r0
 800e706:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800e70a:	4638      	mov	r0, r7
 800e70c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800e710:	f000 fa44 	bl	800eb9c <run_xrce_session>
 800e714:	b126      	cbz	r6, 800e720 <rmw_destroy_publisher+0xa4>
 800e716:	b118      	cbz	r0, 800e720 <rmw_destroy_publisher+0xa4>
 800e718:	4628      	mov	r0, r5
 800e71a:	f000 f981 	bl	800ea20 <rmw_uxrce_fini_publisher_memory>
 800e71e:	e7b7      	b.n	800e690 <rmw_destroy_publisher+0x14>
 800e720:	2402      	movs	r4, #2
 800e722:	e7f9      	b.n	800e718 <rmw_destroy_publisher+0x9c>

0800e724 <rmw_uxrce_init_service_memory>:
 800e724:	b1e2      	cbz	r2, 800e760 <rmw_uxrce_init_service_memory+0x3c>
 800e726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e72a:	7b05      	ldrb	r5, [r0, #12]
 800e72c:	4606      	mov	r6, r0
 800e72e:	b9ad      	cbnz	r5, 800e75c <rmw_uxrce_init_service_memory+0x38>
 800e730:	23c8      	movs	r3, #200	; 0xc8
 800e732:	4617      	mov	r7, r2
 800e734:	460c      	mov	r4, r1
 800e736:	46a8      	mov	r8, r5
 800e738:	6083      	str	r3, [r0, #8]
 800e73a:	f240 1301 	movw	r3, #257	; 0x101
 800e73e:	e9c0 5500 	strd	r5, r5, [r0]
 800e742:	8183      	strh	r3, [r0, #12]
 800e744:	3501      	adds	r5, #1
 800e746:	4621      	mov	r1, r4
 800e748:	4630      	mov	r0, r6
 800e74a:	f005 fc0f 	bl	8013f6c <put_memory>
 800e74e:	42af      	cmp	r7, r5
 800e750:	60a4      	str	r4, [r4, #8]
 800e752:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e756:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e75a:	d1f3      	bne.n	800e744 <rmw_uxrce_init_service_memory+0x20>
 800e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop

0800e764 <rmw_uxrce_init_client_memory>:
 800e764:	b1e2      	cbz	r2, 800e7a0 <rmw_uxrce_init_client_memory+0x3c>
 800e766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e76a:	7b05      	ldrb	r5, [r0, #12]
 800e76c:	4606      	mov	r6, r0
 800e76e:	b9ad      	cbnz	r5, 800e79c <rmw_uxrce_init_client_memory+0x38>
 800e770:	23c8      	movs	r3, #200	; 0xc8
 800e772:	4617      	mov	r7, r2
 800e774:	460c      	mov	r4, r1
 800e776:	46a8      	mov	r8, r5
 800e778:	6083      	str	r3, [r0, #8]
 800e77a:	f240 1301 	movw	r3, #257	; 0x101
 800e77e:	e9c0 5500 	strd	r5, r5, [r0]
 800e782:	8183      	strh	r3, [r0, #12]
 800e784:	3501      	adds	r5, #1
 800e786:	4621      	mov	r1, r4
 800e788:	4630      	mov	r0, r6
 800e78a:	f005 fbef 	bl	8013f6c <put_memory>
 800e78e:	42af      	cmp	r7, r5
 800e790:	60a4      	str	r4, [r4, #8]
 800e792:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e796:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e79a:	d1f3      	bne.n	800e784 <rmw_uxrce_init_client_memory+0x20>
 800e79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop

0800e7a4 <rmw_uxrce_init_publisher_memory>:
 800e7a4:	b1e2      	cbz	r2, 800e7e0 <rmw_uxrce_init_publisher_memory+0x3c>
 800e7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7aa:	7b05      	ldrb	r5, [r0, #12]
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	b9ad      	cbnz	r5, 800e7dc <rmw_uxrce_init_publisher_memory+0x38>
 800e7b0:	23d8      	movs	r3, #216	; 0xd8
 800e7b2:	4617      	mov	r7, r2
 800e7b4:	460c      	mov	r4, r1
 800e7b6:	46a8      	mov	r8, r5
 800e7b8:	6083      	str	r3, [r0, #8]
 800e7ba:	f240 1301 	movw	r3, #257	; 0x101
 800e7be:	e9c0 5500 	strd	r5, r5, [r0]
 800e7c2:	8183      	strh	r3, [r0, #12]
 800e7c4:	3501      	adds	r5, #1
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	f005 fbcf 	bl	8013f6c <put_memory>
 800e7ce:	42af      	cmp	r7, r5
 800e7d0:	60a4      	str	r4, [r4, #8]
 800e7d2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e7d6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e7da:	d1f3      	bne.n	800e7c4 <rmw_uxrce_init_publisher_memory+0x20>
 800e7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop

0800e7e4 <rmw_uxrce_init_subscription_memory>:
 800e7e4:	b1e2      	cbz	r2, 800e820 <rmw_uxrce_init_subscription_memory+0x3c>
 800e7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ea:	7b05      	ldrb	r5, [r0, #12]
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	b9ad      	cbnz	r5, 800e81c <rmw_uxrce_init_subscription_memory+0x38>
 800e7f0:	23d8      	movs	r3, #216	; 0xd8
 800e7f2:	4617      	mov	r7, r2
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	46a8      	mov	r8, r5
 800e7f8:	6083      	str	r3, [r0, #8]
 800e7fa:	f240 1301 	movw	r3, #257	; 0x101
 800e7fe:	e9c0 5500 	strd	r5, r5, [r0]
 800e802:	8183      	strh	r3, [r0, #12]
 800e804:	3501      	adds	r5, #1
 800e806:	4621      	mov	r1, r4
 800e808:	4630      	mov	r0, r6
 800e80a:	f005 fbaf 	bl	8013f6c <put_memory>
 800e80e:	42af      	cmp	r7, r5
 800e810:	60a4      	str	r4, [r4, #8]
 800e812:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e816:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e81a:	d1f3      	bne.n	800e804 <rmw_uxrce_init_subscription_memory+0x20>
 800e81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop

0800e824 <rmw_uxrce_init_node_memory>:
 800e824:	b1e2      	cbz	r2, 800e860 <rmw_uxrce_init_node_memory+0x3c>
 800e826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e82a:	7b05      	ldrb	r5, [r0, #12]
 800e82c:	4606      	mov	r6, r0
 800e82e:	b9ad      	cbnz	r5, 800e85c <rmw_uxrce_init_node_memory+0x38>
 800e830:	23a4      	movs	r3, #164	; 0xa4
 800e832:	4617      	mov	r7, r2
 800e834:	460c      	mov	r4, r1
 800e836:	46a8      	mov	r8, r5
 800e838:	6083      	str	r3, [r0, #8]
 800e83a:	f240 1301 	movw	r3, #257	; 0x101
 800e83e:	e9c0 5500 	strd	r5, r5, [r0]
 800e842:	8183      	strh	r3, [r0, #12]
 800e844:	3501      	adds	r5, #1
 800e846:	4621      	mov	r1, r4
 800e848:	4630      	mov	r0, r6
 800e84a:	f005 fb8f 	bl	8013f6c <put_memory>
 800e84e:	42af      	cmp	r7, r5
 800e850:	60a4      	str	r4, [r4, #8]
 800e852:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800e856:	f804 8c98 	strb.w	r8, [r4, #-152]
 800e85a:	d1f3      	bne.n	800e844 <rmw_uxrce_init_node_memory+0x20>
 800e85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop

0800e864 <rmw_uxrce_init_session_memory>:
 800e864:	b1ea      	cbz	r2, 800e8a2 <rmw_uxrce_init_session_memory+0x3e>
 800e866:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e86a:	7b05      	ldrb	r5, [r0, #12]
 800e86c:	4606      	mov	r6, r0
 800e86e:	b9b5      	cbnz	r5, 800e89e <rmw_uxrce_init_session_memory+0x3a>
 800e870:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800e874:	f240 1301 	movw	r3, #257	; 0x101
 800e878:	4617      	mov	r7, r2
 800e87a:	460c      	mov	r4, r1
 800e87c:	46a9      	mov	r9, r5
 800e87e:	f8c0 8008 	str.w	r8, [r0, #8]
 800e882:	8183      	strh	r3, [r0, #12]
 800e884:	e9c0 5500 	strd	r5, r5, [r0]
 800e888:	3501      	adds	r5, #1
 800e88a:	4621      	mov	r1, r4
 800e88c:	4630      	mov	r0, r6
 800e88e:	f005 fb6d 	bl	8013f6c <put_memory>
 800e892:	42af      	cmp	r7, r5
 800e894:	60a4      	str	r4, [r4, #8]
 800e896:	f884 900c 	strb.w	r9, [r4, #12]
 800e89a:	4444      	add	r4, r8
 800e89c:	d1f4      	bne.n	800e888 <rmw_uxrce_init_session_memory+0x24>
 800e89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8a2:	4770      	bx	lr

0800e8a4 <rmw_uxrce_init_topic_memory>:
 800e8a4:	b1e2      	cbz	r2, 800e8e0 <rmw_uxrce_init_topic_memory+0x3c>
 800e8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8aa:	7b05      	ldrb	r5, [r0, #12]
 800e8ac:	4606      	mov	r6, r0
 800e8ae:	b9ad      	cbnz	r5, 800e8dc <rmw_uxrce_init_topic_memory+0x38>
 800e8b0:	231c      	movs	r3, #28
 800e8b2:	4617      	mov	r7, r2
 800e8b4:	460c      	mov	r4, r1
 800e8b6:	46a8      	mov	r8, r5
 800e8b8:	6083      	str	r3, [r0, #8]
 800e8ba:	f240 1301 	movw	r3, #257	; 0x101
 800e8be:	e9c0 5500 	strd	r5, r5, [r0]
 800e8c2:	8183      	strh	r3, [r0, #12]
 800e8c4:	3501      	adds	r5, #1
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f005 fb4f 	bl	8013f6c <put_memory>
 800e8ce:	42af      	cmp	r7, r5
 800e8d0:	60a4      	str	r4, [r4, #8]
 800e8d2:	f104 041c 	add.w	r4, r4, #28
 800e8d6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e8da:	d1f3      	bne.n	800e8c4 <rmw_uxrce_init_topic_memory+0x20>
 800e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop

0800e8e4 <rmw_uxrce_init_static_input_buffer_memory>:
 800e8e4:	b1ea      	cbz	r2, 800e922 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ea:	7b05      	ldrb	r5, [r0, #12]
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	b9b5      	cbnz	r5, 800e91e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e8f0:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e8f4:	4617      	mov	r7, r2
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	46a8      	mov	r8, r5
 800e8fa:	6083      	str	r3, [r0, #8]
 800e8fc:	f240 1301 	movw	r3, #257	; 0x101
 800e900:	e9c0 5500 	strd	r5, r5, [r0]
 800e904:	8183      	strh	r3, [r0, #12]
 800e906:	3501      	adds	r5, #1
 800e908:	4621      	mov	r1, r4
 800e90a:	4630      	mov	r0, r6
 800e90c:	f005 fb2e 	bl	8013f6c <put_memory>
 800e910:	42af      	cmp	r7, r5
 800e912:	60a4      	str	r4, [r4, #8]
 800e914:	f884 800c 	strb.w	r8, [r4, #12]
 800e918:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e91c:	d1f3      	bne.n	800e906 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e922:	4770      	bx	lr

0800e924 <rmw_uxrce_init_init_options_impl_memory>:
 800e924:	b1e2      	cbz	r2, 800e960 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92a:	7b05      	ldrb	r5, [r0, #12]
 800e92c:	4606      	mov	r6, r0
 800e92e:	b9ad      	cbnz	r5, 800e95c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e930:	232c      	movs	r3, #44	; 0x2c
 800e932:	4617      	mov	r7, r2
 800e934:	460c      	mov	r4, r1
 800e936:	46a8      	mov	r8, r5
 800e938:	6083      	str	r3, [r0, #8]
 800e93a:	f240 1301 	movw	r3, #257	; 0x101
 800e93e:	e9c0 5500 	strd	r5, r5, [r0]
 800e942:	8183      	strh	r3, [r0, #12]
 800e944:	3501      	adds	r5, #1
 800e946:	4621      	mov	r1, r4
 800e948:	4630      	mov	r0, r6
 800e94a:	f005 fb0f 	bl	8013f6c <put_memory>
 800e94e:	42af      	cmp	r7, r5
 800e950:	60a4      	str	r4, [r4, #8]
 800e952:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800e956:	f804 8c20 	strb.w	r8, [r4, #-32]
 800e95a:	d1f3      	bne.n	800e944 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop

0800e964 <rmw_uxrce_init_wait_set_memory>:
 800e964:	b1e2      	cbz	r2, 800e9a0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e96a:	7b05      	ldrb	r5, [r0, #12]
 800e96c:	4606      	mov	r6, r0
 800e96e:	b9ad      	cbnz	r5, 800e99c <rmw_uxrce_init_wait_set_memory+0x38>
 800e970:	231c      	movs	r3, #28
 800e972:	4617      	mov	r7, r2
 800e974:	460c      	mov	r4, r1
 800e976:	46a8      	mov	r8, r5
 800e978:	6083      	str	r3, [r0, #8]
 800e97a:	f240 1301 	movw	r3, #257	; 0x101
 800e97e:	e9c0 5500 	strd	r5, r5, [r0]
 800e982:	8183      	strh	r3, [r0, #12]
 800e984:	3501      	adds	r5, #1
 800e986:	4621      	mov	r1, r4
 800e988:	4630      	mov	r0, r6
 800e98a:	f005 faef 	bl	8013f6c <put_memory>
 800e98e:	42af      	cmp	r7, r5
 800e990:	60a4      	str	r4, [r4, #8]
 800e992:	f104 041c 	add.w	r4, r4, #28
 800e996:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e99a:	d1f3      	bne.n	800e984 <rmw_uxrce_init_wait_set_memory+0x20>
 800e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop

0800e9a4 <rmw_uxrce_init_guard_condition_memory>:
 800e9a4:	b1e2      	cbz	r2, 800e9e0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9aa:	7b05      	ldrb	r5, [r0, #12]
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	b9ad      	cbnz	r5, 800e9dc <rmw_uxrce_init_guard_condition_memory+0x38>
 800e9b0:	2320      	movs	r3, #32
 800e9b2:	4617      	mov	r7, r2
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	46a8      	mov	r8, r5
 800e9b8:	6083      	str	r3, [r0, #8]
 800e9ba:	f240 1301 	movw	r3, #257	; 0x101
 800e9be:	e9c0 5500 	strd	r5, r5, [r0]
 800e9c2:	8183      	strh	r3, [r0, #12]
 800e9c4:	3501      	adds	r5, #1
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f005 facf 	bl	8013f6c <put_memory>
 800e9ce:	42af      	cmp	r7, r5
 800e9d0:	60a4      	str	r4, [r4, #8]
 800e9d2:	f104 0420 	add.w	r4, r4, #32
 800e9d6:	f804 8c14 	strb.w	r8, [r4, #-20]
 800e9da:	d1f3      	bne.n	800e9c4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop

0800e9e4 <rmw_uxrce_fini_session_memory>:
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	4801      	ldr	r0, [pc, #4]	; (800e9ec <rmw_uxrce_fini_session_memory+0x8>)
 800e9e8:	f005 bac0 	b.w	8013f6c <put_memory>
 800e9ec:	2400e134 	.word	0x2400e134

0800e9f0 <rmw_uxrce_fini_node_memory>:
 800e9f0:	b538      	push	{r3, r4, r5, lr}
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	6800      	ldr	r0, [r0, #0]
 800e9f6:	b128      	cbz	r0, 800ea04 <rmw_uxrce_fini_node_memory+0x14>
 800e9f8:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <rmw_uxrce_fini_node_memory+0x28>)
 800e9fa:	6819      	ldr	r1, [r3, #0]
 800e9fc:	f7f1 fc70 	bl	80002e0 <strcmp>
 800ea00:	b940      	cbnz	r0, 800ea14 <rmw_uxrce_fini_node_memory+0x24>
 800ea02:	6020      	str	r0, [r4, #0]
 800ea04:	6861      	ldr	r1, [r4, #4]
 800ea06:	b129      	cbz	r1, 800ea14 <rmw_uxrce_fini_node_memory+0x24>
 800ea08:	2500      	movs	r5, #0
 800ea0a:	4804      	ldr	r0, [pc, #16]	; (800ea1c <rmw_uxrce_fini_node_memory+0x2c>)
 800ea0c:	610d      	str	r5, [r1, #16]
 800ea0e:	f005 faad 	bl	8013f6c <put_memory>
 800ea12:	6065      	str	r5, [r4, #4]
 800ea14:	bd38      	pop	{r3, r4, r5, pc}
 800ea16:	bf00      	nop
 800ea18:	08018bac 	.word	0x08018bac
 800ea1c:	2400e104 	.word	0x2400e104

0800ea20 <rmw_uxrce_fini_publisher_memory>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4604      	mov	r4, r0
 800ea24:	6800      	ldr	r0, [r0, #0]
 800ea26:	b128      	cbz	r0, 800ea34 <rmw_uxrce_fini_publisher_memory+0x14>
 800ea28:	4b06      	ldr	r3, [pc, #24]	; (800ea44 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ea2a:	6819      	ldr	r1, [r3, #0]
 800ea2c:	f7f1 fc58 	bl	80002e0 <strcmp>
 800ea30:	b938      	cbnz	r0, 800ea42 <rmw_uxrce_fini_publisher_memory+0x22>
 800ea32:	6020      	str	r0, [r4, #0]
 800ea34:	6861      	ldr	r1, [r4, #4]
 800ea36:	b121      	cbz	r1, 800ea42 <rmw_uxrce_fini_publisher_memory+0x22>
 800ea38:	4803      	ldr	r0, [pc, #12]	; (800ea48 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ea3a:	f005 fa97 	bl	8013f6c <put_memory>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	6063      	str	r3, [r4, #4]
 800ea42:	bd10      	pop	{r4, pc}
 800ea44:	08018bac 	.word	0x08018bac
 800ea48:	2400e114 	.word	0x2400e114

0800ea4c <rmw_uxrce_fini_subscription_memory>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	4604      	mov	r4, r0
 800ea50:	6800      	ldr	r0, [r0, #0]
 800ea52:	b128      	cbz	r0, 800ea60 <rmw_uxrce_fini_subscription_memory+0x14>
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ea56:	6819      	ldr	r1, [r3, #0]
 800ea58:	f7f1 fc42 	bl	80002e0 <strcmp>
 800ea5c:	b938      	cbnz	r0, 800ea6e <rmw_uxrce_fini_subscription_memory+0x22>
 800ea5e:	6020      	str	r0, [r4, #0]
 800ea60:	6861      	ldr	r1, [r4, #4]
 800ea62:	b121      	cbz	r1, 800ea6e <rmw_uxrce_fini_subscription_memory+0x22>
 800ea64:	4803      	ldr	r0, [pc, #12]	; (800ea74 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ea66:	f005 fa81 	bl	8013f6c <put_memory>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6063      	str	r3, [r4, #4]
 800ea6e:	bd10      	pop	{r4, pc}
 800ea70:	08018bac 	.word	0x08018bac
 800ea74:	2400e154 	.word	0x2400e154

0800ea78 <rmw_uxrce_fini_service_memory>:
 800ea78:	b510      	push	{r4, lr}
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	6800      	ldr	r0, [r0, #0]
 800ea7e:	b128      	cbz	r0, 800ea8c <rmw_uxrce_fini_service_memory+0x14>
 800ea80:	4b06      	ldr	r3, [pc, #24]	; (800ea9c <rmw_uxrce_fini_service_memory+0x24>)
 800ea82:	6819      	ldr	r1, [r3, #0]
 800ea84:	f7f1 fc2c 	bl	80002e0 <strcmp>
 800ea88:	b938      	cbnz	r0, 800ea9a <rmw_uxrce_fini_service_memory+0x22>
 800ea8a:	6020      	str	r0, [r4, #0]
 800ea8c:	6861      	ldr	r1, [r4, #4]
 800ea8e:	b121      	cbz	r1, 800ea9a <rmw_uxrce_fini_service_memory+0x22>
 800ea90:	4803      	ldr	r0, [pc, #12]	; (800eaa0 <rmw_uxrce_fini_service_memory+0x28>)
 800ea92:	f005 fa6b 	bl	8013f6c <put_memory>
 800ea96:	2300      	movs	r3, #0
 800ea98:	6063      	str	r3, [r4, #4]
 800ea9a:	bd10      	pop	{r4, pc}
 800ea9c:	08018bac 	.word	0x08018bac
 800eaa0:	2400e124 	.word	0x2400e124

0800eaa4 <rmw_uxrce_fini_client_memory>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	6800      	ldr	r0, [r0, #0]
 800eaaa:	b128      	cbz	r0, 800eab8 <rmw_uxrce_fini_client_memory+0x14>
 800eaac:	4b06      	ldr	r3, [pc, #24]	; (800eac8 <rmw_uxrce_fini_client_memory+0x24>)
 800eaae:	6819      	ldr	r1, [r3, #0]
 800eab0:	f7f1 fc16 	bl	80002e0 <strcmp>
 800eab4:	b938      	cbnz	r0, 800eac6 <rmw_uxrce_fini_client_memory+0x22>
 800eab6:	6020      	str	r0, [r4, #0]
 800eab8:	6861      	ldr	r1, [r4, #4]
 800eaba:	b121      	cbz	r1, 800eac6 <rmw_uxrce_fini_client_memory+0x22>
 800eabc:	4803      	ldr	r0, [pc, #12]	; (800eacc <rmw_uxrce_fini_client_memory+0x28>)
 800eabe:	f005 fa55 	bl	8013f6c <put_memory>
 800eac2:	2300      	movs	r3, #0
 800eac4:	6063      	str	r3, [r4, #4]
 800eac6:	bd10      	pop	{r4, pc}
 800eac8:	08018bac 	.word	0x08018bac
 800eacc:	24009838 	.word	0x24009838

0800ead0 <rmw_uxrce_fini_topic_memory>:
 800ead0:	b510      	push	{r4, lr}
 800ead2:	4604      	mov	r4, r0
 800ead4:	4803      	ldr	r0, [pc, #12]	; (800eae4 <rmw_uxrce_fini_topic_memory+0x14>)
 800ead6:	4621      	mov	r1, r4
 800ead8:	f005 fa48 	bl	8013f6c <put_memory>
 800eadc:	2300      	movs	r3, #0
 800eade:	61a3      	str	r3, [r4, #24]
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	bf00      	nop
 800eae4:	2400e164 	.word	0x2400e164

0800eae8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800eae8:	b082      	sub	sp, #8
 800eaea:	492b      	ldr	r1, [pc, #172]	; (800eb98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800eaec:	b530      	push	{r4, r5, lr}
 800eaee:	680d      	ldr	r5, [r1, #0]
 800eaf0:	ac03      	add	r4, sp, #12
 800eaf2:	e884 000c 	stmia.w	r4, {r2, r3}
 800eaf6:	461c      	mov	r4, r3
 800eaf8:	2d00      	cmp	r5, #0
 800eafa:	d04b      	beq.n	800eb94 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800eafc:	462b      	mov	r3, r5
 800eafe:	2100      	movs	r1, #0
 800eb00:	689a      	ldr	r2, [r3, #8]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800eb08:	4290      	cmp	r0, r2
 800eb0a:	bf08      	it	eq
 800eb0c:	3101      	addeq	r1, #1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1f6      	bne.n	800eb00 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800eb12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d029      	beq.n	800eb6e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800eb1a:	d820      	bhi.n	800eb5e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800eb1c:	428c      	cmp	r4, r1
 800eb1e:	d828      	bhi.n	800eb72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800eb20:	fab4 f284 	clz	r2, r4
 800eb24:	0952      	lsrs	r2, r2, #5
 800eb26:	b324      	cbz	r4, 800eb72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800eb28:	b1dd      	cbz	r5, 800eb62 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800eb2a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800eb2e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800eb32:	e001      	b.n	800eb38 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800eb34:	686d      	ldr	r5, [r5, #4]
 800eb36:	b1ad      	cbz	r5, 800eb64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800eb38:	68ab      	ldr	r3, [r5, #8]
 800eb3a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800eb3e:	4288      	cmp	r0, r1
 800eb40:	d1f8      	bne.n	800eb34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800eb42:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800eb46:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800eb4a:	4561      	cmp	r1, ip
 800eb4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800eb50:	eb73 0e04 	sbcs.w	lr, r3, r4
 800eb54:	daee      	bge.n	800eb34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800eb56:	468c      	mov	ip, r1
 800eb58:	461c      	mov	r4, r3
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	e7ea      	b.n	800eb34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d0dc      	beq.n	800eb1c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800eb62:	2200      	movs	r2, #0
 800eb64:	4610      	mov	r0, r2
 800eb66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb6a:	b002      	add	sp, #8
 800eb6c:	4770      	bx	lr
 800eb6e:	428c      	cmp	r4, r1
 800eb70:	d905      	bls.n	800eb7e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800eb72:	4809      	ldr	r0, [pc, #36]	; (800eb98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800eb74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb78:	b002      	add	sp, #8
 800eb7a:	f005 b9e7 	b.w	8013f4c <get_memory>
 800eb7e:	fab4 f284 	clz	r2, r4
 800eb82:	0952      	lsrs	r2, r2, #5
 800eb84:	2c00      	cmp	r4, #0
 800eb86:	d1ed      	bne.n	800eb64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800eb88:	4803      	ldr	r0, [pc, #12]	; (800eb98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800eb8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb8e:	b002      	add	sp, #8
 800eb90:	f005 b9dc 	b.w	8013f4c <get_memory>
 800eb94:	4629      	mov	r1, r5
 800eb96:	e7bc      	b.n	800eb12 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800eb98:	2400e144 	.word	0x2400e144

0800eb9c <run_xrce_session>:
 800eb9c:	b510      	push	{r4, lr}
 800eb9e:	788c      	ldrb	r4, [r1, #2]
 800eba0:	b086      	sub	sp, #24
 800eba2:	2c01      	cmp	r4, #1
 800eba4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800eba8:	d00c      	beq.n	800ebc4 <run_xrce_session+0x28>
 800ebaa:	2401      	movs	r4, #1
 800ebac:	4619      	mov	r1, r3
 800ebae:	f10d 020e 	add.w	r2, sp, #14
 800ebb2:	f10d 0317 	add.w	r3, sp, #23
 800ebb6:	9400      	str	r4, [sp, #0]
 800ebb8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ebbc:	f001 ff76 	bl	8010aac <uxr_run_session_until_all_status>
 800ebc0:	b006      	add	sp, #24
 800ebc2:	bd10      	pop	{r4, pc}
 800ebc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ebc8:	f001 fbcc 	bl	8010364 <uxr_flash_output_streams>
 800ebcc:	4620      	mov	r0, r4
 800ebce:	b006      	add	sp, #24
 800ebd0:	bd10      	pop	{r4, pc}
 800ebd2:	bf00      	nop

0800ebd4 <convert_qos_profile>:
 800ebd4:	7a4a      	ldrb	r2, [r1, #9]
 800ebd6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ebda:	2a02      	cmp	r2, #2
 800ebdc:	bf18      	it	ne
 800ebde:	2200      	movne	r2, #0
 800ebe0:	7002      	strb	r2, [r0, #0]
 800ebe2:	f1ac 0202 	sub.w	r2, ip, #2
 800ebe6:	fab2 f282 	clz	r2, r2
 800ebea:	0952      	lsrs	r2, r2, #5
 800ebec:	7042      	strb	r2, [r0, #1]
 800ebee:	780a      	ldrb	r2, [r1, #0]
 800ebf0:	8889      	ldrh	r1, [r1, #4]
 800ebf2:	f1a2 0202 	sub.w	r2, r2, #2
 800ebf6:	8081      	strh	r1, [r0, #4]
 800ebf8:	fab2 f282 	clz	r2, r2
 800ebfc:	0952      	lsrs	r2, r2, #5
 800ebfe:	7082      	strb	r2, [r0, #2]
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop

0800ec04 <generate_type_name>:
 800ec04:	2300      	movs	r3, #0
 800ec06:	b530      	push	{r4, r5, lr}
 800ec08:	700b      	strb	r3, [r1, #0]
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	6803      	ldr	r3, [r0, #0]
 800ec0e:	4614      	mov	r4, r2
 800ec10:	b1bb      	cbz	r3, 800ec42 <generate_type_name+0x3e>
 800ec12:	4a0e      	ldr	r2, [pc, #56]	; (800ec4c <generate_type_name+0x48>)
 800ec14:	4615      	mov	r5, r2
 800ec16:	9500      	str	r5, [sp, #0]
 800ec18:	9203      	str	r2, [sp, #12]
 800ec1a:	4d0d      	ldr	r5, [pc, #52]	; (800ec50 <generate_type_name+0x4c>)
 800ec1c:	6842      	ldr	r2, [r0, #4]
 800ec1e:	4608      	mov	r0, r1
 800ec20:	490c      	ldr	r1, [pc, #48]	; (800ec54 <generate_type_name+0x50>)
 800ec22:	9204      	str	r2, [sp, #16]
 800ec24:	9105      	str	r1, [sp, #20]
 800ec26:	9102      	str	r1, [sp, #8]
 800ec28:	4621      	mov	r1, r4
 800ec2a:	4a0b      	ldr	r2, [pc, #44]	; (800ec58 <generate_type_name+0x54>)
 800ec2c:	9501      	str	r5, [sp, #4]
 800ec2e:	f008 fb53 	bl	80172d8 <sniprintf>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	bfa8      	it	ge
 800ec36:	4284      	cmpge	r4, r0
 800ec38:	bfcc      	ite	gt
 800ec3a:	2001      	movgt	r0, #1
 800ec3c:	2000      	movle	r0, #0
 800ec3e:	b007      	add	sp, #28
 800ec40:	bd30      	pop	{r4, r5, pc}
 800ec42:	4b06      	ldr	r3, [pc, #24]	; (800ec5c <generate_type_name+0x58>)
 800ec44:	4a01      	ldr	r2, [pc, #4]	; (800ec4c <generate_type_name+0x48>)
 800ec46:	461d      	mov	r5, r3
 800ec48:	e7e5      	b.n	800ec16 <generate_type_name+0x12>
 800ec4a:	bf00      	nop
 800ec4c:	080185b4 	.word	0x080185b4
 800ec50:	080185cc 	.word	0x080185cc
 800ec54:	080185c8 	.word	0x080185c8
 800ec58:	080185b8 	.word	0x080185b8
 800ec5c:	08018984 	.word	0x08018984

0800ec60 <generate_topic_name>:
 800ec60:	b530      	push	{r4, r5, lr}
 800ec62:	4614      	mov	r4, r2
 800ec64:	b083      	sub	sp, #12
 800ec66:	4605      	mov	r5, r0
 800ec68:	4b07      	ldr	r3, [pc, #28]	; (800ec88 <generate_topic_name+0x28>)
 800ec6a:	4a08      	ldr	r2, [pc, #32]	; (800ec8c <generate_topic_name+0x2c>)
 800ec6c:	4608      	mov	r0, r1
 800ec6e:	9500      	str	r5, [sp, #0]
 800ec70:	4621      	mov	r1, r4
 800ec72:	f008 fb31 	bl	80172d8 <sniprintf>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	bfa8      	it	ge
 800ec7a:	4284      	cmpge	r4, r0
 800ec7c:	bfcc      	ite	gt
 800ec7e:	2001      	movgt	r0, #1
 800ec80:	2000      	movle	r0, #0
 800ec82:	b003      	add	sp, #12
 800ec84:	bd30      	pop	{r4, r5, pc}
 800ec86:	bf00      	nop
 800ec88:	080185d8 	.word	0x080185d8
 800ec8c:	080185d0 	.word	0x080185d0

0800ec90 <is_uxrce_rmw_identifier_valid>:
 800ec90:	b510      	push	{r4, lr}
 800ec92:	4604      	mov	r4, r0
 800ec94:	b140      	cbz	r0, 800eca8 <is_uxrce_rmw_identifier_valid+0x18>
 800ec96:	f005 f97d 	bl	8013f94 <rmw_get_implementation_identifier>
 800ec9a:	4601      	mov	r1, r0
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	f7f1 fb1f 	bl	80002e0 <strcmp>
 800eca2:	fab0 f080 	clz	r0, r0
 800eca6:	0940      	lsrs	r0, r0, #5
 800eca8:	bd10      	pop	{r4, pc}
 800ecaa:	bf00      	nop

0800ecac <get_message_typesupport_handle>:
 800ecac:	6883      	ldr	r3, [r0, #8]
 800ecae:	4718      	bx	r3

0800ecb0 <get_message_typesupport_handle_function>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	6800      	ldr	r0, [r0, #0]
 800ecb6:	f7f1 fb13 	bl	80002e0 <strcmp>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	bf0c      	ite	eq
 800ecbe:	4620      	moveq	r0, r4
 800ecc0:	2000      	movne	r0, #0
 800ecc2:	bd10      	pop	{r4, pc}

0800ecc4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ecc4:	4b04      	ldr	r3, [pc, #16]	; (800ecd8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	b10a      	cbz	r2, 800ecce <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ecca:	4803      	ldr	r0, [pc, #12]	; (800ecd8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800eccc:	4770      	bx	lr
 800ecce:	4a03      	ldr	r2, [pc, #12]	; (800ecdc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ecd0:	4801      	ldr	r0, [pc, #4]	; (800ecd8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ecd2:	6812      	ldr	r2, [r2, #0]
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	4770      	bx	lr
 800ecd8:	24000034 	.word	0x24000034
 800ecdc:	240000b0 	.word	0x240000b0

0800ece0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ece0:	4a02      	ldr	r2, [pc, #8]	; (800ecec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800ece2:	4b03      	ldr	r3, [pc, #12]	; (800ecf0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800ece4:	6812      	ldr	r2, [r2, #0]
 800ece6:	601a      	str	r2, [r3, #0]
 800ece8:	4770      	bx	lr
 800ecea:	bf00      	nop
 800ecec:	240000b0 	.word	0x240000b0
 800ecf0:	24000034 	.word	0x24000034

0800ecf4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800ecf4:	f005 be3c 	b.w	8014970 <std_msgs__msg__Int32__init>

0800ecf8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800ecf8:	f005 be3e 	b.w	8014978 <std_msgs__msg__Int32__fini>

0800ecfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ecfc:	4b04      	ldr	r3, [pc, #16]	; (800ed10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	b10a      	cbz	r2, 800ed06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ed02:	4803      	ldr	r0, [pc, #12]	; (800ed10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ed04:	4770      	bx	lr
 800ed06:	4a03      	ldr	r2, [pc, #12]	; (800ed14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ed08:	4801      	ldr	r0, [pc, #4]	; (800ed10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ed0a:	6812      	ldr	r2, [r2, #0]
 800ed0c:	601a      	str	r2, [r3, #0]
 800ed0e:	4770      	bx	lr
 800ed10:	2400007c 	.word	0x2400007c
 800ed14:	240000b4 	.word	0x240000b4

0800ed18 <_Int32__max_serialized_size>:
 800ed18:	2104      	movs	r1, #4
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	b508      	push	{r3, lr}
 800ed1e:	f001 f807 	bl	800fd30 <ucdr_alignment>
 800ed22:	3004      	adds	r0, #4
 800ed24:	bd08      	pop	{r3, pc}
 800ed26:	bf00      	nop

0800ed28 <_Int32__cdr_deserialize>:
 800ed28:	b109      	cbz	r1, 800ed2e <_Int32__cdr_deserialize+0x6>
 800ed2a:	f000 bf19 	b.w	800fb60 <ucdr_deserialize_int32_t>
 800ed2e:	4608      	mov	r0, r1
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop

0800ed34 <get_serialized_size_std_msgs__msg__Int32>:
 800ed34:	b138      	cbz	r0, 800ed46 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800ed36:	b508      	push	{r3, lr}
 800ed38:	460b      	mov	r3, r1
 800ed3a:	2104      	movs	r1, #4
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 fff7 	bl	800fd30 <ucdr_alignment>
 800ed42:	3004      	adds	r0, #4
 800ed44:	bd08      	pop	{r3, pc}
 800ed46:	4770      	bx	lr

0800ed48 <_Int32__cdr_serialize>:
 800ed48:	460a      	mov	r2, r1
 800ed4a:	b118      	cbz	r0, 800ed54 <_Int32__cdr_serialize+0xc>
 800ed4c:	6801      	ldr	r1, [r0, #0]
 800ed4e:	4610      	mov	r0, r2
 800ed50:	f000 be6e 	b.w	800fa30 <ucdr_serialize_int32_t>
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop

0800ed58 <_Int32__get_serialized_size>:
 800ed58:	b130      	cbz	r0, 800ed68 <_Int32__get_serialized_size+0x10>
 800ed5a:	2104      	movs	r1, #4
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	b508      	push	{r3, lr}
 800ed60:	f000 ffe6 	bl	800fd30 <ucdr_alignment>
 800ed64:	3004      	adds	r0, #4
 800ed66:	bd08      	pop	{r3, pc}
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop

0800ed6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ed6c:	4800      	ldr	r0, [pc, #0]	; (800ed70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800ed6e:	4770      	bx	lr
 800ed70:	24000088 	.word	0x24000088

0800ed74 <ucdr_serialize_bool>:
 800ed74:	b538      	push	{r3, r4, r5, lr}
 800ed76:	460d      	mov	r5, r1
 800ed78:	2101      	movs	r1, #1
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	f000 ff8c 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800ed80:	b148      	cbz	r0, 800ed96 <ucdr_serialize_bool+0x22>
 800ed82:	68a3      	ldr	r3, [r4, #8]
 800ed84:	2101      	movs	r1, #1
 800ed86:	701d      	strb	r5, [r3, #0]
 800ed88:	68a2      	ldr	r2, [r4, #8]
 800ed8a:	6923      	ldr	r3, [r4, #16]
 800ed8c:	440a      	add	r2, r1
 800ed8e:	7561      	strb	r1, [r4, #21]
 800ed90:	440b      	add	r3, r1
 800ed92:	60a2      	str	r2, [r4, #8]
 800ed94:	6123      	str	r3, [r4, #16]
 800ed96:	7da0      	ldrb	r0, [r4, #22]
 800ed98:	f080 0001 	eor.w	r0, r0, #1
 800ed9c:	bd38      	pop	{r3, r4, r5, pc}
 800ed9e:	bf00      	nop

0800eda0 <ucdr_deserialize_bool>:
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	460d      	mov	r5, r1
 800eda4:	2101      	movs	r1, #1
 800eda6:	4604      	mov	r4, r0
 800eda8:	f000 ff76 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800edac:	b160      	cbz	r0, 800edc8 <ucdr_deserialize_bool+0x28>
 800edae:	68a2      	ldr	r2, [r4, #8]
 800edb0:	2101      	movs	r1, #1
 800edb2:	6923      	ldr	r3, [r4, #16]
 800edb4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800edb8:	440b      	add	r3, r1
 800edba:	3800      	subs	r0, #0
 800edbc:	bf18      	it	ne
 800edbe:	2001      	movne	r0, #1
 800edc0:	7028      	strb	r0, [r5, #0]
 800edc2:	60a2      	str	r2, [r4, #8]
 800edc4:	6123      	str	r3, [r4, #16]
 800edc6:	7561      	strb	r1, [r4, #21]
 800edc8:	7da0      	ldrb	r0, [r4, #22]
 800edca:	f080 0001 	eor.w	r0, r0, #1
 800edce:	bd38      	pop	{r3, r4, r5, pc}

0800edd0 <ucdr_serialize_uint8_t>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	460d      	mov	r5, r1
 800edd4:	2101      	movs	r1, #1
 800edd6:	4604      	mov	r4, r0
 800edd8:	f000 ff5e 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800eddc:	b148      	cbz	r0, 800edf2 <ucdr_serialize_uint8_t+0x22>
 800edde:	68a3      	ldr	r3, [r4, #8]
 800ede0:	2101      	movs	r1, #1
 800ede2:	701d      	strb	r5, [r3, #0]
 800ede4:	68a2      	ldr	r2, [r4, #8]
 800ede6:	6923      	ldr	r3, [r4, #16]
 800ede8:	440a      	add	r2, r1
 800edea:	7561      	strb	r1, [r4, #21]
 800edec:	440b      	add	r3, r1
 800edee:	60a2      	str	r2, [r4, #8]
 800edf0:	6123      	str	r3, [r4, #16]
 800edf2:	7da0      	ldrb	r0, [r4, #22]
 800edf4:	f080 0001 	eor.w	r0, r0, #1
 800edf8:	bd38      	pop	{r3, r4, r5, pc}
 800edfa:	bf00      	nop

0800edfc <ucdr_deserialize_uint8_t>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	460d      	mov	r5, r1
 800ee00:	2101      	movs	r1, #1
 800ee02:	4604      	mov	r4, r0
 800ee04:	f000 ff48 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800ee08:	b150      	cbz	r0, 800ee20 <ucdr_deserialize_uint8_t+0x24>
 800ee0a:	68a3      	ldr	r3, [r4, #8]
 800ee0c:	2101      	movs	r1, #1
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	702b      	strb	r3, [r5, #0]
 800ee12:	68a2      	ldr	r2, [r4, #8]
 800ee14:	6923      	ldr	r3, [r4, #16]
 800ee16:	440a      	add	r2, r1
 800ee18:	7561      	strb	r1, [r4, #21]
 800ee1a:	440b      	add	r3, r1
 800ee1c:	60a2      	str	r2, [r4, #8]
 800ee1e:	6123      	str	r3, [r4, #16]
 800ee20:	7da0      	ldrb	r0, [r4, #22]
 800ee22:	f080 0001 	eor.w	r0, r0, #1
 800ee26:	bd38      	pop	{r3, r4, r5, pc}

0800ee28 <ucdr_serialize_uint16_t>:
 800ee28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	b082      	sub	sp, #8
 800ee30:	4604      	mov	r4, r0
 800ee32:	2102      	movs	r1, #2
 800ee34:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ee38:	f000 ff82 	bl	800fd40 <ucdr_buffer_alignment>
 800ee3c:	4601      	mov	r1, r0
 800ee3e:	4620      	mov	r0, r4
 800ee40:	7d67      	ldrb	r7, [r4, #21]
 800ee42:	f000 ffc5 	bl	800fdd0 <ucdr_advance_buffer>
 800ee46:	2102      	movs	r1, #2
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 ff19 	bl	800fc80 <ucdr_check_buffer_available_for>
 800ee4e:	bb78      	cbnz	r0, 800eeb0 <ucdr_serialize_uint16_t+0x88>
 800ee50:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ee54:	42ab      	cmp	r3, r5
 800ee56:	d926      	bls.n	800eea6 <ucdr_serialize_uint16_t+0x7e>
 800ee58:	1b5e      	subs	r6, r3, r5
 800ee5a:	60a3      	str	r3, [r4, #8]
 800ee5c:	6923      	ldr	r3, [r4, #16]
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f1c6 0802 	rsb	r8, r6, #2
 800ee64:	4433      	add	r3, r6
 800ee66:	4641      	mov	r1, r8
 800ee68:	6123      	str	r3, [r4, #16]
 800ee6a:	f000 ff15 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d03b      	beq.n	800eeea <ucdr_serialize_uint16_t+0xc2>
 800ee72:	7d23      	ldrb	r3, [r4, #20]
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	d04a      	beq.n	800ef0e <ucdr_serialize_uint16_t+0xe6>
 800ee78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee7c:	702b      	strb	r3, [r5, #0]
 800ee7e:	2e00      	cmp	r6, #0
 800ee80:	d040      	beq.n	800ef04 <ucdr_serialize_uint16_t+0xdc>
 800ee82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee86:	706b      	strb	r3, [r5, #1]
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	2102      	movs	r1, #2
 800ee8c:	68a2      	ldr	r2, [r4, #8]
 800ee8e:	3302      	adds	r3, #2
 800ee90:	7da0      	ldrb	r0, [r4, #22]
 800ee92:	4442      	add	r2, r8
 800ee94:	7561      	strb	r1, [r4, #21]
 800ee96:	1b9e      	subs	r6, r3, r6
 800ee98:	f080 0001 	eor.w	r0, r0, #1
 800ee9c:	60a2      	str	r2, [r4, #8]
 800ee9e:	6126      	str	r6, [r4, #16]
 800eea0:	b002      	add	sp, #8
 800eea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea6:	2102      	movs	r1, #2
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f000 fef5 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800eeae:	b190      	cbz	r0, 800eed6 <ucdr_serialize_uint16_t+0xae>
 800eeb0:	7d23      	ldrb	r3, [r4, #20]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	68a3      	ldr	r3, [r4, #8]
 800eeb6:	d014      	beq.n	800eee2 <ucdr_serialize_uint16_t+0xba>
 800eeb8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eebc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eec0:	7019      	strb	r1, [r3, #0]
 800eec2:	68a3      	ldr	r3, [r4, #8]
 800eec4:	705a      	strb	r2, [r3, #1]
 800eec6:	2102      	movs	r1, #2
 800eec8:	68a2      	ldr	r2, [r4, #8]
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	440a      	add	r2, r1
 800eece:	7561      	strb	r1, [r4, #21]
 800eed0:	440b      	add	r3, r1
 800eed2:	60a2      	str	r2, [r4, #8]
 800eed4:	6123      	str	r3, [r4, #16]
 800eed6:	7da0      	ldrb	r0, [r4, #22]
 800eed8:	f080 0001 	eor.w	r0, r0, #1
 800eedc:	b002      	add	sp, #8
 800eede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eee6:	801a      	strh	r2, [r3, #0]
 800eee8:	e7ed      	b.n	800eec6 <ucdr_serialize_uint16_t+0x9e>
 800eeea:	68a2      	ldr	r2, [r4, #8]
 800eeec:	6923      	ldr	r3, [r4, #16]
 800eeee:	7da0      	ldrb	r0, [r4, #22]
 800eef0:	1b92      	subs	r2, r2, r6
 800eef2:	1b9b      	subs	r3, r3, r6
 800eef4:	7567      	strb	r7, [r4, #21]
 800eef6:	f080 0001 	eor.w	r0, r0, #1
 800eefa:	60a2      	str	r2, [r4, #8]
 800eefc:	6123      	str	r3, [r4, #16]
 800eefe:	b002      	add	sp, #8
 800ef00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef04:	68a3      	ldr	r3, [r4, #8]
 800ef06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef0a:	701a      	strb	r2, [r3, #0]
 800ef0c:	e7bc      	b.n	800ee88 <ucdr_serialize_uint16_t+0x60>
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f10d 0506 	add.w	r5, sp, #6
 800ef14:	4632      	mov	r2, r6
 800ef16:	4629      	mov	r1, r5
 800ef18:	f008 fb57 	bl	80175ca <memcpy>
 800ef1c:	4642      	mov	r2, r8
 800ef1e:	19a9      	adds	r1, r5, r6
 800ef20:	68a0      	ldr	r0, [r4, #8]
 800ef22:	f008 fb52 	bl	80175ca <memcpy>
 800ef26:	e7af      	b.n	800ee88 <ucdr_serialize_uint16_t+0x60>

0800ef28 <ucdr_serialize_endian_uint16_t>:
 800ef28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	b083      	sub	sp, #12
 800ef30:	460d      	mov	r5, r1
 800ef32:	2102      	movs	r1, #2
 800ef34:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ef38:	f000 ff02 	bl	800fd40 <ucdr_buffer_alignment>
 800ef3c:	4601      	mov	r1, r0
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef44:	f000 ff44 	bl	800fdd0 <ucdr_advance_buffer>
 800ef48:	2102      	movs	r1, #2
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 fe98 	bl	800fc80 <ucdr_check_buffer_available_for>
 800ef50:	bb70      	cbnz	r0, 800efb0 <ucdr_serialize_endian_uint16_t+0x88>
 800ef52:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ef56:	42be      	cmp	r6, r7
 800ef58:	d925      	bls.n	800efa6 <ucdr_serialize_endian_uint16_t+0x7e>
 800ef5a:	6923      	ldr	r3, [r4, #16]
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	60a6      	str	r6, [r4, #8]
 800ef60:	1bf6      	subs	r6, r6, r7
 800ef62:	4433      	add	r3, r6
 800ef64:	f1c6 0902 	rsb	r9, r6, #2
 800ef68:	6123      	str	r3, [r4, #16]
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	f000 fe94 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d039      	beq.n	800efe8 <ucdr_serialize_endian_uint16_t+0xc0>
 800ef74:	2d01      	cmp	r5, #1
 800ef76:	d04a      	beq.n	800f00e <ucdr_serialize_endian_uint16_t+0xe6>
 800ef78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef7c:	703b      	strb	r3, [r7, #0]
 800ef7e:	2e00      	cmp	r6, #0
 800ef80:	d040      	beq.n	800f004 <ucdr_serialize_endian_uint16_t+0xdc>
 800ef82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef86:	707b      	strb	r3, [r7, #1]
 800ef88:	6923      	ldr	r3, [r4, #16]
 800ef8a:	2102      	movs	r1, #2
 800ef8c:	68a2      	ldr	r2, [r4, #8]
 800ef8e:	7da0      	ldrb	r0, [r4, #22]
 800ef90:	3302      	adds	r3, #2
 800ef92:	444a      	add	r2, r9
 800ef94:	7561      	strb	r1, [r4, #21]
 800ef96:	1b9b      	subs	r3, r3, r6
 800ef98:	f080 0001 	eor.w	r0, r0, #1
 800ef9c:	60a2      	str	r2, [r4, #8]
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	b003      	add	sp, #12
 800efa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efa6:	2102      	movs	r1, #2
 800efa8:	4620      	mov	r0, r4
 800efaa:	f000 fe75 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800efae:	b188      	cbz	r0, 800efd4 <ucdr_serialize_endian_uint16_t+0xac>
 800efb0:	2d01      	cmp	r5, #1
 800efb2:	68a3      	ldr	r3, [r4, #8]
 800efb4:	d014      	beq.n	800efe0 <ucdr_serialize_endian_uint16_t+0xb8>
 800efb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800efba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efbe:	7019      	strb	r1, [r3, #0]
 800efc0:	68a3      	ldr	r3, [r4, #8]
 800efc2:	705a      	strb	r2, [r3, #1]
 800efc4:	2102      	movs	r1, #2
 800efc6:	68a2      	ldr	r2, [r4, #8]
 800efc8:	6923      	ldr	r3, [r4, #16]
 800efca:	440a      	add	r2, r1
 800efcc:	7561      	strb	r1, [r4, #21]
 800efce:	440b      	add	r3, r1
 800efd0:	60a2      	str	r2, [r4, #8]
 800efd2:	6123      	str	r3, [r4, #16]
 800efd4:	7da0      	ldrb	r0, [r4, #22]
 800efd6:	f080 0001 	eor.w	r0, r0, #1
 800efda:	b003      	add	sp, #12
 800efdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efe0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800efe4:	801a      	strh	r2, [r3, #0]
 800efe6:	e7ed      	b.n	800efc4 <ucdr_serialize_endian_uint16_t+0x9c>
 800efe8:	68a2      	ldr	r2, [r4, #8]
 800efea:	6923      	ldr	r3, [r4, #16]
 800efec:	7da0      	ldrb	r0, [r4, #22]
 800efee:	1b92      	subs	r2, r2, r6
 800eff0:	1b9b      	subs	r3, r3, r6
 800eff2:	f884 8015 	strb.w	r8, [r4, #21]
 800eff6:	f080 0001 	eor.w	r0, r0, #1
 800effa:	60a2      	str	r2, [r4, #8]
 800effc:	6123      	str	r3, [r4, #16]
 800effe:	b003      	add	sp, #12
 800f000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f004:	68a3      	ldr	r3, [r4, #8]
 800f006:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f00a:	701a      	strb	r2, [r3, #0]
 800f00c:	e7bc      	b.n	800ef88 <ucdr_serialize_endian_uint16_t+0x60>
 800f00e:	f10d 0506 	add.w	r5, sp, #6
 800f012:	4632      	mov	r2, r6
 800f014:	4638      	mov	r0, r7
 800f016:	4629      	mov	r1, r5
 800f018:	f008 fad7 	bl	80175ca <memcpy>
 800f01c:	464a      	mov	r2, r9
 800f01e:	19a9      	adds	r1, r5, r6
 800f020:	68a0      	ldr	r0, [r4, #8]
 800f022:	f008 fad2 	bl	80175ca <memcpy>
 800f026:	e7af      	b.n	800ef88 <ucdr_serialize_endian_uint16_t+0x60>

0800f028 <ucdr_deserialize_uint16_t>:
 800f028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f02c:	4604      	mov	r4, r0
 800f02e:	460d      	mov	r5, r1
 800f030:	2102      	movs	r1, #2
 800f032:	f000 fe85 	bl	800fd40 <ucdr_buffer_alignment>
 800f036:	4601      	mov	r1, r0
 800f038:	4620      	mov	r0, r4
 800f03a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f03e:	f000 fec7 	bl	800fdd0 <ucdr_advance_buffer>
 800f042:	2102      	movs	r1, #2
 800f044:	4620      	mov	r0, r4
 800f046:	f000 fe1b 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f04a:	bb60      	cbnz	r0, 800f0a6 <ucdr_deserialize_uint16_t+0x7e>
 800f04c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f050:	42be      	cmp	r6, r7
 800f052:	d923      	bls.n	800f09c <ucdr_deserialize_uint16_t+0x74>
 800f054:	6923      	ldr	r3, [r4, #16]
 800f056:	4620      	mov	r0, r4
 800f058:	60a6      	str	r6, [r4, #8]
 800f05a:	1bf6      	subs	r6, r6, r7
 800f05c:	4433      	add	r3, r6
 800f05e:	f1c6 0902 	rsb	r9, r6, #2
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	4649      	mov	r1, r9
 800f066:	f000 fe17 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d034      	beq.n	800f0d8 <ucdr_deserialize_uint16_t+0xb0>
 800f06e:	7d23      	ldrb	r3, [r4, #20]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d042      	beq.n	800f0fa <ucdr_deserialize_uint16_t+0xd2>
 800f074:	787b      	ldrb	r3, [r7, #1]
 800f076:	702b      	strb	r3, [r5, #0]
 800f078:	2e00      	cmp	r6, #0
 800f07a:	d03a      	beq.n	800f0f2 <ucdr_deserialize_uint16_t+0xca>
 800f07c:	783b      	ldrb	r3, [r7, #0]
 800f07e:	706b      	strb	r3, [r5, #1]
 800f080:	6923      	ldr	r3, [r4, #16]
 800f082:	2102      	movs	r1, #2
 800f084:	68a2      	ldr	r2, [r4, #8]
 800f086:	3302      	adds	r3, #2
 800f088:	7da0      	ldrb	r0, [r4, #22]
 800f08a:	444a      	add	r2, r9
 800f08c:	7561      	strb	r1, [r4, #21]
 800f08e:	1b9b      	subs	r3, r3, r6
 800f090:	f080 0001 	eor.w	r0, r0, #1
 800f094:	60a2      	str	r2, [r4, #8]
 800f096:	6123      	str	r3, [r4, #16]
 800f098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f09c:	2102      	movs	r1, #2
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f000 fdfa 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f0a4:	b180      	cbz	r0, 800f0c8 <ucdr_deserialize_uint16_t+0xa0>
 800f0a6:	7d23      	ldrb	r3, [r4, #20]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	68a3      	ldr	r3, [r4, #8]
 800f0ac:	d011      	beq.n	800f0d2 <ucdr_deserialize_uint16_t+0xaa>
 800f0ae:	785b      	ldrb	r3, [r3, #1]
 800f0b0:	702b      	strb	r3, [r5, #0]
 800f0b2:	68a3      	ldr	r3, [r4, #8]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	706b      	strb	r3, [r5, #1]
 800f0b8:	2102      	movs	r1, #2
 800f0ba:	68a2      	ldr	r2, [r4, #8]
 800f0bc:	6923      	ldr	r3, [r4, #16]
 800f0be:	440a      	add	r2, r1
 800f0c0:	7561      	strb	r1, [r4, #21]
 800f0c2:	440b      	add	r3, r1
 800f0c4:	60a2      	str	r2, [r4, #8]
 800f0c6:	6123      	str	r3, [r4, #16]
 800f0c8:	7da0      	ldrb	r0, [r4, #22]
 800f0ca:	f080 0001 	eor.w	r0, r0, #1
 800f0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	802b      	strh	r3, [r5, #0]
 800f0d6:	e7ef      	b.n	800f0b8 <ucdr_deserialize_uint16_t+0x90>
 800f0d8:	68a2      	ldr	r2, [r4, #8]
 800f0da:	6923      	ldr	r3, [r4, #16]
 800f0dc:	1b92      	subs	r2, r2, r6
 800f0de:	7da0      	ldrb	r0, [r4, #22]
 800f0e0:	1b9b      	subs	r3, r3, r6
 800f0e2:	f884 8015 	strb.w	r8, [r4, #21]
 800f0e6:	f080 0001 	eor.w	r0, r0, #1
 800f0ea:	60a2      	str	r2, [r4, #8]
 800f0ec:	6123      	str	r3, [r4, #16]
 800f0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f2:	68a3      	ldr	r3, [r4, #8]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	706b      	strb	r3, [r5, #1]
 800f0f8:	e7c2      	b.n	800f080 <ucdr_deserialize_uint16_t+0x58>
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	4628      	mov	r0, r5
 800f100:	f008 fa63 	bl	80175ca <memcpy>
 800f104:	464a      	mov	r2, r9
 800f106:	19a8      	adds	r0, r5, r6
 800f108:	68a1      	ldr	r1, [r4, #8]
 800f10a:	f008 fa5e 	bl	80175ca <memcpy>
 800f10e:	e7b7      	b.n	800f080 <ucdr_deserialize_uint16_t+0x58>

0800f110 <ucdr_deserialize_endian_uint16_t>:
 800f110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f114:	4604      	mov	r4, r0
 800f116:	460e      	mov	r6, r1
 800f118:	2102      	movs	r1, #2
 800f11a:	4615      	mov	r5, r2
 800f11c:	f000 fe10 	bl	800fd40 <ucdr_buffer_alignment>
 800f120:	4601      	mov	r1, r0
 800f122:	4620      	mov	r0, r4
 800f124:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f128:	f000 fe52 	bl	800fdd0 <ucdr_advance_buffer>
 800f12c:	2102      	movs	r1, #2
 800f12e:	4620      	mov	r0, r4
 800f130:	f000 fda6 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f134:	bb70      	cbnz	r0, 800f194 <ucdr_deserialize_endian_uint16_t+0x84>
 800f136:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800f13a:	454f      	cmp	r7, r9
 800f13c:	d925      	bls.n	800f18a <ucdr_deserialize_endian_uint16_t+0x7a>
 800f13e:	6923      	ldr	r3, [r4, #16]
 800f140:	4620      	mov	r0, r4
 800f142:	60a7      	str	r7, [r4, #8]
 800f144:	eba7 0709 	sub.w	r7, r7, r9
 800f148:	443b      	add	r3, r7
 800f14a:	f1c7 0a02 	rsb	sl, r7, #2
 800f14e:	6123      	str	r3, [r4, #16]
 800f150:	4651      	mov	r1, sl
 800f152:	f000 fda1 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f156:	2800      	cmp	r0, #0
 800f158:	d034      	beq.n	800f1c4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f15a:	2e01      	cmp	r6, #1
 800f15c:	d043      	beq.n	800f1e6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f15e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f162:	702b      	strb	r3, [r5, #0]
 800f164:	2f00      	cmp	r7, #0
 800f166:	d03a      	beq.n	800f1de <ucdr_deserialize_endian_uint16_t+0xce>
 800f168:	f899 3000 	ldrb.w	r3, [r9]
 800f16c:	706b      	strb	r3, [r5, #1]
 800f16e:	6923      	ldr	r3, [r4, #16]
 800f170:	2102      	movs	r1, #2
 800f172:	68a2      	ldr	r2, [r4, #8]
 800f174:	3302      	adds	r3, #2
 800f176:	7da0      	ldrb	r0, [r4, #22]
 800f178:	4452      	add	r2, sl
 800f17a:	7561      	strb	r1, [r4, #21]
 800f17c:	1bdb      	subs	r3, r3, r7
 800f17e:	f080 0001 	eor.w	r0, r0, #1
 800f182:	60a2      	str	r2, [r4, #8]
 800f184:	6123      	str	r3, [r4, #16]
 800f186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f18a:	2102      	movs	r1, #2
 800f18c:	4620      	mov	r0, r4
 800f18e:	f000 fd83 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f192:	b178      	cbz	r0, 800f1b4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f194:	2e01      	cmp	r6, #1
 800f196:	68a3      	ldr	r3, [r4, #8]
 800f198:	d011      	beq.n	800f1be <ucdr_deserialize_endian_uint16_t+0xae>
 800f19a:	785b      	ldrb	r3, [r3, #1]
 800f19c:	702b      	strb	r3, [r5, #0]
 800f19e:	68a3      	ldr	r3, [r4, #8]
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	706b      	strb	r3, [r5, #1]
 800f1a4:	2102      	movs	r1, #2
 800f1a6:	68a2      	ldr	r2, [r4, #8]
 800f1a8:	6923      	ldr	r3, [r4, #16]
 800f1aa:	440a      	add	r2, r1
 800f1ac:	7561      	strb	r1, [r4, #21]
 800f1ae:	440b      	add	r3, r1
 800f1b0:	60a2      	str	r2, [r4, #8]
 800f1b2:	6123      	str	r3, [r4, #16]
 800f1b4:	7da0      	ldrb	r0, [r4, #22]
 800f1b6:	f080 0001 	eor.w	r0, r0, #1
 800f1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	802b      	strh	r3, [r5, #0]
 800f1c2:	e7ef      	b.n	800f1a4 <ucdr_deserialize_endian_uint16_t+0x94>
 800f1c4:	68a2      	ldr	r2, [r4, #8]
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	1bd2      	subs	r2, r2, r7
 800f1ca:	7da0      	ldrb	r0, [r4, #22]
 800f1cc:	1bdb      	subs	r3, r3, r7
 800f1ce:	f884 8015 	strb.w	r8, [r4, #21]
 800f1d2:	f080 0001 	eor.w	r0, r0, #1
 800f1d6:	60a2      	str	r2, [r4, #8]
 800f1d8:	6123      	str	r3, [r4, #16]
 800f1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1de:	68a3      	ldr	r3, [r4, #8]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	706b      	strb	r3, [r5, #1]
 800f1e4:	e7c3      	b.n	800f16e <ucdr_deserialize_endian_uint16_t+0x5e>
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	463a      	mov	r2, r7
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	f008 f9ed 	bl	80175ca <memcpy>
 800f1f0:	4652      	mov	r2, sl
 800f1f2:	19e8      	adds	r0, r5, r7
 800f1f4:	68a1      	ldr	r1, [r4, #8]
 800f1f6:	f008 f9e8 	bl	80175ca <memcpy>
 800f1fa:	e7b8      	b.n	800f16e <ucdr_deserialize_endian_uint16_t+0x5e>

0800f1fc <ucdr_serialize_uint32_t>:
 800f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f200:	b082      	sub	sp, #8
 800f202:	4604      	mov	r4, r0
 800f204:	9101      	str	r1, [sp, #4]
 800f206:	2104      	movs	r1, #4
 800f208:	f000 fd9a 	bl	800fd40 <ucdr_buffer_alignment>
 800f20c:	4601      	mov	r1, r0
 800f20e:	4620      	mov	r0, r4
 800f210:	7d67      	ldrb	r7, [r4, #21]
 800f212:	f000 fddd 	bl	800fdd0 <ucdr_advance_buffer>
 800f216:	2104      	movs	r1, #4
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 fd31 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d139      	bne.n	800f296 <ucdr_serialize_uint32_t+0x9a>
 800f222:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f226:	42ab      	cmp	r3, r5
 800f228:	d930      	bls.n	800f28c <ucdr_serialize_uint32_t+0x90>
 800f22a:	1b5e      	subs	r6, r3, r5
 800f22c:	60a3      	str	r3, [r4, #8]
 800f22e:	6923      	ldr	r3, [r4, #16]
 800f230:	4620      	mov	r0, r4
 800f232:	f1c6 0804 	rsb	r8, r6, #4
 800f236:	4433      	add	r3, r6
 800f238:	4641      	mov	r1, r8
 800f23a:	6123      	str	r3, [r4, #16]
 800f23c:	f000 fd2c 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f240:	2800      	cmp	r0, #0
 800f242:	d04c      	beq.n	800f2de <ucdr_serialize_uint32_t+0xe2>
 800f244:	7d23      	ldrb	r3, [r4, #20]
 800f246:	2b01      	cmp	r3, #1
 800f248:	d063      	beq.n	800f312 <ucdr_serialize_uint32_t+0x116>
 800f24a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f24e:	702b      	strb	r3, [r5, #0]
 800f250:	2e00      	cmp	r6, #0
 800f252:	d051      	beq.n	800f2f8 <ucdr_serialize_uint32_t+0xfc>
 800f254:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f258:	2e01      	cmp	r6, #1
 800f25a:	706b      	strb	r3, [r5, #1]
 800f25c:	d050      	beq.n	800f300 <ucdr_serialize_uint32_t+0x104>
 800f25e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f262:	2e02      	cmp	r6, #2
 800f264:	70ab      	strb	r3, [r5, #2]
 800f266:	d04f      	beq.n	800f308 <ucdr_serialize_uint32_t+0x10c>
 800f268:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f26c:	70eb      	strb	r3, [r5, #3]
 800f26e:	6923      	ldr	r3, [r4, #16]
 800f270:	2104      	movs	r1, #4
 800f272:	68a2      	ldr	r2, [r4, #8]
 800f274:	3304      	adds	r3, #4
 800f276:	7da0      	ldrb	r0, [r4, #22]
 800f278:	4442      	add	r2, r8
 800f27a:	7561      	strb	r1, [r4, #21]
 800f27c:	1b9e      	subs	r6, r3, r6
 800f27e:	f080 0001 	eor.w	r0, r0, #1
 800f282:	60a2      	str	r2, [r4, #8]
 800f284:	6126      	str	r6, [r4, #16]
 800f286:	b002      	add	sp, #8
 800f288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f28c:	2104      	movs	r1, #4
 800f28e:	4620      	mov	r0, r4
 800f290:	f000 fd02 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f294:	b1d0      	cbz	r0, 800f2cc <ucdr_serialize_uint32_t+0xd0>
 800f296:	7d23      	ldrb	r3, [r4, #20]
 800f298:	2b01      	cmp	r3, #1
 800f29a:	68a3      	ldr	r3, [r4, #8]
 800f29c:	d01c      	beq.n	800f2d8 <ucdr_serialize_uint32_t+0xdc>
 800f29e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f2a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2a6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f2aa:	7018      	strb	r0, [r3, #0]
 800f2ac:	68a3      	ldr	r3, [r4, #8]
 800f2ae:	705a      	strb	r2, [r3, #1]
 800f2b0:	68a3      	ldr	r3, [r4, #8]
 800f2b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2b6:	7099      	strb	r1, [r3, #2]
 800f2b8:	68a3      	ldr	r3, [r4, #8]
 800f2ba:	70da      	strb	r2, [r3, #3]
 800f2bc:	2104      	movs	r1, #4
 800f2be:	68a2      	ldr	r2, [r4, #8]
 800f2c0:	6923      	ldr	r3, [r4, #16]
 800f2c2:	440a      	add	r2, r1
 800f2c4:	7561      	strb	r1, [r4, #21]
 800f2c6:	440b      	add	r3, r1
 800f2c8:	60a2      	str	r2, [r4, #8]
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	7da0      	ldrb	r0, [r4, #22]
 800f2ce:	f080 0001 	eor.w	r0, r0, #1
 800f2d2:	b002      	add	sp, #8
 800f2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d8:	9a01      	ldr	r2, [sp, #4]
 800f2da:	601a      	str	r2, [r3, #0]
 800f2dc:	e7ee      	b.n	800f2bc <ucdr_serialize_uint32_t+0xc0>
 800f2de:	68a2      	ldr	r2, [r4, #8]
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	7da0      	ldrb	r0, [r4, #22]
 800f2e4:	1b92      	subs	r2, r2, r6
 800f2e6:	1b9b      	subs	r3, r3, r6
 800f2e8:	7567      	strb	r7, [r4, #21]
 800f2ea:	f080 0001 	eor.w	r0, r0, #1
 800f2ee:	60a2      	str	r2, [r4, #8]
 800f2f0:	6123      	str	r3, [r4, #16]
 800f2f2:	b002      	add	sp, #8
 800f2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f8:	68a3      	ldr	r3, [r4, #8]
 800f2fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2fe:	701a      	strb	r2, [r3, #0]
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f306:	701a      	strb	r2, [r3, #0]
 800f308:	68a3      	ldr	r3, [r4, #8]
 800f30a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f30e:	701a      	strb	r2, [r3, #0]
 800f310:	e7ad      	b.n	800f26e <ucdr_serialize_uint32_t+0x72>
 800f312:	4628      	mov	r0, r5
 800f314:	ad01      	add	r5, sp, #4
 800f316:	4632      	mov	r2, r6
 800f318:	4629      	mov	r1, r5
 800f31a:	f008 f956 	bl	80175ca <memcpy>
 800f31e:	4642      	mov	r2, r8
 800f320:	19a9      	adds	r1, r5, r6
 800f322:	68a0      	ldr	r0, [r4, #8]
 800f324:	f008 f951 	bl	80175ca <memcpy>
 800f328:	e7a1      	b.n	800f26e <ucdr_serialize_uint32_t+0x72>
 800f32a:	bf00      	nop

0800f32c <ucdr_serialize_endian_uint32_t>:
 800f32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f330:	4604      	mov	r4, r0
 800f332:	b083      	sub	sp, #12
 800f334:	460d      	mov	r5, r1
 800f336:	2104      	movs	r1, #4
 800f338:	9201      	str	r2, [sp, #4]
 800f33a:	f000 fd01 	bl	800fd40 <ucdr_buffer_alignment>
 800f33e:	4601      	mov	r1, r0
 800f340:	4620      	mov	r0, r4
 800f342:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f346:	f000 fd43 	bl	800fdd0 <ucdr_advance_buffer>
 800f34a:	2104      	movs	r1, #4
 800f34c:	4620      	mov	r0, r4
 800f34e:	f000 fc97 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f352:	2800      	cmp	r0, #0
 800f354:	d138      	bne.n	800f3c8 <ucdr_serialize_endian_uint32_t+0x9c>
 800f356:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f35a:	42b7      	cmp	r7, r6
 800f35c:	d92f      	bls.n	800f3be <ucdr_serialize_endian_uint32_t+0x92>
 800f35e:	6923      	ldr	r3, [r4, #16]
 800f360:	4620      	mov	r0, r4
 800f362:	60a7      	str	r7, [r4, #8]
 800f364:	1bbf      	subs	r7, r7, r6
 800f366:	443b      	add	r3, r7
 800f368:	f1c7 0904 	rsb	r9, r7, #4
 800f36c:	6123      	str	r3, [r4, #16]
 800f36e:	4649      	mov	r1, r9
 800f370:	f000 fc92 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f374:	2800      	cmp	r0, #0
 800f376:	d04a      	beq.n	800f40e <ucdr_serialize_endian_uint32_t+0xe2>
 800f378:	2d01      	cmp	r5, #1
 800f37a:	d063      	beq.n	800f444 <ucdr_serialize_endian_uint32_t+0x118>
 800f37c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f380:	7033      	strb	r3, [r6, #0]
 800f382:	2f00      	cmp	r7, #0
 800f384:	d051      	beq.n	800f42a <ucdr_serialize_endian_uint32_t+0xfe>
 800f386:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f38a:	2f01      	cmp	r7, #1
 800f38c:	7073      	strb	r3, [r6, #1]
 800f38e:	d050      	beq.n	800f432 <ucdr_serialize_endian_uint32_t+0x106>
 800f390:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f394:	2f02      	cmp	r7, #2
 800f396:	70b3      	strb	r3, [r6, #2]
 800f398:	d04f      	beq.n	800f43a <ucdr_serialize_endian_uint32_t+0x10e>
 800f39a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f39e:	70f3      	strb	r3, [r6, #3]
 800f3a0:	6923      	ldr	r3, [r4, #16]
 800f3a2:	2104      	movs	r1, #4
 800f3a4:	68a2      	ldr	r2, [r4, #8]
 800f3a6:	7da0      	ldrb	r0, [r4, #22]
 800f3a8:	3304      	adds	r3, #4
 800f3aa:	444a      	add	r2, r9
 800f3ac:	7561      	strb	r1, [r4, #21]
 800f3ae:	1bdb      	subs	r3, r3, r7
 800f3b0:	f080 0001 	eor.w	r0, r0, #1
 800f3b4:	60a2      	str	r2, [r4, #8]
 800f3b6:	6123      	str	r3, [r4, #16]
 800f3b8:	b003      	add	sp, #12
 800f3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3be:	2104      	movs	r1, #4
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f000 fc69 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f3c6:	b1c8      	cbz	r0, 800f3fc <ucdr_serialize_endian_uint32_t+0xd0>
 800f3c8:	2d01      	cmp	r5, #1
 800f3ca:	68a3      	ldr	r3, [r4, #8]
 800f3cc:	d01c      	beq.n	800f408 <ucdr_serialize_endian_uint32_t+0xdc>
 800f3ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f3d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3d6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f3da:	7018      	strb	r0, [r3, #0]
 800f3dc:	68a3      	ldr	r3, [r4, #8]
 800f3de:	705a      	strb	r2, [r3, #1]
 800f3e0:	68a3      	ldr	r3, [r4, #8]
 800f3e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3e6:	7099      	strb	r1, [r3, #2]
 800f3e8:	68a3      	ldr	r3, [r4, #8]
 800f3ea:	70da      	strb	r2, [r3, #3]
 800f3ec:	2104      	movs	r1, #4
 800f3ee:	68a2      	ldr	r2, [r4, #8]
 800f3f0:	6923      	ldr	r3, [r4, #16]
 800f3f2:	440a      	add	r2, r1
 800f3f4:	7561      	strb	r1, [r4, #21]
 800f3f6:	440b      	add	r3, r1
 800f3f8:	60a2      	str	r2, [r4, #8]
 800f3fa:	6123      	str	r3, [r4, #16]
 800f3fc:	7da0      	ldrb	r0, [r4, #22]
 800f3fe:	f080 0001 	eor.w	r0, r0, #1
 800f402:	b003      	add	sp, #12
 800f404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f408:	9a01      	ldr	r2, [sp, #4]
 800f40a:	601a      	str	r2, [r3, #0]
 800f40c:	e7ee      	b.n	800f3ec <ucdr_serialize_endian_uint32_t+0xc0>
 800f40e:	68a2      	ldr	r2, [r4, #8]
 800f410:	6923      	ldr	r3, [r4, #16]
 800f412:	7da0      	ldrb	r0, [r4, #22]
 800f414:	1bd2      	subs	r2, r2, r7
 800f416:	1bdb      	subs	r3, r3, r7
 800f418:	f884 8015 	strb.w	r8, [r4, #21]
 800f41c:	f080 0001 	eor.w	r0, r0, #1
 800f420:	60a2      	str	r2, [r4, #8]
 800f422:	6123      	str	r3, [r4, #16]
 800f424:	b003      	add	sp, #12
 800f426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f42a:	68a3      	ldr	r3, [r4, #8]
 800f42c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f430:	701a      	strb	r2, [r3, #0]
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f438:	701a      	strb	r2, [r3, #0]
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f440:	701a      	strb	r2, [r3, #0]
 800f442:	e7ad      	b.n	800f3a0 <ucdr_serialize_endian_uint32_t+0x74>
 800f444:	ad01      	add	r5, sp, #4
 800f446:	463a      	mov	r2, r7
 800f448:	4630      	mov	r0, r6
 800f44a:	4629      	mov	r1, r5
 800f44c:	f008 f8bd 	bl	80175ca <memcpy>
 800f450:	464a      	mov	r2, r9
 800f452:	19e9      	adds	r1, r5, r7
 800f454:	68a0      	ldr	r0, [r4, #8]
 800f456:	f008 f8b8 	bl	80175ca <memcpy>
 800f45a:	e7a1      	b.n	800f3a0 <ucdr_serialize_endian_uint32_t+0x74>

0800f45c <ucdr_deserialize_uint32_t>:
 800f45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f460:	4604      	mov	r4, r0
 800f462:	460d      	mov	r5, r1
 800f464:	2104      	movs	r1, #4
 800f466:	f000 fc6b 	bl	800fd40 <ucdr_buffer_alignment>
 800f46a:	4601      	mov	r1, r0
 800f46c:	4620      	mov	r0, r4
 800f46e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f472:	f000 fcad 	bl	800fdd0 <ucdr_advance_buffer>
 800f476:	2104      	movs	r1, #4
 800f478:	4620      	mov	r0, r4
 800f47a:	f000 fc01 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f47e:	2800      	cmp	r0, #0
 800f480:	d138      	bne.n	800f4f4 <ucdr_deserialize_uint32_t+0x98>
 800f482:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f486:	42b7      	cmp	r7, r6
 800f488:	d92f      	bls.n	800f4ea <ucdr_deserialize_uint32_t+0x8e>
 800f48a:	6923      	ldr	r3, [r4, #16]
 800f48c:	4620      	mov	r0, r4
 800f48e:	60a7      	str	r7, [r4, #8]
 800f490:	1bbf      	subs	r7, r7, r6
 800f492:	443b      	add	r3, r7
 800f494:	f1c7 0904 	rsb	r9, r7, #4
 800f498:	6123      	str	r3, [r4, #16]
 800f49a:	4649      	mov	r1, r9
 800f49c:	f000 fbfc 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	d046      	beq.n	800f532 <ucdr_deserialize_uint32_t+0xd6>
 800f4a4:	7d23      	ldrb	r3, [r4, #20]
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d05c      	beq.n	800f564 <ucdr_deserialize_uint32_t+0x108>
 800f4aa:	78f3      	ldrb	r3, [r6, #3]
 800f4ac:	702b      	strb	r3, [r5, #0]
 800f4ae:	2f00      	cmp	r7, #0
 800f4b0:	d04c      	beq.n	800f54c <ucdr_deserialize_uint32_t+0xf0>
 800f4b2:	78b3      	ldrb	r3, [r6, #2]
 800f4b4:	2f01      	cmp	r7, #1
 800f4b6:	706b      	strb	r3, [r5, #1]
 800f4b8:	f105 0302 	add.w	r3, r5, #2
 800f4bc:	d04a      	beq.n	800f554 <ucdr_deserialize_uint32_t+0xf8>
 800f4be:	7873      	ldrb	r3, [r6, #1]
 800f4c0:	2f02      	cmp	r7, #2
 800f4c2:	70ab      	strb	r3, [r5, #2]
 800f4c4:	f105 0303 	add.w	r3, r5, #3
 800f4c8:	d048      	beq.n	800f55c <ucdr_deserialize_uint32_t+0x100>
 800f4ca:	7833      	ldrb	r3, [r6, #0]
 800f4cc:	70eb      	strb	r3, [r5, #3]
 800f4ce:	6923      	ldr	r3, [r4, #16]
 800f4d0:	2104      	movs	r1, #4
 800f4d2:	68a2      	ldr	r2, [r4, #8]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	7da0      	ldrb	r0, [r4, #22]
 800f4d8:	444a      	add	r2, r9
 800f4da:	7561      	strb	r1, [r4, #21]
 800f4dc:	1bdb      	subs	r3, r3, r7
 800f4de:	f080 0001 	eor.w	r0, r0, #1
 800f4e2:	60a2      	str	r2, [r4, #8]
 800f4e4:	6123      	str	r3, [r4, #16]
 800f4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ea:	2104      	movs	r1, #4
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 fbd3 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f4f2:	b1b0      	cbz	r0, 800f522 <ucdr_deserialize_uint32_t+0xc6>
 800f4f4:	7d23      	ldrb	r3, [r4, #20]
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	68a3      	ldr	r3, [r4, #8]
 800f4fa:	d017      	beq.n	800f52c <ucdr_deserialize_uint32_t+0xd0>
 800f4fc:	78db      	ldrb	r3, [r3, #3]
 800f4fe:	702b      	strb	r3, [r5, #0]
 800f500:	68a3      	ldr	r3, [r4, #8]
 800f502:	789b      	ldrb	r3, [r3, #2]
 800f504:	706b      	strb	r3, [r5, #1]
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	785b      	ldrb	r3, [r3, #1]
 800f50a:	70ab      	strb	r3, [r5, #2]
 800f50c:	68a3      	ldr	r3, [r4, #8]
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	70eb      	strb	r3, [r5, #3]
 800f512:	2104      	movs	r1, #4
 800f514:	68a2      	ldr	r2, [r4, #8]
 800f516:	6923      	ldr	r3, [r4, #16]
 800f518:	440a      	add	r2, r1
 800f51a:	7561      	strb	r1, [r4, #21]
 800f51c:	440b      	add	r3, r1
 800f51e:	60a2      	str	r2, [r4, #8]
 800f520:	6123      	str	r3, [r4, #16]
 800f522:	7da0      	ldrb	r0, [r4, #22]
 800f524:	f080 0001 	eor.w	r0, r0, #1
 800f528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	e7ef      	b.n	800f512 <ucdr_deserialize_uint32_t+0xb6>
 800f532:	68a2      	ldr	r2, [r4, #8]
 800f534:	6923      	ldr	r3, [r4, #16]
 800f536:	1bd2      	subs	r2, r2, r7
 800f538:	7da0      	ldrb	r0, [r4, #22]
 800f53a:	1bdb      	subs	r3, r3, r7
 800f53c:	f884 8015 	strb.w	r8, [r4, #21]
 800f540:	f080 0001 	eor.w	r0, r0, #1
 800f544:	60a2      	str	r2, [r4, #8]
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f54c:	68a3      	ldr	r3, [r4, #8]
 800f54e:	789b      	ldrb	r3, [r3, #2]
 800f550:	706b      	strb	r3, [r5, #1]
 800f552:	1cab      	adds	r3, r5, #2
 800f554:	68a2      	ldr	r2, [r4, #8]
 800f556:	7852      	ldrb	r2, [r2, #1]
 800f558:	f803 2b01 	strb.w	r2, [r3], #1
 800f55c:	68a2      	ldr	r2, [r4, #8]
 800f55e:	7812      	ldrb	r2, [r2, #0]
 800f560:	701a      	strb	r2, [r3, #0]
 800f562:	e7b4      	b.n	800f4ce <ucdr_deserialize_uint32_t+0x72>
 800f564:	4631      	mov	r1, r6
 800f566:	463a      	mov	r2, r7
 800f568:	4628      	mov	r0, r5
 800f56a:	f008 f82e 	bl	80175ca <memcpy>
 800f56e:	464a      	mov	r2, r9
 800f570:	19e8      	adds	r0, r5, r7
 800f572:	68a1      	ldr	r1, [r4, #8]
 800f574:	f008 f829 	bl	80175ca <memcpy>
 800f578:	e7a9      	b.n	800f4ce <ucdr_deserialize_uint32_t+0x72>
 800f57a:	bf00      	nop

0800f57c <ucdr_deserialize_endian_uint32_t>:
 800f57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f580:	4604      	mov	r4, r0
 800f582:	460e      	mov	r6, r1
 800f584:	2104      	movs	r1, #4
 800f586:	4615      	mov	r5, r2
 800f588:	f000 fbda 	bl	800fd40 <ucdr_buffer_alignment>
 800f58c:	4601      	mov	r1, r0
 800f58e:	4620      	mov	r0, r4
 800f590:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f594:	f000 fc1c 	bl	800fdd0 <ucdr_advance_buffer>
 800f598:	2104      	movs	r1, #4
 800f59a:	4620      	mov	r0, r4
 800f59c:	f000 fb70 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d13c      	bne.n	800f61e <ucdr_deserialize_endian_uint32_t+0xa2>
 800f5a4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f5a8:	42bb      	cmp	r3, r7
 800f5aa:	d933      	bls.n	800f614 <ucdr_deserialize_endian_uint32_t+0x98>
 800f5ac:	eba3 0907 	sub.w	r9, r3, r7
 800f5b0:	60a3      	str	r3, [r4, #8]
 800f5b2:	6923      	ldr	r3, [r4, #16]
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f1c9 0a04 	rsb	sl, r9, #4
 800f5ba:	444b      	add	r3, r9
 800f5bc:	4651      	mov	r1, sl
 800f5be:	6123      	str	r3, [r4, #16]
 800f5c0:	f000 fb6a 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d048      	beq.n	800f65a <ucdr_deserialize_endian_uint32_t+0xde>
 800f5c8:	2e01      	cmp	r6, #1
 800f5ca:	d061      	beq.n	800f690 <ucdr_deserialize_endian_uint32_t+0x114>
 800f5cc:	78fb      	ldrb	r3, [r7, #3]
 800f5ce:	702b      	strb	r3, [r5, #0]
 800f5d0:	f1b9 0f00 	cmp.w	r9, #0
 800f5d4:	d050      	beq.n	800f678 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f5d6:	78bb      	ldrb	r3, [r7, #2]
 800f5d8:	f1b9 0f01 	cmp.w	r9, #1
 800f5dc:	706b      	strb	r3, [r5, #1]
 800f5de:	f105 0302 	add.w	r3, r5, #2
 800f5e2:	d04d      	beq.n	800f680 <ucdr_deserialize_endian_uint32_t+0x104>
 800f5e4:	787b      	ldrb	r3, [r7, #1]
 800f5e6:	f1b9 0f02 	cmp.w	r9, #2
 800f5ea:	70ab      	strb	r3, [r5, #2]
 800f5ec:	f105 0303 	add.w	r3, r5, #3
 800f5f0:	d04a      	beq.n	800f688 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f5f2:	783b      	ldrb	r3, [r7, #0]
 800f5f4:	70eb      	strb	r3, [r5, #3]
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	2104      	movs	r1, #4
 800f5fa:	68a2      	ldr	r2, [r4, #8]
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	7da0      	ldrb	r0, [r4, #22]
 800f600:	4452      	add	r2, sl
 800f602:	7561      	strb	r1, [r4, #21]
 800f604:	eba3 0309 	sub.w	r3, r3, r9
 800f608:	f080 0001 	eor.w	r0, r0, #1
 800f60c:	60a2      	str	r2, [r4, #8]
 800f60e:	6123      	str	r3, [r4, #16]
 800f610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f614:	2104      	movs	r1, #4
 800f616:	4620      	mov	r0, r4
 800f618:	f000 fb3e 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f61c:	b1a8      	cbz	r0, 800f64a <ucdr_deserialize_endian_uint32_t+0xce>
 800f61e:	2e01      	cmp	r6, #1
 800f620:	68a3      	ldr	r3, [r4, #8]
 800f622:	d017      	beq.n	800f654 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f624:	78db      	ldrb	r3, [r3, #3]
 800f626:	702b      	strb	r3, [r5, #0]
 800f628:	68a3      	ldr	r3, [r4, #8]
 800f62a:	789b      	ldrb	r3, [r3, #2]
 800f62c:	706b      	strb	r3, [r5, #1]
 800f62e:	68a3      	ldr	r3, [r4, #8]
 800f630:	785b      	ldrb	r3, [r3, #1]
 800f632:	70ab      	strb	r3, [r5, #2]
 800f634:	68a3      	ldr	r3, [r4, #8]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	70eb      	strb	r3, [r5, #3]
 800f63a:	2104      	movs	r1, #4
 800f63c:	68a2      	ldr	r2, [r4, #8]
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	440a      	add	r2, r1
 800f642:	7561      	strb	r1, [r4, #21]
 800f644:	440b      	add	r3, r1
 800f646:	60a2      	str	r2, [r4, #8]
 800f648:	6123      	str	r3, [r4, #16]
 800f64a:	7da0      	ldrb	r0, [r4, #22]
 800f64c:	f080 0001 	eor.w	r0, r0, #1
 800f650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	602b      	str	r3, [r5, #0]
 800f658:	e7ef      	b.n	800f63a <ucdr_deserialize_endian_uint32_t+0xbe>
 800f65a:	68a2      	ldr	r2, [r4, #8]
 800f65c:	6923      	ldr	r3, [r4, #16]
 800f65e:	eba2 0209 	sub.w	r2, r2, r9
 800f662:	7da0      	ldrb	r0, [r4, #22]
 800f664:	eba3 0309 	sub.w	r3, r3, r9
 800f668:	f884 8015 	strb.w	r8, [r4, #21]
 800f66c:	f080 0001 	eor.w	r0, r0, #1
 800f670:	60a2      	str	r2, [r4, #8]
 800f672:	6123      	str	r3, [r4, #16]
 800f674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f678:	68a3      	ldr	r3, [r4, #8]
 800f67a:	789b      	ldrb	r3, [r3, #2]
 800f67c:	706b      	strb	r3, [r5, #1]
 800f67e:	1cab      	adds	r3, r5, #2
 800f680:	68a2      	ldr	r2, [r4, #8]
 800f682:	7852      	ldrb	r2, [r2, #1]
 800f684:	f803 2b01 	strb.w	r2, [r3], #1
 800f688:	68a2      	ldr	r2, [r4, #8]
 800f68a:	7812      	ldrb	r2, [r2, #0]
 800f68c:	701a      	strb	r2, [r3, #0]
 800f68e:	e7b2      	b.n	800f5f6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f690:	4639      	mov	r1, r7
 800f692:	464a      	mov	r2, r9
 800f694:	4628      	mov	r0, r5
 800f696:	f007 ff98 	bl	80175ca <memcpy>
 800f69a:	4652      	mov	r2, sl
 800f69c:	eb05 0009 	add.w	r0, r5, r9
 800f6a0:	68a1      	ldr	r1, [r4, #8]
 800f6a2:	f007 ff92 	bl	80175ca <memcpy>
 800f6a6:	e7a6      	b.n	800f5f6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f6a8 <ucdr_serialize_uint64_t>:
 800f6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	2108      	movs	r1, #8
 800f6b2:	e9cd 2300 	strd	r2, r3, [sp]
 800f6b6:	f000 fb43 	bl	800fd40 <ucdr_buffer_alignment>
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	4620      	mov	r0, r4
 800f6be:	7d67      	ldrb	r7, [r4, #21]
 800f6c0:	f000 fb86 	bl	800fdd0 <ucdr_advance_buffer>
 800f6c4:	2108      	movs	r1, #8
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 fada 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d14e      	bne.n	800f76e <ucdr_serialize_uint64_t+0xc6>
 800f6d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f6d4:	42ab      	cmp	r3, r5
 800f6d6:	d945      	bls.n	800f764 <ucdr_serialize_uint64_t+0xbc>
 800f6d8:	1b5e      	subs	r6, r3, r5
 800f6da:	60a3      	str	r3, [r4, #8]
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f1c6 0808 	rsb	r8, r6, #8
 800f6e4:	4433      	add	r3, r6
 800f6e6:	4641      	mov	r1, r8
 800f6e8:	6123      	str	r3, [r4, #16]
 800f6ea:	f000 fad5 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d074      	beq.n	800f7dc <ucdr_serialize_uint64_t+0x134>
 800f6f2:	7d23      	ldrb	r3, [r4, #20]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	f000 809b 	beq.w	800f830 <ucdr_serialize_uint64_t+0x188>
 800f6fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f6fe:	702b      	strb	r3, [r5, #0]
 800f700:	2e00      	cmp	r6, #0
 800f702:	d078      	beq.n	800f7f6 <ucdr_serialize_uint64_t+0x14e>
 800f704:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f708:	2e01      	cmp	r6, #1
 800f70a:	706b      	strb	r3, [r5, #1]
 800f70c:	d077      	beq.n	800f7fe <ucdr_serialize_uint64_t+0x156>
 800f70e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f712:	2e02      	cmp	r6, #2
 800f714:	70ab      	strb	r3, [r5, #2]
 800f716:	d076      	beq.n	800f806 <ucdr_serialize_uint64_t+0x15e>
 800f718:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f71c:	2e03      	cmp	r6, #3
 800f71e:	70eb      	strb	r3, [r5, #3]
 800f720:	d075      	beq.n	800f80e <ucdr_serialize_uint64_t+0x166>
 800f722:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f726:	2e04      	cmp	r6, #4
 800f728:	712b      	strb	r3, [r5, #4]
 800f72a:	d074      	beq.n	800f816 <ucdr_serialize_uint64_t+0x16e>
 800f72c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f730:	2e05      	cmp	r6, #5
 800f732:	716b      	strb	r3, [r5, #5]
 800f734:	d073      	beq.n	800f81e <ucdr_serialize_uint64_t+0x176>
 800f736:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f73a:	2e06      	cmp	r6, #6
 800f73c:	71ab      	strb	r3, [r5, #6]
 800f73e:	d072      	beq.n	800f826 <ucdr_serialize_uint64_t+0x17e>
 800f740:	f89d 3000 	ldrb.w	r3, [sp]
 800f744:	71eb      	strb	r3, [r5, #7]
 800f746:	6923      	ldr	r3, [r4, #16]
 800f748:	2108      	movs	r1, #8
 800f74a:	68a2      	ldr	r2, [r4, #8]
 800f74c:	3308      	adds	r3, #8
 800f74e:	7da0      	ldrb	r0, [r4, #22]
 800f750:	4442      	add	r2, r8
 800f752:	7561      	strb	r1, [r4, #21]
 800f754:	1b9e      	subs	r6, r3, r6
 800f756:	f080 0001 	eor.w	r0, r0, #1
 800f75a:	60a2      	str	r2, [r4, #8]
 800f75c:	6126      	str	r6, [r4, #16]
 800f75e:	b002      	add	sp, #8
 800f760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f764:	2108      	movs	r1, #8
 800f766:	4620      	mov	r0, r4
 800f768:	f000 fa96 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f76c:	b350      	cbz	r0, 800f7c4 <ucdr_serialize_uint64_t+0x11c>
 800f76e:	7d23      	ldrb	r3, [r4, #20]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d02d      	beq.n	800f7d0 <ucdr_serialize_uint64_t+0x128>
 800f774:	68a3      	ldr	r3, [r4, #8]
 800f776:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f77a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f77e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f782:	7018      	strb	r0, [r3, #0]
 800f784:	68a3      	ldr	r3, [r4, #8]
 800f786:	705a      	strb	r2, [r3, #1]
 800f788:	68a3      	ldr	r3, [r4, #8]
 800f78a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f78e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f792:	7099      	strb	r1, [r3, #2]
 800f794:	68a3      	ldr	r3, [r4, #8]
 800f796:	70da      	strb	r2, [r3, #3]
 800f798:	68a3      	ldr	r3, [r4, #8]
 800f79a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f79e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f7a2:	7118      	strb	r0, [r3, #4]
 800f7a4:	68a3      	ldr	r3, [r4, #8]
 800f7a6:	715a      	strb	r2, [r3, #5]
 800f7a8:	68a3      	ldr	r3, [r4, #8]
 800f7aa:	f89d 2000 	ldrb.w	r2, [sp]
 800f7ae:	7199      	strb	r1, [r3, #6]
 800f7b0:	68a3      	ldr	r3, [r4, #8]
 800f7b2:	71da      	strb	r2, [r3, #7]
 800f7b4:	2108      	movs	r1, #8
 800f7b6:	68a2      	ldr	r2, [r4, #8]
 800f7b8:	6923      	ldr	r3, [r4, #16]
 800f7ba:	440a      	add	r2, r1
 800f7bc:	7561      	strb	r1, [r4, #21]
 800f7be:	440b      	add	r3, r1
 800f7c0:	60a2      	str	r2, [r4, #8]
 800f7c2:	6123      	str	r3, [r4, #16]
 800f7c4:	7da0      	ldrb	r0, [r4, #22]
 800f7c6:	f080 0001 	eor.w	r0, r0, #1
 800f7ca:	b002      	add	sp, #8
 800f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d0:	466b      	mov	r3, sp
 800f7d2:	68a2      	ldr	r2, [r4, #8]
 800f7d4:	cb03      	ldmia	r3!, {r0, r1}
 800f7d6:	6010      	str	r0, [r2, #0]
 800f7d8:	6051      	str	r1, [r2, #4]
 800f7da:	e7eb      	b.n	800f7b4 <ucdr_serialize_uint64_t+0x10c>
 800f7dc:	68a2      	ldr	r2, [r4, #8]
 800f7de:	6923      	ldr	r3, [r4, #16]
 800f7e0:	7da0      	ldrb	r0, [r4, #22]
 800f7e2:	1b92      	subs	r2, r2, r6
 800f7e4:	1b9b      	subs	r3, r3, r6
 800f7e6:	7567      	strb	r7, [r4, #21]
 800f7e8:	f080 0001 	eor.w	r0, r0, #1
 800f7ec:	60a2      	str	r2, [r4, #8]
 800f7ee:	6123      	str	r3, [r4, #16]
 800f7f0:	b002      	add	sp, #8
 800f7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f6:	68a3      	ldr	r3, [r4, #8]
 800f7f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7fc:	701a      	strb	r2, [r3, #0]
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f804:	701a      	strb	r2, [r3, #0]
 800f806:	68a3      	ldr	r3, [r4, #8]
 800f808:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f80c:	701a      	strb	r2, [r3, #0]
 800f80e:	68a3      	ldr	r3, [r4, #8]
 800f810:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f814:	701a      	strb	r2, [r3, #0]
 800f816:	68a3      	ldr	r3, [r4, #8]
 800f818:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f81c:	701a      	strb	r2, [r3, #0]
 800f81e:	68a3      	ldr	r3, [r4, #8]
 800f820:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f824:	701a      	strb	r2, [r3, #0]
 800f826:	68a3      	ldr	r3, [r4, #8]
 800f828:	f89d 2000 	ldrb.w	r2, [sp]
 800f82c:	701a      	strb	r2, [r3, #0]
 800f82e:	e78a      	b.n	800f746 <ucdr_serialize_uint64_t+0x9e>
 800f830:	4628      	mov	r0, r5
 800f832:	466d      	mov	r5, sp
 800f834:	4632      	mov	r2, r6
 800f836:	4629      	mov	r1, r5
 800f838:	f007 fec7 	bl	80175ca <memcpy>
 800f83c:	4642      	mov	r2, r8
 800f83e:	19a9      	adds	r1, r5, r6
 800f840:	68a0      	ldr	r0, [r4, #8]
 800f842:	f007 fec2 	bl	80175ca <memcpy>
 800f846:	e77e      	b.n	800f746 <ucdr_serialize_uint64_t+0x9e>

0800f848 <ucdr_serialize_int16_t>:
 800f848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f84c:	460b      	mov	r3, r1
 800f84e:	b082      	sub	sp, #8
 800f850:	4604      	mov	r4, r0
 800f852:	2102      	movs	r1, #2
 800f854:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f858:	f000 fa72 	bl	800fd40 <ucdr_buffer_alignment>
 800f85c:	4601      	mov	r1, r0
 800f85e:	4620      	mov	r0, r4
 800f860:	7d67      	ldrb	r7, [r4, #21]
 800f862:	f000 fab5 	bl	800fdd0 <ucdr_advance_buffer>
 800f866:	2102      	movs	r1, #2
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 fa09 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f86e:	bb78      	cbnz	r0, 800f8d0 <ucdr_serialize_int16_t+0x88>
 800f870:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f874:	42ab      	cmp	r3, r5
 800f876:	d926      	bls.n	800f8c6 <ucdr_serialize_int16_t+0x7e>
 800f878:	1b5e      	subs	r6, r3, r5
 800f87a:	60a3      	str	r3, [r4, #8]
 800f87c:	6923      	ldr	r3, [r4, #16]
 800f87e:	4620      	mov	r0, r4
 800f880:	f1c6 0802 	rsb	r8, r6, #2
 800f884:	4433      	add	r3, r6
 800f886:	4641      	mov	r1, r8
 800f888:	6123      	str	r3, [r4, #16]
 800f88a:	f000 fa05 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f88e:	2800      	cmp	r0, #0
 800f890:	d03b      	beq.n	800f90a <ucdr_serialize_int16_t+0xc2>
 800f892:	7d23      	ldrb	r3, [r4, #20]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d04a      	beq.n	800f92e <ucdr_serialize_int16_t+0xe6>
 800f898:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f89c:	702b      	strb	r3, [r5, #0]
 800f89e:	2e00      	cmp	r6, #0
 800f8a0:	d040      	beq.n	800f924 <ucdr_serialize_int16_t+0xdc>
 800f8a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8a6:	706b      	strb	r3, [r5, #1]
 800f8a8:	6923      	ldr	r3, [r4, #16]
 800f8aa:	2102      	movs	r1, #2
 800f8ac:	68a2      	ldr	r2, [r4, #8]
 800f8ae:	3302      	adds	r3, #2
 800f8b0:	7da0      	ldrb	r0, [r4, #22]
 800f8b2:	4442      	add	r2, r8
 800f8b4:	7561      	strb	r1, [r4, #21]
 800f8b6:	1b9e      	subs	r6, r3, r6
 800f8b8:	f080 0001 	eor.w	r0, r0, #1
 800f8bc:	60a2      	str	r2, [r4, #8]
 800f8be:	6126      	str	r6, [r4, #16]
 800f8c0:	b002      	add	sp, #8
 800f8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c6:	2102      	movs	r1, #2
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f000 f9e5 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f8ce:	b190      	cbz	r0, 800f8f6 <ucdr_serialize_int16_t+0xae>
 800f8d0:	7d23      	ldrb	r3, [r4, #20]
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	68a3      	ldr	r3, [r4, #8]
 800f8d6:	d014      	beq.n	800f902 <ucdr_serialize_int16_t+0xba>
 800f8d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f8dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8e0:	7019      	strb	r1, [r3, #0]
 800f8e2:	68a3      	ldr	r3, [r4, #8]
 800f8e4:	705a      	strb	r2, [r3, #1]
 800f8e6:	2102      	movs	r1, #2
 800f8e8:	68a2      	ldr	r2, [r4, #8]
 800f8ea:	6923      	ldr	r3, [r4, #16]
 800f8ec:	440a      	add	r2, r1
 800f8ee:	7561      	strb	r1, [r4, #21]
 800f8f0:	440b      	add	r3, r1
 800f8f2:	60a2      	str	r2, [r4, #8]
 800f8f4:	6123      	str	r3, [r4, #16]
 800f8f6:	7da0      	ldrb	r0, [r4, #22]
 800f8f8:	f080 0001 	eor.w	r0, r0, #1
 800f8fc:	b002      	add	sp, #8
 800f8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f902:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f906:	801a      	strh	r2, [r3, #0]
 800f908:	e7ed      	b.n	800f8e6 <ucdr_serialize_int16_t+0x9e>
 800f90a:	68a2      	ldr	r2, [r4, #8]
 800f90c:	6923      	ldr	r3, [r4, #16]
 800f90e:	7da0      	ldrb	r0, [r4, #22]
 800f910:	1b92      	subs	r2, r2, r6
 800f912:	1b9b      	subs	r3, r3, r6
 800f914:	7567      	strb	r7, [r4, #21]
 800f916:	f080 0001 	eor.w	r0, r0, #1
 800f91a:	60a2      	str	r2, [r4, #8]
 800f91c:	6123      	str	r3, [r4, #16]
 800f91e:	b002      	add	sp, #8
 800f920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f924:	68a3      	ldr	r3, [r4, #8]
 800f926:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f92a:	701a      	strb	r2, [r3, #0]
 800f92c:	e7bc      	b.n	800f8a8 <ucdr_serialize_int16_t+0x60>
 800f92e:	4628      	mov	r0, r5
 800f930:	f10d 0506 	add.w	r5, sp, #6
 800f934:	4632      	mov	r2, r6
 800f936:	4629      	mov	r1, r5
 800f938:	f007 fe47 	bl	80175ca <memcpy>
 800f93c:	4642      	mov	r2, r8
 800f93e:	19a9      	adds	r1, r5, r6
 800f940:	68a0      	ldr	r0, [r4, #8]
 800f942:	f007 fe42 	bl	80175ca <memcpy>
 800f946:	e7af      	b.n	800f8a8 <ucdr_serialize_int16_t+0x60>

0800f948 <ucdr_deserialize_int16_t>:
 800f948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f94c:	4604      	mov	r4, r0
 800f94e:	460d      	mov	r5, r1
 800f950:	2102      	movs	r1, #2
 800f952:	f000 f9f5 	bl	800fd40 <ucdr_buffer_alignment>
 800f956:	4601      	mov	r1, r0
 800f958:	4620      	mov	r0, r4
 800f95a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f95e:	f000 fa37 	bl	800fdd0 <ucdr_advance_buffer>
 800f962:	2102      	movs	r1, #2
 800f964:	4620      	mov	r0, r4
 800f966:	f000 f98b 	bl	800fc80 <ucdr_check_buffer_available_for>
 800f96a:	bb60      	cbnz	r0, 800f9c6 <ucdr_deserialize_int16_t+0x7e>
 800f96c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f970:	42be      	cmp	r6, r7
 800f972:	d923      	bls.n	800f9bc <ucdr_deserialize_int16_t+0x74>
 800f974:	6923      	ldr	r3, [r4, #16]
 800f976:	4620      	mov	r0, r4
 800f978:	60a6      	str	r6, [r4, #8]
 800f97a:	1bf6      	subs	r6, r6, r7
 800f97c:	4433      	add	r3, r6
 800f97e:	f1c6 0902 	rsb	r9, r6, #2
 800f982:	6123      	str	r3, [r4, #16]
 800f984:	4649      	mov	r1, r9
 800f986:	f000 f987 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d034      	beq.n	800f9f8 <ucdr_deserialize_int16_t+0xb0>
 800f98e:	7d23      	ldrb	r3, [r4, #20]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d042      	beq.n	800fa1a <ucdr_deserialize_int16_t+0xd2>
 800f994:	787b      	ldrb	r3, [r7, #1]
 800f996:	702b      	strb	r3, [r5, #0]
 800f998:	2e00      	cmp	r6, #0
 800f99a:	d03a      	beq.n	800fa12 <ucdr_deserialize_int16_t+0xca>
 800f99c:	783b      	ldrb	r3, [r7, #0]
 800f99e:	706b      	strb	r3, [r5, #1]
 800f9a0:	6923      	ldr	r3, [r4, #16]
 800f9a2:	2102      	movs	r1, #2
 800f9a4:	68a2      	ldr	r2, [r4, #8]
 800f9a6:	3302      	adds	r3, #2
 800f9a8:	7da0      	ldrb	r0, [r4, #22]
 800f9aa:	444a      	add	r2, r9
 800f9ac:	7561      	strb	r1, [r4, #21]
 800f9ae:	1b9b      	subs	r3, r3, r6
 800f9b0:	f080 0001 	eor.w	r0, r0, #1
 800f9b4:	60a2      	str	r2, [r4, #8]
 800f9b6:	6123      	str	r3, [r4, #16]
 800f9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9bc:	2102      	movs	r1, #2
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 f96a 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800f9c4:	b180      	cbz	r0, 800f9e8 <ucdr_deserialize_int16_t+0xa0>
 800f9c6:	7d23      	ldrb	r3, [r4, #20]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	68a3      	ldr	r3, [r4, #8]
 800f9cc:	d011      	beq.n	800f9f2 <ucdr_deserialize_int16_t+0xaa>
 800f9ce:	785b      	ldrb	r3, [r3, #1]
 800f9d0:	702b      	strb	r3, [r5, #0]
 800f9d2:	68a3      	ldr	r3, [r4, #8]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	706b      	strb	r3, [r5, #1]
 800f9d8:	2102      	movs	r1, #2
 800f9da:	68a2      	ldr	r2, [r4, #8]
 800f9dc:	6923      	ldr	r3, [r4, #16]
 800f9de:	440a      	add	r2, r1
 800f9e0:	7561      	strb	r1, [r4, #21]
 800f9e2:	440b      	add	r3, r1
 800f9e4:	60a2      	str	r2, [r4, #8]
 800f9e6:	6123      	str	r3, [r4, #16]
 800f9e8:	7da0      	ldrb	r0, [r4, #22]
 800f9ea:	f080 0001 	eor.w	r0, r0, #1
 800f9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9f2:	881b      	ldrh	r3, [r3, #0]
 800f9f4:	802b      	strh	r3, [r5, #0]
 800f9f6:	e7ef      	b.n	800f9d8 <ucdr_deserialize_int16_t+0x90>
 800f9f8:	68a2      	ldr	r2, [r4, #8]
 800f9fa:	6923      	ldr	r3, [r4, #16]
 800f9fc:	1b92      	subs	r2, r2, r6
 800f9fe:	7da0      	ldrb	r0, [r4, #22]
 800fa00:	1b9b      	subs	r3, r3, r6
 800fa02:	f884 8015 	strb.w	r8, [r4, #21]
 800fa06:	f080 0001 	eor.w	r0, r0, #1
 800fa0a:	60a2      	str	r2, [r4, #8]
 800fa0c:	6123      	str	r3, [r4, #16]
 800fa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa12:	68a3      	ldr	r3, [r4, #8]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	706b      	strb	r3, [r5, #1]
 800fa18:	e7c2      	b.n	800f9a0 <ucdr_deserialize_int16_t+0x58>
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f007 fdd3 	bl	80175ca <memcpy>
 800fa24:	464a      	mov	r2, r9
 800fa26:	19a8      	adds	r0, r5, r6
 800fa28:	68a1      	ldr	r1, [r4, #8]
 800fa2a:	f007 fdce 	bl	80175ca <memcpy>
 800fa2e:	e7b7      	b.n	800f9a0 <ucdr_deserialize_int16_t+0x58>

0800fa30 <ucdr_serialize_int32_t>:
 800fa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa34:	b082      	sub	sp, #8
 800fa36:	4604      	mov	r4, r0
 800fa38:	9101      	str	r1, [sp, #4]
 800fa3a:	2104      	movs	r1, #4
 800fa3c:	f000 f980 	bl	800fd40 <ucdr_buffer_alignment>
 800fa40:	4601      	mov	r1, r0
 800fa42:	4620      	mov	r0, r4
 800fa44:	7d67      	ldrb	r7, [r4, #21]
 800fa46:	f000 f9c3 	bl	800fdd0 <ucdr_advance_buffer>
 800fa4a:	2104      	movs	r1, #4
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f000 f917 	bl	800fc80 <ucdr_check_buffer_available_for>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d139      	bne.n	800faca <ucdr_serialize_int32_t+0x9a>
 800fa56:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fa5a:	42ab      	cmp	r3, r5
 800fa5c:	d930      	bls.n	800fac0 <ucdr_serialize_int32_t+0x90>
 800fa5e:	1b5e      	subs	r6, r3, r5
 800fa60:	60a3      	str	r3, [r4, #8]
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	4620      	mov	r0, r4
 800fa66:	f1c6 0804 	rsb	r8, r6, #4
 800fa6a:	4433      	add	r3, r6
 800fa6c:	4641      	mov	r1, r8
 800fa6e:	6123      	str	r3, [r4, #16]
 800fa70:	f000 f912 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800fa74:	2800      	cmp	r0, #0
 800fa76:	d04c      	beq.n	800fb12 <ucdr_serialize_int32_t+0xe2>
 800fa78:	7d23      	ldrb	r3, [r4, #20]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d063      	beq.n	800fb46 <ucdr_serialize_int32_t+0x116>
 800fa7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa82:	702b      	strb	r3, [r5, #0]
 800fa84:	2e00      	cmp	r6, #0
 800fa86:	d051      	beq.n	800fb2c <ucdr_serialize_int32_t+0xfc>
 800fa88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa8c:	2e01      	cmp	r6, #1
 800fa8e:	706b      	strb	r3, [r5, #1]
 800fa90:	d050      	beq.n	800fb34 <ucdr_serialize_int32_t+0x104>
 800fa92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa96:	2e02      	cmp	r6, #2
 800fa98:	70ab      	strb	r3, [r5, #2]
 800fa9a:	d04f      	beq.n	800fb3c <ucdr_serialize_int32_t+0x10c>
 800fa9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800faa0:	70eb      	strb	r3, [r5, #3]
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	2104      	movs	r1, #4
 800faa6:	68a2      	ldr	r2, [r4, #8]
 800faa8:	3304      	adds	r3, #4
 800faaa:	7da0      	ldrb	r0, [r4, #22]
 800faac:	4442      	add	r2, r8
 800faae:	7561      	strb	r1, [r4, #21]
 800fab0:	1b9e      	subs	r6, r3, r6
 800fab2:	f080 0001 	eor.w	r0, r0, #1
 800fab6:	60a2      	str	r2, [r4, #8]
 800fab8:	6126      	str	r6, [r4, #16]
 800faba:	b002      	add	sp, #8
 800fabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac0:	2104      	movs	r1, #4
 800fac2:	4620      	mov	r0, r4
 800fac4:	f000 f8e8 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800fac8:	b1d0      	cbz	r0, 800fb00 <ucdr_serialize_int32_t+0xd0>
 800faca:	7d23      	ldrb	r3, [r4, #20]
 800facc:	2b01      	cmp	r3, #1
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	d01c      	beq.n	800fb0c <ucdr_serialize_int32_t+0xdc>
 800fad2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fad6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fada:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fade:	7018      	strb	r0, [r3, #0]
 800fae0:	68a3      	ldr	r3, [r4, #8]
 800fae2:	705a      	strb	r2, [r3, #1]
 800fae4:	68a3      	ldr	r3, [r4, #8]
 800fae6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800faea:	7099      	strb	r1, [r3, #2]
 800faec:	68a3      	ldr	r3, [r4, #8]
 800faee:	70da      	strb	r2, [r3, #3]
 800faf0:	2104      	movs	r1, #4
 800faf2:	68a2      	ldr	r2, [r4, #8]
 800faf4:	6923      	ldr	r3, [r4, #16]
 800faf6:	440a      	add	r2, r1
 800faf8:	7561      	strb	r1, [r4, #21]
 800fafa:	440b      	add	r3, r1
 800fafc:	60a2      	str	r2, [r4, #8]
 800fafe:	6123      	str	r3, [r4, #16]
 800fb00:	7da0      	ldrb	r0, [r4, #22]
 800fb02:	f080 0001 	eor.w	r0, r0, #1
 800fb06:	b002      	add	sp, #8
 800fb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb0c:	9a01      	ldr	r2, [sp, #4]
 800fb0e:	601a      	str	r2, [r3, #0]
 800fb10:	e7ee      	b.n	800faf0 <ucdr_serialize_int32_t+0xc0>
 800fb12:	68a2      	ldr	r2, [r4, #8]
 800fb14:	6923      	ldr	r3, [r4, #16]
 800fb16:	7da0      	ldrb	r0, [r4, #22]
 800fb18:	1b92      	subs	r2, r2, r6
 800fb1a:	1b9b      	subs	r3, r3, r6
 800fb1c:	7567      	strb	r7, [r4, #21]
 800fb1e:	f080 0001 	eor.w	r0, r0, #1
 800fb22:	60a2      	str	r2, [r4, #8]
 800fb24:	6123      	str	r3, [r4, #16]
 800fb26:	b002      	add	sp, #8
 800fb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb2c:	68a3      	ldr	r3, [r4, #8]
 800fb2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb32:	701a      	strb	r2, [r3, #0]
 800fb34:	68a3      	ldr	r3, [r4, #8]
 800fb36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb3a:	701a      	strb	r2, [r3, #0]
 800fb3c:	68a3      	ldr	r3, [r4, #8]
 800fb3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb42:	701a      	strb	r2, [r3, #0]
 800fb44:	e7ad      	b.n	800faa2 <ucdr_serialize_int32_t+0x72>
 800fb46:	4628      	mov	r0, r5
 800fb48:	ad01      	add	r5, sp, #4
 800fb4a:	4632      	mov	r2, r6
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	f007 fd3c 	bl	80175ca <memcpy>
 800fb52:	4642      	mov	r2, r8
 800fb54:	19a9      	adds	r1, r5, r6
 800fb56:	68a0      	ldr	r0, [r4, #8]
 800fb58:	f007 fd37 	bl	80175ca <memcpy>
 800fb5c:	e7a1      	b.n	800faa2 <ucdr_serialize_int32_t+0x72>
 800fb5e:	bf00      	nop

0800fb60 <ucdr_deserialize_int32_t>:
 800fb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb64:	4604      	mov	r4, r0
 800fb66:	460d      	mov	r5, r1
 800fb68:	2104      	movs	r1, #4
 800fb6a:	f000 f8e9 	bl	800fd40 <ucdr_buffer_alignment>
 800fb6e:	4601      	mov	r1, r0
 800fb70:	4620      	mov	r0, r4
 800fb72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb76:	f000 f92b 	bl	800fdd0 <ucdr_advance_buffer>
 800fb7a:	2104      	movs	r1, #4
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f000 f87f 	bl	800fc80 <ucdr_check_buffer_available_for>
 800fb82:	2800      	cmp	r0, #0
 800fb84:	d138      	bne.n	800fbf8 <ucdr_deserialize_int32_t+0x98>
 800fb86:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fb8a:	42b7      	cmp	r7, r6
 800fb8c:	d92f      	bls.n	800fbee <ucdr_deserialize_int32_t+0x8e>
 800fb8e:	6923      	ldr	r3, [r4, #16]
 800fb90:	4620      	mov	r0, r4
 800fb92:	60a7      	str	r7, [r4, #8]
 800fb94:	1bbf      	subs	r7, r7, r6
 800fb96:	443b      	add	r3, r7
 800fb98:	f1c7 0904 	rsb	r9, r7, #4
 800fb9c:	6123      	str	r3, [r4, #16]
 800fb9e:	4649      	mov	r1, r9
 800fba0:	f000 f87a 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d046      	beq.n	800fc36 <ucdr_deserialize_int32_t+0xd6>
 800fba8:	7d23      	ldrb	r3, [r4, #20]
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d05c      	beq.n	800fc68 <ucdr_deserialize_int32_t+0x108>
 800fbae:	78f3      	ldrb	r3, [r6, #3]
 800fbb0:	702b      	strb	r3, [r5, #0]
 800fbb2:	2f00      	cmp	r7, #0
 800fbb4:	d04c      	beq.n	800fc50 <ucdr_deserialize_int32_t+0xf0>
 800fbb6:	78b3      	ldrb	r3, [r6, #2]
 800fbb8:	2f01      	cmp	r7, #1
 800fbba:	706b      	strb	r3, [r5, #1]
 800fbbc:	f105 0302 	add.w	r3, r5, #2
 800fbc0:	d04a      	beq.n	800fc58 <ucdr_deserialize_int32_t+0xf8>
 800fbc2:	7873      	ldrb	r3, [r6, #1]
 800fbc4:	2f02      	cmp	r7, #2
 800fbc6:	70ab      	strb	r3, [r5, #2]
 800fbc8:	f105 0303 	add.w	r3, r5, #3
 800fbcc:	d048      	beq.n	800fc60 <ucdr_deserialize_int32_t+0x100>
 800fbce:	7833      	ldrb	r3, [r6, #0]
 800fbd0:	70eb      	strb	r3, [r5, #3]
 800fbd2:	6923      	ldr	r3, [r4, #16]
 800fbd4:	2104      	movs	r1, #4
 800fbd6:	68a2      	ldr	r2, [r4, #8]
 800fbd8:	3304      	adds	r3, #4
 800fbda:	7da0      	ldrb	r0, [r4, #22]
 800fbdc:	444a      	add	r2, r9
 800fbde:	7561      	strb	r1, [r4, #21]
 800fbe0:	1bdb      	subs	r3, r3, r7
 800fbe2:	f080 0001 	eor.w	r0, r0, #1
 800fbe6:	60a2      	str	r2, [r4, #8]
 800fbe8:	6123      	str	r3, [r4, #16]
 800fbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbee:	2104      	movs	r1, #4
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 f851 	bl	800fc98 <ucdr_check_final_buffer_behavior>
 800fbf6:	b1b0      	cbz	r0, 800fc26 <ucdr_deserialize_int32_t+0xc6>
 800fbf8:	7d23      	ldrb	r3, [r4, #20]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	68a3      	ldr	r3, [r4, #8]
 800fbfe:	d017      	beq.n	800fc30 <ucdr_deserialize_int32_t+0xd0>
 800fc00:	78db      	ldrb	r3, [r3, #3]
 800fc02:	702b      	strb	r3, [r5, #0]
 800fc04:	68a3      	ldr	r3, [r4, #8]
 800fc06:	789b      	ldrb	r3, [r3, #2]
 800fc08:	706b      	strb	r3, [r5, #1]
 800fc0a:	68a3      	ldr	r3, [r4, #8]
 800fc0c:	785b      	ldrb	r3, [r3, #1]
 800fc0e:	70ab      	strb	r3, [r5, #2]
 800fc10:	68a3      	ldr	r3, [r4, #8]
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	70eb      	strb	r3, [r5, #3]
 800fc16:	2104      	movs	r1, #4
 800fc18:	68a2      	ldr	r2, [r4, #8]
 800fc1a:	6923      	ldr	r3, [r4, #16]
 800fc1c:	440a      	add	r2, r1
 800fc1e:	7561      	strb	r1, [r4, #21]
 800fc20:	440b      	add	r3, r1
 800fc22:	60a2      	str	r2, [r4, #8]
 800fc24:	6123      	str	r3, [r4, #16]
 800fc26:	7da0      	ldrb	r0, [r4, #22]
 800fc28:	f080 0001 	eor.w	r0, r0, #1
 800fc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	602b      	str	r3, [r5, #0]
 800fc34:	e7ef      	b.n	800fc16 <ucdr_deserialize_int32_t+0xb6>
 800fc36:	68a2      	ldr	r2, [r4, #8]
 800fc38:	6923      	ldr	r3, [r4, #16]
 800fc3a:	1bd2      	subs	r2, r2, r7
 800fc3c:	7da0      	ldrb	r0, [r4, #22]
 800fc3e:	1bdb      	subs	r3, r3, r7
 800fc40:	f884 8015 	strb.w	r8, [r4, #21]
 800fc44:	f080 0001 	eor.w	r0, r0, #1
 800fc48:	60a2      	str	r2, [r4, #8]
 800fc4a:	6123      	str	r3, [r4, #16]
 800fc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc50:	68a3      	ldr	r3, [r4, #8]
 800fc52:	789b      	ldrb	r3, [r3, #2]
 800fc54:	706b      	strb	r3, [r5, #1]
 800fc56:	1cab      	adds	r3, r5, #2
 800fc58:	68a2      	ldr	r2, [r4, #8]
 800fc5a:	7852      	ldrb	r2, [r2, #1]
 800fc5c:	f803 2b01 	strb.w	r2, [r3], #1
 800fc60:	68a2      	ldr	r2, [r4, #8]
 800fc62:	7812      	ldrb	r2, [r2, #0]
 800fc64:	701a      	strb	r2, [r3, #0]
 800fc66:	e7b4      	b.n	800fbd2 <ucdr_deserialize_int32_t+0x72>
 800fc68:	4631      	mov	r1, r6
 800fc6a:	463a      	mov	r2, r7
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	f007 fcac 	bl	80175ca <memcpy>
 800fc72:	464a      	mov	r2, r9
 800fc74:	19e8      	adds	r0, r5, r7
 800fc76:	68a1      	ldr	r1, [r4, #8]
 800fc78:	f007 fca7 	bl	80175ca <memcpy>
 800fc7c:	e7a9      	b.n	800fbd2 <ucdr_deserialize_int32_t+0x72>
 800fc7e:	bf00      	nop

0800fc80 <ucdr_check_buffer_available_for>:
 800fc80:	7d83      	ldrb	r3, [r0, #22]
 800fc82:	b93b      	cbnz	r3, 800fc94 <ucdr_check_buffer_available_for+0x14>
 800fc84:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800fc88:	4419      	add	r1, r3
 800fc8a:	4288      	cmp	r0, r1
 800fc8c:	bf34      	ite	cc
 800fc8e:	2000      	movcc	r0, #0
 800fc90:	2001      	movcs	r0, #1
 800fc92:	4770      	bx	lr
 800fc94:	2000      	movs	r0, #0
 800fc96:	4770      	bx	lr

0800fc98 <ucdr_check_final_buffer_behavior>:
 800fc98:	7d83      	ldrb	r3, [r0, #22]
 800fc9a:	b943      	cbnz	r3, 800fcae <ucdr_check_final_buffer_behavior+0x16>
 800fc9c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fca0:	b510      	push	{r4, lr}
 800fca2:	4291      	cmp	r1, r2
 800fca4:	4604      	mov	r4, r0
 800fca6:	d205      	bcs.n	800fcb4 <ucdr_check_final_buffer_behavior+0x1c>
 800fca8:	2301      	movs	r3, #1
 800fcaa:	4618      	mov	r0, r3
 800fcac:	bd10      	pop	{r4, pc}
 800fcae:	2300      	movs	r3, #0
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	4770      	bx	lr
 800fcb4:	6982      	ldr	r2, [r0, #24]
 800fcb6:	b13a      	cbz	r2, 800fcc8 <ucdr_check_final_buffer_behavior+0x30>
 800fcb8:	69c1      	ldr	r1, [r0, #28]
 800fcba:	4790      	blx	r2
 800fcbc:	f080 0301 	eor.w	r3, r0, #1
 800fcc0:	75a0      	strb	r0, [r4, #22]
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	bd10      	pop	{r4, pc}
 800fcc8:	2001      	movs	r0, #1
 800fcca:	75a0      	strb	r0, [r4, #22]
 800fccc:	e7fa      	b.n	800fcc4 <ucdr_check_final_buffer_behavior+0x2c>
 800fcce:	bf00      	nop

0800fcd0 <ucdr_set_on_full_buffer_callback>:
 800fcd0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop

0800fcd8 <ucdr_init_buffer_origin_offset_endian>:
 800fcd8:	b410      	push	{r4}
 800fcda:	9c01      	ldr	r4, [sp, #4]
 800fcdc:	440a      	add	r2, r1
 800fcde:	6001      	str	r1, [r0, #0]
 800fce0:	6042      	str	r2, [r0, #4]
 800fce2:	190a      	adds	r2, r1, r4
 800fce4:	441c      	add	r4, r3
 800fce6:	6082      	str	r2, [r0, #8]
 800fce8:	2200      	movs	r2, #0
 800fcea:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800fcee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fcf2:	7542      	strb	r2, [r0, #21]
 800fcf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcf8:	7582      	strb	r2, [r0, #22]
 800fcfa:	7503      	strb	r3, [r0, #20]
 800fcfc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop

0800fd04 <ucdr_init_buffer_origin_offset>:
 800fd04:	b510      	push	{r4, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	9c04      	ldr	r4, [sp, #16]
 800fd0a:	9400      	str	r4, [sp, #0]
 800fd0c:	2401      	movs	r4, #1
 800fd0e:	9401      	str	r4, [sp, #4]
 800fd10:	f7ff ffe2 	bl	800fcd8 <ucdr_init_buffer_origin_offset_endian>
 800fd14:	b002      	add	sp, #8
 800fd16:	bd10      	pop	{r4, pc}

0800fd18 <ucdr_init_buffer_origin>:
 800fd18:	b510      	push	{r4, lr}
 800fd1a:	2400      	movs	r4, #0
 800fd1c:	b082      	sub	sp, #8
 800fd1e:	9400      	str	r4, [sp, #0]
 800fd20:	f7ff fff0 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 800fd24:	b002      	add	sp, #8
 800fd26:	bd10      	pop	{r4, pc}

0800fd28 <ucdr_init_buffer>:
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f7ff bff5 	b.w	800fd18 <ucdr_init_buffer_origin>
 800fd2e:	bf00      	nop

0800fd30 <ucdr_alignment>:
 800fd30:	fbb0 f2f1 	udiv	r2, r0, r1
 800fd34:	fb02 0011 	mls	r0, r2, r1, r0
 800fd38:	1e4b      	subs	r3, r1, #1
 800fd3a:	1a08      	subs	r0, r1, r0
 800fd3c:	4018      	ands	r0, r3
 800fd3e:	4770      	bx	lr

0800fd40 <ucdr_buffer_alignment>:
 800fd40:	7d43      	ldrb	r3, [r0, #21]
 800fd42:	428b      	cmp	r3, r1
 800fd44:	d209      	bcs.n	800fd5a <ucdr_buffer_alignment+0x1a>
 800fd46:	6903      	ldr	r3, [r0, #16]
 800fd48:	1e4a      	subs	r2, r1, #1
 800fd4a:	fbb3 f0f1 	udiv	r0, r3, r1
 800fd4e:	fb01 3010 	mls	r0, r1, r0, r3
 800fd52:	1a09      	subs	r1, r1, r0
 800fd54:	ea01 0002 	and.w	r0, r1, r2
 800fd58:	4770      	bx	lr
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop

0800fd60 <ucdr_align_to>:
 800fd60:	b538      	push	{r3, r4, r5, lr}
 800fd62:	4604      	mov	r4, r0
 800fd64:	460d      	mov	r5, r1
 800fd66:	f7ff ffeb 	bl	800fd40 <ucdr_buffer_alignment>
 800fd6a:	68a3      	ldr	r3, [r4, #8]
 800fd6c:	7565      	strb	r5, [r4, #21]
 800fd6e:	181a      	adds	r2, r3, r0
 800fd70:	6923      	ldr	r3, [r4, #16]
 800fd72:	4418      	add	r0, r3
 800fd74:	6863      	ldr	r3, [r4, #4]
 800fd76:	4293      	cmp	r3, r2
 800fd78:	6120      	str	r0, [r4, #16]
 800fd7a:	bf28      	it	cs
 800fd7c:	4613      	movcs	r3, r2
 800fd7e:	60a3      	str	r3, [r4, #8]
 800fd80:	bd38      	pop	{r3, r4, r5, pc}
 800fd82:	bf00      	nop

0800fd84 <ucdr_buffer_length>:
 800fd84:	6882      	ldr	r2, [r0, #8]
 800fd86:	6800      	ldr	r0, [r0, #0]
 800fd88:	1a10      	subs	r0, r2, r0
 800fd8a:	4770      	bx	lr

0800fd8c <ucdr_buffer_remaining>:
 800fd8c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fd90:	1a10      	subs	r0, r2, r0
 800fd92:	4770      	bx	lr

0800fd94 <ucdr_check_final_buffer_behavior_array>:
 800fd94:	b538      	push	{r3, r4, r5, lr}
 800fd96:	7d83      	ldrb	r3, [r0, #22]
 800fd98:	b9a3      	cbnz	r3, 800fdc4 <ucdr_check_final_buffer_behavior_array+0x30>
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	460d      	mov	r5, r1
 800fd9e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d300      	bcc.n	800fda8 <ucdr_check_final_buffer_behavior_array+0x14>
 800fda6:	b931      	cbnz	r1, 800fdb6 <ucdr_check_final_buffer_behavior_array+0x22>
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f7ff ffef 	bl	800fd8c <ucdr_buffer_remaining>
 800fdae:	42a8      	cmp	r0, r5
 800fdb0:	bf28      	it	cs
 800fdb2:	4628      	movcs	r0, r5
 800fdb4:	bd38      	pop	{r3, r4, r5, pc}
 800fdb6:	6983      	ldr	r3, [r0, #24]
 800fdb8:	b133      	cbz	r3, 800fdc8 <ucdr_check_final_buffer_behavior_array+0x34>
 800fdba:	69c1      	ldr	r1, [r0, #28]
 800fdbc:	4798      	blx	r3
 800fdbe:	75a0      	strb	r0, [r4, #22]
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	d0f1      	beq.n	800fda8 <ucdr_check_final_buffer_behavior_array+0x14>
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	bd38      	pop	{r3, r4, r5, pc}
 800fdc8:	2301      	movs	r3, #1
 800fdca:	7583      	strb	r3, [r0, #22]
 800fdcc:	e7fa      	b.n	800fdc4 <ucdr_check_final_buffer_behavior_array+0x30>
 800fdce:	bf00      	nop

0800fdd0 <ucdr_advance_buffer>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	460d      	mov	r5, r1
 800fdd6:	f7ff ff53 	bl	800fc80 <ucdr_check_buffer_available_for>
 800fdda:	b178      	cbz	r0, 800fdfc <ucdr_advance_buffer+0x2c>
 800fddc:	6923      	ldr	r3, [r4, #16]
 800fdde:	68a2      	ldr	r2, [r4, #8]
 800fde0:	442b      	add	r3, r5
 800fde2:	442a      	add	r2, r5
 800fde4:	6123      	str	r3, [r4, #16]
 800fde6:	2301      	movs	r3, #1
 800fde8:	60a2      	str	r2, [r4, #8]
 800fdea:	7563      	strb	r3, [r4, #21]
 800fdec:	bd38      	pop	{r3, r4, r5, pc}
 800fdee:	68a2      	ldr	r2, [r4, #8]
 800fdf0:	1a2d      	subs	r5, r5, r0
 800fdf2:	6923      	ldr	r3, [r4, #16]
 800fdf4:	4402      	add	r2, r0
 800fdf6:	4418      	add	r0, r3
 800fdf8:	60a2      	str	r2, [r4, #8]
 800fdfa:	6120      	str	r0, [r4, #16]
 800fdfc:	4629      	mov	r1, r5
 800fdfe:	2201      	movs	r2, #1
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7ff ffc7 	bl	800fd94 <ucdr_check_final_buffer_behavior_array>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d1f1      	bne.n	800fdee <ucdr_advance_buffer+0x1e>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	7563      	strb	r3, [r4, #21]
 800fe0e:	bd38      	pop	{r3, r4, r5, pc}

0800fe10 <uxr_buffer_delete_entity>:
 800fe10:	b510      	push	{r4, lr}
 800fe12:	2300      	movs	r3, #0
 800fe14:	b08e      	sub	sp, #56	; 0x38
 800fe16:	4604      	mov	r4, r0
 800fe18:	9103      	str	r1, [sp, #12]
 800fe1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fe1e:	2303      	movs	r3, #3
 800fe20:	2204      	movs	r2, #4
 800fe22:	9300      	str	r3, [sp, #0]
 800fe24:	ab06      	add	r3, sp, #24
 800fe26:	f001 f86d 	bl	8010f04 <uxr_prepare_stream_to_write_submessage>
 800fe2a:	b918      	cbnz	r0, 800fe34 <uxr_buffer_delete_entity+0x24>
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	4620      	mov	r0, r4
 800fe30:	b00e      	add	sp, #56	; 0x38
 800fe32:	bd10      	pop	{r4, pc}
 800fe34:	9902      	ldr	r1, [sp, #8]
 800fe36:	aa05      	add	r2, sp, #20
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f001 f99f 	bl	801117c <uxr_init_base_object_request>
 800fe3e:	4604      	mov	r4, r0
 800fe40:	a905      	add	r1, sp, #20
 800fe42:	a806      	add	r0, sp, #24
 800fe44:	f002 fb08 	bl	8012458 <uxr_serialize_DELETE_Payload>
 800fe48:	4620      	mov	r0, r4
 800fe4a:	b00e      	add	sp, #56	; 0x38
 800fe4c:	bd10      	pop	{r4, pc}
 800fe4e:	bf00      	nop

0800fe50 <uxr_common_create_entity>:
 800fe50:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fe54:	b510      	push	{r4, lr}
 800fe56:	f1bc 0f01 	cmp.w	ip, #1
 800fe5a:	b08c      	sub	sp, #48	; 0x30
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	9202      	str	r2, [sp, #8]
 800fe60:	bf0c      	ite	eq
 800fe62:	f003 0201 	andeq.w	r2, r3, #1
 800fe66:	2200      	movne	r2, #0
 800fe68:	330e      	adds	r3, #14
 800fe6a:	9103      	str	r1, [sp, #12]
 800fe6c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800fe70:	441a      	add	r2, r3
 800fe72:	ab04      	add	r3, sp, #16
 800fe74:	9101      	str	r1, [sp, #4]
 800fe76:	2101      	movs	r1, #1
 800fe78:	b292      	uxth	r2, r2
 800fe7a:	9100      	str	r1, [sp, #0]
 800fe7c:	9903      	ldr	r1, [sp, #12]
 800fe7e:	f001 f841 	bl	8010f04 <uxr_prepare_stream_to_write_submessage>
 800fe82:	b918      	cbnz	r0, 800fe8c <uxr_common_create_entity+0x3c>
 800fe84:	4604      	mov	r4, r0
 800fe86:	4620      	mov	r0, r4
 800fe88:	b00c      	add	sp, #48	; 0x30
 800fe8a:	bd10      	pop	{r4, pc}
 800fe8c:	9902      	ldr	r1, [sp, #8]
 800fe8e:	4620      	mov	r0, r4
 800fe90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe92:	f001 f973 	bl	801117c <uxr_init_base_object_request>
 800fe96:	4604      	mov	r4, r0
 800fe98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fe9a:	a804      	add	r0, sp, #16
 800fe9c:	f002 fa36 	bl	801230c <uxr_serialize_CREATE_Payload>
 800fea0:	4620      	mov	r0, r4
 800fea2:	b00c      	add	sp, #48	; 0x30
 800fea4:	bd10      	pop	{r4, pc}
 800fea6:	bf00      	nop

0800fea8 <uxr_buffer_create_participant_bin>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800feae:	4605      	mov	r5, r0
 800feb0:	ac11      	add	r4, sp, #68	; 0x44
 800feb2:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800feb6:	2303      	movs	r3, #3
 800feb8:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800febc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fec0:	7223      	strb	r3, [r4, #8]
 800fec2:	2300      	movs	r3, #0
 800fec4:	2201      	movs	r2, #1
 800fec6:	f88d 3014 	strb.w	r3, [sp, #20]
 800feca:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800fecc:	7122      	strb	r2, [r4, #4]
 800fece:	b1cb      	cbz	r3, 800ff04 <uxr_buffer_create_participant_bin+0x5c>
 800fed0:	f88d 201c 	strb.w	r2, [sp, #28]
 800fed4:	9308      	str	r3, [sp, #32]
 800fed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800feda:	a915      	add	r1, sp, #84	; 0x54
 800fedc:	a809      	add	r0, sp, #36	; 0x24
 800fede:	f7ff ff23 	bl	800fd28 <ucdr_init_buffer>
 800fee2:	a905      	add	r1, sp, #20
 800fee4:	a809      	add	r0, sp, #36	; 0x24
 800fee6:	f001 fee7 	bl	8011cb8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800feea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800feec:	9600      	str	r6, [sp, #0]
 800feee:	4628      	mov	r0, r5
 800fef0:	9401      	str	r4, [sp, #4]
 800fef2:	60e3      	str	r3, [r4, #12]
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fefa:	f7ff ffa9 	bl	800fe50 <uxr_common_create_entity>
 800fefe:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800ff02:	bd70      	pop	{r4, r5, r6, pc}
 800ff04:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff08:	e7e5      	b.n	800fed6 <uxr_buffer_create_participant_bin+0x2e>
 800ff0a:	bf00      	nop

0800ff0c <uxr_buffer_create_topic_bin>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800ff12:	4605      	mov	r5, r0
 800ff14:	4618      	mov	r0, r3
 800ff16:	9105      	str	r1, [sp, #20]
 800ff18:	a997      	add	r1, sp, #604	; 0x25c
 800ff1a:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800ff1e:	ac13      	add	r4, sp, #76	; 0x4c
 800ff20:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ff24:	2302      	movs	r3, #2
 800ff26:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800ff2a:	f000 f8ed 	bl	8010108 <uxr_object_id_to_raw>
 800ff2e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800ff30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff34:	a917      	add	r1, sp, #92	; 0x5c
 800ff36:	a80b      	add	r0, sp, #44	; 0x2c
 800ff38:	9306      	str	r3, [sp, #24]
 800ff3a:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800ff3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ff3e:	2303      	movs	r3, #3
 800ff40:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800ff44:	2301      	movs	r3, #1
 800ff46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff50:	f7ff feea 	bl	800fd28 <ucdr_init_buffer>
 800ff54:	a906      	add	r1, sp, #24
 800ff56:	a80b      	add	r0, sp, #44	; 0x2c
 800ff58:	f001 fed0 	bl	8011cfc <uxr_serialize_OBJK_Topic_Binary>
 800ff5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff5e:	4628      	mov	r0, r5
 800ff60:	9600      	str	r6, [sp, #0]
 800ff62:	9316      	str	r3, [sp, #88]	; 0x58
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	9401      	str	r4, [sp, #4]
 800ff68:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ff6c:	f7ff ff70 	bl	800fe50 <uxr_common_create_entity>
 800ff70:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800ff74:	bd70      	pop	{r4, r5, r6, pc}
 800ff76:	bf00      	nop

0800ff78 <uxr_buffer_create_publisher_bin>:
 800ff78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800ff7e:	2603      	movs	r6, #3
 800ff80:	4605      	mov	r5, r0
 800ff82:	4618      	mov	r0, r3
 800ff84:	9105      	str	r1, [sp, #20]
 800ff86:	a992      	add	r1, sp, #584	; 0x248
 800ff88:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800ff8c:	ac0e      	add	r4, sp, #56	; 0x38
 800ff8e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800ff92:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ff96:	f000 f8b7 	bl	8010108 <uxr_object_id_to_raw>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffa0:	a912      	add	r1, sp, #72	; 0x48
 800ffa2:	a806      	add	r0, sp, #24
 800ffa4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800ffa8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800ffac:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800ffb0:	f7ff feba 	bl	800fd28 <ucdr_init_buffer>
 800ffb4:	a993      	add	r1, sp, #588	; 0x24c
 800ffb6:	a806      	add	r0, sp, #24
 800ffb8:	f001 ff54 	bl	8011e64 <uxr_serialize_OBJK_Publisher_Binary>
 800ffbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	9700      	str	r7, [sp, #0]
 800ffc2:	9311      	str	r3, [sp, #68]	; 0x44
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	9401      	str	r4, [sp, #4]
 800ffc8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ffcc:	f7ff ff40 	bl	800fe50 <uxr_common_create_entity>
 800ffd0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800ffd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffd6:	bf00      	nop

0800ffd8 <uxr_buffer_create_datawriter_bin>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ffe0:	4606      	mov	r6, r0
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	2703      	movs	r7, #3
 800ffe6:	ac1d      	add	r4, sp, #116	; 0x74
 800ffe8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800ffec:	9105      	str	r1, [sp, #20]
 800ffee:	a9a1      	add	r1, sp, #644	; 0x284
 800fff0:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800fff4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fff8:	2305      	movs	r3, #5
 800fffa:	7123      	strb	r3, [r4, #4]
 800fffc:	f000 f884 	bl	8010108 <uxr_object_id_to_raw>
 8010000:	a90e      	add	r1, sp, #56	; 0x38
 8010002:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8010004:	7227      	strb	r7, [r4, #8]
 8010006:	f000 f87f 	bl	8010108 <uxr_object_id_to_raw>
 801000a:	2300      	movs	r3, #0
 801000c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010010:	3d00      	subs	r5, #0
 8010012:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8010016:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 801001a:	bf18      	it	ne
 801001c:	2501      	movne	r5, #1
 801001e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010022:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010026:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801002a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801002e:	2301      	movs	r3, #1
 8010030:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010034:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010038:	bb8a      	cbnz	r2, 801009e <uxr_buffer_create_datawriter_bin+0xc6>
 801003a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801003e:	f04f 0c13 	mov.w	ip, #19
 8010042:	250b      	movs	r5, #11
 8010044:	2221      	movs	r2, #33	; 0x21
 8010046:	2111      	movs	r1, #17
 8010048:	2009      	movs	r0, #9
 801004a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801004e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8010052:	b923      	cbnz	r3, 801005e <uxr_buffer_create_datawriter_bin+0x86>
 8010054:	4672      	mov	r2, lr
 8010056:	4661      	mov	r1, ip
 8010058:	4628      	mov	r0, r5
 801005a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 801005e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8010062:	2b01      	cmp	r3, #1
 8010064:	d025      	beq.n	80100b2 <uxr_buffer_create_datawriter_bin+0xda>
 8010066:	2b03      	cmp	r3, #3
 8010068:	d029      	beq.n	80100be <uxr_buffer_create_datawriter_bin+0xe6>
 801006a:	b32b      	cbz	r3, 80100b8 <uxr_buffer_create_datawriter_bin+0xe0>
 801006c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010070:	a921      	add	r1, sp, #132	; 0x84
 8010072:	a806      	add	r0, sp, #24
 8010074:	f7ff fe58 	bl	800fd28 <ucdr_init_buffer>
 8010078:	a90e      	add	r1, sp, #56	; 0x38
 801007a:	a806      	add	r0, sp, #24
 801007c:	f001 ff68 	bl	8011f50 <uxr_serialize_OBJK_DataWriter_Binary>
 8010080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010082:	f8cd 8000 	str.w	r8, [sp]
 8010086:	4630      	mov	r0, r6
 8010088:	9401      	str	r4, [sp, #4]
 801008a:	60e3      	str	r3, [r4, #12]
 801008c:	b29b      	uxth	r3, r3
 801008e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010092:	f7ff fedd 	bl	800fe50 <uxr_common_create_entity>
 8010096:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801009a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80100a2:	f04f 0c12 	mov.w	ip, #18
 80100a6:	250a      	movs	r5, #10
 80100a8:	2220      	movs	r2, #32
 80100aa:	2110      	movs	r1, #16
 80100ac:	2008      	movs	r0, #8
 80100ae:	2702      	movs	r7, #2
 80100b0:	e7cd      	b.n	801004e <uxr_buffer_create_datawriter_bin+0x76>
 80100b2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80100b6:	e7d9      	b.n	801006c <uxr_buffer_create_datawriter_bin+0x94>
 80100b8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80100bc:	e7d6      	b.n	801006c <uxr_buffer_create_datawriter_bin+0x94>
 80100be:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80100c2:	e7d3      	b.n	801006c <uxr_buffer_create_datawriter_bin+0x94>

080100c4 <uxr_object_id>:
 80100c4:	b082      	sub	sp, #8
 80100c6:	2300      	movs	r3, #0
 80100c8:	f88d 1006 	strb.w	r1, [sp, #6]
 80100cc:	f360 030f 	bfi	r3, r0, #0, #16
 80100d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80100d4:	f362 431f 	bfi	r3, r2, #16, #16
 80100d8:	4618      	mov	r0, r3
 80100da:	b002      	add	sp, #8
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <uxr_object_id_from_raw>:
 80100e0:	7843      	ldrb	r3, [r0, #1]
 80100e2:	b082      	sub	sp, #8
 80100e4:	7801      	ldrb	r1, [r0, #0]
 80100e6:	2000      	movs	r0, #0
 80100e8:	091a      	lsrs	r2, r3, #4
 80100ea:	f003 030f 	and.w	r3, r3, #15
 80100ee:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80100f2:	f88d 3006 	strb.w	r3, [sp, #6]
 80100f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80100fa:	f362 000f 	bfi	r0, r2, #0, #16
 80100fe:	f363 401f 	bfi	r0, r3, #16, #16
 8010102:	b002      	add	sp, #8
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop

08010108 <uxr_object_id_to_raw>:
 8010108:	4602      	mov	r2, r0
 801010a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801010e:	b082      	sub	sp, #8
 8010110:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010114:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010118:	f881 c000 	strb.w	ip, [r1]
 801011c:	7048      	strb	r0, [r1, #1]
 801011e:	b002      	add	sp, #8
 8010120:	4770      	bx	lr
 8010122:	bf00      	nop

08010124 <on_get_fragmentation_info>:
 8010124:	b500      	push	{lr}
 8010126:	b08b      	sub	sp, #44	; 0x2c
 8010128:	4601      	mov	r1, r0
 801012a:	2204      	movs	r2, #4
 801012c:	a802      	add	r0, sp, #8
 801012e:	f7ff fdfb 	bl	800fd28 <ucdr_init_buffer>
 8010132:	f10d 0305 	add.w	r3, sp, #5
 8010136:	f10d 0206 	add.w	r2, sp, #6
 801013a:	a901      	add	r1, sp, #4
 801013c:	a802      	add	r0, sp, #8
 801013e:	f001 f9a7 	bl	8011490 <uxr_read_submessage_header>
 8010142:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010146:	2b0d      	cmp	r3, #13
 8010148:	d003      	beq.n	8010152 <on_get_fragmentation_info+0x2e>
 801014a:	2000      	movs	r0, #0
 801014c:	b00b      	add	sp, #44	; 0x2c
 801014e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010152:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010156:	f013 0f02 	tst.w	r3, #2
 801015a:	bf14      	ite	ne
 801015c:	2002      	movne	r0, #2
 801015e:	2001      	moveq	r0, #1
 8010160:	b00b      	add	sp, #44	; 0x2c
 8010162:	f85d fb04 	ldr.w	pc, [sp], #4
 8010166:	bf00      	nop

08010168 <read_submessage_get_info>:
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	2500      	movs	r5, #0
 801016c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010170:	460e      	mov	r6, r1
 8010172:	4604      	mov	r4, r0
 8010174:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010178:	4629      	mov	r1, r5
 801017a:	a810      	add	r0, sp, #64	; 0x40
 801017c:	9503      	str	r5, [sp, #12]
 801017e:	9504      	str	r5, [sp, #16]
 8010180:	f007 f95a 	bl	8017438 <memset>
 8010184:	a903      	add	r1, sp, #12
 8010186:	4630      	mov	r0, r6
 8010188:	f002 f950 	bl	801242c <uxr_deserialize_GET_INFO_Payload>
 801018c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010190:	4620      	mov	r0, r4
 8010192:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010196:	f000 ffe9 	bl	801116c <uxr_session_header_offset>
 801019a:	462b      	mov	r3, r5
 801019c:	220c      	movs	r2, #12
 801019e:	a905      	add	r1, sp, #20
 80101a0:	9000      	str	r0, [sp, #0]
 80101a2:	a808      	add	r0, sp, #32
 80101a4:	f7ff fdae 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 80101a8:	a910      	add	r1, sp, #64	; 0x40
 80101aa:	a808      	add	r0, sp, #32
 80101ac:	f002 f9b2 	bl	8012514 <uxr_serialize_INFO_Payload>
 80101b0:	9b08      	ldr	r3, [sp, #32]
 80101b2:	462a      	mov	r2, r5
 80101b4:	4629      	mov	r1, r5
 80101b6:	4620      	mov	r0, r4
 80101b8:	f000 ff84 	bl	80110c4 <uxr_stamp_session_header>
 80101bc:	a808      	add	r0, sp, #32
 80101be:	f7ff fde1 	bl	800fd84 <ucdr_buffer_length>
 80101c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80101c4:	4602      	mov	r2, r0
 80101c6:	a905      	add	r1, sp, #20
 80101c8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80101cc:	47a0      	blx	r4
 80101ce:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80101d2:	bd70      	pop	{r4, r5, r6, pc}

080101d4 <write_submessage_acknack.isra.0>:
 80101d4:	b570      	push	{r4, r5, r6, lr}
 80101d6:	b092      	sub	sp, #72	; 0x48
 80101d8:	4605      	mov	r5, r0
 80101da:	460e      	mov	r6, r1
 80101dc:	4614      	mov	r4, r2
 80101de:	f000 ffc5 	bl	801116c <uxr_session_header_offset>
 80101e2:	a905      	add	r1, sp, #20
 80101e4:	9000      	str	r0, [sp, #0]
 80101e6:	2300      	movs	r3, #0
 80101e8:	a80a      	add	r0, sp, #40	; 0x28
 80101ea:	2211      	movs	r2, #17
 80101ec:	f7ff fd8a 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 80101f0:	2218      	movs	r2, #24
 80101f2:	2300      	movs	r3, #0
 80101f4:	210a      	movs	r1, #10
 80101f6:	fb02 5404 	mla	r4, r2, r4, r5
 80101fa:	a80a      	add	r0, sp, #40	; 0x28
 80101fc:	2205      	movs	r2, #5
 80101fe:	3450      	adds	r4, #80	; 0x50
 8010200:	f001 f92c 	bl	801145c <uxr_buffer_submessage_header>
 8010204:	a903      	add	r1, sp, #12
 8010206:	4620      	mov	r0, r4
 8010208:	f004 ffb2 	bl	8015170 <uxr_compute_acknack>
 801020c:	ba40      	rev16	r0, r0
 801020e:	a903      	add	r1, sp, #12
 8010210:	f88d 6010 	strb.w	r6, [sp, #16]
 8010214:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010218:	a80a      	add	r0, sp, #40	; 0x28
 801021a:	f002 f9ed 	bl	80125f8 <uxr_serialize_ACKNACK_Payload>
 801021e:	2200      	movs	r2, #0
 8010220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010222:	4628      	mov	r0, r5
 8010224:	4611      	mov	r1, r2
 8010226:	f000 ff4d 	bl	80110c4 <uxr_stamp_session_header>
 801022a:	a80a      	add	r0, sp, #40	; 0x28
 801022c:	f7ff fdaa 	bl	800fd84 <ucdr_buffer_length>
 8010230:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010232:	4602      	mov	r2, r0
 8010234:	a905      	add	r1, sp, #20
 8010236:	e9d3 0400 	ldrd	r0, r4, [r3]
 801023a:	47a0      	blx	r4
 801023c:	b012      	add	sp, #72	; 0x48
 801023e:	bd70      	pop	{r4, r5, r6, pc}

08010240 <uxr_init_session>:
 8010240:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010278 <uxr_init_session+0x38>
 8010244:	2300      	movs	r3, #0
 8010246:	b510      	push	{r4, lr}
 8010248:	4604      	mov	r4, r0
 801024a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801024e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8010252:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8010256:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801025a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801025e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8010262:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8010266:	2181      	movs	r1, #129	; 0x81
 8010268:	f000 fe90 	bl	8010f8c <uxr_init_session_info>
 801026c:	f104 0008 	add.w	r0, r4, #8
 8010270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010274:	f001 b80e 	b.w	8011294 <uxr_init_stream_storage>
	...

08010280 <uxr_set_status_callback>:
 8010280:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop

08010288 <uxr_set_topic_callback>:
 8010288:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop

08010290 <uxr_set_request_callback>:
 8010290:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop

08010298 <uxr_set_reply_callback>:
 8010298:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <uxr_create_output_best_effort_stream>:
 80102a0:	b510      	push	{r4, lr}
 80102a2:	4604      	mov	r4, r0
 80102a4:	b084      	sub	sp, #16
 80102a6:	e9cd 2100 	strd	r2, r1, [sp]
 80102aa:	f000 ff5f 	bl	801116c <uxr_session_header_offset>
 80102ae:	4603      	mov	r3, r0
 80102b0:	f104 0008 	add.w	r0, r4, #8
 80102b4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80102b8:	b004      	add	sp, #16
 80102ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102be:	f001 b82f 	b.w	8011320 <uxr_add_output_best_effort_buffer>
 80102c2:	bf00      	nop

080102c4 <uxr_create_output_reliable_stream>:
 80102c4:	b530      	push	{r4, r5, lr}
 80102c6:	b089      	sub	sp, #36	; 0x24
 80102c8:	4604      	mov	r4, r0
 80102ca:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80102ce:	9303      	str	r3, [sp, #12]
 80102d0:	f000 ff4c 	bl	801116c <uxr_session_header_offset>
 80102d4:	4605      	mov	r5, r0
 80102d6:	9905      	ldr	r1, [sp, #20]
 80102d8:	f104 0008 	add.w	r0, r4, #8
 80102dc:	9500      	str	r5, [sp, #0]
 80102de:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80102e2:	f001 f831 	bl	8011348 <uxr_add_output_reliable_buffer>
 80102e6:	2200      	movs	r2, #0
 80102e8:	fa5f fc80 	uxtb.w	ip, r0
 80102ec:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80102f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80102f4:	0e03      	lsrs	r3, r0, #24
 80102f6:	f36c 0207 	bfi	r2, ip, #0, #8
 80102fa:	f364 220f 	bfi	r2, r4, #8, #8
 80102fe:	f361 4217 	bfi	r2, r1, #16, #8
 8010302:	f363 621f 	bfi	r2, r3, #24, #8
 8010306:	4610      	mov	r0, r2
 8010308:	b009      	add	sp, #36	; 0x24
 801030a:	bd30      	pop	{r4, r5, pc}

0801030c <uxr_create_input_best_effort_stream>:
 801030c:	b082      	sub	sp, #8
 801030e:	3008      	adds	r0, #8
 8010310:	b002      	add	sp, #8
 8010312:	f001 b833 	b.w	801137c <uxr_add_input_best_effort_buffer>
 8010316:	bf00      	nop

08010318 <uxr_create_input_reliable_stream>:
 8010318:	b510      	push	{r4, lr}
 801031a:	4c0c      	ldr	r4, [pc, #48]	; (801034c <uxr_create_input_reliable_stream+0x34>)
 801031c:	b084      	sub	sp, #16
 801031e:	3008      	adds	r0, #8
 8010320:	9400      	str	r4, [sp, #0]
 8010322:	f001 f841 	bl	80113a8 <uxr_add_input_reliable_buffer>
 8010326:	2200      	movs	r2, #0
 8010328:	fa5f fe80 	uxtb.w	lr, r0
 801032c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010330:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010334:	0e03      	lsrs	r3, r0, #24
 8010336:	f36e 0207 	bfi	r2, lr, #0, #8
 801033a:	f36c 220f 	bfi	r2, ip, #8, #8
 801033e:	f361 4217 	bfi	r2, r1, #16, #8
 8010342:	f363 621f 	bfi	r2, r3, #24, #8
 8010346:	4610      	mov	r0, r2
 8010348:	b004      	add	sp, #16
 801034a:	bd10      	pop	{r4, pc}
 801034c:	08010125 	.word	0x08010125

08010350 <uxr_epoch_nanos>:
 8010350:	b510      	push	{r4, lr}
 8010352:	4604      	mov	r4, r0
 8010354:	f001 f8e4 	bl	8011520 <uxr_nanos>
 8010358:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801035c:	1ac0      	subs	r0, r0, r3
 801035e:	eb61 0102 	sbc.w	r1, r1, r2
 8010362:	bd10      	pop	{r4, pc}

08010364 <uxr_flash_output_streams>:
 8010364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010368:	7e03      	ldrb	r3, [r0, #24]
 801036a:	b084      	sub	sp, #16
 801036c:	4604      	mov	r4, r0
 801036e:	b1fb      	cbz	r3, 80103b0 <uxr_flash_output_streams+0x4c>
 8010370:	f04f 0900 	mov.w	r9, #0
 8010374:	f10d 0802 	add.w	r8, sp, #2
 8010378:	af03      	add	r7, sp, #12
 801037a:	ae02      	add	r6, sp, #8
 801037c:	4648      	mov	r0, r9
 801037e:	2201      	movs	r2, #1
 8010380:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010384:	4611      	mov	r1, r2
 8010386:	3508      	adds	r5, #8
 8010388:	f000 ff2a 	bl	80111e0 <uxr_stream_id>
 801038c:	4684      	mov	ip, r0
 801038e:	4643      	mov	r3, r8
 8010390:	463a      	mov	r2, r7
 8010392:	4631      	mov	r1, r6
 8010394:	4628      	mov	r0, r5
 8010396:	f8cd c004 	str.w	ip, [sp, #4]
 801039a:	f004 ff73 	bl	8015284 <uxr_prepare_best_effort_buffer_to_send>
 801039e:	2800      	cmp	r0, #0
 80103a0:	d13d      	bne.n	801041e <uxr_flash_output_streams+0xba>
 80103a2:	f109 0901 	add.w	r9, r9, #1
 80103a6:	7e23      	ldrb	r3, [r4, #24]
 80103a8:	fa5f f089 	uxtb.w	r0, r9
 80103ac:	4283      	cmp	r3, r0
 80103ae:	d8e6      	bhi.n	801037e <uxr_flash_output_streams+0x1a>
 80103b0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80103b4:	b383      	cbz	r3, 8010418 <uxr_flash_output_streams+0xb4>
 80103b6:	f04f 0900 	mov.w	r9, #0
 80103ba:	f10d 0802 	add.w	r8, sp, #2
 80103be:	af03      	add	r7, sp, #12
 80103c0:	ae02      	add	r6, sp, #8
 80103c2:	4648      	mov	r0, r9
 80103c4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80103c8:	2201      	movs	r2, #1
 80103ca:	2102      	movs	r1, #2
 80103cc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80103d0:	f000 ff06 	bl	80111e0 <uxr_stream_id>
 80103d4:	9001      	str	r0, [sp, #4]
 80103d6:	3520      	adds	r5, #32
 80103d8:	e00c      	b.n	80103f4 <uxr_flash_output_streams+0x90>
 80103da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80103de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80103e2:	9b02      	ldr	r3, [sp, #8]
 80103e4:	f000 fe6e 	bl	80110c4 <uxr_stamp_session_header>
 80103e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80103ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80103ee:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80103f2:	47d0      	blx	sl
 80103f4:	4643      	mov	r3, r8
 80103f6:	463a      	mov	r2, r7
 80103f8:	4631      	mov	r1, r6
 80103fa:	4628      	mov	r0, r5
 80103fc:	f005 f964 	bl	80156c8 <uxr_prepare_next_reliable_buffer_to_send>
 8010400:	4603      	mov	r3, r0
 8010402:	4620      	mov	r0, r4
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1e8      	bne.n	80103da <uxr_flash_output_streams+0x76>
 8010408:	f109 0901 	add.w	r9, r9, #1
 801040c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010410:	fa5f f089 	uxtb.w	r0, r9
 8010414:	4283      	cmp	r3, r0
 8010416:	d8d5      	bhi.n	80103c4 <uxr_flash_output_streams+0x60>
 8010418:	b004      	add	sp, #16
 801041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801041e:	9b02      	ldr	r3, [sp, #8]
 8010420:	4620      	mov	r0, r4
 8010422:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010426:	f109 0901 	add.w	r9, r9, #1
 801042a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801042e:	f000 fe49 	bl	80110c4 <uxr_stamp_session_header>
 8010432:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010434:	9a03      	ldr	r2, [sp, #12]
 8010436:	685d      	ldr	r5, [r3, #4]
 8010438:	6818      	ldr	r0, [r3, #0]
 801043a:	9902      	ldr	r1, [sp, #8]
 801043c:	47a8      	blx	r5
 801043e:	7e23      	ldrb	r3, [r4, #24]
 8010440:	fa5f f089 	uxtb.w	r0, r9
 8010444:	4283      	cmp	r3, r0
 8010446:	d89a      	bhi.n	801037e <uxr_flash_output_streams+0x1a>
 8010448:	e7b2      	b.n	80103b0 <uxr_flash_output_streams+0x4c>
 801044a:	bf00      	nop

0801044c <read_submessage_info>:
 801044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010450:	460d      	mov	r5, r1
 8010452:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010456:	4606      	mov	r6, r0
 8010458:	4669      	mov	r1, sp
 801045a:	4628      	mov	r0, r5
 801045c:	f001 fef8 	bl	8012250 <uxr_deserialize_BaseObjectReply>
 8010460:	4604      	mov	r4, r0
 8010462:	a902      	add	r1, sp, #8
 8010464:	4628      	mov	r0, r5
 8010466:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801046a:	f7fe fc99 	bl	800eda0 <ucdr_deserialize_bool>
 801046e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010472:	4004      	ands	r4, r0
 8010474:	b2e4      	uxtb	r4, r4
 8010476:	b95b      	cbnz	r3, 8010490 <read_submessage_info+0x44>
 8010478:	a987      	add	r1, sp, #540	; 0x21c
 801047a:	4628      	mov	r0, r5
 801047c:	f7fe fc90 	bl	800eda0 <ucdr_deserialize_bool>
 8010480:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8010484:	4680      	mov	r8, r0
 8010486:	b94b      	cbnz	r3, 801049c <read_submessage_info+0x50>
 8010488:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801048c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010490:	a903      	add	r1, sp, #12
 8010492:	4628      	mov	r0, r5
 8010494:	f001 fd88 	bl	8011fa8 <uxr_deserialize_ObjectVariant>
 8010498:	4004      	ands	r4, r0
 801049a:	e7ed      	b.n	8010478 <read_submessage_info+0x2c>
 801049c:	a988      	add	r1, sp, #544	; 0x220
 801049e:	4628      	mov	r0, r5
 80104a0:	f7fe fcac 	bl	800edfc <ucdr_deserialize_uint8_t>
 80104a4:	ea14 0f08 	tst.w	r4, r8
 80104a8:	d0ee      	beq.n	8010488 <read_submessage_info+0x3c>
 80104aa:	2800      	cmp	r0, #0
 80104ac:	d0ec      	beq.n	8010488 <read_submessage_info+0x3c>
 80104ae:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80104b2:	2b0d      	cmp	r3, #13
 80104b4:	d1e8      	bne.n	8010488 <read_submessage_info+0x3c>
 80104b6:	a98a      	add	r1, sp, #552	; 0x228
 80104b8:	4628      	mov	r0, r5
 80104ba:	f7ff fa45 	bl	800f948 <ucdr_deserialize_int16_t>
 80104be:	b138      	cbz	r0, 80104d0 <read_submessage_info+0x84>
 80104c0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	dd06      	ble.n	80104d6 <read_submessage_info+0x8a>
 80104c8:	2f00      	cmp	r7, #0
 80104ca:	bf14      	ite	ne
 80104cc:	2001      	movne	r0, #1
 80104ce:	2002      	moveq	r0, #2
 80104d0:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80104d4:	e7d8      	b.n	8010488 <read_submessage_info+0x3c>
 80104d6:	2000      	movs	r0, #0
 80104d8:	e7fa      	b.n	80104d0 <read_submessage_info+0x84>
 80104da:	bf00      	nop

080104dc <read_submessage_list>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	4604      	mov	r4, r0
 80104e2:	b097      	sub	sp, #92	; 0x5c
 80104e4:	460d      	mov	r5, r1
 80104e6:	4ec1      	ldr	r6, [pc, #772]	; (80107ec <read_submessage_list+0x310>)
 80104e8:	9209      	str	r2, [sp, #36]	; 0x24
 80104ea:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80104ee:	aa0c      	add	r2, sp, #48	; 0x30
 80104f0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80104f4:	4628      	mov	r0, r5
 80104f6:	f000 ffcb 	bl	8011490 <uxr_read_submessage_header>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	f000 8142 	beq.w	8010784 <read_submessage_list+0x2a8>
 8010500:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8010504:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8010508:	3b02      	subs	r3, #2
 801050a:	2b0d      	cmp	r3, #13
 801050c:	d8ed      	bhi.n	80104ea <read_submessage_list+0xe>
 801050e:	a101      	add	r1, pc, #4	; (adr r1, 8010514 <read_submessage_list+0x38>)
 8010510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010514:	0801077b 	.word	0x0801077b
 8010518:	080104eb 	.word	0x080104eb
 801051c:	0801076b 	.word	0x0801076b
 8010520:	08010709 	.word	0x08010709
 8010524:	080106ff 	.word	0x080106ff
 8010528:	080104eb 	.word	0x080104eb
 801052c:	080104eb 	.word	0x080104eb
 8010530:	08010655 	.word	0x08010655
 8010534:	080105e7 	.word	0x080105e7
 8010538:	080105a7 	.word	0x080105a7
 801053c:	080104eb 	.word	0x080104eb
 8010540:	080104eb 	.word	0x080104eb
 8010544:	080104eb 	.word	0x080104eb
 8010548:	0801054d 	.word	0x0801054d
 801054c:	a910      	add	r1, sp, #64	; 0x40
 801054e:	4628      	mov	r0, r5
 8010550:	f002 f8a6 	bl	80126a0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010554:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8010558:	f1b8 0f00 	cmp.w	r8, #0
 801055c:	f000 811a 	beq.w	8010794 <read_submessage_list+0x2b8>
 8010560:	f000 ffde 	bl	8011520 <uxr_nanos>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801056c:	2100      	movs	r1, #0
 801056e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010570:	9006      	str	r0, [sp, #24]
 8010572:	468c      	mov	ip, r1
 8010574:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010576:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801057a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801057c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8010580:	468c      	mov	ip, r1
 8010582:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010584:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010588:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801058c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8010590:	fbc7 0106 	smlal	r0, r1, r7, r6
 8010594:	e9cd 0100 	strd	r0, r1, [sp]
 8010598:	4620      	mov	r0, r4
 801059a:	47c0      	blx	r8
 801059c:	f04f 0301 	mov.w	r3, #1
 80105a0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80105a4:	e7a1      	b.n	80104ea <read_submessage_list+0xe>
 80105a6:	a910      	add	r1, sp, #64	; 0x40
 80105a8:	4628      	mov	r0, r5
 80105aa:	f002 f865 	bl	8012678 <uxr_deserialize_HEARTBEAT_Payload>
 80105ae:	2100      	movs	r1, #0
 80105b0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80105b4:	f000 fe42 	bl	801123c <uxr_stream_id_from_raw>
 80105b8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80105bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80105be:	f104 0008 	add.w	r0, r4, #8
 80105c2:	4641      	mov	r1, r8
 80105c4:	f000 ff28 	bl	8011418 <uxr_get_input_reliable_stream>
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d08e      	beq.n	80104ea <read_submessage_list+0xe>
 80105cc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80105d0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80105d4:	f004 fdc0 	bl	8015158 <uxr_process_heartbeat>
 80105d8:	4642      	mov	r2, r8
 80105da:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80105de:	4620      	mov	r0, r4
 80105e0:	f7ff fdf8 	bl	80101d4 <write_submessage_acknack.isra.0>
 80105e4:	e781      	b.n	80104ea <read_submessage_list+0xe>
 80105e6:	a910      	add	r1, sp, #64	; 0x40
 80105e8:	4628      	mov	r0, r5
 80105ea:	f002 f81d 	bl	8012628 <uxr_deserialize_ACKNACK_Payload>
 80105ee:	2100      	movs	r1, #0
 80105f0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80105f4:	f000 fe22 	bl	801123c <uxr_stream_id_from_raw>
 80105f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80105fc:	900d      	str	r0, [sp, #52]	; 0x34
 80105fe:	f104 0008 	add.w	r0, r4, #8
 8010602:	f000 fef3 	bl	80113ec <uxr_get_output_reliable_stream>
 8010606:	4680      	mov	r8, r0
 8010608:	2800      	cmp	r0, #0
 801060a:	f43f af6e 	beq.w	80104ea <read_submessage_list+0xe>
 801060e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8010612:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8010616:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801061a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801061e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010622:	b289      	uxth	r1, r1
 8010624:	f005 f8f8 	bl	8015818 <uxr_process_acknack>
 8010628:	4640      	mov	r0, r8
 801062a:	f005 f8b9 	bl	80157a0 <uxr_begin_output_nack_buffer_it>
 801062e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8010632:	e005      	b.n	8010640 <read_submessage_list+0x164>
 8010634:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010636:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801063a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801063e:	47c8      	blx	r9
 8010640:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8010644:	aa0f      	add	r2, sp, #60	; 0x3c
 8010646:	4651      	mov	r1, sl
 8010648:	4640      	mov	r0, r8
 801064a:	f005 f8ab 	bl	80157a4 <uxr_next_reliable_nack_buffer_to_send>
 801064e:	2800      	cmp	r0, #0
 8010650:	d1f0      	bne.n	8010634 <read_submessage_list+0x158>
 8010652:	e74a      	b.n	80104ea <read_submessage_list+0xe>
 8010654:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8010658:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801065c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8010660:	4628      	mov	r0, r5
 8010662:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8010666:	4651      	mov	r1, sl
 8010668:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801066c:	f1a8 0804 	sub.w	r8, r8, #4
 8010670:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8010674:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8010678:	fa1f f888 	uxth.w	r8, r8
 801067c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010680:	f009 090e 	and.w	r9, r9, #14
 8010684:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8010688:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801068c:	f001 fd2e 	bl	80120ec <uxr_deserialize_BaseObjectRequest>
 8010690:	4650      	mov	r0, sl
 8010692:	a90f      	add	r1, sp, #60	; 0x3c
 8010694:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010698:	f000 fd90 	bl	80111bc <uxr_parse_base_object_request>
 801069c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801069e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80106a2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80106a6:	9110      	str	r1, [sp, #64]	; 0x40
 80106a8:	f1bb 0f00 	cmp.w	fp, #0
 80106ac:	d006      	beq.n	80106bc <read_submessage_list+0x1e0>
 80106ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80106b2:	4652      	mov	r2, sl
 80106b4:	4620      	mov	r0, r4
 80106b6:	9300      	str	r3, [sp, #0]
 80106b8:	2300      	movs	r3, #0
 80106ba:	47d8      	blx	fp
 80106bc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80106be:	b182      	cbz	r2, 80106e2 <read_submessage_list+0x206>
 80106c0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80106c2:	f04f 0c00 	mov.w	ip, #0
 80106c6:	3902      	subs	r1, #2
 80106c8:	e003      	b.n	80106d2 <read_submessage_list+0x1f6>
 80106ca:	f10c 0c01 	add.w	ip, ip, #1
 80106ce:	4594      	cmp	ip, r2
 80106d0:	d007      	beq.n	80106e2 <read_submessage_list+0x206>
 80106d2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80106d6:	4553      	cmp	r3, sl
 80106d8:	d1f7      	bne.n	80106ca <read_submessage_list+0x1ee>
 80106da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80106dc:	2200      	movs	r2, #0
 80106de:	f803 200c 	strb.w	r2, [r3, ip]
 80106e2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80106e6:	464b      	mov	r3, r9
 80106e8:	4642      	mov	r2, r8
 80106ea:	4620      	mov	r0, r4
 80106ec:	9102      	str	r1, [sp, #8]
 80106ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80106f0:	9101      	str	r1, [sp, #4]
 80106f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80106f4:	9100      	str	r1, [sp, #0]
 80106f6:	4629      	mov	r1, r5
 80106f8:	f005 f916 	bl	8015928 <read_submessage_format>
 80106fc:	e6f5      	b.n	80104ea <read_submessage_list+0xe>
 80106fe:	4629      	mov	r1, r5
 8010700:	4620      	mov	r0, r4
 8010702:	f7ff fea3 	bl	801044c <read_submessage_info>
 8010706:	e6f0      	b.n	80104ea <read_submessage_list+0xe>
 8010708:	2a00      	cmp	r2, #0
 801070a:	d03e      	beq.n	801078a <read_submessage_list+0x2ae>
 801070c:	a910      	add	r1, sp, #64	; 0x40
 801070e:	4628      	mov	r0, r5
 8010710:	f001 fee2 	bl	80124d8 <uxr_deserialize_STATUS_Payload>
 8010714:	a90e      	add	r1, sp, #56	; 0x38
 8010716:	aa0d      	add	r2, sp, #52	; 0x34
 8010718:	a810      	add	r0, sp, #64	; 0x40
 801071a:	f000 fd4f 	bl	80111bc <uxr_parse_base_object_request>
 801071e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010720:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8010724:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8010728:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801072c:	910f      	str	r1, [sp, #60]	; 0x3c
 801072e:	f1ba 0f00 	cmp.w	sl, #0
 8010732:	d006      	beq.n	8010742 <read_submessage_list+0x266>
 8010734:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010738:	4642      	mov	r2, r8
 801073a:	4620      	mov	r0, r4
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	464b      	mov	r3, r9
 8010740:	47d0      	blx	sl
 8010742:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8010744:	2a00      	cmp	r2, #0
 8010746:	f43f aed0 	beq.w	80104ea <read_submessage_list+0xe>
 801074a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801074c:	2100      	movs	r1, #0
 801074e:	3802      	subs	r0, #2
 8010750:	e003      	b.n	801075a <read_submessage_list+0x27e>
 8010752:	3101      	adds	r1, #1
 8010754:	4291      	cmp	r1, r2
 8010756:	f43f aec8 	beq.w	80104ea <read_submessage_list+0xe>
 801075a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801075e:	4543      	cmp	r3, r8
 8010760:	d1f7      	bne.n	8010752 <read_submessage_list+0x276>
 8010762:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010764:	f803 9001 	strb.w	r9, [r3, r1]
 8010768:	e6bf      	b.n	80104ea <read_submessage_list+0xe>
 801076a:	2a00      	cmp	r2, #0
 801076c:	f47f aebd 	bne.w	80104ea <read_submessage_list+0xe>
 8010770:	4629      	mov	r1, r5
 8010772:	4620      	mov	r0, r4
 8010774:	f000 fc66 	bl	8011044 <uxr_read_create_session_status>
 8010778:	e6b7      	b.n	80104ea <read_submessage_list+0xe>
 801077a:	4629      	mov	r1, r5
 801077c:	4620      	mov	r0, r4
 801077e:	f7ff fcf3 	bl	8010168 <read_submessage_get_info>
 8010782:	e6b2      	b.n	80104ea <read_submessage_list+0xe>
 8010784:	b017      	add	sp, #92	; 0x5c
 8010786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078a:	4629      	mov	r1, r5
 801078c:	4620      	mov	r0, r4
 801078e:	f000 fc67 	bl	8011060 <uxr_read_delete_session_status>
 8010792:	e6aa      	b.n	80104ea <read_submessage_list+0xe>
 8010794:	f000 fec4 	bl	8011520 <uxr_nanos>
 8010798:	4642      	mov	r2, r8
 801079a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801079c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801079e:	fbc7 3206 	smlal	r3, r2, r7, r6
 80107a2:	1818      	adds	r0, r3, r0
 80107a4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80107a6:	eb42 0101 	adc.w	r1, r2, r1
 80107aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107ac:	4642      	mov	r2, r8
 80107ae:	fbc7 3206 	smlal	r3, r2, r7, r6
 80107b2:	469c      	mov	ip, r3
 80107b4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 80107b8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80107bc:	4643      	mov	r3, r8
 80107be:	eb1c 0c07 	adds.w	ip, ip, r7
 80107c2:	eb42 0203 	adc.w	r2, r2, r3
 80107c6:	ebb0 030c 	subs.w	r3, r0, ip
 80107ca:	eb61 0202 	sbc.w	r2, r1, r2
 80107ce:	2a00      	cmp	r2, #0
 80107d0:	db08      	blt.n	80107e4 <read_submessage_list+0x308>
 80107d2:	085b      	lsrs	r3, r3, #1
 80107d4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80107d8:	1052      	asrs	r2, r2, #1
 80107da:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80107de:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80107e2:	e6db      	b.n	801059c <read_submessage_list+0xc0>
 80107e4:	3301      	adds	r3, #1
 80107e6:	f142 0200 	adc.w	r2, r2, #0
 80107ea:	e7f2      	b.n	80107d2 <read_submessage_list+0x2f6>
 80107ec:	3b9aca00 	.word	0x3b9aca00

080107f0 <listen_message_reliably>:
 80107f0:	1e0b      	subs	r3, r1, #0
 80107f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f6:	bfb8      	it	lt
 80107f8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80107fc:	b09d      	sub	sp, #116	; 0x74
 80107fe:	4680      	mov	r8, r0
 8010800:	9305      	str	r3, [sp, #20]
 8010802:	f000 fe71 	bl	80114e8 <uxr_millis>
 8010806:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801080a:	4681      	mov	r9, r0
 801080c:	2a00      	cmp	r2, #0
 801080e:	f000 809a 	beq.w	8010946 <listen_message_reliably+0x156>
 8010812:	2600      	movs	r6, #0
 8010814:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010818:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801081c:	460f      	mov	r7, r1
 801081e:	4630      	mov	r0, r6
 8010820:	9303      	str	r3, [sp, #12]
 8010822:	e00e      	b.n	8010842 <listen_message_reliably+0x52>
 8010824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010826:	3601      	adds	r6, #1
 8010828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801082a:	455a      	cmp	r2, fp
 801082c:	9903      	ldr	r1, [sp, #12]
 801082e:	b2f0      	uxtb	r0, r6
 8010830:	eb73 0101 	sbcs.w	r1, r3, r1
 8010834:	da01      	bge.n	801083a <listen_message_reliably+0x4a>
 8010836:	4693      	mov	fp, r2
 8010838:	9303      	str	r3, [sp, #12]
 801083a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801083e:	4283      	cmp	r3, r0
 8010840:	d95f      	bls.n	8010902 <listen_message_reliably+0x112>
 8010842:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010846:	2102      	movs	r1, #2
 8010848:	2201      	movs	r2, #1
 801084a:	00e4      	lsls	r4, r4, #3
 801084c:	f000 fcc8 	bl	80111e0 <uxr_stream_id>
 8010850:	4601      	mov	r1, r0
 8010852:	f104 0520 	add.w	r5, r4, #32
 8010856:	463b      	mov	r3, r7
 8010858:	464a      	mov	r2, r9
 801085a:	9109      	str	r1, [sp, #36]	; 0x24
 801085c:	4445      	add	r5, r8
 801085e:	4628      	mov	r0, r5
 8010860:	f004 ff72 	bl	8015748 <uxr_update_output_stream_heartbeat_timestamp>
 8010864:	eb08 0304 	add.w	r3, r8, r4
 8010868:	2800      	cmp	r0, #0
 801086a:	d0db      	beq.n	8010824 <listen_message_reliably+0x34>
 801086c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8010870:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8010874:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010878:	4640      	mov	r0, r8
 801087a:	3501      	adds	r5, #1
 801087c:	4444      	add	r4, r8
 801087e:	9304      	str	r3, [sp, #16]
 8010880:	f000 fc74 	bl	801116c <uxr_session_header_offset>
 8010884:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010888:	2300      	movs	r3, #0
 801088a:	2211      	movs	r2, #17
 801088c:	a90c      	add	r1, sp, #48	; 0x30
 801088e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010892:	9000      	str	r0, [sp, #0]
 8010894:	4650      	mov	r0, sl
 8010896:	3601      	adds	r6, #1
 8010898:	f7ff fa34 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 801089c:	2300      	movs	r3, #0
 801089e:	2205      	movs	r2, #5
 80108a0:	210b      	movs	r1, #11
 80108a2:	4650      	mov	r0, sl
 80108a4:	f000 fdda 	bl	801145c <uxr_buffer_submessage_header>
 80108a8:	2101      	movs	r1, #1
 80108aa:	8968      	ldrh	r0, [r5, #10]
 80108ac:	f005 f906 	bl	8015abc <uxr_seq_num_add>
 80108b0:	892b      	ldrh	r3, [r5, #8]
 80108b2:	4602      	mov	r2, r0
 80108b4:	a90a      	add	r1, sp, #40	; 0x28
 80108b6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80108ba:	4650      	mov	r0, sl
 80108bc:	9b04      	ldr	r3, [sp, #16]
 80108be:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80108c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80108c6:	f001 fec3 	bl	8012650 <uxr_serialize_HEARTBEAT_Payload>
 80108ca:	2200      	movs	r2, #0
 80108cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108ce:	4640      	mov	r0, r8
 80108d0:	4611      	mov	r1, r2
 80108d2:	f000 fbf7 	bl	80110c4 <uxr_stamp_session_header>
 80108d6:	4650      	mov	r0, sl
 80108d8:	f7ff fa54 	bl	800fd84 <ucdr_buffer_length>
 80108dc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80108e0:	4602      	mov	r2, r0
 80108e2:	a90c      	add	r1, sp, #48	; 0x30
 80108e4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80108e8:	47a8      	blx	r5
 80108ea:	9903      	ldr	r1, [sp, #12]
 80108ec:	b2f0      	uxtb	r0, r6
 80108ee:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80108f2:	455a      	cmp	r2, fp
 80108f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80108f8:	db9d      	blt.n	8010836 <listen_message_reliably+0x46>
 80108fa:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80108fe:	4283      	cmp	r3, r0
 8010900:	d89f      	bhi.n	8010842 <listen_message_reliably+0x52>
 8010902:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010906:	9a03      	ldr	r2, [sp, #12]
 8010908:	429a      	cmp	r2, r3
 801090a:	bf08      	it	eq
 801090c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8010910:	d019      	beq.n	8010946 <listen_message_reliably+0x156>
 8010912:	ebab 0309 	sub.w	r3, fp, r9
 8010916:	2b00      	cmp	r3, #0
 8010918:	9d05      	ldr	r5, [sp, #20]
 801091a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 801091e:	aa08      	add	r2, sp, #32
 8010920:	bf08      	it	eq
 8010922:	2301      	moveq	r3, #1
 8010924:	a907      	add	r1, sp, #28
 8010926:	6884      	ldr	r4, [r0, #8]
 8010928:	429d      	cmp	r5, r3
 801092a:	6800      	ldr	r0, [r0, #0]
 801092c:	bfa8      	it	ge
 801092e:	461d      	movge	r5, r3
 8010930:	462b      	mov	r3, r5
 8010932:	47a0      	blx	r4
 8010934:	b948      	cbnz	r0, 801094a <listen_message_reliably+0x15a>
 8010936:	9b05      	ldr	r3, [sp, #20]
 8010938:	1b5b      	subs	r3, r3, r5
 801093a:	2b00      	cmp	r3, #0
 801093c:	9305      	str	r3, [sp, #20]
 801093e:	f73f af60 	bgt.w	8010802 <listen_message_reliably+0x12>
 8010942:	4604      	mov	r4, r0
 8010944:	e012      	b.n	801096c <listen_message_reliably+0x17c>
 8010946:	9b05      	ldr	r3, [sp, #20]
 8010948:	e7e5      	b.n	8010916 <listen_message_reliably+0x126>
 801094a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801094e:	4604      	mov	r4, r0
 8010950:	2500      	movs	r5, #0
 8010952:	a80c      	add	r0, sp, #48	; 0x30
 8010954:	f7ff f9e8 	bl	800fd28 <ucdr_init_buffer>
 8010958:	f10d 031a 	add.w	r3, sp, #26
 801095c:	aa06      	add	r2, sp, #24
 801095e:	a90c      	add	r1, sp, #48	; 0x30
 8010960:	4640      	mov	r0, r8
 8010962:	f88d 5018 	strb.w	r5, [sp, #24]
 8010966:	f000 fbc1 	bl	80110ec <uxr_read_session_header>
 801096a:	b918      	cbnz	r0, 8010974 <listen_message_reliably+0x184>
 801096c:	4620      	mov	r0, r4
 801096e:	b01d      	add	sp, #116	; 0x74
 8010970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010974:	4629      	mov	r1, r5
 8010976:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801097a:	f000 fc5f 	bl	801123c <uxr_stream_id_from_raw>
 801097e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010982:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010986:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801098a:	2e01      	cmp	r6, #1
 801098c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8010990:	d04b      	beq.n	8010a2a <listen_message_reliably+0x23a>
 8010992:	2e02      	cmp	r6, #2
 8010994:	d00f      	beq.n	80109b6 <listen_message_reliably+0x1c6>
 8010996:	2e00      	cmp	r6, #0
 8010998:	d1e8      	bne.n	801096c <listen_message_reliably+0x17c>
 801099a:	4631      	mov	r1, r6
 801099c:	4630      	mov	r0, r6
 801099e:	f000 fc4d 	bl	801123c <uxr_stream_id_from_raw>
 80109a2:	4602      	mov	r2, r0
 80109a4:	a90c      	add	r1, sp, #48	; 0x30
 80109a6:	4640      	mov	r0, r8
 80109a8:	920a      	str	r2, [sp, #40]	; 0x28
 80109aa:	f7ff fd97 	bl	80104dc <read_submessage_list>
 80109ae:	4620      	mov	r0, r4
 80109b0:	b01d      	add	sp, #116	; 0x74
 80109b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b6:	4629      	mov	r1, r5
 80109b8:	f108 0008 	add.w	r0, r8, #8
 80109bc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80109c0:	f000 fd2a 	bl	8011418 <uxr_get_input_reliable_stream>
 80109c4:	4607      	mov	r7, r0
 80109c6:	b338      	cbz	r0, 8010a18 <listen_message_reliably+0x228>
 80109c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109ca:	a80c      	add	r0, sp, #48	; 0x30
 80109cc:	9203      	str	r2, [sp, #12]
 80109ce:	f7ff f9dd 	bl	800fd8c <ucdr_buffer_remaining>
 80109d2:	4603      	mov	r3, r0
 80109d4:	f10d 0019 	add.w	r0, sp, #25
 80109d8:	9a03      	ldr	r2, [sp, #12]
 80109da:	4651      	mov	r1, sl
 80109dc:	9000      	str	r0, [sp, #0]
 80109de:	4638      	mov	r0, r7
 80109e0:	f004 fabe 	bl	8014f60 <uxr_receive_reliable_message>
 80109e4:	b1c0      	cbz	r0, 8010a18 <listen_message_reliably+0x228>
 80109e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80109ea:	b393      	cbz	r3, 8010a52 <listen_message_reliably+0x262>
 80109ec:	ae14      	add	r6, sp, #80	; 0x50
 80109ee:	f04f 0a02 	mov.w	sl, #2
 80109f2:	e00a      	b.n	8010a0a <listen_message_reliably+0x21a>
 80109f4:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80109f8:	4631      	mov	r1, r6
 80109fa:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80109fe:	4640      	mov	r0, r8
 8010a00:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8010a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a06:	f7ff fd69 	bl	80104dc <read_submessage_list>
 8010a0a:	2204      	movs	r2, #4
 8010a0c:	4631      	mov	r1, r6
 8010a0e:	4638      	mov	r0, r7
 8010a10:	f004 fb28 	bl	8015064 <uxr_next_input_reliable_buffer_available>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	d1ed      	bne.n	80109f4 <listen_message_reliably+0x204>
 8010a18:	4640      	mov	r0, r8
 8010a1a:	462a      	mov	r2, r5
 8010a1c:	4649      	mov	r1, r9
 8010a1e:	f7ff fbd9 	bl	80101d4 <write_submessage_acknack.isra.0>
 8010a22:	4620      	mov	r0, r4
 8010a24:	b01d      	add	sp, #116	; 0x74
 8010a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	f108 0008 	add.w	r0, r8, #8
 8010a30:	f000 fce8 	bl	8011404 <uxr_get_input_best_effort_stream>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d099      	beq.n	801096c <listen_message_reliably+0x17c>
 8010a38:	4651      	mov	r1, sl
 8010a3a:	f004 fa07 	bl	8014e4c <uxr_receive_best_effort_message>
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	d094      	beq.n	801096c <listen_message_reliably+0x17c>
 8010a42:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010a46:	a90c      	add	r1, sp, #48	; 0x30
 8010a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a4a:	4640      	mov	r0, r8
 8010a4c:	f7ff fd46 	bl	80104dc <read_submessage_list>
 8010a50:	e78c      	b.n	801096c <listen_message_reliably+0x17c>
 8010a52:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010a56:	a90c      	add	r1, sp, #48	; 0x30
 8010a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	f7ff fd3e 	bl	80104dc <read_submessage_list>
 8010a60:	e7c4      	b.n	80109ec <listen_message_reliably+0x1fc>
 8010a62:	bf00      	nop

08010a64 <uxr_run_session_until_confirm_delivery>:
 8010a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a68:	4606      	mov	r6, r0
 8010a6a:	460d      	mov	r5, r1
 8010a6c:	f000 fd3c 	bl	80114e8 <uxr_millis>
 8010a70:	4607      	mov	r7, r0
 8010a72:	4630      	mov	r0, r6
 8010a74:	f106 0808 	add.w	r8, r6, #8
 8010a78:	f7ff fc74 	bl	8010364 <uxr_flash_output_streams>
 8010a7c:	2d00      	cmp	r5, #0
 8010a7e:	db10      	blt.n	8010aa2 <uxr_run_session_until_confirm_delivery+0x3e>
 8010a80:	462c      	mov	r4, r5
 8010a82:	e006      	b.n	8010a92 <uxr_run_session_until_confirm_delivery+0x2e>
 8010a84:	f7ff feb4 	bl	80107f0 <listen_message_reliably>
 8010a88:	f000 fd2e 	bl	80114e8 <uxr_millis>
 8010a8c:	1bc3      	subs	r3, r0, r7
 8010a8e:	1aec      	subs	r4, r5, r3
 8010a90:	d407      	bmi.n	8010aa2 <uxr_run_session_until_confirm_delivery+0x3e>
 8010a92:	4640      	mov	r0, r8
 8010a94:	f000 fccc 	bl	8011430 <uxr_output_streams_confirmed>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	4621      	mov	r1, r4
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d0f0      	beq.n	8010a84 <uxr_run_session_until_confirm_delivery+0x20>
 8010aa2:	4640      	mov	r0, r8
 8010aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa8:	f000 bcc2 	b.w	8011430 <uxr_output_streams_confirmed>

08010aac <uxr_run_session_until_all_status>:
 8010aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010ab4:	4606      	mov	r6, r0
 8010ab6:	4688      	mov	r8, r1
 8010ab8:	4692      	mov	sl, r2
 8010aba:	461f      	mov	r7, r3
 8010abc:	f7ff fc52 	bl	8010364 <uxr_flash_output_streams>
 8010ac0:	f1bb 0f00 	cmp.w	fp, #0
 8010ac4:	d004      	beq.n	8010ad0 <uxr_run_session_until_all_status+0x24>
 8010ac6:	465a      	mov	r2, fp
 8010ac8:	21ff      	movs	r1, #255	; 0xff
 8010aca:	4638      	mov	r0, r7
 8010acc:	f006 fcb4 	bl	8017438 <memset>
 8010ad0:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8010ad4:	1e7d      	subs	r5, r7, #1
 8010ad6:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8010ada:	f000 fd05 	bl	80114e8 <uxr_millis>
 8010ade:	4641      	mov	r1, r8
 8010ae0:	4681      	mov	r9, r0
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	f7ff fe84 	bl	80107f0 <listen_message_reliably>
 8010ae8:	f000 fcfe 	bl	80114e8 <uxr_millis>
 8010aec:	eba0 0009 	sub.w	r0, r0, r9
 8010af0:	eba8 0100 	sub.w	r1, r8, r0
 8010af4:	f1bb 0f00 	cmp.w	fp, #0
 8010af8:	d029      	beq.n	8010b4e <uxr_run_session_until_all_status+0xa2>
 8010afa:	46ae      	mov	lr, r5
 8010afc:	f04f 0c00 	mov.w	ip, #0
 8010b00:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010b04:	2cff      	cmp	r4, #255	; 0xff
 8010b06:	d015      	beq.n	8010b34 <uxr_run_session_until_all_status+0x88>
 8010b08:	f10c 0c01 	add.w	ip, ip, #1
 8010b0c:	45e3      	cmp	fp, ip
 8010b0e:	d8f7      	bhi.n	8010b00 <uxr_run_session_until_all_status+0x54>
 8010b10:	2300      	movs	r3, #0
 8010b12:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010b14:	e000      	b.n	8010b18 <uxr_run_session_until_all_status+0x6c>
 8010b16:	b158      	cbz	r0, 8010b30 <uxr_run_session_until_all_status+0x84>
 8010b18:	462b      	mov	r3, r5
 8010b1a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8010b1e:	3302      	adds	r3, #2
 8010b20:	2801      	cmp	r0, #1
 8010b22:	eba3 0307 	sub.w	r3, r3, r7
 8010b26:	bf8c      	ite	hi
 8010b28:	2000      	movhi	r0, #0
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	459b      	cmp	fp, r3
 8010b2e:	d8f2      	bhi.n	8010b16 <uxr_run_session_until_all_status+0x6a>
 8010b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b34:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8010b38:	f10c 0c01 	add.w	ip, ip, #1
 8010b3c:	45dc      	cmp	ip, fp
 8010b3e:	d201      	bcs.n	8010b44 <uxr_run_session_until_all_status+0x98>
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d0dd      	beq.n	8010b00 <uxr_run_session_until_all_status+0x54>
 8010b44:	2900      	cmp	r1, #0
 8010b46:	dde3      	ble.n	8010b10 <uxr_run_session_until_all_status+0x64>
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1ca      	bne.n	8010ae2 <uxr_run_session_until_all_status+0x36>
 8010b4c:	e7e0      	b.n	8010b10 <uxr_run_session_until_all_status+0x64>
 8010b4e:	2001      	movs	r0, #1
 8010b50:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8010b54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b58 <wait_session_status>:
 8010b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	b09d      	sub	sp, #116	; 0x74
 8010b60:	20ff      	movs	r0, #255	; 0xff
 8010b62:	9303      	str	r3, [sp, #12]
 8010b64:	7160      	strb	r0, [r4, #5]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f000 80b6 	beq.w	8010cd8 <wait_session_status+0x180>
 8010b6c:	4689      	mov	r9, r1
 8010b6e:	4692      	mov	sl, r2
 8010b70:	f04f 0b00 	mov.w	fp, #0
 8010b74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010b76:	4652      	mov	r2, sl
 8010b78:	4649      	mov	r1, r9
 8010b7a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010b7e:	47a8      	blx	r5
 8010b80:	f000 fcb2 	bl	80114e8 <uxr_millis>
 8010b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b88:	4605      	mov	r5, r0
 8010b8a:	e009      	b.n	8010ba0 <wait_session_status+0x48>
 8010b8c:	f000 fcac 	bl	80114e8 <uxr_millis>
 8010b90:	1b40      	subs	r0, r0, r5
 8010b92:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	dd40      	ble.n	8010c1c <wait_session_status+0xc4>
 8010b9a:	7960      	ldrb	r0, [r4, #5]
 8010b9c:	28ff      	cmp	r0, #255	; 0xff
 8010b9e:	d145      	bne.n	8010c2c <wait_session_status+0xd4>
 8010ba0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010ba2:	a908      	add	r1, sp, #32
 8010ba4:	6896      	ldr	r6, [r2, #8]
 8010ba6:	6810      	ldr	r0, [r2, #0]
 8010ba8:	aa09      	add	r2, sp, #36	; 0x24
 8010baa:	47b0      	blx	r6
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d0ed      	beq.n	8010b8c <wait_session_status+0x34>
 8010bb0:	a80c      	add	r0, sp, #48	; 0x30
 8010bb2:	2600      	movs	r6, #0
 8010bb4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010bb8:	f7ff f8b6 	bl	800fd28 <ucdr_init_buffer>
 8010bbc:	f10d 031e 	add.w	r3, sp, #30
 8010bc0:	aa07      	add	r2, sp, #28
 8010bc2:	a90c      	add	r1, sp, #48	; 0x30
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f88d 601c 	strb.w	r6, [sp, #28]
 8010bca:	f000 fa8f 	bl	80110ec <uxr_read_session_header>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d0dc      	beq.n	8010b8c <wait_session_status+0x34>
 8010bd2:	4631      	mov	r1, r6
 8010bd4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010bd8:	f000 fb30 	bl	801123c <uxr_stream_id_from_raw>
 8010bdc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010be0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010be4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010be8:	2f01      	cmp	r7, #1
 8010bea:	9302      	str	r3, [sp, #8]
 8010bec:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8010bf0:	d05c      	beq.n	8010cac <wait_session_status+0x154>
 8010bf2:	2f02      	cmp	r7, #2
 8010bf4:	d020      	beq.n	8010c38 <wait_session_status+0xe0>
 8010bf6:	2f00      	cmp	r7, #0
 8010bf8:	d1c8      	bne.n	8010b8c <wait_session_status+0x34>
 8010bfa:	4639      	mov	r1, r7
 8010bfc:	4638      	mov	r0, r7
 8010bfe:	f000 fb1d 	bl	801123c <uxr_stream_id_from_raw>
 8010c02:	a90c      	add	r1, sp, #48	; 0x30
 8010c04:	4602      	mov	r2, r0
 8010c06:	900b      	str	r0, [sp, #44]	; 0x2c
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f7ff fc67 	bl	80104dc <read_submessage_list>
 8010c0e:	f000 fc6b 	bl	80114e8 <uxr_millis>
 8010c12:	1b40      	subs	r0, r0, r5
 8010c14:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	dcbe      	bgt.n	8010b9a <wait_session_status+0x42>
 8010c1c:	f10b 0b01 	add.w	fp, fp, #1
 8010c20:	9b03      	ldr	r3, [sp, #12]
 8010c22:	7960      	ldrb	r0, [r4, #5]
 8010c24:	455b      	cmp	r3, fp
 8010c26:	d001      	beq.n	8010c2c <wait_session_status+0xd4>
 8010c28:	28ff      	cmp	r0, #255	; 0xff
 8010c2a:	d0a3      	beq.n	8010b74 <wait_session_status+0x1c>
 8010c2c:	38ff      	subs	r0, #255	; 0xff
 8010c2e:	bf18      	it	ne
 8010c30:	2001      	movne	r0, #1
 8010c32:	b01d      	add	sp, #116	; 0x74
 8010c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c38:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010c3c:	4631      	mov	r1, r6
 8010c3e:	f104 0008 	add.w	r0, r4, #8
 8010c42:	9304      	str	r3, [sp, #16]
 8010c44:	f000 fbe8 	bl	8011418 <uxr_get_input_reliable_stream>
 8010c48:	4680      	mov	r8, r0
 8010c4a:	b348      	cbz	r0, 8010ca0 <wait_session_status+0x148>
 8010c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c4e:	a80c      	add	r0, sp, #48	; 0x30
 8010c50:	9205      	str	r2, [sp, #20]
 8010c52:	f7ff f89b 	bl	800fd8c <ucdr_buffer_remaining>
 8010c56:	4603      	mov	r3, r0
 8010c58:	f10d 001d 	add.w	r0, sp, #29
 8010c5c:	9a05      	ldr	r2, [sp, #20]
 8010c5e:	9000      	str	r0, [sp, #0]
 8010c60:	4640      	mov	r0, r8
 8010c62:	9902      	ldr	r1, [sp, #8]
 8010c64:	f004 f97c 	bl	8014f60 <uxr_receive_reliable_message>
 8010c68:	b1d0      	cbz	r0, 8010ca0 <wait_session_status+0x148>
 8010c6a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d03a      	beq.n	8010ce8 <wait_session_status+0x190>
 8010c72:	9f04      	ldr	r7, [sp, #16]
 8010c74:	e00a      	b.n	8010c8c <wait_session_status+0x134>
 8010c76:	f04f 0302 	mov.w	r3, #2
 8010c7a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8010c7e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010c82:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8010c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c88:	f7ff fc28 	bl	80104dc <read_submessage_list>
 8010c8c:	a914      	add	r1, sp, #80	; 0x50
 8010c8e:	2204      	movs	r2, #4
 8010c90:	4640      	mov	r0, r8
 8010c92:	f004 f9e7 	bl	8015064 <uxr_next_input_reliable_buffer_available>
 8010c96:	4603      	mov	r3, r0
 8010c98:	a914      	add	r1, sp, #80	; 0x50
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d1ea      	bne.n	8010c76 <wait_session_status+0x11e>
 8010ca0:	4632      	mov	r2, r6
 8010ca2:	9904      	ldr	r1, [sp, #16]
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f7ff fa95 	bl	80101d4 <write_submessage_acknack.isra.0>
 8010caa:	e76f      	b.n	8010b8c <wait_session_status+0x34>
 8010cac:	4631      	mov	r1, r6
 8010cae:	f104 0008 	add.w	r0, r4, #8
 8010cb2:	f000 fba7 	bl	8011404 <uxr_get_input_best_effort_stream>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f43f af68 	beq.w	8010b8c <wait_session_status+0x34>
 8010cbc:	9902      	ldr	r1, [sp, #8]
 8010cbe:	f004 f8c5 	bl	8014e4c <uxr_receive_best_effort_message>
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	f43f af62 	beq.w	8010b8c <wait_session_status+0x34>
 8010cc8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010ccc:	a90c      	add	r1, sp, #48	; 0x30
 8010cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f7ff fc03 	bl	80104dc <read_submessage_list>
 8010cd6:	e759      	b.n	8010b8c <wait_session_status+0x34>
 8010cd8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010cda:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010cde:	47a0      	blx	r4
 8010ce0:	2001      	movs	r0, #1
 8010ce2:	b01d      	add	sp, #116	; 0x74
 8010ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010cec:	a90c      	add	r1, sp, #48	; 0x30
 8010cee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f7ff fbf3 	bl	80104dc <read_submessage_list>
 8010cf6:	e7bc      	b.n	8010c72 <wait_session_status+0x11a>

08010cf8 <uxr_delete_session_retries>:
 8010cf8:	b530      	push	{r4, r5, lr}
 8010cfa:	b08f      	sub	sp, #60	; 0x3c
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	460d      	mov	r5, r1
 8010d00:	f000 fa34 	bl	801116c <uxr_session_header_offset>
 8010d04:	2300      	movs	r3, #0
 8010d06:	2210      	movs	r2, #16
 8010d08:	a902      	add	r1, sp, #8
 8010d0a:	9000      	str	r0, [sp, #0]
 8010d0c:	a806      	add	r0, sp, #24
 8010d0e:	f7fe fff9 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 8010d12:	a906      	add	r1, sp, #24
 8010d14:	4620      	mov	r0, r4
 8010d16:	f000 f979 	bl	801100c <uxr_buffer_delete_session>
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	9b06      	ldr	r3, [sp, #24]
 8010d1e:	4620      	mov	r0, r4
 8010d20:	4611      	mov	r1, r2
 8010d22:	f000 f9cf 	bl	80110c4 <uxr_stamp_session_header>
 8010d26:	a806      	add	r0, sp, #24
 8010d28:	f7ff f82c 	bl	800fd84 <ucdr_buffer_length>
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	4602      	mov	r2, r0
 8010d30:	a902      	add	r1, sp, #8
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7ff ff10 	bl	8010b58 <wait_session_status>
 8010d38:	b118      	cbz	r0, 8010d42 <uxr_delete_session_retries+0x4a>
 8010d3a:	7960      	ldrb	r0, [r4, #5]
 8010d3c:	fab0 f080 	clz	r0, r0
 8010d40:	0940      	lsrs	r0, r0, #5
 8010d42:	b00f      	add	sp, #60	; 0x3c
 8010d44:	bd30      	pop	{r4, r5, pc}
 8010d46:	bf00      	nop

08010d48 <uxr_create_session>:
 8010d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4c:	f100 0b08 	add.w	fp, r0, #8
 8010d50:	4604      	mov	r4, r0
 8010d52:	b0ab      	sub	sp, #172	; 0xac
 8010d54:	4658      	mov	r0, fp
 8010d56:	465e      	mov	r6, fp
 8010d58:	f000 faa6 	bl	80112a8 <uxr_reset_stream_storage>
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f000 fa05 	bl	801116c <uxr_session_header_offset>
 8010d62:	2300      	movs	r3, #0
 8010d64:	221c      	movs	r2, #28
 8010d66:	a90b      	add	r1, sp, #44	; 0x2c
 8010d68:	9000      	str	r0, [sp, #0]
 8010d6a:	a812      	add	r0, sp, #72	; 0x48
 8010d6c:	f7fe ffca 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 8010d70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d72:	a912      	add	r1, sp, #72	; 0x48
 8010d74:	4620      	mov	r0, r4
 8010d76:	8a1a      	ldrh	r2, [r3, #16]
 8010d78:	3a04      	subs	r2, #4
 8010d7a:	b292      	uxth	r2, r2
 8010d7c:	f000 f91c 	bl	8010fb8 <uxr_buffer_create_session>
 8010d80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010d82:	4620      	mov	r0, r4
 8010d84:	f000 f98a 	bl	801109c <uxr_stamp_create_session_header>
 8010d88:	a812      	add	r0, sp, #72	; 0x48
 8010d8a:	f7fe fffb 	bl	800fd84 <ucdr_buffer_length>
 8010d8e:	23ff      	movs	r3, #255	; 0xff
 8010d90:	4681      	mov	r9, r0
 8010d92:	7163      	strb	r3, [r4, #5]
 8010d94:	230a      	movs	r3, #10
 8010d96:	9303      	str	r3, [sp, #12]
 8010d98:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d9a:	464a      	mov	r2, r9
 8010d9c:	a90b      	add	r1, sp, #44	; 0x2c
 8010d9e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010da2:	47a8      	blx	r5
 8010da4:	f000 fba0 	bl	80114e8 <uxr_millis>
 8010da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010dac:	4605      	mov	r5, r0
 8010dae:	e009      	b.n	8010dc4 <uxr_create_session+0x7c>
 8010db0:	f000 fb9a 	bl	80114e8 <uxr_millis>
 8010db4:	1b40      	subs	r0, r0, r5
 8010db6:	7962      	ldrb	r2, [r4, #5]
 8010db8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	dd38      	ble.n	8010e32 <uxr_create_session+0xea>
 8010dc0:	2aff      	cmp	r2, #255	; 0xff
 8010dc2:	d13c      	bne.n	8010e3e <uxr_create_session+0xf6>
 8010dc4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010dc6:	a907      	add	r1, sp, #28
 8010dc8:	6897      	ldr	r7, [r2, #8]
 8010dca:	6810      	ldr	r0, [r2, #0]
 8010dcc:	aa08      	add	r2, sp, #32
 8010dce:	47b8      	blx	r7
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d0ed      	beq.n	8010db0 <uxr_create_session+0x68>
 8010dd4:	a81a      	add	r0, sp, #104	; 0x68
 8010dd6:	2700      	movs	r7, #0
 8010dd8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010ddc:	f7fe ffa4 	bl	800fd28 <ucdr_init_buffer>
 8010de0:	f10d 031a 	add.w	r3, sp, #26
 8010de4:	aa06      	add	r2, sp, #24
 8010de6:	a91a      	add	r1, sp, #104	; 0x68
 8010de8:	4620      	mov	r0, r4
 8010dea:	f88d 7018 	strb.w	r7, [sp, #24]
 8010dee:	f000 f97d 	bl	80110ec <uxr_read_session_header>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	d0dc      	beq.n	8010db0 <uxr_create_session+0x68>
 8010df6:	4639      	mov	r1, r7
 8010df8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010dfc:	f000 fa1e 	bl	801123c <uxr_stream_id_from_raw>
 8010e00:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010e04:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8010e08:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8010e0c:	2f01      	cmp	r7, #1
 8010e0e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8010e12:	d053      	beq.n	8010ebc <uxr_create_session+0x174>
 8010e14:	2f02      	cmp	r7, #2
 8010e16:	d018      	beq.n	8010e4a <uxr_create_session+0x102>
 8010e18:	2f00      	cmp	r7, #0
 8010e1a:	d1c9      	bne.n	8010db0 <uxr_create_session+0x68>
 8010e1c:	4639      	mov	r1, r7
 8010e1e:	4638      	mov	r0, r7
 8010e20:	f000 fa0c 	bl	801123c <uxr_stream_id_from_raw>
 8010e24:	a91a      	add	r1, sp, #104	; 0x68
 8010e26:	4602      	mov	r2, r0
 8010e28:	900a      	str	r0, [sp, #40]	; 0x28
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f7ff fb56 	bl	80104dc <read_submessage_list>
 8010e30:	e7be      	b.n	8010db0 <uxr_create_session+0x68>
 8010e32:	9b03      	ldr	r3, [sp, #12]
 8010e34:	3b01      	subs	r3, #1
 8010e36:	9303      	str	r3, [sp, #12]
 8010e38:	d001      	beq.n	8010e3e <uxr_create_session+0xf6>
 8010e3a:	2aff      	cmp	r2, #255	; 0xff
 8010e3c:	d0ac      	beq.n	8010d98 <uxr_create_session+0x50>
 8010e3e:	2a00      	cmp	r2, #0
 8010e40:	d051      	beq.n	8010ee6 <uxr_create_session+0x19e>
 8010e42:	2000      	movs	r0, #0
 8010e44:	b02b      	add	sp, #172	; 0xac
 8010e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010e4e:	4641      	mov	r1, r8
 8010e50:	4630      	mov	r0, r6
 8010e52:	9304      	str	r3, [sp, #16]
 8010e54:	f000 fae0 	bl	8011418 <uxr_get_input_reliable_stream>
 8010e58:	4682      	mov	sl, r0
 8010e5a:	b348      	cbz	r0, 8010eb0 <uxr_create_session+0x168>
 8010e5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010e5e:	a81a      	add	r0, sp, #104	; 0x68
 8010e60:	9205      	str	r2, [sp, #20]
 8010e62:	f7fe ff93 	bl	800fd8c <ucdr_buffer_remaining>
 8010e66:	4603      	mov	r3, r0
 8010e68:	f10d 0019 	add.w	r0, sp, #25
 8010e6c:	9a05      	ldr	r2, [sp, #20]
 8010e6e:	4659      	mov	r1, fp
 8010e70:	9000      	str	r0, [sp, #0]
 8010e72:	4650      	mov	r0, sl
 8010e74:	f004 f874 	bl	8014f60 <uxr_receive_reliable_message>
 8010e78:	b1d0      	cbz	r0, 8010eb0 <uxr_create_session+0x168>
 8010e7a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d038      	beq.n	8010ef4 <uxr_create_session+0x1ac>
 8010e82:	9f04      	ldr	r7, [sp, #16]
 8010e84:	e00a      	b.n	8010e9c <uxr_create_session+0x154>
 8010e86:	f04f 0302 	mov.w	r3, #2
 8010e8a:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8010e8e:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8010e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e98:	f7ff fb20 	bl	80104dc <read_submessage_list>
 8010e9c:	a922      	add	r1, sp, #136	; 0x88
 8010e9e:	2204      	movs	r2, #4
 8010ea0:	4650      	mov	r0, sl
 8010ea2:	f004 f8df 	bl	8015064 <uxr_next_input_reliable_buffer_available>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	a922      	add	r1, sp, #136	; 0x88
 8010eaa:	4620      	mov	r0, r4
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1ea      	bne.n	8010e86 <uxr_create_session+0x13e>
 8010eb0:	4642      	mov	r2, r8
 8010eb2:	9904      	ldr	r1, [sp, #16]
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f7ff f98d 	bl	80101d4 <write_submessage_acknack.isra.0>
 8010eba:	e779      	b.n	8010db0 <uxr_create_session+0x68>
 8010ebc:	4641      	mov	r1, r8
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f000 faa0 	bl	8011404 <uxr_get_input_best_effort_stream>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	f43f af73 	beq.w	8010db0 <uxr_create_session+0x68>
 8010eca:	4659      	mov	r1, fp
 8010ecc:	f003 ffbe 	bl	8014e4c <uxr_receive_best_effort_message>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	f43f af6d 	beq.w	8010db0 <uxr_create_session+0x68>
 8010ed6:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8010eda:	a91a      	add	r1, sp, #104	; 0x68
 8010edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f7ff fafc 	bl	80104dc <read_submessage_list>
 8010ee4:	e764      	b.n	8010db0 <uxr_create_session+0x68>
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f000 f9de 	bl	80112a8 <uxr_reset_stream_storage>
 8010eec:	2001      	movs	r0, #1
 8010eee:	b02b      	add	sp, #172	; 0xac
 8010ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef4:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8010ef8:	a91a      	add	r1, sp, #104	; 0x68
 8010efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010efc:	4620      	mov	r0, r4
 8010efe:	f7ff faed 	bl	80104dc <read_submessage_list>
 8010f02:	e7be      	b.n	8010e82 <uxr_create_session+0x13a>

08010f04 <uxr_prepare_stream_to_write_submessage>:
 8010f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f08:	b082      	sub	sp, #8
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	4610      	mov	r0, r2
 8010f0e:	4615      	mov	r5, r2
 8010f10:	461e      	mov	r6, r3
 8010f12:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8010f16:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8010f1a:	f105 0904 	add.w	r9, r5, #4
 8010f1e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8010f22:	9101      	str	r1, [sp, #4]
 8010f24:	f000 fada 	bl	80114dc <uxr_submessage_padding>
 8010f28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f2c:	4481      	add	r9, r0
 8010f2e:	2b01      	cmp	r3, #1
 8010f30:	d01d      	beq.n	8010f6e <uxr_prepare_stream_to_write_submessage+0x6a>
 8010f32:	2b02      	cmp	r3, #2
 8010f34:	d116      	bne.n	8010f64 <uxr_prepare_stream_to_write_submessage+0x60>
 8010f36:	f104 0008 	add.w	r0, r4, #8
 8010f3a:	4651      	mov	r1, sl
 8010f3c:	f000 fa56 	bl	80113ec <uxr_get_output_reliable_stream>
 8010f40:	4604      	mov	r4, r0
 8010f42:	b158      	cbz	r0, 8010f5c <uxr_prepare_stream_to_write_submessage+0x58>
 8010f44:	4649      	mov	r1, r9
 8010f46:	4632      	mov	r2, r6
 8010f48:	f004 fa50 	bl	80153ec <uxr_prepare_reliable_buffer_to_write>
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	b12c      	cbz	r4, 8010f5c <uxr_prepare_stream_to_write_submessage+0x58>
 8010f50:	4643      	mov	r3, r8
 8010f52:	b2aa      	uxth	r2, r5
 8010f54:	4639      	mov	r1, r7
 8010f56:	4630      	mov	r0, r6
 8010f58:	f000 fa80 	bl	801145c <uxr_buffer_submessage_header>
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	b002      	add	sp, #8
 8010f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f64:	2400      	movs	r4, #0
 8010f66:	4620      	mov	r0, r4
 8010f68:	b002      	add	sp, #8
 8010f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f6e:	f104 0008 	add.w	r0, r4, #8
 8010f72:	4651      	mov	r1, sl
 8010f74:	f000 fa32 	bl	80113dc <uxr_get_output_best_effort_stream>
 8010f78:	4604      	mov	r4, r0
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d0ee      	beq.n	8010f5c <uxr_prepare_stream_to_write_submessage+0x58>
 8010f7e:	4649      	mov	r1, r9
 8010f80:	4632      	mov	r2, r6
 8010f82:	f004 f95f 	bl	8015244 <uxr_prepare_best_effort_buffer_to_write>
 8010f86:	4604      	mov	r4, r0
 8010f88:	e7e1      	b.n	8010f4e <uxr_prepare_stream_to_write_submessage+0x4a>
 8010f8a:	bf00      	nop

08010f8c <uxr_init_session_info>:
 8010f8c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8010f90:	23ff      	movs	r3, #255	; 0xff
 8010f92:	7102      	strb	r2, [r0, #4]
 8010f94:	f880 c001 	strb.w	ip, [r0, #1]
 8010f98:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010f9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010fa0:	7001      	strb	r1, [r0, #0]
 8010fa2:	f880 c002 	strb.w	ip, [r0, #2]
 8010fa6:	7143      	strb	r3, [r0, #5]
 8010fa8:	70c2      	strb	r2, [r0, #3]
 8010faa:	b500      	push	{lr}
 8010fac:	f04f 0e09 	mov.w	lr, #9
 8010fb0:	f8a0 e006 	strh.w	lr, [r0, #6]
 8010fb4:	f85d fb04 	ldr.w	pc, [sp], #4

08010fb8 <uxr_buffer_create_session>:
 8010fb8:	b530      	push	{r4, r5, lr}
 8010fba:	2300      	movs	r3, #0
 8010fbc:	b089      	sub	sp, #36	; 0x24
 8010fbe:	4d12      	ldr	r5, [pc, #72]	; (8011008 <uxr_buffer_create_session+0x50>)
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	9307      	str	r3, [sp, #28]
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	9301      	str	r3, [sp, #4]
 8010fce:	80c2      	strh	r2, [r0, #6]
 8010fd0:	f88d 2004 	strb.w	r2, [sp, #4]
 8010fd4:	682a      	ldr	r2, [r5, #0]
 8010fd6:	9303      	str	r3, [sp, #12]
 8010fd8:	9200      	str	r2, [sp, #0]
 8010fda:	88aa      	ldrh	r2, [r5, #4]
 8010fdc:	9306      	str	r3, [sp, #24]
 8010fde:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010fe2:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010fe6:	9202      	str	r2, [sp, #8]
 8010fe8:	7802      	ldrb	r2, [r0, #0]
 8010fea:	4620      	mov	r0, r4
 8010fec:	f88d 200c 	strb.w	r2, [sp, #12]
 8010ff0:	2210      	movs	r2, #16
 8010ff2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010ff6:	f000 fa31 	bl	801145c <uxr_buffer_submessage_header>
 8010ffa:	4669      	mov	r1, sp
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f001 f983 	bl	8012308 <uxr_serialize_CREATE_CLIENT_Payload>
 8011002:	b009      	add	sp, #36	; 0x24
 8011004:	bd30      	pop	{r4, r5, pc}
 8011006:	bf00      	nop
 8011008:	08018464 	.word	0x08018464

0801100c <uxr_buffer_delete_session>:
 801100c:	4a0c      	ldr	r2, [pc, #48]	; (8011040 <uxr_buffer_delete_session+0x34>)
 801100e:	2302      	movs	r3, #2
 8011010:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8011014:	b510      	push	{r4, lr}
 8011016:	460c      	mov	r4, r1
 8011018:	b082      	sub	sp, #8
 801101a:	8911      	ldrh	r1, [r2, #8]
 801101c:	2204      	movs	r2, #4
 801101e:	80c3      	strh	r3, [r0, #6]
 8011020:	2300      	movs	r3, #0
 8011022:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011026:	4620      	mov	r0, r4
 8011028:	2103      	movs	r1, #3
 801102a:	f8ad c004 	strh.w	ip, [sp, #4]
 801102e:	f000 fa15 	bl	801145c <uxr_buffer_submessage_header>
 8011032:	a901      	add	r1, sp, #4
 8011034:	4620      	mov	r0, r4
 8011036:	f001 fa0f 	bl	8012458 <uxr_serialize_DELETE_Payload>
 801103a:	b002      	add	sp, #8
 801103c:	bd10      	pop	{r4, pc}
 801103e:	bf00      	nop
 8011040:	08018464 	.word	0x08018464

08011044 <uxr_read_create_session_status>:
 8011044:	b510      	push	{r4, lr}
 8011046:	460b      	mov	r3, r1
 8011048:	b088      	sub	sp, #32
 801104a:	4604      	mov	r4, r0
 801104c:	a901      	add	r1, sp, #4
 801104e:	4618      	mov	r0, r3
 8011050:	f001 fa12 	bl	8012478 <uxr_deserialize_STATUS_AGENT_Payload>
 8011054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011058:	7163      	strb	r3, [r4, #5]
 801105a:	b008      	add	sp, #32
 801105c:	bd10      	pop	{r4, pc}
 801105e:	bf00      	nop

08011060 <uxr_read_delete_session_status>:
 8011060:	b510      	push	{r4, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	4604      	mov	r4, r0
 8011066:	4608      	mov	r0, r1
 8011068:	a902      	add	r1, sp, #8
 801106a:	f001 fa35 	bl	80124d8 <uxr_deserialize_STATUS_Payload>
 801106e:	88e3      	ldrh	r3, [r4, #6]
 8011070:	2b02      	cmp	r3, #2
 8011072:	d001      	beq.n	8011078 <uxr_read_delete_session_status+0x18>
 8011074:	b004      	add	sp, #16
 8011076:	bd10      	pop	{r4, pc}
 8011078:	f10d 000a 	add.w	r0, sp, #10
 801107c:	f7ff f830 	bl	80100e0 <uxr_object_id_from_raw>
 8011080:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011084:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011088:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801108c:	b29b      	uxth	r3, r3
 801108e:	2b02      	cmp	r3, #2
 8011090:	d1f0      	bne.n	8011074 <uxr_read_delete_session_status+0x14>
 8011092:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011096:	7163      	strb	r3, [r4, #5]
 8011098:	e7ec      	b.n	8011074 <uxr_read_delete_session_status+0x14>
 801109a:	bf00      	nop

0801109c <uxr_stamp_create_session_header>:
 801109c:	b510      	push	{r4, lr}
 801109e:	2208      	movs	r2, #8
 80110a0:	b08a      	sub	sp, #40	; 0x28
 80110a2:	4604      	mov	r4, r0
 80110a4:	eb0d 0002 	add.w	r0, sp, r2
 80110a8:	f7fe fe3e 	bl	800fd28 <ucdr_init_buffer>
 80110ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110b0:	2300      	movs	r3, #0
 80110b2:	a802      	add	r0, sp, #8
 80110b4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80110b8:	9400      	str	r4, [sp, #0]
 80110ba:	461a      	mov	r2, r3
 80110bc:	f000 fbca 	bl	8011854 <uxr_serialize_message_header>
 80110c0:	b00a      	add	sp, #40	; 0x28
 80110c2:	bd10      	pop	{r4, pc}

080110c4 <uxr_stamp_session_header>:
 80110c4:	b530      	push	{r4, r5, lr}
 80110c6:	b08d      	sub	sp, #52	; 0x34
 80110c8:	4604      	mov	r4, r0
 80110ca:	460d      	mov	r5, r1
 80110cc:	4619      	mov	r1, r3
 80110ce:	a804      	add	r0, sp, #16
 80110d0:	9203      	str	r2, [sp, #12]
 80110d2:	2208      	movs	r2, #8
 80110d4:	f7fe fe28 	bl	800fd28 <ucdr_init_buffer>
 80110d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110dc:	9b03      	ldr	r3, [sp, #12]
 80110de:	462a      	mov	r2, r5
 80110e0:	a804      	add	r0, sp, #16
 80110e2:	9400      	str	r4, [sp, #0]
 80110e4:	f000 fbb6 	bl	8011854 <uxr_serialize_message_header>
 80110e8:	b00d      	add	sp, #52	; 0x34
 80110ea:	bd30      	pop	{r4, r5, pc}

080110ec <uxr_read_session_header>:
 80110ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f0:	4607      	mov	r7, r0
 80110f2:	b084      	sub	sp, #16
 80110f4:	4608      	mov	r0, r1
 80110f6:	460c      	mov	r4, r1
 80110f8:	4615      	mov	r5, r2
 80110fa:	461e      	mov	r6, r3
 80110fc:	f7fe fe46 	bl	800fd8c <ucdr_buffer_remaining>
 8011100:	2808      	cmp	r0, #8
 8011102:	d803      	bhi.n	801110c <uxr_read_session_header+0x20>
 8011104:	2000      	movs	r0, #0
 8011106:	b004      	add	sp, #16
 8011108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801110c:	f10d 080c 	add.w	r8, sp, #12
 8011110:	4633      	mov	r3, r6
 8011112:	462a      	mov	r2, r5
 8011114:	4620      	mov	r0, r4
 8011116:	f10d 010b 	add.w	r1, sp, #11
 801111a:	f8cd 8000 	str.w	r8, [sp]
 801111e:	f000 fbb7 	bl	8011890 <uxr_deserialize_message_header>
 8011122:	783a      	ldrb	r2, [r7, #0]
 8011124:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011128:	4293      	cmp	r3, r2
 801112a:	d1eb      	bne.n	8011104 <uxr_read_session_header+0x18>
 801112c:	061b      	lsls	r3, r3, #24
 801112e:	d41b      	bmi.n	8011168 <uxr_read_session_header+0x7c>
 8011130:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011134:	787b      	ldrb	r3, [r7, #1]
 8011136:	429a      	cmp	r2, r3
 8011138:	d003      	beq.n	8011142 <uxr_read_session_header+0x56>
 801113a:	2001      	movs	r0, #1
 801113c:	f080 0001 	eor.w	r0, r0, #1
 8011140:	e7e1      	b.n	8011106 <uxr_read_session_header+0x1a>
 8011142:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011146:	1cb8      	adds	r0, r7, #2
 8011148:	78bb      	ldrb	r3, [r7, #2]
 801114a:	429a      	cmp	r2, r3
 801114c:	d1f5      	bne.n	801113a <uxr_read_session_header+0x4e>
 801114e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011152:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011156:	429a      	cmp	r2, r3
 8011158:	d1ef      	bne.n	801113a <uxr_read_session_header+0x4e>
 801115a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801115e:	7843      	ldrb	r3, [r0, #1]
 8011160:	429a      	cmp	r2, r3
 8011162:	d1ea      	bne.n	801113a <uxr_read_session_header+0x4e>
 8011164:	2000      	movs	r0, #0
 8011166:	e7e9      	b.n	801113c <uxr_read_session_header+0x50>
 8011168:	2001      	movs	r0, #1
 801116a:	e7cc      	b.n	8011106 <uxr_read_session_header+0x1a>

0801116c <uxr_session_header_offset>:
 801116c:	f990 3000 	ldrsb.w	r3, [r0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	bfac      	ite	ge
 8011174:	2008      	movge	r0, #8
 8011176:	2004      	movlt	r0, #4
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop

0801117c <uxr_init_base_object_request>:
 801117c:	b510      	push	{r4, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011184:	9101      	str	r1, [sp, #4]
 8011186:	88c3      	ldrh	r3, [r0, #6]
 8011188:	f1a3 010a 	sub.w	r1, r3, #10
 801118c:	b289      	uxth	r1, r1
 801118e:	42a1      	cmp	r1, r4
 8011190:	d80f      	bhi.n	80111b2 <uxr_init_base_object_request+0x36>
 8011192:	3301      	adds	r3, #1
 8011194:	b29c      	uxth	r4, r3
 8011196:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801119a:	b2db      	uxtb	r3, r3
 801119c:	80c4      	strh	r4, [r0, #6]
 801119e:	1c91      	adds	r1, r2, #2
 80111a0:	9801      	ldr	r0, [sp, #4]
 80111a2:	f882 c000 	strb.w	ip, [r2]
 80111a6:	7053      	strb	r3, [r2, #1]
 80111a8:	f7fe ffae 	bl	8010108 <uxr_object_id_to_raw>
 80111ac:	4620      	mov	r0, r4
 80111ae:	b002      	add	sp, #8
 80111b0:	bd10      	pop	{r4, pc}
 80111b2:	230a      	movs	r3, #10
 80111b4:	f04f 0c00 	mov.w	ip, #0
 80111b8:	461c      	mov	r4, r3
 80111ba:	e7ef      	b.n	801119c <uxr_init_base_object_request+0x20>

080111bc <uxr_parse_base_object_request>:
 80111bc:	b570      	push	{r4, r5, r6, lr}
 80111be:	4604      	mov	r4, r0
 80111c0:	3002      	adds	r0, #2
 80111c2:	460d      	mov	r5, r1
 80111c4:	4616      	mov	r6, r2
 80111c6:	f7fe ff8b 	bl	80100e0 <uxr_object_id_from_raw>
 80111ca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80111ce:	8028      	strh	r0, [r5, #0]
 80111d0:	806b      	strh	r3, [r5, #2]
 80111d2:	7822      	ldrb	r2, [r4, #0]
 80111d4:	7863      	ldrb	r3, [r4, #1]
 80111d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80111da:	8033      	strh	r3, [r6, #0]
 80111dc:	bd70      	pop	{r4, r5, r6, pc}
 80111de:	bf00      	nop

080111e0 <uxr_stream_id>:
 80111e0:	2901      	cmp	r1, #1
 80111e2:	4684      	mov	ip, r0
 80111e4:	b500      	push	{lr}
 80111e6:	b083      	sub	sp, #12
 80111e8:	d01f      	beq.n	801122a <uxr_stream_id+0x4a>
 80111ea:	2902      	cmp	r1, #2
 80111ec:	f04f 0e00 	mov.w	lr, #0
 80111f0:	d020      	beq.n	8011234 <uxr_stream_id+0x54>
 80111f2:	2300      	movs	r3, #0
 80111f4:	2000      	movs	r0, #0
 80111f6:	f36e 0307 	bfi	r3, lr, #0, #8
 80111fa:	f36c 230f 	bfi	r3, ip, #8, #8
 80111fe:	f361 4317 	bfi	r3, r1, #16, #8
 8011202:	f362 631f 	bfi	r3, r2, #24, #8
 8011206:	fa5f fc83 	uxtb.w	ip, r3
 801120a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801120e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011212:	0e1b      	lsrs	r3, r3, #24
 8011214:	f36c 0007 	bfi	r0, ip, #0, #8
 8011218:	f361 200f 	bfi	r0, r1, #8, #8
 801121c:	f362 4017 	bfi	r0, r2, #16, #8
 8011220:	f363 601f 	bfi	r0, r3, #24, #8
 8011224:	b003      	add	sp, #12
 8011226:	f85d fb04 	ldr.w	pc, [sp], #4
 801122a:	f100 0e01 	add.w	lr, r0, #1
 801122e:	fa5f fe8e 	uxtb.w	lr, lr
 8011232:	e7de      	b.n	80111f2 <uxr_stream_id+0x12>
 8011234:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8011238:	e7db      	b.n	80111f2 <uxr_stream_id+0x12>
 801123a:	bf00      	nop

0801123c <uxr_stream_id_from_raw>:
 801123c:	b082      	sub	sp, #8
 801123e:	b130      	cbz	r0, 801124e <uxr_stream_id_from_raw+0x12>
 8011240:	0603      	lsls	r3, r0, #24
 8011242:	d421      	bmi.n	8011288 <uxr_stream_id_from_raw+0x4c>
 8011244:	1e42      	subs	r2, r0, #1
 8011246:	f04f 0c01 	mov.w	ip, #1
 801124a:	b2d2      	uxtb	r2, r2
 801124c:	e001      	b.n	8011252 <uxr_stream_id_from_raw+0x16>
 801124e:	4684      	mov	ip, r0
 8011250:	4602      	mov	r2, r0
 8011252:	2300      	movs	r3, #0
 8011254:	f360 0307 	bfi	r3, r0, #0, #8
 8011258:	2000      	movs	r0, #0
 801125a:	f362 230f 	bfi	r3, r2, #8, #8
 801125e:	f36c 4317 	bfi	r3, ip, #16, #8
 8011262:	f361 631f 	bfi	r3, r1, #24, #8
 8011266:	fa5f fc83 	uxtb.w	ip, r3
 801126a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801126e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011272:	0e1b      	lsrs	r3, r3, #24
 8011274:	f36c 0007 	bfi	r0, ip, #0, #8
 8011278:	f361 200f 	bfi	r0, r1, #8, #8
 801127c:	f362 4017 	bfi	r0, r2, #16, #8
 8011280:	f363 601f 	bfi	r0, r3, #24, #8
 8011284:	b002      	add	sp, #8
 8011286:	4770      	bx	lr
 8011288:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801128c:	f04f 0c02 	mov.w	ip, #2
 8011290:	e7df      	b.n	8011252 <uxr_stream_id_from_raw+0x16>
 8011292:	bf00      	nop

08011294 <uxr_init_stream_storage>:
 8011294:	2300      	movs	r3, #0
 8011296:	7403      	strb	r3, [r0, #16]
 8011298:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801129c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80112a0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop

080112a8 <uxr_reset_stream_storage>:
 80112a8:	b570      	push	{r4, r5, r6, lr}
 80112aa:	7c03      	ldrb	r3, [r0, #16]
 80112ac:	4604      	mov	r4, r0
 80112ae:	b14b      	cbz	r3, 80112c4 <uxr_reset_stream_storage+0x1c>
 80112b0:	4606      	mov	r6, r0
 80112b2:	2500      	movs	r5, #0
 80112b4:	4630      	mov	r0, r6
 80112b6:	3501      	adds	r5, #1
 80112b8:	f003 ffbe 	bl	8015238 <uxr_reset_output_best_effort_stream>
 80112bc:	7c23      	ldrb	r3, [r4, #16]
 80112be:	3610      	adds	r6, #16
 80112c0:	42ab      	cmp	r3, r5
 80112c2:	d8f7      	bhi.n	80112b4 <uxr_reset_stream_storage+0xc>
 80112c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80112c8:	b15b      	cbz	r3, 80112e2 <uxr_reset_stream_storage+0x3a>
 80112ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80112ce:	2500      	movs	r5, #0
 80112d0:	4630      	mov	r0, r6
 80112d2:	3501      	adds	r5, #1
 80112d4:	f003 fdb6 	bl	8014e44 <uxr_reset_input_best_effort_stream>
 80112d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80112dc:	3602      	adds	r6, #2
 80112de:	42ab      	cmp	r3, r5
 80112e0:	d8f6      	bhi.n	80112d0 <uxr_reset_stream_storage+0x28>
 80112e2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80112e6:	b15b      	cbz	r3, 8011300 <uxr_reset_stream_storage+0x58>
 80112e8:	f104 0618 	add.w	r6, r4, #24
 80112ec:	2500      	movs	r5, #0
 80112ee:	4630      	mov	r0, r6
 80112f0:	3501      	adds	r5, #1
 80112f2:	f004 f84d 	bl	8015390 <uxr_reset_output_reliable_stream>
 80112f6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80112fa:	3628      	adds	r6, #40	; 0x28
 80112fc:	42ab      	cmp	r3, r5
 80112fe:	d8f6      	bhi.n	80112ee <uxr_reset_stream_storage+0x46>
 8011300:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011304:	b15b      	cbz	r3, 801131e <uxr_reset_stream_storage+0x76>
 8011306:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801130a:	2500      	movs	r5, #0
 801130c:	4630      	mov	r0, r6
 801130e:	3501      	adds	r5, #1
 8011310:	f003 fe04 	bl	8014f1c <uxr_reset_input_reliable_stream>
 8011314:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011318:	3618      	adds	r6, #24
 801131a:	42ab      	cmp	r3, r5
 801131c:	d8f6      	bhi.n	801130c <uxr_reset_stream_storage+0x64>
 801131e:	bd70      	pop	{r4, r5, r6, pc}

08011320 <uxr_add_output_best_effort_buffer>:
 8011320:	b510      	push	{r4, lr}
 8011322:	7c04      	ldrb	r4, [r0, #16]
 8011324:	b082      	sub	sp, #8
 8011326:	f104 0c01 	add.w	ip, r4, #1
 801132a:	f880 c010 	strb.w	ip, [r0, #16]
 801132e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011332:	f003 ff77 	bl	8015224 <uxr_init_output_best_effort_stream>
 8011336:	2201      	movs	r2, #1
 8011338:	4620      	mov	r0, r4
 801133a:	4611      	mov	r1, r2
 801133c:	b002      	add	sp, #8
 801133e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011342:	f7ff bf4d 	b.w	80111e0 <uxr_stream_id>
 8011346:	bf00      	nop

08011348 <uxr_add_output_reliable_buffer>:
 8011348:	b510      	push	{r4, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	4684      	mov	ip, r0
 801134e:	2028      	movs	r0, #40	; 0x28
 8011350:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011354:	9400      	str	r4, [sp, #0]
 8011356:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 801135a:	fb00 c004 	mla	r0, r0, r4, ip
 801135e:	f104 0e01 	add.w	lr, r4, #1
 8011362:	3018      	adds	r0, #24
 8011364:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8011368:	f003 ffdc 	bl	8015324 <uxr_init_output_reliable_stream>
 801136c:	2201      	movs	r2, #1
 801136e:	2102      	movs	r1, #2
 8011370:	4620      	mov	r0, r4
 8011372:	b004      	add	sp, #16
 8011374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011378:	f7ff bf32 	b.w	80111e0 <uxr_stream_id>

0801137c <uxr_add_input_best_effort_buffer>:
 801137c:	b510      	push	{r4, lr}
 801137e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8011382:	b082      	sub	sp, #8
 8011384:	1c62      	adds	r2, r4, #1
 8011386:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801138a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801138e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011392:	f003 fd53 	bl	8014e3c <uxr_init_input_best_effort_stream>
 8011396:	2200      	movs	r2, #0
 8011398:	2101      	movs	r1, #1
 801139a:	4620      	mov	r0, r4
 801139c:	b002      	add	sp, #8
 801139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a2:	f7ff bf1d 	b.w	80111e0 <uxr_stream_id>
 80113a6:	bf00      	nop

080113a8 <uxr_add_input_reliable_buffer>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	4684      	mov	ip, r0
 80113ae:	2018      	movs	r0, #24
 80113b0:	9c06      	ldr	r4, [sp, #24]
 80113b2:	9400      	str	r4, [sp, #0]
 80113b4:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 80113b8:	fb00 c004 	mla	r0, r0, r4, ip
 80113bc:	f104 0e01 	add.w	lr, r4, #1
 80113c0:	3048      	adds	r0, #72	; 0x48
 80113c2:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 80113c6:	f003 fd83 	bl	8014ed0 <uxr_init_input_reliable_stream>
 80113ca:	2200      	movs	r2, #0
 80113cc:	2102      	movs	r1, #2
 80113ce:	4620      	mov	r0, r4
 80113d0:	b004      	add	sp, #16
 80113d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113d6:	f7ff bf03 	b.w	80111e0 <uxr_stream_id>
 80113da:	bf00      	nop

080113dc <uxr_get_output_best_effort_stream>:
 80113dc:	7c03      	ldrb	r3, [r0, #16]
 80113de:	428b      	cmp	r3, r1
 80113e0:	bf8c      	ite	hi
 80113e2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80113e6:	2000      	movls	r0, #0
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop

080113ec <uxr_get_output_reliable_stream>:
 80113ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80113f0:	428b      	cmp	r3, r1
 80113f2:	d904      	bls.n	80113fe <uxr_get_output_reliable_stream+0x12>
 80113f4:	2328      	movs	r3, #40	; 0x28
 80113f6:	fb03 0001 	mla	r0, r3, r1, r0
 80113fa:	3018      	adds	r0, #24
 80113fc:	4770      	bx	lr
 80113fe:	2000      	movs	r0, #0
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop

08011404 <uxr_get_input_best_effort_stream>:
 8011404:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011408:	428b      	cmp	r3, r1
 801140a:	d903      	bls.n	8011414 <uxr_get_input_best_effort_stream+0x10>
 801140c:	3121      	adds	r1, #33	; 0x21
 801140e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011412:	4770      	bx	lr
 8011414:	2000      	movs	r0, #0
 8011416:	4770      	bx	lr

08011418 <uxr_get_input_reliable_stream>:
 8011418:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801141c:	428b      	cmp	r3, r1
 801141e:	d904      	bls.n	801142a <uxr_get_input_reliable_stream+0x12>
 8011420:	2318      	movs	r3, #24
 8011422:	fb03 0001 	mla	r0, r3, r1, r0
 8011426:	3048      	adds	r0, #72	; 0x48
 8011428:	4770      	bx	lr
 801142a:	2000      	movs	r0, #0
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop

08011430 <uxr_output_streams_confirmed>:
 8011430:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011434:	b183      	cbz	r3, 8011458 <uxr_output_streams_confirmed+0x28>
 8011436:	b570      	push	{r4, r5, r6, lr}
 8011438:	4606      	mov	r6, r0
 801143a:	f100 0518 	add.w	r5, r0, #24
 801143e:	2400      	movs	r4, #0
 8011440:	e000      	b.n	8011444 <uxr_output_streams_confirmed+0x14>
 8011442:	b140      	cbz	r0, 8011456 <uxr_output_streams_confirmed+0x26>
 8011444:	4628      	mov	r0, r5
 8011446:	3401      	adds	r4, #1
 8011448:	f004 fa16 	bl	8015878 <uxr_is_output_up_to_date>
 801144c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8011450:	3528      	adds	r5, #40	; 0x28
 8011452:	42a3      	cmp	r3, r4
 8011454:	d8f5      	bhi.n	8011442 <uxr_output_streams_confirmed+0x12>
 8011456:	bd70      	pop	{r4, r5, r6, pc}
 8011458:	2001      	movs	r0, #1
 801145a:	4770      	bx	lr

0801145c <uxr_buffer_submessage_header>:
 801145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801145e:	460e      	mov	r6, r1
 8011460:	2104      	movs	r1, #4
 8011462:	4604      	mov	r4, r0
 8011464:	4615      	mov	r5, r2
 8011466:	461f      	mov	r7, r3
 8011468:	f7fe fc7a 	bl	800fd60 <ucdr_align_to>
 801146c:	2301      	movs	r3, #1
 801146e:	4631      	mov	r1, r6
 8011470:	4620      	mov	r0, r4
 8011472:	ea47 0203 	orr.w	r2, r7, r3
 8011476:	7523      	strb	r3, [r4, #20]
 8011478:	462b      	mov	r3, r5
 801147a:	f000 fa29 	bl	80118d0 <uxr_serialize_submessage_header>
 801147e:	4620      	mov	r0, r4
 8011480:	f7fe fc84 	bl	800fd8c <ucdr_buffer_remaining>
 8011484:	42a8      	cmp	r0, r5
 8011486:	bf34      	ite	cc
 8011488:	2000      	movcc	r0, #0
 801148a:	2001      	movcs	r0, #1
 801148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801148e:	bf00      	nop

08011490 <uxr_read_submessage_header>:
 8011490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011494:	4604      	mov	r4, r0
 8011496:	460d      	mov	r5, r1
 8011498:	2104      	movs	r1, #4
 801149a:	4616      	mov	r6, r2
 801149c:	4698      	mov	r8, r3
 801149e:	f7fe fc5f 	bl	800fd60 <ucdr_align_to>
 80114a2:	4620      	mov	r0, r4
 80114a4:	f7fe fc72 	bl	800fd8c <ucdr_buffer_remaining>
 80114a8:	2803      	cmp	r0, #3
 80114aa:	bf8c      	ite	hi
 80114ac:	2701      	movhi	r7, #1
 80114ae:	2700      	movls	r7, #0
 80114b0:	d802      	bhi.n	80114b8 <uxr_read_submessage_header+0x28>
 80114b2:	4638      	mov	r0, r7
 80114b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b8:	4633      	mov	r3, r6
 80114ba:	4642      	mov	r2, r8
 80114bc:	4620      	mov	r0, r4
 80114be:	4629      	mov	r1, r5
 80114c0:	f000 fa1a 	bl	80118f8 <uxr_deserialize_submessage_header>
 80114c4:	f898 3000 	ldrb.w	r3, [r8]
 80114c8:	4638      	mov	r0, r7
 80114ca:	f003 0201 	and.w	r2, r3, #1
 80114ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80114d2:	f888 3000 	strb.w	r3, [r8]
 80114d6:	7522      	strb	r2, [r4, #20]
 80114d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114dc <uxr_submessage_padding>:
 80114dc:	f010 0003 	ands.w	r0, r0, #3
 80114e0:	bf18      	it	ne
 80114e2:	f1c0 0004 	rsbne	r0, r0, #4
 80114e6:	4770      	bx	lr

080114e8 <uxr_millis>:
 80114e8:	b510      	push	{r4, lr}
 80114ea:	b084      	sub	sp, #16
 80114ec:	2001      	movs	r0, #1
 80114ee:	4669      	mov	r1, sp
 80114f0:	f7ef ffb2 	bl	8001458 <clock_gettime>
 80114f4:	4908      	ldr	r1, [pc, #32]	; (8011518 <uxr_millis+0x30>)
 80114f6:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80114fa:	fba0 0301 	umull	r0, r3, r0, r1
 80114fe:	1900      	adds	r0, r0, r4
 8011500:	fb01 3102 	mla	r1, r1, r2, r3
 8011504:	4a05      	ldr	r2, [pc, #20]	; (801151c <uxr_millis+0x34>)
 8011506:	f04f 0300 	mov.w	r3, #0
 801150a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801150e:	f7ee ff4f 	bl	80003b0 <__aeabi_ldivmod>
 8011512:	b004      	add	sp, #16
 8011514:	bd10      	pop	{r4, pc}
 8011516:	bf00      	nop
 8011518:	3b9aca00 	.word	0x3b9aca00
 801151c:	000f4240 	.word	0x000f4240

08011520 <uxr_nanos>:
 8011520:	b510      	push	{r4, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	2001      	movs	r0, #1
 8011526:	4669      	mov	r1, sp
 8011528:	f7ef ff96 	bl	8001458 <clock_gettime>
 801152c:	4a06      	ldr	r2, [pc, #24]	; (8011548 <uxr_nanos+0x28>)
 801152e:	9800      	ldr	r0, [sp, #0]
 8011530:	9902      	ldr	r1, [sp, #8]
 8011532:	fba0 0302 	umull	r0, r3, r0, r2
 8011536:	9c01      	ldr	r4, [sp, #4]
 8011538:	1840      	adds	r0, r0, r1
 801153a:	fb02 3304 	mla	r3, r2, r4, r3
 801153e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011542:	b004      	add	sp, #16
 8011544:	bd10      	pop	{r4, pc}
 8011546:	bf00      	nop
 8011548:	3b9aca00 	.word	0x3b9aca00

0801154c <on_full_output_buffer_fragmented>:
 801154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011550:	460c      	mov	r4, r1
 8011552:	b08a      	sub	sp, #40	; 0x28
 8011554:	4606      	mov	r6, r0
 8011556:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801155a:	f104 0008 	add.w	r0, r4, #8
 801155e:	f7ff ff45 	bl	80113ec <uxr_get_output_reliable_stream>
 8011562:	4605      	mov	r5, r0
 8011564:	f004 f992 	bl	801588c <get_available_free_slots>
 8011568:	b968      	cbnz	r0, 8011586 <on_full_output_buffer_fragmented+0x3a>
 801156a:	4620      	mov	r0, r4
 801156c:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8011570:	4798      	blx	r3
 8011572:	b918      	cbnz	r0, 801157c <on_full_output_buffer_fragmented+0x30>
 8011574:	2001      	movs	r0, #1
 8011576:	b00a      	add	sp, #40	; 0x28
 8011578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801157c:	4628      	mov	r0, r5
 801157e:	f004 f985 	bl	801588c <get_available_free_slots>
 8011582:	2800      	cmp	r0, #0
 8011584:	d0f6      	beq.n	8011574 <on_full_output_buffer_fragmented+0x28>
 8011586:	8929      	ldrh	r1, [r5, #8]
 8011588:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801158c:	89eb      	ldrh	r3, [r5, #14]
 801158e:	7b28      	ldrb	r0, [r5, #12]
 8011590:	686f      	ldr	r7, [r5, #4]
 8011592:	1a12      	subs	r2, r2, r0
 8011594:	fbb3 f0f1 	udiv	r0, r3, r1
 8011598:	fbb7 f7f1 	udiv	r7, r7, r1
 801159c:	fb01 3110 	mls	r1, r1, r0, r3
 80115a0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80115a4:	b289      	uxth	r1, r1
 80115a6:	fb07 f101 	mul.w	r1, r7, r1
 80115aa:	3f04      	subs	r7, #4
 80115ac:	443a      	add	r2, r7
 80115ae:	3104      	adds	r1, #4
 80115b0:	fa1f f882 	uxth.w	r8, r2
 80115b4:	463a      	mov	r2, r7
 80115b6:	eba3 0308 	sub.w	r3, r3, r8
 80115ba:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80115be:	682b      	ldr	r3, [r5, #0]
 80115c0:	4419      	add	r1, r3
 80115c2:	2300      	movs	r3, #0
 80115c4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80115c8:	9000      	str	r0, [sp, #0]
 80115ca:	a802      	add	r0, sp, #8
 80115cc:	f7fe fb9a 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 80115d0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80115d4:	f102 0308 	add.w	r3, r2, #8
 80115d8:	42bb      	cmp	r3, r7
 80115da:	d927      	bls.n	801162c <on_full_output_buffer_fragmented+0xe0>
 80115dc:	4642      	mov	r2, r8
 80115de:	2300      	movs	r3, #0
 80115e0:	210d      	movs	r1, #13
 80115e2:	a802      	add	r0, sp, #8
 80115e4:	f7ff ff3a 	bl	801145c <uxr_buffer_submessage_header>
 80115e8:	8929      	ldrh	r1, [r5, #8]
 80115ea:	89eb      	ldrh	r3, [r5, #14]
 80115ec:	686a      	ldr	r2, [r5, #4]
 80115ee:	fbb3 f0f1 	udiv	r0, r3, r1
 80115f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80115f6:	fb01 3310 	mls	r3, r1, r0, r3
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	fb02 f303 	mul.w	r3, r2, r3
 8011600:	682a      	ldr	r2, [r5, #0]
 8011602:	50d7      	str	r7, [r2, r3]
 8011604:	2101      	movs	r1, #1
 8011606:	89e8      	ldrh	r0, [r5, #14]
 8011608:	f004 fa58 	bl	8015abc <uxr_seq_num_add>
 801160c:	9904      	ldr	r1, [sp, #16]
 801160e:	9a03      	ldr	r2, [sp, #12]
 8011610:	81e8      	strh	r0, [r5, #14]
 8011612:	4630      	mov	r0, r6
 8011614:	1a52      	subs	r2, r2, r1
 8011616:	f7fe fb87 	bl	800fd28 <ucdr_init_buffer>
 801161a:	4630      	mov	r0, r6
 801161c:	4622      	mov	r2, r4
 801161e:	490f      	ldr	r1, [pc, #60]	; (801165c <on_full_output_buffer_fragmented+0x110>)
 8011620:	f7fe fb56 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 8011624:	2000      	movs	r0, #0
 8011626:	b00a      	add	sp, #40	; 0x28
 8011628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162c:	b292      	uxth	r2, r2
 801162e:	2302      	movs	r3, #2
 8011630:	210d      	movs	r1, #13
 8011632:	a802      	add	r0, sp, #8
 8011634:	f7ff ff12 	bl	801145c <uxr_buffer_submessage_header>
 8011638:	8928      	ldrh	r0, [r5, #8]
 801163a:	89eb      	ldrh	r3, [r5, #14]
 801163c:	6869      	ldr	r1, [r5, #4]
 801163e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011642:	fbb3 f7f0 	udiv	r7, r3, r0
 8011646:	fbb1 f1f0 	udiv	r1, r1, r0
 801164a:	fb00 3317 	mls	r3, r0, r7, r3
 801164e:	3208      	adds	r2, #8
 8011650:	b29b      	uxth	r3, r3
 8011652:	fb01 f303 	mul.w	r3, r1, r3
 8011656:	6829      	ldr	r1, [r5, #0]
 8011658:	50ca      	str	r2, [r1, r3]
 801165a:	e7d3      	b.n	8011604 <on_full_output_buffer_fragmented+0xb8>
 801165c:	0801154d 	.word	0x0801154d

08011660 <uxr_prepare_output_stream>:
 8011660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011662:	b087      	sub	sp, #28
 8011664:	2707      	movs	r7, #7
 8011666:	2500      	movs	r5, #0
 8011668:	461c      	mov	r4, r3
 801166a:	4606      	mov	r6, r0
 801166c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011672:	e9cd 7500 	strd	r7, r5, [sp]
 8011676:	3204      	adds	r2, #4
 8011678:	f7ff fc44 	bl	8010f04 <uxr_prepare_stream_to_write_submessage>
 801167c:	f080 0201 	eor.w	r2, r0, #1
 8011680:	b2d2      	uxtb	r2, r2
 8011682:	75a2      	strb	r2, [r4, #22]
 8011684:	b112      	cbz	r2, 801168c <uxr_prepare_output_stream+0x2c>
 8011686:	4628      	mov	r0, r5
 8011688:	b007      	add	sp, #28
 801168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801168c:	aa05      	add	r2, sp, #20
 801168e:	9902      	ldr	r1, [sp, #8]
 8011690:	4630      	mov	r0, r6
 8011692:	f7ff fd73 	bl	801117c <uxr_init_base_object_request>
 8011696:	a905      	add	r1, sp, #20
 8011698:	4605      	mov	r5, r0
 801169a:	4620      	mov	r0, r4
 801169c:	f000 ff9c 	bl	80125d8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80116a0:	69a6      	ldr	r6, [r4, #24]
 80116a2:	69e7      	ldr	r7, [r4, #28]
 80116a4:	4620      	mov	r0, r4
 80116a6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80116aa:	1a52      	subs	r2, r2, r1
 80116ac:	f7fe fb3c 	bl	800fd28 <ucdr_init_buffer>
 80116b0:	4620      	mov	r0, r4
 80116b2:	463a      	mov	r2, r7
 80116b4:	4631      	mov	r1, r6
 80116b6:	f7fe fb0b 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 80116ba:	4628      	mov	r0, r5
 80116bc:	b007      	add	sp, #28
 80116be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116c0 <uxr_prepare_output_stream_fragmented>:
 80116c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c4:	b091      	sub	sp, #68	; 0x44
 80116c6:	4605      	mov	r5, r0
 80116c8:	3008      	adds	r0, #8
 80116ca:	461e      	mov	r6, r3
 80116cc:	9105      	str	r1, [sp, #20]
 80116ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80116d2:	9204      	str	r2, [sp, #16]
 80116d4:	f7ff fe8a 	bl	80113ec <uxr_get_output_reliable_stream>
 80116d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	f000 8093 	beq.w	8011808 <uxr_prepare_output_stream_fragmented+0x148>
 80116e2:	4604      	mov	r4, r0
 80116e4:	2800      	cmp	r0, #0
 80116e6:	f000 808f 	beq.w	8011808 <uxr_prepare_output_stream_fragmented+0x148>
 80116ea:	f004 f8cf 	bl	801588c <get_available_free_slots>
 80116ee:	2800      	cmp	r0, #0
 80116f0:	f000 8085 	beq.w	80117fe <uxr_prepare_output_stream_fragmented+0x13e>
 80116f4:	8923      	ldrh	r3, [r4, #8]
 80116f6:	89e7      	ldrh	r7, [r4, #14]
 80116f8:	6862      	ldr	r2, [r4, #4]
 80116fa:	fbb7 f9f3 	udiv	r9, r7, r3
 80116fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8011702:	fb03 7919 	mls	r9, r3, r9, r7
 8011706:	6823      	ldr	r3, [r4, #0]
 8011708:	f1a2 0b04 	sub.w	fp, r2, #4
 801170c:	9203      	str	r2, [sp, #12]
 801170e:	fa1f f989 	uxth.w	r9, r9
 8011712:	fb02 f909 	mul.w	r9, r2, r9
 8011716:	f109 0904 	add.w	r9, r9, #4
 801171a:	4499      	add	r9, r3
 801171c:	7b23      	ldrb	r3, [r4, #12]
 801171e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011722:	4543      	cmp	r3, r8
 8011724:	d37c      	bcc.n	8011820 <uxr_prepare_output_stream_fragmented+0x160>
 8011726:	f1ab 0a04 	sub.w	sl, fp, #4
 801172a:	465a      	mov	r2, fp
 801172c:	4649      	mov	r1, r9
 801172e:	a808      	add	r0, sp, #32
 8011730:	ebaa 0a03 	sub.w	sl, sl, r3
 8011734:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011736:	f8cd 8000 	str.w	r8, [sp]
 801173a:	3308      	adds	r3, #8
 801173c:	fa1f fa8a 	uxth.w	sl, sl
 8011740:	9302      	str	r3, [sp, #8]
 8011742:	2300      	movs	r3, #0
 8011744:	f7fe fade 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 8011748:	9b02      	ldr	r3, [sp, #8]
 801174a:	4652      	mov	r2, sl
 801174c:	210d      	movs	r1, #13
 801174e:	455b      	cmp	r3, fp
 8011750:	bf34      	ite	cc
 8011752:	2302      	movcc	r3, #2
 8011754:	2300      	movcs	r3, #0
 8011756:	a808      	add	r0, sp, #32
 8011758:	f7ff fe80 	bl	801145c <uxr_buffer_submessage_header>
 801175c:	8921      	ldrh	r1, [r4, #8]
 801175e:	6863      	ldr	r3, [r4, #4]
 8011760:	4638      	mov	r0, r7
 8011762:	fbb7 f2f1 	udiv	r2, r7, r1
 8011766:	fbb3 f3f1 	udiv	r3, r3, r1
 801176a:	fb01 7212 	mls	r2, r1, r2, r7
 801176e:	2101      	movs	r1, #1
 8011770:	b292      	uxth	r2, r2
 8011772:	fb02 f303 	mul.w	r3, r2, r3
 8011776:	6822      	ldr	r2, [r4, #0]
 8011778:	f842 b003 	str.w	fp, [r2, r3]
 801177c:	f004 f99e 	bl	8015abc <uxr_seq_num_add>
 8011780:	9b03      	ldr	r3, [sp, #12]
 8011782:	f108 0104 	add.w	r1, r8, #4
 8011786:	4607      	mov	r7, r0
 8011788:	f1a3 0208 	sub.w	r2, r3, #8
 801178c:	4630      	mov	r0, r6
 801178e:	4449      	add	r1, r9
 8011790:	eba2 0208 	sub.w	r2, r2, r8
 8011794:	f7fe fac8 	bl	800fd28 <ucdr_init_buffer>
 8011798:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801179a:	2107      	movs	r1, #7
 801179c:	81e7      	strh	r7, [r4, #14]
 801179e:	1d1a      	adds	r2, r3, #4
 80117a0:	2300      	movs	r3, #0
 80117a2:	4630      	mov	r0, r6
 80117a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80117a8:	bf28      	it	cs
 80117aa:	461a      	movcs	r2, r3
 80117ac:	b292      	uxth	r2, r2
 80117ae:	f7ff fe55 	bl	801145c <uxr_buffer_submessage_header>
 80117b2:	aa07      	add	r2, sp, #28
 80117b4:	9904      	ldr	r1, [sp, #16]
 80117b6:	4628      	mov	r0, r5
 80117b8:	f7ff fce0 	bl	801117c <uxr_init_base_object_request>
 80117bc:	4604      	mov	r4, r0
 80117be:	b320      	cbz	r0, 801180a <uxr_prepare_output_stream_fragmented+0x14a>
 80117c0:	a907      	add	r1, sp, #28
 80117c2:	4630      	mov	r0, r6
 80117c4:	f000 ff08 	bl	80125d8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80117c8:	4630      	mov	r0, r6
 80117ca:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80117ce:	1a52      	subs	r2, r2, r1
 80117d0:	f7fe faaa 	bl	800fd28 <ucdr_init_buffer>
 80117d4:	9b05      	ldr	r3, [sp, #20]
 80117d6:	9a02      	ldr	r2, [sp, #8]
 80117d8:	4630      	mov	r0, r6
 80117da:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80117de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117e0:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80117e4:	462a      	mov	r2, r5
 80117e6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80117ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80117ec:	4918      	ldr	r1, [pc, #96]	; (8011850 <uxr_prepare_output_stream_fragmented+0x190>)
 80117ee:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80117f2:	f7fe fa6d 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 80117f6:	4620      	mov	r0, r4
 80117f8:	b011      	add	sp, #68	; 0x44
 80117fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011800:	4628      	mov	r0, r5
 8011802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011804:	4798      	blx	r3
 8011806:	b920      	cbnz	r0, 8011812 <uxr_prepare_output_stream_fragmented+0x152>
 8011808:	2400      	movs	r4, #0
 801180a:	4620      	mov	r0, r4
 801180c:	b011      	add	sp, #68	; 0x44
 801180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011812:	4620      	mov	r0, r4
 8011814:	f004 f83a 	bl	801588c <get_available_free_slots>
 8011818:	2800      	cmp	r0, #0
 801181a:	f47f af6b 	bne.w	80116f4 <uxr_prepare_output_stream_fragmented+0x34>
 801181e:	e7f3      	b.n	8011808 <uxr_prepare_output_stream_fragmented+0x148>
 8011820:	4638      	mov	r0, r7
 8011822:	2101      	movs	r1, #1
 8011824:	f004 f94a 	bl	8015abc <uxr_seq_num_add>
 8011828:	8922      	ldrh	r2, [r4, #8]
 801182a:	6863      	ldr	r3, [r4, #4]
 801182c:	4607      	mov	r7, r0
 801182e:	fbb3 f9f2 	udiv	r9, r3, r2
 8011832:	fbb0 f3f2 	udiv	r3, r0, r2
 8011836:	fb02 0313 	mls	r3, r2, r3, r0
 801183a:	b29b      	uxth	r3, r3
 801183c:	fb03 f909 	mul.w	r9, r3, r9
 8011840:	6823      	ldr	r3, [r4, #0]
 8011842:	f109 0904 	add.w	r9, r9, #4
 8011846:	4499      	add	r9, r3
 8011848:	7b23      	ldrb	r3, [r4, #12]
 801184a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801184e:	e76a      	b.n	8011726 <uxr_prepare_output_stream_fragmented+0x66>
 8011850:	0801154d 	.word	0x0801154d

08011854 <uxr_serialize_message_header>:
 8011854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011856:	4616      	mov	r6, r2
 8011858:	b083      	sub	sp, #12
 801185a:	4604      	mov	r4, r0
 801185c:	460d      	mov	r5, r1
 801185e:	9301      	str	r3, [sp, #4]
 8011860:	9f08      	ldr	r7, [sp, #32]
 8011862:	f7fd fab5 	bl	800edd0 <ucdr_serialize_uint8_t>
 8011866:	4631      	mov	r1, r6
 8011868:	4620      	mov	r0, r4
 801186a:	f7fd fab1 	bl	800edd0 <ucdr_serialize_uint8_t>
 801186e:	9a01      	ldr	r2, [sp, #4]
 8011870:	2101      	movs	r1, #1
 8011872:	4620      	mov	r0, r4
 8011874:	f7fd fb58 	bl	800ef28 <ucdr_serialize_endian_uint16_t>
 8011878:	062b      	lsls	r3, r5, #24
 801187a:	d501      	bpl.n	8011880 <uxr_serialize_message_header+0x2c>
 801187c:	b003      	add	sp, #12
 801187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011880:	2204      	movs	r2, #4
 8011882:	4639      	mov	r1, r7
 8011884:	4620      	mov	r0, r4
 8011886:	b003      	add	sp, #12
 8011888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801188c:	f003 b8dc 	b.w	8014a48 <ucdr_serialize_array_uint8_t>

08011890 <uxr_deserialize_message_header>:
 8011890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011892:	4616      	mov	r6, r2
 8011894:	b083      	sub	sp, #12
 8011896:	4604      	mov	r4, r0
 8011898:	460d      	mov	r5, r1
 801189a:	9301      	str	r3, [sp, #4]
 801189c:	9f08      	ldr	r7, [sp, #32]
 801189e:	f7fd faad 	bl	800edfc <ucdr_deserialize_uint8_t>
 80118a2:	4631      	mov	r1, r6
 80118a4:	4620      	mov	r0, r4
 80118a6:	f7fd faa9 	bl	800edfc <ucdr_deserialize_uint8_t>
 80118aa:	9a01      	ldr	r2, [sp, #4]
 80118ac:	2101      	movs	r1, #1
 80118ae:	4620      	mov	r0, r4
 80118b0:	f7fd fc2e 	bl	800f110 <ucdr_deserialize_endian_uint16_t>
 80118b4:	f995 3000 	ldrsb.w	r3, [r5]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	da01      	bge.n	80118c0 <uxr_deserialize_message_header+0x30>
 80118bc:	b003      	add	sp, #12
 80118be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118c0:	2204      	movs	r2, #4
 80118c2:	4639      	mov	r1, r7
 80118c4:	4620      	mov	r0, r4
 80118c6:	b003      	add	sp, #12
 80118c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80118cc:	f003 b920 	b.w	8014b10 <ucdr_deserialize_array_uint8_t>

080118d0 <uxr_serialize_submessage_header>:
 80118d0:	b530      	push	{r4, r5, lr}
 80118d2:	4615      	mov	r5, r2
 80118d4:	b083      	sub	sp, #12
 80118d6:	4604      	mov	r4, r0
 80118d8:	9301      	str	r3, [sp, #4]
 80118da:	f7fd fa79 	bl	800edd0 <ucdr_serialize_uint8_t>
 80118de:	4629      	mov	r1, r5
 80118e0:	4620      	mov	r0, r4
 80118e2:	f7fd fa75 	bl	800edd0 <ucdr_serialize_uint8_t>
 80118e6:	9a01      	ldr	r2, [sp, #4]
 80118e8:	2101      	movs	r1, #1
 80118ea:	4620      	mov	r0, r4
 80118ec:	b003      	add	sp, #12
 80118ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118f2:	f7fd bb19 	b.w	800ef28 <ucdr_serialize_endian_uint16_t>
 80118f6:	bf00      	nop

080118f8 <uxr_deserialize_submessage_header>:
 80118f8:	b530      	push	{r4, r5, lr}
 80118fa:	4615      	mov	r5, r2
 80118fc:	b083      	sub	sp, #12
 80118fe:	4604      	mov	r4, r0
 8011900:	9301      	str	r3, [sp, #4]
 8011902:	f7fd fa7b 	bl	800edfc <ucdr_deserialize_uint8_t>
 8011906:	4629      	mov	r1, r5
 8011908:	4620      	mov	r0, r4
 801190a:	f7fd fa77 	bl	800edfc <ucdr_deserialize_uint8_t>
 801190e:	9a01      	ldr	r2, [sp, #4]
 8011910:	2101      	movs	r1, #1
 8011912:	4620      	mov	r0, r4
 8011914:	b003      	add	sp, #12
 8011916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801191a:	f7fd bbf9 	b.w	800f110 <ucdr_deserialize_endian_uint16_t>
 801191e:	bf00      	nop

08011920 <uxr_serialize_CLIENT_Representation>:
 8011920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011924:	2204      	movs	r2, #4
 8011926:	460e      	mov	r6, r1
 8011928:	4605      	mov	r5, r0
 801192a:	f003 f88d 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 801192e:	4607      	mov	r7, r0
 8011930:	2202      	movs	r2, #2
 8011932:	1d31      	adds	r1, r6, #4
 8011934:	4628      	mov	r0, r5
 8011936:	f003 f887 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 801193a:	4038      	ands	r0, r7
 801193c:	2202      	movs	r2, #2
 801193e:	1db1      	adds	r1, r6, #6
 8011940:	b2c7      	uxtb	r7, r0
 8011942:	4628      	mov	r0, r5
 8011944:	f003 f880 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011948:	2204      	movs	r2, #4
 801194a:	4007      	ands	r7, r0
 801194c:	f106 0108 	add.w	r1, r6, #8
 8011950:	4628      	mov	r0, r5
 8011952:	f003 f879 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011956:	4007      	ands	r7, r0
 8011958:	7b31      	ldrb	r1, [r6, #12]
 801195a:	4628      	mov	r0, r5
 801195c:	f7fd fa38 	bl	800edd0 <ucdr_serialize_uint8_t>
 8011960:	7b71      	ldrb	r1, [r6, #13]
 8011962:	4007      	ands	r7, r0
 8011964:	4628      	mov	r0, r5
 8011966:	f7fd fa05 	bl	800ed74 <ucdr_serialize_bool>
 801196a:	7b73      	ldrb	r3, [r6, #13]
 801196c:	ea07 0800 	and.w	r8, r7, r0
 8011970:	b93b      	cbnz	r3, 8011982 <uxr_serialize_CLIENT_Representation+0x62>
 8011972:	8bb1      	ldrh	r1, [r6, #28]
 8011974:	4628      	mov	r0, r5
 8011976:	f7fd fa57 	bl	800ee28 <ucdr_serialize_uint16_t>
 801197a:	ea08 0000 	and.w	r0, r8, r0
 801197e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011982:	6931      	ldr	r1, [r6, #16]
 8011984:	4628      	mov	r0, r5
 8011986:	f7fd fc39 	bl	800f1fc <ucdr_serialize_uint32_t>
 801198a:	6933      	ldr	r3, [r6, #16]
 801198c:	b1e3      	cbz	r3, 80119c8 <uxr_serialize_CLIENT_Representation+0xa8>
 801198e:	b1c0      	cbz	r0, 80119c2 <uxr_serialize_CLIENT_Representation+0xa2>
 8011990:	4637      	mov	r7, r6
 8011992:	f04f 0900 	mov.w	r9, #0
 8011996:	e000      	b.n	801199a <uxr_serialize_CLIENT_Representation+0x7a>
 8011998:	b19c      	cbz	r4, 80119c2 <uxr_serialize_CLIENT_Representation+0xa2>
 801199a:	6979      	ldr	r1, [r7, #20]
 801199c:	4628      	mov	r0, r5
 801199e:	f003 f977 	bl	8014c90 <ucdr_serialize_string>
 80119a2:	69b9      	ldr	r1, [r7, #24]
 80119a4:	4604      	mov	r4, r0
 80119a6:	4628      	mov	r0, r5
 80119a8:	f003 f972 	bl	8014c90 <ucdr_serialize_string>
 80119ac:	f109 0901 	add.w	r9, r9, #1
 80119b0:	6933      	ldr	r3, [r6, #16]
 80119b2:	4004      	ands	r4, r0
 80119b4:	3708      	adds	r7, #8
 80119b6:	4599      	cmp	r9, r3
 80119b8:	b2e4      	uxtb	r4, r4
 80119ba:	d3ed      	bcc.n	8011998 <uxr_serialize_CLIENT_Representation+0x78>
 80119bc:	ea08 0804 	and.w	r8, r8, r4
 80119c0:	e7d7      	b.n	8011972 <uxr_serialize_CLIENT_Representation+0x52>
 80119c2:	f04f 0800 	mov.w	r8, #0
 80119c6:	e7d4      	b.n	8011972 <uxr_serialize_CLIENT_Representation+0x52>
 80119c8:	ea08 0800 	and.w	r8, r8, r0
 80119cc:	e7d1      	b.n	8011972 <uxr_serialize_CLIENT_Representation+0x52>
 80119ce:	bf00      	nop

080119d0 <uxr_deserialize_CLIENT_Representation>:
 80119d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d4:	2204      	movs	r2, #4
 80119d6:	460c      	mov	r4, r1
 80119d8:	4605      	mov	r5, r0
 80119da:	f003 f899 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80119de:	4607      	mov	r7, r0
 80119e0:	2202      	movs	r2, #2
 80119e2:	1d21      	adds	r1, r4, #4
 80119e4:	4628      	mov	r0, r5
 80119e6:	f003 f893 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80119ea:	4038      	ands	r0, r7
 80119ec:	2202      	movs	r2, #2
 80119ee:	1da1      	adds	r1, r4, #6
 80119f0:	b2c6      	uxtb	r6, r0
 80119f2:	4628      	mov	r0, r5
 80119f4:	f003 f88c 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80119f8:	2204      	movs	r2, #4
 80119fa:	4006      	ands	r6, r0
 80119fc:	f104 0108 	add.w	r1, r4, #8
 8011a00:	4628      	mov	r0, r5
 8011a02:	f003 f885 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8011a06:	4006      	ands	r6, r0
 8011a08:	f104 010c 	add.w	r1, r4, #12
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	f7fd f9f5 	bl	800edfc <ucdr_deserialize_uint8_t>
 8011a12:	f104 010d 	add.w	r1, r4, #13
 8011a16:	ea06 0700 	and.w	r7, r6, r0
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f7fd f9c0 	bl	800eda0 <ucdr_deserialize_bool>
 8011a20:	7b63      	ldrb	r3, [r4, #13]
 8011a22:	4007      	ands	r7, r0
 8011a24:	b93b      	cbnz	r3, 8011a36 <uxr_deserialize_CLIENT_Representation+0x66>
 8011a26:	f104 011c 	add.w	r1, r4, #28
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	f7fd fafc 	bl	800f028 <ucdr_deserialize_uint16_t>
 8011a30:	4038      	ands	r0, r7
 8011a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a36:	f104 0110 	add.w	r1, r4, #16
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	f7fd fd0e 	bl	800f45c <ucdr_deserialize_uint32_t>
 8011a40:	6923      	ldr	r3, [r4, #16]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d903      	bls.n	8011a4e <uxr_deserialize_CLIENT_Representation+0x7e>
 8011a46:	2301      	movs	r3, #1
 8011a48:	2700      	movs	r7, #0
 8011a4a:	75ab      	strb	r3, [r5, #22]
 8011a4c:	e7eb      	b.n	8011a26 <uxr_deserialize_CLIENT_Representation+0x56>
 8011a4e:	b30b      	cbz	r3, 8011a94 <uxr_deserialize_CLIENT_Representation+0xc4>
 8011a50:	b1f0      	cbz	r0, 8011a90 <uxr_deserialize_CLIENT_Representation+0xc0>
 8011a52:	46a0      	mov	r8, r4
 8011a54:	f04f 0900 	mov.w	r9, #0
 8011a58:	e000      	b.n	8011a5c <uxr_deserialize_CLIENT_Representation+0x8c>
 8011a5a:	b1ce      	cbz	r6, 8011a90 <uxr_deserialize_CLIENT_Representation+0xc0>
 8011a5c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011a60:	f108 0808 	add.w	r8, r8, #8
 8011a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a68:	4628      	mov	r0, r5
 8011a6a:	f003 f921 	bl	8014cb0 <ucdr_deserialize_string>
 8011a6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011a72:	4606      	mov	r6, r0
 8011a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a78:	4628      	mov	r0, r5
 8011a7a:	f109 0901 	add.w	r9, r9, #1
 8011a7e:	f003 f917 	bl	8014cb0 <ucdr_deserialize_string>
 8011a82:	6923      	ldr	r3, [r4, #16]
 8011a84:	4006      	ands	r6, r0
 8011a86:	4599      	cmp	r9, r3
 8011a88:	b2f6      	uxtb	r6, r6
 8011a8a:	d3e6      	bcc.n	8011a5a <uxr_deserialize_CLIENT_Representation+0x8a>
 8011a8c:	4037      	ands	r7, r6
 8011a8e:	e7ca      	b.n	8011a26 <uxr_deserialize_CLIENT_Representation+0x56>
 8011a90:	2700      	movs	r7, #0
 8011a92:	e7c8      	b.n	8011a26 <uxr_deserialize_CLIENT_Representation+0x56>
 8011a94:	4007      	ands	r7, r0
 8011a96:	e7c6      	b.n	8011a26 <uxr_deserialize_CLIENT_Representation+0x56>

08011a98 <uxr_serialize_AGENT_Representation>:
 8011a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a9c:	2204      	movs	r2, #4
 8011a9e:	460f      	mov	r7, r1
 8011aa0:	4605      	mov	r5, r0
 8011aa2:	f002 ffd1 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	1d39      	adds	r1, r7, #4
 8011aac:	4628      	mov	r0, r5
 8011aae:	f002 ffcb 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011ab2:	4020      	ands	r0, r4
 8011ab4:	2202      	movs	r2, #2
 8011ab6:	1db9      	adds	r1, r7, #6
 8011ab8:	b2c4      	uxtb	r4, r0
 8011aba:	4628      	mov	r0, r5
 8011abc:	f002 ffc4 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011ac0:	7a39      	ldrb	r1, [r7, #8]
 8011ac2:	4004      	ands	r4, r0
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f7fd f955 	bl	800ed74 <ucdr_serialize_bool>
 8011aca:	7a3b      	ldrb	r3, [r7, #8]
 8011acc:	ea00 0804 	and.w	r8, r0, r4
 8011ad0:	b913      	cbnz	r3, 8011ad8 <uxr_serialize_AGENT_Representation+0x40>
 8011ad2:	4640      	mov	r0, r8
 8011ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ad8:	68f9      	ldr	r1, [r7, #12]
 8011ada:	4628      	mov	r0, r5
 8011adc:	f7fd fb8e 	bl	800f1fc <ucdr_serialize_uint32_t>
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	b303      	cbz	r3, 8011b26 <uxr_serialize_AGENT_Representation+0x8e>
 8011ae4:	b1d0      	cbz	r0, 8011b1c <uxr_serialize_AGENT_Representation+0x84>
 8011ae6:	463e      	mov	r6, r7
 8011ae8:	f04f 0900 	mov.w	r9, #0
 8011aec:	e000      	b.n	8011af0 <uxr_serialize_AGENT_Representation+0x58>
 8011aee:	b1ac      	cbz	r4, 8011b1c <uxr_serialize_AGENT_Representation+0x84>
 8011af0:	6931      	ldr	r1, [r6, #16]
 8011af2:	4628      	mov	r0, r5
 8011af4:	f003 f8cc 	bl	8014c90 <ucdr_serialize_string>
 8011af8:	6971      	ldr	r1, [r6, #20]
 8011afa:	4604      	mov	r4, r0
 8011afc:	4628      	mov	r0, r5
 8011afe:	f003 f8c7 	bl	8014c90 <ucdr_serialize_string>
 8011b02:	f109 0901 	add.w	r9, r9, #1
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	4004      	ands	r4, r0
 8011b0a:	3608      	adds	r6, #8
 8011b0c:	4599      	cmp	r9, r3
 8011b0e:	b2e4      	uxtb	r4, r4
 8011b10:	d3ed      	bcc.n	8011aee <uxr_serialize_AGENT_Representation+0x56>
 8011b12:	ea08 0804 	and.w	r8, r8, r4
 8011b16:	4640      	mov	r0, r8
 8011b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b1c:	f04f 0800 	mov.w	r8, #0
 8011b20:	4640      	mov	r0, r8
 8011b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b26:	ea08 0800 	and.w	r8, r8, r0
 8011b2a:	e7d2      	b.n	8011ad2 <uxr_serialize_AGENT_Representation+0x3a>

08011b2c <uxr_serialize_DATAWRITER_Representation>:
 8011b2c:	b570      	push	{r4, r5, r6, lr}
 8011b2e:	460d      	mov	r5, r1
 8011b30:	7809      	ldrb	r1, [r1, #0]
 8011b32:	4606      	mov	r6, r0
 8011b34:	f7fd f94c 	bl	800edd0 <ucdr_serialize_uint8_t>
 8011b38:	4604      	mov	r4, r0
 8011b3a:	b130      	cbz	r0, 8011b4a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011b3c:	782b      	ldrb	r3, [r5, #0]
 8011b3e:	2b02      	cmp	r3, #2
 8011b40:	d00c      	beq.n	8011b5c <uxr_serialize_DATAWRITER_Representation+0x30>
 8011b42:	2b03      	cmp	r3, #3
 8011b44:	d010      	beq.n	8011b68 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d008      	beq.n	8011b5c <uxr_serialize_DATAWRITER_Representation+0x30>
 8011b4a:	2202      	movs	r2, #2
 8011b4c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8011b50:	4630      	mov	r0, r6
 8011b52:	f002 ff79 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011b56:	4020      	ands	r0, r4
 8011b58:	b2c0      	uxtb	r0, r0
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}
 8011b5c:	6869      	ldr	r1, [r5, #4]
 8011b5e:	4630      	mov	r0, r6
 8011b60:	f003 f896 	bl	8014c90 <ucdr_serialize_string>
 8011b64:	4604      	mov	r4, r0
 8011b66:	e7f0      	b.n	8011b4a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011b68:	4629      	mov	r1, r5
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011b70:	3104      	adds	r1, #4
 8011b72:	f003 f861 	bl	8014c38 <ucdr_serialize_sequence_uint8_t>
 8011b76:	4604      	mov	r4, r0
 8011b78:	e7e7      	b.n	8011b4a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011b7a:	bf00      	nop

08011b7c <uxr_serialize_ObjectVariant.part.0>:
 8011b7c:	b570      	push	{r4, r5, r6, lr}
 8011b7e:	780b      	ldrb	r3, [r1, #0]
 8011b80:	460c      	mov	r4, r1
 8011b82:	4605      	mov	r5, r0
 8011b84:	3b01      	subs	r3, #1
 8011b86:	2b0d      	cmp	r3, #13
 8011b88:	d854      	bhi.n	8011c34 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011b8a:	e8df f003 	tbb	[pc, r3]
 8011b8e:	0730      	.short	0x0730
 8011b90:	07071b1b 	.word	0x07071b1b
 8011b94:	0c530707 	.word	0x0c530707
 8011b98:	494e0c0c 	.word	0x494e0c0c
 8011b9c:	3104      	adds	r1, #4
 8011b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ba2:	f7ff bfc3 	b.w	8011b2c <uxr_serialize_DATAWRITER_Representation>
 8011ba6:	7909      	ldrb	r1, [r1, #4]
 8011ba8:	f7fd f912 	bl	800edd0 <ucdr_serialize_uint8_t>
 8011bac:	b1e8      	cbz	r0, 8011bea <uxr_serialize_ObjectVariant.part.0+0x6e>
 8011bae:	7923      	ldrb	r3, [r4, #4]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d001      	beq.n	8011bb8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011bb4:	2b02      	cmp	r3, #2
 8011bb6:	d13d      	bne.n	8011c34 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011bb8:	68a1      	ldr	r1, [r4, #8]
 8011bba:	4628      	mov	r0, r5
 8011bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bc0:	f003 b866 	b.w	8014c90 <ucdr_serialize_string>
 8011bc4:	7909      	ldrb	r1, [r1, #4]
 8011bc6:	f7fd f903 	bl	800edd0 <ucdr_serialize_uint8_t>
 8011bca:	4606      	mov	r6, r0
 8011bcc:	b120      	cbz	r0, 8011bd8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011bce:	7923      	ldrb	r3, [r4, #4]
 8011bd0:	2b02      	cmp	r3, #2
 8011bd2:	d039      	beq.n	8011c48 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011bd4:	2b03      	cmp	r3, #3
 8011bd6:	d02f      	beq.n	8011c38 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011bd8:	2202      	movs	r2, #2
 8011bda:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8011bde:	4628      	mov	r0, r5
 8011be0:	f002 ff32 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011be4:	4030      	ands	r0, r6
 8011be6:	b2c0      	uxtb	r0, r0
 8011be8:	bd70      	pop	{r4, r5, r6, pc}
 8011bea:	2000      	movs	r0, #0
 8011bec:	bd70      	pop	{r4, r5, r6, pc}
 8011bee:	7909      	ldrb	r1, [r1, #4]
 8011bf0:	f7fd f8ee 	bl	800edd0 <ucdr_serialize_uint8_t>
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	b158      	cbz	r0, 8011c10 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011bf8:	7923      	ldrb	r3, [r4, #4]
 8011bfa:	2b02      	cmp	r3, #2
 8011bfc:	d003      	beq.n	8011c06 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8011bfe:	2b03      	cmp	r3, #3
 8011c00:	d028      	beq.n	8011c54 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d104      	bne.n	8011c10 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011c06:	68a1      	ldr	r1, [r4, #8]
 8011c08:	4628      	mov	r0, r5
 8011c0a:	f003 f841 	bl	8014c90 <ucdr_serialize_string>
 8011c0e:	4606      	mov	r6, r0
 8011c10:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8011c14:	4628      	mov	r0, r5
 8011c16:	f7fd fe17 	bl	800f848 <ucdr_serialize_int16_t>
 8011c1a:	4030      	ands	r0, r6
 8011c1c:	b2c0      	uxtb	r0, r0
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	3104      	adds	r1, #4
 8011c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c26:	f7ff be7b 	b.w	8011920 <uxr_serialize_CLIENT_Representation>
 8011c2a:	3104      	adds	r1, #4
 8011c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c30:	f7ff bf32 	b.w	8011a98 <uxr_serialize_AGENT_Representation>
 8011c34:	2001      	movs	r0, #1
 8011c36:	bd70      	pop	{r4, r5, r6, pc}
 8011c38:	68a2      	ldr	r2, [r4, #8]
 8011c3a:	f104 010c 	add.w	r1, r4, #12
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f002 fffa 	bl	8014c38 <ucdr_serialize_sequence_uint8_t>
 8011c44:	4606      	mov	r6, r0
 8011c46:	e7c7      	b.n	8011bd8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011c48:	68a1      	ldr	r1, [r4, #8]
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	f003 f820 	bl	8014c90 <ucdr_serialize_string>
 8011c50:	4606      	mov	r6, r0
 8011c52:	e7c1      	b.n	8011bd8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011c54:	68a2      	ldr	r2, [r4, #8]
 8011c56:	f104 010c 	add.w	r1, r4, #12
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f002 ffec 	bl	8014c38 <ucdr_serialize_sequence_uint8_t>
 8011c60:	4606      	mov	r6, r0
 8011c62:	e7d5      	b.n	8011c10 <uxr_serialize_ObjectVariant.part.0+0x94>

08011c64 <uxr_deserialize_DATAWRITER_Representation>:
 8011c64:	b570      	push	{r4, r5, r6, lr}
 8011c66:	4606      	mov	r6, r0
 8011c68:	460d      	mov	r5, r1
 8011c6a:	f7fd f8c7 	bl	800edfc <ucdr_deserialize_uint8_t>
 8011c6e:	4604      	mov	r4, r0
 8011c70:	b130      	cbz	r0, 8011c80 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011c72:	782b      	ldrb	r3, [r5, #0]
 8011c74:	2b02      	cmp	r3, #2
 8011c76:	d00c      	beq.n	8011c92 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011c78:	2b03      	cmp	r3, #3
 8011c7a:	d012      	beq.n	8011ca2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d008      	beq.n	8011c92 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011c80:	2202      	movs	r2, #2
 8011c82:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8011c86:	4630      	mov	r0, r6
 8011c88:	f002 ff42 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8011c8c:	4020      	ands	r0, r4
 8011c8e:	b2c0      	uxtb	r0, r0
 8011c90:	bd70      	pop	{r4, r5, r6, pc}
 8011c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c96:	6869      	ldr	r1, [r5, #4]
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f003 f809 	bl	8014cb0 <ucdr_deserialize_string>
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	e7ee      	b.n	8011c80 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011ca2:	1d2b      	adds	r3, r5, #4
 8011ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ca8:	f105 0108 	add.w	r1, r5, #8
 8011cac:	4630      	mov	r0, r6
 8011cae:	f002 ffd5 	bl	8014c5c <ucdr_deserialize_sequence_uint8_t>
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	e7e4      	b.n	8011c80 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011cb6:	bf00      	nop

08011cb8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011cb8:	b570      	push	{r4, r5, r6, lr}
 8011cba:	460d      	mov	r5, r1
 8011cbc:	7809      	ldrb	r1, [r1, #0]
 8011cbe:	4606      	mov	r6, r0
 8011cc0:	f7fd f858 	bl	800ed74 <ucdr_serialize_bool>
 8011cc4:	782b      	ldrb	r3, [r5, #0]
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	b94b      	cbnz	r3, 8011cde <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011cca:	7a29      	ldrb	r1, [r5, #8]
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f7fd f851 	bl	800ed74 <ucdr_serialize_bool>
 8011cd2:	7a2b      	ldrb	r3, [r5, #8]
 8011cd4:	4004      	ands	r4, r0
 8011cd6:	b2e4      	uxtb	r4, r4
 8011cd8:	b943      	cbnz	r3, 8011cec <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011cda:	4620      	mov	r0, r4
 8011cdc:	bd70      	pop	{r4, r5, r6, pc}
 8011cde:	6869      	ldr	r1, [r5, #4]
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f002 ffd5 	bl	8014c90 <ucdr_serialize_string>
 8011ce6:	4004      	ands	r4, r0
 8011ce8:	b2e4      	uxtb	r4, r4
 8011cea:	e7ee      	b.n	8011cca <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011cec:	68e9      	ldr	r1, [r5, #12]
 8011cee:	4630      	mov	r0, r6
 8011cf0:	f002 ffce 	bl	8014c90 <ucdr_serialize_string>
 8011cf4:	4004      	ands	r4, r0
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	bd70      	pop	{r4, r5, r6, pc}
 8011cfa:	bf00      	nop

08011cfc <uxr_serialize_OBJK_Topic_Binary>:
 8011cfc:	b570      	push	{r4, r5, r6, lr}
 8011cfe:	460d      	mov	r5, r1
 8011d00:	4606      	mov	r6, r0
 8011d02:	6809      	ldr	r1, [r1, #0]
 8011d04:	f002 ffc4 	bl	8014c90 <ucdr_serialize_string>
 8011d08:	4604      	mov	r4, r0
 8011d0a:	7929      	ldrb	r1, [r5, #4]
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f7fd f831 	bl	800ed74 <ucdr_serialize_bool>
 8011d12:	792b      	ldrb	r3, [r5, #4]
 8011d14:	4004      	ands	r4, r0
 8011d16:	b2e4      	uxtb	r4, r4
 8011d18:	b943      	cbnz	r3, 8011d2c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011d1a:	7b29      	ldrb	r1, [r5, #12]
 8011d1c:	4630      	mov	r0, r6
 8011d1e:	f7fd f829 	bl	800ed74 <ucdr_serialize_bool>
 8011d22:	7b2b      	ldrb	r3, [r5, #12]
 8011d24:	4004      	ands	r4, r0
 8011d26:	b93b      	cbnz	r3, 8011d38 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011d28:	4620      	mov	r0, r4
 8011d2a:	bd70      	pop	{r4, r5, r6, pc}
 8011d2c:	68a9      	ldr	r1, [r5, #8]
 8011d2e:	4630      	mov	r0, r6
 8011d30:	f002 ffae 	bl	8014c90 <ucdr_serialize_string>
 8011d34:	4004      	ands	r4, r0
 8011d36:	e7f0      	b.n	8011d1a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011d38:	6929      	ldr	r1, [r5, #16]
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f002 ffa8 	bl	8014c90 <ucdr_serialize_string>
 8011d40:	4004      	ands	r4, r0
 8011d42:	b2e4      	uxtb	r4, r4
 8011d44:	4620      	mov	r0, r4
 8011d46:	bd70      	pop	{r4, r5, r6, pc}

08011d48 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4c:	460c      	mov	r4, r1
 8011d4e:	7809      	ldrb	r1, [r1, #0]
 8011d50:	4606      	mov	r6, r0
 8011d52:	f7fd f80f 	bl	800ed74 <ucdr_serialize_bool>
 8011d56:	7823      	ldrb	r3, [r4, #0]
 8011d58:	4605      	mov	r5, r0
 8011d5a:	b96b      	cbnz	r3, 8011d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011d5c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011d60:	4630      	mov	r0, r6
 8011d62:	f7fd f807 	bl	800ed74 <ucdr_serialize_bool>
 8011d66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011d6a:	4005      	ands	r5, r0
 8011d6c:	b2ed      	uxtb	r5, r5
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d169      	bne.n	8011e46 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011d72:	4628      	mov	r0, r5
 8011d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d78:	6861      	ldr	r1, [r4, #4]
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	f7fd fa3e 	bl	800f1fc <ucdr_serialize_uint32_t>
 8011d80:	6863      	ldr	r3, [r4, #4]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d06b      	beq.n	8011e5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d067      	beq.n	8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d8a:	68a1      	ldr	r1, [r4, #8]
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f002 ff7f 	bl	8014c90 <ucdr_serialize_string>
 8011d92:	6863      	ldr	r3, [r4, #4]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d953      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d05e      	beq.n	8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d9c:	68e1      	ldr	r1, [r4, #12]
 8011d9e:	4630      	mov	r0, r6
 8011da0:	f002 ff76 	bl	8014c90 <ucdr_serialize_string>
 8011da4:	6863      	ldr	r3, [r4, #4]
 8011da6:	2b02      	cmp	r3, #2
 8011da8:	d94a      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d055      	beq.n	8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dae:	6921      	ldr	r1, [r4, #16]
 8011db0:	4630      	mov	r0, r6
 8011db2:	f002 ff6d 	bl	8014c90 <ucdr_serialize_string>
 8011db6:	6863      	ldr	r3, [r4, #4]
 8011db8:	2b03      	cmp	r3, #3
 8011dba:	d941      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d04c      	beq.n	8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dc0:	6961      	ldr	r1, [r4, #20]
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	f002 ff64 	bl	8014c90 <ucdr_serialize_string>
 8011dc8:	6863      	ldr	r3, [r4, #4]
 8011dca:	2b04      	cmp	r3, #4
 8011dcc:	d938      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	d043      	beq.n	8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dd2:	69a1      	ldr	r1, [r4, #24]
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	f002 ff5b 	bl	8014c90 <ucdr_serialize_string>
 8011dda:	6863      	ldr	r3, [r4, #4]
 8011ddc:	2b05      	cmp	r3, #5
 8011dde:	d92f      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011de0:	2800      	cmp	r0, #0
 8011de2:	d03a      	beq.n	8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011de4:	69e1      	ldr	r1, [r4, #28]
 8011de6:	4630      	mov	r0, r6
 8011de8:	f002 ff52 	bl	8014c90 <ucdr_serialize_string>
 8011dec:	6863      	ldr	r3, [r4, #4]
 8011dee:	2b06      	cmp	r3, #6
 8011df0:	d926      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011df2:	b390      	cbz	r0, 8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011df4:	6a21      	ldr	r1, [r4, #32]
 8011df6:	4630      	mov	r0, r6
 8011df8:	f002 ff4a 	bl	8014c90 <ucdr_serialize_string>
 8011dfc:	6863      	ldr	r3, [r4, #4]
 8011dfe:	2b07      	cmp	r3, #7
 8011e00:	d91e      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e02:	b350      	cbz	r0, 8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011e06:	4630      	mov	r0, r6
 8011e08:	f002 ff42 	bl	8014c90 <ucdr_serialize_string>
 8011e0c:	6863      	ldr	r3, [r4, #4]
 8011e0e:	2b08      	cmp	r3, #8
 8011e10:	d916      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e12:	b310      	cbz	r0, 8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011e16:	4630      	mov	r0, r6
 8011e18:	f002 ff3a 	bl	8014c90 <ucdr_serialize_string>
 8011e1c:	6863      	ldr	r3, [r4, #4]
 8011e1e:	2b09      	cmp	r3, #9
 8011e20:	d90e      	bls.n	8011e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e22:	b1d0      	cbz	r0, 8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e24:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011e28:	2709      	movs	r7, #9
 8011e2a:	e000      	b.n	8011e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011e2c:	b1a8      	cbz	r0, 8011e5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e2e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011e32:	4630      	mov	r0, r6
 8011e34:	f002 ff2c 	bl	8014c90 <ucdr_serialize_string>
 8011e38:	3701      	adds	r7, #1
 8011e3a:	6862      	ldr	r2, [r4, #4]
 8011e3c:	4297      	cmp	r7, r2
 8011e3e:	d3f5      	bcc.n	8011e2c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011e40:	4005      	ands	r5, r0
 8011e42:	b2ed      	uxtb	r5, r5
 8011e44:	e78a      	b.n	8011d5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011e46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011e48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f002 fef3 	bl	8014c38 <ucdr_serialize_sequence_uint8_t>
 8011e52:	4005      	ands	r5, r0
 8011e54:	4628      	mov	r0, r5
 8011e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e5a:	2500      	movs	r5, #0
 8011e5c:	e77e      	b.n	8011d5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011e5e:	4028      	ands	r0, r5
 8011e60:	b2c5      	uxtb	r5, r0
 8011e62:	e77b      	b.n	8011d5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011e64 <uxr_serialize_OBJK_Publisher_Binary>:
 8011e64:	b570      	push	{r4, r5, r6, lr}
 8011e66:	460d      	mov	r5, r1
 8011e68:	7809      	ldrb	r1, [r1, #0]
 8011e6a:	4606      	mov	r6, r0
 8011e6c:	f7fc ff82 	bl	800ed74 <ucdr_serialize_bool>
 8011e70:	782b      	ldrb	r3, [r5, #0]
 8011e72:	4604      	mov	r4, r0
 8011e74:	b94b      	cbnz	r3, 8011e8a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011e76:	7a29      	ldrb	r1, [r5, #8]
 8011e78:	4630      	mov	r0, r6
 8011e7a:	f7fc ff7b 	bl	800ed74 <ucdr_serialize_bool>
 8011e7e:	7a2b      	ldrb	r3, [r5, #8]
 8011e80:	4004      	ands	r4, r0
 8011e82:	b2e4      	uxtb	r4, r4
 8011e84:	b943      	cbnz	r3, 8011e98 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011e86:	4620      	mov	r0, r4
 8011e88:	bd70      	pop	{r4, r5, r6, pc}
 8011e8a:	6869      	ldr	r1, [r5, #4]
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f002 feff 	bl	8014c90 <ucdr_serialize_string>
 8011e92:	4004      	ands	r4, r0
 8011e94:	b2e4      	uxtb	r4, r4
 8011e96:	e7ee      	b.n	8011e76 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011e98:	f105 010c 	add.w	r1, r5, #12
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f7ff ff53 	bl	8011d48 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011ea2:	4004      	ands	r4, r0
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	bd70      	pop	{r4, r5, r6, pc}

08011ea8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011ea8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011eac:	4688      	mov	r8, r1
 8011eae:	4681      	mov	r9, r0
 8011eb0:	8809      	ldrh	r1, [r1, #0]
 8011eb2:	f7fc ffb9 	bl	800ee28 <ucdr_serialize_uint16_t>
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011ebc:	4648      	mov	r0, r9
 8011ebe:	f7fc ff59 	bl	800ed74 <ucdr_serialize_bool>
 8011ec2:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011ec6:	4006      	ands	r6, r0
 8011ec8:	b2f5      	uxtb	r5, r6
 8011eca:	b9eb      	cbnz	r3, 8011f08 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011ecc:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011ed0:	4648      	mov	r0, r9
 8011ed2:	f7fc ff4f 	bl	800ed74 <ucdr_serialize_bool>
 8011ed6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011eda:	4005      	ands	r5, r0
 8011edc:	bb7b      	cbnz	r3, 8011f3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011ede:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011ee2:	4648      	mov	r0, r9
 8011ee4:	f7fc ff46 	bl	800ed74 <ucdr_serialize_bool>
 8011ee8:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011eec:	4005      	ands	r5, r0
 8011eee:	b9f3      	cbnz	r3, 8011f2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011ef0:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011ef4:	4648      	mov	r0, r9
 8011ef6:	f7fc ff3d 	bl	800ed74 <ucdr_serialize_bool>
 8011efa:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011efe:	4005      	ands	r5, r0
 8011f00:	b94b      	cbnz	r3, 8011f16 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011f02:	4628      	mov	r0, r5
 8011f04:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011f08:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011f0c:	4648      	mov	r0, r9
 8011f0e:	f7fc ff8b 	bl	800ee28 <ucdr_serialize_uint16_t>
 8011f12:	4005      	ands	r5, r0
 8011f14:	e7da      	b.n	8011ecc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011f16:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011f1a:	f108 011c 	add.w	r1, r8, #28
 8011f1e:	4648      	mov	r0, r9
 8011f20:	f002 fe8a 	bl	8014c38 <ucdr_serialize_sequence_uint8_t>
 8011f24:	4028      	ands	r0, r5
 8011f26:	b2c5      	uxtb	r5, r0
 8011f28:	4628      	mov	r0, r5
 8011f2a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011f2e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011f32:	4648      	mov	r0, r9
 8011f34:	f7fd f962 	bl	800f1fc <ucdr_serialize_uint32_t>
 8011f38:	4028      	ands	r0, r5
 8011f3a:	b2c5      	uxtb	r5, r0
 8011f3c:	e7d8      	b.n	8011ef0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011f3e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011f42:	4648      	mov	r0, r9
 8011f44:	f7fd f95a 	bl	800f1fc <ucdr_serialize_uint32_t>
 8011f48:	4028      	ands	r0, r5
 8011f4a:	b2c5      	uxtb	r5, r0
 8011f4c:	e7c7      	b.n	8011ede <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011f4e:	bf00      	nop

08011f50 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f52:	2202      	movs	r2, #2
 8011f54:	460d      	mov	r5, r1
 8011f56:	4606      	mov	r6, r0
 8011f58:	f002 fd76 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	78a9      	ldrb	r1, [r5, #2]
 8011f60:	4630      	mov	r0, r6
 8011f62:	f7fc ff07 	bl	800ed74 <ucdr_serialize_bool>
 8011f66:	78ab      	ldrb	r3, [r5, #2]
 8011f68:	4004      	ands	r4, r0
 8011f6a:	b2e4      	uxtb	r4, r4
 8011f6c:	b90b      	cbnz	r3, 8011f72 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011f6e:	4620      	mov	r0, r4
 8011f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f72:	f105 0108 	add.w	r1, r5, #8
 8011f76:	4630      	mov	r0, r6
 8011f78:	f7ff ff96 	bl	8011ea8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011f7c:	4607      	mov	r7, r0
 8011f7e:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8011f82:	4630      	mov	r0, r6
 8011f84:	f7fc fef6 	bl	800ed74 <ucdr_serialize_bool>
 8011f88:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011f8c:	4038      	ands	r0, r7
 8011f8e:	b2c7      	uxtb	r7, r0
 8011f90:	b913      	cbnz	r3, 8011f98 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011f92:	403c      	ands	r4, r7
 8011f94:	4620      	mov	r0, r4
 8011f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f98:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f7fd fb83 	bl	800f6a8 <ucdr_serialize_uint64_t>
 8011fa2:	4007      	ands	r7, r0
 8011fa4:	e7f5      	b.n	8011f92 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011fa6:	bf00      	nop

08011fa8 <uxr_deserialize_ObjectVariant>:
 8011fa8:	b570      	push	{r4, r5, r6, lr}
 8011faa:	4605      	mov	r5, r0
 8011fac:	460e      	mov	r6, r1
 8011fae:	f7fc ff25 	bl	800edfc <ucdr_deserialize_uint8_t>
 8011fb2:	b168      	cbz	r0, 8011fd0 <uxr_deserialize_ObjectVariant+0x28>
 8011fb4:	7833      	ldrb	r3, [r6, #0]
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	2b0d      	cmp	r3, #13
 8011fbc:	d809      	bhi.n	8011fd2 <uxr_deserialize_ObjectVariant+0x2a>
 8011fbe:	e8df f003 	tbb	[pc, r3]
 8011fc2:	0a41      	.short	0x0a41
 8011fc4:	0a0a2323 	.word	0x0a0a2323
 8011fc8:	10080a0a 	.word	0x10080a0a
 8011fcc:	565c1010 	.word	0x565c1010
 8011fd0:	2400      	movs	r4, #0
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	1d31      	adds	r1, r6, #4
 8011fd8:	4628      	mov	r0, r5
 8011fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fde:	f7ff be41 	b.w	8011c64 <uxr_deserialize_DATAWRITER_Representation>
 8011fe2:	1d31      	adds	r1, r6, #4
 8011fe4:	4628      	mov	r0, r5
 8011fe6:	f7fc ff09 	bl	800edfc <ucdr_deserialize_uint8_t>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	d0f0      	beq.n	8011fd0 <uxr_deserialize_ObjectVariant+0x28>
 8011fee:	7933      	ldrb	r3, [r6, #4]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d001      	beq.n	8011ff8 <uxr_deserialize_ObjectVariant+0x50>
 8011ff4:	2b02      	cmp	r3, #2
 8011ff6:	d1ec      	bne.n	8011fd2 <uxr_deserialize_ObjectVariant+0x2a>
 8011ff8:	68b1      	ldr	r1, [r6, #8]
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012004:	f002 be54 	b.w	8014cb0 <ucdr_deserialize_string>
 8012008:	1d31      	adds	r1, r6, #4
 801200a:	4628      	mov	r0, r5
 801200c:	f7fc fef6 	bl	800edfc <ucdr_deserialize_uint8_t>
 8012010:	4604      	mov	r4, r0
 8012012:	b170      	cbz	r0, 8012032 <uxr_deserialize_ObjectVariant+0x8a>
 8012014:	7933      	ldrb	r3, [r6, #4]
 8012016:	2b02      	cmp	r3, #2
 8012018:	d04c      	beq.n	80120b4 <uxr_deserialize_ObjectVariant+0x10c>
 801201a:	2b03      	cmp	r3, #3
 801201c:	d109      	bne.n	8012032 <uxr_deserialize_ObjectVariant+0x8a>
 801201e:	f106 0308 	add.w	r3, r6, #8
 8012022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012026:	f106 010c 	add.w	r1, r6, #12
 801202a:	4628      	mov	r0, r5
 801202c:	f002 fe16 	bl	8014c5c <ucdr_deserialize_sequence_uint8_t>
 8012030:	4604      	mov	r4, r0
 8012032:	2202      	movs	r2, #2
 8012034:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012038:	4628      	mov	r0, r5
 801203a:	f002 fd69 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 801203e:	4020      	ands	r0, r4
 8012040:	b2c4      	uxtb	r4, r0
 8012042:	e7c6      	b.n	8011fd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012044:	1d31      	adds	r1, r6, #4
 8012046:	4628      	mov	r0, r5
 8012048:	f7fc fed8 	bl	800edfc <ucdr_deserialize_uint8_t>
 801204c:	4604      	mov	r4, r0
 801204e:	b130      	cbz	r0, 801205e <uxr_deserialize_ObjectVariant+0xb6>
 8012050:	7933      	ldrb	r3, [r6, #4]
 8012052:	2b02      	cmp	r3, #2
 8012054:	d036      	beq.n	80120c4 <uxr_deserialize_ObjectVariant+0x11c>
 8012056:	2b03      	cmp	r3, #3
 8012058:	d03c      	beq.n	80120d4 <uxr_deserialize_ObjectVariant+0x12c>
 801205a:	2b01      	cmp	r3, #1
 801205c:	d032      	beq.n	80120c4 <uxr_deserialize_ObjectVariant+0x11c>
 801205e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012062:	4628      	mov	r0, r5
 8012064:	f7fd fc70 	bl	800f948 <ucdr_deserialize_int16_t>
 8012068:	4020      	ands	r0, r4
 801206a:	b2c4      	uxtb	r4, r0
 801206c:	e7b1      	b.n	8011fd2 <uxr_deserialize_ObjectVariant+0x2a>
 801206e:	1d31      	adds	r1, r6, #4
 8012070:	4628      	mov	r0, r5
 8012072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012076:	f7ff bcab 	b.w	80119d0 <uxr_deserialize_CLIENT_Representation>
 801207a:	2204      	movs	r2, #4
 801207c:	4628      	mov	r0, r5
 801207e:	18b1      	adds	r1, r6, r2
 8012080:	f002 fd46 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8012084:	4604      	mov	r4, r0
 8012086:	2202      	movs	r2, #2
 8012088:	f106 0108 	add.w	r1, r6, #8
 801208c:	4628      	mov	r0, r5
 801208e:	f002 fd3f 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8012092:	4004      	ands	r4, r0
 8012094:	2202      	movs	r2, #2
 8012096:	f106 010a 	add.w	r1, r6, #10
 801209a:	4628      	mov	r0, r5
 801209c:	b2e4      	uxtb	r4, r4
 801209e:	f002 fd37 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80120a2:	4603      	mov	r3, r0
 80120a4:	f106 010c 	add.w	r1, r6, #12
 80120a8:	4628      	mov	r0, r5
 80120aa:	401c      	ands	r4, r3
 80120ac:	f7fc fe78 	bl	800eda0 <ucdr_deserialize_bool>
 80120b0:	4004      	ands	r4, r0
 80120b2:	e78e      	b.n	8011fd2 <uxr_deserialize_ObjectVariant+0x2a>
 80120b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120b8:	68b1      	ldr	r1, [r6, #8]
 80120ba:	4628      	mov	r0, r5
 80120bc:	f002 fdf8 	bl	8014cb0 <ucdr_deserialize_string>
 80120c0:	4604      	mov	r4, r0
 80120c2:	e7b6      	b.n	8012032 <uxr_deserialize_ObjectVariant+0x8a>
 80120c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120c8:	68b1      	ldr	r1, [r6, #8]
 80120ca:	4628      	mov	r0, r5
 80120cc:	f002 fdf0 	bl	8014cb0 <ucdr_deserialize_string>
 80120d0:	4604      	mov	r4, r0
 80120d2:	e7c4      	b.n	801205e <uxr_deserialize_ObjectVariant+0xb6>
 80120d4:	f106 0308 	add.w	r3, r6, #8
 80120d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120dc:	f106 010c 	add.w	r1, r6, #12
 80120e0:	4628      	mov	r0, r5
 80120e2:	f002 fdbb 	bl	8014c5c <ucdr_deserialize_sequence_uint8_t>
 80120e6:	4604      	mov	r4, r0
 80120e8:	e7b9      	b.n	801205e <uxr_deserialize_ObjectVariant+0xb6>
 80120ea:	bf00      	nop

080120ec <uxr_deserialize_BaseObjectRequest>:
 80120ec:	b570      	push	{r4, r5, r6, lr}
 80120ee:	2202      	movs	r2, #2
 80120f0:	4605      	mov	r5, r0
 80120f2:	460e      	mov	r6, r1
 80120f4:	f002 fd0c 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80120f8:	2202      	movs	r2, #2
 80120fa:	4604      	mov	r4, r0
 80120fc:	4628      	mov	r0, r5
 80120fe:	18b1      	adds	r1, r6, r2
 8012100:	f002 fd06 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8012104:	4020      	ands	r0, r4
 8012106:	b2c0      	uxtb	r0, r0
 8012108:	bd70      	pop	{r4, r5, r6, pc}
 801210a:	bf00      	nop

0801210c <uxr_serialize_ActivityInfoVariant>:
 801210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012110:	460e      	mov	r6, r1
 8012112:	7809      	ldrb	r1, [r1, #0]
 8012114:	4680      	mov	r8, r0
 8012116:	f7fc fe5b 	bl	800edd0 <ucdr_serialize_uint8_t>
 801211a:	4607      	mov	r7, r0
 801211c:	b138      	cbz	r0, 801212e <uxr_serialize_ActivityInfoVariant+0x22>
 801211e:	7833      	ldrb	r3, [r6, #0]
 8012120:	2b06      	cmp	r3, #6
 8012122:	f000 8081 	beq.w	8012228 <uxr_serialize_ActivityInfoVariant+0x11c>
 8012126:	2b0d      	cmp	r3, #13
 8012128:	d014      	beq.n	8012154 <uxr_serialize_ActivityInfoVariant+0x48>
 801212a:	2b05      	cmp	r3, #5
 801212c:	d002      	beq.n	8012134 <uxr_serialize_ActivityInfoVariant+0x28>
 801212e:	4638      	mov	r0, r7
 8012130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012134:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012138:	4640      	mov	r0, r8
 801213a:	f7fd fb85 	bl	800f848 <ucdr_serialize_int16_t>
 801213e:	4607      	mov	r7, r0
 8012140:	4640      	mov	r0, r8
 8012142:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8012146:	f7fd faaf 	bl	800f6a8 <ucdr_serialize_uint64_t>
 801214a:	4038      	ands	r0, r7
 801214c:	b2c7      	uxtb	r7, r0
 801214e:	4638      	mov	r0, r7
 8012150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012154:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012158:	4640      	mov	r0, r8
 801215a:	f7fd fb75 	bl	800f848 <ucdr_serialize_int16_t>
 801215e:	68f1      	ldr	r1, [r6, #12]
 8012160:	4607      	mov	r7, r0
 8012162:	4640      	mov	r0, r8
 8012164:	f7fd f84a 	bl	800f1fc <ucdr_serialize_uint32_t>
 8012168:	68f3      	ldr	r3, [r6, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d0ed      	beq.n	801214a <uxr_serialize_ActivityInfoVariant+0x3e>
 801216e:	b318      	cbz	r0, 80121b8 <uxr_serialize_ActivityInfoVariant+0xac>
 8012170:	f106 090c 	add.w	r9, r6, #12
 8012174:	2400      	movs	r4, #0
 8012176:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801217a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801217e:	7c29      	ldrb	r1, [r5, #16]
 8012180:	4640      	mov	r0, r8
 8012182:	f7fc fe25 	bl	800edd0 <ucdr_serialize_uint8_t>
 8012186:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801218a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801218e:	2800      	cmp	r0, #0
 8012190:	d051      	beq.n	8012236 <uxr_serialize_ActivityInfoVariant+0x12a>
 8012192:	7c2b      	ldrb	r3, [r5, #16]
 8012194:	00c9      	lsls	r1, r1, #3
 8012196:	2b03      	cmp	r3, #3
 8012198:	d854      	bhi.n	8012244 <uxr_serialize_ActivityInfoVariant+0x138>
 801219a:	e8df f003 	tbb	[pc, r3]
 801219e:	2133      	.short	0x2133
 80121a0:	020f      	.short	0x020f
 80121a2:	4449      	add	r1, r9
 80121a4:	4640      	mov	r0, r8
 80121a6:	6889      	ldr	r1, [r1, #8]
 80121a8:	f002 fd72 	bl	8014c90 <ucdr_serialize_string>
 80121ac:	3401      	adds	r4, #1
 80121ae:	68f2      	ldr	r2, [r6, #12]
 80121b0:	4294      	cmp	r4, r2
 80121b2:	d244      	bcs.n	801223e <uxr_serialize_ActivityInfoVariant+0x132>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d1de      	bne.n	8012176 <uxr_serialize_ActivityInfoVariant+0x6a>
 80121b8:	2700      	movs	r7, #0
 80121ba:	e7b8      	b.n	801212e <uxr_serialize_ActivityInfoVariant+0x22>
 80121bc:	3108      	adds	r1, #8
 80121be:	44a2      	add	sl, r4
 80121c0:	2210      	movs	r2, #16
 80121c2:	4640      	mov	r0, r8
 80121c4:	4449      	add	r1, r9
 80121c6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80121ca:	f002 fc3d 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 80121ce:	4605      	mov	r5, r0
 80121d0:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80121d4:	4640      	mov	r0, r8
 80121d6:	f7fd f811 	bl	800f1fc <ucdr_serialize_uint32_t>
 80121da:	4028      	ands	r0, r5
 80121dc:	b2c0      	uxtb	r0, r0
 80121de:	e7e5      	b.n	80121ac <uxr_serialize_ActivityInfoVariant+0xa0>
 80121e0:	3108      	adds	r1, #8
 80121e2:	44a2      	add	sl, r4
 80121e4:	2204      	movs	r2, #4
 80121e6:	4640      	mov	r0, r8
 80121e8:	4449      	add	r1, r9
 80121ea:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80121ee:	f002 fc2b 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 80121f2:	4605      	mov	r5, r0
 80121f4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80121f8:	4640      	mov	r0, r8
 80121fa:	f7fc fe15 	bl	800ee28 <ucdr_serialize_uint16_t>
 80121fe:	4028      	ands	r0, r5
 8012200:	b2c0      	uxtb	r0, r0
 8012202:	e7d3      	b.n	80121ac <uxr_serialize_ActivityInfoVariant+0xa0>
 8012204:	3108      	adds	r1, #8
 8012206:	44a2      	add	sl, r4
 8012208:	2202      	movs	r2, #2
 801220a:	4640      	mov	r0, r8
 801220c:	4449      	add	r1, r9
 801220e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012212:	f002 fc19 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8012216:	4605      	mov	r5, r0
 8012218:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801221c:	4640      	mov	r0, r8
 801221e:	f7fc fdd7 	bl	800edd0 <ucdr_serialize_uint8_t>
 8012222:	4028      	ands	r0, r5
 8012224:	b2c0      	uxtb	r0, r0
 8012226:	e7c1      	b.n	80121ac <uxr_serialize_ActivityInfoVariant+0xa0>
 8012228:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801222c:	4640      	mov	r0, r8
 801222e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012232:	f7fd bb09 	b.w	800f848 <ucdr_serialize_int16_t>
 8012236:	3401      	adds	r4, #1
 8012238:	68f2      	ldr	r2, [r6, #12]
 801223a:	42a2      	cmp	r2, r4
 801223c:	d8bc      	bhi.n	80121b8 <uxr_serialize_ActivityInfoVariant+0xac>
 801223e:	4007      	ands	r7, r0
 8012240:	b2ff      	uxtb	r7, r7
 8012242:	e774      	b.n	801212e <uxr_serialize_ActivityInfoVariant+0x22>
 8012244:	3401      	adds	r4, #1
 8012246:	68f3      	ldr	r3, [r6, #12]
 8012248:	3518      	adds	r5, #24
 801224a:	429c      	cmp	r4, r3
 801224c:	d397      	bcc.n	801217e <uxr_serialize_ActivityInfoVariant+0x72>
 801224e:	e76e      	b.n	801212e <uxr_serialize_ActivityInfoVariant+0x22>

08012250 <uxr_deserialize_BaseObjectReply>:
 8012250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012254:	2202      	movs	r2, #2
 8012256:	4606      	mov	r6, r0
 8012258:	460f      	mov	r7, r1
 801225a:	f002 fc59 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 801225e:	2202      	movs	r2, #2
 8012260:	4605      	mov	r5, r0
 8012262:	4630      	mov	r0, r6
 8012264:	18b9      	adds	r1, r7, r2
 8012266:	f002 fc53 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 801226a:	4680      	mov	r8, r0
 801226c:	1d39      	adds	r1, r7, #4
 801226e:	4630      	mov	r0, r6
 8012270:	f7fc fdc4 	bl	800edfc <ucdr_deserialize_uint8_t>
 8012274:	ea05 0508 	and.w	r5, r5, r8
 8012278:	4604      	mov	r4, r0
 801227a:	1d79      	adds	r1, r7, #5
 801227c:	4630      	mov	r0, r6
 801227e:	402c      	ands	r4, r5
 8012280:	f7fc fdbc 	bl	800edfc <ucdr_deserialize_uint8_t>
 8012284:	4020      	ands	r0, r4
 8012286:	b2c0      	uxtb	r0, r0
 8012288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801228c <uxr_serialize_ReadSpecification>:
 801228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801228e:	460e      	mov	r6, r1
 8012290:	4607      	mov	r7, r0
 8012292:	7809      	ldrb	r1, [r1, #0]
 8012294:	f7fc fd9c 	bl	800edd0 <ucdr_serialize_uint8_t>
 8012298:	4604      	mov	r4, r0
 801229a:	7871      	ldrb	r1, [r6, #1]
 801229c:	4638      	mov	r0, r7
 801229e:	f7fc fd97 	bl	800edd0 <ucdr_serialize_uint8_t>
 80122a2:	4004      	ands	r4, r0
 80122a4:	78b1      	ldrb	r1, [r6, #2]
 80122a6:	4638      	mov	r0, r7
 80122a8:	f7fc fd64 	bl	800ed74 <ucdr_serialize_bool>
 80122ac:	78b3      	ldrb	r3, [r6, #2]
 80122ae:	b2e4      	uxtb	r4, r4
 80122b0:	4004      	ands	r4, r0
 80122b2:	b943      	cbnz	r3, 80122c6 <uxr_serialize_ReadSpecification+0x3a>
 80122b4:	7a31      	ldrb	r1, [r6, #8]
 80122b6:	4638      	mov	r0, r7
 80122b8:	f7fc fd5c 	bl	800ed74 <ucdr_serialize_bool>
 80122bc:	7a33      	ldrb	r3, [r6, #8]
 80122be:	4004      	ands	r4, r0
 80122c0:	b93b      	cbnz	r3, 80122d2 <uxr_serialize_ReadSpecification+0x46>
 80122c2:	4620      	mov	r0, r4
 80122c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122c6:	6871      	ldr	r1, [r6, #4]
 80122c8:	4638      	mov	r0, r7
 80122ca:	f002 fce1 	bl	8014c90 <ucdr_serialize_string>
 80122ce:	4004      	ands	r4, r0
 80122d0:	e7f0      	b.n	80122b4 <uxr_serialize_ReadSpecification+0x28>
 80122d2:	8971      	ldrh	r1, [r6, #10]
 80122d4:	4638      	mov	r0, r7
 80122d6:	f7fc fda7 	bl	800ee28 <ucdr_serialize_uint16_t>
 80122da:	4605      	mov	r5, r0
 80122dc:	89b1      	ldrh	r1, [r6, #12]
 80122de:	4638      	mov	r0, r7
 80122e0:	f7fc fda2 	bl	800ee28 <ucdr_serialize_uint16_t>
 80122e4:	4005      	ands	r5, r0
 80122e6:	89f1      	ldrh	r1, [r6, #14]
 80122e8:	4638      	mov	r0, r7
 80122ea:	b2ed      	uxtb	r5, r5
 80122ec:	f7fc fd9c 	bl	800ee28 <ucdr_serialize_uint16_t>
 80122f0:	8a31      	ldrh	r1, [r6, #16]
 80122f2:	4025      	ands	r5, r4
 80122f4:	4604      	mov	r4, r0
 80122f6:	4638      	mov	r0, r7
 80122f8:	4025      	ands	r5, r4
 80122fa:	f7fc fd95 	bl	800ee28 <ucdr_serialize_uint16_t>
 80122fe:	ea00 0405 	and.w	r4, r0, r5
 8012302:	4620      	mov	r0, r4
 8012304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012306:	bf00      	nop

08012308 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012308:	f7ff bb0a 	b.w	8011920 <uxr_serialize_CLIENT_Representation>

0801230c <uxr_serialize_CREATE_Payload>:
 801230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230e:	2202      	movs	r2, #2
 8012310:	4607      	mov	r7, r0
 8012312:	460e      	mov	r6, r1
 8012314:	f002 fb98 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8012318:	2202      	movs	r2, #2
 801231a:	4605      	mov	r5, r0
 801231c:	4638      	mov	r0, r7
 801231e:	18b1      	adds	r1, r6, r2
 8012320:	f002 fb92 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8012324:	7931      	ldrb	r1, [r6, #4]
 8012326:	4604      	mov	r4, r0
 8012328:	4638      	mov	r0, r7
 801232a:	f7fc fd51 	bl	800edd0 <ucdr_serialize_uint8_t>
 801232e:	b170      	cbz	r0, 801234e <uxr_serialize_CREATE_Payload+0x42>
 8012330:	7933      	ldrb	r3, [r6, #4]
 8012332:	402c      	ands	r4, r5
 8012334:	3b01      	subs	r3, #1
 8012336:	b2e4      	uxtb	r4, r4
 8012338:	2b0d      	cmp	r3, #13
 801233a:	d809      	bhi.n	8012350 <uxr_serialize_CREATE_Payload+0x44>
 801233c:	e8df f003 	tbb	[pc, r3]
 8012340:	23230a4c 	.word	0x23230a4c
 8012344:	0a0a0a0a 	.word	0x0a0a0a0a
 8012348:	12121208 	.word	0x12121208
 801234c:	3e45      	.short	0x3e45
 801234e:	2400      	movs	r4, #0
 8012350:	4620      	mov	r0, r4
 8012352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012354:	f106 0108 	add.w	r1, r6, #8
 8012358:	4638      	mov	r0, r7
 801235a:	f7ff fbe7 	bl	8011b2c <uxr_serialize_DATAWRITER_Representation>
 801235e:	4004      	ands	r4, r0
 8012360:	4620      	mov	r0, r4
 8012362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012364:	7a31      	ldrb	r1, [r6, #8]
 8012366:	4638      	mov	r0, r7
 8012368:	f7fc fd32 	bl	800edd0 <ucdr_serialize_uint8_t>
 801236c:	2800      	cmp	r0, #0
 801236e:	d0ee      	beq.n	801234e <uxr_serialize_CREATE_Payload+0x42>
 8012370:	7a33      	ldrb	r3, [r6, #8]
 8012372:	2b01      	cmp	r3, #1
 8012374:	d001      	beq.n	801237a <uxr_serialize_CREATE_Payload+0x6e>
 8012376:	2b02      	cmp	r3, #2
 8012378:	d1ea      	bne.n	8012350 <uxr_serialize_CREATE_Payload+0x44>
 801237a:	68f1      	ldr	r1, [r6, #12]
 801237c:	4638      	mov	r0, r7
 801237e:	f002 fc87 	bl	8014c90 <ucdr_serialize_string>
 8012382:	4004      	ands	r4, r0
 8012384:	e7e4      	b.n	8012350 <uxr_serialize_CREATE_Payload+0x44>
 8012386:	7a31      	ldrb	r1, [r6, #8]
 8012388:	4638      	mov	r0, r7
 801238a:	f7fc fd21 	bl	800edd0 <ucdr_serialize_uint8_t>
 801238e:	4605      	mov	r5, r0
 8012390:	b158      	cbz	r0, 80123aa <uxr_serialize_CREATE_Payload+0x9e>
 8012392:	7a33      	ldrb	r3, [r6, #8]
 8012394:	2b02      	cmp	r3, #2
 8012396:	d034      	beq.n	8012402 <uxr_serialize_CREATE_Payload+0xf6>
 8012398:	2b03      	cmp	r3, #3
 801239a:	d106      	bne.n	80123aa <uxr_serialize_CREATE_Payload+0x9e>
 801239c:	68f2      	ldr	r2, [r6, #12]
 801239e:	f106 0110 	add.w	r1, r6, #16
 80123a2:	4638      	mov	r0, r7
 80123a4:	f002 fc48 	bl	8014c38 <ucdr_serialize_sequence_uint8_t>
 80123a8:	4605      	mov	r5, r0
 80123aa:	2202      	movs	r2, #2
 80123ac:	f506 7104 	add.w	r1, r6, #528	; 0x210
 80123b0:	4638      	mov	r0, r7
 80123b2:	f002 fb49 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 80123b6:	4028      	ands	r0, r5
 80123b8:	4004      	ands	r4, r0
 80123ba:	e7c9      	b.n	8012350 <uxr_serialize_CREATE_Payload+0x44>
 80123bc:	f106 0108 	add.w	r1, r6, #8
 80123c0:	4638      	mov	r0, r7
 80123c2:	f7ff faad 	bl	8011920 <uxr_serialize_CLIENT_Representation>
 80123c6:	4004      	ands	r4, r0
 80123c8:	e7c2      	b.n	8012350 <uxr_serialize_CREATE_Payload+0x44>
 80123ca:	f106 0108 	add.w	r1, r6, #8
 80123ce:	4638      	mov	r0, r7
 80123d0:	f7ff fb62 	bl	8011a98 <uxr_serialize_AGENT_Representation>
 80123d4:	4004      	ands	r4, r0
 80123d6:	e7bb      	b.n	8012350 <uxr_serialize_CREATE_Payload+0x44>
 80123d8:	7a31      	ldrb	r1, [r6, #8]
 80123da:	4638      	mov	r0, r7
 80123dc:	f7fc fcf8 	bl	800edd0 <ucdr_serialize_uint8_t>
 80123e0:	4605      	mov	r5, r0
 80123e2:	b130      	cbz	r0, 80123f2 <uxr_serialize_CREATE_Payload+0xe6>
 80123e4:	7a33      	ldrb	r3, [r6, #8]
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	d011      	beq.n	801240e <uxr_serialize_CREATE_Payload+0x102>
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d015      	beq.n	801241a <uxr_serialize_CREATE_Payload+0x10e>
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d00d      	beq.n	801240e <uxr_serialize_CREATE_Payload+0x102>
 80123f2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80123f6:	4638      	mov	r0, r7
 80123f8:	f7fd fa26 	bl	800f848 <ucdr_serialize_int16_t>
 80123fc:	4028      	ands	r0, r5
 80123fe:	4004      	ands	r4, r0
 8012400:	e7a6      	b.n	8012350 <uxr_serialize_CREATE_Payload+0x44>
 8012402:	68f1      	ldr	r1, [r6, #12]
 8012404:	4638      	mov	r0, r7
 8012406:	f002 fc43 	bl	8014c90 <ucdr_serialize_string>
 801240a:	4605      	mov	r5, r0
 801240c:	e7cd      	b.n	80123aa <uxr_serialize_CREATE_Payload+0x9e>
 801240e:	68f1      	ldr	r1, [r6, #12]
 8012410:	4638      	mov	r0, r7
 8012412:	f002 fc3d 	bl	8014c90 <ucdr_serialize_string>
 8012416:	4605      	mov	r5, r0
 8012418:	e7eb      	b.n	80123f2 <uxr_serialize_CREATE_Payload+0xe6>
 801241a:	68f2      	ldr	r2, [r6, #12]
 801241c:	f106 0110 	add.w	r1, r6, #16
 8012420:	4638      	mov	r0, r7
 8012422:	f002 fc09 	bl	8014c38 <ucdr_serialize_sequence_uint8_t>
 8012426:	4605      	mov	r5, r0
 8012428:	e7e3      	b.n	80123f2 <uxr_serialize_CREATE_Payload+0xe6>
 801242a:	bf00      	nop

0801242c <uxr_deserialize_GET_INFO_Payload>:
 801242c:	b570      	push	{r4, r5, r6, lr}
 801242e:	2202      	movs	r2, #2
 8012430:	4605      	mov	r5, r0
 8012432:	460e      	mov	r6, r1
 8012434:	f002 fb6c 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8012438:	2202      	movs	r2, #2
 801243a:	4604      	mov	r4, r0
 801243c:	4628      	mov	r0, r5
 801243e:	18b1      	adds	r1, r6, r2
 8012440:	f002 fb66 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8012444:	4603      	mov	r3, r0
 8012446:	1d31      	adds	r1, r6, #4
 8012448:	4628      	mov	r0, r5
 801244a:	401c      	ands	r4, r3
 801244c:	f7fd f806 	bl	800f45c <ucdr_deserialize_uint32_t>
 8012450:	b2e4      	uxtb	r4, r4
 8012452:	4020      	ands	r0, r4
 8012454:	bd70      	pop	{r4, r5, r6, pc}
 8012456:	bf00      	nop

08012458 <uxr_serialize_DELETE_Payload>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	2202      	movs	r2, #2
 801245c:	4605      	mov	r5, r0
 801245e:	460e      	mov	r6, r1
 8012460:	f002 faf2 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8012464:	2202      	movs	r2, #2
 8012466:	4604      	mov	r4, r0
 8012468:	4628      	mov	r0, r5
 801246a:	18b1      	adds	r1, r6, r2
 801246c:	f002 faec 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8012470:	4020      	ands	r0, r4
 8012472:	b2c0      	uxtb	r0, r0
 8012474:	bd70      	pop	{r4, r5, r6, pc}
 8012476:	bf00      	nop

08012478 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801247c:	460e      	mov	r6, r1
 801247e:	4605      	mov	r5, r0
 8012480:	f7fc fcbc 	bl	800edfc <ucdr_deserialize_uint8_t>
 8012484:	4604      	mov	r4, r0
 8012486:	1c71      	adds	r1, r6, #1
 8012488:	4628      	mov	r0, r5
 801248a:	f7fc fcb7 	bl	800edfc <ucdr_deserialize_uint8_t>
 801248e:	2204      	movs	r2, #4
 8012490:	4681      	mov	r9, r0
 8012492:	4628      	mov	r0, r5
 8012494:	18b1      	adds	r1, r6, r2
 8012496:	f002 fb3b 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 801249a:	f106 0108 	add.w	r1, r6, #8
 801249e:	4680      	mov	r8, r0
 80124a0:	2202      	movs	r2, #2
 80124a2:	4628      	mov	r0, r5
 80124a4:	f002 fb34 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80124a8:	ea04 0309 	and.w	r3, r4, r9
 80124ac:	4607      	mov	r7, r0
 80124ae:	2202      	movs	r2, #2
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	f106 010a 	add.w	r1, r6, #10
 80124b6:	4628      	mov	r0, r5
 80124b8:	ea03 0408 	and.w	r4, r3, r8
 80124bc:	f002 fb28 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80124c0:	4603      	mov	r3, r0
 80124c2:	4628      	mov	r0, r5
 80124c4:	403c      	ands	r4, r7
 80124c6:	f106 010c 	add.w	r1, r6, #12
 80124ca:	461d      	mov	r5, r3
 80124cc:	f7fc fc68 	bl	800eda0 <ucdr_deserialize_bool>
 80124d0:	4025      	ands	r5, r4
 80124d2:	4028      	ands	r0, r5
 80124d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080124d8 <uxr_deserialize_STATUS_Payload>:
 80124d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124dc:	2202      	movs	r2, #2
 80124de:	4606      	mov	r6, r0
 80124e0:	460f      	mov	r7, r1
 80124e2:	f002 fb15 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80124e6:	2202      	movs	r2, #2
 80124e8:	4605      	mov	r5, r0
 80124ea:	4630      	mov	r0, r6
 80124ec:	18b9      	adds	r1, r7, r2
 80124ee:	f002 fb0f 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 80124f2:	4680      	mov	r8, r0
 80124f4:	1d39      	adds	r1, r7, #4
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7fc fc80 	bl	800edfc <ucdr_deserialize_uint8_t>
 80124fc:	ea05 0508 	and.w	r5, r5, r8
 8012500:	4604      	mov	r4, r0
 8012502:	1d79      	adds	r1, r7, #5
 8012504:	4630      	mov	r0, r6
 8012506:	402c      	ands	r4, r5
 8012508:	f7fc fc78 	bl	800edfc <ucdr_deserialize_uint8_t>
 801250c:	4020      	ands	r0, r4
 801250e:	b2c0      	uxtb	r0, r0
 8012510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012514 <uxr_serialize_INFO_Payload>:
 8012514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012518:	2202      	movs	r2, #2
 801251a:	460c      	mov	r4, r1
 801251c:	4605      	mov	r5, r0
 801251e:	f002 fa93 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8012522:	2202      	movs	r2, #2
 8012524:	4680      	mov	r8, r0
 8012526:	4628      	mov	r0, r5
 8012528:	18a1      	adds	r1, r4, r2
 801252a:	f002 fa8d 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 801252e:	4607      	mov	r7, r0
 8012530:	7921      	ldrb	r1, [r4, #4]
 8012532:	4628      	mov	r0, r5
 8012534:	f7fc fc4c 	bl	800edd0 <ucdr_serialize_uint8_t>
 8012538:	ea08 0807 	and.w	r8, r8, r7
 801253c:	4606      	mov	r6, r0
 801253e:	7961      	ldrb	r1, [r4, #5]
 8012540:	4628      	mov	r0, r5
 8012542:	ea06 0608 	and.w	r6, r6, r8
 8012546:	f7fc fc43 	bl	800edd0 <ucdr_serialize_uint8_t>
 801254a:	7a21      	ldrb	r1, [r4, #8]
 801254c:	4030      	ands	r0, r6
 801254e:	b2c7      	uxtb	r7, r0
 8012550:	4628      	mov	r0, r5
 8012552:	f7fc fc0f 	bl	800ed74 <ucdr_serialize_bool>
 8012556:	7a23      	ldrb	r3, [r4, #8]
 8012558:	4606      	mov	r6, r0
 801255a:	b96b      	cbnz	r3, 8012578 <uxr_serialize_INFO_Payload+0x64>
 801255c:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8012560:	4628      	mov	r0, r5
 8012562:	f7fc fc07 	bl	800ed74 <ucdr_serialize_bool>
 8012566:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801256a:	4030      	ands	r0, r6
 801256c:	b2c6      	uxtb	r6, r0
 801256e:	b983      	cbnz	r3, 8012592 <uxr_serialize_INFO_Payload+0x7e>
 8012570:	ea06 0007 	and.w	r0, r6, r7
 8012574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012578:	7b21      	ldrb	r1, [r4, #12]
 801257a:	4628      	mov	r0, r5
 801257c:	f7fc fc28 	bl	800edd0 <ucdr_serialize_uint8_t>
 8012580:	b188      	cbz	r0, 80125a6 <uxr_serialize_INFO_Payload+0x92>
 8012582:	f104 010c 	add.w	r1, r4, #12
 8012586:	4628      	mov	r0, r5
 8012588:	f7ff faf8 	bl	8011b7c <uxr_serialize_ObjectVariant.part.0>
 801258c:	4030      	ands	r0, r6
 801258e:	b2c6      	uxtb	r6, r0
 8012590:	e7e4      	b.n	801255c <uxr_serialize_INFO_Payload+0x48>
 8012592:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8012596:	4628      	mov	r0, r5
 8012598:	f7ff fdb8 	bl	801210c <uxr_serialize_ActivityInfoVariant>
 801259c:	4006      	ands	r6, r0
 801259e:	ea06 0007 	and.w	r0, r6, r7
 80125a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a6:	4606      	mov	r6, r0
 80125a8:	e7d8      	b.n	801255c <uxr_serialize_INFO_Payload+0x48>
 80125aa:	bf00      	nop

080125ac <uxr_serialize_READ_DATA_Payload>:
 80125ac:	b570      	push	{r4, r5, r6, lr}
 80125ae:	2202      	movs	r2, #2
 80125b0:	4605      	mov	r5, r0
 80125b2:	460e      	mov	r6, r1
 80125b4:	f002 fa48 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 80125b8:	2202      	movs	r2, #2
 80125ba:	4604      	mov	r4, r0
 80125bc:	4628      	mov	r0, r5
 80125be:	18b1      	adds	r1, r6, r2
 80125c0:	f002 fa42 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 80125c4:	4603      	mov	r3, r0
 80125c6:	1d31      	adds	r1, r6, #4
 80125c8:	4628      	mov	r0, r5
 80125ca:	401c      	ands	r4, r3
 80125cc:	f7ff fe5e 	bl	801228c <uxr_serialize_ReadSpecification>
 80125d0:	b2e4      	uxtb	r4, r4
 80125d2:	4020      	ands	r0, r4
 80125d4:	bd70      	pop	{r4, r5, r6, pc}
 80125d6:	bf00      	nop

080125d8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	2202      	movs	r2, #2
 80125dc:	4605      	mov	r5, r0
 80125de:	460e      	mov	r6, r1
 80125e0:	f002 fa32 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 80125e4:	2202      	movs	r2, #2
 80125e6:	4604      	mov	r4, r0
 80125e8:	4628      	mov	r0, r5
 80125ea:	18b1      	adds	r1, r6, r2
 80125ec:	f002 fa2c 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 80125f0:	4020      	ands	r0, r4
 80125f2:	b2c0      	uxtb	r0, r0
 80125f4:	bd70      	pop	{r4, r5, r6, pc}
 80125f6:	bf00      	nop

080125f8 <uxr_serialize_ACKNACK_Payload>:
 80125f8:	b570      	push	{r4, r5, r6, lr}
 80125fa:	460c      	mov	r4, r1
 80125fc:	4605      	mov	r5, r0
 80125fe:	460e      	mov	r6, r1
 8012600:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012604:	f7fc fc10 	bl	800ee28 <ucdr_serialize_uint16_t>
 8012608:	2202      	movs	r2, #2
 801260a:	4621      	mov	r1, r4
 801260c:	4604      	mov	r4, r0
 801260e:	4628      	mov	r0, r5
 8012610:	f002 fa1a 	bl	8014a48 <ucdr_serialize_array_uint8_t>
 8012614:	4603      	mov	r3, r0
 8012616:	7931      	ldrb	r1, [r6, #4]
 8012618:	4628      	mov	r0, r5
 801261a:	401c      	ands	r4, r3
 801261c:	f7fc fbd8 	bl	800edd0 <ucdr_serialize_uint8_t>
 8012620:	b2e4      	uxtb	r4, r4
 8012622:	4020      	ands	r0, r4
 8012624:	bd70      	pop	{r4, r5, r6, pc}
 8012626:	bf00      	nop

08012628 <uxr_deserialize_ACKNACK_Payload>:
 8012628:	b570      	push	{r4, r5, r6, lr}
 801262a:	460e      	mov	r6, r1
 801262c:	4605      	mov	r5, r0
 801262e:	f7fc fcfb 	bl	800f028 <ucdr_deserialize_uint16_t>
 8012632:	2202      	movs	r2, #2
 8012634:	4604      	mov	r4, r0
 8012636:	4628      	mov	r0, r5
 8012638:	18b1      	adds	r1, r6, r2
 801263a:	f002 fa69 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 801263e:	4603      	mov	r3, r0
 8012640:	1d31      	adds	r1, r6, #4
 8012642:	4628      	mov	r0, r5
 8012644:	401c      	ands	r4, r3
 8012646:	f7fc fbd9 	bl	800edfc <ucdr_deserialize_uint8_t>
 801264a:	b2e4      	uxtb	r4, r4
 801264c:	4020      	ands	r0, r4
 801264e:	bd70      	pop	{r4, r5, r6, pc}

08012650 <uxr_serialize_HEARTBEAT_Payload>:
 8012650:	b570      	push	{r4, r5, r6, lr}
 8012652:	460d      	mov	r5, r1
 8012654:	4606      	mov	r6, r0
 8012656:	8809      	ldrh	r1, [r1, #0]
 8012658:	f7fc fbe6 	bl	800ee28 <ucdr_serialize_uint16_t>
 801265c:	8869      	ldrh	r1, [r5, #2]
 801265e:	4604      	mov	r4, r0
 8012660:	4630      	mov	r0, r6
 8012662:	f7fc fbe1 	bl	800ee28 <ucdr_serialize_uint16_t>
 8012666:	4603      	mov	r3, r0
 8012668:	7929      	ldrb	r1, [r5, #4]
 801266a:	4630      	mov	r0, r6
 801266c:	401c      	ands	r4, r3
 801266e:	f7fc fbaf 	bl	800edd0 <ucdr_serialize_uint8_t>
 8012672:	b2e4      	uxtb	r4, r4
 8012674:	4020      	ands	r0, r4
 8012676:	bd70      	pop	{r4, r5, r6, pc}

08012678 <uxr_deserialize_HEARTBEAT_Payload>:
 8012678:	b570      	push	{r4, r5, r6, lr}
 801267a:	460e      	mov	r6, r1
 801267c:	4605      	mov	r5, r0
 801267e:	f7fc fcd3 	bl	800f028 <ucdr_deserialize_uint16_t>
 8012682:	4604      	mov	r4, r0
 8012684:	1cb1      	adds	r1, r6, #2
 8012686:	4628      	mov	r0, r5
 8012688:	f7fc fcce 	bl	800f028 <ucdr_deserialize_uint16_t>
 801268c:	4603      	mov	r3, r0
 801268e:	1d31      	adds	r1, r6, #4
 8012690:	4628      	mov	r0, r5
 8012692:	401c      	ands	r4, r3
 8012694:	f7fc fbb2 	bl	800edfc <ucdr_deserialize_uint8_t>
 8012698:	b2e4      	uxtb	r4, r4
 801269a:	4020      	ands	r0, r4
 801269c:	bd70      	pop	{r4, r5, r6, pc}
 801269e:	bf00      	nop

080126a0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80126a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a4:	460e      	mov	r6, r1
 80126a6:	4605      	mov	r5, r0
 80126a8:	f7fd fa5a 	bl	800fb60 <ucdr_deserialize_int32_t>
 80126ac:	4607      	mov	r7, r0
 80126ae:	1d31      	adds	r1, r6, #4
 80126b0:	4628      	mov	r0, r5
 80126b2:	f7fc fed3 	bl	800f45c <ucdr_deserialize_uint32_t>
 80126b6:	4680      	mov	r8, r0
 80126b8:	f106 0108 	add.w	r1, r6, #8
 80126bc:	4628      	mov	r0, r5
 80126be:	f7fd fa4f 	bl	800fb60 <ucdr_deserialize_int32_t>
 80126c2:	ea07 0708 	and.w	r7, r7, r8
 80126c6:	4604      	mov	r4, r0
 80126c8:	f106 010c 	add.w	r1, r6, #12
 80126cc:	4628      	mov	r0, r5
 80126ce:	403c      	ands	r4, r7
 80126d0:	f7fc fec4 	bl	800f45c <ucdr_deserialize_uint32_t>
 80126d4:	f106 0110 	add.w	r1, r6, #16
 80126d8:	4004      	ands	r4, r0
 80126da:	4628      	mov	r0, r5
 80126dc:	f7fd fa40 	bl	800fb60 <ucdr_deserialize_int32_t>
 80126e0:	4603      	mov	r3, r0
 80126e2:	b2e4      	uxtb	r4, r4
 80126e4:	4628      	mov	r0, r5
 80126e6:	461d      	mov	r5, r3
 80126e8:	f106 0114 	add.w	r1, r6, #20
 80126ec:	f7fc feb6 	bl	800f45c <ucdr_deserialize_uint32_t>
 80126f0:	402c      	ands	r4, r5
 80126f2:	4020      	ands	r0, r4
 80126f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126f8 <uxr_deserialize_SampleIdentity>:
 80126f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126fc:	4604      	mov	r4, r0
 80126fe:	460d      	mov	r5, r1
 8012700:	220c      	movs	r2, #12
 8012702:	f002 fa05 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8012706:	2203      	movs	r2, #3
 8012708:	f105 010c 	add.w	r1, r5, #12
 801270c:	4607      	mov	r7, r0
 801270e:	4620      	mov	r0, r4
 8012710:	f002 f9fe 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8012714:	f105 010f 	add.w	r1, r5, #15
 8012718:	4680      	mov	r8, r0
 801271a:	4620      	mov	r0, r4
 801271c:	f7fc fb6e 	bl	800edfc <ucdr_deserialize_uint8_t>
 8012720:	f105 0110 	add.w	r1, r5, #16
 8012724:	4606      	mov	r6, r0
 8012726:	4620      	mov	r0, r4
 8012728:	f7fd fa1a 	bl	800fb60 <ucdr_deserialize_int32_t>
 801272c:	ea07 0708 	and.w	r7, r7, r8
 8012730:	4603      	mov	r3, r0
 8012732:	4620      	mov	r0, r4
 8012734:	403e      	ands	r6, r7
 8012736:	f105 0114 	add.w	r1, r5, #20
 801273a:	461c      	mov	r4, r3
 801273c:	f7fc fe8e 	bl	800f45c <ucdr_deserialize_uint32_t>
 8012740:	4034      	ands	r4, r6
 8012742:	4020      	ands	r0, r4
 8012744:	b2c0      	uxtb	r0, r0
 8012746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274a:	bf00      	nop

0801274c <rcl_convert_rmw_ret_to_rcl_ret>:
 801274c:	280b      	cmp	r0, #11
 801274e:	dc0d      	bgt.n	801276c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012750:	2800      	cmp	r0, #0
 8012752:	db09      	blt.n	8012768 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012754:	280b      	cmp	r0, #11
 8012756:	d807      	bhi.n	8012768 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012758:	e8df f000 	tbb	[pc, r0]
 801275c:	07060607 	.word	0x07060607
 8012760:	06060606 	.word	0x06060606
 8012764:	07070606 	.word	0x07070606
 8012768:	2001      	movs	r0, #1
 801276a:	4770      	bx	lr
 801276c:	28cb      	cmp	r0, #203	; 0xcb
 801276e:	bf18      	it	ne
 8012770:	2001      	movne	r0, #1
 8012772:	4770      	bx	lr

08012774 <rcl_get_zero_initialized_context>:
 8012774:	4a03      	ldr	r2, [pc, #12]	; (8012784 <rcl_get_zero_initialized_context+0x10>)
 8012776:	4603      	mov	r3, r0
 8012778:	e892 0003 	ldmia.w	r2, {r0, r1}
 801277c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012780:	4618      	mov	r0, r3
 8012782:	4770      	bx	lr
 8012784:	0801872c 	.word	0x0801872c

08012788 <rcl_context_is_valid>:
 8012788:	b118      	cbz	r0, 8012792 <rcl_context_is_valid+0xa>
 801278a:	6840      	ldr	r0, [r0, #4]
 801278c:	3800      	subs	r0, #0
 801278e:	bf18      	it	ne
 8012790:	2001      	movne	r0, #1
 8012792:	4770      	bx	lr

08012794 <__cleanup_context>:
 8012794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012798:	4606      	mov	r6, r0
 801279a:	2300      	movs	r3, #0
 801279c:	6800      	ldr	r0, [r0, #0]
 801279e:	6073      	str	r3, [r6, #4]
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d049      	beq.n	8012838 <__cleanup_context+0xa4>
 80127a4:	6947      	ldr	r7, [r0, #20]
 80127a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80127aa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80127ae:	b137      	cbz	r7, 80127be <__cleanup_context+0x2a>
 80127b0:	3014      	adds	r0, #20
 80127b2:	f000 f9bd 	bl	8012b30 <rcl_init_options_fini>
 80127b6:	4607      	mov	r7, r0
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d144      	bne.n	8012846 <__cleanup_context+0xb2>
 80127bc:	6830      	ldr	r0, [r6, #0]
 80127be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80127c0:	b143      	cbz	r3, 80127d4 <__cleanup_context+0x40>
 80127c2:	3028      	adds	r0, #40	; 0x28
 80127c4:	f001 fe20 	bl	8014408 <rmw_context_fini>
 80127c8:	b118      	cbz	r0, 80127d2 <__cleanup_context+0x3e>
 80127ca:	2f00      	cmp	r7, #0
 80127cc:	d03e      	beq.n	801284c <__cleanup_context+0xb8>
 80127ce:	f7fb fdc3 	bl	800e358 <rcutils_reset_error>
 80127d2:	6830      	ldr	r0, [r6, #0]
 80127d4:	6a03      	ldr	r3, [r0, #32]
 80127d6:	b1db      	cbz	r3, 8012810 <__cleanup_context+0x7c>
 80127d8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80127dc:	2a01      	cmp	r2, #1
 80127de:	f17c 0100 	sbcs.w	r1, ip, #0
 80127e2:	db11      	blt.n	8012808 <__cleanup_context+0x74>
 80127e4:	2400      	movs	r4, #0
 80127e6:	4625      	mov	r5, r4
 80127e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80127ec:	4649      	mov	r1, r9
 80127ee:	b1b8      	cbz	r0, 8012820 <__cleanup_context+0x8c>
 80127f0:	47c0      	blx	r8
 80127f2:	6833      	ldr	r3, [r6, #0]
 80127f4:	3401      	adds	r4, #1
 80127f6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80127fa:	f145 0500 	adc.w	r5, r5, #0
 80127fe:	6a1b      	ldr	r3, [r3, #32]
 8012800:	4294      	cmp	r4, r2
 8012802:	eb75 010c 	sbcs.w	r1, r5, ip
 8012806:	dbef      	blt.n	80127e8 <__cleanup_context+0x54>
 8012808:	4618      	mov	r0, r3
 801280a:	4649      	mov	r1, r9
 801280c:	47c0      	blx	r8
 801280e:	6830      	ldr	r0, [r6, #0]
 8012810:	4649      	mov	r1, r9
 8012812:	47c0      	blx	r8
 8012814:	2300      	movs	r3, #0
 8012816:	4638      	mov	r0, r7
 8012818:	e9c6 3300 	strd	r3, r3, [r6]
 801281c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012820:	3401      	adds	r4, #1
 8012822:	f145 0500 	adc.w	r5, r5, #0
 8012826:	4294      	cmp	r4, r2
 8012828:	eb75 010c 	sbcs.w	r1, r5, ip
 801282c:	dbdc      	blt.n	80127e8 <__cleanup_context+0x54>
 801282e:	4618      	mov	r0, r3
 8012830:	4649      	mov	r1, r9
 8012832:	47c0      	blx	r8
 8012834:	6830      	ldr	r0, [r6, #0]
 8012836:	e7eb      	b.n	8012810 <__cleanup_context+0x7c>
 8012838:	4607      	mov	r7, r0
 801283a:	2300      	movs	r3, #0
 801283c:	4638      	mov	r0, r7
 801283e:	e9c6 3300 	strd	r3, r3, [r6]
 8012842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012846:	f7fb fd87 	bl	800e358 <rcutils_reset_error>
 801284a:	e7b7      	b.n	80127bc <__cleanup_context+0x28>
 801284c:	f7ff ff7e 	bl	801274c <rcl_convert_rmw_ret_to_rcl_ret>
 8012850:	4607      	mov	r7, r0
 8012852:	e7bc      	b.n	80127ce <__cleanup_context+0x3a>

08012854 <rcl_init>:
 8012854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012858:	1e05      	subs	r5, r0, #0
 801285a:	b09e      	sub	sp, #120	; 0x78
 801285c:	460e      	mov	r6, r1
 801285e:	4690      	mov	r8, r2
 8012860:	461f      	mov	r7, r3
 8012862:	f340 809f 	ble.w	80129a4 <rcl_init+0x150>
 8012866:	2900      	cmp	r1, #0
 8012868:	f000 809f 	beq.w	80129aa <rcl_init+0x156>
 801286c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012870:	f04f 0c00 	mov.w	ip, #0
 8012874:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012878:	f10c 0c01 	add.w	ip, ip, #1
 801287c:	2c00      	cmp	r4, #0
 801287e:	f000 8094 	beq.w	80129aa <rcl_init+0x156>
 8012882:	4565      	cmp	r5, ip
 8012884:	d1f6      	bne.n	8012874 <rcl_init+0x20>
 8012886:	f1b8 0f00 	cmp.w	r8, #0
 801288a:	f000 808e 	beq.w	80129aa <rcl_init+0x156>
 801288e:	f8d8 4000 	ldr.w	r4, [r8]
 8012892:	2c00      	cmp	r4, #0
 8012894:	f000 8089 	beq.w	80129aa <rcl_init+0x156>
 8012898:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801289c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801289e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	a819      	add	r0, sp, #100	; 0x64
 80128a6:	f8cc 3000 	str.w	r3, [ip]
 80128aa:	f7fb fd31 	bl	800e310 <rcutils_allocator_is_valid>
 80128ae:	f080 0001 	eor.w	r0, r0, #1
 80128b2:	b2c0      	uxtb	r0, r0
 80128b4:	2800      	cmp	r0, #0
 80128b6:	d178      	bne.n	80129aa <rcl_init+0x156>
 80128b8:	2f00      	cmp	r7, #0
 80128ba:	d076      	beq.n	80129aa <rcl_init+0x156>
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d178      	bne.n	80129b4 <rcl_init+0x160>
 80128c2:	2178      	movs	r1, #120	; 0x78
 80128c4:	2001      	movs	r0, #1
 80128c6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80128ca:	4798      	blx	r3
 80128cc:	4604      	mov	r4, r0
 80128ce:	6038      	str	r0, [r7, #0]
 80128d0:	2800      	cmp	r0, #0
 80128d2:	f000 80b6 	beq.w	8012a42 <rcl_init+0x1ee>
 80128d6:	a802      	add	r0, sp, #8
 80128d8:	f001 f9c2 	bl	8013c60 <rmw_get_zero_initialized_context>
 80128dc:	a902      	add	r1, sp, #8
 80128de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80128e2:	2250      	movs	r2, #80	; 0x50
 80128e4:	f004 fe71 	bl	80175ca <memcpy>
 80128e8:	ac19      	add	r4, sp, #100	; 0x64
 80128ea:	f8d7 e000 	ldr.w	lr, [r7]
 80128ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128f0:	46f4      	mov	ip, lr
 80128f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128f6:	6823      	ldr	r3, [r4, #0]
 80128f8:	f10e 0114 	add.w	r1, lr, #20
 80128fc:	4640      	mov	r0, r8
 80128fe:	f8cc 3000 	str.w	r3, [ip]
 8012902:	f000 f93f 	bl	8012b84 <rcl_init_options_copy>
 8012906:	4604      	mov	r4, r0
 8012908:	2800      	cmp	r0, #0
 801290a:	d144      	bne.n	8012996 <rcl_init+0x142>
 801290c:	f8d7 9000 	ldr.w	r9, [r7]
 8012910:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012914:	f8c9 0020 	str.w	r0, [r9, #32]
 8012918:	f8c9 5018 	str.w	r5, [r9, #24]
 801291c:	f8c9 801c 	str.w	r8, [r9, #28]
 8012920:	2d00      	cmp	r5, #0
 8012922:	d04e      	beq.n	80129c2 <rcl_init+0x16e>
 8012924:	2e00      	cmp	r6, #0
 8012926:	d04c      	beq.n	80129c2 <rcl_init+0x16e>
 8012928:	2104      	movs	r1, #4
 801292a:	4628      	mov	r0, r5
 801292c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012930:	4798      	blx	r3
 8012932:	f8c9 0020 	str.w	r0, [r9, #32]
 8012936:	f8d7 9000 	ldr.w	r9, [r7]
 801293a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801293e:	46ca      	mov	sl, r9
 8012940:	b343      	cbz	r3, 8012994 <rcl_init+0x140>
 8012942:	2d01      	cmp	r5, #1
 8012944:	f178 0300 	sbcs.w	r3, r8, #0
 8012948:	db3b      	blt.n	80129c2 <rcl_init+0x16e>
 801294a:	2400      	movs	r4, #0
 801294c:	3e04      	subs	r6, #4
 801294e:	46a1      	mov	r9, r4
 8012950:	e00b      	b.n	801296a <rcl_init+0x116>
 8012952:	6831      	ldr	r1, [r6, #0]
 8012954:	f004 fe39 	bl	80175ca <memcpy>
 8012958:	3401      	adds	r4, #1
 801295a:	f149 0900 	adc.w	r9, r9, #0
 801295e:	45c8      	cmp	r8, r9
 8012960:	bf08      	it	eq
 8012962:	42a5      	cmpeq	r5, r4
 8012964:	d02b      	beq.n	80129be <rcl_init+0x16a>
 8012966:	f8d7 a000 	ldr.w	sl, [r7]
 801296a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801296e:	f7ed fcc1 	bl	80002f4 <strlen>
 8012972:	1c42      	adds	r2, r0, #1
 8012974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012976:	4610      	mov	r0, r2
 8012978:	991d      	ldr	r1, [sp, #116]	; 0x74
 801297a:	f8da a020 	ldr.w	sl, [sl, #32]
 801297e:	9201      	str	r2, [sp, #4]
 8012980:	4798      	blx	r3
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012988:	6a1b      	ldr	r3, [r3, #32]
 801298a:	9a01      	ldr	r2, [sp, #4]
 801298c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012990:	2800      	cmp	r0, #0
 8012992:	d1de      	bne.n	8012952 <rcl_init+0xfe>
 8012994:	240a      	movs	r4, #10
 8012996:	4638      	mov	r0, r7
 8012998:	f7ff fefc 	bl	8012794 <__cleanup_context>
 801299c:	4620      	mov	r0, r4
 801299e:	b01e      	add	sp, #120	; 0x78
 80129a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129a4:	2900      	cmp	r1, #0
 80129a6:	f43f af6e 	beq.w	8012886 <rcl_init+0x32>
 80129aa:	240b      	movs	r4, #11
 80129ac:	4620      	mov	r0, r4
 80129ae:	b01e      	add	sp, #120	; 0x78
 80129b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129b4:	2464      	movs	r4, #100	; 0x64
 80129b6:	4620      	mov	r0, r4
 80129b8:	b01e      	add	sp, #120	; 0x78
 80129ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129be:	f8d7 9000 	ldr.w	r9, [r7]
 80129c2:	4926      	ldr	r1, [pc, #152]	; (8012a5c <rcl_init+0x208>)
 80129c4:	680b      	ldr	r3, [r1, #0]
 80129c6:	3301      	adds	r3, #1
 80129c8:	d036      	beq.n	8012a38 <rcl_init+0x1e4>
 80129ca:	461a      	mov	r2, r3
 80129cc:	2400      	movs	r4, #0
 80129ce:	600b      	str	r3, [r1, #0]
 80129d0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80129d4:	607b      	str	r3, [r7, #4]
 80129d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80129d8:	3301      	adds	r3, #1
 80129da:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80129de:	d034      	beq.n	8012a4a <rcl_init+0x1f6>
 80129e0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80129e4:	b93b      	cbnz	r3, 80129f6 <rcl_init+0x1a2>
 80129e6:	3030      	adds	r0, #48	; 0x30
 80129e8:	f000 f93a 	bl	8012c60 <rcl_get_localhost_only>
 80129ec:	4604      	mov	r4, r0
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d1d1      	bne.n	8012996 <rcl_init+0x142>
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	6958      	ldr	r0, [r3, #20]
 80129f6:	aa18      	add	r2, sp, #96	; 0x60
 80129f8:	a917      	add	r1, sp, #92	; 0x5c
 80129fa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80129fc:	f000 fdce 	bl	801359c <rcl_validate_enclave_name>
 8012a00:	4604      	mov	r4, r0
 8012a02:	2800      	cmp	r0, #0
 8012a04:	d1c7      	bne.n	8012996 <rcl_init+0x142>
 8012a06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a08:	b9eb      	cbnz	r3, 8012a46 <rcl_init+0x1f2>
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	694b      	ldr	r3, [r1, #20]
 8012a0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8012a12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012a14:	f000 fc72 	bl	80132fc <rcl_get_security_options_from_environment>
 8012a18:	4604      	mov	r4, r0
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	d1bb      	bne.n	8012996 <rcl_init+0x142>
 8012a1e:	6839      	ldr	r1, [r7, #0]
 8012a20:	6948      	ldr	r0, [r1, #20]
 8012a22:	3128      	adds	r1, #40	; 0x28
 8012a24:	3018      	adds	r0, #24
 8012a26:	f001 fbb9 	bl	801419c <rmw_init>
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	d0bd      	beq.n	80129ac <rcl_init+0x158>
 8012a30:	f7ff fe8c 	bl	801274c <rcl_convert_rmw_ret_to_rcl_ret>
 8012a34:	4604      	mov	r4, r0
 8012a36:	e7ae      	b.n	8012996 <rcl_init+0x142>
 8012a38:	2201      	movs	r2, #1
 8012a3a:	461c      	mov	r4, r3
 8012a3c:	600a      	str	r2, [r1, #0]
 8012a3e:	4613      	mov	r3, r2
 8012a40:	e7c6      	b.n	80129d0 <rcl_init+0x17c>
 8012a42:	240a      	movs	r4, #10
 8012a44:	e7b2      	b.n	80129ac <rcl_init+0x158>
 8012a46:	2401      	movs	r4, #1
 8012a48:	e7a5      	b.n	8012996 <rcl_init+0x142>
 8012a4a:	3024      	adds	r0, #36	; 0x24
 8012a4c:	f003 fcd2 	bl	80163f4 <rcl_get_default_domain_id>
 8012a50:	4604      	mov	r4, r0
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d19f      	bne.n	8012996 <rcl_init+0x142>
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	6958      	ldr	r0, [r3, #20]
 8012a5a:	e7c1      	b.n	80129e0 <rcl_init+0x18c>
 8012a5c:	2400e184 	.word	0x2400e184

08012a60 <rcl_get_zero_initialized_init_options>:
 8012a60:	2000      	movs	r0, #0
 8012a62:	4770      	bx	lr

08012a64 <rcl_init_options_init>:
 8012a64:	b084      	sub	sp, #16
 8012a66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a68:	b097      	sub	sp, #92	; 0x5c
 8012a6a:	ae1d      	add	r6, sp, #116	; 0x74
 8012a6c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d058      	beq.n	8012b26 <rcl_init_options_init+0xc2>
 8012a74:	6803      	ldr	r3, [r0, #0]
 8012a76:	4605      	mov	r5, r0
 8012a78:	b133      	cbz	r3, 8012a88 <rcl_init_options_init+0x24>
 8012a7a:	2464      	movs	r4, #100	; 0x64
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	b017      	add	sp, #92	; 0x5c
 8012a80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012a84:	b004      	add	sp, #16
 8012a86:	4770      	bx	lr
 8012a88:	4630      	mov	r0, r6
 8012a8a:	f7fb fc41 	bl	800e310 <rcutils_allocator_is_valid>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d049      	beq.n	8012b26 <rcl_init_options_init+0xc2>
 8012a92:	46b4      	mov	ip, r6
 8012a94:	ac11      	add	r4, sp, #68	; 0x44
 8012a96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a9c:	f8dc 3000 	ldr.w	r3, [ip]
 8012aa0:	2050      	movs	r0, #80	; 0x50
 8012aa2:	9921      	ldr	r1, [sp, #132]	; 0x84
 8012aa4:	6023      	str	r3, [r4, #0]
 8012aa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012aa8:	4798      	blx	r3
 8012aaa:	4604      	mov	r4, r0
 8012aac:	6028      	str	r0, [r5, #0]
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d03b      	beq.n	8012b2a <rcl_init_options_init+0xc6>
 8012ab2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012ab6:	4686      	mov	lr, r0
 8012ab8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012abc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ac0:	f8dc 3000 	ldr.w	r3, [ip]
 8012ac4:	a802      	add	r0, sp, #8
 8012ac6:	f8ce 3000 	str.w	r3, [lr]
 8012aca:	f001 f8dd 	bl	8013c88 <rmw_get_zero_initialized_init_options>
 8012ace:	f10d 0e08 	add.w	lr, sp, #8
 8012ad2:	f104 0c18 	add.w	ip, r4, #24
 8012ad6:	682f      	ldr	r7, [r5, #0]
 8012ad8:	ac20      	add	r4, sp, #128	; 0x80
 8012ada:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ade:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ae2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012aea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012aee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012af2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012af6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012afe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012b02:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012b06:	f107 0018 	add.w	r0, r7, #24
 8012b0a:	f001 fa49 	bl	8013fa0 <rmw_init_options_init>
 8012b0e:	4604      	mov	r4, r0
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d0b3      	beq.n	8012a7c <rcl_init_options_init+0x18>
 8012b14:	9921      	ldr	r1, [sp, #132]	; 0x84
 8012b16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b18:	6828      	ldr	r0, [r5, #0]
 8012b1a:	4798      	blx	r3
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	f7ff fe15 	bl	801274c <rcl_convert_rmw_ret_to_rcl_ret>
 8012b22:	4604      	mov	r4, r0
 8012b24:	e7aa      	b.n	8012a7c <rcl_init_options_init+0x18>
 8012b26:	240b      	movs	r4, #11
 8012b28:	e7a8      	b.n	8012a7c <rcl_init_options_init+0x18>
 8012b2a:	240a      	movs	r4, #10
 8012b2c:	e7a6      	b.n	8012a7c <rcl_init_options_init+0x18>
 8012b2e:	bf00      	nop

08012b30 <rcl_init_options_fini>:
 8012b30:	b530      	push	{r4, r5, lr}
 8012b32:	b087      	sub	sp, #28
 8012b34:	b1f0      	cbz	r0, 8012b74 <rcl_init_options_fini+0x44>
 8012b36:	6803      	ldr	r3, [r0, #0]
 8012b38:	4604      	mov	r4, r0
 8012b3a:	b1db      	cbz	r3, 8012b74 <rcl_init_options_fini+0x44>
 8012b3c:	469c      	mov	ip, r3
 8012b3e:	f10d 0e04 	add.w	lr, sp, #4
 8012b42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8012b4e:	a801      	add	r0, sp, #4
 8012b50:	f8ce 3000 	str.w	r3, [lr]
 8012b54:	f7fb fbdc 	bl	800e310 <rcutils_allocator_is_valid>
 8012b58:	b160      	cbz	r0, 8012b74 <rcl_init_options_fini+0x44>
 8012b5a:	6820      	ldr	r0, [r4, #0]
 8012b5c:	3018      	adds	r0, #24
 8012b5e:	f001 fad9 	bl	8014114 <rmw_init_options_fini>
 8012b62:	4605      	mov	r5, r0
 8012b64:	b950      	cbnz	r0, 8012b7c <rcl_init_options_fini+0x4c>
 8012b66:	6820      	ldr	r0, [r4, #0]
 8012b68:	9b02      	ldr	r3, [sp, #8]
 8012b6a:	9905      	ldr	r1, [sp, #20]
 8012b6c:	4798      	blx	r3
 8012b6e:	4628      	mov	r0, r5
 8012b70:	b007      	add	sp, #28
 8012b72:	bd30      	pop	{r4, r5, pc}
 8012b74:	250b      	movs	r5, #11
 8012b76:	4628      	mov	r0, r5
 8012b78:	b007      	add	sp, #28
 8012b7a:	bd30      	pop	{r4, r5, pc}
 8012b7c:	f7ff fde6 	bl	801274c <rcl_convert_rmw_ret_to_rcl_ret>
 8012b80:	4605      	mov	r5, r0
 8012b82:	e7f8      	b.n	8012b76 <rcl_init_options_fini+0x46>

08012b84 <rcl_init_options_copy>:
 8012b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b88:	b094      	sub	sp, #80	; 0x50
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	d05b      	beq.n	8012c46 <rcl_init_options_copy+0xc2>
 8012b8e:	4604      	mov	r4, r0
 8012b90:	6800      	ldr	r0, [r0, #0]
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d057      	beq.n	8012c46 <rcl_init_options_copy+0xc2>
 8012b96:	460e      	mov	r6, r1
 8012b98:	f7fb fbba 	bl	800e310 <rcutils_allocator_is_valid>
 8012b9c:	2e00      	cmp	r6, #0
 8012b9e:	d052      	beq.n	8012c46 <rcl_init_options_copy+0xc2>
 8012ba0:	f080 0001 	eor.w	r0, r0, #1
 8012ba4:	b2c0      	uxtb	r0, r0
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d14d      	bne.n	8012c46 <rcl_init_options_copy+0xc2>
 8012baa:	6833      	ldr	r3, [r6, #0]
 8012bac:	b123      	cbz	r3, 8012bb8 <rcl_init_options_copy+0x34>
 8012bae:	2464      	movs	r4, #100	; 0x64
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	b014      	add	sp, #80	; 0x50
 8012bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb8:	6827      	ldr	r7, [r4, #0]
 8012bba:	ad0f      	add	r5, sp, #60	; 0x3c
 8012bbc:	46bc      	mov	ip, r7
 8012bbe:	f8d7 8000 	ldr.w	r8, [r7]
 8012bc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012bc8:	f8dc 3000 	ldr.w	r3, [ip]
 8012bcc:	2050      	movs	r0, #80	; 0x50
 8012bce:	4619      	mov	r1, r3
 8012bd0:	602b      	str	r3, [r5, #0]
 8012bd2:	47c0      	blx	r8
 8012bd4:	4605      	mov	r5, r0
 8012bd6:	6030      	str	r0, [r6, #0]
 8012bd8:	b3d0      	cbz	r0, 8012c50 <rcl_init_options_copy+0xcc>
 8012bda:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8012bde:	4686      	mov	lr, r0
 8012be0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012be4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012be8:	f8dc 3000 	ldr.w	r3, [ip]
 8012bec:	4668      	mov	r0, sp
 8012bee:	f8ce 3000 	str.w	r3, [lr]
 8012bf2:	f001 f849 	bl	8013c88 <rmw_get_zero_initialized_init_options>
 8012bf6:	46ee      	mov	lr, sp
 8012bf8:	f105 0c18 	add.w	ip, r5, #24
 8012bfc:	6824      	ldr	r4, [r4, #0]
 8012bfe:	6835      	ldr	r5, [r6, #0]
 8012c00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012c1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012c20:	f104 0018 	add.w	r0, r4, #24
 8012c24:	f105 0118 	add.w	r1, r5, #24
 8012c28:	f001 fa22 	bl	8014070 <rmw_init_options_copy>
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d0be      	beq.n	8012bb0 <rcl_init_options_copy+0x2c>
 8012c32:	f7fb fb7b 	bl	800e32c <rcutils_get_error_string>
 8012c36:	f7fb fb8f 	bl	800e358 <rcutils_reset_error>
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f7ff ff78 	bl	8012b30 <rcl_init_options_fini>
 8012c40:	b140      	cbz	r0, 8012c54 <rcl_init_options_copy+0xd0>
 8012c42:	4604      	mov	r4, r0
 8012c44:	e7b4      	b.n	8012bb0 <rcl_init_options_copy+0x2c>
 8012c46:	240b      	movs	r4, #11
 8012c48:	4620      	mov	r0, r4
 8012c4a:	b014      	add	sp, #80	; 0x50
 8012c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c50:	240a      	movs	r4, #10
 8012c52:	e7ad      	b.n	8012bb0 <rcl_init_options_copy+0x2c>
 8012c54:	4620      	mov	r0, r4
 8012c56:	b014      	add	sp, #80	; 0x50
 8012c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c5c:	f7ff bd76 	b.w	801274c <rcl_convert_rmw_ret_to_rcl_ret>

08012c60 <rcl_get_localhost_only>:
 8012c60:	b510      	push	{r4, lr}
 8012c62:	2300      	movs	r3, #0
 8012c64:	b082      	sub	sp, #8
 8012c66:	9301      	str	r3, [sp, #4]
 8012c68:	b1b8      	cbz	r0, 8012c9a <rcl_get_localhost_only+0x3a>
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	a901      	add	r1, sp, #4
 8012c6e:	480c      	ldr	r0, [pc, #48]	; (8012ca0 <rcl_get_localhost_only+0x40>)
 8012c70:	f000 fcdc 	bl	801362c <rcutils_get_env>
 8012c74:	b110      	cbz	r0, 8012c7c <rcl_get_localhost_only+0x1c>
 8012c76:	2001      	movs	r0, #1
 8012c78:	b002      	add	sp, #8
 8012c7a:	bd10      	pop	{r4, pc}
 8012c7c:	9b01      	ldr	r3, [sp, #4]
 8012c7e:	b113      	cbz	r3, 8012c86 <rcl_get_localhost_only+0x26>
 8012c80:	781a      	ldrb	r2, [r3, #0]
 8012c82:	2a31      	cmp	r2, #49	; 0x31
 8012c84:	d004      	beq.n	8012c90 <rcl_get_localhost_only+0x30>
 8012c86:	2302      	movs	r3, #2
 8012c88:	2000      	movs	r0, #0
 8012c8a:	7023      	strb	r3, [r4, #0]
 8012c8c:	b002      	add	sp, #8
 8012c8e:	bd10      	pop	{r4, pc}
 8012c90:	785b      	ldrb	r3, [r3, #1]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d1f7      	bne.n	8012c86 <rcl_get_localhost_only+0x26>
 8012c96:	2301      	movs	r3, #1
 8012c98:	e7f6      	b.n	8012c88 <rcl_get_localhost_only+0x28>
 8012c9a:	200b      	movs	r0, #11
 8012c9c:	b002      	add	sp, #8
 8012c9e:	bd10      	pop	{r4, pc}
 8012ca0:	08018734 	.word	0x08018734

08012ca4 <rcl_get_zero_initialized_node>:
 8012ca4:	4a03      	ldr	r2, [pc, #12]	; (8012cb4 <rcl_get_zero_initialized_node+0x10>)
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012cac:	e883 0003 	stmia.w	r3, {r0, r1}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	4770      	bx	lr
 8012cb4:	0801875c 	.word	0x0801875c

08012cb8 <rcl_node_init>:
 8012cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cbc:	b0a9      	sub	sp, #164	; 0xa4
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	460e      	mov	r6, r1
 8012cc2:	4615      	mov	r5, r2
 8012cc4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8012cc8:	a823      	add	r0, sp, #140	; 0x8c
 8012cca:	461f      	mov	r7, r3
 8012ccc:	f003 fdb8 	bl	8016840 <rcl_guard_condition_get_default_options>
 8012cd0:	f1b8 0f00 	cmp.w	r8, #0
 8012cd4:	f000 80f3 	beq.w	8012ebe <rcl_node_init+0x206>
 8012cd8:	4640      	mov	r0, r8
 8012cda:	f7fb fb19 	bl	800e310 <rcutils_allocator_is_valid>
 8012cde:	2d00      	cmp	r5, #0
 8012ce0:	bf18      	it	ne
 8012ce2:	2c00      	cmpne	r4, #0
 8012ce4:	f080 0001 	eor.w	r0, r0, #1
 8012ce8:	bf0c      	ite	eq
 8012cea:	f04f 0c01 	moveq.w	ip, #1
 8012cee:	f04f 0c00 	movne.w	ip, #0
 8012cf2:	2e00      	cmp	r6, #0
 8012cf4:	bf08      	it	eq
 8012cf6:	f04c 0c01 	orreq.w	ip, ip, #1
 8012cfa:	ea4c 0c00 	orr.w	ip, ip, r0
 8012cfe:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8012d02:	f040 80dc 	bne.w	8012ebe <rcl_node_init+0x206>
 8012d06:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8012d0a:	f1ba 0f00 	cmp.w	sl, #0
 8012d0e:	f040 80fc 	bne.w	8012f0a <rcl_node_init+0x252>
 8012d12:	2f00      	cmp	r7, #0
 8012d14:	f000 80d3 	beq.w	8012ebe <rcl_node_init+0x206>
 8012d18:	4638      	mov	r0, r7
 8012d1a:	f7ff fd35 	bl	8012788 <rcl_context_is_valid>
 8012d1e:	4683      	mov	fp, r0
 8012d20:	2800      	cmp	r0, #0
 8012d22:	f000 80d2 	beq.w	8012eca <rcl_node_init+0x212>
 8012d26:	4652      	mov	r2, sl
 8012d28:	4630      	mov	r0, r6
 8012d2a:	a922      	add	r1, sp, #136	; 0x88
 8012d2c:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8012d30:	f001 f8ac 	bl	8013e8c <rmw_validate_node_name>
 8012d34:	4682      	mov	sl, r0
 8012d36:	2800      	cmp	r0, #0
 8012d38:	f040 80c3 	bne.w	8012ec2 <rcl_node_init+0x20a>
 8012d3c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	f040 80f1 	bne.w	8012f26 <rcl_node_init+0x26e>
 8012d44:	4628      	mov	r0, r5
 8012d46:	f7ed fad5 	bl	80002f4 <strlen>
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	f040 80c0 	bne.w	8012ed0 <rcl_node_init+0x218>
 8012d50:	4d79      	ldr	r5, [pc, #484]	; (8012f38 <rcl_node_init+0x280>)
 8012d52:	a922      	add	r1, sp, #136	; 0x88
 8012d54:	2200      	movs	r2, #0
 8012d56:	4628      	mov	r0, r5
 8012d58:	f001 f87a 	bl	8013e50 <rmw_validate_namespace>
 8012d5c:	4682      	mov	sl, r0
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	f040 80af 	bne.w	8012ec2 <rcl_node_init+0x20a>
 8012d64:	9822      	ldr	r0, [sp, #136]	; 0x88
 8012d66:	2800      	cmp	r0, #0
 8012d68:	f040 80d5 	bne.w	8012f16 <rcl_node_init+0x25e>
 8012d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8012d70:	2078      	movs	r0, #120	; 0x78
 8012d72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012d76:	4798      	blx	r3
 8012d78:	4682      	mov	sl, r0
 8012d7a:	6060      	str	r0, [r4, #4]
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	f000 80cf 	beq.w	8012f20 <rcl_node_init+0x268>
 8012d82:	2200      	movs	r2, #0
 8012d84:	2300      	movs	r3, #0
 8012d86:	a808      	add	r0, sp, #32
 8012d88:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8012d8c:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8012d90:	f000 f902 	bl	8012f98 <rcl_node_get_default_options>
 8012d94:	a908      	add	r1, sp, #32
 8012d96:	4650      	mov	r0, sl
 8012d98:	2268      	movs	r2, #104	; 0x68
 8012d9a:	f004 fc16 	bl	80175ca <memcpy>
 8012d9e:	6861      	ldr	r1, [r4, #4]
 8012da0:	4640      	mov	r0, r8
 8012da2:	6027      	str	r7, [r4, #0]
 8012da4:	f000 f906 	bl	8012fb4 <rcl_node_options_copy>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d158      	bne.n	8012e5e <rcl_node_init+0x1a6>
 8012dac:	4628      	mov	r0, r5
 8012dae:	f7ed faa1 	bl	80002f4 <strlen>
 8012db2:	4428      	add	r0, r5
 8012db4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012db8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012dbc:	2b2f      	cmp	r3, #47	; 0x2f
 8012dbe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012dc2:	9300      	str	r3, [sp, #0]
 8012dc4:	bf0c      	ite	eq
 8012dc6:	4b5d      	ldreq	r3, [pc, #372]	; (8012f3c <rcl_node_init+0x284>)
 8012dc8:	4b5d      	ldrne	r3, [pc, #372]	; (8012f40 <rcl_node_init+0x288>)
 8012dca:	9302      	str	r3, [sp, #8]
 8012dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012dd0:	9301      	str	r3, [sp, #4]
 8012dd2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8012dd6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012dda:	f000 fc4f 	bl	801367c <rcutils_format_string_limit>
 8012dde:	6823      	ldr	r3, [r4, #0]
 8012de0:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8012de4:	4631      	mov	r1, r6
 8012de6:	6818      	ldr	r0, [r3, #0]
 8012de8:	462a      	mov	r2, r5
 8012dea:	6866      	ldr	r6, [r4, #4]
 8012dec:	3028      	adds	r0, #40	; 0x28
 8012dee:	f001 fc2f 	bl	8014650 <rmw_create_node>
 8012df2:	6863      	ldr	r3, [r4, #4]
 8012df4:	66b0      	str	r0, [r6, #104]	; 0x68
 8012df6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	d032      	beq.n	8012e62 <rcl_node_init+0x1aa>
 8012dfc:	f001 fcb8 	bl	8014770 <rmw_node_get_graph_guard_condition>
 8012e00:	4682      	mov	sl, r0
 8012e02:	b360      	cbz	r0, 8012e5e <rcl_node_init+0x1a6>
 8012e04:	f8d8 3000 	ldr.w	r3, [r8]
 8012e08:	2008      	movs	r0, #8
 8012e0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012e0e:	6866      	ldr	r6, [r4, #4]
 8012e10:	4798      	blx	r3
 8012e12:	6863      	ldr	r3, [r4, #4]
 8012e14:	66f0      	str	r0, [r6, #108]	; 0x6c
 8012e16:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8012e1a:	f1bb 0f00 	cmp.w	fp, #0
 8012e1e:	d020      	beq.n	8012e62 <rcl_node_init+0x1aa>
 8012e20:	a806      	add	r0, sp, #24
 8012e22:	ae23      	add	r6, sp, #140	; 0x8c
 8012e24:	f003 fc80 	bl	8016728 <rcl_get_zero_initialized_guard_condition>
 8012e28:	a806      	add	r0, sp, #24
 8012e2a:	6863      	ldr	r3, [r4, #4]
 8012e2c:	46c4      	mov	ip, r8
 8012e2e:	c803      	ldmia	r0, {r0, r1}
 8012e30:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8012e34:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012e38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8012e42:	6033      	str	r3, [r6, #0]
 8012e44:	ab28      	add	r3, sp, #160	; 0xa0
 8012e46:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012e4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012e4e:	4651      	mov	r1, sl
 8012e50:	463a      	mov	r2, r7
 8012e52:	4670      	mov	r0, lr
 8012e54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012e56:	f003 fc71 	bl	801673c <rcl_guard_condition_init_from_rmw>
 8012e5a:	4682      	mov	sl, r0
 8012e5c:	b328      	cbz	r0, 8012eaa <rcl_node_init+0x1f2>
 8012e5e:	6863      	ldr	r3, [r4, #4]
 8012e60:	b1f3      	cbz	r3, 8012ea0 <rcl_node_init+0x1e8>
 8012e62:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8012e64:	b128      	cbz	r0, 8012e72 <rcl_node_init+0x1ba>
 8012e66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012e6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012e6e:	4798      	blx	r3
 8012e70:	6863      	ldr	r3, [r4, #4]
 8012e72:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012e74:	b110      	cbz	r0, 8012e7c <rcl_node_init+0x1c4>
 8012e76:	f001 fbfd 	bl	8014674 <rmw_destroy_node>
 8012e7a:	6863      	ldr	r3, [r4, #4]
 8012e7c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8012e7e:	b148      	cbz	r0, 8012e94 <rcl_node_init+0x1dc>
 8012e80:	f003 fcb8 	bl	80167f4 <rcl_guard_condition_fini>
 8012e84:	6863      	ldr	r3, [r4, #4]
 8012e86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012e8a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8012e8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012e90:	4798      	blx	r3
 8012e92:	6863      	ldr	r3, [r4, #4]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012e9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012e9e:	4798      	blx	r3
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	f04f 0a01 	mov.w	sl, #1
 8012ea6:	e9c4 3300 	strd	r3, r3, [r4]
 8012eaa:	f1b9 0f00 	cmp.w	r9, #0
 8012eae:	d008      	beq.n	8012ec2 <rcl_node_init+0x20a>
 8012eb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012eba:	4798      	blx	r3
 8012ebc:	e001      	b.n	8012ec2 <rcl_node_init+0x20a>
 8012ebe:	f04f 0a0b 	mov.w	sl, #11
 8012ec2:	4650      	mov	r0, sl
 8012ec4:	b029      	add	sp, #164	; 0xa4
 8012ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eca:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8012ece:	e7f8      	b.n	8012ec2 <rcl_node_init+0x20a>
 8012ed0:	782b      	ldrb	r3, [r5, #0]
 8012ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8012ed4:	f43f af3d 	beq.w	8012d52 <rcl_node_init+0x9a>
 8012ed8:	9503      	str	r5, [sp, #12]
 8012eda:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	4b18      	ldr	r3, [pc, #96]	; (8012f44 <rcl_node_init+0x28c>)
 8012ee2:	9302      	str	r3, [sp, #8]
 8012ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ee8:	9301      	str	r3, [sp, #4]
 8012eea:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012eee:	f000 fbc5 	bl	801367c <rcutils_format_string_limit>
 8012ef2:	4605      	mov	r5, r0
 8012ef4:	b1e0      	cbz	r0, 8012f30 <rcl_node_init+0x278>
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	a922      	add	r1, sp, #136	; 0x88
 8012efa:	9222      	str	r2, [sp, #136]	; 0x88
 8012efc:	f000 ffa8 	bl	8013e50 <rmw_validate_namespace>
 8012f00:	4682      	mov	sl, r0
 8012f02:	2800      	cmp	r0, #0
 8012f04:	d1d4      	bne.n	8012eb0 <rcl_node_init+0x1f8>
 8012f06:	46d9      	mov	r9, fp
 8012f08:	e72c      	b.n	8012d64 <rcl_node_init+0xac>
 8012f0a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8012f0e:	4650      	mov	r0, sl
 8012f10:	b029      	add	sp, #164	; 0xa4
 8012f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f16:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8012f1a:	f000 ffab 	bl	8013e74 <rmw_namespace_validation_result_string>
 8012f1e:	e7c4      	b.n	8012eaa <rcl_node_init+0x1f2>
 8012f20:	f04f 0a0a 	mov.w	sl, #10
 8012f24:	e7c1      	b.n	8012eaa <rcl_node_init+0x1f2>
 8012f26:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8012f2a:	f001 f803 	bl	8013f34 <rmw_node_name_validation_result_string>
 8012f2e:	e7c8      	b.n	8012ec2 <rcl_node_init+0x20a>
 8012f30:	f04f 0a0a 	mov.w	sl, #10
 8012f34:	e7c5      	b.n	8012ec2 <rcl_node_init+0x20a>
 8012f36:	bf00      	nop
 8012f38:	0801874c 	.word	0x0801874c
 8012f3c:	080185d0 	.word	0x080185d0
 8012f40:	08018754 	.word	0x08018754
 8012f44:	08018750 	.word	0x08018750

08012f48 <rcl_node_is_valid>:
 8012f48:	b130      	cbz	r0, 8012f58 <rcl_node_is_valid+0x10>
 8012f4a:	6843      	ldr	r3, [r0, #4]
 8012f4c:	b123      	cbz	r3, 8012f58 <rcl_node_is_valid+0x10>
 8012f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f50:	b113      	cbz	r3, 8012f58 <rcl_node_is_valid+0x10>
 8012f52:	6800      	ldr	r0, [r0, #0]
 8012f54:	f7ff bc18 	b.w	8012788 <rcl_context_is_valid>
 8012f58:	2000      	movs	r0, #0
 8012f5a:	4770      	bx	lr

08012f5c <rcl_node_get_name>:
 8012f5c:	b120      	cbz	r0, 8012f68 <rcl_node_get_name+0xc>
 8012f5e:	6840      	ldr	r0, [r0, #4]
 8012f60:	b110      	cbz	r0, 8012f68 <rcl_node_get_name+0xc>
 8012f62:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012f64:	b100      	cbz	r0, 8012f68 <rcl_node_get_name+0xc>
 8012f66:	6880      	ldr	r0, [r0, #8]
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop

08012f6c <rcl_node_get_namespace>:
 8012f6c:	b120      	cbz	r0, 8012f78 <rcl_node_get_namespace+0xc>
 8012f6e:	6840      	ldr	r0, [r0, #4]
 8012f70:	b110      	cbz	r0, 8012f78 <rcl_node_get_namespace+0xc>
 8012f72:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012f74:	b100      	cbz	r0, 8012f78 <rcl_node_get_namespace+0xc>
 8012f76:	68c0      	ldr	r0, [r0, #12]
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop

08012f7c <rcl_node_get_options>:
 8012f7c:	b128      	cbz	r0, 8012f8a <rcl_node_get_options+0xe>
 8012f7e:	6840      	ldr	r0, [r0, #4]
 8012f80:	b118      	cbz	r0, 8012f8a <rcl_node_get_options+0xe>
 8012f82:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	bf08      	it	eq
 8012f88:	2000      	moveq	r0, #0
 8012f8a:	4770      	bx	lr

08012f8c <rcl_node_get_rmw_handle>:
 8012f8c:	b110      	cbz	r0, 8012f94 <rcl_node_get_rmw_handle+0x8>
 8012f8e:	6840      	ldr	r0, [r0, #4]
 8012f90:	b100      	cbz	r0, 8012f94 <rcl_node_get_rmw_handle+0x8>
 8012f92:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop

08012f98 <rcl_node_get_default_options>:
 8012f98:	b510      	push	{r4, lr}
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	2268      	movs	r2, #104	; 0x68
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	f004 fa4a 	bl	8017438 <memset>
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	f7fb f9a5 	bl	800e2f4 <rcutils_get_default_allocator>
 8012faa:	2301      	movs	r3, #1
 8012fac:	4620      	mov	r0, r4
 8012fae:	7523      	strb	r3, [r4, #20]
 8012fb0:	bd10      	pop	{r4, pc}
 8012fb2:	bf00      	nop

08012fb4 <rcl_node_options_copy>:
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	bf18      	it	ne
 8012fb8:	4288      	cmpne	r0, r1
 8012fba:	d01b      	beq.n	8012ff4 <rcl_node_options_copy+0x40>
 8012fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fbe:	fab1 f681 	clz	r6, r1
 8012fc2:	460c      	mov	r4, r1
 8012fc4:	0976      	lsrs	r6, r6, #5
 8012fc6:	b199      	cbz	r1, 8012ff0 <rcl_node_options_copy+0x3c>
 8012fc8:	4605      	mov	r5, r0
 8012fca:	8a87      	ldrh	r7, [r0, #20]
 8012fcc:	4684      	mov	ip, r0
 8012fce:	468e      	mov	lr, r1
 8012fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012fd6:	682b      	ldr	r3, [r5, #0]
 8012fd8:	2250      	movs	r2, #80	; 0x50
 8012fda:	f10c 0118 	add.w	r1, ip, #24
 8012fde:	f104 0018 	add.w	r0, r4, #24
 8012fe2:	f8ce 3000 	str.w	r3, [lr]
 8012fe6:	82a7      	strh	r7, [r4, #20]
 8012fe8:	f004 faef 	bl	80175ca <memcpy>
 8012fec:	4630      	mov	r0, r6
 8012fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ff0:	200b      	movs	r0, #11
 8012ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ff4:	200b      	movs	r0, #11
 8012ff6:	4770      	bx	lr

08012ff8 <rcl_node_resolve_name>:
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ffe:	b091      	sub	sp, #68	; 0x44
 8013000:	ac1a      	add	r4, sp, #104	; 0x68
 8013002:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8013006:	e884 000c 	stmia.w	r4, {r2, r3}
 801300a:	2800      	cmp	r0, #0
 801300c:	d03d      	beq.n	801308a <rcl_node_resolve_name+0x92>
 801300e:	460c      	mov	r4, r1
 8013010:	4605      	mov	r5, r0
 8013012:	f7ff ffb3 	bl	8012f7c <rcl_node_get_options>
 8013016:	2800      	cmp	r0, #0
 8013018:	d03a      	beq.n	8013090 <rcl_node_resolve_name+0x98>
 801301a:	4628      	mov	r0, r5
 801301c:	f7ff ff9e 	bl	8012f5c <rcl_node_get_name>
 8013020:	4606      	mov	r6, r0
 8013022:	4628      	mov	r0, r5
 8013024:	ad0b      	add	r5, sp, #44	; 0x2c
 8013026:	f7ff ffa1 	bl	8012f6c <rcl_node_get_namespace>
 801302a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801302e:	4607      	mov	r7, r0
 8013030:	46ac      	mov	ip, r5
 8013032:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013036:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801303a:	f8de 3000 	ldr.w	r3, [lr]
 801303e:	f8cc 3000 	str.w	r3, [ip]
 8013042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013044:	b30b      	cbz	r3, 801308a <rcl_node_resolve_name+0x92>
 8013046:	4689      	mov	r9, r1
 8013048:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801304c:	f000 fc8e 	bl	801396c <rcutils_get_zero_initialized_string_map>
 8013050:	ab10      	add	r3, sp, #64	; 0x40
 8013052:	9008      	str	r0, [sp, #32]
 8013054:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013058:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801305c:	2100      	movs	r1, #0
 801305e:	a808      	add	r0, sp, #32
 8013060:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013064:	f000 fcf8 	bl	8013a58 <rcutils_string_map_init>
 8013068:	4683      	mov	fp, r0
 801306a:	b1a0      	cbz	r0, 8013096 <rcl_node_resolve_name+0x9e>
 801306c:	f7fb f95e 	bl	800e32c <rcutils_get_error_string>
 8013070:	f7fb f972 	bl	800e358 <rcutils_reset_error>
 8013074:	f1bb 0f0a 	cmp.w	fp, #10
 8013078:	bf18      	it	ne
 801307a:	f04f 0b01 	movne.w	fp, #1
 801307e:	4658      	mov	r0, fp
 8013080:	b011      	add	sp, #68	; 0x44
 8013082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013086:	b002      	add	sp, #8
 8013088:	4770      	bx	lr
 801308a:	f04f 0b0b 	mov.w	fp, #11
 801308e:	e7f6      	b.n	801307e <rcl_node_resolve_name+0x86>
 8013090:	f04f 0b01 	mov.w	fp, #1
 8013094:	e7f3      	b.n	801307e <rcl_node_resolve_name+0x86>
 8013096:	9009      	str	r0, [sp, #36]	; 0x24
 8013098:	9007      	str	r0, [sp, #28]
 801309a:	a808      	add	r0, sp, #32
 801309c:	f003 fb3e 	bl	801671c <rcl_get_default_topic_name_substitutions>
 80130a0:	4683      	mov	fp, r0
 80130a2:	b180      	cbz	r0, 80130c6 <rcl_node_resolve_name+0xce>
 80130a4:	280a      	cmp	r0, #10
 80130a6:	a808      	add	r0, sp, #32
 80130a8:	bf18      	it	ne
 80130aa:	f04f 0b01 	movne.w	fp, #1
 80130ae:	f000 fd13 	bl	8013ad8 <rcutils_string_map_fini>
 80130b2:	4604      	mov	r4, r0
 80130b4:	2800      	cmp	r0, #0
 80130b6:	d15b      	bne.n	8013170 <rcl_node_resolve_name+0x178>
 80130b8:	4651      	mov	r1, sl
 80130ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130bc:	47c8      	blx	r9
 80130be:	4651      	mov	r1, sl
 80130c0:	4620      	mov	r0, r4
 80130c2:	47c8      	blx	r9
 80130c4:	e7db      	b.n	801307e <rcl_node_resolve_name+0x86>
 80130c6:	ab09      	add	r3, sp, #36	; 0x24
 80130c8:	46ec      	mov	ip, sp
 80130ca:	9305      	str	r3, [sp, #20]
 80130cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130d2:	682b      	ldr	r3, [r5, #0]
 80130d4:	463a      	mov	r2, r7
 80130d6:	4631      	mov	r1, r6
 80130d8:	4620      	mov	r0, r4
 80130da:	f8cc 3000 	str.w	r3, [ip]
 80130de:	ab08      	add	r3, sp, #32
 80130e0:	f003 f9bc 	bl	801645c <rcl_expand_topic_name>
 80130e4:	4683      	mov	fp, r0
 80130e6:	b9d8      	cbnz	r0, 8013120 <rcl_node_resolve_name+0x128>
 80130e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80130ea:	4602      	mov	r2, r0
 80130ec:	9009      	str	r0, [sp, #36]	; 0x24
 80130ee:	a90a      	add	r1, sp, #40	; 0x28
 80130f0:	4620      	mov	r0, r4
 80130f2:	f000 fddd 	bl	8013cb0 <rmw_validate_full_topic_name>
 80130f6:	bb50      	cbnz	r0, 801314e <rcl_node_resolve_name+0x156>
 80130f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80130fa:	2d00      	cmp	r5, #0
 80130fc:	d140      	bne.n	8013180 <rcl_node_resolve_name+0x188>
 80130fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013100:	a808      	add	r0, sp, #32
 8013102:	601c      	str	r4, [r3, #0]
 8013104:	f000 fce8 	bl	8013ad8 <rcutils_string_map_fini>
 8013108:	4683      	mov	fp, r0
 801310a:	2800      	cmp	r0, #0
 801310c:	d043      	beq.n	8013196 <rcl_node_resolve_name+0x19e>
 801310e:	f7fb f90d 	bl	800e32c <rcutils_get_error_string>
 8013112:	46a8      	mov	r8, r5
 8013114:	f04f 0b01 	mov.w	fp, #1
 8013118:	462c      	mov	r4, r5
 801311a:	f7fb f91d 	bl	800e358 <rcutils_reset_error>
 801311e:	e00a      	b.n	8013136 <rcl_node_resolve_name+0x13e>
 8013120:	2867      	cmp	r0, #103	; 0x67
 8013122:	bf14      	ite	ne
 8013124:	f04f 0800 	movne.w	r8, #0
 8013128:	f008 0801 	andeq.w	r8, r8, #1
 801312c:	9c07      	ldr	r4, [sp, #28]
 801312e:	a808      	add	r0, sp, #32
 8013130:	f000 fcd2 	bl	8013ad8 <rcutils_string_map_fini>
 8013134:	bb50      	cbnz	r0, 801318c <rcl_node_resolve_name+0x194>
 8013136:	4651      	mov	r1, sl
 8013138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801313a:	47c8      	blx	r9
 801313c:	4651      	mov	r1, sl
 801313e:	4620      	mov	r0, r4
 8013140:	47c8      	blx	r9
 8013142:	f1b8 0f00 	cmp.w	r8, #0
 8013146:	bf18      	it	ne
 8013148:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801314c:	e797      	b.n	801307e <rcl_node_resolve_name+0x86>
 801314e:	f7fb f8ed 	bl	800e32c <rcutils_get_error_string>
 8013152:	f7fb f901 	bl	800e358 <rcutils_reset_error>
 8013156:	a808      	add	r0, sp, #32
 8013158:	f000 fcbe 	bl	8013ad8 <rcutils_string_map_fini>
 801315c:	b998      	cbnz	r0, 8013186 <rcl_node_resolve_name+0x18e>
 801315e:	4651      	mov	r1, sl
 8013160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013162:	47c8      	blx	r9
 8013164:	4651      	mov	r1, sl
 8013166:	4620      	mov	r0, r4
 8013168:	f04f 0b01 	mov.w	fp, #1
 801316c:	47c8      	blx	r9
 801316e:	e786      	b.n	801307e <rcl_node_resolve_name+0x86>
 8013170:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013174:	f7fb f8da 	bl	800e32c <rcutils_get_error_string>
 8013178:	f7fb f8ee 	bl	800e358 <rcutils_reset_error>
 801317c:	4644      	mov	r4, r8
 801317e:	e7da      	b.n	8013136 <rcl_node_resolve_name+0x13e>
 8013180:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013184:	e7d3      	b.n	801312e <rcl_node_resolve_name+0x136>
 8013186:	46d8      	mov	r8, fp
 8013188:	f04f 0b01 	mov.w	fp, #1
 801318c:	f7fb f8ce 	bl	800e32c <rcutils_get_error_string>
 8013190:	f7fb f8e2 	bl	800e358 <rcutils_reset_error>
 8013194:	e7cf      	b.n	8013136 <rcl_node_resolve_name+0x13e>
 8013196:	4651      	mov	r1, sl
 8013198:	9809      	ldr	r0, [sp, #36]	; 0x24
 801319a:	47c8      	blx	r9
 801319c:	4651      	mov	r1, sl
 801319e:	4658      	mov	r0, fp
 80131a0:	47c8      	blx	r9
 80131a2:	e76c      	b.n	801307e <rcl_node_resolve_name+0x86>

080131a4 <exact_match_lookup>:
 80131a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131a6:	f102 0708 	add.w	r7, r2, #8
 80131aa:	460b      	mov	r3, r1
 80131ac:	b085      	sub	sp, #20
 80131ae:	4614      	mov	r4, r2
 80131b0:	4606      	mov	r6, r0
 80131b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80131b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80131ba:	4618      	mov	r0, r3
 80131bc:	4919      	ldr	r1, [pc, #100]	; (8013224 <exact_match_lookup+0x80>)
 80131be:	e894 000c 	ldmia.w	r4, {r2, r3}
 80131c2:	f000 fa4d 	bl	8013660 <rcutils_join_path>
 80131c6:	7833      	ldrb	r3, [r6, #0]
 80131c8:	4605      	mov	r5, r0
 80131ca:	2b2f      	cmp	r3, #47	; 0x2f
 80131cc:	d023      	beq.n	8013216 <exact_match_lookup+0x72>
 80131ce:	f104 030c 	add.w	r3, r4, #12
 80131d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80131d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80131da:	1c70      	adds	r0, r6, #1
 80131dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80131e0:	f000 fa44 	bl	801366c <rcutils_to_native_path>
 80131e4:	4606      	mov	r6, r0
 80131e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80131ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80131ee:	4631      	mov	r1, r6
 80131f0:	4628      	mov	r0, r5
 80131f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80131f6:	f000 fa33 	bl	8013660 <rcutils_join_path>
 80131fa:	4603      	mov	r3, r0
 80131fc:	4630      	mov	r0, r6
 80131fe:	6862      	ldr	r2, [r4, #4]
 8013200:	461e      	mov	r6, r3
 8013202:	6921      	ldr	r1, [r4, #16]
 8013204:	4790      	blx	r2
 8013206:	4628      	mov	r0, r5
 8013208:	4635      	mov	r5, r6
 801320a:	6863      	ldr	r3, [r4, #4]
 801320c:	6921      	ldr	r1, [r4, #16]
 801320e:	4798      	blx	r3
 8013210:	4628      	mov	r0, r5
 8013212:	b005      	add	sp, #20
 8013214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013216:	7873      	ldrb	r3, [r6, #1]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1d8      	bne.n	80131ce <exact_match_lookup+0x2a>
 801321c:	4628      	mov	r0, r5
 801321e:	b005      	add	sp, #20
 8013220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013222:	bf00      	nop
 8013224:	080187a0 	.word	0x080187a0

08013228 <rcl_get_secure_root>:
 8013228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801322c:	b085      	sub	sp, #20
 801322e:	b168      	cbz	r0, 801324c <rcl_get_secure_root+0x24>
 8013230:	4607      	mov	r7, r0
 8013232:	4608      	mov	r0, r1
 8013234:	460c      	mov	r4, r1
 8013236:	f7fb f86b 	bl	800e310 <rcutils_allocator_is_valid>
 801323a:	b138      	cbz	r0, 801324c <rcl_get_secure_root+0x24>
 801323c:	2300      	movs	r3, #0
 801323e:	482d      	ldr	r0, [pc, #180]	; (80132f4 <rcl_get_secure_root+0xcc>)
 8013240:	a903      	add	r1, sp, #12
 8013242:	9303      	str	r3, [sp, #12]
 8013244:	f000 f9f2 	bl	801362c <rcutils_get_env>
 8013248:	4605      	mov	r5, r0
 801324a:	b120      	cbz	r0, 8013256 <rcl_get_secure_root+0x2e>
 801324c:	2500      	movs	r5, #0
 801324e:	4628      	mov	r0, r5
 8013250:	b005      	add	sp, #20
 8013252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013256:	9b03      	ldr	r3, [sp, #12]
 8013258:	781a      	ldrb	r2, [r3, #0]
 801325a:	2a00      	cmp	r2, #0
 801325c:	d0f6      	beq.n	801324c <rcl_get_secure_root+0x24>
 801325e:	f104 090c 	add.w	r9, r4, #12
 8013262:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013266:	e88d 0003 	stmia.w	sp, {r0, r1}
 801326a:	4618      	mov	r0, r3
 801326c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013270:	f000 fb3e 	bl	80138f0 <rcutils_strdup>
 8013274:	4680      	mov	r8, r0
 8013276:	2800      	cmp	r0, #0
 8013278:	d0e8      	beq.n	801324c <rcl_get_secure_root+0x24>
 801327a:	a903      	add	r1, sp, #12
 801327c:	481e      	ldr	r0, [pc, #120]	; (80132f8 <rcl_get_secure_root+0xd0>)
 801327e:	9503      	str	r5, [sp, #12]
 8013280:	f000 f9d4 	bl	801362c <rcutils_get_env>
 8013284:	b160      	cbz	r0, 80132a0 <rcl_get_secure_root+0x78>
 8013286:	2600      	movs	r6, #0
 8013288:	4630      	mov	r0, r6
 801328a:	6863      	ldr	r3, [r4, #4]
 801328c:	6921      	ldr	r1, [r4, #16]
 801328e:	4798      	blx	r3
 8013290:	4640      	mov	r0, r8
 8013292:	6863      	ldr	r3, [r4, #4]
 8013294:	6921      	ldr	r1, [r4, #16]
 8013296:	4798      	blx	r3
 8013298:	4628      	mov	r0, r5
 801329a:	b005      	add	sp, #20
 801329c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132a0:	9b03      	ldr	r3, [sp, #12]
 80132a2:	781e      	ldrb	r6, [r3, #0]
 80132a4:	b1f6      	cbz	r6, 80132e4 <rcl_get_secure_root+0xbc>
 80132a6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80132aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80132ae:	4618      	mov	r0, r3
 80132b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80132b4:	f000 fb1c 	bl	80138f0 <rcutils_strdup>
 80132b8:	4606      	mov	r6, r0
 80132ba:	2800      	cmp	r0, #0
 80132bc:	d0e3      	beq.n	8013286 <rcl_get_secure_root+0x5e>
 80132be:	4622      	mov	r2, r4
 80132c0:	4641      	mov	r1, r8
 80132c2:	f7ff ff6f 	bl	80131a4 <exact_match_lookup>
 80132c6:	4605      	mov	r5, r0
 80132c8:	2d00      	cmp	r5, #0
 80132ca:	d0dd      	beq.n	8013288 <rcl_get_secure_root+0x60>
 80132cc:	4628      	mov	r0, r5
 80132ce:	f000 f9c5 	bl	801365c <rcutils_is_directory>
 80132d2:	4603      	mov	r3, r0
 80132d4:	2800      	cmp	r0, #0
 80132d6:	d1d7      	bne.n	8013288 <rcl_get_secure_root+0x60>
 80132d8:	4628      	mov	r0, r5
 80132da:	6921      	ldr	r1, [r4, #16]
 80132dc:	461d      	mov	r5, r3
 80132de:	6863      	ldr	r3, [r4, #4]
 80132e0:	4798      	blx	r3
 80132e2:	e7d1      	b.n	8013288 <rcl_get_secure_root+0x60>
 80132e4:	4622      	mov	r2, r4
 80132e6:	4638      	mov	r0, r7
 80132e8:	4641      	mov	r1, r8
 80132ea:	f7ff ff5b 	bl	80131a4 <exact_match_lookup>
 80132ee:	4605      	mov	r5, r0
 80132f0:	e7ea      	b.n	80132c8 <rcl_get_secure_root+0xa0>
 80132f2:	bf00      	nop
 80132f4:	080187ac 	.word	0x080187ac
 80132f8:	080187c4 	.word	0x080187c4

080132fc <rcl_get_security_options_from_environment>:
 80132fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013300:	b082      	sub	sp, #8
 8013302:	2300      	movs	r3, #0
 8013304:	4606      	mov	r6, r0
 8013306:	460f      	mov	r7, r1
 8013308:	4821      	ldr	r0, [pc, #132]	; (8013390 <rcl_get_security_options_from_environment+0x94>)
 801330a:	a901      	add	r1, sp, #4
 801330c:	4690      	mov	r8, r2
 801330e:	9301      	str	r3, [sp, #4]
 8013310:	f000 f98c 	bl	801362c <rcutils_get_env>
 8013314:	b120      	cbz	r0, 8013320 <rcl_get_security_options_from_environment+0x24>
 8013316:	2501      	movs	r5, #1
 8013318:	4628      	mov	r0, r5
 801331a:	b002      	add	sp, #8
 801331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013320:	4604      	mov	r4, r0
 8013322:	491c      	ldr	r1, [pc, #112]	; (8013394 <rcl_get_security_options_from_environment+0x98>)
 8013324:	9801      	ldr	r0, [sp, #4]
 8013326:	f7ec ffdb 	bl	80002e0 <strcmp>
 801332a:	4605      	mov	r5, r0
 801332c:	b9f0      	cbnz	r0, 801336c <rcl_get_security_options_from_environment+0x70>
 801332e:	9001      	str	r0, [sp, #4]
 8013330:	f1b8 0f00 	cmp.w	r8, #0
 8013334:	d021      	beq.n	801337a <rcl_get_security_options_from_environment+0x7e>
 8013336:	a901      	add	r1, sp, #4
 8013338:	4817      	ldr	r0, [pc, #92]	; (8013398 <rcl_get_security_options_from_environment+0x9c>)
 801333a:	f000 f977 	bl	801362c <rcutils_get_env>
 801333e:	2800      	cmp	r0, #0
 8013340:	d1e9      	bne.n	8013316 <rcl_get_security_options_from_environment+0x1a>
 8013342:	4916      	ldr	r1, [pc, #88]	; (801339c <rcl_get_security_options_from_environment+0xa0>)
 8013344:	9801      	ldr	r0, [sp, #4]
 8013346:	f7ec ffcb 	bl	80002e0 <strcmp>
 801334a:	4603      	mov	r3, r0
 801334c:	4639      	mov	r1, r7
 801334e:	4630      	mov	r0, r6
 8013350:	fab3 f383 	clz	r3, r3
 8013354:	095b      	lsrs	r3, r3, #5
 8013356:	f888 3000 	strb.w	r3, [r8]
 801335a:	f7ff ff65 	bl	8013228 <rcl_get_secure_root>
 801335e:	b170      	cbz	r0, 801337e <rcl_get_security_options_from_environment+0x82>
 8013360:	f8c8 0004 	str.w	r0, [r8, #4]
 8013364:	4628      	mov	r0, r5
 8013366:	b002      	add	sp, #8
 8013368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801336c:	4625      	mov	r5, r4
 801336e:	f888 4000 	strb.w	r4, [r8]
 8013372:	4628      	mov	r0, r5
 8013374:	b002      	add	sp, #8
 8013376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801337a:	250b      	movs	r5, #11
 801337c:	e7cc      	b.n	8013318 <rcl_get_security_options_from_environment+0x1c>
 801337e:	f898 5000 	ldrb.w	r5, [r8]
 8013382:	f1a5 0501 	sub.w	r5, r5, #1
 8013386:	fab5 f585 	clz	r5, r5
 801338a:	096d      	lsrs	r5, r5, #5
 801338c:	e7c4      	b.n	8013318 <rcl_get_security_options_from_environment+0x1c>
 801338e:	bf00      	nop
 8013390:	08018764 	.word	0x08018764
 8013394:	08018778 	.word	0x08018778
 8013398:	08018780 	.word	0x08018780
 801339c:	08018798 	.word	0x08018798

080133a0 <rcl_get_system_time>:
 80133a0:	4608      	mov	r0, r1
 80133a2:	f000 bc11 	b.w	8013bc8 <rcutils_system_time_now>
 80133a6:	bf00      	nop

080133a8 <rcl_get_steady_time>:
 80133a8:	4608      	mov	r0, r1
 80133aa:	f000 bc33 	b.w	8013c14 <rcutils_steady_time_now>
 80133ae:	bf00      	nop

080133b0 <rcl_get_ros_time>:
 80133b0:	7a03      	ldrb	r3, [r0, #8]
 80133b2:	b510      	push	{r4, lr}
 80133b4:	460c      	mov	r4, r1
 80133b6:	b143      	cbz	r3, 80133ca <rcl_get_ros_time+0x1a>
 80133b8:	2105      	movs	r1, #5
 80133ba:	f000 f901 	bl	80135c0 <__atomic_load_8>
 80133be:	4602      	mov	r2, r0
 80133c0:	460b      	mov	r3, r1
 80133c2:	2000      	movs	r0, #0
 80133c4:	e9c4 2300 	strd	r2, r3, [r4]
 80133c8:	bd10      	pop	{r4, pc}
 80133ca:	4608      	mov	r0, r1
 80133cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133d0:	f000 bbfa 	b.w	8013bc8 <rcutils_system_time_now>

080133d4 <rcl_clock_init>:
 80133d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d6:	4605      	mov	r5, r0
 80133d8:	4610      	mov	r0, r2
 80133da:	4614      	mov	r4, r2
 80133dc:	460e      	mov	r6, r1
 80133de:	f7fa ff97 	bl	800e310 <rcutils_allocator_is_valid>
 80133e2:	b128      	cbz	r0, 80133f0 <rcl_clock_init+0x1c>
 80133e4:	2d03      	cmp	r5, #3
 80133e6:	d803      	bhi.n	80133f0 <rcl_clock_init+0x1c>
 80133e8:	e8df f005 	tbb	[pc, r5]
 80133ec:	0659301f 	.word	0x0659301f
 80133f0:	f04f 0c0b 	mov.w	ip, #11
 80133f4:	4660      	mov	r0, ip
 80133f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133f8:	2c00      	cmp	r4, #0
 80133fa:	d0f9      	beq.n	80133f0 <rcl_clock_init+0x1c>
 80133fc:	fab6 f386 	clz	r3, r6
 8013400:	095b      	lsrs	r3, r3, #5
 8013402:	2e00      	cmp	r6, #0
 8013404:	d0f4      	beq.n	80133f0 <rcl_clock_init+0x1c>
 8013406:	6133      	str	r3, [r6, #16]
 8013408:	469c      	mov	ip, r3
 801340a:	f106 0514 	add.w	r5, r6, #20
 801340e:	4f32      	ldr	r7, [pc, #200]	; (80134d8 <rcl_clock_init+0x104>)
 8013410:	f04f 0e03 	mov.w	lr, #3
 8013414:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801341a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801341c:	6823      	ldr	r3, [r4, #0]
 801341e:	4660      	mov	r0, ip
 8013420:	602b      	str	r3, [r5, #0]
 8013422:	60f7      	str	r7, [r6, #12]
 8013424:	f886 e000 	strb.w	lr, [r6]
 8013428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801342a:	2e00      	cmp	r6, #0
 801342c:	d0e0      	beq.n	80133f0 <rcl_clock_init+0x1c>
 801342e:	2300      	movs	r3, #0
 8013430:	f106 0514 	add.w	r5, r6, #20
 8013434:	7033      	strb	r3, [r6, #0]
 8013436:	469c      	mov	ip, r3
 8013438:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801343c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013444:	6823      	ldr	r3, [r4, #0]
 8013446:	4660      	mov	r0, ip
 8013448:	602b      	str	r3, [r5, #0]
 801344a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801344c:	2c00      	cmp	r4, #0
 801344e:	d0cf      	beq.n	80133f0 <rcl_clock_init+0x1c>
 8013450:	fab6 f586 	clz	r5, r6
 8013454:	096d      	lsrs	r5, r5, #5
 8013456:	2e00      	cmp	r6, #0
 8013458:	d0ca      	beq.n	80133f0 <rcl_clock_init+0x1c>
 801345a:	46a6      	mov	lr, r4
 801345c:	7035      	strb	r5, [r6, #0]
 801345e:	f106 0c14 	add.w	ip, r6, #20
 8013462:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013466:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801346a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801346e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013472:	f8de 3000 	ldr.w	r3, [lr]
 8013476:	2010      	movs	r0, #16
 8013478:	f8cc 3000 	str.w	r3, [ip]
 801347c:	6823      	ldr	r3, [r4, #0]
 801347e:	6921      	ldr	r1, [r4, #16]
 8013480:	4798      	blx	r3
 8013482:	6130      	str	r0, [r6, #16]
 8013484:	b320      	cbz	r0, 80134d0 <rcl_clock_init+0xfc>
 8013486:	2200      	movs	r2, #0
 8013488:	2300      	movs	r3, #0
 801348a:	46ac      	mov	ip, r5
 801348c:	7205      	strb	r5, [r0, #8]
 801348e:	e9c0 2300 	strd	r2, r3, [r0]
 8013492:	4a12      	ldr	r2, [pc, #72]	; (80134dc <rcl_clock_init+0x108>)
 8013494:	2301      	movs	r3, #1
 8013496:	4660      	mov	r0, ip
 8013498:	60f2      	str	r2, [r6, #12]
 801349a:	7033      	strb	r3, [r6, #0]
 801349c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801349e:	2c00      	cmp	r4, #0
 80134a0:	d0a6      	beq.n	80133f0 <rcl_clock_init+0x1c>
 80134a2:	fab6 f386 	clz	r3, r6
 80134a6:	095b      	lsrs	r3, r3, #5
 80134a8:	2e00      	cmp	r6, #0
 80134aa:	d0a1      	beq.n	80133f0 <rcl_clock_init+0x1c>
 80134ac:	6133      	str	r3, [r6, #16]
 80134ae:	469c      	mov	ip, r3
 80134b0:	f106 0514 	add.w	r5, r6, #20
 80134b4:	f8df e028 	ldr.w	lr, [pc, #40]	; 80134e0 <rcl_clock_init+0x10c>
 80134b8:	2702      	movs	r7, #2
 80134ba:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80134be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80134c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80134c2:	6823      	ldr	r3, [r4, #0]
 80134c4:	4660      	mov	r0, ip
 80134c6:	602b      	str	r3, [r5, #0]
 80134c8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80134cc:	7037      	strb	r7, [r6, #0]
 80134ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134d0:	f04f 0c0a 	mov.w	ip, #10
 80134d4:	e78e      	b.n	80133f4 <rcl_clock_init+0x20>
 80134d6:	bf00      	nop
 80134d8:	080133a9 	.word	0x080133a9
 80134dc:	080133b1 	.word	0x080133b1
 80134e0:	080133a1 	.word	0x080133a1

080134e4 <rcl_validate_enclave_name_with_size>:
 80134e4:	2800      	cmp	r0, #0
 80134e6:	d049      	beq.n	801357c <rcl_validate_enclave_name_with_size+0x98>
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	4615      	mov	r5, r2
 80134ec:	b0c2      	sub	sp, #264	; 0x108
 80134ee:	b19a      	cbz	r2, 8013518 <rcl_validate_enclave_name_with_size+0x34>
 80134f0:	461e      	mov	r6, r3
 80134f2:	466a      	mov	r2, sp
 80134f4:	ab01      	add	r3, sp, #4
 80134f6:	460c      	mov	r4, r1
 80134f8:	f000 fc56 	bl	8013da8 <rmw_validate_namespace_with_size>
 80134fc:	4684      	mov	ip, r0
 80134fe:	b9b8      	cbnz	r0, 8013530 <rcl_validate_enclave_name_with_size+0x4c>
 8013500:	9900      	ldr	r1, [sp, #0]
 8013502:	b171      	cbz	r1, 8013522 <rcl_validate_enclave_name_with_size+0x3e>
 8013504:	2907      	cmp	r1, #7
 8013506:	d019      	beq.n	801353c <rcl_validate_enclave_name_with_size+0x58>
 8013508:	1e4b      	subs	r3, r1, #1
 801350a:	2b05      	cmp	r3, #5
 801350c:	d83a      	bhi.n	8013584 <rcl_validate_enclave_name_with_size+0xa0>
 801350e:	e8df f003 	tbb	[pc, r3]
 8013512:	2926      	.short	0x2926
 8013514:	1d322f2c 	.word	0x1d322f2c
 8013518:	f04f 0c0b 	mov.w	ip, #11
 801351c:	4660      	mov	r0, ip
 801351e:	b042      	add	sp, #264	; 0x108
 8013520:	bd70      	pop	{r4, r5, r6, pc}
 8013522:	2907      	cmp	r1, #7
 8013524:	d00a      	beq.n	801353c <rcl_validate_enclave_name_with_size+0x58>
 8013526:	2300      	movs	r3, #0
 8013528:	4660      	mov	r0, ip
 801352a:	602b      	str	r3, [r5, #0]
 801352c:	b042      	add	sp, #264	; 0x108
 801352e:	bd70      	pop	{r4, r5, r6, pc}
 8013530:	f7ff f90c 	bl	801274c <rcl_convert_rmw_ret_to_rcl_ret>
 8013534:	4684      	mov	ip, r0
 8013536:	4660      	mov	r0, ip
 8013538:	b042      	add	sp, #264	; 0x108
 801353a:	bd70      	pop	{r4, r5, r6, pc}
 801353c:	2cff      	cmp	r4, #255	; 0xff
 801353e:	d9f2      	bls.n	8013526 <rcl_validate_enclave_name_with_size+0x42>
 8013540:	6029      	str	r1, [r5, #0]
 8013542:	2e00      	cmp	r6, #0
 8013544:	d0ea      	beq.n	801351c <rcl_validate_enclave_name_with_size+0x38>
 8013546:	23fe      	movs	r3, #254	; 0xfe
 8013548:	6033      	str	r3, [r6, #0]
 801354a:	e7e7      	b.n	801351c <rcl_validate_enclave_name_with_size+0x38>
 801354c:	2306      	movs	r3, #6
 801354e:	602b      	str	r3, [r5, #0]
 8013550:	2e00      	cmp	r6, #0
 8013552:	d0e3      	beq.n	801351c <rcl_validate_enclave_name_with_size+0x38>
 8013554:	9b01      	ldr	r3, [sp, #4]
 8013556:	4660      	mov	r0, ip
 8013558:	6033      	str	r3, [r6, #0]
 801355a:	b042      	add	sp, #264	; 0x108
 801355c:	bd70      	pop	{r4, r5, r6, pc}
 801355e:	2301      	movs	r3, #1
 8013560:	602b      	str	r3, [r5, #0]
 8013562:	e7f5      	b.n	8013550 <rcl_validate_enclave_name_with_size+0x6c>
 8013564:	2302      	movs	r3, #2
 8013566:	602b      	str	r3, [r5, #0]
 8013568:	e7f2      	b.n	8013550 <rcl_validate_enclave_name_with_size+0x6c>
 801356a:	2303      	movs	r3, #3
 801356c:	602b      	str	r3, [r5, #0]
 801356e:	e7ef      	b.n	8013550 <rcl_validate_enclave_name_with_size+0x6c>
 8013570:	2304      	movs	r3, #4
 8013572:	602b      	str	r3, [r5, #0]
 8013574:	e7ec      	b.n	8013550 <rcl_validate_enclave_name_with_size+0x6c>
 8013576:	2305      	movs	r3, #5
 8013578:	602b      	str	r3, [r5, #0]
 801357a:	e7e9      	b.n	8013550 <rcl_validate_enclave_name_with_size+0x6c>
 801357c:	f04f 0c0b 	mov.w	ip, #11
 8013580:	4660      	mov	r0, ip
 8013582:	4770      	bx	lr
 8013584:	460b      	mov	r3, r1
 8013586:	4a04      	ldr	r2, [pc, #16]	; (8013598 <rcl_validate_enclave_name_with_size+0xb4>)
 8013588:	f44f 7180 	mov.w	r1, #256	; 0x100
 801358c:	a802      	add	r0, sp, #8
 801358e:	f000 f961 	bl	8013854 <rcutils_snprintf>
 8013592:	f04f 0c01 	mov.w	ip, #1
 8013596:	e7c1      	b.n	801351c <rcl_validate_enclave_name_with_size+0x38>
 8013598:	080187e4 	.word	0x080187e4

0801359c <rcl_validate_enclave_name>:
 801359c:	b168      	cbz	r0, 80135ba <rcl_validate_enclave_name+0x1e>
 801359e:	b570      	push	{r4, r5, r6, lr}
 80135a0:	460d      	mov	r5, r1
 80135a2:	4616      	mov	r6, r2
 80135a4:	4604      	mov	r4, r0
 80135a6:	f7ec fea5 	bl	80002f4 <strlen>
 80135aa:	4633      	mov	r3, r6
 80135ac:	4601      	mov	r1, r0
 80135ae:	462a      	mov	r2, r5
 80135b0:	4620      	mov	r0, r4
 80135b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135b6:	f7ff bf95 	b.w	80134e4 <rcl_validate_enclave_name_with_size>
 80135ba:	200b      	movs	r0, #11
 80135bc:	4770      	bx	lr
 80135be:	bf00      	nop

080135c0 <__atomic_load_8>:
 80135c0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80135c4:	4a16      	ldr	r2, [pc, #88]	; (8013620 <__atomic_load_8+0x60>)
 80135c6:	4b17      	ldr	r3, [pc, #92]	; (8013624 <__atomic_load_8+0x64>)
 80135c8:	f04f 0c01 	mov.w	ip, #1
 80135cc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80135d0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80135d4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80135d8:	fb02 f101 	mul.w	r1, r2, r1
 80135dc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80135e0:	fba3 2301 	umull	r2, r3, r3, r1
 80135e4:	091b      	lsrs	r3, r3, #4
 80135e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80135ea:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80135ee:	b4d0      	push	{r4, r6, r7}
 80135f0:	1ac9      	subs	r1, r1, r3
 80135f2:	4c0d      	ldr	r4, [pc, #52]	; (8013628 <__atomic_load_8+0x68>)
 80135f4:	1862      	adds	r2, r4, r1
 80135f6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80135fa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80135fe:	2e00      	cmp	r6, #0
 8013600:	d1f9      	bne.n	80135f6 <__atomic_load_8+0x36>
 8013602:	b2db      	uxtb	r3, r3
 8013604:	f3bf 8f5b 	dmb	ish
 8013608:	2b00      	cmp	r3, #0
 801360a:	d1f4      	bne.n	80135f6 <__atomic_load_8+0x36>
 801360c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013610:	f3bf 8f5b 	dmb	ish
 8013614:	5463      	strb	r3, [r4, r1]
 8013616:	4630      	mov	r0, r6
 8013618:	4639      	mov	r1, r7
 801361a:	bcd0      	pop	{r4, r6, r7}
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop
 8013620:	27d4eb2d 	.word	0x27d4eb2d
 8013624:	b21642c9 	.word	0xb21642c9
 8013628:	2400e188 	.word	0x2400e188

0801362c <rcutils_get_env>:
 801362c:	b168      	cbz	r0, 801364a <rcutils_get_env+0x1e>
 801362e:	b510      	push	{r4, lr}
 8013630:	460c      	mov	r4, r1
 8013632:	b129      	cbz	r1, 8013640 <rcutils_get_env+0x14>
 8013634:	f003 fb58 	bl	8016ce8 <getenv>
 8013638:	b120      	cbz	r0, 8013644 <rcutils_get_env+0x18>
 801363a:	6020      	str	r0, [r4, #0]
 801363c:	2000      	movs	r0, #0
 801363e:	bd10      	pop	{r4, pc}
 8013640:	4803      	ldr	r0, [pc, #12]	; (8013650 <rcutils_get_env+0x24>)
 8013642:	bd10      	pop	{r4, pc}
 8013644:	4b03      	ldr	r3, [pc, #12]	; (8013654 <rcutils_get_env+0x28>)
 8013646:	6023      	str	r3, [r4, #0]
 8013648:	bd10      	pop	{r4, pc}
 801364a:	4803      	ldr	r0, [pc, #12]	; (8013658 <rcutils_get_env+0x2c>)
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop
 8013650:	08018860 	.word	0x08018860
 8013654:	08018984 	.word	0x08018984
 8013658:	08018844 	.word	0x08018844

0801365c <rcutils_is_directory>:
 801365c:	2000      	movs	r0, #0
 801365e:	4770      	bx	lr

08013660 <rcutils_join_path>:
 8013660:	b082      	sub	sp, #8
 8013662:	2000      	movs	r0, #0
 8013664:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013668:	b002      	add	sp, #8
 801366a:	4770      	bx	lr

0801366c <rcutils_to_native_path>:
 801366c:	b084      	sub	sp, #16
 801366e:	2000      	movs	r0, #0
 8013670:	f10d 0c04 	add.w	ip, sp, #4
 8013674:	b004      	add	sp, #16
 8013676:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801367a:	4770      	bx	lr

0801367c <rcutils_format_string_limit>:
 801367c:	b40f      	push	{r0, r1, r2, r3}
 801367e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013680:	b083      	sub	sp, #12
 8013682:	ac08      	add	r4, sp, #32
 8013684:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801368a:	b326      	cbz	r6, 80136d6 <rcutils_format_string_limit+0x5a>
 801368c:	a808      	add	r0, sp, #32
 801368e:	f7fa fe3f 	bl	800e310 <rcutils_allocator_is_valid>
 8013692:	b300      	cbz	r0, 80136d6 <rcutils_format_string_limit+0x5a>
 8013694:	2100      	movs	r1, #0
 8013696:	ab0f      	add	r3, sp, #60	; 0x3c
 8013698:	4632      	mov	r2, r6
 801369a:	4608      	mov	r0, r1
 801369c:	e9cd 3300 	strd	r3, r3, [sp]
 80136a0:	f000 f906 	bl	80138b0 <rcutils_vsnprintf>
 80136a4:	1c43      	adds	r3, r0, #1
 80136a6:	4605      	mov	r5, r0
 80136a8:	d015      	beq.n	80136d6 <rcutils_format_string_limit+0x5a>
 80136aa:	1c47      	adds	r7, r0, #1
 80136ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136ae:	429f      	cmp	r7, r3
 80136b0:	d901      	bls.n	80136b6 <rcutils_format_string_limit+0x3a>
 80136b2:	1e5d      	subs	r5, r3, #1
 80136b4:	461f      	mov	r7, r3
 80136b6:	9b08      	ldr	r3, [sp, #32]
 80136b8:	4638      	mov	r0, r7
 80136ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80136bc:	4798      	blx	r3
 80136be:	4604      	mov	r4, r0
 80136c0:	b148      	cbz	r0, 80136d6 <rcutils_format_string_limit+0x5a>
 80136c2:	4632      	mov	r2, r6
 80136c4:	4639      	mov	r1, r7
 80136c6:	9b01      	ldr	r3, [sp, #4]
 80136c8:	f000 f8f2 	bl	80138b0 <rcutils_vsnprintf>
 80136cc:	2800      	cmp	r0, #0
 80136ce:	db09      	blt.n	80136e4 <rcutils_format_string_limit+0x68>
 80136d0:	2300      	movs	r3, #0
 80136d2:	5563      	strb	r3, [r4, r5]
 80136d4:	e000      	b.n	80136d8 <rcutils_format_string_limit+0x5c>
 80136d6:	2400      	movs	r4, #0
 80136d8:	4620      	mov	r0, r4
 80136da:	b003      	add	sp, #12
 80136dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80136e0:	b004      	add	sp, #16
 80136e2:	4770      	bx	lr
 80136e4:	4620      	mov	r0, r4
 80136e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80136ea:	2400      	movs	r4, #0
 80136ec:	4798      	blx	r3
 80136ee:	e7f3      	b.n	80136d8 <rcutils_format_string_limit+0x5c>

080136f0 <rcutils_repl_str>:
 80136f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f4:	ed2d 8b02 	vpush	{d8}
 80136f8:	b087      	sub	sp, #28
 80136fa:	2600      	movs	r6, #0
 80136fc:	4680      	mov	r8, r0
 80136fe:	468a      	mov	sl, r1
 8013700:	9000      	str	r0, [sp, #0]
 8013702:	4608      	mov	r0, r1
 8013704:	ee08 2a10 	vmov	s16, r2
 8013708:	4699      	mov	r9, r3
 801370a:	2510      	movs	r5, #16
 801370c:	f7ec fdf2 	bl	80002f4 <strlen>
 8013710:	4637      	mov	r7, r6
 8013712:	46b3      	mov	fp, r6
 8013714:	9001      	str	r0, [sp, #4]
 8013716:	e01e      	b.n	8013756 <rcutils_repl_str+0x66>
 8013718:	f10b 0b01 	add.w	fp, fp, #1
 801371c:	9b01      	ldr	r3, [sp, #4]
 801371e:	455e      	cmp	r6, fp
 8013720:	eb04 0803 	add.w	r8, r4, r3
 8013724:	d211      	bcs.n	801374a <rcutils_repl_str+0x5a>
 8013726:	442e      	add	r6, r5
 8013728:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801372c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013734:	00b1      	lsls	r1, r6, #2
 8013736:	4798      	blx	r3
 8013738:	2800      	cmp	r0, #0
 801373a:	f000 8088 	beq.w	801384e <rcutils_repl_str+0x15e>
 801373e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013742:	4607      	mov	r7, r0
 8013744:	bf28      	it	cs
 8013746:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801374a:	9a00      	ldr	r2, [sp, #0]
 801374c:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8013750:	1aa4      	subs	r4, r4, r2
 8013752:	f843 4c04 	str.w	r4, [r3, #-4]
 8013756:	4651      	mov	r1, sl
 8013758:	4640      	mov	r0, r8
 801375a:	f003 fe94 	bl	8017486 <strstr>
 801375e:	4604      	mov	r4, r0
 8013760:	4638      	mov	r0, r7
 8013762:	2c00      	cmp	r4, #0
 8013764:	d1d8      	bne.n	8013718 <rcutils_repl_str+0x28>
 8013766:	4640      	mov	r0, r8
 8013768:	f7ec fdc4 	bl	80002f4 <strlen>
 801376c:	9b00      	ldr	r3, [sp, #0]
 801376e:	eba8 0803 	sub.w	r8, r8, r3
 8013772:	eb08 0400 	add.w	r4, r8, r0
 8013776:	9402      	str	r4, [sp, #8]
 8013778:	f1bb 0f00 	cmp.w	fp, #0
 801377c:	d045      	beq.n	801380a <rcutils_repl_str+0x11a>
 801377e:	ee18 0a10 	vmov	r0, s16
 8013782:	f7ec fdb7 	bl	80002f4 <strlen>
 8013786:	9a01      	ldr	r2, [sp, #4]
 8013788:	4606      	mov	r6, r0
 801378a:	f8d9 3000 	ldr.w	r3, [r9]
 801378e:	1a82      	subs	r2, r0, r2
 8013790:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013794:	fb0b 4202 	mla	r2, fp, r2, r4
 8013798:	1c50      	adds	r0, r2, #1
 801379a:	9205      	str	r2, [sp, #20]
 801379c:	4798      	blx	r3
 801379e:	4682      	mov	sl, r0
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d054      	beq.n	801384e <rcutils_repl_str+0x15e>
 80137a4:	683a      	ldr	r2, [r7, #0]
 80137a6:	463d      	mov	r5, r7
 80137a8:	9900      	ldr	r1, [sp, #0]
 80137aa:	2401      	movs	r4, #1
 80137ac:	f003 ff0d 	bl	80175ca <memcpy>
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80137b6:	eb0a 0803 	add.w	r8, sl, r3
 80137ba:	ee18 7a10 	vmov	r7, s16
 80137be:	f8dd a000 	ldr.w	sl, [sp]
 80137c2:	f8cd 9000 	str.w	r9, [sp]
 80137c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80137ca:	4632      	mov	r2, r6
 80137cc:	4639      	mov	r1, r7
 80137ce:	4640      	mov	r0, r8
 80137d0:	44b0      	add	r8, r6
 80137d2:	f003 fefa 	bl	80175ca <memcpy>
 80137d6:	f855 2b04 	ldr.w	r2, [r5], #4
 80137da:	45a3      	cmp	fp, r4
 80137dc:	444a      	add	r2, r9
 80137de:	eb0a 0102 	add.w	r1, sl, r2
 80137e2:	d02a      	beq.n	801383a <rcutils_repl_str+0x14a>
 80137e4:	6828      	ldr	r0, [r5, #0]
 80137e6:	1a82      	subs	r2, r0, r2
 80137e8:	4640      	mov	r0, r8
 80137ea:	4490      	add	r8, r2
 80137ec:	f003 feed 	bl	80175ca <memcpy>
 80137f0:	1c62      	adds	r2, r4, #1
 80137f2:	45a3      	cmp	fp, r4
 80137f4:	4614      	mov	r4, r2
 80137f6:	d8e8      	bhi.n	80137ca <rcutils_repl_str+0xda>
 80137f8:	f8dd 9000 	ldr.w	r9, [sp]
 80137fc:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8013800:	2300      	movs	r3, #0
 8013802:	9a05      	ldr	r2, [sp, #20]
 8013804:	f80a 3002 	strb.w	r3, [sl, r2]
 8013808:	e00b      	b.n	8013822 <rcutils_repl_str+0x132>
 801380a:	4620      	mov	r0, r4
 801380c:	f8d9 3000 	ldr.w	r3, [r9]
 8013810:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013814:	3001      	adds	r0, #1
 8013816:	4798      	blx	r3
 8013818:	4682      	mov	sl, r0
 801381a:	b110      	cbz	r0, 8013822 <rcutils_repl_str+0x132>
 801381c:	9900      	ldr	r1, [sp, #0]
 801381e:	f003 fecc 	bl	80175ba <strcpy>
 8013822:	4638      	mov	r0, r7
 8013824:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013828:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801382c:	4798      	blx	r3
 801382e:	4650      	mov	r0, sl
 8013830:	b007      	add	sp, #28
 8013832:	ecbd 8b02 	vpop	{d8}
 8013836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801383a:	9b02      	ldr	r3, [sp, #8]
 801383c:	4640      	mov	r0, r8
 801383e:	f8dd 9000 	ldr.w	r9, [sp]
 8013842:	1a9a      	subs	r2, r3, r2
 8013844:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8013848:	f003 febf 	bl	80175ca <memcpy>
 801384c:	e7d8      	b.n	8013800 <rcutils_repl_str+0x110>
 801384e:	f04f 0a00 	mov.w	sl, #0
 8013852:	e7e6      	b.n	8013822 <rcutils_repl_str+0x132>

08013854 <rcutils_snprintf>:
 8013854:	b40c      	push	{r2, r3}
 8013856:	b530      	push	{r4, r5, lr}
 8013858:	b083      	sub	sp, #12
 801385a:	ab06      	add	r3, sp, #24
 801385c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013860:	9301      	str	r3, [sp, #4]
 8013862:	b1e2      	cbz	r2, 801389e <rcutils_snprintf+0x4a>
 8013864:	fab0 f480 	clz	r4, r0
 8013868:	fab1 f581 	clz	r5, r1
 801386c:	ea50 0c01 	orrs.w	ip, r0, r1
 8013870:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8013874:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8013878:	d008      	beq.n	801388c <rcutils_snprintf+0x38>
 801387a:	b984      	cbnz	r4, 801389e <rcutils_snprintf+0x4a>
 801387c:	b97d      	cbnz	r5, 801389e <rcutils_snprintf+0x4a>
 801387e:	f003 fdcd 	bl	801741c <vsniprintf>
 8013882:	b003      	add	sp, #12
 8013884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013888:	b002      	add	sp, #8
 801388a:	4770      	bx	lr
 801388c:	4661      	mov	r1, ip
 801388e:	4660      	mov	r0, ip
 8013890:	f003 fdc4 	bl	801741c <vsniprintf>
 8013894:	b003      	add	sp, #12
 8013896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801389a:	b002      	add	sp, #8
 801389c:	4770      	bx	lr
 801389e:	f003 fe5f 	bl	8017560 <__errno>
 80138a2:	2216      	movs	r2, #22
 80138a4:	4603      	mov	r3, r0
 80138a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138aa:	601a      	str	r2, [r3, #0]
 80138ac:	e7e9      	b.n	8013882 <rcutils_snprintf+0x2e>
 80138ae:	bf00      	nop

080138b0 <rcutils_vsnprintf>:
 80138b0:	b570      	push	{r4, r5, r6, lr}
 80138b2:	b1b2      	cbz	r2, 80138e2 <rcutils_vsnprintf+0x32>
 80138b4:	fab0 f480 	clz	r4, r0
 80138b8:	fab1 f581 	clz	r5, r1
 80138bc:	ea50 0c01 	orrs.w	ip, r0, r1
 80138c0:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80138c4:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80138c8:	d005      	beq.n	80138d6 <rcutils_vsnprintf+0x26>
 80138ca:	b954      	cbnz	r4, 80138e2 <rcutils_vsnprintf+0x32>
 80138cc:	b94d      	cbnz	r5, 80138e2 <rcutils_vsnprintf+0x32>
 80138ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138d2:	f003 bda3 	b.w	801741c <vsniprintf>
 80138d6:	4661      	mov	r1, ip
 80138d8:	4660      	mov	r0, ip
 80138da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138de:	f003 bd9d 	b.w	801741c <vsniprintf>
 80138e2:	f003 fe3d 	bl	8017560 <__errno>
 80138e6:	2316      	movs	r3, #22
 80138e8:	6003      	str	r3, [r0, #0]
 80138ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138ee:	bd70      	pop	{r4, r5, r6, pc}

080138f0 <rcutils_strdup>:
 80138f0:	b084      	sub	sp, #16
 80138f2:	b570      	push	{r4, r5, r6, lr}
 80138f4:	b082      	sub	sp, #8
 80138f6:	4605      	mov	r5, r0
 80138f8:	ac07      	add	r4, sp, #28
 80138fa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80138fe:	b1b0      	cbz	r0, 801392e <rcutils_strdup+0x3e>
 8013900:	f7ec fcf8 	bl	80002f4 <strlen>
 8013904:	1c42      	adds	r2, r0, #1
 8013906:	9b07      	ldr	r3, [sp, #28]
 8013908:	4606      	mov	r6, r0
 801390a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801390c:	4610      	mov	r0, r2
 801390e:	9201      	str	r2, [sp, #4]
 8013910:	4798      	blx	r3
 8013912:	4604      	mov	r4, r0
 8013914:	b128      	cbz	r0, 8013922 <rcutils_strdup+0x32>
 8013916:	9a01      	ldr	r2, [sp, #4]
 8013918:	4629      	mov	r1, r5
 801391a:	f003 fe56 	bl	80175ca <memcpy>
 801391e:	2300      	movs	r3, #0
 8013920:	55a3      	strb	r3, [r4, r6]
 8013922:	4620      	mov	r0, r4
 8013924:	b002      	add	sp, #8
 8013926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801392a:	b004      	add	sp, #16
 801392c:	4770      	bx	lr
 801392e:	4604      	mov	r4, r0
 8013930:	e7f7      	b.n	8013922 <rcutils_strdup+0x32>
 8013932:	bf00      	nop

08013934 <rcutils_strndup>:
 8013934:	b082      	sub	sp, #8
 8013936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013938:	ac06      	add	r4, sp, #24
 801393a:	4605      	mov	r5, r0
 801393c:	e884 000c 	stmia.w	r4, {r2, r3}
 8013940:	b188      	cbz	r0, 8013966 <rcutils_strndup+0x32>
 8013942:	1c4f      	adds	r7, r1, #1
 8013944:	460e      	mov	r6, r1
 8013946:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013948:	4638      	mov	r0, r7
 801394a:	4790      	blx	r2
 801394c:	4604      	mov	r4, r0
 801394e:	b128      	cbz	r0, 801395c <rcutils_strndup+0x28>
 8013950:	463a      	mov	r2, r7
 8013952:	4629      	mov	r1, r5
 8013954:	f003 fe39 	bl	80175ca <memcpy>
 8013958:	2300      	movs	r3, #0
 801395a:	55a3      	strb	r3, [r4, r6]
 801395c:	4620      	mov	r0, r4
 801395e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013962:	b002      	add	sp, #8
 8013964:	4770      	bx	lr
 8013966:	4604      	mov	r4, r0
 8013968:	e7f8      	b.n	801395c <rcutils_strndup+0x28>
 801396a:	bf00      	nop

0801396c <rcutils_get_zero_initialized_string_map>:
 801396c:	2000      	movs	r0, #0
 801396e:	4b01      	ldr	r3, [pc, #4]	; (8013974 <rcutils_get_zero_initialized_string_map+0x8>)
 8013970:	6018      	str	r0, [r3, #0]
 8013972:	4770      	bx	lr
 8013974:	2400e1a0 	.word	0x2400e1a0

08013978 <rcutils_string_map_reserve>:
 8013978:	2800      	cmp	r0, #0
 801397a:	d05e      	beq.n	8013a3a <rcutils_string_map_reserve+0xc2>
 801397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013980:	460c      	mov	r4, r1
 8013982:	6801      	ldr	r1, [r0, #0]
 8013984:	b082      	sub	sp, #8
 8013986:	4605      	mov	r5, r0
 8013988:	b129      	cbz	r1, 8013996 <rcutils_string_map_reserve+0x1e>
 801398a:	68cb      	ldr	r3, [r1, #12]
 801398c:	42a3      	cmp	r3, r4
 801398e:	d906      	bls.n	801399e <rcutils_string_map_reserve+0x26>
 8013990:	461c      	mov	r4, r3
 8013992:	2900      	cmp	r1, #0
 8013994:	d1f9      	bne.n	801398a <rcutils_string_map_reserve+0x12>
 8013996:	201f      	movs	r0, #31
 8013998:	b002      	add	sp, #8
 801399a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801399e:	688b      	ldr	r3, [r1, #8]
 80139a0:	42a3      	cmp	r3, r4
 80139a2:	d046      	beq.n	8013a32 <rcutils_string_map_reserve+0xba>
 80139a4:	6a0e      	ldr	r6, [r1, #32]
 80139a6:	2c00      	cmp	r4, #0
 80139a8:	d033      	beq.n	8013a12 <rcutils_string_map_reserve+0x9a>
 80139aa:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80139ae:	d242      	bcs.n	8013a36 <rcutils_string_map_reserve+0xbe>
 80139b0:	00a7      	lsls	r7, r4, #2
 80139b2:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80139b6:	6808      	ldr	r0, [r1, #0]
 80139b8:	4632      	mov	r2, r6
 80139ba:	4639      	mov	r1, r7
 80139bc:	47c0      	blx	r8
 80139be:	2800      	cmp	r0, #0
 80139c0:	d039      	beq.n	8013a36 <rcutils_string_map_reserve+0xbe>
 80139c2:	682b      	ldr	r3, [r5, #0]
 80139c4:	4632      	mov	r2, r6
 80139c6:	4639      	mov	r1, r7
 80139c8:	6018      	str	r0, [r3, #0]
 80139ca:	6858      	ldr	r0, [r3, #4]
 80139cc:	47c0      	blx	r8
 80139ce:	2800      	cmp	r0, #0
 80139d0:	d031      	beq.n	8013a36 <rcutils_string_map_reserve+0xbe>
 80139d2:	682d      	ldr	r5, [r5, #0]
 80139d4:	68ab      	ldr	r3, [r5, #8]
 80139d6:	6068      	str	r0, [r5, #4]
 80139d8:	42a3      	cmp	r3, r4
 80139da:	d225      	bcs.n	8013a28 <rcutils_string_map_reserve+0xb0>
 80139dc:	682a      	ldr	r2, [r5, #0]
 80139de:	eb00 0c07 	add.w	ip, r0, r7
 80139e2:	0099      	lsls	r1, r3, #2
 80139e4:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80139e8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80139ec:	45e6      	cmp	lr, ip
 80139ee:	d203      	bcs.n	80139f8 <rcutils_string_map_reserve+0x80>
 80139f0:	eb02 0c07 	add.w	ip, r2, r7
 80139f4:	4566      	cmp	r6, ip
 80139f6:	d322      	bcc.n	8013a3e <rcutils_string_map_reserve+0xc6>
 80139f8:	1ae3      	subs	r3, r4, r3
 80139fa:	4670      	mov	r0, lr
 80139fc:	2100      	movs	r1, #0
 80139fe:	009a      	lsls	r2, r3, #2
 8013a00:	9201      	str	r2, [sp, #4]
 8013a02:	f003 fd19 	bl	8017438 <memset>
 8013a06:	9a01      	ldr	r2, [sp, #4]
 8013a08:	2100      	movs	r1, #0
 8013a0a:	4630      	mov	r0, r6
 8013a0c:	f003 fd14 	bl	8017438 <memset>
 8013a10:	e00a      	b.n	8013a28 <rcutils_string_map_reserve+0xb0>
 8013a12:	694f      	ldr	r7, [r1, #20]
 8013a14:	6808      	ldr	r0, [r1, #0]
 8013a16:	4631      	mov	r1, r6
 8013a18:	47b8      	blx	r7
 8013a1a:	682b      	ldr	r3, [r5, #0]
 8013a1c:	4631      	mov	r1, r6
 8013a1e:	6858      	ldr	r0, [r3, #4]
 8013a20:	601c      	str	r4, [r3, #0]
 8013a22:	47b8      	blx	r7
 8013a24:	682d      	ldr	r5, [r5, #0]
 8013a26:	606c      	str	r4, [r5, #4]
 8013a28:	2000      	movs	r0, #0
 8013a2a:	60ac      	str	r4, [r5, #8]
 8013a2c:	b002      	add	sp, #8
 8013a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a32:	2000      	movs	r0, #0
 8013a34:	e7b0      	b.n	8013998 <rcutils_string_map_reserve+0x20>
 8013a36:	200a      	movs	r0, #10
 8013a38:	e7ae      	b.n	8013998 <rcutils_string_map_reserve+0x20>
 8013a3a:	200b      	movs	r0, #11
 8013a3c:	4770      	bx	lr
 8013a3e:	1f0b      	subs	r3, r1, #4
 8013a40:	4418      	add	r0, r3
 8013a42:	4413      	add	r3, r2
 8013a44:	3a04      	subs	r2, #4
 8013a46:	4417      	add	r7, r2
 8013a48:	2200      	movs	r2, #0
 8013a4a:	f843 2f04 	str.w	r2, [r3, #4]!
 8013a4e:	42bb      	cmp	r3, r7
 8013a50:	f840 2f04 	str.w	r2, [r0, #4]!
 8013a54:	d1f9      	bne.n	8013a4a <rcutils_string_map_reserve+0xd2>
 8013a56:	e7e7      	b.n	8013a28 <rcutils_string_map_reserve+0xb0>

08013a58 <rcutils_string_map_init>:
 8013a58:	b082      	sub	sp, #8
 8013a5a:	b570      	push	{r4, r5, r6, lr}
 8013a5c:	ac04      	add	r4, sp, #16
 8013a5e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013a62:	b380      	cbz	r0, 8013ac6 <rcutils_string_map_init+0x6e>
 8013a64:	6806      	ldr	r6, [r0, #0]
 8013a66:	4604      	mov	r4, r0
 8013a68:	b12e      	cbz	r6, 8013a76 <rcutils_string_map_init+0x1e>
 8013a6a:	251e      	movs	r5, #30
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a72:	b002      	add	sp, #8
 8013a74:	4770      	bx	lr
 8013a76:	a804      	add	r0, sp, #16
 8013a78:	460d      	mov	r5, r1
 8013a7a:	f7fa fc49 	bl	800e310 <rcutils_allocator_is_valid>
 8013a7e:	b310      	cbz	r0, 8013ac6 <rcutils_string_map_init+0x6e>
 8013a80:	9b04      	ldr	r3, [sp, #16]
 8013a82:	2024      	movs	r0, #36	; 0x24
 8013a84:	9908      	ldr	r1, [sp, #32]
 8013a86:	4798      	blx	r3
 8013a88:	6020      	str	r0, [r4, #0]
 8013a8a:	b310      	cbz	r0, 8013ad2 <rcutils_string_map_init+0x7a>
 8013a8c:	f10d 0e10 	add.w	lr, sp, #16
 8013a90:	f100 0c10 	add.w	ip, r0, #16
 8013a94:	e9c0 6600 	strd	r6, r6, [r0]
 8013a98:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8013a9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013aa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013aa4:	f8de 3000 	ldr.w	r3, [lr]
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f8cc 3000 	str.w	r3, [ip]
 8013ab0:	f7ff ff62 	bl	8013978 <rcutils_string_map_reserve>
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d0d8      	beq.n	8013a6c <rcutils_string_map_init+0x14>
 8013aba:	9b05      	ldr	r3, [sp, #20]
 8013abc:	9908      	ldr	r1, [sp, #32]
 8013abe:	6820      	ldr	r0, [r4, #0]
 8013ac0:	4798      	blx	r3
 8013ac2:	6026      	str	r6, [r4, #0]
 8013ac4:	e7d2      	b.n	8013a6c <rcutils_string_map_init+0x14>
 8013ac6:	250b      	movs	r5, #11
 8013ac8:	4628      	mov	r0, r5
 8013aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ace:	b002      	add	sp, #8
 8013ad0:	4770      	bx	lr
 8013ad2:	250a      	movs	r5, #10
 8013ad4:	e7ca      	b.n	8013a6c <rcutils_string_map_init+0x14>
 8013ad6:	bf00      	nop

08013ad8 <rcutils_string_map_fini>:
 8013ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013adc:	b082      	sub	sp, #8
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	d03a      	beq.n	8013b58 <rcutils_string_map_fini+0x80>
 8013ae2:	6804      	ldr	r4, [r0, #0]
 8013ae4:	4606      	mov	r6, r0
 8013ae6:	2c00      	cmp	r4, #0
 8013ae8:	d032      	beq.n	8013b50 <rcutils_string_map_fini+0x78>
 8013aea:	68a3      	ldr	r3, [r4, #8]
 8013aec:	b32b      	cbz	r3, 8013b3a <rcutils_string_map_fini+0x62>
 8013aee:	2500      	movs	r5, #0
 8013af0:	6822      	ldr	r2, [r4, #0]
 8013af2:	462f      	mov	r7, r5
 8013af4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013af8:	b1e0      	cbz	r0, 8013b34 <rcutils_string_map_fini+0x5c>
 8013afa:	6a21      	ldr	r1, [r4, #32]
 8013afc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8013b00:	9101      	str	r1, [sp, #4]
 8013b02:	47c0      	blx	r8
 8013b04:	9901      	ldr	r1, [sp, #4]
 8013b06:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013b0a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8013b0e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013b12:	47c0      	blx	r8
 8013b14:	68e3      	ldr	r3, [r4, #12]
 8013b16:	6862      	ldr	r2, [r4, #4]
 8013b18:	3b01      	subs	r3, #1
 8013b1a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013b1e:	3501      	adds	r5, #1
 8013b20:	60e3      	str	r3, [r4, #12]
 8013b22:	6834      	ldr	r4, [r6, #0]
 8013b24:	68a3      	ldr	r3, [r4, #8]
 8013b26:	429d      	cmp	r5, r3
 8013b28:	d207      	bcs.n	8013b3a <rcutils_string_map_fini+0x62>
 8013b2a:	6822      	ldr	r2, [r4, #0]
 8013b2c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d1e2      	bne.n	8013afa <rcutils_string_map_fini+0x22>
 8013b34:	3501      	adds	r5, #1
 8013b36:	429d      	cmp	r5, r3
 8013b38:	d3dc      	bcc.n	8013af4 <rcutils_string_map_fini+0x1c>
 8013b3a:	2100      	movs	r1, #0
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f7ff ff1b 	bl	8013978 <rcutils_string_map_reserve>
 8013b42:	4604      	mov	r4, r0
 8013b44:	b920      	cbnz	r0, 8013b50 <rcutils_string_map_fini+0x78>
 8013b46:	6830      	ldr	r0, [r6, #0]
 8013b48:	6943      	ldr	r3, [r0, #20]
 8013b4a:	6a01      	ldr	r1, [r0, #32]
 8013b4c:	4798      	blx	r3
 8013b4e:	6034      	str	r4, [r6, #0]
 8013b50:	4620      	mov	r0, r4
 8013b52:	b002      	add	sp, #8
 8013b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b58:	240b      	movs	r4, #11
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	b002      	add	sp, #8
 8013b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b62:	bf00      	nop

08013b64 <rcutils_string_map_getn>:
 8013b64:	b378      	cbz	r0, 8013bc6 <rcutils_string_map_getn+0x62>
 8013b66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6a:	f8d0 b000 	ldr.w	fp, [r0]
 8013b6e:	f1bb 0f00 	cmp.w	fp, #0
 8013b72:	d01f      	beq.n	8013bb4 <rcutils_string_map_getn+0x50>
 8013b74:	fab1 f481 	clz	r4, r1
 8013b78:	4688      	mov	r8, r1
 8013b7a:	0964      	lsrs	r4, r4, #5
 8013b7c:	b1d1      	cbz	r1, 8013bb4 <rcutils_string_map_getn+0x50>
 8013b7e:	f8db 7008 	ldr.w	r7, [fp, #8]
 8013b82:	f8db 6000 	ldr.w	r6, [fp]
 8013b86:	b1af      	cbz	r7, 8013bb4 <rcutils_string_map_getn+0x50>
 8013b88:	4691      	mov	r9, r2
 8013b8a:	3e04      	subs	r6, #4
 8013b8c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013b90:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8013b94:	3401      	adds	r4, #1
 8013b96:	4628      	mov	r0, r5
 8013b98:	b155      	cbz	r5, 8013bb0 <rcutils_string_map_getn+0x4c>
 8013b9a:	f7ec fbab 	bl	80002f4 <strlen>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	4629      	mov	r1, r5
 8013ba2:	4640      	mov	r0, r8
 8013ba4:	454a      	cmp	r2, r9
 8013ba6:	bf38      	it	cc
 8013ba8:	464a      	movcc	r2, r9
 8013baa:	f003 fc5a 	bl	8017462 <strncmp>
 8013bae:	b120      	cbz	r0, 8013bba <rcutils_string_map_getn+0x56>
 8013bb0:	42a7      	cmp	r7, r4
 8013bb2:	d1eb      	bne.n	8013b8c <rcutils_string_map_getn+0x28>
 8013bb4:	2000      	movs	r0, #0
 8013bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bba:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013bbe:	f853 000a 	ldr.w	r0, [r3, sl]
 8013bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bc6:	4770      	bx	lr

08013bc8 <rcutils_system_time_now>:
 8013bc8:	b300      	cbz	r0, 8013c0c <rcutils_system_time_now+0x44>
 8013bca:	b570      	push	{r4, r5, r6, lr}
 8013bcc:	b084      	sub	sp, #16
 8013bce:	4604      	mov	r4, r0
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	4669      	mov	r1, sp
 8013bd4:	f7ed fc40 	bl	8001458 <clock_gettime>
 8013bd8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013bdc:	2900      	cmp	r1, #0
 8013bde:	db12      	blt.n	8013c06 <rcutils_system_time_now+0x3e>
 8013be0:	ea53 0201 	orrs.w	r2, r3, r1
 8013be4:	9d02      	ldr	r5, [sp, #8]
 8013be6:	d101      	bne.n	8013bec <rcutils_system_time_now+0x24>
 8013be8:	2d00      	cmp	r5, #0
 8013bea:	db0c      	blt.n	8013c06 <rcutils_system_time_now+0x3e>
 8013bec:	4e08      	ldr	r6, [pc, #32]	; (8013c10 <rcutils_system_time_now+0x48>)
 8013bee:	2000      	movs	r0, #0
 8013bf0:	fba3 3206 	umull	r3, r2, r3, r6
 8013bf4:	195b      	adds	r3, r3, r5
 8013bf6:	fb06 2201 	mla	r2, r6, r1, r2
 8013bfa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8013bfe:	e9c4 3200 	strd	r3, r2, [r4]
 8013c02:	b004      	add	sp, #16
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
 8013c06:	2002      	movs	r0, #2
 8013c08:	b004      	add	sp, #16
 8013c0a:	bd70      	pop	{r4, r5, r6, pc}
 8013c0c:	200b      	movs	r0, #11
 8013c0e:	4770      	bx	lr
 8013c10:	3b9aca00 	.word	0x3b9aca00

08013c14 <rcutils_steady_time_now>:
 8013c14:	b300      	cbz	r0, 8013c58 <rcutils_steady_time_now+0x44>
 8013c16:	b570      	push	{r4, r5, r6, lr}
 8013c18:	b084      	sub	sp, #16
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	4669      	mov	r1, sp
 8013c20:	f7ed fc1a 	bl	8001458 <clock_gettime>
 8013c24:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013c28:	2900      	cmp	r1, #0
 8013c2a:	db12      	blt.n	8013c52 <rcutils_steady_time_now+0x3e>
 8013c2c:	ea53 0201 	orrs.w	r2, r3, r1
 8013c30:	9d02      	ldr	r5, [sp, #8]
 8013c32:	d101      	bne.n	8013c38 <rcutils_steady_time_now+0x24>
 8013c34:	2d00      	cmp	r5, #0
 8013c36:	db0c      	blt.n	8013c52 <rcutils_steady_time_now+0x3e>
 8013c38:	4e08      	ldr	r6, [pc, #32]	; (8013c5c <rcutils_steady_time_now+0x48>)
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	fba3 3206 	umull	r3, r2, r3, r6
 8013c40:	195b      	adds	r3, r3, r5
 8013c42:	fb06 2201 	mla	r2, r6, r1, r2
 8013c46:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8013c4a:	e9c4 3200 	strd	r3, r2, [r4]
 8013c4e:	b004      	add	sp, #16
 8013c50:	bd70      	pop	{r4, r5, r6, pc}
 8013c52:	2002      	movs	r0, #2
 8013c54:	b004      	add	sp, #16
 8013c56:	bd70      	pop	{r4, r5, r6, pc}
 8013c58:	200b      	movs	r0, #11
 8013c5a:	4770      	bx	lr
 8013c5c:	3b9aca00 	.word	0x3b9aca00

08013c60 <rmw_get_zero_initialized_context>:
 8013c60:	b510      	push	{r4, lr}
 8013c62:	4604      	mov	r4, r0
 8013c64:	3010      	adds	r0, #16
 8013c66:	f000 f80f 	bl	8013c88 <rmw_get_zero_initialized_init_options>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	60a3      	str	r3, [r4, #8]
 8013c70:	64a3      	str	r3, [r4, #72]	; 0x48
 8013c72:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013c74:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8013c80 <rmw_get_zero_initialized_context+0x20>
 8013c78:	ed84 7b00 	vstr	d7, [r4]
 8013c7c:	bd10      	pop	{r4, pc}
 8013c7e:	bf00      	nop
	...

08013c88 <rmw_get_zero_initialized_init_options>:
 8013c88:	b510      	push	{r4, lr}
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	2238      	movs	r2, #56	; 0x38
 8013c8e:	2100      	movs	r1, #0
 8013c90:	f003 fbd2 	bl	8017438 <memset>
 8013c94:	f104 0010 	add.w	r0, r4, #16
 8013c98:	f000 f806 	bl	8013ca8 <rmw_get_default_security_options>
 8013c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	60e3      	str	r3, [r4, #12]
 8013ca4:	bd10      	pop	{r4, pc}
 8013ca6:	bf00      	nop

08013ca8 <rmw_get_default_security_options>:
 8013ca8:	2200      	movs	r2, #0
 8013caa:	7002      	strb	r2, [r0, #0]
 8013cac:	6042      	str	r2, [r0, #4]
 8013cae:	4770      	bx	lr

08013cb0 <rmw_validate_full_topic_name>:
 8013cb0:	2800      	cmp	r0, #0
 8013cb2:	d05d      	beq.n	8013d70 <rmw_validate_full_topic_name+0xc0>
 8013cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb8:	460d      	mov	r5, r1
 8013cba:	2900      	cmp	r1, #0
 8013cbc:	d05a      	beq.n	8013d74 <rmw_validate_full_topic_name+0xc4>
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	4616      	mov	r6, r2
 8013cc2:	f7ec fb17 	bl	80002f4 <strlen>
 8013cc6:	b150      	cbz	r0, 8013cde <rmw_validate_full_topic_name+0x2e>
 8013cc8:	7823      	ldrb	r3, [r4, #0]
 8013cca:	2b2f      	cmp	r3, #47	; 0x2f
 8013ccc:	d00e      	beq.n	8013cec <rmw_validate_full_topic_name+0x3c>
 8013cce:	2302      	movs	r3, #2
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	b146      	cbz	r6, 8013ce6 <rmw_validate_full_topic_name+0x36>
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	6033      	str	r3, [r6, #0]
 8013cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cde:	2301      	movs	r3, #1
 8013ce0:	602b      	str	r3, [r5, #0]
 8013ce2:	2e00      	cmp	r6, #0
 8013ce4:	d1f6      	bne.n	8013cd4 <rmw_validate_full_topic_name+0x24>
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cec:	1e43      	subs	r3, r0, #1
 8013cee:	5ce2      	ldrb	r2, [r4, r3]
 8013cf0:	2a2f      	cmp	r2, #47	; 0x2f
 8013cf2:	d041      	beq.n	8013d78 <rmw_validate_full_topic_name+0xc8>
 8013cf4:	1e62      	subs	r2, r4, #1
 8013cf6:	f1c4 0e01 	rsb	lr, r4, #1
 8013cfa:	eb02 0800 	add.w	r8, r2, r0
 8013cfe:	eb0e 0702 	add.w	r7, lr, r2
 8013d02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013d06:	f023 0120 	bic.w	r1, r3, #32
 8013d0a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8013d0e:	3941      	subs	r1, #65	; 0x41
 8013d10:	2919      	cmp	r1, #25
 8013d12:	d90f      	bls.n	8013d34 <rmw_validate_full_topic_name+0x84>
 8013d14:	f1bc 0f0a 	cmp.w	ip, #10
 8013d18:	d90c      	bls.n	8013d34 <rmw_validate_full_topic_name+0x84>
 8013d1a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8013d1e:	fab3 f383 	clz	r3, r3
 8013d22:	095b      	lsrs	r3, r3, #5
 8013d24:	b933      	cbnz	r3, 8013d34 <rmw_validate_full_topic_name+0x84>
 8013d26:	2204      	movs	r2, #4
 8013d28:	602a      	str	r2, [r5, #0]
 8013d2a:	2e00      	cmp	r6, #0
 8013d2c:	d0db      	beq.n	8013ce6 <rmw_validate_full_topic_name+0x36>
 8013d2e:	4618      	mov	r0, r3
 8013d30:	6037      	str	r7, [r6, #0]
 8013d32:	e7d2      	b.n	8013cda <rmw_validate_full_topic_name+0x2a>
 8013d34:	4542      	cmp	r2, r8
 8013d36:	d1e2      	bne.n	8013cfe <rmw_validate_full_topic_name+0x4e>
 8013d38:	2301      	movs	r3, #1
 8013d3a:	4f1a      	ldr	r7, [pc, #104]	; (8013da4 <rmw_validate_full_topic_name+0xf4>)
 8013d3c:	e004      	b.n	8013d48 <rmw_validate_full_topic_name+0x98>
 8013d3e:	4298      	cmp	r0, r3
 8013d40:	f104 0401 	add.w	r4, r4, #1
 8013d44:	4613      	mov	r3, r2
 8013d46:	d91c      	bls.n	8013d82 <rmw_validate_full_topic_name+0xd2>
 8013d48:	4298      	cmp	r0, r3
 8013d4a:	f103 0201 	add.w	r2, r3, #1
 8013d4e:	d0f6      	beq.n	8013d3e <rmw_validate_full_topic_name+0x8e>
 8013d50:	7821      	ldrb	r1, [r4, #0]
 8013d52:	292f      	cmp	r1, #47	; 0x2f
 8013d54:	d1f3      	bne.n	8013d3e <rmw_validate_full_topic_name+0x8e>
 8013d56:	7861      	ldrb	r1, [r4, #1]
 8013d58:	292f      	cmp	r1, #47	; 0x2f
 8013d5a:	d01e      	beq.n	8013d9a <rmw_validate_full_topic_name+0xea>
 8013d5c:	5dc9      	ldrb	r1, [r1, r7]
 8013d5e:	0749      	lsls	r1, r1, #29
 8013d60:	d5ed      	bpl.n	8013d3e <rmw_validate_full_topic_name+0x8e>
 8013d62:	2206      	movs	r2, #6
 8013d64:	602a      	str	r2, [r5, #0]
 8013d66:	2e00      	cmp	r6, #0
 8013d68:	d0bd      	beq.n	8013ce6 <rmw_validate_full_topic_name+0x36>
 8013d6a:	2000      	movs	r0, #0
 8013d6c:	6033      	str	r3, [r6, #0]
 8013d6e:	e7b4      	b.n	8013cda <rmw_validate_full_topic_name+0x2a>
 8013d70:	200b      	movs	r0, #11
 8013d72:	4770      	bx	lr
 8013d74:	200b      	movs	r0, #11
 8013d76:	e7b0      	b.n	8013cda <rmw_validate_full_topic_name+0x2a>
 8013d78:	2203      	movs	r2, #3
 8013d7a:	602a      	str	r2, [r5, #0]
 8013d7c:	2e00      	cmp	r6, #0
 8013d7e:	d1f4      	bne.n	8013d6a <rmw_validate_full_topic_name+0xba>
 8013d80:	e7b1      	b.n	8013ce6 <rmw_validate_full_topic_name+0x36>
 8013d82:	28f7      	cmp	r0, #247	; 0xf7
 8013d84:	d803      	bhi.n	8013d8e <rmw_validate_full_topic_name+0xde>
 8013d86:	2300      	movs	r3, #0
 8013d88:	4618      	mov	r0, r3
 8013d8a:	602b      	str	r3, [r5, #0]
 8013d8c:	e7a5      	b.n	8013cda <rmw_validate_full_topic_name+0x2a>
 8013d8e:	2307      	movs	r3, #7
 8013d90:	602b      	str	r3, [r5, #0]
 8013d92:	2e00      	cmp	r6, #0
 8013d94:	d0a7      	beq.n	8013ce6 <rmw_validate_full_topic_name+0x36>
 8013d96:	23f6      	movs	r3, #246	; 0xf6
 8013d98:	e7e7      	b.n	8013d6a <rmw_validate_full_topic_name+0xba>
 8013d9a:	2205      	movs	r2, #5
 8013d9c:	602a      	str	r2, [r5, #0]
 8013d9e:	2e00      	cmp	r6, #0
 8013da0:	d1e3      	bne.n	8013d6a <rmw_validate_full_topic_name+0xba>
 8013da2:	e7a0      	b.n	8013ce6 <rmw_validate_full_topic_name+0x36>
 8013da4:	08018e74 	.word	0x08018e74

08013da8 <rmw_validate_namespace_with_size>:
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d043      	beq.n	8013e34 <rmw_validate_namespace_with_size+0x8c>
 8013dac:	b570      	push	{r4, r5, r6, lr}
 8013dae:	4614      	mov	r4, r2
 8013db0:	b0c2      	sub	sp, #264	; 0x108
 8013db2:	b32a      	cbz	r2, 8013e00 <rmw_validate_namespace_with_size+0x58>
 8013db4:	2901      	cmp	r1, #1
 8013db6:	460d      	mov	r5, r1
 8013db8:	461e      	mov	r6, r3
 8013dba:	d102      	bne.n	8013dc2 <rmw_validate_namespace_with_size+0x1a>
 8013dbc:	7803      	ldrb	r3, [r0, #0]
 8013dbe:	2b2f      	cmp	r3, #47	; 0x2f
 8013dc0:	d012      	beq.n	8013de8 <rmw_validate_namespace_with_size+0x40>
 8013dc2:	aa01      	add	r2, sp, #4
 8013dc4:	4669      	mov	r1, sp
 8013dc6:	f7ff ff73 	bl	8013cb0 <rmw_validate_full_topic_name>
 8013dca:	b980      	cbnz	r0, 8013dee <rmw_validate_namespace_with_size+0x46>
 8013dcc:	9a00      	ldr	r2, [sp, #0]
 8013dce:	b14a      	cbz	r2, 8013de4 <rmw_validate_namespace_with_size+0x3c>
 8013dd0:	2a07      	cmp	r2, #7
 8013dd2:	d007      	beq.n	8013de4 <rmw_validate_namespace_with_size+0x3c>
 8013dd4:	1e53      	subs	r3, r2, #1
 8013dd6:	2b05      	cmp	r3, #5
 8013dd8:	d82e      	bhi.n	8013e38 <rmw_validate_namespace_with_size+0x90>
 8013dda:	e8df f003 	tbb	[pc, r3]
 8013dde:	1f1c      	.short	0x1f1c
 8013de0:	14282522 	.word	0x14282522
 8013de4:	2df5      	cmp	r5, #245	; 0xf5
 8013de6:	d804      	bhi.n	8013df2 <rmw_validate_namespace_with_size+0x4a>
 8013de8:	2300      	movs	r3, #0
 8013dea:	4618      	mov	r0, r3
 8013dec:	6023      	str	r3, [r4, #0]
 8013dee:	b042      	add	sp, #264	; 0x108
 8013df0:	bd70      	pop	{r4, r5, r6, pc}
 8013df2:	2307      	movs	r3, #7
 8013df4:	6023      	str	r3, [r4, #0]
 8013df6:	2e00      	cmp	r6, #0
 8013df8:	d0f9      	beq.n	8013dee <rmw_validate_namespace_with_size+0x46>
 8013dfa:	23f4      	movs	r3, #244	; 0xf4
 8013dfc:	6033      	str	r3, [r6, #0]
 8013dfe:	e7f6      	b.n	8013dee <rmw_validate_namespace_with_size+0x46>
 8013e00:	200b      	movs	r0, #11
 8013e02:	b042      	add	sp, #264	; 0x108
 8013e04:	bd70      	pop	{r4, r5, r6, pc}
 8013e06:	2306      	movs	r3, #6
 8013e08:	6023      	str	r3, [r4, #0]
 8013e0a:	2e00      	cmp	r6, #0
 8013e0c:	d0ef      	beq.n	8013dee <rmw_validate_namespace_with_size+0x46>
 8013e0e:	9b01      	ldr	r3, [sp, #4]
 8013e10:	6033      	str	r3, [r6, #0]
 8013e12:	b042      	add	sp, #264	; 0x108
 8013e14:	bd70      	pop	{r4, r5, r6, pc}
 8013e16:	2301      	movs	r3, #1
 8013e18:	6023      	str	r3, [r4, #0]
 8013e1a:	e7f6      	b.n	8013e0a <rmw_validate_namespace_with_size+0x62>
 8013e1c:	2302      	movs	r3, #2
 8013e1e:	6023      	str	r3, [r4, #0]
 8013e20:	e7f3      	b.n	8013e0a <rmw_validate_namespace_with_size+0x62>
 8013e22:	2303      	movs	r3, #3
 8013e24:	6023      	str	r3, [r4, #0]
 8013e26:	e7f0      	b.n	8013e0a <rmw_validate_namespace_with_size+0x62>
 8013e28:	2304      	movs	r3, #4
 8013e2a:	6023      	str	r3, [r4, #0]
 8013e2c:	e7ed      	b.n	8013e0a <rmw_validate_namespace_with_size+0x62>
 8013e2e:	2305      	movs	r3, #5
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	e7ea      	b.n	8013e0a <rmw_validate_namespace_with_size+0x62>
 8013e34:	200b      	movs	r0, #11
 8013e36:	4770      	bx	lr
 8013e38:	4613      	mov	r3, r2
 8013e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013e3e:	4a03      	ldr	r2, [pc, #12]	; (8013e4c <rmw_validate_namespace_with_size+0xa4>)
 8013e40:	a802      	add	r0, sp, #8
 8013e42:	f7ff fd07 	bl	8013854 <rcutils_snprintf>
 8013e46:	2001      	movs	r0, #1
 8013e48:	e7d1      	b.n	8013dee <rmw_validate_namespace_with_size+0x46>
 8013e4a:	bf00      	nop
 8013e4c:	0801887c 	.word	0x0801887c

08013e50 <rmw_validate_namespace>:
 8013e50:	b168      	cbz	r0, 8013e6e <rmw_validate_namespace+0x1e>
 8013e52:	b570      	push	{r4, r5, r6, lr}
 8013e54:	460d      	mov	r5, r1
 8013e56:	4616      	mov	r6, r2
 8013e58:	4604      	mov	r4, r0
 8013e5a:	f7ec fa4b 	bl	80002f4 <strlen>
 8013e5e:	4633      	mov	r3, r6
 8013e60:	4601      	mov	r1, r0
 8013e62:	462a      	mov	r2, r5
 8013e64:	4620      	mov	r0, r4
 8013e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e6a:	f7ff bf9d 	b.w	8013da8 <rmw_validate_namespace_with_size>
 8013e6e:	200b      	movs	r0, #11
 8013e70:	4770      	bx	lr
 8013e72:	bf00      	nop

08013e74 <rmw_namespace_validation_result_string>:
 8013e74:	2807      	cmp	r0, #7
 8013e76:	d803      	bhi.n	8013e80 <rmw_namespace_validation_result_string+0xc>
 8013e78:	4b02      	ldr	r3, [pc, #8]	; (8013e84 <rmw_namespace_validation_result_string+0x10>)
 8013e7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013e7e:	4770      	bx	lr
 8013e80:	4801      	ldr	r0, [pc, #4]	; (8013e88 <rmw_namespace_validation_result_string+0x14>)
 8013e82:	4770      	bx	lr
 8013e84:	08018a74 	.word	0x08018a74
 8013e88:	080188cc 	.word	0x080188cc

08013e8c <rmw_validate_node_name>:
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d042      	beq.n	8013f16 <rmw_validate_node_name+0x8a>
 8013e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e94:	460d      	mov	r5, r1
 8013e96:	2900      	cmp	r1, #0
 8013e98:	d03f      	beq.n	8013f1a <rmw_validate_node_name+0x8e>
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	4616      	mov	r6, r2
 8013e9e:	f7ec fa29 	bl	80002f4 <strlen>
 8013ea2:	b310      	cbz	r0, 8013eea <rmw_validate_node_name+0x5e>
 8013ea4:	1e63      	subs	r3, r4, #1
 8013ea6:	f1c4 0101 	rsb	r1, r4, #1
 8013eaa:	eb03 0800 	add.w	r8, r3, r0
 8013eae:	18cf      	adds	r7, r1, r3
 8013eb0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8013eb4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8013eb8:	f02e 0c20 	bic.w	ip, lr, #32
 8013ebc:	2a09      	cmp	r2, #9
 8013ebe:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8013ec2:	d905      	bls.n	8013ed0 <rmw_validate_node_name+0x44>
 8013ec4:	f1bc 0f19 	cmp.w	ip, #25
 8013ec8:	d902      	bls.n	8013ed0 <rmw_validate_node_name+0x44>
 8013eca:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8013ece:	d114      	bne.n	8013efa <rmw_validate_node_name+0x6e>
 8013ed0:	4598      	cmp	r8, r3
 8013ed2:	d1ec      	bne.n	8013eae <rmw_validate_node_name+0x22>
 8013ed4:	7822      	ldrb	r2, [r4, #0]
 8013ed6:	4b16      	ldr	r3, [pc, #88]	; (8013f30 <rmw_validate_node_name+0xa4>)
 8013ed8:	5cd3      	ldrb	r3, [r2, r3]
 8013eda:	f013 0304 	ands.w	r3, r3, #4
 8013ede:	d113      	bne.n	8013f08 <rmw_validate_node_name+0x7c>
 8013ee0:	28ff      	cmp	r0, #255	; 0xff
 8013ee2:	d81c      	bhi.n	8013f1e <rmw_validate_node_name+0x92>
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	602b      	str	r3, [r5, #0]
 8013ee8:	e00c      	b.n	8013f04 <rmw_validate_node_name+0x78>
 8013eea:	2301      	movs	r3, #1
 8013eec:	602b      	str	r3, [r5, #0]
 8013eee:	b17e      	cbz	r6, 8013f10 <rmw_validate_node_name+0x84>
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	6033      	str	r3, [r6, #0]
 8013ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013efa:	2302      	movs	r3, #2
 8013efc:	602b      	str	r3, [r5, #0]
 8013efe:	b13e      	cbz	r6, 8013f10 <rmw_validate_node_name+0x84>
 8013f00:	2000      	movs	r0, #0
 8013f02:	6037      	str	r7, [r6, #0]
 8013f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f08:	2303      	movs	r3, #3
 8013f0a:	602b      	str	r3, [r5, #0]
 8013f0c:	2e00      	cmp	r6, #0
 8013f0e:	d1ef      	bne.n	8013ef0 <rmw_validate_node_name+0x64>
 8013f10:	2000      	movs	r0, #0
 8013f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f16:	200b      	movs	r0, #11
 8013f18:	4770      	bx	lr
 8013f1a:	200b      	movs	r0, #11
 8013f1c:	e7f2      	b.n	8013f04 <rmw_validate_node_name+0x78>
 8013f1e:	2204      	movs	r2, #4
 8013f20:	602a      	str	r2, [r5, #0]
 8013f22:	2e00      	cmp	r6, #0
 8013f24:	d0f4      	beq.n	8013f10 <rmw_validate_node_name+0x84>
 8013f26:	22fe      	movs	r2, #254	; 0xfe
 8013f28:	4618      	mov	r0, r3
 8013f2a:	6032      	str	r2, [r6, #0]
 8013f2c:	e7ea      	b.n	8013f04 <rmw_validate_node_name+0x78>
 8013f2e:	bf00      	nop
 8013f30:	08018e74 	.word	0x08018e74

08013f34 <rmw_node_name_validation_result_string>:
 8013f34:	2804      	cmp	r0, #4
 8013f36:	d803      	bhi.n	8013f40 <rmw_node_name_validation_result_string+0xc>
 8013f38:	4b02      	ldr	r3, [pc, #8]	; (8013f44 <rmw_node_name_validation_result_string+0x10>)
 8013f3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013f3e:	4770      	bx	lr
 8013f40:	4801      	ldr	r0, [pc, #4]	; (8013f48 <rmw_node_name_validation_result_string+0x14>)
 8013f42:	4770      	bx	lr
 8013f44:	08018b80 	.word	0x08018b80
 8013f48:	08018a94 	.word	0x08018a94

08013f4c <get_memory>:
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	6840      	ldr	r0, [r0, #4]
 8013f50:	b158      	cbz	r0, 8013f6a <get_memory+0x1e>
 8013f52:	6842      	ldr	r2, [r0, #4]
 8013f54:	605a      	str	r2, [r3, #4]
 8013f56:	b10a      	cbz	r2, 8013f5c <get_memory+0x10>
 8013f58:	2100      	movs	r1, #0
 8013f5a:	6011      	str	r1, [r2, #0]
 8013f5c:	681a      	ldr	r2, [r3, #0]
 8013f5e:	6042      	str	r2, [r0, #4]
 8013f60:	b102      	cbz	r2, 8013f64 <get_memory+0x18>
 8013f62:	6010      	str	r0, [r2, #0]
 8013f64:	2200      	movs	r2, #0
 8013f66:	6002      	str	r2, [r0, #0]
 8013f68:	6018      	str	r0, [r3, #0]
 8013f6a:	4770      	bx	lr

08013f6c <put_memory>:
 8013f6c:	680b      	ldr	r3, [r1, #0]
 8013f6e:	b10b      	cbz	r3, 8013f74 <put_memory+0x8>
 8013f70:	684a      	ldr	r2, [r1, #4]
 8013f72:	605a      	str	r2, [r3, #4]
 8013f74:	684a      	ldr	r2, [r1, #4]
 8013f76:	b102      	cbz	r2, 8013f7a <put_memory+0xe>
 8013f78:	6013      	str	r3, [r2, #0]
 8013f7a:	6803      	ldr	r3, [r0, #0]
 8013f7c:	428b      	cmp	r3, r1
 8013f7e:	6843      	ldr	r3, [r0, #4]
 8013f80:	bf08      	it	eq
 8013f82:	6002      	streq	r2, [r0, #0]
 8013f84:	604b      	str	r3, [r1, #4]
 8013f86:	b103      	cbz	r3, 8013f8a <put_memory+0x1e>
 8013f88:	6019      	str	r1, [r3, #0]
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	600b      	str	r3, [r1, #0]
 8013f8e:	6041      	str	r1, [r0, #4]
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop

08013f94 <rmw_get_implementation_identifier>:
 8013f94:	4b01      	ldr	r3, [pc, #4]	; (8013f9c <rmw_get_implementation_identifier+0x8>)
 8013f96:	6818      	ldr	r0, [r3, #0]
 8013f98:	4770      	bx	lr
 8013f9a:	bf00      	nop
 8013f9c:	08018bac 	.word	0x08018bac

08013fa0 <rmw_init_options_init>:
 8013fa0:	b084      	sub	sp, #16
 8013fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fa4:	b083      	sub	sp, #12
 8013fa6:	ad09      	add	r5, sp, #36	; 0x24
 8013fa8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013fac:	b130      	cbz	r0, 8013fbc <rmw_init_options_init+0x1c>
 8013fae:	4604      	mov	r4, r0
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f7fa f9ad 	bl	800e310 <rcutils_allocator_is_valid>
 8013fb6:	b108      	cbz	r0, 8013fbc <rmw_init_options_init+0x1c>
 8013fb8:	68a6      	ldr	r6, [r4, #8]
 8013fba:	b12e      	cbz	r6, 8013fc8 <rmw_init_options_init+0x28>
 8013fbc:	200b      	movs	r0, #11
 8013fbe:	b003      	add	sp, #12
 8013fc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013fc4:	b004      	add	sp, #16
 8013fc6:	4770      	bx	lr
 8013fc8:	2200      	movs	r2, #0
 8013fca:	2300      	movs	r3, #0
 8013fcc:	f104 0c20 	add.w	ip, r4, #32
 8013fd0:	f8df e098 	ldr.w	lr, [pc, #152]	; 801406c <rmw_init_options_init+0xcc>
 8013fd4:	466f      	mov	r7, sp
 8013fd6:	e9c4 2300 	strd	r2, r3, [r4]
 8013fda:	4b20      	ldr	r3, [pc, #128]	; (801405c <rmw_init_options_init+0xbc>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	60a3      	str	r3, [r4, #8]
 8013fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fe6:	682b      	ldr	r3, [r5, #0]
 8013fe8:	4638      	mov	r0, r7
 8013fea:	f8cc 3000 	str.w	r3, [ip]
 8013fee:	f8c4 e01c 	str.w	lr, [r4, #28]
 8013ff2:	60e6      	str	r6, [r4, #12]
 8013ff4:	f7ff fe58 	bl	8013ca8 <rmw_get_default_security_options>
 8013ff8:	f104 0310 	add.w	r3, r4, #16
 8013ffc:	2203      	movs	r2, #3
 8013ffe:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014002:	e883 0003 	stmia.w	r3, {r0, r1}
 8014006:	4816      	ldr	r0, [pc, #88]	; (8014060 <rmw_init_options_init+0xc0>)
 8014008:	4916      	ldr	r1, [pc, #88]	; (8014064 <rmw_init_options_init+0xc4>)
 801400a:	7626      	strb	r6, [r4, #24]
 801400c:	f7fa fc8a 	bl	800e924 <rmw_uxrce_init_init_options_impl_memory>
 8014010:	4813      	ldr	r0, [pc, #76]	; (8014060 <rmw_init_options_init+0xc0>)
 8014012:	f7ff ff9b 	bl	8013f4c <get_memory>
 8014016:	b1f0      	cbz	r0, 8014056 <rmw_init_options_init+0xb6>
 8014018:	4a13      	ldr	r2, [pc, #76]	; (8014068 <rmw_init_options_init+0xc8>)
 801401a:	6883      	ldr	r3, [r0, #8]
 801401c:	6851      	ldr	r1, [r2, #4]
 801401e:	6363      	str	r3, [r4, #52]	; 0x34
 8014020:	7810      	ldrb	r0, [r2, #0]
 8014022:	6159      	str	r1, [r3, #20]
 8014024:	68d1      	ldr	r1, [r2, #12]
 8014026:	7418      	strb	r0, [r3, #16]
 8014028:	61d9      	str	r1, [r3, #28]
 801402a:	6911      	ldr	r1, [r2, #16]
 801402c:	6219      	str	r1, [r3, #32]
 801402e:	6951      	ldr	r1, [r2, #20]
 8014030:	6892      	ldr	r2, [r2, #8]
 8014032:	6259      	str	r1, [r3, #36]	; 0x24
 8014034:	619a      	str	r2, [r3, #24]
 8014036:	f7fd fa73 	bl	8011520 <uxr_nanos>
 801403a:	f002 ff59 	bl	8016ef0 <srand>
 801403e:	f002 ff85 	bl	8016f4c <rand>
 8014042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014044:	6298      	str	r0, [r3, #40]	; 0x28
 8014046:	2800      	cmp	r0, #0
 8014048:	d0f9      	beq.n	801403e <rmw_init_options_init+0x9e>
 801404a:	2000      	movs	r0, #0
 801404c:	b003      	add	sp, #12
 801404e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014052:	b004      	add	sp, #16
 8014054:	4770      	bx	lr
 8014056:	2001      	movs	r0, #1
 8014058:	e7b1      	b.n	8013fbe <rmw_init_options_init+0x1e>
 801405a:	bf00      	nop
 801405c:	08018bac 	.word	0x08018bac
 8014060:	2400e0f4 	.word	0x2400e0f4
 8014064:	24009990 	.word	0x24009990
 8014068:	2400981c 	.word	0x2400981c
 801406c:	0801874c 	.word	0x0801874c

08014070 <rmw_init_options_copy>:
 8014070:	2800      	cmp	r0, #0
 8014072:	d047      	beq.n	8014104 <rmw_init_options_copy+0x94>
 8014074:	b570      	push	{r4, r5, r6, lr}
 8014076:	460d      	mov	r5, r1
 8014078:	b149      	cbz	r1, 801408e <rmw_init_options_copy+0x1e>
 801407a:	4604      	mov	r4, r0
 801407c:	6880      	ldr	r0, [r0, #8]
 801407e:	b120      	cbz	r0, 801408a <rmw_init_options_copy+0x1a>
 8014080:	4b22      	ldr	r3, [pc, #136]	; (801410c <rmw_init_options_copy+0x9c>)
 8014082:	6819      	ldr	r1, [r3, #0]
 8014084:	f7ec f92c 	bl	80002e0 <strcmp>
 8014088:	bba8      	cbnz	r0, 80140f6 <rmw_init_options_copy+0x86>
 801408a:	68ab      	ldr	r3, [r5, #8]
 801408c:	b11b      	cbz	r3, 8014096 <rmw_init_options_copy+0x26>
 801408e:	f04f 0c0b 	mov.w	ip, #11
 8014092:	4660      	mov	r0, ip
 8014094:	bd70      	pop	{r4, r5, r6, pc}
 8014096:	4623      	mov	r3, r4
 8014098:	462a      	mov	r2, r5
 801409a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801409e:	f8d3 e000 	ldr.w	lr, [r3]
 80140a2:	3310      	adds	r3, #16
 80140a4:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80140a8:	3210      	adds	r2, #16
 80140aa:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80140ae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80140b2:	42b3      	cmp	r3, r6
 80140b4:	f842 ec10 	str.w	lr, [r2, #-16]
 80140b8:	f842 cc0c 	str.w	ip, [r2, #-12]
 80140bc:	f842 0c08 	str.w	r0, [r2, #-8]
 80140c0:	f842 1c04 	str.w	r1, [r2, #-4]
 80140c4:	d1eb      	bne.n	801409e <rmw_init_options_copy+0x2e>
 80140c6:	6819      	ldr	r1, [r3, #0]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	4811      	ldr	r0, [pc, #68]	; (8014110 <rmw_init_options_copy+0xa0>)
 80140cc:	6011      	str	r1, [r2, #0]
 80140ce:	6053      	str	r3, [r2, #4]
 80140d0:	f7ff ff3c 	bl	8013f4c <get_memory>
 80140d4:	b198      	cbz	r0, 80140fe <rmw_init_options_copy+0x8e>
 80140d6:	6883      	ldr	r3, [r0, #8]
 80140d8:	f04f 0c00 	mov.w	ip, #0
 80140dc:	636b      	str	r3, [r5, #52]	; 0x34
 80140de:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80140e0:	f103 0410 	add.w	r4, r3, #16
 80140e4:	3510      	adds	r5, #16
 80140e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80140ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80140f2:	4660      	mov	r0, ip
 80140f4:	bd70      	pop	{r4, r5, r6, pc}
 80140f6:	f04f 0c0c 	mov.w	ip, #12
 80140fa:	4660      	mov	r0, ip
 80140fc:	bd70      	pop	{r4, r5, r6, pc}
 80140fe:	f04f 0c01 	mov.w	ip, #1
 8014102:	e7c6      	b.n	8014092 <rmw_init_options_copy+0x22>
 8014104:	f04f 0c0b 	mov.w	ip, #11
 8014108:	4660      	mov	r0, ip
 801410a:	4770      	bx	lr
 801410c:	08018bac 	.word	0x08018bac
 8014110:	2400e0f4 	.word	0x2400e0f4

08014114 <rmw_init_options_fini>:
 8014114:	b510      	push	{r4, lr}
 8014116:	b08e      	sub	sp, #56	; 0x38
 8014118:	b388      	cbz	r0, 801417e <rmw_init_options_fini+0x6a>
 801411a:	4604      	mov	r4, r0
 801411c:	3020      	adds	r0, #32
 801411e:	f7fa f8f7 	bl	800e310 <rcutils_allocator_is_valid>
 8014122:	b360      	cbz	r0, 801417e <rmw_init_options_fini+0x6a>
 8014124:	68a0      	ldr	r0, [r4, #8]
 8014126:	b120      	cbz	r0, 8014132 <rmw_init_options_fini+0x1e>
 8014128:	4b1a      	ldr	r3, [pc, #104]	; (8014194 <rmw_init_options_fini+0x80>)
 801412a:	6819      	ldr	r1, [r3, #0]
 801412c:	f7ec f8d8 	bl	80002e0 <strcmp>
 8014130:	bb68      	cbnz	r0, 801418e <rmw_init_options_fini+0x7a>
 8014132:	4b19      	ldr	r3, [pc, #100]	; (8014198 <rmw_init_options_fini+0x84>)
 8014134:	6819      	ldr	r1, [r3, #0]
 8014136:	b331      	cbz	r1, 8014186 <rmw_init_options_fini+0x72>
 8014138:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801413a:	e001      	b.n	8014140 <rmw_init_options_fini+0x2c>
 801413c:	6849      	ldr	r1, [r1, #4]
 801413e:	b311      	cbz	r1, 8014186 <rmw_init_options_fini+0x72>
 8014140:	688b      	ldr	r3, [r1, #8]
 8014142:	429a      	cmp	r2, r3
 8014144:	d1fa      	bne.n	801413c <rmw_init_options_fini+0x28>
 8014146:	4814      	ldr	r0, [pc, #80]	; (8014198 <rmw_init_options_fini+0x84>)
 8014148:	f7ff ff10 	bl	8013f6c <put_memory>
 801414c:	4668      	mov	r0, sp
 801414e:	f7ff fd9b 	bl	8013c88 <rmw_get_zero_initialized_init_options>
 8014152:	46ee      	mov	lr, sp
 8014154:	46a4      	mov	ip, r4
 8014156:	2400      	movs	r4, #0
 8014158:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801415c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014160:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014168:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801416c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014170:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014174:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014178:	4620      	mov	r0, r4
 801417a:	b00e      	add	sp, #56	; 0x38
 801417c:	bd10      	pop	{r4, pc}
 801417e:	240b      	movs	r4, #11
 8014180:	4620      	mov	r0, r4
 8014182:	b00e      	add	sp, #56	; 0x38
 8014184:	bd10      	pop	{r4, pc}
 8014186:	2401      	movs	r4, #1
 8014188:	4620      	mov	r0, r4
 801418a:	b00e      	add	sp, #56	; 0x38
 801418c:	bd10      	pop	{r4, pc}
 801418e:	240c      	movs	r4, #12
 8014190:	e7f2      	b.n	8014178 <rmw_init_options_fini+0x64>
 8014192:	bf00      	nop
 8014194:	08018bac 	.word	0x08018bac
 8014198:	2400e0f4 	.word	0x2400e0f4

0801419c <rmw_init>:
 801419c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141a0:	b083      	sub	sp, #12
 80141a2:	2800      	cmp	r0, #0
 80141a4:	f000 80d3 	beq.w	801434e <rmw_init+0x1b2>
 80141a8:	460e      	mov	r6, r1
 80141aa:	2900      	cmp	r1, #0
 80141ac:	f000 80cf 	beq.w	801434e <rmw_init+0x1b2>
 80141b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80141b2:	4605      	mov	r5, r0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	f000 80ca 	beq.w	801434e <rmw_init+0x1b2>
 80141ba:	4b78      	ldr	r3, [pc, #480]	; (801439c <rmw_init+0x200>)
 80141bc:	6880      	ldr	r0, [r0, #8]
 80141be:	681f      	ldr	r7, [r3, #0]
 80141c0:	b128      	cbz	r0, 80141ce <rmw_init+0x32>
 80141c2:	4639      	mov	r1, r7
 80141c4:	f7ec f88c 	bl	80002e0 <strcmp>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	f040 80ca 	bne.w	8014362 <rmw_init+0x1c6>
 80141ce:	4c74      	ldr	r4, [pc, #464]	; (80143a0 <rmw_init+0x204>)
 80141d0:	f04f 0800 	mov.w	r8, #0
 80141d4:	4973      	ldr	r1, [pc, #460]	; (80143a4 <rmw_init+0x208>)
 80141d6:	4874      	ldr	r0, [pc, #464]	; (80143a8 <rmw_init+0x20c>)
 80141d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80141dc:	60b7      	str	r7, [r6, #8]
 80141de:	e9c6 2300 	strd	r2, r3, [r6]
 80141e2:	68eb      	ldr	r3, [r5, #12]
 80141e4:	2201      	movs	r2, #1
 80141e6:	64b3      	str	r3, [r6, #72]	; 0x48
 80141e8:	f7fa fb3c 	bl	800e864 <rmw_uxrce_init_session_memory>
 80141ec:	4620      	mov	r0, r4
 80141ee:	2204      	movs	r2, #4
 80141f0:	496e      	ldr	r1, [pc, #440]	; (80143ac <rmw_init+0x210>)
 80141f2:	f7fa fb77 	bl	800e8e4 <rmw_uxrce_init_static_input_buffer_memory>
 80141f6:	486c      	ldr	r0, [pc, #432]	; (80143a8 <rmw_init+0x20c>)
 80141f8:	f884 800d 	strb.w	r8, [r4, #13]
 80141fc:	f7ff fea6 	bl	8013f4c <get_memory>
 8014200:	2800      	cmp	r0, #0
 8014202:	f000 80a9 	beq.w	8014358 <rmw_init+0x1bc>
 8014206:	6884      	ldr	r4, [r0, #8]
 8014208:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801420a:	f104 0910 	add.w	r9, r4, #16
 801420e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8014210:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014214:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014218:	9101      	str	r1, [sp, #4]
 801421a:	4661      	mov	r1, ip
 801421c:	6a00      	ldr	r0, [r0, #32]
 801421e:	9000      	str	r0, [sp, #0]
 8014220:	4648      	mov	r0, r9
 8014222:	f000 fdc9 	bl	8014db8 <uxr_set_custom_transport_callbacks>
 8014226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801422a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801422e:	4960      	ldr	r1, [pc, #384]	; (80143b0 <rmw_init+0x214>)
 8014230:	4860      	ldr	r0, [pc, #384]	; (80143b4 <rmw_init+0x218>)
 8014232:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8014236:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801423a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801423e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8014242:	2201      	movs	r2, #1
 8014244:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8014248:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801424c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8014250:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8014254:	64f4      	str	r4, [r6, #76]	; 0x4c
 8014256:	f7fa fae5 	bl	800e824 <rmw_uxrce_init_node_memory>
 801425a:	2205      	movs	r2, #5
 801425c:	4956      	ldr	r1, [pc, #344]	; (80143b8 <rmw_init+0x21c>)
 801425e:	4857      	ldr	r0, [pc, #348]	; (80143bc <rmw_init+0x220>)
 8014260:	f7fa fac0 	bl	800e7e4 <rmw_uxrce_init_subscription_memory>
 8014264:	220a      	movs	r2, #10
 8014266:	4956      	ldr	r1, [pc, #344]	; (80143c0 <rmw_init+0x224>)
 8014268:	4856      	ldr	r0, [pc, #344]	; (80143c4 <rmw_init+0x228>)
 801426a:	f7fa fa9b 	bl	800e7a4 <rmw_uxrce_init_publisher_memory>
 801426e:	2201      	movs	r2, #1
 8014270:	4955      	ldr	r1, [pc, #340]	; (80143c8 <rmw_init+0x22c>)
 8014272:	4856      	ldr	r0, [pc, #344]	; (80143cc <rmw_init+0x230>)
 8014274:	f7fa fa56 	bl	800e724 <rmw_uxrce_init_service_memory>
 8014278:	2201      	movs	r2, #1
 801427a:	4955      	ldr	r1, [pc, #340]	; (80143d0 <rmw_init+0x234>)
 801427c:	4855      	ldr	r0, [pc, #340]	; (80143d4 <rmw_init+0x238>)
 801427e:	f7fa fa71 	bl	800e764 <rmw_uxrce_init_client_memory>
 8014282:	220f      	movs	r2, #15
 8014284:	4954      	ldr	r1, [pc, #336]	; (80143d8 <rmw_init+0x23c>)
 8014286:	4855      	ldr	r0, [pc, #340]	; (80143dc <rmw_init+0x240>)
 8014288:	f7fa fb0c 	bl	800e8a4 <rmw_uxrce_init_topic_memory>
 801428c:	2203      	movs	r2, #3
 801428e:	4954      	ldr	r1, [pc, #336]	; (80143e0 <rmw_init+0x244>)
 8014290:	4854      	ldr	r0, [pc, #336]	; (80143e4 <rmw_init+0x248>)
 8014292:	f7fa fb47 	bl	800e924 <rmw_uxrce_init_init_options_impl_memory>
 8014296:	2204      	movs	r2, #4
 8014298:	4953      	ldr	r1, [pc, #332]	; (80143e8 <rmw_init+0x24c>)
 801429a:	4854      	ldr	r0, [pc, #336]	; (80143ec <rmw_init+0x250>)
 801429c:	f7fa fb62 	bl	800e964 <rmw_uxrce_init_wait_set_memory>
 80142a0:	4953      	ldr	r1, [pc, #332]	; (80143f0 <rmw_init+0x254>)
 80142a2:	4854      	ldr	r0, [pc, #336]	; (80143f4 <rmw_init+0x258>)
 80142a4:	2204      	movs	r2, #4
 80142a6:	f7fa fb7d 	bl	800e9a4 <rmw_uxrce_init_guard_condition_memory>
 80142aa:	4642      	mov	r2, r8
 80142ac:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80142ae:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80142b0:	f000 fb0a 	bl	80148c8 <rmw_uxrce_transport_init>
 80142b4:	4607      	mov	r7, r0
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d158      	bne.n	801436c <rmw_init+0x1d0>
 80142ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80142bc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80142c0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80142c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80142c6:	4628      	mov	r0, r5
 80142c8:	f7fb ffba 	bl	8010240 <uxr_init_session>
 80142cc:	4622      	mov	r2, r4
 80142ce:	494a      	ldr	r1, [pc, #296]	; (80143f8 <rmw_init+0x25c>)
 80142d0:	4628      	mov	r0, r5
 80142d2:	f7fb ffd9 	bl	8010288 <uxr_set_topic_callback>
 80142d6:	463a      	mov	r2, r7
 80142d8:	4948      	ldr	r1, [pc, #288]	; (80143fc <rmw_init+0x260>)
 80142da:	4628      	mov	r0, r5
 80142dc:	f7fb ffd0 	bl	8010280 <uxr_set_status_callback>
 80142e0:	463a      	mov	r2, r7
 80142e2:	4947      	ldr	r1, [pc, #284]	; (8014400 <rmw_init+0x264>)
 80142e4:	4628      	mov	r0, r5
 80142e6:	f7fb ffd3 	bl	8010290 <uxr_set_request_callback>
 80142ea:	463a      	mov	r2, r7
 80142ec:	4945      	ldr	r1, [pc, #276]	; (8014404 <rmw_init+0x268>)
 80142ee:	4628      	mov	r0, r5
 80142f0:	f7fb ffd2 	bl	8010298 <uxr_set_reply_callback>
 80142f4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80142f8:	2304      	movs	r3, #4
 80142fa:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80142fe:	0092      	lsls	r2, r2, #2
 8014300:	4628      	mov	r0, r5
 8014302:	f7fc f809 	bl	8010318 <uxr_create_input_reliable_stream>
 8014306:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801430a:	2304      	movs	r3, #4
 801430c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8014310:	0092      	lsls	r2, r2, #2
 8014312:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8014316:	4628      	mov	r0, r5
 8014318:	f7fb ffd4 	bl	80102c4 <uxr_create_output_reliable_stream>
 801431c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8014320:	4628      	mov	r0, r5
 8014322:	f7fb fff3 	bl	801030c <uxr_create_input_best_effort_stream>
 8014326:	f241 3194 	movw	r1, #5012	; 0x1394
 801432a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801432e:	4628      	mov	r0, r5
 8014330:	4421      	add	r1, r4
 8014332:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014336:	f7fb ffb3 	bl	80102a0 <uxr_create_output_best_effort_stream>
 801433a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801433e:	4628      	mov	r0, r5
 8014340:	f7fc fd02 	bl	8010d48 <uxr_create_session>
 8014344:	b1f8      	cbz	r0, 8014386 <rmw_init+0x1ea>
 8014346:	4638      	mov	r0, r7
 8014348:	b003      	add	sp, #12
 801434a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801434e:	270b      	movs	r7, #11
 8014350:	4638      	mov	r0, r7
 8014352:	b003      	add	sp, #12
 8014354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014358:	2701      	movs	r7, #1
 801435a:	4638      	mov	r0, r7
 801435c:	b003      	add	sp, #12
 801435e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014362:	270c      	movs	r7, #12
 8014364:	4638      	mov	r0, r7
 8014366:	b003      	add	sp, #12
 8014368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801436c:	4648      	mov	r0, r9
 801436e:	f000 fd61 	bl	8014e34 <uxr_close_custom_transport>
 8014372:	4621      	mov	r1, r4
 8014374:	480c      	ldr	r0, [pc, #48]	; (80143a8 <rmw_init+0x20c>)
 8014376:	f7ff fdf9 	bl	8013f6c <put_memory>
 801437a:	4638      	mov	r0, r7
 801437c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8014380:	b003      	add	sp, #12
 8014382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014386:	4648      	mov	r0, r9
 8014388:	f000 fd54 	bl	8014e34 <uxr_close_custom_transport>
 801438c:	4621      	mov	r1, r4
 801438e:	4806      	ldr	r0, [pc, #24]	; (80143a8 <rmw_init+0x20c>)
 8014390:	f7ff fdec 	bl	8013f6c <put_memory>
 8014394:	64f7      	str	r7, [r6, #76]	; 0x4c
 8014396:	2701      	movs	r7, #1
 8014398:	e7d5      	b.n	8014346 <rmw_init+0x1aa>
 801439a:	bf00      	nop
 801439c:	08018bac 	.word	0x08018bac
 80143a0:	2400e144 	.word	0x2400e144
 80143a4:	2400a3f0 	.word	0x2400a3f0
 80143a8:	2400e134 	.word	0x2400e134
 80143ac:	2400b998 	.word	0x2400b998
 80143b0:	24009a14 	.word	0x24009a14
 80143b4:	2400e104 	.word	0x2400e104
 80143b8:	2400da98 	.word	0x2400da98
 80143bc:	2400e154 	.word	0x2400e154
 80143c0:	24009ab8 	.word	0x24009ab8
 80143c4:	2400e114 	.word	0x2400e114
 80143c8:	2400a328 	.word	0x2400a328
 80143cc:	2400e124 	.word	0x2400e124
 80143d0:	24009848 	.word	0x24009848
 80143d4:	24009838 	.word	0x24009838
 80143d8:	2400ded0 	.word	0x2400ded0
 80143dc:	2400e164 	.word	0x2400e164
 80143e0:	24009990 	.word	0x24009990
 80143e4:	2400e0f4 	.word	0x2400e0f4
 80143e8:	2400e074 	.word	0x2400e074
 80143ec:	2400e174 	.word	0x2400e174
 80143f0:	24009910 	.word	0x24009910
 80143f4:	2400e0e4 	.word	0x2400e0e4
 80143f8:	08016a09 	.word	0x08016a09
 80143fc:	08016a01 	.word	0x08016a01
 8014400:	08016aa1 	.word	0x08016aa1
 8014404:	08016b3d 	.word	0x08016b3d

08014408 <rmw_context_fini>:
 8014408:	4b17      	ldr	r3, [pc, #92]	; (8014468 <rmw_context_fini+0x60>)
 801440a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801440c:	b570      	push	{r4, r5, r6, lr}
 801440e:	681c      	ldr	r4, [r3, #0]
 8014410:	4605      	mov	r5, r0
 8014412:	b334      	cbz	r4, 8014462 <rmw_context_fini+0x5a>
 8014414:	2600      	movs	r6, #0
 8014416:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801441a:	6902      	ldr	r2, [r0, #16]
 801441c:	428a      	cmp	r2, r1
 801441e:	d018      	beq.n	8014452 <rmw_context_fini+0x4a>
 8014420:	2c00      	cmp	r4, #0
 8014422:	d1f8      	bne.n	8014416 <rmw_context_fini+0xe>
 8014424:	b189      	cbz	r1, 801444a <rmw_context_fini+0x42>
 8014426:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801442a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801442e:	789b      	ldrb	r3, [r3, #2]
 8014430:	2b01      	cmp	r3, #1
 8014432:	bf14      	ite	ne
 8014434:	210a      	movne	r1, #10
 8014436:	2100      	moveq	r1, #0
 8014438:	f7fc fc5e 	bl	8010cf8 <uxr_delete_session_retries>
 801443c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801443e:	f7fa fad1 	bl	800e9e4 <rmw_uxrce_fini_session_memory>
 8014442:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8014444:	3010      	adds	r0, #16
 8014446:	f000 fcf5 	bl	8014e34 <uxr_close_custom_transport>
 801444a:	2300      	movs	r3, #0
 801444c:	4630      	mov	r0, r6
 801444e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8014450:	bd70      	pop	{r4, r5, r6, pc}
 8014452:	3018      	adds	r0, #24
 8014454:	f000 f90e 	bl	8014674 <rmw_destroy_node>
 8014458:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 801445a:	4606      	mov	r6, r0
 801445c:	2c00      	cmp	r4, #0
 801445e:	d1da      	bne.n	8014416 <rmw_context_fini+0xe>
 8014460:	e7e0      	b.n	8014424 <rmw_context_fini+0x1c>
 8014462:	4626      	mov	r6, r4
 8014464:	e7de      	b.n	8014424 <rmw_context_fini+0x1c>
 8014466:	bf00      	nop
 8014468:	2400e104 	.word	0x2400e104

0801446c <create_topic>:
 801446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014470:	4605      	mov	r5, r0
 8014472:	b084      	sub	sp, #16
 8014474:	4822      	ldr	r0, [pc, #136]	; (8014500 <create_topic+0x94>)
 8014476:	460f      	mov	r7, r1
 8014478:	4616      	mov	r6, r2
 801447a:	f7ff fd67 	bl	8013f4c <get_memory>
 801447e:	4604      	mov	r4, r0
 8014480:	2800      	cmp	r0, #0
 8014482:	d039      	beq.n	80144f8 <create_topic+0x8c>
 8014484:	692b      	ldr	r3, [r5, #16]
 8014486:	2102      	movs	r1, #2
 8014488:	6884      	ldr	r4, [r0, #8]
 801448a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801448e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8014508 <create_topic+0x9c>
 8014492:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8014496:	1c42      	adds	r2, r0, #1
 8014498:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801449c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80144a0:	f7fb fe10 	bl	80100c4 <uxr_object_id>
 80144a4:	223c      	movs	r2, #60	; 0x3c
 80144a6:	6120      	str	r0, [r4, #16]
 80144a8:	4641      	mov	r1, r8
 80144aa:	4638      	mov	r0, r7
 80144ac:	f7fa fbd8 	bl	800ec60 <generate_topic_name>
 80144b0:	b1f0      	cbz	r0, 80144f0 <create_topic+0x84>
 80144b2:	4f14      	ldr	r7, [pc, #80]	; (8014504 <create_topic+0x98>)
 80144b4:	4630      	mov	r0, r6
 80144b6:	2264      	movs	r2, #100	; 0x64
 80144b8:	4639      	mov	r1, r7
 80144ba:	f7fa fba3 	bl	800ec04 <generate_type_name>
 80144be:	b1b8      	cbz	r0, 80144f0 <create_topic+0x84>
 80144c0:	6928      	ldr	r0, [r5, #16]
 80144c2:	2106      	movs	r1, #6
 80144c4:	696b      	ldr	r3, [r5, #20]
 80144c6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80144ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80144ce:	f8cd 8000 	str.w	r8, [sp]
 80144d2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80144d6:	6811      	ldr	r1, [r2, #0]
 80144d8:	6922      	ldr	r2, [r4, #16]
 80144da:	f7fb fd17 	bl	800ff0c <uxr_buffer_create_topic_bin>
 80144de:	4602      	mov	r2, r0
 80144e0:	6928      	ldr	r0, [r5, #16]
 80144e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80144e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80144ea:	f7fa fb57 	bl	800eb9c <run_xrce_session>
 80144ee:	b918      	cbnz	r0, 80144f8 <create_topic+0x8c>
 80144f0:	4620      	mov	r0, r4
 80144f2:	2400      	movs	r4, #0
 80144f4:	f7fa faec 	bl	800ead0 <rmw_uxrce_fini_topic_memory>
 80144f8:	4620      	mov	r0, r4
 80144fa:	b004      	add	sp, #16
 80144fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014500:	2400e164 	.word	0x2400e164
 8014504:	2400e1e0 	.word	0x2400e1e0
 8014508:	2400e1a4 	.word	0x2400e1a4

0801450c <destroy_topic>:
 801450c:	b538      	push	{r3, r4, r5, lr}
 801450e:	6985      	ldr	r5, [r0, #24]
 8014510:	b1dd      	cbz	r5, 801454a <destroy_topic+0x3e>
 8014512:	4604      	mov	r4, r0
 8014514:	6928      	ldr	r0, [r5, #16]
 8014516:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801451a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801451e:	6922      	ldr	r2, [r4, #16]
 8014520:	6819      	ldr	r1, [r3, #0]
 8014522:	f7fb fc75 	bl	800fe10 <uxr_buffer_delete_entity>
 8014526:	4602      	mov	r2, r0
 8014528:	6928      	ldr	r0, [r5, #16]
 801452a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801452e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014532:	f7fa fb33 	bl	800eb9c <run_xrce_session>
 8014536:	4603      	mov	r3, r0
 8014538:	4620      	mov	r0, r4
 801453a:	2b00      	cmp	r3, #0
 801453c:	bf14      	ite	ne
 801453e:	2400      	movne	r4, #0
 8014540:	2402      	moveq	r4, #2
 8014542:	f7fa fac5 	bl	800ead0 <rmw_uxrce_fini_topic_memory>
 8014546:	4620      	mov	r0, r4
 8014548:	bd38      	pop	{r3, r4, r5, pc}
 801454a:	2401      	movs	r4, #1
 801454c:	4620      	mov	r0, r4
 801454e:	bd38      	pop	{r3, r4, r5, pc}

08014550 <create_node>:
 8014550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014554:	b083      	sub	sp, #12
 8014556:	2b00      	cmp	r3, #0
 8014558:	d064      	beq.n	8014624 <create_node+0xd4>
 801455a:	4606      	mov	r6, r0
 801455c:	4838      	ldr	r0, [pc, #224]	; (8014640 <create_node+0xf0>)
 801455e:	460f      	mov	r7, r1
 8014560:	4690      	mov	r8, r2
 8014562:	461d      	mov	r5, r3
 8014564:	f7ff fcf2 	bl	8013f4c <get_memory>
 8014568:	2800      	cmp	r0, #0
 801456a:	d05b      	beq.n	8014624 <create_node+0xd4>
 801456c:	6884      	ldr	r4, [r0, #8]
 801456e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014570:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8014574:	f104 0518 	add.w	r5, r4, #24
 8014578:	6123      	str	r3, [r4, #16]
 801457a:	f7ff fd0b 	bl	8013f94 <rmw_get_implementation_identifier>
 801457e:	f8c4 9020 	str.w	r9, [r4, #32]
 8014582:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014586:	4630      	mov	r0, r6
 8014588:	f7eb feb4 	bl	80002f4 <strlen>
 801458c:	1c42      	adds	r2, r0, #1
 801458e:	2a3c      	cmp	r2, #60	; 0x3c
 8014590:	d840      	bhi.n	8014614 <create_node+0xc4>
 8014592:	4648      	mov	r0, r9
 8014594:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8014598:	4631      	mov	r1, r6
 801459a:	f003 f816 	bl	80175ca <memcpy>
 801459e:	4638      	mov	r0, r7
 80145a0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80145a4:	f7eb fea6 	bl	80002f4 <strlen>
 80145a8:	1c42      	adds	r2, r0, #1
 80145aa:	2a3c      	cmp	r2, #60	; 0x3c
 80145ac:	d832      	bhi.n	8014614 <create_node+0xc4>
 80145ae:	4639      	mov	r1, r7
 80145b0:	4648      	mov	r0, r9
 80145b2:	f003 f80a 	bl	80175ca <memcpy>
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	2101      	movs	r1, #1
 80145ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145be:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 80145c2:	1842      	adds	r2, r0, r1
 80145c4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 80145c8:	f7fb fd7c 	bl	80100c4 <uxr_object_id>
 80145cc:	6160      	str	r0, [r4, #20]
 80145ce:	783b      	ldrb	r3, [r7, #0]
 80145d0:	2b2f      	cmp	r3, #47	; 0x2f
 80145d2:	d12c      	bne.n	801462e <create_node+0xde>
 80145d4:	787b      	ldrb	r3, [r7, #1]
 80145d6:	bb53      	cbnz	r3, 801462e <create_node+0xde>
 80145d8:	4633      	mov	r3, r6
 80145da:	4a1a      	ldr	r2, [pc, #104]	; (8014644 <create_node+0xf4>)
 80145dc:	213c      	movs	r1, #60	; 0x3c
 80145de:	481a      	ldr	r0, [pc, #104]	; (8014648 <create_node+0xf8>)
 80145e0:	f002 fe7a 	bl	80172d8 <sniprintf>
 80145e4:	6920      	ldr	r0, [r4, #16]
 80145e6:	2106      	movs	r1, #6
 80145e8:	fa1f f388 	uxth.w	r3, r8
 80145ec:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80145f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80145f4:	9101      	str	r1, [sp, #4]
 80145f6:	4914      	ldr	r1, [pc, #80]	; (8014648 <create_node+0xf8>)
 80145f8:	9100      	str	r1, [sp, #0]
 80145fa:	6811      	ldr	r1, [r2, #0]
 80145fc:	6962      	ldr	r2, [r4, #20]
 80145fe:	f7fb fc53 	bl	800fea8 <uxr_buffer_create_participant_bin>
 8014602:	4602      	mov	r2, r0
 8014604:	6920      	ldr	r0, [r4, #16]
 8014606:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801460a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801460e:	f7fa fac5 	bl	800eb9c <run_xrce_session>
 8014612:	b918      	cbnz	r0, 801461c <create_node+0xcc>
 8014614:	4628      	mov	r0, r5
 8014616:	2500      	movs	r5, #0
 8014618:	f7fa f9ea 	bl	800e9f0 <rmw_uxrce_fini_node_memory>
 801461c:	4628      	mov	r0, r5
 801461e:	b003      	add	sp, #12
 8014620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014624:	2500      	movs	r5, #0
 8014626:	4628      	mov	r0, r5
 8014628:	b003      	add	sp, #12
 801462a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801462e:	463b      	mov	r3, r7
 8014630:	4a06      	ldr	r2, [pc, #24]	; (801464c <create_node+0xfc>)
 8014632:	213c      	movs	r1, #60	; 0x3c
 8014634:	9600      	str	r6, [sp, #0]
 8014636:	4804      	ldr	r0, [pc, #16]	; (8014648 <create_node+0xf8>)
 8014638:	f002 fe4e 	bl	80172d8 <sniprintf>
 801463c:	e7d2      	b.n	80145e4 <create_node+0x94>
 801463e:	bf00      	nop
 8014640:	2400e104 	.word	0x2400e104
 8014644:	080185c4 	.word	0x080185c4
 8014648:	2400e244 	.word	0x2400e244
 801464c:	08018754 	.word	0x08018754

08014650 <rmw_create_node>:
 8014650:	468c      	mov	ip, r1
 8014652:	4611      	mov	r1, r2
 8014654:	f1bc 0f00 	cmp.w	ip, #0
 8014658:	d00a      	beq.n	8014670 <rmw_create_node+0x20>
 801465a:	f89c 3000 	ldrb.w	r3, [ip]
 801465e:	b13b      	cbz	r3, 8014670 <rmw_create_node+0x20>
 8014660:	b132      	cbz	r2, 8014670 <rmw_create_node+0x20>
 8014662:	7813      	ldrb	r3, [r2, #0]
 8014664:	b123      	cbz	r3, 8014670 <rmw_create_node+0x20>
 8014666:	4603      	mov	r3, r0
 8014668:	6c82      	ldr	r2, [r0, #72]	; 0x48
 801466a:	4660      	mov	r0, ip
 801466c:	f7ff bf70 	b.w	8014550 <create_node>
 8014670:	2000      	movs	r0, #0
 8014672:	4770      	bx	lr

08014674 <rmw_destroy_node>:
 8014674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014676:	b328      	cbz	r0, 80146c4 <rmw_destroy_node+0x50>
 8014678:	4607      	mov	r7, r0
 801467a:	6800      	ldr	r0, [r0, #0]
 801467c:	b120      	cbz	r0, 8014688 <rmw_destroy_node+0x14>
 801467e:	4b37      	ldr	r3, [pc, #220]	; (801475c <rmw_destroy_node+0xe8>)
 8014680:	6819      	ldr	r1, [r3, #0]
 8014682:	f7eb fe2d 	bl	80002e0 <strcmp>
 8014686:	b9e8      	cbnz	r0, 80146c4 <rmw_destroy_node+0x50>
 8014688:	687d      	ldr	r5, [r7, #4]
 801468a:	b1dd      	cbz	r5, 80146c4 <rmw_destroy_node+0x50>
 801468c:	4b34      	ldr	r3, [pc, #208]	; (8014760 <rmw_destroy_node+0xec>)
 801468e:	681c      	ldr	r4, [r3, #0]
 8014690:	2c00      	cmp	r4, #0
 8014692:	d060      	beq.n	8014756 <rmw_destroy_node+0xe2>
 8014694:	2600      	movs	r6, #0
 8014696:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801469a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801469e:	429d      	cmp	r5, r3
 80146a0:	d013      	beq.n	80146ca <rmw_destroy_node+0x56>
 80146a2:	2c00      	cmp	r4, #0
 80146a4:	d1f7      	bne.n	8014696 <rmw_destroy_node+0x22>
 80146a6:	4b2f      	ldr	r3, [pc, #188]	; (8014764 <rmw_destroy_node+0xf0>)
 80146a8:	681c      	ldr	r4, [r3, #0]
 80146aa:	b1c4      	cbz	r4, 80146de <rmw_destroy_node+0x6a>
 80146ac:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80146b0:	6a0b      	ldr	r3, [r1, #32]
 80146b2:	429d      	cmp	r5, r3
 80146b4:	d1f9      	bne.n	80146aa <rmw_destroy_node+0x36>
 80146b6:	317c      	adds	r1, #124	; 0x7c
 80146b8:	4638      	mov	r0, r7
 80146ba:	f000 f8a3 	bl	8014804 <rmw_destroy_subscription>
 80146be:	2801      	cmp	r0, #1
 80146c0:	4606      	mov	r6, r0
 80146c2:	d1f2      	bne.n	80146aa <rmw_destroy_node+0x36>
 80146c4:	2601      	movs	r6, #1
 80146c6:	4630      	mov	r0, r6
 80146c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146ca:	3184      	adds	r1, #132	; 0x84
 80146cc:	4638      	mov	r0, r7
 80146ce:	f7f9 ffd5 	bl	800e67c <rmw_destroy_publisher>
 80146d2:	2801      	cmp	r0, #1
 80146d4:	4606      	mov	r6, r0
 80146d6:	d0f5      	beq.n	80146c4 <rmw_destroy_node+0x50>
 80146d8:	2c00      	cmp	r4, #0
 80146da:	d1dc      	bne.n	8014696 <rmw_destroy_node+0x22>
 80146dc:	e7e3      	b.n	80146a6 <rmw_destroy_node+0x32>
 80146de:	4b22      	ldr	r3, [pc, #136]	; (8014768 <rmw_destroy_node+0xf4>)
 80146e0:	681c      	ldr	r4, [r3, #0]
 80146e2:	b16c      	cbz	r4, 8014700 <rmw_destroy_node+0x8c>
 80146e4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80146e8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80146ea:	429d      	cmp	r5, r3
 80146ec:	d1f9      	bne.n	80146e2 <rmw_destroy_node+0x6e>
 80146ee:	317c      	adds	r1, #124	; 0x7c
 80146f0:	4638      	mov	r0, r7
 80146f2:	f000 f843 	bl	801477c <rmw_destroy_service>
 80146f6:	2801      	cmp	r0, #1
 80146f8:	4606      	mov	r6, r0
 80146fa:	d0e3      	beq.n	80146c4 <rmw_destroy_node+0x50>
 80146fc:	2c00      	cmp	r4, #0
 80146fe:	d1f1      	bne.n	80146e4 <rmw_destroy_node+0x70>
 8014700:	4b1a      	ldr	r3, [pc, #104]	; (801476c <rmw_destroy_node+0xf8>)
 8014702:	681c      	ldr	r4, [r3, #0]
 8014704:	b16c      	cbz	r4, 8014722 <rmw_destroy_node+0xae>
 8014706:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801470a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801470c:	429d      	cmp	r5, r3
 801470e:	d1f9      	bne.n	8014704 <rmw_destroy_node+0x90>
 8014710:	317c      	adds	r1, #124	; 0x7c
 8014712:	4638      	mov	r0, r7
 8014714:	f002 fa5c 	bl	8016bd0 <rmw_destroy_client>
 8014718:	2801      	cmp	r0, #1
 801471a:	4606      	mov	r6, r0
 801471c:	d0d2      	beq.n	80146c4 <rmw_destroy_node+0x50>
 801471e:	2c00      	cmp	r4, #0
 8014720:	d1f1      	bne.n	8014706 <rmw_destroy_node+0x92>
 8014722:	6928      	ldr	r0, [r5, #16]
 8014724:	696a      	ldr	r2, [r5, #20]
 8014726:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801472a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801472e:	6819      	ldr	r1, [r3, #0]
 8014730:	f7fb fb6e 	bl	800fe10 <uxr_buffer_delete_entity>
 8014734:	4602      	mov	r2, r0
 8014736:	6928      	ldr	r0, [r5, #16]
 8014738:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801473c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014740:	f7fa fa2c 	bl	800eb9c <run_xrce_session>
 8014744:	4603      	mov	r3, r0
 8014746:	4638      	mov	r0, r7
 8014748:	2b00      	cmp	r3, #0
 801474a:	bf08      	it	eq
 801474c:	2602      	moveq	r6, #2
 801474e:	f7fa f94f 	bl	800e9f0 <rmw_uxrce_fini_node_memory>
 8014752:	4630      	mov	r0, r6
 8014754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014756:	4626      	mov	r6, r4
 8014758:	e7a5      	b.n	80146a6 <rmw_destroy_node+0x32>
 801475a:	bf00      	nop
 801475c:	08018bac 	.word	0x08018bac
 8014760:	2400e114 	.word	0x2400e114
 8014764:	2400e154 	.word	0x2400e154
 8014768:	2400e124 	.word	0x2400e124
 801476c:	24009838 	.word	0x24009838

08014770 <rmw_node_get_graph_guard_condition>:
 8014770:	6843      	ldr	r3, [r0, #4]
 8014772:	6918      	ldr	r0, [r3, #16]
 8014774:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop

0801477c <rmw_destroy_service>:
 801477c:	b570      	push	{r4, r5, r6, lr}
 801477e:	b128      	cbz	r0, 801478c <rmw_destroy_service+0x10>
 8014780:	4604      	mov	r4, r0
 8014782:	6800      	ldr	r0, [r0, #0]
 8014784:	460d      	mov	r5, r1
 8014786:	f7fa fa83 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 801478a:	b910      	cbnz	r0, 8014792 <rmw_destroy_service+0x16>
 801478c:	2401      	movs	r4, #1
 801478e:	4620      	mov	r0, r4
 8014790:	bd70      	pop	{r4, r5, r6, pc}
 8014792:	6863      	ldr	r3, [r4, #4]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d0f9      	beq.n	801478c <rmw_destroy_service+0x10>
 8014798:	2d00      	cmp	r5, #0
 801479a:	d0f7      	beq.n	801478c <rmw_destroy_service+0x10>
 801479c:	6828      	ldr	r0, [r5, #0]
 801479e:	f7fa fa77 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 80147a2:	2800      	cmp	r0, #0
 80147a4:	d0f2      	beq.n	801478c <rmw_destroy_service+0x10>
 80147a6:	686e      	ldr	r6, [r5, #4]
 80147a8:	2e00      	cmp	r6, #0
 80147aa:	d0ef      	beq.n	801478c <rmw_destroy_service+0x10>
 80147ac:	6864      	ldr	r4, [r4, #4]
 80147ae:	6932      	ldr	r2, [r6, #16]
 80147b0:	6920      	ldr	r0, [r4, #16]
 80147b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80147b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80147ba:	6819      	ldr	r1, [r3, #0]
 80147bc:	f001 f888 	bl	80158d0 <uxr_buffer_cancel_data>
 80147c0:	4602      	mov	r2, r0
 80147c2:	6920      	ldr	r0, [r4, #16]
 80147c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80147c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80147cc:	f7fa f9e6 	bl	800eb9c <run_xrce_session>
 80147d0:	6920      	ldr	r0, [r4, #16]
 80147d2:	6932      	ldr	r2, [r6, #16]
 80147d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80147d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80147dc:	6819      	ldr	r1, [r3, #0]
 80147de:	f7fb fb17 	bl	800fe10 <uxr_buffer_delete_entity>
 80147e2:	4602      	mov	r2, r0
 80147e4:	6920      	ldr	r0, [r4, #16]
 80147e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80147ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80147ee:	f7fa f9d5 	bl	800eb9c <run_xrce_session>
 80147f2:	4603      	mov	r3, r0
 80147f4:	4628      	mov	r0, r5
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	bf14      	ite	ne
 80147fa:	2400      	movne	r4, #0
 80147fc:	2402      	moveq	r4, #2
 80147fe:	f7fa f93b 	bl	800ea78 <rmw_uxrce_fini_service_memory>
 8014802:	e7c4      	b.n	801478e <rmw_destroy_service+0x12>

08014804 <rmw_destroy_subscription>:
 8014804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014808:	b128      	cbz	r0, 8014816 <rmw_destroy_subscription+0x12>
 801480a:	4604      	mov	r4, r0
 801480c:	6800      	ldr	r0, [r0, #0]
 801480e:	460d      	mov	r5, r1
 8014810:	f7fa fa3e 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 8014814:	b918      	cbnz	r0, 801481e <rmw_destroy_subscription+0x1a>
 8014816:	2401      	movs	r4, #1
 8014818:	4620      	mov	r0, r4
 801481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801481e:	6863      	ldr	r3, [r4, #4]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d0f8      	beq.n	8014816 <rmw_destroy_subscription+0x12>
 8014824:	fab5 f485 	clz	r4, r5
 8014828:	0964      	lsrs	r4, r4, #5
 801482a:	2d00      	cmp	r5, #0
 801482c:	d0f3      	beq.n	8014816 <rmw_destroy_subscription+0x12>
 801482e:	6828      	ldr	r0, [r5, #0]
 8014830:	f7fa fa2e 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 8014834:	2800      	cmp	r0, #0
 8014836:	d0ee      	beq.n	8014816 <rmw_destroy_subscription+0x12>
 8014838:	686e      	ldr	r6, [r5, #4]
 801483a:	2e00      	cmp	r6, #0
 801483c:	d0eb      	beq.n	8014816 <rmw_destroy_subscription+0x12>
 801483e:	6a37      	ldr	r7, [r6, #32]
 8014840:	6972      	ldr	r2, [r6, #20]
 8014842:	6938      	ldr	r0, [r7, #16]
 8014844:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014848:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801484c:	6819      	ldr	r1, [r3, #0]
 801484e:	f001 f83f 	bl	80158d0 <uxr_buffer_cancel_data>
 8014852:	4602      	mov	r2, r0
 8014854:	6938      	ldr	r0, [r7, #16]
 8014856:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801485a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801485e:	f7fa f99d 	bl	800eb9c <run_xrce_session>
 8014862:	69f0      	ldr	r0, [r6, #28]
 8014864:	f7ff fe52 	bl	801450c <destroy_topic>
 8014868:	6a33      	ldr	r3, [r6, #32]
 801486a:	6972      	ldr	r2, [r6, #20]
 801486c:	6918      	ldr	r0, [r3, #16]
 801486e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014872:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014876:	6819      	ldr	r1, [r3, #0]
 8014878:	f7fb faca 	bl	800fe10 <uxr_buffer_delete_entity>
 801487c:	6a33      	ldr	r3, [r6, #32]
 801487e:	4680      	mov	r8, r0
 8014880:	6932      	ldr	r2, [r6, #16]
 8014882:	6918      	ldr	r0, [r3, #16]
 8014884:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014888:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801488c:	6819      	ldr	r1, [r3, #0]
 801488e:	f7fb fabf 	bl	800fe10 <uxr_buffer_delete_entity>
 8014892:	4606      	mov	r6, r0
 8014894:	6938      	ldr	r0, [r7, #16]
 8014896:	4642      	mov	r2, r8
 8014898:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801489c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80148a0:	f7fa f97c 	bl	800eb9c <run_xrce_session>
 80148a4:	693f      	ldr	r7, [r7, #16]
 80148a6:	4632      	mov	r2, r6
 80148a8:	4606      	mov	r6, r0
 80148aa:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80148ae:	4638      	mov	r0, r7
 80148b0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80148b4:	f7fa f972 	bl	800eb9c <run_xrce_session>
 80148b8:	b126      	cbz	r6, 80148c4 <rmw_destroy_subscription+0xc0>
 80148ba:	b118      	cbz	r0, 80148c4 <rmw_destroy_subscription+0xc0>
 80148bc:	4628      	mov	r0, r5
 80148be:	f7fa f8c5 	bl	800ea4c <rmw_uxrce_fini_subscription_memory>
 80148c2:	e7a9      	b.n	8014818 <rmw_destroy_subscription+0x14>
 80148c4:	2402      	movs	r4, #2
 80148c6:	e7f9      	b.n	80148bc <rmw_destroy_subscription+0xb8>

080148c8 <rmw_uxrce_transport_init>:
 80148c8:	b508      	push	{r3, lr}
 80148ca:	b108      	cbz	r0, 80148d0 <rmw_uxrce_transport_init+0x8>
 80148cc:	f100 0210 	add.w	r2, r0, #16
 80148d0:	b139      	cbz	r1, 80148e2 <rmw_uxrce_transport_init+0x1a>
 80148d2:	6949      	ldr	r1, [r1, #20]
 80148d4:	4610      	mov	r0, r2
 80148d6:	f000 fa79 	bl	8014dcc <uxr_init_custom_transport>
 80148da:	f080 0001 	eor.w	r0, r0, #1
 80148de:	b2c0      	uxtb	r0, r0
 80148e0:	bd08      	pop	{r3, pc}
 80148e2:	4b04      	ldr	r3, [pc, #16]	; (80148f4 <rmw_uxrce_transport_init+0x2c>)
 80148e4:	4610      	mov	r0, r2
 80148e6:	6859      	ldr	r1, [r3, #4]
 80148e8:	f000 fa70 	bl	8014dcc <uxr_init_custom_transport>
 80148ec:	f080 0001 	eor.w	r0, r0, #1
 80148f0:	b2c0      	uxtb	r0, r0
 80148f2:	bd08      	pop	{r3, pc}
 80148f4:	2400981c 	.word	0x2400981c

080148f8 <rmw_uros_epoch_nanos>:
 80148f8:	4b05      	ldr	r3, [pc, #20]	; (8014910 <rmw_uros_epoch_nanos+0x18>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	b123      	cbz	r3, 8014908 <rmw_uros_epoch_nanos+0x10>
 80148fe:	6898      	ldr	r0, [r3, #8]
 8014900:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014904:	f7fb bd24 	b.w	8010350 <uxr_epoch_nanos>
 8014908:	2000      	movs	r0, #0
 801490a:	2100      	movs	r1, #0
 801490c:	4770      	bx	lr
 801490e:	bf00      	nop
 8014910:	2400e134 	.word	0x2400e134

08014914 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014918:	6805      	ldr	r5, [r0, #0]
 801491a:	4604      	mov	r4, r0
 801491c:	460e      	mov	r6, r1
 801491e:	4628      	mov	r0, r5
 8014920:	f7eb fcde 	bl	80002e0 <strcmp>
 8014924:	b1c8      	cbz	r0, 801495a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014926:	4b11      	ldr	r3, [pc, #68]	; (801496c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	429d      	cmp	r5, r3
 801492c:	d112      	bne.n	8014954 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801492e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014932:	f8d8 4000 	ldr.w	r4, [r8]
 8014936:	b16c      	cbz	r4, 8014954 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014938:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801493c:	2700      	movs	r7, #0
 801493e:	3d04      	subs	r5, #4
 8014940:	4631      	mov	r1, r6
 8014942:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014946:	f7eb fccb 	bl	80002e0 <strcmp>
 801494a:	00bb      	lsls	r3, r7, #2
 801494c:	b140      	cbz	r0, 8014960 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801494e:	3701      	adds	r7, #1
 8014950:	42bc      	cmp	r4, r7
 8014952:	d1f5      	bne.n	8014940 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014954:	2000      	movs	r0, #0
 8014956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801495a:	4620      	mov	r0, r4
 801495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014960:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014968:	58d3      	ldr	r3, [r2, r3]
 801496a:	4718      	bx	r3
 801496c:	240000b0 	.word	0x240000b0

08014970 <std_msgs__msg__Int32__init>:
 8014970:	3800      	subs	r0, #0
 8014972:	bf18      	it	ne
 8014974:	2001      	movne	r0, #1
 8014976:	4770      	bx	lr

08014978 <std_msgs__msg__Int32__fini>:
 8014978:	4770      	bx	lr
 801497a:	bf00      	nop

0801497c <ucdr_serialize_endian_array_char>:
 801497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014980:	4619      	mov	r1, r3
 8014982:	461f      	mov	r7, r3
 8014984:	4605      	mov	r5, r0
 8014986:	4690      	mov	r8, r2
 8014988:	f7fb f97a 	bl	800fc80 <ucdr_check_buffer_available_for>
 801498c:	b9e0      	cbnz	r0, 80149c8 <ucdr_serialize_endian_array_char+0x4c>
 801498e:	463e      	mov	r6, r7
 8014990:	e00b      	b.n	80149aa <ucdr_serialize_endian_array_char+0x2e>
 8014992:	4441      	add	r1, r8
 8014994:	68a8      	ldr	r0, [r5, #8]
 8014996:	4622      	mov	r2, r4
 8014998:	1b36      	subs	r6, r6, r4
 801499a:	f002 fe16 	bl	80175ca <memcpy>
 801499e:	68ab      	ldr	r3, [r5, #8]
 80149a0:	6928      	ldr	r0, [r5, #16]
 80149a2:	4423      	add	r3, r4
 80149a4:	4420      	add	r0, r4
 80149a6:	60ab      	str	r3, [r5, #8]
 80149a8:	6128      	str	r0, [r5, #16]
 80149aa:	4631      	mov	r1, r6
 80149ac:	2201      	movs	r2, #1
 80149ae:	4628      	mov	r0, r5
 80149b0:	f7fb f9f0 	bl	800fd94 <ucdr_check_final_buffer_behavior_array>
 80149b4:	1bb9      	subs	r1, r7, r6
 80149b6:	4604      	mov	r4, r0
 80149b8:	2800      	cmp	r0, #0
 80149ba:	d1ea      	bne.n	8014992 <ucdr_serialize_endian_array_char+0x16>
 80149bc:	2301      	movs	r3, #1
 80149be:	7da8      	ldrb	r0, [r5, #22]
 80149c0:	756b      	strb	r3, [r5, #21]
 80149c2:	4058      	eors	r0, r3
 80149c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149c8:	463a      	mov	r2, r7
 80149ca:	4641      	mov	r1, r8
 80149cc:	68a8      	ldr	r0, [r5, #8]
 80149ce:	f002 fdfc 	bl	80175ca <memcpy>
 80149d2:	68aa      	ldr	r2, [r5, #8]
 80149d4:	692b      	ldr	r3, [r5, #16]
 80149d6:	443a      	add	r2, r7
 80149d8:	443b      	add	r3, r7
 80149da:	60aa      	str	r2, [r5, #8]
 80149dc:	612b      	str	r3, [r5, #16]
 80149de:	e7ed      	b.n	80149bc <ucdr_serialize_endian_array_char+0x40>

080149e0 <ucdr_deserialize_endian_array_char>:
 80149e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149e4:	4619      	mov	r1, r3
 80149e6:	461f      	mov	r7, r3
 80149e8:	4605      	mov	r5, r0
 80149ea:	4690      	mov	r8, r2
 80149ec:	f7fb f948 	bl	800fc80 <ucdr_check_buffer_available_for>
 80149f0:	b9e8      	cbnz	r0, 8014a2e <ucdr_deserialize_endian_array_char+0x4e>
 80149f2:	463e      	mov	r6, r7
 80149f4:	e00c      	b.n	8014a10 <ucdr_deserialize_endian_array_char+0x30>
 80149f6:	eb08 0003 	add.w	r0, r8, r3
 80149fa:	68a9      	ldr	r1, [r5, #8]
 80149fc:	4622      	mov	r2, r4
 80149fe:	1b36      	subs	r6, r6, r4
 8014a00:	f002 fde3 	bl	80175ca <memcpy>
 8014a04:	68ab      	ldr	r3, [r5, #8]
 8014a06:	6928      	ldr	r0, [r5, #16]
 8014a08:	4423      	add	r3, r4
 8014a0a:	4420      	add	r0, r4
 8014a0c:	60ab      	str	r3, [r5, #8]
 8014a0e:	6128      	str	r0, [r5, #16]
 8014a10:	4631      	mov	r1, r6
 8014a12:	2201      	movs	r2, #1
 8014a14:	4628      	mov	r0, r5
 8014a16:	f7fb f9bd 	bl	800fd94 <ucdr_check_final_buffer_behavior_array>
 8014a1a:	1bbb      	subs	r3, r7, r6
 8014a1c:	4604      	mov	r4, r0
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	d1e9      	bne.n	80149f6 <ucdr_deserialize_endian_array_char+0x16>
 8014a22:	2301      	movs	r3, #1
 8014a24:	7da8      	ldrb	r0, [r5, #22]
 8014a26:	756b      	strb	r3, [r5, #21]
 8014a28:	4058      	eors	r0, r3
 8014a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a2e:	463a      	mov	r2, r7
 8014a30:	68a9      	ldr	r1, [r5, #8]
 8014a32:	4640      	mov	r0, r8
 8014a34:	f002 fdc9 	bl	80175ca <memcpy>
 8014a38:	68aa      	ldr	r2, [r5, #8]
 8014a3a:	692b      	ldr	r3, [r5, #16]
 8014a3c:	443a      	add	r2, r7
 8014a3e:	443b      	add	r3, r7
 8014a40:	60aa      	str	r2, [r5, #8]
 8014a42:	612b      	str	r3, [r5, #16]
 8014a44:	e7ed      	b.n	8014a22 <ucdr_deserialize_endian_array_char+0x42>
 8014a46:	bf00      	nop

08014a48 <ucdr_serialize_array_uint8_t>:
 8014a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4c:	4688      	mov	r8, r1
 8014a4e:	4611      	mov	r1, r2
 8014a50:	4617      	mov	r7, r2
 8014a52:	4605      	mov	r5, r0
 8014a54:	f7fb f914 	bl	800fc80 <ucdr_check_buffer_available_for>
 8014a58:	b9e0      	cbnz	r0, 8014a94 <ucdr_serialize_array_uint8_t+0x4c>
 8014a5a:	463e      	mov	r6, r7
 8014a5c:	e00b      	b.n	8014a76 <ucdr_serialize_array_uint8_t+0x2e>
 8014a5e:	4441      	add	r1, r8
 8014a60:	68a8      	ldr	r0, [r5, #8]
 8014a62:	4622      	mov	r2, r4
 8014a64:	1b36      	subs	r6, r6, r4
 8014a66:	f002 fdb0 	bl	80175ca <memcpy>
 8014a6a:	68ab      	ldr	r3, [r5, #8]
 8014a6c:	6928      	ldr	r0, [r5, #16]
 8014a6e:	4423      	add	r3, r4
 8014a70:	4420      	add	r0, r4
 8014a72:	60ab      	str	r3, [r5, #8]
 8014a74:	6128      	str	r0, [r5, #16]
 8014a76:	4631      	mov	r1, r6
 8014a78:	2201      	movs	r2, #1
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7fb f98a 	bl	800fd94 <ucdr_check_final_buffer_behavior_array>
 8014a80:	1bb9      	subs	r1, r7, r6
 8014a82:	4604      	mov	r4, r0
 8014a84:	2800      	cmp	r0, #0
 8014a86:	d1ea      	bne.n	8014a5e <ucdr_serialize_array_uint8_t+0x16>
 8014a88:	2301      	movs	r3, #1
 8014a8a:	7da8      	ldrb	r0, [r5, #22]
 8014a8c:	756b      	strb	r3, [r5, #21]
 8014a8e:	4058      	eors	r0, r3
 8014a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a94:	463a      	mov	r2, r7
 8014a96:	4641      	mov	r1, r8
 8014a98:	68a8      	ldr	r0, [r5, #8]
 8014a9a:	f002 fd96 	bl	80175ca <memcpy>
 8014a9e:	68aa      	ldr	r2, [r5, #8]
 8014aa0:	692b      	ldr	r3, [r5, #16]
 8014aa2:	443a      	add	r2, r7
 8014aa4:	443b      	add	r3, r7
 8014aa6:	60aa      	str	r2, [r5, #8]
 8014aa8:	612b      	str	r3, [r5, #16]
 8014aaa:	e7ed      	b.n	8014a88 <ucdr_serialize_array_uint8_t+0x40>

08014aac <ucdr_serialize_endian_array_uint8_t>:
 8014aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	461f      	mov	r7, r3
 8014ab4:	4605      	mov	r5, r0
 8014ab6:	4690      	mov	r8, r2
 8014ab8:	f7fb f8e2 	bl	800fc80 <ucdr_check_buffer_available_for>
 8014abc:	b9e0      	cbnz	r0, 8014af8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014abe:	463e      	mov	r6, r7
 8014ac0:	e00b      	b.n	8014ada <ucdr_serialize_endian_array_uint8_t+0x2e>
 8014ac2:	4441      	add	r1, r8
 8014ac4:	68a8      	ldr	r0, [r5, #8]
 8014ac6:	4622      	mov	r2, r4
 8014ac8:	1b36      	subs	r6, r6, r4
 8014aca:	f002 fd7e 	bl	80175ca <memcpy>
 8014ace:	68ab      	ldr	r3, [r5, #8]
 8014ad0:	6928      	ldr	r0, [r5, #16]
 8014ad2:	4423      	add	r3, r4
 8014ad4:	4420      	add	r0, r4
 8014ad6:	60ab      	str	r3, [r5, #8]
 8014ad8:	6128      	str	r0, [r5, #16]
 8014ada:	4631      	mov	r1, r6
 8014adc:	2201      	movs	r2, #1
 8014ade:	4628      	mov	r0, r5
 8014ae0:	f7fb f958 	bl	800fd94 <ucdr_check_final_buffer_behavior_array>
 8014ae4:	1bb9      	subs	r1, r7, r6
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d1ea      	bne.n	8014ac2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8014aec:	2301      	movs	r3, #1
 8014aee:	7da8      	ldrb	r0, [r5, #22]
 8014af0:	756b      	strb	r3, [r5, #21]
 8014af2:	4058      	eors	r0, r3
 8014af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014af8:	463a      	mov	r2, r7
 8014afa:	4641      	mov	r1, r8
 8014afc:	68a8      	ldr	r0, [r5, #8]
 8014afe:	f002 fd64 	bl	80175ca <memcpy>
 8014b02:	68aa      	ldr	r2, [r5, #8]
 8014b04:	692b      	ldr	r3, [r5, #16]
 8014b06:	443a      	add	r2, r7
 8014b08:	443b      	add	r3, r7
 8014b0a:	60aa      	str	r2, [r5, #8]
 8014b0c:	612b      	str	r3, [r5, #16]
 8014b0e:	e7ed      	b.n	8014aec <ucdr_serialize_endian_array_uint8_t+0x40>

08014b10 <ucdr_deserialize_array_uint8_t>:
 8014b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b14:	4688      	mov	r8, r1
 8014b16:	4611      	mov	r1, r2
 8014b18:	4617      	mov	r7, r2
 8014b1a:	4605      	mov	r5, r0
 8014b1c:	f7fb f8b0 	bl	800fc80 <ucdr_check_buffer_available_for>
 8014b20:	b9e8      	cbnz	r0, 8014b5e <ucdr_deserialize_array_uint8_t+0x4e>
 8014b22:	463e      	mov	r6, r7
 8014b24:	e00c      	b.n	8014b40 <ucdr_deserialize_array_uint8_t+0x30>
 8014b26:	eb08 0003 	add.w	r0, r8, r3
 8014b2a:	68a9      	ldr	r1, [r5, #8]
 8014b2c:	4622      	mov	r2, r4
 8014b2e:	1b36      	subs	r6, r6, r4
 8014b30:	f002 fd4b 	bl	80175ca <memcpy>
 8014b34:	68ab      	ldr	r3, [r5, #8]
 8014b36:	6928      	ldr	r0, [r5, #16]
 8014b38:	4423      	add	r3, r4
 8014b3a:	4420      	add	r0, r4
 8014b3c:	60ab      	str	r3, [r5, #8]
 8014b3e:	6128      	str	r0, [r5, #16]
 8014b40:	4631      	mov	r1, r6
 8014b42:	2201      	movs	r2, #1
 8014b44:	4628      	mov	r0, r5
 8014b46:	f7fb f925 	bl	800fd94 <ucdr_check_final_buffer_behavior_array>
 8014b4a:	1bbb      	subs	r3, r7, r6
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d1e9      	bne.n	8014b26 <ucdr_deserialize_array_uint8_t+0x16>
 8014b52:	2301      	movs	r3, #1
 8014b54:	7da8      	ldrb	r0, [r5, #22]
 8014b56:	756b      	strb	r3, [r5, #21]
 8014b58:	4058      	eors	r0, r3
 8014b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b5e:	463a      	mov	r2, r7
 8014b60:	68a9      	ldr	r1, [r5, #8]
 8014b62:	4640      	mov	r0, r8
 8014b64:	f002 fd31 	bl	80175ca <memcpy>
 8014b68:	68aa      	ldr	r2, [r5, #8]
 8014b6a:	692b      	ldr	r3, [r5, #16]
 8014b6c:	443a      	add	r2, r7
 8014b6e:	443b      	add	r3, r7
 8014b70:	60aa      	str	r2, [r5, #8]
 8014b72:	612b      	str	r3, [r5, #16]
 8014b74:	e7ed      	b.n	8014b52 <ucdr_deserialize_array_uint8_t+0x42>
 8014b76:	bf00      	nop

08014b78 <ucdr_deserialize_endian_array_uint8_t>:
 8014b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	461f      	mov	r7, r3
 8014b80:	4605      	mov	r5, r0
 8014b82:	4690      	mov	r8, r2
 8014b84:	f7fb f87c 	bl	800fc80 <ucdr_check_buffer_available_for>
 8014b88:	b9e8      	cbnz	r0, 8014bc6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8014b8a:	463e      	mov	r6, r7
 8014b8c:	e00c      	b.n	8014ba8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8014b8e:	eb08 0003 	add.w	r0, r8, r3
 8014b92:	68a9      	ldr	r1, [r5, #8]
 8014b94:	4622      	mov	r2, r4
 8014b96:	1b36      	subs	r6, r6, r4
 8014b98:	f002 fd17 	bl	80175ca <memcpy>
 8014b9c:	68ab      	ldr	r3, [r5, #8]
 8014b9e:	6928      	ldr	r0, [r5, #16]
 8014ba0:	4423      	add	r3, r4
 8014ba2:	4420      	add	r0, r4
 8014ba4:	60ab      	str	r3, [r5, #8]
 8014ba6:	6128      	str	r0, [r5, #16]
 8014ba8:	4631      	mov	r1, r6
 8014baa:	2201      	movs	r2, #1
 8014bac:	4628      	mov	r0, r5
 8014bae:	f7fb f8f1 	bl	800fd94 <ucdr_check_final_buffer_behavior_array>
 8014bb2:	1bbb      	subs	r3, r7, r6
 8014bb4:	4604      	mov	r4, r0
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d1e9      	bne.n	8014b8e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	7da8      	ldrb	r0, [r5, #22]
 8014bbe:	756b      	strb	r3, [r5, #21]
 8014bc0:	4058      	eors	r0, r3
 8014bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc6:	463a      	mov	r2, r7
 8014bc8:	68a9      	ldr	r1, [r5, #8]
 8014bca:	4640      	mov	r0, r8
 8014bcc:	f002 fcfd 	bl	80175ca <memcpy>
 8014bd0:	68aa      	ldr	r2, [r5, #8]
 8014bd2:	692b      	ldr	r3, [r5, #16]
 8014bd4:	443a      	add	r2, r7
 8014bd6:	443b      	add	r3, r7
 8014bd8:	60aa      	str	r2, [r5, #8]
 8014bda:	612b      	str	r3, [r5, #16]
 8014bdc:	e7ed      	b.n	8014bba <ucdr_deserialize_endian_array_uint8_t+0x42>
 8014bde:	bf00      	nop

08014be0 <ucdr_serialize_sequence_char>:
 8014be0:	b570      	push	{r4, r5, r6, lr}
 8014be2:	4615      	mov	r5, r2
 8014be4:	460e      	mov	r6, r1
 8014be6:	7d01      	ldrb	r1, [r0, #20]
 8014be8:	4604      	mov	r4, r0
 8014bea:	f7fa fb9f 	bl	800f32c <ucdr_serialize_endian_uint32_t>
 8014bee:	b90d      	cbnz	r5, 8014bf4 <ucdr_serialize_sequence_char+0x14>
 8014bf0:	2001      	movs	r0, #1
 8014bf2:	bd70      	pop	{r4, r5, r6, pc}
 8014bf4:	462b      	mov	r3, r5
 8014bf6:	4632      	mov	r2, r6
 8014bf8:	7d21      	ldrb	r1, [r4, #20]
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c00:	f7ff bebc 	b.w	801497c <ucdr_serialize_endian_array_char>

08014c04 <ucdr_deserialize_sequence_char>:
 8014c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c08:	461d      	mov	r5, r3
 8014c0a:	4616      	mov	r6, r2
 8014c0c:	460f      	mov	r7, r1
 8014c0e:	461a      	mov	r2, r3
 8014c10:	7d01      	ldrb	r1, [r0, #20]
 8014c12:	4604      	mov	r4, r0
 8014c14:	f7fa fcb2 	bl	800f57c <ucdr_deserialize_endian_uint32_t>
 8014c18:	682b      	ldr	r3, [r5, #0]
 8014c1a:	429e      	cmp	r6, r3
 8014c1c:	d201      	bcs.n	8014c22 <ucdr_deserialize_sequence_char+0x1e>
 8014c1e:	2201      	movs	r2, #1
 8014c20:	75a2      	strb	r2, [r4, #22]
 8014c22:	b913      	cbnz	r3, 8014c2a <ucdr_deserialize_sequence_char+0x26>
 8014c24:	2001      	movs	r0, #1
 8014c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c2a:	463a      	mov	r2, r7
 8014c2c:	7d21      	ldrb	r1, [r4, #20]
 8014c2e:	4620      	mov	r0, r4
 8014c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c34:	f7ff bed4 	b.w	80149e0 <ucdr_deserialize_endian_array_char>

08014c38 <ucdr_serialize_sequence_uint8_t>:
 8014c38:	b570      	push	{r4, r5, r6, lr}
 8014c3a:	4615      	mov	r5, r2
 8014c3c:	460e      	mov	r6, r1
 8014c3e:	7d01      	ldrb	r1, [r0, #20]
 8014c40:	4604      	mov	r4, r0
 8014c42:	f7fa fb73 	bl	800f32c <ucdr_serialize_endian_uint32_t>
 8014c46:	b90d      	cbnz	r5, 8014c4c <ucdr_serialize_sequence_uint8_t+0x14>
 8014c48:	2001      	movs	r0, #1
 8014c4a:	bd70      	pop	{r4, r5, r6, pc}
 8014c4c:	462b      	mov	r3, r5
 8014c4e:	4632      	mov	r2, r6
 8014c50:	7d21      	ldrb	r1, [r4, #20]
 8014c52:	4620      	mov	r0, r4
 8014c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c58:	f7ff bf28 	b.w	8014aac <ucdr_serialize_endian_array_uint8_t>

08014c5c <ucdr_deserialize_sequence_uint8_t>:
 8014c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c60:	461d      	mov	r5, r3
 8014c62:	4616      	mov	r6, r2
 8014c64:	460f      	mov	r7, r1
 8014c66:	461a      	mov	r2, r3
 8014c68:	7d01      	ldrb	r1, [r0, #20]
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	f7fa fc86 	bl	800f57c <ucdr_deserialize_endian_uint32_t>
 8014c70:	682b      	ldr	r3, [r5, #0]
 8014c72:	429e      	cmp	r6, r3
 8014c74:	d201      	bcs.n	8014c7a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8014c76:	2201      	movs	r2, #1
 8014c78:	75a2      	strb	r2, [r4, #22]
 8014c7a:	b913      	cbnz	r3, 8014c82 <ucdr_deserialize_sequence_uint8_t+0x26>
 8014c7c:	2001      	movs	r0, #1
 8014c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c82:	463a      	mov	r2, r7
 8014c84:	7d21      	ldrb	r1, [r4, #20]
 8014c86:	4620      	mov	r0, r4
 8014c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c8c:	f7ff bf74 	b.w	8014b78 <ucdr_deserialize_endian_array_uint8_t>

08014c90 <ucdr_serialize_string>:
 8014c90:	b510      	push	{r4, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	4604      	mov	r4, r0
 8014c96:	4608      	mov	r0, r1
 8014c98:	9101      	str	r1, [sp, #4]
 8014c9a:	f7eb fb2b 	bl	80002f4 <strlen>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	9901      	ldr	r1, [sp, #4]
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	3201      	adds	r2, #1
 8014ca6:	b002      	add	sp, #8
 8014ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cac:	f7ff bf98 	b.w	8014be0 <ucdr_serialize_sequence_char>

08014cb0 <ucdr_deserialize_string>:
 8014cb0:	b500      	push	{lr}
 8014cb2:	b083      	sub	sp, #12
 8014cb4:	ab01      	add	r3, sp, #4
 8014cb6:	f7ff ffa5 	bl	8014c04 <ucdr_deserialize_sequence_char>
 8014cba:	b003      	add	sp, #12
 8014cbc:	f85d fb04 	ldr.w	pc, [sp], #4

08014cc0 <get_custom_error>:
 8014cc0:	4b01      	ldr	r3, [pc, #4]	; (8014cc8 <get_custom_error+0x8>)
 8014cc2:	7818      	ldrb	r0, [r3, #0]
 8014cc4:	4770      	bx	lr
 8014cc6:	bf00      	nop
 8014cc8:	2400e280 	.word	0x2400e280

08014ccc <recv_custom_msg>:
 8014ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd0:	4693      	mov	fp, r2
 8014cd2:	b089      	sub	sp, #36	; 0x24
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	468a      	mov	sl, r1
 8014cda:	9305      	str	r3, [sp, #20]
 8014cdc:	f88d 201e 	strb.w	r2, [sp, #30]
 8014ce0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8014ce4:	b322      	cbz	r2, 8014d30 <recv_custom_msg+0x64>
 8014ce6:	f200 2902 	addw	r9, r0, #514	; 0x202
 8014cea:	f10d 081f 	add.w	r8, sp, #31
 8014cee:	af05      	add	r7, sp, #20
 8014cf0:	f10d 061e 	add.w	r6, sp, #30
 8014cf4:	f44f 7500 	mov.w	r5, #512	; 0x200
 8014cf8:	e002      	b.n	8014d00 <recv_custom_msg+0x34>
 8014cfa:	9b05      	ldr	r3, [sp, #20]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	dd0f      	ble.n	8014d20 <recv_custom_msg+0x54>
 8014d00:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8014d04:	4623      	mov	r3, r4
 8014d06:	4622      	mov	r2, r4
 8014d08:	4648      	mov	r0, r9
 8014d0a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014d0e:	e9cd 5600 	strd	r5, r6, [sp]
 8014d12:	f001 f8d7 	bl	8015ec4 <uxr_read_framed_msg>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	d0ef      	beq.n	8014cfa <recv_custom_msg+0x2e>
 8014d1a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014d1e:	b1b3      	cbz	r3, 8014d4e <recv_custom_msg+0x82>
 8014d20:	4b0f      	ldr	r3, [pc, #60]	; (8014d60 <recv_custom_msg+0x94>)
 8014d22:	2000      	movs	r0, #0
 8014d24:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014d28:	701a      	strb	r2, [r3, #0]
 8014d2a:	b009      	add	sp, #36	; 0x24
 8014d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d30:	f10d 021f 	add.w	r2, sp, #31
 8014d34:	4601      	mov	r1, r0
 8014d36:	9200      	str	r2, [sp, #0]
 8014d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d3c:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8014d40:	47a8      	blx	r5
 8014d42:	2800      	cmp	r0, #0
 8014d44:	d0ec      	beq.n	8014d20 <recv_custom_msg+0x54>
 8014d46:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d1e8      	bne.n	8014d20 <recv_custom_msg+0x54>
 8014d4e:	f8cb 0000 	str.w	r0, [fp]
 8014d52:	2001      	movs	r0, #1
 8014d54:	f8ca 4000 	str.w	r4, [sl]
 8014d58:	b009      	add	sp, #36	; 0x24
 8014d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5e:	bf00      	nop
 8014d60:	2400e280 	.word	0x2400e280

08014d64 <send_custom_msg>:
 8014d64:	b530      	push	{r4, r5, lr}
 8014d66:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8014d6a:	b087      	sub	sp, #28
 8014d6c:	4614      	mov	r4, r2
 8014d6e:	b995      	cbnz	r5, 8014d96 <send_custom_msg+0x32>
 8014d70:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8014d74:	f10d 0317 	add.w	r3, sp, #23
 8014d78:	47a8      	blx	r5
 8014d7a:	1e03      	subs	r3, r0, #0
 8014d7c:	bf18      	it	ne
 8014d7e:	2301      	movne	r3, #1
 8014d80:	42a0      	cmp	r0, r4
 8014d82:	bf18      	it	ne
 8014d84:	2300      	movne	r3, #0
 8014d86:	b91b      	cbnz	r3, 8014d90 <send_custom_msg+0x2c>
 8014d88:	4a0a      	ldr	r2, [pc, #40]	; (8014db4 <send_custom_msg+0x50>)
 8014d8a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8014d8e:	7011      	strb	r1, [r2, #0]
 8014d90:	4618      	mov	r0, r3
 8014d92:	b007      	add	sp, #28
 8014d94:	bd30      	pop	{r4, r5, pc}
 8014d96:	460b      	mov	r3, r1
 8014d98:	2200      	movs	r2, #0
 8014d9a:	f10d 0117 	add.w	r1, sp, #23
 8014d9e:	9400      	str	r4, [sp, #0]
 8014da0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014da4:	4602      	mov	r2, r0
 8014da6:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8014daa:	f200 2002 	addw	r0, r0, #514	; 0x202
 8014dae:	f000 feab 	bl	8015b08 <uxr_write_framed_msg>
 8014db2:	e7e2      	b.n	8014d7a <send_custom_msg+0x16>
 8014db4:	2400e280 	.word	0x2400e280

08014db8 <uxr_set_custom_transport_callbacks>:
 8014db8:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8014dbc:	9901      	ldr	r1, [sp, #4]
 8014dbe:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8014dc2:	9b00      	ldr	r3, [sp, #0]
 8014dc4:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop

08014dcc <uxr_init_custom_transport>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014dd2:	b303      	cbz	r3, 8014e16 <uxr_init_custom_transport+0x4a>
 8014dd4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8014dd8:	4604      	mov	r4, r0
 8014dda:	b1e2      	cbz	r2, 8014e16 <uxr_init_custom_transport+0x4a>
 8014ddc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8014de0:	b1ca      	cbz	r2, 8014e16 <uxr_init_custom_transport+0x4a>
 8014de2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8014de6:	b1b2      	cbz	r2, 8014e16 <uxr_init_custom_transport+0x4a>
 8014de8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8014dec:	4798      	blx	r3
 8014dee:	4605      	mov	r5, r0
 8014df0:	b188      	cbz	r0, 8014e16 <uxr_init_custom_transport+0x4a>
 8014df2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8014df6:	b98b      	cbnz	r3, 8014e1c <uxr_init_custom_transport+0x50>
 8014df8:	4b0b      	ldr	r3, [pc, #44]	; (8014e28 <uxr_init_custom_transport+0x5c>)
 8014dfa:	4628      	mov	r0, r5
 8014dfc:	490b      	ldr	r1, [pc, #44]	; (8014e2c <uxr_init_custom_transport+0x60>)
 8014dfe:	4a0c      	ldr	r2, [pc, #48]	; (8014e30 <uxr_init_custom_transport+0x64>)
 8014e00:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8014e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e08:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8014e0c:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8014e10:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8014e14:	bd38      	pop	{r3, r4, r5, pc}
 8014e16:	2500      	movs	r5, #0
 8014e18:	4628      	mov	r0, r5
 8014e1a:	bd38      	pop	{r3, r4, r5, pc}
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8014e22:	f000 fe6b 	bl	8015afc <uxr_init_framing_io>
 8014e26:	e7e7      	b.n	8014df8 <uxr_init_custom_transport+0x2c>
 8014e28:	08014ccd 	.word	0x08014ccd
 8014e2c:	08014d65 	.word	0x08014d65
 8014e30:	08014cc1 	.word	0x08014cc1

08014e34 <uxr_close_custom_transport>:
 8014e34:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8014e38:	4718      	bx	r3
 8014e3a:	bf00      	nop

08014e3c <uxr_init_input_best_effort_stream>:
 8014e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e40:	8003      	strh	r3, [r0, #0]
 8014e42:	4770      	bx	lr

08014e44 <uxr_reset_input_best_effort_stream>:
 8014e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e48:	8003      	strh	r3, [r0, #0]
 8014e4a:	4770      	bx	lr

08014e4c <uxr_receive_best_effort_message>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	4604      	mov	r4, r0
 8014e50:	8800      	ldrh	r0, [r0, #0]
 8014e52:	460d      	mov	r5, r1
 8014e54:	f000 fe3a 	bl	8015acc <uxr_seq_num_cmp>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	0fc0      	lsrs	r0, r0, #31
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	bfb8      	it	lt
 8014e60:	8025      	strhlt	r5, [r4, #0]
 8014e62:	bd38      	pop	{r3, r4, r5, pc}

08014e64 <on_full_input_buffer>:
 8014e64:	b570      	push	{r4, r5, r6, lr}
 8014e66:	460c      	mov	r4, r1
 8014e68:	4605      	mov	r5, r0
 8014e6a:	8908      	ldrh	r0, [r1, #8]
 8014e6c:	682b      	ldr	r3, [r5, #0]
 8014e6e:	7d26      	ldrb	r6, [r4, #20]
 8014e70:	e9d1 1200 	ldrd	r1, r2, [r1]
 8014e74:	fbb2 f2f0 	udiv	r2, r2, r0
 8014e78:	eba3 0c01 	sub.w	ip, r3, r1
 8014e7c:	fbbc fcf2 	udiv	ip, ip, r2
 8014e80:	f10c 0c01 	add.w	ip, ip, #1
 8014e84:	fa1f f38c 	uxth.w	r3, ip
 8014e88:	fbb3 fcf0 	udiv	ip, r3, r0
 8014e8c:	fb00 331c 	mls	r3, r0, ip, r3
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	fb02 f303 	mul.w	r3, r2, r3
 8014e96:	1d18      	adds	r0, r3, #4
 8014e98:	4408      	add	r0, r1
 8014e9a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014e9e:	b116      	cbz	r6, 8014ea6 <on_full_input_buffer+0x42>
 8014ea0:	2600      	movs	r6, #0
 8014ea2:	f840 6c04 	str.w	r6, [r0, #-4]
 8014ea6:	2a03      	cmp	r2, #3
 8014ea8:	d801      	bhi.n	8014eae <on_full_input_buffer+0x4a>
 8014eaa:	2001      	movs	r0, #1
 8014eac:	bd70      	pop	{r4, r5, r6, pc}
 8014eae:	3308      	adds	r3, #8
 8014eb0:	4628      	mov	r0, r5
 8014eb2:	3a04      	subs	r2, #4
 8014eb4:	4419      	add	r1, r3
 8014eb6:	692b      	ldr	r3, [r5, #16]
 8014eb8:	f7fa ff2e 	bl	800fd18 <ucdr_init_buffer_origin>
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	4622      	mov	r2, r4
 8014ec0:	4902      	ldr	r1, [pc, #8]	; (8014ecc <on_full_input_buffer+0x68>)
 8014ec2:	f7fa ff05 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	bd70      	pop	{r4, r5, r6, pc}
 8014eca:	bf00      	nop
 8014ecc:	08014e65 	.word	0x08014e65

08014ed0 <uxr_init_input_reliable_stream>:
 8014ed0:	b510      	push	{r4, lr}
 8014ed2:	e9c0 1200 	strd	r1, r2, [r0]
 8014ed6:	2400      	movs	r4, #0
 8014ed8:	9a02      	ldr	r2, [sp, #8]
 8014eda:	8103      	strh	r3, [r0, #8]
 8014edc:	6102      	str	r2, [r0, #16]
 8014ede:	7504      	strb	r4, [r0, #20]
 8014ee0:	b1c3      	cbz	r3, 8014f14 <uxr_init_input_reliable_stream+0x44>
 8014ee2:	600c      	str	r4, [r1, #0]
 8014ee4:	8901      	ldrh	r1, [r0, #8]
 8014ee6:	2901      	cmp	r1, #1
 8014ee8:	d914      	bls.n	8014f14 <uxr_init_input_reliable_stream+0x44>
 8014eea:	f04f 0c01 	mov.w	ip, #1
 8014eee:	6843      	ldr	r3, [r0, #4]
 8014ef0:	f10c 0e01 	add.w	lr, ip, #1
 8014ef4:	fbbc f2f1 	udiv	r2, ip, r1
 8014ef8:	fbb3 f3f1 	udiv	r3, r3, r1
 8014efc:	fb01 c212 	mls	r2, r1, r2, ip
 8014f00:	fa1f fc8e 	uxth.w	ip, lr
 8014f04:	b292      	uxth	r2, r2
 8014f06:	fb02 f303 	mul.w	r3, r2, r3
 8014f0a:	6802      	ldr	r2, [r0, #0]
 8014f0c:	50d4      	str	r4, [r2, r3]
 8014f0e:	8901      	ldrh	r1, [r0, #8]
 8014f10:	4561      	cmp	r1, ip
 8014f12:	d8ec      	bhi.n	8014eee <uxr_init_input_reliable_stream+0x1e>
 8014f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f18:	60c3      	str	r3, [r0, #12]
 8014f1a:	bd10      	pop	{r4, pc}

08014f1c <uxr_reset_input_reliable_stream>:
 8014f1c:	8901      	ldrh	r1, [r0, #8]
 8014f1e:	b1d9      	cbz	r1, 8014f58 <uxr_reset_input_reliable_stream+0x3c>
 8014f20:	b510      	push	{r4, lr}
 8014f22:	f04f 0e00 	mov.w	lr, #0
 8014f26:	46f4      	mov	ip, lr
 8014f28:	4674      	mov	r4, lr
 8014f2a:	6843      	ldr	r3, [r0, #4]
 8014f2c:	f10e 0e01 	add.w	lr, lr, #1
 8014f30:	fbbc f2f1 	udiv	r2, ip, r1
 8014f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f38:	fb01 c212 	mls	r2, r1, r2, ip
 8014f3c:	fa1f fc8e 	uxth.w	ip, lr
 8014f40:	b292      	uxth	r2, r2
 8014f42:	fb02 f303 	mul.w	r3, r2, r3
 8014f46:	6802      	ldr	r2, [r0, #0]
 8014f48:	50d4      	str	r4, [r2, r3]
 8014f4a:	8901      	ldrh	r1, [r0, #8]
 8014f4c:	4561      	cmp	r1, ip
 8014f4e:	d8ec      	bhi.n	8014f2a <uxr_reset_input_reliable_stream+0xe>
 8014f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f54:	60c3      	str	r3, [r0, #12]
 8014f56:	bd10      	pop	{r4, pc}
 8014f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f5c:	60c3      	str	r3, [r0, #12]
 8014f5e:	4770      	bx	lr

08014f60 <uxr_receive_reliable_message>:
 8014f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f64:	4604      	mov	r4, r0
 8014f66:	460d      	mov	r5, r1
 8014f68:	8901      	ldrh	r1, [r0, #8]
 8014f6a:	4617      	mov	r7, r2
 8014f6c:	8980      	ldrh	r0, [r0, #12]
 8014f6e:	4698      	mov	r8, r3
 8014f70:	f000 fda4 	bl	8015abc <uxr_seq_num_add>
 8014f74:	4629      	mov	r1, r5
 8014f76:	4606      	mov	r6, r0
 8014f78:	89a0      	ldrh	r0, [r4, #12]
 8014f7a:	f000 fda7 	bl	8015acc <uxr_seq_num_cmp>
 8014f7e:	2800      	cmp	r0, #0
 8014f80:	db0a      	blt.n	8014f98 <uxr_receive_reliable_message+0x38>
 8014f82:	2600      	movs	r6, #0
 8014f84:	4629      	mov	r1, r5
 8014f86:	89e0      	ldrh	r0, [r4, #14]
 8014f88:	f000 fda0 	bl	8015acc <uxr_seq_num_cmp>
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	da00      	bge.n	8014f92 <uxr_receive_reliable_message+0x32>
 8014f90:	81e5      	strh	r5, [r4, #14]
 8014f92:	4630      	mov	r0, r6
 8014f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f98:	4630      	mov	r0, r6
 8014f9a:	4629      	mov	r1, r5
 8014f9c:	f000 fd96 	bl	8015acc <uxr_seq_num_cmp>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	dbee      	blt.n	8014f82 <uxr_receive_reliable_message+0x22>
 8014fa4:	6923      	ldr	r3, [r4, #16]
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	4798      	blx	r3
 8014faa:	4681      	mov	r9, r0
 8014fac:	2101      	movs	r1, #1
 8014fae:	89a0      	ldrh	r0, [r4, #12]
 8014fb0:	f000 fd84 	bl	8015abc <uxr_seq_num_add>
 8014fb4:	f1b9 0f00 	cmp.w	r9, #0
 8014fb8:	bf08      	it	eq
 8014fba:	4285      	cmpeq	r5, r0
 8014fbc:	bf0c      	ite	eq
 8014fbe:	2601      	moveq	r6, #1
 8014fc0:	2600      	movne	r6, #0
 8014fc2:	d104      	bne.n	8014fce <uxr_receive_reliable_message+0x6e>
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	9a08      	ldr	r2, [sp, #32]
 8014fc8:	81a0      	strh	r0, [r4, #12]
 8014fca:	7013      	strb	r3, [r2, #0]
 8014fcc:	e7da      	b.n	8014f84 <uxr_receive_reliable_message+0x24>
 8014fce:	8922      	ldrh	r2, [r4, #8]
 8014fd0:	6863      	ldr	r3, [r4, #4]
 8014fd2:	fbb5 f0f2 	udiv	r0, r5, r2
 8014fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8014fda:	fb02 5010 	mls	r0, r2, r0, r5
 8014fde:	b280      	uxth	r0, r0
 8014fe0:	fb03 f000 	mul.w	r0, r3, r0
 8014fe4:	6823      	ldr	r3, [r4, #0]
 8014fe6:	3004      	adds	r0, #4
 8014fe8:	4418      	add	r0, r3
 8014fea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d1c7      	bne.n	8014f82 <uxr_receive_reliable_message+0x22>
 8014ff2:	4639      	mov	r1, r7
 8014ff4:	4642      	mov	r2, r8
 8014ff6:	f002 fae8 	bl	80175ca <memcpy>
 8014ffa:	8921      	ldrh	r1, [r4, #8]
 8014ffc:	6863      	ldr	r3, [r4, #4]
 8014ffe:	fbb5 f2f1 	udiv	r2, r5, r1
 8015002:	fbb3 f3f1 	udiv	r3, r3, r1
 8015006:	fb01 5212 	mls	r2, r1, r2, r5
 801500a:	b292      	uxth	r2, r2
 801500c:	fb02 f303 	mul.w	r3, r2, r3
 8015010:	6822      	ldr	r2, [r4, #0]
 8015012:	f842 8003 	str.w	r8, [r2, r3]
 8015016:	2301      	movs	r3, #1
 8015018:	9a08      	ldr	r2, [sp, #32]
 801501a:	7013      	strb	r3, [r2, #0]
 801501c:	f1b9 0f00 	cmp.w	r9, #0
 8015020:	d0af      	beq.n	8014f82 <uxr_receive_reliable_message+0x22>
 8015022:	89a6      	ldrh	r6, [r4, #12]
 8015024:	2101      	movs	r1, #1
 8015026:	4630      	mov	r0, r6
 8015028:	f000 fd48 	bl	8015abc <uxr_seq_num_add>
 801502c:	8921      	ldrh	r1, [r4, #8]
 801502e:	6863      	ldr	r3, [r4, #4]
 8015030:	4606      	mov	r6, r0
 8015032:	fbb0 f2f1 	udiv	r2, r0, r1
 8015036:	fbb3 f3f1 	udiv	r3, r3, r1
 801503a:	fb01 0212 	mls	r2, r1, r2, r0
 801503e:	6820      	ldr	r0, [r4, #0]
 8015040:	b292      	uxth	r2, r2
 8015042:	fb02 f303 	mul.w	r3, r2, r3
 8015046:	3304      	adds	r3, #4
 8015048:	4418      	add	r0, r3
 801504a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d097      	beq.n	8014f82 <uxr_receive_reliable_message+0x22>
 8015052:	6923      	ldr	r3, [r4, #16]
 8015054:	4798      	blx	r3
 8015056:	2802      	cmp	r0, #2
 8015058:	d002      	beq.n	8015060 <uxr_receive_reliable_message+0x100>
 801505a:	2801      	cmp	r0, #1
 801505c:	d0e2      	beq.n	8015024 <uxr_receive_reliable_message+0xc4>
 801505e:	e790      	b.n	8014f82 <uxr_receive_reliable_message+0x22>
 8015060:	2601      	movs	r6, #1
 8015062:	e78f      	b.n	8014f84 <uxr_receive_reliable_message+0x24>

08015064 <uxr_next_input_reliable_buffer_available>:
 8015064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015068:	4604      	mov	r4, r0
 801506a:	460f      	mov	r7, r1
 801506c:	8980      	ldrh	r0, [r0, #12]
 801506e:	2101      	movs	r1, #1
 8015070:	4690      	mov	r8, r2
 8015072:	f000 fd23 	bl	8015abc <uxr_seq_num_add>
 8015076:	8922      	ldrh	r2, [r4, #8]
 8015078:	6866      	ldr	r6, [r4, #4]
 801507a:	fbb0 f3f2 	udiv	r3, r0, r2
 801507e:	fbb6 f6f2 	udiv	r6, r6, r2
 8015082:	fb02 0313 	mls	r3, r2, r3, r0
 8015086:	b29b      	uxth	r3, r3
 8015088:	fb03 f606 	mul.w	r6, r3, r6
 801508c:	6823      	ldr	r3, [r4, #0]
 801508e:	3604      	adds	r6, #4
 8015090:	441e      	add	r6, r3
 8015092:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015096:	f1b9 0f00 	cmp.w	r9, #0
 801509a:	d023      	beq.n	80150e4 <uxr_next_input_reliable_buffer_available+0x80>
 801509c:	4605      	mov	r5, r0
 801509e:	6923      	ldr	r3, [r4, #16]
 80150a0:	4630      	mov	r0, r6
 80150a2:	4798      	blx	r3
 80150a4:	4682      	mov	sl, r0
 80150a6:	b300      	cbz	r0, 80150ea <uxr_next_input_reliable_buffer_available+0x86>
 80150a8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80150ac:	2101      	movs	r1, #1
 80150ae:	4650      	mov	r0, sl
 80150b0:	f000 fd04 	bl	8015abc <uxr_seq_num_add>
 80150b4:	8921      	ldrh	r1, [r4, #8]
 80150b6:	4682      	mov	sl, r0
 80150b8:	6863      	ldr	r3, [r4, #4]
 80150ba:	6820      	ldr	r0, [r4, #0]
 80150bc:	fbba f2f1 	udiv	r2, sl, r1
 80150c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80150c4:	fb01 a212 	mls	r2, r1, r2, sl
 80150c8:	b292      	uxth	r2, r2
 80150ca:	fb02 f303 	mul.w	r3, r2, r3
 80150ce:	3304      	adds	r3, #4
 80150d0:	4418      	add	r0, r3
 80150d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80150d6:	b12b      	cbz	r3, 80150e4 <uxr_next_input_reliable_buffer_available+0x80>
 80150d8:	6923      	ldr	r3, [r4, #16]
 80150da:	4798      	blx	r3
 80150dc:	2802      	cmp	r0, #2
 80150de:	d01b      	beq.n	8015118 <uxr_next_input_reliable_buffer_available+0xb4>
 80150e0:	2801      	cmp	r0, #1
 80150e2:	d0e3      	beq.n	80150ac <uxr_next_input_reliable_buffer_available+0x48>
 80150e4:	2000      	movs	r0, #0
 80150e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150ea:	464a      	mov	r2, r9
 80150ec:	4631      	mov	r1, r6
 80150ee:	4638      	mov	r0, r7
 80150f0:	f7fa fe1a 	bl	800fd28 <ucdr_init_buffer>
 80150f4:	8921      	ldrh	r1, [r4, #8]
 80150f6:	6863      	ldr	r3, [r4, #4]
 80150f8:	2001      	movs	r0, #1
 80150fa:	fbb5 f2f1 	udiv	r2, r5, r1
 80150fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015102:	fb01 5212 	mls	r2, r1, r2, r5
 8015106:	b292      	uxth	r2, r2
 8015108:	fb02 f303 	mul.w	r3, r2, r3
 801510c:	6822      	ldr	r2, [r4, #0]
 801510e:	f842 a003 	str.w	sl, [r2, r3]
 8015112:	81a5      	strh	r5, [r4, #12]
 8015114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015118:	8920      	ldrh	r0, [r4, #8]
 801511a:	eb06 0108 	add.w	r1, r6, r8
 801511e:	6863      	ldr	r3, [r4, #4]
 8015120:	eba9 0208 	sub.w	r2, r9, r8
 8015124:	fbb5 f6f0 	udiv	r6, r5, r0
 8015128:	fbb3 f3f0 	udiv	r3, r3, r0
 801512c:	fb00 5516 	mls	r5, r0, r6, r5
 8015130:	2000      	movs	r0, #0
 8015132:	b2ad      	uxth	r5, r5
 8015134:	fb03 f505 	mul.w	r5, r3, r5
 8015138:	6823      	ldr	r3, [r4, #0]
 801513a:	5158      	str	r0, [r3, r5]
 801513c:	4638      	mov	r0, r7
 801513e:	f7fa fdf3 	bl	800fd28 <ucdr_init_buffer>
 8015142:	4638      	mov	r0, r7
 8015144:	4622      	mov	r2, r4
 8015146:	4903      	ldr	r1, [pc, #12]	; (8015154 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015148:	f7fa fdc2 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 801514c:	2001      	movs	r0, #1
 801514e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015152:	e7c8      	b.n	80150e6 <uxr_next_input_reliable_buffer_available+0x82>
 8015154:	08014e65 	.word	0x08014e65

08015158 <uxr_process_heartbeat>:
 8015158:	b538      	push	{r3, r4, r5, lr}
 801515a:	4611      	mov	r1, r2
 801515c:	4604      	mov	r4, r0
 801515e:	89c0      	ldrh	r0, [r0, #14]
 8015160:	4615      	mov	r5, r2
 8015162:	f000 fcb3 	bl	8015acc <uxr_seq_num_cmp>
 8015166:	2800      	cmp	r0, #0
 8015168:	bfb8      	it	lt
 801516a:	81e5      	strhlt	r5, [r4, #14]
 801516c:	bd38      	pop	{r3, r4, r5, pc}
 801516e:	bf00      	nop

08015170 <uxr_compute_acknack>:
 8015170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015174:	8903      	ldrh	r3, [r0, #8]
 8015176:	4604      	mov	r4, r0
 8015178:	460f      	mov	r7, r1
 801517a:	8985      	ldrh	r5, [r0, #12]
 801517c:	b1db      	cbz	r3, 80151b6 <uxr_compute_acknack+0x46>
 801517e:	4628      	mov	r0, r5
 8015180:	2601      	movs	r6, #1
 8015182:	e004      	b.n	801518e <uxr_compute_acknack+0x1e>
 8015184:	4566      	cmp	r6, ip
 8015186:	f106 0601 	add.w	r6, r6, #1
 801518a:	d214      	bcs.n	80151b6 <uxr_compute_acknack+0x46>
 801518c:	89a0      	ldrh	r0, [r4, #12]
 801518e:	b2b1      	uxth	r1, r6
 8015190:	f000 fc94 	bl	8015abc <uxr_seq_num_add>
 8015194:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015198:	fbb0 f2fc 	udiv	r2, r0, ip
 801519c:	e9d4 1300 	ldrd	r1, r3, [r4]
 80151a0:	fb0c 0212 	mls	r2, ip, r2, r0
 80151a4:	fbb3 f3fc 	udiv	r3, r3, ip
 80151a8:	b292      	uxth	r2, r2
 80151aa:	fb02 f303 	mul.w	r3, r2, r3
 80151ae:	58cb      	ldr	r3, [r1, r3]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d1e7      	bne.n	8015184 <uxr_compute_acknack+0x14>
 80151b4:	4605      	mov	r5, r0
 80151b6:	803d      	strh	r5, [r7, #0]
 80151b8:	2101      	movs	r1, #1
 80151ba:	89e6      	ldrh	r6, [r4, #14]
 80151bc:	4628      	mov	r0, r5
 80151be:	f000 fc81 	bl	8015ac4 <uxr_seq_num_sub>
 80151c2:	4601      	mov	r1, r0
 80151c4:	4630      	mov	r0, r6
 80151c6:	f000 fc7d 	bl	8015ac4 <uxr_seq_num_sub>
 80151ca:	4606      	mov	r6, r0
 80151cc:	b328      	cbz	r0, 801521a <uxr_compute_acknack+0xaa>
 80151ce:	f04f 0900 	mov.w	r9, #0
 80151d2:	f04f 0801 	mov.w	r8, #1
 80151d6:	464d      	mov	r5, r9
 80151d8:	fa1f f189 	uxth.w	r1, r9
 80151dc:	8838      	ldrh	r0, [r7, #0]
 80151de:	f000 fc6d 	bl	8015abc <uxr_seq_num_add>
 80151e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80151e6:	6861      	ldr	r1, [r4, #4]
 80151e8:	fa08 fe09 	lsl.w	lr, r8, r9
 80151ec:	6822      	ldr	r2, [r4, #0]
 80151ee:	f109 0901 	add.w	r9, r9, #1
 80151f2:	ea4e 0e05 	orr.w	lr, lr, r5
 80151f6:	fbb0 f3fc 	udiv	r3, r0, ip
 80151fa:	fbb1 f1fc 	udiv	r1, r1, ip
 80151fe:	fb03 001c 	mls	r0, r3, ip, r0
 8015202:	b283      	uxth	r3, r0
 8015204:	fb01 f303 	mul.w	r3, r1, r3
 8015208:	58d3      	ldr	r3, [r2, r3]
 801520a:	b90b      	cbnz	r3, 8015210 <uxr_compute_acknack+0xa0>
 801520c:	fa1f f58e 	uxth.w	r5, lr
 8015210:	454e      	cmp	r6, r9
 8015212:	d1e1      	bne.n	80151d8 <uxr_compute_acknack+0x68>
 8015214:	4628      	mov	r0, r5
 8015216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801521a:	4605      	mov	r5, r0
 801521c:	4628      	mov	r0, r5
 801521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015222:	bf00      	nop

08015224 <uxr_init_output_best_effort_stream>:
 8015224:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8015228:	6001      	str	r1, [r0, #0]
 801522a:	7303      	strb	r3, [r0, #12]
 801522c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015230:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015234:	4770      	bx	lr
 8015236:	bf00      	nop

08015238 <uxr_reset_output_best_effort_stream>:
 8015238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801523c:	7b03      	ldrb	r3, [r0, #12]
 801523e:	81c2      	strh	r2, [r0, #14]
 8015240:	6043      	str	r3, [r0, #4]
 8015242:	4770      	bx	lr

08015244 <uxr_prepare_best_effort_buffer_to_write>:
 8015244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015246:	4604      	mov	r4, r0
 8015248:	b083      	sub	sp, #12
 801524a:	6840      	ldr	r0, [r0, #4]
 801524c:	460d      	mov	r5, r1
 801524e:	4616      	mov	r6, r2
 8015250:	f7fc f944 	bl	80114dc <uxr_submessage_padding>
 8015254:	6863      	ldr	r3, [r4, #4]
 8015256:	4418      	add	r0, r3
 8015258:	68a3      	ldr	r3, [r4, #8]
 801525a:	1942      	adds	r2, r0, r5
 801525c:	4293      	cmp	r3, r2
 801525e:	bf2c      	ite	cs
 8015260:	2701      	movcs	r7, #1
 8015262:	2700      	movcc	r7, #0
 8015264:	d202      	bcs.n	801526c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015266:	4638      	mov	r0, r7
 8015268:	b003      	add	sp, #12
 801526a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801526c:	9000      	str	r0, [sp, #0]
 801526e:	2300      	movs	r3, #0
 8015270:	4630      	mov	r0, r6
 8015272:	6821      	ldr	r1, [r4, #0]
 8015274:	f7fa fd46 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 8015278:	6861      	ldr	r1, [r4, #4]
 801527a:	4638      	mov	r0, r7
 801527c:	4429      	add	r1, r5
 801527e:	6061      	str	r1, [r4, #4]
 8015280:	b003      	add	sp, #12
 8015282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015284 <uxr_prepare_best_effort_buffer_to_send>:
 8015284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015288:	4604      	mov	r4, r0
 801528a:	461d      	mov	r5, r3
 801528c:	6840      	ldr	r0, [r0, #4]
 801528e:	7b23      	ldrb	r3, [r4, #12]
 8015290:	4298      	cmp	r0, r3
 8015292:	bf8c      	ite	hi
 8015294:	2601      	movhi	r6, #1
 8015296:	2600      	movls	r6, #0
 8015298:	d802      	bhi.n	80152a0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801529a:	4630      	mov	r0, r6
 801529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a0:	4688      	mov	r8, r1
 80152a2:	89e0      	ldrh	r0, [r4, #14]
 80152a4:	2101      	movs	r1, #1
 80152a6:	4617      	mov	r7, r2
 80152a8:	f000 fc08 	bl	8015abc <uxr_seq_num_add>
 80152ac:	6823      	ldr	r3, [r4, #0]
 80152ae:	81e0      	strh	r0, [r4, #14]
 80152b0:	8028      	strh	r0, [r5, #0]
 80152b2:	4630      	mov	r0, r6
 80152b4:	f8c8 3000 	str.w	r3, [r8]
 80152b8:	6863      	ldr	r3, [r4, #4]
 80152ba:	603b      	str	r3, [r7, #0]
 80152bc:	7b23      	ldrb	r3, [r4, #12]
 80152be:	6063      	str	r3, [r4, #4]
 80152c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080152c4 <on_full_output_buffer>:
 80152c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152c6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80152ca:	460c      	mov	r4, r1
 80152cc:	6803      	ldr	r3, [r0, #0]
 80152ce:	4605      	mov	r5, r0
 80152d0:	7b26      	ldrb	r6, [r4, #12]
 80152d2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80152d6:	fbb2 f2fc 	udiv	r2, r2, ip
 80152da:	eba3 0e01 	sub.w	lr, r3, r1
 80152de:	6903      	ldr	r3, [r0, #16]
 80152e0:	fbbe fef2 	udiv	lr, lr, r2
 80152e4:	f10e 0e01 	add.w	lr, lr, #1
 80152e8:	fa1f fe8e 	uxth.w	lr, lr
 80152ec:	fbbe f7fc 	udiv	r7, lr, ip
 80152f0:	fb0c ec17 	mls	ip, ip, r7, lr
 80152f4:	fa1f fc8c 	uxth.w	ip, ip
 80152f8:	fb02 fc0c 	mul.w	ip, r2, ip
 80152fc:	f851 200c 	ldr.w	r2, [r1, ip]
 8015300:	44b4      	add	ip, r6
 8015302:	1b92      	subs	r2, r2, r6
 8015304:	f10c 0c08 	add.w	ip, ip, #8
 8015308:	3a04      	subs	r2, #4
 801530a:	4461      	add	r1, ip
 801530c:	f7fa fd04 	bl	800fd18 <ucdr_init_buffer_origin>
 8015310:	4628      	mov	r0, r5
 8015312:	4622      	mov	r2, r4
 8015314:	4902      	ldr	r1, [pc, #8]	; (8015320 <on_full_output_buffer+0x5c>)
 8015316:	f7fa fcdb 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 801531a:	2000      	movs	r0, #0
 801531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801531e:	bf00      	nop
 8015320:	080152c5 	.word	0x080152c5

08015324 <uxr_init_output_reliable_stream>:
 8015324:	b530      	push	{r4, r5, lr}
 8015326:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801532a:	8103      	strh	r3, [r0, #8]
 801532c:	7304      	strb	r4, [r0, #12]
 801532e:	e9c0 1200 	strd	r1, r2, [r0]
 8015332:	b1e3      	cbz	r3, 801536e <uxr_init_output_reliable_stream+0x4a>
 8015334:	600c      	str	r4, [r1, #0]
 8015336:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801533a:	f1bc 0f01 	cmp.w	ip, #1
 801533e:	d916      	bls.n	801536e <uxr_init_output_reliable_stream+0x4a>
 8015340:	f04f 0e01 	mov.w	lr, #1
 8015344:	6843      	ldr	r3, [r0, #4]
 8015346:	f10e 0501 	add.w	r5, lr, #1
 801534a:	7b04      	ldrb	r4, [r0, #12]
 801534c:	6801      	ldr	r1, [r0, #0]
 801534e:	fbbe f2fc 	udiv	r2, lr, ip
 8015352:	fbb3 f3fc 	udiv	r3, r3, ip
 8015356:	fb0c e212 	mls	r2, ip, r2, lr
 801535a:	fa1f fe85 	uxth.w	lr, r5
 801535e:	b292      	uxth	r2, r2
 8015360:	fb02 f303 	mul.w	r3, r2, r3
 8015364:	50cc      	str	r4, [r1, r3]
 8015366:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801536a:	45f4      	cmp	ip, lr
 801536c:	d8ea      	bhi.n	8015344 <uxr_init_output_reliable_stream+0x20>
 801536e:	4b07      	ldr	r3, [pc, #28]	; (801538c <uxr_init_output_reliable_stream+0x68>)
 8015370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015374:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015378:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801537c:	f8c0 300e 	str.w	r3, [r0, #14]
 8015380:	2300      	movs	r3, #0
 8015382:	8242      	strh	r2, [r0, #18]
 8015384:	8403      	strh	r3, [r0, #32]
 8015386:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801538a:	bd30      	pop	{r4, r5, pc}
 801538c:	ffff0000 	.word	0xffff0000

08015390 <uxr_reset_output_reliable_stream>:
 8015390:	8901      	ldrh	r1, [r0, #8]
 8015392:	b510      	push	{r4, lr}
 8015394:	b1b1      	cbz	r1, 80153c4 <uxr_reset_output_reliable_stream+0x34>
 8015396:	f04f 0e00 	mov.w	lr, #0
 801539a:	46f4      	mov	ip, lr
 801539c:	6843      	ldr	r3, [r0, #4]
 801539e:	f10e 0e01 	add.w	lr, lr, #1
 80153a2:	7b04      	ldrb	r4, [r0, #12]
 80153a4:	fbbc f2f1 	udiv	r2, ip, r1
 80153a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80153ac:	fb01 c212 	mls	r2, r1, r2, ip
 80153b0:	fa1f fc8e 	uxth.w	ip, lr
 80153b4:	b292      	uxth	r2, r2
 80153b6:	fb02 f303 	mul.w	r3, r2, r3
 80153ba:	6802      	ldr	r2, [r0, #0]
 80153bc:	50d4      	str	r4, [r2, r3]
 80153be:	8901      	ldrh	r1, [r0, #8]
 80153c0:	4561      	cmp	r1, ip
 80153c2:	d8eb      	bhi.n	801539c <uxr_reset_output_reliable_stream+0xc>
 80153c4:	4b08      	ldr	r3, [pc, #32]	; (80153e8 <uxr_reset_output_reliable_stream+0x58>)
 80153c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153ca:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80153e0 <uxr_reset_output_reliable_stream+0x50>
 80153ce:	f8c0 300e 	str.w	r3, [r0, #14]
 80153d2:	2300      	movs	r3, #0
 80153d4:	8242      	strh	r2, [r0, #18]
 80153d6:	8403      	strh	r3, [r0, #32]
 80153d8:	ed80 7b06 	vstr	d7, [r0, #24]
 80153dc:	bd10      	pop	{r4, pc}
 80153de:	bf00      	nop
 80153e0:	ffffffff 	.word	0xffffffff
 80153e4:	7fffffff 	.word	0x7fffffff
 80153e8:	ffff0000 	.word	0xffff0000

080153ec <uxr_prepare_reliable_buffer_to_write>:
 80153ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f0:	4604      	mov	r4, r0
 80153f2:	b091      	sub	sp, #68	; 0x44
 80153f4:	8900      	ldrh	r0, [r0, #8]
 80153f6:	468b      	mov	fp, r1
 80153f8:	89e6      	ldrh	r6, [r4, #14]
 80153fa:	9204      	str	r2, [sp, #16]
 80153fc:	6865      	ldr	r5, [r4, #4]
 80153fe:	6823      	ldr	r3, [r4, #0]
 8015400:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015404:	fbb6 f2f0 	udiv	r2, r6, r0
 8015408:	fbb5 f5f0 	udiv	r5, r5, r0
 801540c:	fb00 6212 	mls	r2, r0, r2, r6
 8015410:	1f2f      	subs	r7, r5, #4
 8015412:	b292      	uxth	r2, r2
 8015414:	fb05 3202 	mla	r2, r5, r2, r3
 8015418:	1d11      	adds	r1, r2, #4
 801541a:	f8d2 8000 	ldr.w	r8, [r2]
 801541e:	9103      	str	r1, [sp, #12]
 8015420:	2800      	cmp	r0, #0
 8015422:	f000 814a 	beq.w	80156ba <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8015426:	f04f 0c00 	mov.w	ip, #0
 801542a:	46e2      	mov	sl, ip
 801542c:	4661      	mov	r1, ip
 801542e:	f10c 0c01 	add.w	ip, ip, #1
 8015432:	fbb1 f2f0 	udiv	r2, r1, r0
 8015436:	fb00 1212 	mls	r2, r0, r2, r1
 801543a:	fa1f f18c 	uxth.w	r1, ip
 801543e:	b292      	uxth	r2, r2
 8015440:	fb05 f202 	mul.w	r2, r5, r2
 8015444:	589a      	ldr	r2, [r3, r2]
 8015446:	454a      	cmp	r2, r9
 8015448:	d103      	bne.n	8015452 <uxr_prepare_reliable_buffer_to_write+0x66>
 801544a:	f10a 0a01 	add.w	sl, sl, #1
 801544e:	fa1f fa8a 	uxth.w	sl, sl
 8015452:	4281      	cmp	r1, r0
 8015454:	d3eb      	bcc.n	801542e <uxr_prepare_reliable_buffer_to_write+0x42>
 8015456:	4640      	mov	r0, r8
 8015458:	2104      	movs	r1, #4
 801545a:	f8cd a014 	str.w	sl, [sp, #20]
 801545e:	f7fa fc67 	bl	800fd30 <ucdr_alignment>
 8015462:	4480      	add	r8, r0
 8015464:	eb08 020b 	add.w	r2, r8, fp
 8015468:	42ba      	cmp	r2, r7
 801546a:	f240 80ca 	bls.w	8015602 <uxr_prepare_reliable_buffer_to_write+0x216>
 801546e:	7b22      	ldrb	r2, [r4, #12]
 8015470:	445a      	add	r2, fp
 8015472:	42ba      	cmp	r2, r7
 8015474:	f240 80b2 	bls.w	80155dc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8015478:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801547c:	b2bb      	uxth	r3, r7
 801547e:	eba2 0209 	sub.w	r2, r2, r9
 8015482:	441a      	add	r2, r3
 8015484:	b292      	uxth	r2, r2
 8015486:	fb0a f902 	mul.w	r9, sl, r2
 801548a:	9205      	str	r2, [sp, #20]
 801548c:	45d9      	cmp	r9, fp
 801548e:	9206      	str	r2, [sp, #24]
 8015490:	f0c0 80b3 	bcc.w	80155fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015494:	f108 0204 	add.w	r2, r8, #4
 8015498:	42ba      	cmp	r2, r7
 801549a:	f080 80da 	bcs.w	8015652 <uxr_prepare_reliable_buffer_to_write+0x266>
 801549e:	f1a3 0904 	sub.w	r9, r3, #4
 80154a2:	9b05      	ldr	r3, [sp, #20]
 80154a4:	eba9 0908 	sub.w	r9, r9, r8
 80154a8:	fa1f f989 	uxth.w	r9, r9
 80154ac:	ebab 0b09 	sub.w	fp, fp, r9
 80154b0:	fbbb f2f3 	udiv	r2, fp, r3
 80154b4:	fb03 b312 	mls	r3, r3, r2, fp
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f040 80c4 	bne.w	8015646 <uxr_prepare_reliable_buffer_to_write+0x25a>
 80154be:	b293      	uxth	r3, r2
 80154c0:	4553      	cmp	r3, sl
 80154c2:	f200 809a 	bhi.w	80155fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	f000 80f9 	beq.w	80156be <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80154cc:	f8cd 801c 	str.w	r8, [sp, #28]
 80154d0:	f04f 0a00 	mov.w	sl, #0
 80154d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80154d8:	f10d 0b20 	add.w	fp, sp, #32
 80154dc:	9505      	str	r5, [sp, #20]
 80154de:	461d      	mov	r5, r3
 80154e0:	e000      	b.n	80154e4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 80154e2:	46c1      	mov	r9, r8
 80154e4:	8922      	ldrh	r2, [r4, #8]
 80154e6:	4658      	mov	r0, fp
 80154e8:	6863      	ldr	r3, [r4, #4]
 80154ea:	f10a 0a01 	add.w	sl, sl, #1
 80154ee:	fbb6 f1f2 	udiv	r1, r6, r2
 80154f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80154f6:	fb02 6111 	mls	r1, r2, r1, r6
 80154fa:	463a      	mov	r2, r7
 80154fc:	b289      	uxth	r1, r1
 80154fe:	fb03 f101 	mul.w	r1, r3, r1
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	3104      	adds	r1, #4
 8015506:	4419      	add	r1, r3
 8015508:	2300      	movs	r3, #0
 801550a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801550e:	f8cd c000 	str.w	ip, [sp]
 8015512:	f7fa fbf7 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 8015516:	464a      	mov	r2, r9
 8015518:	2300      	movs	r3, #0
 801551a:	210d      	movs	r1, #13
 801551c:	4658      	mov	r0, fp
 801551e:	f7fb ff9d 	bl	801145c <uxr_buffer_submessage_header>
 8015522:	8921      	ldrh	r1, [r4, #8]
 8015524:	6863      	ldr	r3, [r4, #4]
 8015526:	4630      	mov	r0, r6
 8015528:	fbb6 f2f1 	udiv	r2, r6, r1
 801552c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015530:	fb01 6212 	mls	r2, r1, r2, r6
 8015534:	2101      	movs	r1, #1
 8015536:	b292      	uxth	r2, r2
 8015538:	fb02 f303 	mul.w	r3, r2, r3
 801553c:	6822      	ldr	r2, [r4, #0]
 801553e:	50d7      	str	r7, [r2, r3]
 8015540:	f000 fabc 	bl	8015abc <uxr_seq_num_add>
 8015544:	4606      	mov	r6, r0
 8015546:	fa1f f38a 	uxth.w	r3, sl
 801554a:	429d      	cmp	r5, r3
 801554c:	d8c9      	bhi.n	80154e2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801554e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015552:	9d05      	ldr	r5, [sp, #20]
 8015554:	8920      	ldrh	r0, [r4, #8]
 8015556:	463a      	mov	r2, r7
 8015558:	6863      	ldr	r3, [r4, #4]
 801555a:	fbb6 f1f0 	udiv	r1, r6, r0
 801555e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015562:	fb00 6111 	mls	r1, r0, r1, r6
 8015566:	4658      	mov	r0, fp
 8015568:	b289      	uxth	r1, r1
 801556a:	fb01 f303 	mul.w	r3, r1, r3
 801556e:	6821      	ldr	r1, [r4, #0]
 8015570:	3304      	adds	r3, #4
 8015572:	4419      	add	r1, r3
 8015574:	2300      	movs	r3, #0
 8015576:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801557a:	9700      	str	r7, [sp, #0]
 801557c:	f7fa fbc2 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 8015580:	9f06      	ldr	r7, [sp, #24]
 8015582:	4658      	mov	r0, fp
 8015584:	2302      	movs	r3, #2
 8015586:	b2ba      	uxth	r2, r7
 8015588:	210d      	movs	r1, #13
 801558a:	f7fb ff67 	bl	801145c <uxr_buffer_submessage_header>
 801558e:	f108 0104 	add.w	r1, r8, #4
 8015592:	9b03      	ldr	r3, [sp, #12]
 8015594:	f1a5 0208 	sub.w	r2, r5, #8
 8015598:	8925      	ldrh	r5, [r4, #8]
 801559a:	440b      	add	r3, r1
 801559c:	eba2 0208 	sub.w	r2, r2, r8
 80155a0:	fbb6 f0f5 	udiv	r0, r6, r5
 80155a4:	4619      	mov	r1, r3
 80155a6:	6863      	ldr	r3, [r4, #4]
 80155a8:	fb05 6010 	mls	r0, r5, r0, r6
 80155ac:	fbb3 f3f5 	udiv	r3, r3, r5
 80155b0:	b280      	uxth	r0, r0
 80155b2:	6825      	ldr	r5, [r4, #0]
 80155b4:	fb00 f303 	mul.w	r3, r0, r3
 80155b8:	7b20      	ldrb	r0, [r4, #12]
 80155ba:	3004      	adds	r0, #4
 80155bc:	4438      	add	r0, r7
 80155be:	50e8      	str	r0, [r5, r3]
 80155c0:	9d04      	ldr	r5, [sp, #16]
 80155c2:	4628      	mov	r0, r5
 80155c4:	f7fa fbb0 	bl	800fd28 <ucdr_init_buffer>
 80155c8:	4628      	mov	r0, r5
 80155ca:	4622      	mov	r2, r4
 80155cc:	493d      	ldr	r1, [pc, #244]	; (80156c4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80155ce:	f7fa fb7f 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 80155d2:	2001      	movs	r0, #1
 80155d4:	81e6      	strh	r6, [r4, #14]
 80155d6:	b011      	add	sp, #68	; 0x44
 80155d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155dc:	2101      	movs	r1, #1
 80155de:	89e0      	ldrh	r0, [r4, #14]
 80155e0:	f000 fa6c 	bl	8015abc <uxr_seq_num_add>
 80155e4:	4605      	mov	r5, r0
 80155e6:	8921      	ldrh	r1, [r4, #8]
 80155e8:	8a60      	ldrh	r0, [r4, #18]
 80155ea:	f000 fa67 	bl	8015abc <uxr_seq_num_add>
 80155ee:	4601      	mov	r1, r0
 80155f0:	4628      	mov	r0, r5
 80155f2:	f000 fa6b 	bl	8015acc <uxr_seq_num_cmp>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	dd44      	ble.n	8015684 <uxr_prepare_reliable_buffer_to_write+0x298>
 80155fa:	2000      	movs	r0, #0
 80155fc:	b011      	add	sp, #68	; 0x44
 80155fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015602:	8921      	ldrh	r1, [r4, #8]
 8015604:	8a60      	ldrh	r0, [r4, #18]
 8015606:	9205      	str	r2, [sp, #20]
 8015608:	f000 fa58 	bl	8015abc <uxr_seq_num_add>
 801560c:	4601      	mov	r1, r0
 801560e:	4630      	mov	r0, r6
 8015610:	f000 fa5c 	bl	8015acc <uxr_seq_num_cmp>
 8015614:	2800      	cmp	r0, #0
 8015616:	9a05      	ldr	r2, [sp, #20]
 8015618:	dcef      	bgt.n	80155fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801561a:	8925      	ldrh	r5, [r4, #8]
 801561c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8015620:	fbb6 f4f5 	udiv	r4, r6, r5
 8015624:	fbb3 f3f5 	udiv	r3, r3, r5
 8015628:	fb05 6414 	mls	r4, r5, r4, r6
 801562c:	b2a4      	uxth	r4, r4
 801562e:	fb04 f303 	mul.w	r3, r4, r3
 8015632:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015636:	50fa      	str	r2, [r7, r3]
 8015638:	2300      	movs	r3, #0
 801563a:	f8cd 8000 	str.w	r8, [sp]
 801563e:	f7fa fb61 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 8015642:	2001      	movs	r0, #1
 8015644:	e7da      	b.n	80155fc <uxr_prepare_reliable_buffer_to_write+0x210>
 8015646:	3201      	adds	r2, #1
 8015648:	9306      	str	r3, [sp, #24]
 801564a:	b293      	uxth	r3, r2
 801564c:	4553      	cmp	r3, sl
 801564e:	d8d4      	bhi.n	80155fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015650:	e739      	b.n	80154c6 <uxr_prepare_reliable_buffer_to_write+0xda>
 8015652:	4630      	mov	r0, r6
 8015654:	2101      	movs	r1, #1
 8015656:	9307      	str	r3, [sp, #28]
 8015658:	f000 fa30 	bl	8015abc <uxr_seq_num_add>
 801565c:	4606      	mov	r6, r0
 801565e:	8920      	ldrh	r0, [r4, #8]
 8015660:	6862      	ldr	r2, [r4, #4]
 8015662:	fbb6 f1f0 	udiv	r1, r6, r0
 8015666:	fbb2 f2f0 	udiv	r2, r2, r0
 801566a:	fb00 6111 	mls	r1, r0, r1, r6
 801566e:	b289      	uxth	r1, r1
 8015670:	fb01 f202 	mul.w	r2, r1, r2
 8015674:	6821      	ldr	r1, [r4, #0]
 8015676:	3204      	adds	r2, #4
 8015678:	188b      	adds	r3, r1, r2
 801567a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801567e:	9303      	str	r3, [sp, #12]
 8015680:	9b07      	ldr	r3, [sp, #28]
 8015682:	e70c      	b.n	801549e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015684:	8921      	ldrh	r1, [r4, #8]
 8015686:	6863      	ldr	r3, [r4, #4]
 8015688:	9804      	ldr	r0, [sp, #16]
 801568a:	fbb5 f2f1 	udiv	r2, r5, r1
 801568e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015692:	fb01 5212 	mls	r2, r1, r2, r5
 8015696:	6821      	ldr	r1, [r4, #0]
 8015698:	b292      	uxth	r2, r2
 801569a:	fb02 f303 	mul.w	r3, r2, r3
 801569e:	7b22      	ldrb	r2, [r4, #12]
 80156a0:	3304      	adds	r3, #4
 80156a2:	445a      	add	r2, fp
 80156a4:	4419      	add	r1, r3
 80156a6:	f841 2c04 	str.w	r2, [r1, #-4]
 80156aa:	7b23      	ldrb	r3, [r4, #12]
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	2300      	movs	r3, #0
 80156b0:	f7fa fb28 	bl	800fd04 <ucdr_init_buffer_origin_offset>
 80156b4:	2001      	movs	r0, #1
 80156b6:	81e5      	strh	r5, [r4, #14]
 80156b8:	e7a0      	b.n	80155fc <uxr_prepare_reliable_buffer_to_write+0x210>
 80156ba:	4682      	mov	sl, r0
 80156bc:	e6cb      	b.n	8015456 <uxr_prepare_reliable_buffer_to_write+0x6a>
 80156be:	f10d 0b20 	add.w	fp, sp, #32
 80156c2:	e747      	b.n	8015554 <uxr_prepare_reliable_buffer_to_write+0x168>
 80156c4:	080152c5 	.word	0x080152c5

080156c8 <uxr_prepare_next_reliable_buffer_to_send>:
 80156c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ca:	4604      	mov	r4, r0
 80156cc:	461d      	mov	r5, r3
 80156ce:	460f      	mov	r7, r1
 80156d0:	8a00      	ldrh	r0, [r0, #16]
 80156d2:	2101      	movs	r1, #1
 80156d4:	4616      	mov	r6, r2
 80156d6:	f000 f9f1 	bl	8015abc <uxr_seq_num_add>
 80156da:	8028      	strh	r0, [r5, #0]
 80156dc:	8922      	ldrh	r2, [r4, #8]
 80156de:	6863      	ldr	r3, [r4, #4]
 80156e0:	fbb0 f1f2 	udiv	r1, r0, r2
 80156e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80156e8:	fb02 0c11 	mls	ip, r2, r1, r0
 80156ec:	89e1      	ldrh	r1, [r4, #14]
 80156ee:	fa1f fc8c 	uxth.w	ip, ip
 80156f2:	fb0c fc03 	mul.w	ip, ip, r3
 80156f6:	6823      	ldr	r3, [r4, #0]
 80156f8:	f10c 0c04 	add.w	ip, ip, #4
 80156fc:	4463      	add	r3, ip
 80156fe:	603b      	str	r3, [r7, #0]
 8015700:	6823      	ldr	r3, [r4, #0]
 8015702:	449c      	add	ip, r3
 8015704:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015708:	6033      	str	r3, [r6, #0]
 801570a:	f000 f9df 	bl	8015acc <uxr_seq_num_cmp>
 801570e:	2800      	cmp	r0, #0
 8015710:	dd01      	ble.n	8015716 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015712:	2000      	movs	r0, #0
 8015714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015716:	7b23      	ldrb	r3, [r4, #12]
 8015718:	6832      	ldr	r2, [r6, #0]
 801571a:	429a      	cmp	r2, r3
 801571c:	d9f9      	bls.n	8015712 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801571e:	8a61      	ldrh	r1, [r4, #18]
 8015720:	8a20      	ldrh	r0, [r4, #16]
 8015722:	f000 f9cf 	bl	8015ac4 <uxr_seq_num_sub>
 8015726:	8923      	ldrh	r3, [r4, #8]
 8015728:	4283      	cmp	r3, r0
 801572a:	d0f2      	beq.n	8015712 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801572c:	8828      	ldrh	r0, [r5, #0]
 801572e:	89e3      	ldrh	r3, [r4, #14]
 8015730:	8220      	strh	r0, [r4, #16]
 8015732:	4298      	cmp	r0, r3
 8015734:	d001      	beq.n	801573a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015736:	2001      	movs	r0, #1
 8015738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801573a:	2101      	movs	r1, #1
 801573c:	f000 f9be 	bl	8015abc <uxr_seq_num_add>
 8015740:	4603      	mov	r3, r0
 8015742:	2001      	movs	r0, #1
 8015744:	81e3      	strh	r3, [r4, #14]
 8015746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015748 <uxr_update_output_stream_heartbeat_timestamp>:
 8015748:	b570      	push	{r4, r5, r6, lr}
 801574a:	8a01      	ldrh	r1, [r0, #16]
 801574c:	4604      	mov	r4, r0
 801574e:	8a40      	ldrh	r0, [r0, #18]
 8015750:	4615      	mov	r5, r2
 8015752:	461e      	mov	r6, r3
 8015754:	f000 f9ba 	bl	8015acc <uxr_seq_num_cmp>
 8015758:	2800      	cmp	r0, #0
 801575a:	db07      	blt.n	801576c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801575c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015760:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015764:	2000      	movs	r0, #0
 8015766:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801576a:	bd70      	pop	{r4, r5, r6, pc}
 801576c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015770:	b940      	cbnz	r0, 8015784 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015772:	2301      	movs	r3, #1
 8015774:	f884 3020 	strb.w	r3, [r4, #32]
 8015778:	3564      	adds	r5, #100	; 0x64
 801577a:	f146 0600 	adc.w	r6, r6, #0
 801577e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015782:	bd70      	pop	{r4, r5, r6, pc}
 8015784:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015788:	4295      	cmp	r5, r2
 801578a:	eb76 0303 	sbcs.w	r3, r6, r3
 801578e:	db04      	blt.n	801579a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8015790:	1c43      	adds	r3, r0, #1
 8015792:	2001      	movs	r0, #1
 8015794:	f884 3020 	strb.w	r3, [r4, #32]
 8015798:	e7ee      	b.n	8015778 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801579a:	2000      	movs	r0, #0
 801579c:	e7ec      	b.n	8015778 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801579e:	bf00      	nop

080157a0 <uxr_begin_output_nack_buffer_it>:
 80157a0:	8a40      	ldrh	r0, [r0, #18]
 80157a2:	4770      	bx	lr

080157a4 <uxr_next_reliable_nack_buffer_to_send>:
 80157a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a8:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 80157ac:	b197      	cbz	r7, 80157d4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 80157ae:	4680      	mov	r8, r0
 80157b0:	460d      	mov	r5, r1
 80157b2:	4616      	mov	r6, r2
 80157b4:	461c      	mov	r4, r3
 80157b6:	8818      	ldrh	r0, [r3, #0]
 80157b8:	2101      	movs	r1, #1
 80157ba:	f000 f97f 	bl	8015abc <uxr_seq_num_add>
 80157be:	8020      	strh	r0, [r4, #0]
 80157c0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80157c4:	f000 f982 	bl	8015acc <uxr_seq_num_cmp>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	dd06      	ble.n	80157da <uxr_next_reliable_nack_buffer_to_send+0x36>
 80157cc:	2300      	movs	r3, #0
 80157ce:	461f      	mov	r7, r3
 80157d0:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 80157d4:	4638      	mov	r0, r7
 80157d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157da:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80157de:	8820      	ldrh	r0, [r4, #0]
 80157e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80157e4:	fbb0 f3f2 	udiv	r3, r0, r2
 80157e8:	fbb1 fcf2 	udiv	ip, r1, r2
 80157ec:	fb02 0313 	mls	r3, r2, r3, r0
 80157f0:	b29b      	uxth	r3, r3
 80157f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80157f6:	f8d8 3000 	ldr.w	r3, [r8]
 80157fa:	f10c 0c04 	add.w	ip, ip, #4
 80157fe:	4463      	add	r3, ip
 8015800:	602b      	str	r3, [r5, #0]
 8015802:	f8d8 3000 	ldr.w	r3, [r8]
 8015806:	4463      	add	r3, ip
 8015808:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801580c:	6033      	str	r3, [r6, #0]
 801580e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8015812:	429a      	cmp	r2, r3
 8015814:	d0d0      	beq.n	80157b8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8015816:	e7dd      	b.n	80157d4 <uxr_next_reliable_nack_buffer_to_send+0x30>

08015818 <uxr_process_acknack>:
 8015818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801581a:	4604      	mov	r4, r0
 801581c:	460e      	mov	r6, r1
 801581e:	4610      	mov	r0, r2
 8015820:	2101      	movs	r1, #1
 8015822:	f000 f94f 	bl	8015ac4 <uxr_seq_num_sub>
 8015826:	8a61      	ldrh	r1, [r4, #18]
 8015828:	f000 f94c 	bl	8015ac4 <uxr_seq_num_sub>
 801582c:	b1c8      	cbz	r0, 8015862 <uxr_process_acknack+0x4a>
 801582e:	4605      	mov	r5, r0
 8015830:	2700      	movs	r7, #0
 8015832:	2101      	movs	r1, #1
 8015834:	8a60      	ldrh	r0, [r4, #18]
 8015836:	f000 f941 	bl	8015abc <uxr_seq_num_add>
 801583a:	8923      	ldrh	r3, [r4, #8]
 801583c:	6862      	ldr	r2, [r4, #4]
 801583e:	3701      	adds	r7, #1
 8015840:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015844:	6821      	ldr	r1, [r4, #0]
 8015846:	42bd      	cmp	r5, r7
 8015848:	8260      	strh	r0, [r4, #18]
 801584a:	fbb0 fef3 	udiv	lr, r0, r3
 801584e:	fbb2 f2f3 	udiv	r2, r2, r3
 8015852:	fb03 031e 	mls	r3, r3, lr, r0
 8015856:	b29b      	uxth	r3, r3
 8015858:	fb02 f303 	mul.w	r3, r2, r3
 801585c:	f841 c003 	str.w	ip, [r1, r3]
 8015860:	d1e7      	bne.n	8015832 <uxr_process_acknack+0x1a>
 8015862:	3e00      	subs	r6, #0
 8015864:	f04f 0300 	mov.w	r3, #0
 8015868:	bf18      	it	ne
 801586a:	2601      	movne	r6, #1
 801586c:	f884 3020 	strb.w	r3, [r4, #32]
 8015870:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8015874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015876:	bf00      	nop

08015878 <uxr_is_output_up_to_date>:
 8015878:	8a01      	ldrh	r1, [r0, #16]
 801587a:	8a40      	ldrh	r0, [r0, #18]
 801587c:	b508      	push	{r3, lr}
 801587e:	f000 f925 	bl	8015acc <uxr_seq_num_cmp>
 8015882:	fab0 f080 	clz	r0, r0
 8015886:	0940      	lsrs	r0, r0, #5
 8015888:	bd08      	pop	{r3, pc}
 801588a:	bf00      	nop

0801588c <get_available_free_slots>:
 801588c:	8901      	ldrh	r1, [r0, #8]
 801588e:	b1e1      	cbz	r1, 80158ca <get_available_free_slots+0x3e>
 8015890:	6843      	ldr	r3, [r0, #4]
 8015892:	f04f 0c00 	mov.w	ip, #0
 8015896:	b530      	push	{r4, r5, lr}
 8015898:	fbb3 fef1 	udiv	lr, r3, r1
 801589c:	6805      	ldr	r5, [r0, #0]
 801589e:	4662      	mov	r2, ip
 80158a0:	7b04      	ldrb	r4, [r0, #12]
 80158a2:	4660      	mov	r0, ip
 80158a4:	f10c 0c01 	add.w	ip, ip, #1
 80158a8:	fbb2 f3f1 	udiv	r3, r2, r1
 80158ac:	fb01 2313 	mls	r3, r1, r3, r2
 80158b0:	fa1f f28c 	uxth.w	r2, ip
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	fb0e f303 	mul.w	r3, lr, r3
 80158ba:	58eb      	ldr	r3, [r5, r3]
 80158bc:	429c      	cmp	r4, r3
 80158be:	d101      	bne.n	80158c4 <get_available_free_slots+0x38>
 80158c0:	3001      	adds	r0, #1
 80158c2:	b280      	uxth	r0, r0
 80158c4:	428a      	cmp	r2, r1
 80158c6:	d3ed      	bcc.n	80158a4 <get_available_free_slots+0x18>
 80158c8:	bd30      	pop	{r4, r5, pc}
 80158ca:	4608      	mov	r0, r1
 80158cc:	4770      	bx	lr
 80158ce:	bf00      	nop

080158d0 <uxr_buffer_cancel_data>:
 80158d0:	b510      	push	{r4, lr}
 80158d2:	2300      	movs	r3, #0
 80158d4:	b094      	sub	sp, #80	; 0x50
 80158d6:	4604      	mov	r4, r0
 80158d8:	9205      	str	r2, [sp, #20]
 80158da:	9301      	str	r3, [sp, #4]
 80158dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80158e0:	f88d 301e 	strb.w	r3, [sp, #30]
 80158e4:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80158e8:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80158ec:	2308      	movs	r3, #8
 80158ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80158f2:	2201      	movs	r2, #1
 80158f4:	9300      	str	r3, [sp, #0]
 80158f6:	ab0c      	add	r3, sp, #48	; 0x30
 80158f8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80158fc:	2210      	movs	r2, #16
 80158fe:	f7fb fb01 	bl	8010f04 <uxr_prepare_stream_to_write_submessage>
 8015902:	b918      	cbnz	r0, 801590c <uxr_buffer_cancel_data+0x3c>
 8015904:	4604      	mov	r4, r0
 8015906:	4620      	mov	r0, r4
 8015908:	b014      	add	sp, #80	; 0x50
 801590a:	bd10      	pop	{r4, pc}
 801590c:	9905      	ldr	r1, [sp, #20]
 801590e:	aa06      	add	r2, sp, #24
 8015910:	4620      	mov	r0, r4
 8015912:	f7fb fc33 	bl	801117c <uxr_init_base_object_request>
 8015916:	4604      	mov	r4, r0
 8015918:	a906      	add	r1, sp, #24
 801591a:	a80c      	add	r0, sp, #48	; 0x30
 801591c:	f7fc fe46 	bl	80125ac <uxr_serialize_READ_DATA_Payload>
 8015920:	4620      	mov	r0, r4
 8015922:	b014      	add	sp, #80	; 0x50
 8015924:	bd10      	pop	{r4, pc}
 8015926:	bf00      	nop

08015928 <read_submessage_format>:
 8015928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801592c:	b095      	sub	sp, #84	; 0x54
 801592e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8015932:	b113      	cbz	r3, 801593a <read_submessage_format+0x12>
 8015934:	b015      	add	sp, #84	; 0x54
 8015936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801593a:	4606      	mov	r6, r0
 801593c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801593e:	460c      	mov	r4, r1
 8015940:	4615      	mov	r5, r2
 8015942:	9004      	str	r0, [sp, #16]
 8015944:	4699      	mov	r9, r3
 8015946:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015948:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801594c:	9005      	str	r0, [sp, #20]
 801594e:	a80c      	add	r0, sp, #48	; 0x30
 8015950:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015954:	1a52      	subs	r2, r2, r1
 8015956:	f7fa f9e7 	bl	800fd28 <ucdr_init_buffer>
 801595a:	a80c      	add	r0, sp, #48	; 0x30
 801595c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015960:	f7fa f9b6 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 8015964:	69e2      	ldr	r2, [r4, #28]
 8015966:	b19a      	cbz	r2, 8015990 <read_submessage_format+0x68>
 8015968:	f1b8 0f07 	cmp.w	r8, #7
 801596c:	f882 9014 	strb.w	r9, [r2, #20]
 8015970:	d040      	beq.n	80159f4 <read_submessage_format+0xcc>
 8015972:	f1b8 0f08 	cmp.w	r8, #8
 8015976:	d02e      	beq.n	80159d6 <read_submessage_format+0xae>
 8015978:	f1b8 0f06 	cmp.w	r8, #6
 801597c:	d011      	beq.n	80159a2 <read_submessage_format+0x7a>
 801597e:	2301      	movs	r3, #1
 8015980:	7513      	strb	r3, [r2, #20]
 8015982:	4629      	mov	r1, r5
 8015984:	4620      	mov	r0, r4
 8015986:	f7fa fa23 	bl	800fdd0 <ucdr_advance_buffer>
 801598a:	b015      	add	sp, #84	; 0x54
 801598c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015990:	f1b8 0f07 	cmp.w	r8, #7
 8015994:	d02e      	beq.n	80159f4 <read_submessage_format+0xcc>
 8015996:	f1b8 0f08 	cmp.w	r8, #8
 801599a:	d01c      	beq.n	80159d6 <read_submessage_format+0xae>
 801599c:	f1b8 0f06 	cmp.w	r8, #6
 80159a0:	d1ef      	bne.n	8015982 <read_submessage_format+0x5a>
 80159a2:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 80159a6:	f1b8 0f00 	cmp.w	r8, #0
 80159aa:	d011      	beq.n	80159d0 <read_submessage_format+0xa8>
 80159ac:	ab0c      	add	r3, sp, #48	; 0x30
 80159ae:	9501      	str	r5, [sp, #4]
 80159b0:	463a      	mov	r2, r7
 80159b2:	4630      	mov	r0, r6
 80159b4:	9300      	str	r3, [sp, #0]
 80159b6:	2306      	movs	r3, #6
 80159b8:	f88d 3016 	strb.w	r3, [sp, #22]
 80159bc:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80159c0:	9302      	str	r3, [sp, #8]
 80159c2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80159c6:	47c0      	blx	r8
 80159c8:	2301      	movs	r3, #1
 80159ca:	69e2      	ldr	r2, [r4, #28]
 80159cc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80159d0:	2a00      	cmp	r2, #0
 80159d2:	d1d4      	bne.n	801597e <read_submessage_format+0x56>
 80159d4:	e7d5      	b.n	8015982 <read_submessage_format+0x5a>
 80159d6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d0f8      	beq.n	80159d0 <read_submessage_format+0xa8>
 80159de:	a80c      	add	r0, sp, #48	; 0x30
 80159e0:	a906      	add	r1, sp, #24
 80159e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80159e6:	f7fc fe87 	bl	80126f8 <uxr_deserialize_SampleIdentity>
 80159ea:	b9a0      	cbnz	r0, 8015a16 <read_submessage_format+0xee>
 80159ec:	69e2      	ldr	r2, [r4, #28]
 80159ee:	2a00      	cmp	r2, #0
 80159f0:	d1c5      	bne.n	801597e <read_submessage_format+0x56>
 80159f2:	e7c6      	b.n	8015982 <read_submessage_format+0x5a>
 80159f4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80159f8:	b13b      	cbz	r3, 8015a0a <read_submessage_format+0xe2>
 80159fa:	a906      	add	r1, sp, #24
 80159fc:	a80c      	add	r0, sp, #48	; 0x30
 80159fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015a02:	f7fc fb73 	bl	80120ec <uxr_deserialize_BaseObjectRequest>
 8015a06:	bb60      	cbnz	r0, 8015a62 <read_submessage_format+0x13a>
 8015a08:	69e2      	ldr	r2, [r4, #28]
 8015a0a:	68a3      	ldr	r3, [r4, #8]
 8015a0c:	442b      	add	r3, r5
 8015a0e:	60a3      	str	r3, [r4, #8]
 8015a10:	2a00      	cmp	r2, #0
 8015a12:	d1b4      	bne.n	801597e <read_submessage_format+0x56>
 8015a14:	e7b5      	b.n	8015982 <read_submessage_format+0x5a>
 8015a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a18:	a80c      	add	r0, sp, #48	; 0x30
 8015a1a:	eba8 0803 	sub.w	r8, r8, r3
 8015a1e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8015a22:	44a8      	add	r8, r5
 8015a24:	1a52      	subs	r2, r2, r1
 8015a26:	f7fa f97f 	bl	800fd28 <ucdr_init_buffer>
 8015a2a:	a80c      	add	r0, sp, #48	; 0x30
 8015a2c:	fa1f f888 	uxth.w	r8, r8
 8015a30:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015a34:	f7fa f94c 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 8015a38:	ab0c      	add	r3, sp, #48	; 0x30
 8015a3a:	2108      	movs	r1, #8
 8015a3c:	f8cd 8004 	str.w	r8, [sp, #4]
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	463a      	mov	r2, r7
 8015a44:	f88d 1016 	strb.w	r1, [sp, #22]
 8015a48:	ab06      	add	r3, sp, #24
 8015a4a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8015a4e:	4630      	mov	r0, r6
 8015a50:	9102      	str	r1, [sp, #8]
 8015a52:	9905      	ldr	r1, [sp, #20]
 8015a54:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8015a58:	47b8      	blx	r7
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8015a60:	e7c4      	b.n	80159ec <read_submessage_format+0xc4>
 8015a62:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8015a66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a68:	a80c      	add	r0, sp, #48	; 0x30
 8015a6a:	1a52      	subs	r2, r2, r1
 8015a6c:	eba8 0803 	sub.w	r8, r8, r3
 8015a70:	f7fa f95a 	bl	800fd28 <ucdr_init_buffer>
 8015a74:	a80c      	add	r0, sp, #48	; 0x30
 8015a76:	44a8      	add	r8, r5
 8015a78:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015a7c:	f7fa f928 	bl	800fcd0 <ucdr_set_on_full_buffer_callback>
 8015a80:	ab0c      	add	r3, sp, #48	; 0x30
 8015a82:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015a86:	fa1f f888 	uxth.w	r8, r8
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	463a      	mov	r2, r7
 8015a8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015a92:	4630      	mov	r0, r6
 8015a94:	f8cd 8004 	str.w	r8, [sp, #4]
 8015a98:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015a9c:	2107      	movs	r1, #7
 8015a9e:	f88d 1016 	strb.w	r1, [sp, #22]
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8015aa8:	9102      	str	r1, [sp, #8]
 8015aaa:	9905      	ldr	r1, [sp, #20]
 8015aac:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8015ab0:	47b8      	blx	r7
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8015ab8:	e7a6      	b.n	8015a08 <read_submessage_format+0xe0>
 8015aba:	bf00      	nop

08015abc <uxr_seq_num_add>:
 8015abc:	4408      	add	r0, r1
 8015abe:	b280      	uxth	r0, r0
 8015ac0:	4770      	bx	lr
 8015ac2:	bf00      	nop

08015ac4 <uxr_seq_num_sub>:
 8015ac4:	1a40      	subs	r0, r0, r1
 8015ac6:	b280      	uxth	r0, r0
 8015ac8:	4770      	bx	lr
 8015aca:	bf00      	nop

08015acc <uxr_seq_num_cmp>:
 8015acc:	4288      	cmp	r0, r1
 8015ace:	d011      	beq.n	8015af4 <uxr_seq_num_cmp+0x28>
 8015ad0:	d309      	bcc.n	8015ae6 <uxr_seq_num_cmp+0x1a>
 8015ad2:	4288      	cmp	r0, r1
 8015ad4:	d910      	bls.n	8015af8 <uxr_seq_num_cmp+0x2c>
 8015ad6:	1a40      	subs	r0, r0, r1
 8015ad8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015adc:	bfd4      	ite	le
 8015ade:	2001      	movle	r0, #1
 8015ae0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8015ae4:	4770      	bx	lr
 8015ae6:	1a0b      	subs	r3, r1, r0
 8015ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015aec:	daf1      	bge.n	8015ad2 <uxr_seq_num_cmp+0x6>
 8015aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015af2:	4770      	bx	lr
 8015af4:	2000      	movs	r0, #0
 8015af6:	4770      	bx	lr
 8015af8:	2001      	movs	r0, #1
 8015afa:	4770      	bx	lr

08015afc <uxr_init_framing_io>:
 8015afc:	2300      	movs	r3, #0
 8015afe:	7041      	strb	r1, [r0, #1]
 8015b00:	7003      	strb	r3, [r0, #0]
 8015b02:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015b04:	4770      	bx	lr
 8015b06:	bf00      	nop

08015b08 <uxr_write_framed_msg>:
 8015b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b0c:	4617      	mov	r7, r2
 8015b0e:	7842      	ldrb	r2, [r0, #1]
 8015b10:	460e      	mov	r6, r1
 8015b12:	b083      	sub	sp, #12
 8015b14:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8015b18:	469b      	mov	fp, r3
 8015b1a:	237e      	movs	r3, #126	; 0x7e
 8015b1c:	4604      	mov	r4, r0
 8015b1e:	2901      	cmp	r1, #1
 8015b20:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8015b24:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015b28:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8015b2c:	f240 8115 	bls.w	8015d5a <uxr_write_framed_msg+0x252>
 8015b30:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015b34:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8015b38:	2202      	movs	r2, #2
 8015b3a:	2901      	cmp	r1, #1
 8015b3c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015b40:	d952      	bls.n	8015be8 <uxr_write_framed_msg+0xe0>
 8015b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b44:	2103      	movs	r1, #3
 8015b46:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8015b4a:	b2dd      	uxtb	r5, r3
 8015b4c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015b50:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8015b54:	2a01      	cmp	r2, #1
 8015b56:	d95c      	bls.n	8015c12 <uxr_write_framed_msg+0x10a>
 8015b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b5a:	1862      	adds	r2, r4, r1
 8015b5c:	3101      	adds	r1, #1
 8015b5e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8015b62:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8015b66:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015b6a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8015b6e:	2a01      	cmp	r2, #1
 8015b70:	d961      	bls.n	8015c36 <uxr_write_framed_msg+0x12e>
 8015b72:	1c4a      	adds	r2, r1, #1
 8015b74:	4421      	add	r1, r4
 8015b76:	b2d2      	uxtb	r2, r2
 8015b78:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8015b7c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d06a      	beq.n	8015c5a <uxr_write_framed_msg+0x152>
 8015b84:	f04f 0800 	mov.w	r8, #0
 8015b88:	46c1      	mov	r9, r8
 8015b8a:	e016      	b.n	8015bba <uxr_write_framed_msg+0xb2>
 8015b8c:	2a29      	cmp	r2, #41	; 0x29
 8015b8e:	d868      	bhi.n	8015c62 <uxr_write_framed_msg+0x15a>
 8015b90:	18a0      	adds	r0, r4, r2
 8015b92:	3201      	adds	r2, #1
 8015b94:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015b98:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015b9c:	ea88 0101 	eor.w	r1, r8, r1
 8015ba0:	4b7d      	ldr	r3, [pc, #500]	; (8015d98 <uxr_write_framed_msg+0x290>)
 8015ba2:	f109 0901 	add.w	r9, r9, #1
 8015ba6:	b2c9      	uxtb	r1, r1
 8015ba8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015bac:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bb2:	454b      	cmp	r3, r9
 8015bb4:	d969      	bls.n	8015c8a <uxr_write_framed_msg+0x182>
 8015bb6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015bba:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8015bbe:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8015bc2:	2801      	cmp	r0, #1
 8015bc4:	d8e2      	bhi.n	8015b8c <uxr_write_framed_msg+0x84>
 8015bc6:	1c50      	adds	r0, r2, #1
 8015bc8:	b2c0      	uxtb	r0, r0
 8015bca:	2829      	cmp	r0, #41	; 0x29
 8015bcc:	d849      	bhi.n	8015c62 <uxr_write_framed_msg+0x15a>
 8015bce:	18a0      	adds	r0, r4, r2
 8015bd0:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8015bd4:	3202      	adds	r2, #2
 8015bd6:	f081 0520 	eor.w	r5, r1, #32
 8015bda:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015bde:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8015be2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015be6:	e7d9      	b.n	8015b9c <uxr_write_framed_msg+0x94>
 8015be8:	2104      	movs	r1, #4
 8015bea:	f04f 0c03 	mov.w	ip, #3
 8015bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bf0:	4422      	add	r2, r4
 8015bf2:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8015bf6:	44a4      	add	ip, r4
 8015bf8:	b2dd      	uxtb	r5, r3
 8015bfa:	f080 0020 	eor.w	r0, r0, #32
 8015bfe:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8015c02:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8015c06:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8015c0a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015c0e:	2a01      	cmp	r2, #1
 8015c10:	d8a2      	bhi.n	8015b58 <uxr_write_framed_msg+0x50>
 8015c12:	1862      	adds	r2, r4, r1
 8015c14:	207d      	movs	r0, #125	; 0x7d
 8015c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c18:	f085 0520 	eor.w	r5, r5, #32
 8015c1c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8015c20:	3102      	adds	r1, #2
 8015c22:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8015c26:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8015c2a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015c2e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8015c32:	2a01      	cmp	r2, #1
 8015c34:	d89d      	bhi.n	8015b72 <uxr_write_framed_msg+0x6a>
 8015c36:	1c4d      	adds	r5, r1, #1
 8015c38:	1c8a      	adds	r2, r1, #2
 8015c3a:	f080 0020 	eor.w	r0, r0, #32
 8015c3e:	4421      	add	r1, r4
 8015c40:	fa54 f585 	uxtab	r5, r4, r5
 8015c44:	b2d2      	uxtb	r2, r2
 8015c46:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015c4a:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8015c4e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8015c52:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d194      	bne.n	8015b84 <uxr_write_framed_msg+0x7c>
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015c60:	e019      	b.n	8015c96 <uxr_write_framed_msg+0x18e>
 8015c62:	2500      	movs	r5, #0
 8015c64:	e000      	b.n	8015c68 <uxr_write_framed_msg+0x160>
 8015c66:	b160      	cbz	r0, 8015c82 <uxr_write_framed_msg+0x17a>
 8015c68:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015c6c:	1b52      	subs	r2, r2, r5
 8015c6e:	4653      	mov	r3, sl
 8015c70:	4638      	mov	r0, r7
 8015c72:	4421      	add	r1, r4
 8015c74:	47b0      	blx	r6
 8015c76:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015c7a:	4405      	add	r5, r0
 8015c7c:	4295      	cmp	r5, r2
 8015c7e:	d3f2      	bcc.n	8015c66 <uxr_write_framed_msg+0x15e>
 8015c80:	d066      	beq.n	8015d50 <uxr_write_framed_msg+0x248>
 8015c82:	2000      	movs	r0, #0
 8015c84:	b003      	add	sp, #12
 8015c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c8a:	fa5f f188 	uxtb.w	r1, r8
 8015c8e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015c92:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015c96:	f04f 0900 	mov.w	r9, #0
 8015c9a:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8015c9e:	46c8      	mov	r8, r9
 8015ca0:	e013      	b.n	8015cca <uxr_write_framed_msg+0x1c2>
 8015ca2:	2a29      	cmp	r2, #41	; 0x29
 8015ca4:	d824      	bhi.n	8015cf0 <uxr_write_framed_msg+0x1e8>
 8015ca6:	18a3      	adds	r3, r4, r2
 8015ca8:	3201      	adds	r2, #1
 8015caa:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8015cae:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015cb2:	f109 0901 	add.w	r9, r9, #1
 8015cb6:	f1b9 0f02 	cmp.w	r9, #2
 8015cba:	d02d      	beq.n	8015d18 <uxr_write_framed_msg+0x210>
 8015cbc:	f109 0308 	add.w	r3, r9, #8
 8015cc0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015cc4:	446b      	add	r3, sp
 8015cc6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015cca:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015cce:	2b01      	cmp	r3, #1
 8015cd0:	d8e7      	bhi.n	8015ca2 <uxr_write_framed_msg+0x19a>
 8015cd2:	1c53      	adds	r3, r2, #1
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	2b29      	cmp	r3, #41	; 0x29
 8015cd8:	d80a      	bhi.n	8015cf0 <uxr_write_framed_msg+0x1e8>
 8015cda:	18a3      	adds	r3, r4, r2
 8015cdc:	f081 0120 	eor.w	r1, r1, #32
 8015ce0:	3202      	adds	r2, #2
 8015ce2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8015ce6:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8015cea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015cee:	e7e0      	b.n	8015cb2 <uxr_write_framed_msg+0x1aa>
 8015cf0:	2500      	movs	r5, #0
 8015cf2:	e001      	b.n	8015cf8 <uxr_write_framed_msg+0x1f0>
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	d0c4      	beq.n	8015c82 <uxr_write_framed_msg+0x17a>
 8015cf8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015cfc:	1b52      	subs	r2, r2, r5
 8015cfe:	4653      	mov	r3, sl
 8015d00:	4638      	mov	r0, r7
 8015d02:	4421      	add	r1, r4
 8015d04:	47b0      	blx	r6
 8015d06:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015d0a:	4405      	add	r5, r0
 8015d0c:	4295      	cmp	r5, r2
 8015d0e:	d3f1      	bcc.n	8015cf4 <uxr_write_framed_msg+0x1ec>
 8015d10:	d1b7      	bne.n	8015c82 <uxr_write_framed_msg+0x17a>
 8015d12:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8015d16:	e7d1      	b.n	8015cbc <uxr_write_framed_msg+0x1b4>
 8015d18:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015d1c:	b19a      	cbz	r2, 8015d46 <uxr_write_framed_msg+0x23e>
 8015d1e:	2500      	movs	r5, #0
 8015d20:	e001      	b.n	8015d26 <uxr_write_framed_msg+0x21e>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	d0ad      	beq.n	8015c82 <uxr_write_framed_msg+0x17a>
 8015d26:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015d2a:	1b52      	subs	r2, r2, r5
 8015d2c:	4653      	mov	r3, sl
 8015d2e:	4638      	mov	r0, r7
 8015d30:	4421      	add	r1, r4
 8015d32:	47b0      	blx	r6
 8015d34:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015d38:	4405      	add	r5, r0
 8015d3a:	4295      	cmp	r5, r2
 8015d3c:	d3f1      	bcc.n	8015d22 <uxr_write_framed_msg+0x21a>
 8015d3e:	d1a0      	bne.n	8015c82 <uxr_write_framed_msg+0x17a>
 8015d40:	2300      	movs	r3, #0
 8015d42:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d48:	b298      	uxth	r0, r3
 8015d4a:	b003      	add	sp, #12
 8015d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d50:	f04f 0300 	mov.w	r3, #0
 8015d54:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015d58:	e72a      	b.n	8015bb0 <uxr_write_framed_msg+0xa8>
 8015d5a:	217d      	movs	r1, #125	; 0x7d
 8015d5c:	f082 0220 	eor.w	r2, r2, #32
 8015d60:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8015d64:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015d68:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8015d6c:	2203      	movs	r2, #3
 8015d6e:	2901      	cmp	r1, #1
 8015d70:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015d74:	d803      	bhi.n	8015d7e <uxr_write_framed_msg+0x276>
 8015d76:	2105      	movs	r1, #5
 8015d78:	f04f 0c04 	mov.w	ip, #4
 8015d7c:	e737      	b.n	8015bee <uxr_write_framed_msg+0xe6>
 8015d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d80:	2104      	movs	r1, #4
 8015d82:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8015d86:	b2dd      	uxtb	r5, r3
 8015d88:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015d8c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8015d90:	2a01      	cmp	r2, #1
 8015d92:	f63f aee1 	bhi.w	8015b58 <uxr_write_framed_msg+0x50>
 8015d96:	e73c      	b.n	8015c12 <uxr_write_framed_msg+0x10a>
 8015d98:	08018bc8 	.word	0x08018bc8

08015d9c <uxr_framing_read_transport>:
 8015d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da0:	4604      	mov	r4, r0
 8015da2:	b085      	sub	sp, #20
 8015da4:	4692      	mov	sl, r2
 8015da6:	4689      	mov	r9, r1
 8015da8:	461d      	mov	r5, r3
 8015daa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015dac:	f7fb fb9c 	bl	80114e8 <uxr_millis>
 8015db0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015db4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8015db8:	4680      	mov	r8, r0
 8015dba:	42ba      	cmp	r2, r7
 8015dbc:	d05f      	beq.n	8015e7e <uxr_framing_read_transport+0xe2>
 8015dbe:	d817      	bhi.n	8015df0 <uxr_framing_read_transport+0x54>
 8015dc0:	3f01      	subs	r7, #1
 8015dc2:	1aba      	subs	r2, r7, r2
 8015dc4:	2700      	movs	r7, #0
 8015dc6:	b2d2      	uxtb	r2, r2
 8015dc8:	42b2      	cmp	r2, r6
 8015dca:	d81a      	bhi.n	8015e02 <uxr_framing_read_transport+0x66>
 8015dcc:	19d3      	adds	r3, r2, r7
 8015dce:	42b3      	cmp	r3, r6
 8015dd0:	d852      	bhi.n	8015e78 <uxr_framing_read_transport+0xdc>
 8015dd2:	b9d2      	cbnz	r2, 8015e0a <uxr_framing_read_transport+0x6e>
 8015dd4:	2600      	movs	r6, #0
 8015dd6:	f7fb fb87 	bl	80114e8 <uxr_millis>
 8015dda:	682b      	ldr	r3, [r5, #0]
 8015ddc:	eba0 0008 	sub.w	r0, r0, r8
 8015de0:	1a1b      	subs	r3, r3, r0
 8015de2:	4630      	mov	r0, r6
 8015de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015de8:	602b      	str	r3, [r5, #0]
 8015dea:	b005      	add	sp, #20
 8015dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df0:	2f00      	cmp	r7, #0
 8015df2:	d060      	beq.n	8015eb6 <uxr_framing_read_transport+0x11a>
 8015df4:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8015df8:	3f01      	subs	r7, #1
 8015dfa:	b2d2      	uxtb	r2, r2
 8015dfc:	b2ff      	uxtb	r7, r7
 8015dfe:	42b2      	cmp	r2, r6
 8015e00:	d9e4      	bls.n	8015dcc <uxr_framing_read_transport+0x30>
 8015e02:	b2f2      	uxtb	r2, r6
 8015e04:	2700      	movs	r7, #0
 8015e06:	2a00      	cmp	r2, #0
 8015e08:	d0e4      	beq.n	8015dd4 <uxr_framing_read_transport+0x38>
 8015e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e0c:	4650      	mov	r0, sl
 8015e0e:	9203      	str	r2, [sp, #12]
 8015e10:	9300      	str	r3, [sp, #0]
 8015e12:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015e16:	682b      	ldr	r3, [r5, #0]
 8015e18:	3102      	adds	r1, #2
 8015e1a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8015ec0 <uxr_framing_read_transport+0x124>
 8015e1e:	4421      	add	r1, r4
 8015e20:	47c8      	blx	r9
 8015e22:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015e26:	4606      	mov	r6, r0
 8015e28:	4403      	add	r3, r0
 8015e2a:	0859      	lsrs	r1, r3, #1
 8015e2c:	fbab 2101 	umull	r2, r1, fp, r1
 8015e30:	222a      	movs	r2, #42	; 0x2a
 8015e32:	0889      	lsrs	r1, r1, #2
 8015e34:	fb02 3111 	mls	r1, r2, r1, r3
 8015e38:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015e3c:	2800      	cmp	r0, #0
 8015e3e:	d0c9      	beq.n	8015dd4 <uxr_framing_read_transport+0x38>
 8015e40:	9a03      	ldr	r2, [sp, #12]
 8015e42:	4290      	cmp	r0, r2
 8015e44:	d1c7      	bne.n	8015dd6 <uxr_framing_read_transport+0x3a>
 8015e46:	2f00      	cmp	r7, #0
 8015e48:	d0c5      	beq.n	8015dd6 <uxr_framing_read_transport+0x3a>
 8015e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e4c:	3102      	adds	r1, #2
 8015e4e:	463a      	mov	r2, r7
 8015e50:	4650      	mov	r0, sl
 8015e52:	4421      	add	r1, r4
 8015e54:	9300      	str	r3, [sp, #0]
 8015e56:	2300      	movs	r3, #0
 8015e58:	47c8      	blx	r9
 8015e5a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015e5e:	4406      	add	r6, r0
 8015e60:	1813      	adds	r3, r2, r0
 8015e62:	085a      	lsrs	r2, r3, #1
 8015e64:	fbab 1b02 	umull	r1, fp, fp, r2
 8015e68:	222a      	movs	r2, #42	; 0x2a
 8015e6a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8015e6e:	fb02 331b 	mls	r3, r2, fp, r3
 8015e72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015e76:	e7ae      	b.n	8015dd6 <uxr_framing_read_transport+0x3a>
 8015e78:	1ab6      	subs	r6, r6, r2
 8015e7a:	b2f7      	uxtb	r7, r6
 8015e7c:	e7a9      	b.n	8015dd2 <uxr_framing_read_transport+0x36>
 8015e7e:	2300      	movs	r3, #0
 8015e80:	2e28      	cmp	r6, #40	; 0x28
 8015e82:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8015e84:	d9bd      	bls.n	8015e02 <uxr_framing_read_transport+0x66>
 8015e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e88:	2229      	movs	r2, #41	; 0x29
 8015e8a:	1ca1      	adds	r1, r4, #2
 8015e8c:	4650      	mov	r0, sl
 8015e8e:	9300      	str	r3, [sp, #0]
 8015e90:	682b      	ldr	r3, [r5, #0]
 8015e92:	47c8      	blx	r9
 8015e94:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015e98:	4606      	mov	r6, r0
 8015e9a:	212a      	movs	r1, #42	; 0x2a
 8015e9c:	4403      	add	r3, r0
 8015e9e:	4808      	ldr	r0, [pc, #32]	; (8015ec0 <uxr_framing_read_transport+0x124>)
 8015ea0:	085a      	lsrs	r2, r3, #1
 8015ea2:	fba0 0202 	umull	r0, r2, r0, r2
 8015ea6:	0892      	lsrs	r2, r2, #2
 8015ea8:	fb01 3312 	mls	r3, r1, r2, r3
 8015eac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015eb0:	2e00      	cmp	r6, #0
 8015eb2:	d08f      	beq.n	8015dd4 <uxr_framing_read_transport+0x38>
 8015eb4:	e78f      	b.n	8015dd6 <uxr_framing_read_transport+0x3a>
 8015eb6:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8015eba:	b2d2      	uxtb	r2, r2
 8015ebc:	e784      	b.n	8015dc8 <uxr_framing_read_transport+0x2c>
 8015ebe:	bf00      	nop
 8015ec0:	30c30c31 	.word	0x30c30c31

08015ec4 <uxr_read_framed_msg>:
 8015ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ec8:	461e      	mov	r6, r3
 8015eca:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015ece:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	4688      	mov	r8, r1
 8015ed8:	429d      	cmp	r5, r3
 8015eda:	4691      	mov	r9, r2
 8015edc:	f000 818c 	beq.w	80161f8 <uxr_read_framed_msg+0x334>
 8015ee0:	7823      	ldrb	r3, [r4, #0]
 8015ee2:	4dc3      	ldr	r5, [pc, #780]	; (80161f0 <uxr_read_framed_msg+0x32c>)
 8015ee4:	4fc3      	ldr	r7, [pc, #780]	; (80161f4 <uxr_read_framed_msg+0x330>)
 8015ee6:	2b07      	cmp	r3, #7
 8015ee8:	d8fd      	bhi.n	8015ee6 <uxr_read_framed_msg+0x22>
 8015eea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015eee:	011c      	.short	0x011c
 8015ef0:	00d900fb 	.word	0x00d900fb
 8015ef4:	008f00ba 	.word	0x008f00ba
 8015ef8:	00320051 	.word	0x00320051
 8015efc:	0008      	.short	0x0008
 8015efe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015f02:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015f06:	4299      	cmp	r1, r3
 8015f08:	f000 814d 	beq.w	80161a6 <uxr_read_framed_msg+0x2e2>
 8015f0c:	18e2      	adds	r2, r4, r3
 8015f0e:	7892      	ldrb	r2, [r2, #2]
 8015f10:	2a7d      	cmp	r2, #125	; 0x7d
 8015f12:	f000 81b8 	beq.w	8016286 <uxr_read_framed_msg+0x3c2>
 8015f16:	3301      	adds	r3, #1
 8015f18:	212a      	movs	r1, #42	; 0x2a
 8015f1a:	2a7e      	cmp	r2, #126	; 0x7e
 8015f1c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015f20:	fba5 c000 	umull	ip, r0, r5, r0
 8015f24:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015f28:	fb01 3310 	mls	r3, r1, r0, r3
 8015f2c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015f30:	f000 8257 	beq.w	80163e2 <uxr_read_framed_msg+0x51e>
 8015f34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015f36:	2000      	movs	r0, #0
 8015f38:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015f3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015f3e:	7020      	strb	r0, [r4, #0]
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	4299      	cmp	r1, r3
 8015f44:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015f46:	f000 8178 	beq.w	801623a <uxr_read_framed_msg+0x376>
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	b003      	add	sp, #12
 8015f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f52:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015f56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015f5a:	4298      	cmp	r0, r3
 8015f5c:	f000 8132 	beq.w	80161c4 <uxr_read_framed_msg+0x300>
 8015f60:	18e2      	adds	r2, r4, r3
 8015f62:	7891      	ldrb	r1, [r2, #2]
 8015f64:	297d      	cmp	r1, #125	; 0x7d
 8015f66:	f000 8170 	beq.w	801624a <uxr_read_framed_msg+0x386>
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	202a      	movs	r0, #42	; 0x2a
 8015f6e:	297e      	cmp	r1, #126	; 0x7e
 8015f70:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015f74:	fba5 c202 	umull	ip, r2, r5, r2
 8015f78:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015f7c:	fb00 3312 	mls	r3, r0, r2, r3
 8015f80:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015f84:	f000 821d 	beq.w	80163c2 <uxr_read_framed_msg+0x4fe>
 8015f88:	2307      	movs	r3, #7
 8015f8a:	86a1      	strh	r1, [r4, #52]	; 0x34
 8015f8c:	7023      	strb	r3, [r4, #0]
 8015f8e:	e7aa      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 8015f90:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015f92:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015f96:	459e      	cmp	lr, r3
 8015f98:	d827      	bhi.n	8015fea <uxr_read_framed_msg+0x126>
 8015f9a:	e032      	b.n	8016002 <uxr_read_framed_msg+0x13e>
 8015f9c:	fba5 b101 	umull	fp, r1, r5, r1
 8015fa0:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015fa4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015fa8:	0889      	lsrs	r1, r1, #2
 8015faa:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015fae:	fb0b 0111 	mls	r1, fp, r1, r0
 8015fb2:	f000 80d4 	beq.w	801615e <uxr_read_framed_msg+0x29a>
 8015fb6:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015fba:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8015fbe:	f000 80cb 	beq.w	8016158 <uxr_read_framed_msg+0x294>
 8015fc2:	f806 c003 	strb.w	ip, [r6, r3]
 8015fc6:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8015fc8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015fca:	ea80 010c 	eor.w	r1, r0, ip
 8015fce:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	b2c9      	uxtb	r1, r1
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015fdc:	4573      	cmp	r3, lr
 8015fde:	8663      	strh	r3, [r4, #50]	; 0x32
 8015fe0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015fe4:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015fe6:	f080 811d 	bcs.w	8016224 <uxr_read_framed_msg+0x360>
 8015fea:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015fee:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015ff2:	1c50      	adds	r0, r2, #1
 8015ff4:	eb04 0c02 	add.w	ip, r4, r2
 8015ff8:	4592      	cmp	sl, r2
 8015ffa:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015ffe:	d1cd      	bne.n	8015f9c <uxr_read_framed_msg+0xd8>
 8016000:	459e      	cmp	lr, r3
 8016002:	f040 8114 	bne.w	801622e <uxr_read_framed_msg+0x36a>
 8016006:	2306      	movs	r3, #6
 8016008:	7023      	strb	r3, [r4, #0]
 801600a:	e76c      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 801600c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016010:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016014:	4298      	cmp	r0, r3
 8016016:	f000 80c6 	beq.w	80161a6 <uxr_read_framed_msg+0x2e2>
 801601a:	18e2      	adds	r2, r4, r3
 801601c:	7891      	ldrb	r1, [r2, #2]
 801601e:	297d      	cmp	r1, #125	; 0x7d
 8016020:	f000 8193 	beq.w	801634a <uxr_read_framed_msg+0x486>
 8016024:	3301      	adds	r3, #1
 8016026:	202a      	movs	r0, #42	; 0x2a
 8016028:	297e      	cmp	r1, #126	; 0x7e
 801602a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801602e:	fba5 c202 	umull	ip, r2, r5, r2
 8016032:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016036:	fb00 3312 	mls	r3, r0, r2, r3
 801603a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801603e:	f000 81d0 	beq.w	80163e2 <uxr_read_framed_msg+0x51e>
 8016042:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016044:	2000      	movs	r0, #0
 8016046:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801604a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801604c:	8660      	strh	r0, [r4, #50]	; 0x32
 801604e:	b29b      	uxth	r3, r3
 8016050:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016052:	428b      	cmp	r3, r1
 8016054:	8623      	strh	r3, [r4, #48]	; 0x30
 8016056:	f240 80e2 	bls.w	801621e <uxr_read_framed_msg+0x35a>
 801605a:	7020      	strb	r0, [r4, #0]
 801605c:	b003      	add	sp, #12
 801605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016062:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016066:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801606a:	4298      	cmp	r0, r3
 801606c:	f000 80aa 	beq.w	80161c4 <uxr_read_framed_msg+0x300>
 8016070:	18e2      	adds	r2, r4, r3
 8016072:	7891      	ldrb	r1, [r2, #2]
 8016074:	297d      	cmp	r1, #125	; 0x7d
 8016076:	f000 8186 	beq.w	8016386 <uxr_read_framed_msg+0x4c2>
 801607a:	3301      	adds	r3, #1
 801607c:	202a      	movs	r0, #42	; 0x2a
 801607e:	297e      	cmp	r1, #126	; 0x7e
 8016080:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016084:	fba5 c202 	umull	ip, r2, r5, r2
 8016088:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801608c:	fb00 3312 	mls	r3, r0, r2, r3
 8016090:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016094:	f000 8195 	beq.w	80163c2 <uxr_read_framed_msg+0x4fe>
 8016098:	2304      	movs	r3, #4
 801609a:	8621      	strh	r1, [r4, #48]	; 0x30
 801609c:	7023      	strb	r3, [r4, #0]
 801609e:	e722      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 80160a0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80160a4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80160a8:	4290      	cmp	r0, r2
 80160aa:	f000 80b4 	beq.w	8016216 <uxr_read_framed_msg+0x352>
 80160ae:	18a3      	adds	r3, r4, r2
 80160b0:	7899      	ldrb	r1, [r3, #2]
 80160b2:	297d      	cmp	r1, #125	; 0x7d
 80160b4:	f000 8107 	beq.w	80162c6 <uxr_read_framed_msg+0x402>
 80160b8:	3201      	adds	r2, #1
 80160ba:	232a      	movs	r3, #42	; 0x2a
 80160bc:	297e      	cmp	r1, #126	; 0x7e
 80160be:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80160c2:	fba5 c000 	umull	ip, r0, r5, r0
 80160c6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80160ca:	fb03 2210 	mls	r2, r3, r0, r2
 80160ce:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80160d2:	f000 818a 	beq.w	80163ea <uxr_read_framed_msg+0x526>
 80160d6:	7863      	ldrb	r3, [r4, #1]
 80160d8:	428b      	cmp	r3, r1
 80160da:	bf0c      	ite	eq
 80160dc:	2303      	moveq	r3, #3
 80160de:	2300      	movne	r3, #0
 80160e0:	7023      	strb	r3, [r4, #0]
 80160e2:	e700      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 80160e4:	2300      	movs	r3, #0
 80160e6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80160ea:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80160ee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80160f2:	4299      	cmp	r1, r3
 80160f4:	d06a      	beq.n	80161cc <uxr_read_framed_msg+0x308>
 80160f6:	18e2      	adds	r2, r4, r3
 80160f8:	7890      	ldrb	r0, [r2, #2]
 80160fa:	287d      	cmp	r0, #125	; 0x7d
 80160fc:	f000 8100 	beq.w	8016300 <uxr_read_framed_msg+0x43c>
 8016100:	3301      	adds	r3, #1
 8016102:	212a      	movs	r1, #42	; 0x2a
 8016104:	287e      	cmp	r0, #126	; 0x7e
 8016106:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801610a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801610e:	fba5 c202 	umull	ip, r2, r5, r2
 8016112:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016116:	fb01 3312 	mls	r3, r1, r2, r3
 801611a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801611e:	d055      	beq.n	80161cc <uxr_read_framed_msg+0x308>
 8016120:	2302      	movs	r3, #2
 8016122:	7023      	strb	r3, [r4, #0]
 8016124:	e6df      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 8016126:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801612a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801612e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016132:	1c5a      	adds	r2, r3, #1
 8016134:	459c      	cmp	ip, r3
 8016136:	eb04 0103 	add.w	r1, r4, r3
 801613a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801613e:	f43f af04 	beq.w	8015f4a <uxr_read_framed_msg+0x86>
 8016142:	fba5 0303 	umull	r0, r3, r5, r3
 8016146:	7889      	ldrb	r1, [r1, #2]
 8016148:	089b      	lsrs	r3, r3, #2
 801614a:	297e      	cmp	r1, #126	; 0x7e
 801614c:	fb0e 2313 	mls	r3, lr, r3, r2
 8016150:	b2db      	uxtb	r3, r3
 8016152:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016156:	d1ec      	bne.n	8016132 <uxr_read_framed_msg+0x26e>
 8016158:	2301      	movs	r3, #1
 801615a:	7023      	strb	r3, [r4, #0]
 801615c:	e6c3      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 801615e:	1c50      	adds	r0, r2, #1
 8016160:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8016164:	3202      	adds	r2, #2
 8016166:	0841      	lsrs	r1, r0, #1
 8016168:	fba5 c101 	umull	ip, r1, r5, r1
 801616c:	0889      	lsrs	r1, r1, #2
 801616e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016172:	1860      	adds	r0, r4, r1
 8016174:	b2c9      	uxtb	r1, r1
 8016176:	458a      	cmp	sl, r1
 8016178:	f43f af42 	beq.w	8016000 <uxr_read_framed_msg+0x13c>
 801617c:	0851      	lsrs	r1, r2, #1
 801617e:	7880      	ldrb	r0, [r0, #2]
 8016180:	fba5 a101 	umull	sl, r1, r5, r1
 8016184:	287e      	cmp	r0, #126	; 0x7e
 8016186:	f080 0c20 	eor.w	ip, r0, #32
 801618a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801618e:	fb0b 2211 	mls	r2, fp, r1, r2
 8016192:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016196:	f47f af14 	bne.w	8015fc2 <uxr_read_framed_msg+0xfe>
 801619a:	459e      	cmp	lr, r3
 801619c:	f43f af33 	beq.w	8016006 <uxr_read_framed_msg+0x142>
 80161a0:	2301      	movs	r3, #1
 80161a2:	7023      	strb	r3, [r4, #0]
 80161a4:	e69f      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 80161a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161a8:	9300      	str	r3, [sp, #0]
 80161aa:	2301      	movs	r3, #1
 80161ac:	9301      	str	r3, [sp, #4]
 80161ae:	464a      	mov	r2, r9
 80161b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161b2:	4641      	mov	r1, r8
 80161b4:	4620      	mov	r0, r4
 80161b6:	f7ff fdf1 	bl	8015d9c <uxr_framing_read_transport>
 80161ba:	2800      	cmp	r0, #0
 80161bc:	f43f aec5 	beq.w	8015f4a <uxr_read_framed_msg+0x86>
 80161c0:	7823      	ldrb	r3, [r4, #0]
 80161c2:	e690      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 80161c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	2302      	movs	r3, #2
 80161ca:	e7ef      	b.n	80161ac <uxr_read_framed_msg+0x2e8>
 80161cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161ce:	464a      	mov	r2, r9
 80161d0:	4641      	mov	r1, r8
 80161d2:	4620      	mov	r0, r4
 80161d4:	9300      	str	r3, [sp, #0]
 80161d6:	2304      	movs	r3, #4
 80161d8:	9301      	str	r3, [sp, #4]
 80161da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161dc:	f7ff fdde 	bl	8015d9c <uxr_framing_read_transport>
 80161e0:	2800      	cmp	r0, #0
 80161e2:	d1ed      	bne.n	80161c0 <uxr_read_framed_msg+0x2fc>
 80161e4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80161e8:	2b7e      	cmp	r3, #126	; 0x7e
 80161ea:	d0e9      	beq.n	80161c0 <uxr_read_framed_msg+0x2fc>
 80161ec:	e6ad      	b.n	8015f4a <uxr_read_framed_msg+0x86>
 80161ee:	bf00      	nop
 80161f0:	30c30c31 	.word	0x30c30c31
 80161f4:	08018bc8 	.word	0x08018bc8
 80161f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	2305      	movs	r3, #5
 80161fe:	9301      	str	r3, [sp, #4]
 8016200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016202:	f7ff fdcb 	bl	8015d9c <uxr_framing_read_transport>
 8016206:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801620a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801620e:	429a      	cmp	r2, r3
 8016210:	f43f ae9b 	beq.w	8015f4a <uxr_read_framed_msg+0x86>
 8016214:	e664      	b.n	8015ee0 <uxr_read_framed_msg+0x1c>
 8016216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016218:	9300      	str	r3, [sp, #0]
 801621a:	2303      	movs	r3, #3
 801621c:	e7c6      	b.n	80161ac <uxr_read_framed_msg+0x2e8>
 801621e:	2305      	movs	r3, #5
 8016220:	7023      	strb	r3, [r4, #0]
 8016222:	e660      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 8016224:	f43f aeef 	beq.w	8016006 <uxr_read_framed_msg+0x142>
 8016228:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801622c:	d094      	beq.n	8016158 <uxr_read_framed_msg+0x294>
 801622e:	ebae 0303 	sub.w	r3, lr, r3
 8016232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016234:	3302      	adds	r3, #2
 8016236:	9200      	str	r2, [sp, #0]
 8016238:	e7b8      	b.n	80161ac <uxr_read_framed_msg+0x2e8>
 801623a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801623e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016240:	7013      	strb	r3, [r2, #0]
 8016242:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8016244:	b003      	add	sp, #12
 8016246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801624a:	1c59      	adds	r1, r3, #1
 801624c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016250:	084a      	lsrs	r2, r1, #1
 8016252:	fba5 e202 	umull	lr, r2, r5, r2
 8016256:	0892      	lsrs	r2, r2, #2
 8016258:	fb0c 1212 	mls	r2, ip, r2, r1
 801625c:	b2d1      	uxtb	r1, r2
 801625e:	4288      	cmp	r0, r1
 8016260:	d0b0      	beq.n	80161c4 <uxr_read_framed_msg+0x300>
 8016262:	3302      	adds	r3, #2
 8016264:	4422      	add	r2, r4
 8016266:	7891      	ldrb	r1, [r2, #2]
 8016268:	085a      	lsrs	r2, r3, #1
 801626a:	fba5 0202 	umull	r0, r2, r5, r2
 801626e:	297e      	cmp	r1, #126	; 0x7e
 8016270:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016274:	fb0c 3312 	mls	r3, ip, r2, r3
 8016278:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801627c:	f000 80a1 	beq.w	80163c2 <uxr_read_framed_msg+0x4fe>
 8016280:	f081 0120 	eor.w	r1, r1, #32
 8016284:	e680      	b.n	8015f88 <uxr_read_framed_msg+0xc4>
 8016286:	f103 0c01 	add.w	ip, r3, #1
 801628a:	202a      	movs	r0, #42	; 0x2a
 801628c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016290:	fba5 e202 	umull	lr, r2, r5, r2
 8016294:	0892      	lsrs	r2, r2, #2
 8016296:	fb00 c212 	mls	r2, r0, r2, ip
 801629a:	fa5f fc82 	uxtb.w	ip, r2
 801629e:	4561      	cmp	r1, ip
 80162a0:	d081      	beq.n	80161a6 <uxr_read_framed_msg+0x2e2>
 80162a2:	3302      	adds	r3, #2
 80162a4:	4422      	add	r2, r4
 80162a6:	0859      	lsrs	r1, r3, #1
 80162a8:	7892      	ldrb	r2, [r2, #2]
 80162aa:	fba5 c101 	umull	ip, r1, r5, r1
 80162ae:	2a7e      	cmp	r2, #126	; 0x7e
 80162b0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80162b4:	fb00 3311 	mls	r3, r0, r1, r3
 80162b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80162bc:	f000 8091 	beq.w	80163e2 <uxr_read_framed_msg+0x51e>
 80162c0:	f082 0220 	eor.w	r2, r2, #32
 80162c4:	e636      	b.n	8015f34 <uxr_read_framed_msg+0x70>
 80162c6:	1c51      	adds	r1, r2, #1
 80162c8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80162cc:	084b      	lsrs	r3, r1, #1
 80162ce:	fba5 e303 	umull	lr, r3, r5, r3
 80162d2:	089b      	lsrs	r3, r3, #2
 80162d4:	fb0c 1313 	mls	r3, ip, r3, r1
 80162d8:	b2d9      	uxtb	r1, r3
 80162da:	4288      	cmp	r0, r1
 80162dc:	d09b      	beq.n	8016216 <uxr_read_framed_msg+0x352>
 80162de:	3202      	adds	r2, #2
 80162e0:	4423      	add	r3, r4
 80162e2:	0850      	lsrs	r0, r2, #1
 80162e4:	789b      	ldrb	r3, [r3, #2]
 80162e6:	fba5 1000 	umull	r1, r0, r5, r0
 80162ea:	2b7e      	cmp	r3, #126	; 0x7e
 80162ec:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80162f0:	fb0c 2210 	mls	r2, ip, r0, r2
 80162f4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80162f8:	d077      	beq.n	80163ea <uxr_read_framed_msg+0x526>
 80162fa:	f083 0120 	eor.w	r1, r3, #32
 80162fe:	e6ea      	b.n	80160d6 <uxr_read_framed_msg+0x212>
 8016300:	f103 0c01 	add.w	ip, r3, #1
 8016304:	202a      	movs	r0, #42	; 0x2a
 8016306:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801630a:	fba5 e202 	umull	lr, r2, r5, r2
 801630e:	0892      	lsrs	r2, r2, #2
 8016310:	fb00 c212 	mls	r2, r0, r2, ip
 8016314:	fa5f fc82 	uxtb.w	ip, r2
 8016318:	4561      	cmp	r1, ip
 801631a:	f43f af57 	beq.w	80161cc <uxr_read_framed_msg+0x308>
 801631e:	3302      	adds	r3, #2
 8016320:	4422      	add	r2, r4
 8016322:	7891      	ldrb	r1, [r2, #2]
 8016324:	085a      	lsrs	r2, r3, #1
 8016326:	fba5 c202 	umull	ip, r2, r5, r2
 801632a:	297e      	cmp	r1, #126	; 0x7e
 801632c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016330:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016334:	fb00 3312 	mls	r3, r0, r2, r3
 8016338:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801633c:	f43f af46 	beq.w	80161cc <uxr_read_framed_msg+0x308>
 8016340:	f081 0120 	eor.w	r1, r1, #32
 8016344:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016348:	e6ea      	b.n	8016120 <uxr_read_framed_msg+0x25c>
 801634a:	1c59      	adds	r1, r3, #1
 801634c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016350:	084a      	lsrs	r2, r1, #1
 8016352:	fba5 e202 	umull	lr, r2, r5, r2
 8016356:	0892      	lsrs	r2, r2, #2
 8016358:	fb0c 1212 	mls	r2, ip, r2, r1
 801635c:	b2d1      	uxtb	r1, r2
 801635e:	4288      	cmp	r0, r1
 8016360:	f43f af21 	beq.w	80161a6 <uxr_read_framed_msg+0x2e2>
 8016364:	3302      	adds	r3, #2
 8016366:	4422      	add	r2, r4
 8016368:	7891      	ldrb	r1, [r2, #2]
 801636a:	085a      	lsrs	r2, r3, #1
 801636c:	fba5 0202 	umull	r0, r2, r5, r2
 8016370:	297e      	cmp	r1, #126	; 0x7e
 8016372:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016376:	fb0c 3312 	mls	r3, ip, r2, r3
 801637a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801637e:	d030      	beq.n	80163e2 <uxr_read_framed_msg+0x51e>
 8016380:	f081 0120 	eor.w	r1, r1, #32
 8016384:	e65d      	b.n	8016042 <uxr_read_framed_msg+0x17e>
 8016386:	1c59      	adds	r1, r3, #1
 8016388:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801638c:	084a      	lsrs	r2, r1, #1
 801638e:	fba5 e202 	umull	lr, r2, r5, r2
 8016392:	0892      	lsrs	r2, r2, #2
 8016394:	fb0c 1212 	mls	r2, ip, r2, r1
 8016398:	b2d1      	uxtb	r1, r2
 801639a:	4288      	cmp	r0, r1
 801639c:	f43f af12 	beq.w	80161c4 <uxr_read_framed_msg+0x300>
 80163a0:	3302      	adds	r3, #2
 80163a2:	4422      	add	r2, r4
 80163a4:	7891      	ldrb	r1, [r2, #2]
 80163a6:	085a      	lsrs	r2, r3, #1
 80163a8:	fba5 0202 	umull	r0, r2, r5, r2
 80163ac:	297e      	cmp	r1, #126	; 0x7e
 80163ae:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80163b2:	fb0c 3312 	mls	r3, ip, r2, r3
 80163b6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80163ba:	d002      	beq.n	80163c2 <uxr_read_framed_msg+0x4fe>
 80163bc:	f081 0120 	eor.w	r1, r1, #32
 80163c0:	e66a      	b.n	8016098 <uxr_read_framed_msg+0x1d4>
 80163c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163c4:	9300      	str	r3, [sp, #0]
 80163c6:	2302      	movs	r3, #2
 80163c8:	9301      	str	r3, [sp, #4]
 80163ca:	464a      	mov	r2, r9
 80163cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163ce:	4641      	mov	r1, r8
 80163d0:	4620      	mov	r0, r4
 80163d2:	f7ff fce3 	bl	8015d9c <uxr_framing_read_transport>
 80163d6:	2800      	cmp	r0, #0
 80163d8:	f47f aef2 	bne.w	80161c0 <uxr_read_framed_msg+0x2fc>
 80163dc:	2301      	movs	r3, #1
 80163de:	7023      	strb	r3, [r4, #0]
 80163e0:	e581      	b.n	8015ee6 <uxr_read_framed_msg+0x22>
 80163e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163e4:	9300      	str	r3, [sp, #0]
 80163e6:	2301      	movs	r3, #1
 80163e8:	e7ee      	b.n	80163c8 <uxr_read_framed_msg+0x504>
 80163ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163ec:	9300      	str	r3, [sp, #0]
 80163ee:	2303      	movs	r3, #3
 80163f0:	e7ea      	b.n	80163c8 <uxr_read_framed_msg+0x504>
 80163f2:	bf00      	nop

080163f4 <rcl_get_default_domain_id>:
 80163f4:	b530      	push	{r4, r5, lr}
 80163f6:	2300      	movs	r3, #0
 80163f8:	b083      	sub	sp, #12
 80163fa:	9300      	str	r3, [sp, #0]
 80163fc:	b1d0      	cbz	r0, 8016434 <rcl_get_default_domain_id+0x40>
 80163fe:	4604      	mov	r4, r0
 8016400:	4669      	mov	r1, sp
 8016402:	4815      	ldr	r0, [pc, #84]	; (8016458 <rcl_get_default_domain_id+0x64>)
 8016404:	f7fd f912 	bl	801362c <rcutils_get_env>
 8016408:	4602      	mov	r2, r0
 801640a:	b110      	cbz	r0, 8016412 <rcl_get_default_domain_id+0x1e>
 801640c:	2001      	movs	r0, #1
 801640e:	b003      	add	sp, #12
 8016410:	bd30      	pop	{r4, r5, pc}
 8016412:	9b00      	ldr	r3, [sp, #0]
 8016414:	b18b      	cbz	r3, 801643a <rcl_get_default_domain_id+0x46>
 8016416:	7818      	ldrb	r0, [r3, #0]
 8016418:	2800      	cmp	r0, #0
 801641a:	d0f8      	beq.n	801640e <rcl_get_default_domain_id+0x1a>
 801641c:	a901      	add	r1, sp, #4
 801641e:	4618      	mov	r0, r3
 8016420:	9201      	str	r2, [sp, #4]
 8016422:	f000 fe7b 	bl	801711c <strtoul>
 8016426:	4605      	mov	r5, r0
 8016428:	b150      	cbz	r0, 8016440 <rcl_get_default_domain_id+0x4c>
 801642a:	1c43      	adds	r3, r0, #1
 801642c:	d00d      	beq.n	801644a <rcl_get_default_domain_id+0x56>
 801642e:	2000      	movs	r0, #0
 8016430:	6025      	str	r5, [r4, #0]
 8016432:	e7ec      	b.n	801640e <rcl_get_default_domain_id+0x1a>
 8016434:	200b      	movs	r0, #11
 8016436:	b003      	add	sp, #12
 8016438:	bd30      	pop	{r4, r5, pc}
 801643a:	4618      	mov	r0, r3
 801643c:	b003      	add	sp, #12
 801643e:	bd30      	pop	{r4, r5, pc}
 8016440:	9b01      	ldr	r3, [sp, #4]
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d0f2      	beq.n	801642e <rcl_get_default_domain_id+0x3a>
 8016448:	e7e0      	b.n	801640c <rcl_get_default_domain_id+0x18>
 801644a:	f001 f889 	bl	8017560 <__errno>
 801644e:	6803      	ldr	r3, [r0, #0]
 8016450:	2b22      	cmp	r3, #34	; 0x22
 8016452:	d1ec      	bne.n	801642e <rcl_get_default_domain_id+0x3a>
 8016454:	e7da      	b.n	801640c <rcl_get_default_domain_id+0x18>
 8016456:	bf00      	nop
 8016458:	08018dc8 	.word	0x08018dc8

0801645c <rcl_expand_topic_name>:
 801645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016460:	b08d      	sub	sp, #52	; 0x34
 8016462:	4698      	mov	r8, r3
 8016464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016466:	9207      	str	r2, [sp, #28]
 8016468:	2b00      	cmp	r3, #0
 801646a:	bf18      	it	ne
 801646c:	f1b8 0f00 	cmpne.w	r8, #0
 8016470:	bf0c      	ite	eq
 8016472:	2301      	moveq	r3, #1
 8016474:	2300      	movne	r3, #0
 8016476:	2a00      	cmp	r2, #0
 8016478:	bf08      	it	eq
 801647a:	f043 0301 	orreq.w	r3, r3, #1
 801647e:	2900      	cmp	r1, #0
 8016480:	bf08      	it	eq
 8016482:	f043 0301 	orreq.w	r3, r3, #1
 8016486:	2b00      	cmp	r3, #0
 8016488:	d13d      	bne.n	8016506 <rcl_expand_topic_name+0xaa>
 801648a:	fab0 f280 	clz	r2, r0
 801648e:	4604      	mov	r4, r0
 8016490:	0952      	lsrs	r2, r2, #5
 8016492:	2800      	cmp	r0, #0
 8016494:	d037      	beq.n	8016506 <rcl_expand_topic_name+0xaa>
 8016496:	460f      	mov	r7, r1
 8016498:	a90b      	add	r1, sp, #44	; 0x2c
 801649a:	f000 f9ed 	bl	8016878 <rcl_validate_topic_name>
 801649e:	4605      	mov	r5, r0
 80164a0:	bb68      	cbnz	r0, 80164fe <rcl_expand_topic_name+0xa2>
 80164a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d137      	bne.n	8016518 <rcl_expand_topic_name+0xbc>
 80164a8:	4602      	mov	r2, r0
 80164aa:	a90b      	add	r1, sp, #44	; 0x2c
 80164ac:	4638      	mov	r0, r7
 80164ae:	f7fd fced 	bl	8013e8c <rmw_validate_node_name>
 80164b2:	bb68      	cbnz	r0, 8016510 <rcl_expand_topic_name+0xb4>
 80164b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d133      	bne.n	8016522 <rcl_expand_topic_name+0xc6>
 80164ba:	462a      	mov	r2, r5
 80164bc:	a90b      	add	r1, sp, #44	; 0x2c
 80164be:	9807      	ldr	r0, [sp, #28]
 80164c0:	f7fd fcc6 	bl	8013e50 <rmw_validate_namespace>
 80164c4:	bb20      	cbnz	r0, 8016510 <rcl_expand_topic_name+0xb4>
 80164c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80164c8:	2d00      	cmp	r5, #0
 80164ca:	f040 80a2 	bne.w	8016612 <rcl_expand_topic_name+0x1b6>
 80164ce:	217b      	movs	r1, #123	; 0x7b
 80164d0:	4620      	mov	r0, r4
 80164d2:	f000 ffb9 	bl	8017448 <strchr>
 80164d6:	7823      	ldrb	r3, [r4, #0]
 80164d8:	4681      	mov	r9, r0
 80164da:	bb20      	cbnz	r0, 8016526 <rcl_expand_topic_name+0xca>
 80164dc:	2b2f      	cmp	r3, #47	; 0x2f
 80164de:	d122      	bne.n	8016526 <rcl_expand_topic_name+0xca>
 80164e0:	ab19      	add	r3, sp, #100	; 0x64
 80164e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80164e6:	ab16      	add	r3, sp, #88	; 0x58
 80164e8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80164ec:	4620      	mov	r0, r4
 80164ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80164f0:	f7fd f9fe 	bl	80138f0 <rcutils_strdup>
 80164f4:	2800      	cmp	r0, #0
 80164f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164f8:	bf08      	it	eq
 80164fa:	250a      	moveq	r5, #10
 80164fc:	6018      	str	r0, [r3, #0]
 80164fe:	4628      	mov	r0, r5
 8016500:	b00d      	add	sp, #52	; 0x34
 8016502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016506:	250b      	movs	r5, #11
 8016508:	4628      	mov	r0, r5
 801650a:	b00d      	add	sp, #52	; 0x34
 801650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016510:	f7fc f91c 	bl	801274c <rcl_convert_rmw_ret_to_rcl_ret>
 8016514:	4605      	mov	r5, r0
 8016516:	e7f2      	b.n	80164fe <rcl_expand_topic_name+0xa2>
 8016518:	2567      	movs	r5, #103	; 0x67
 801651a:	4628      	mov	r0, r5
 801651c:	b00d      	add	sp, #52	; 0x34
 801651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016522:	25c9      	movs	r5, #201	; 0xc9
 8016524:	e7eb      	b.n	80164fe <rcl_expand_topic_name+0xa2>
 8016526:	2b7e      	cmp	r3, #126	; 0x7e
 8016528:	d075      	beq.n	8016616 <rcl_expand_topic_name+0x1ba>
 801652a:	f1b9 0f00 	cmp.w	r9, #0
 801652e:	f000 80c2 	beq.w	80166b6 <rcl_expand_topic_name+0x25a>
 8016532:	2300      	movs	r3, #0
 8016534:	46a2      	mov	sl, r4
 8016536:	461e      	mov	r6, r3
 8016538:	9508      	str	r5, [sp, #32]
 801653a:	4655      	mov	r5, sl
 801653c:	9409      	str	r4, [sp, #36]	; 0x24
 801653e:	46b2      	mov	sl, r6
 8016540:	464c      	mov	r4, r9
 8016542:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8016546:	2c00      	cmp	r4, #0
 8016548:	f000 80ae 	beq.w	80166a8 <rcl_expand_topic_name+0x24c>
 801654c:	217d      	movs	r1, #125	; 0x7d
 801654e:	4628      	mov	r0, r5
 8016550:	f000 ff7a 	bl	8017448 <strchr>
 8016554:	eba0 0904 	sub.w	r9, r0, r4
 8016558:	4621      	mov	r1, r4
 801655a:	4869      	ldr	r0, [pc, #420]	; (8016700 <rcl_expand_topic_name+0x2a4>)
 801655c:	f109 0601 	add.w	r6, r9, #1
 8016560:	4632      	mov	r2, r6
 8016562:	f000 ff7e 	bl	8017462 <strncmp>
 8016566:	2800      	cmp	r0, #0
 8016568:	d051      	beq.n	801660e <rcl_expand_topic_name+0x1b2>
 801656a:	4632      	mov	r2, r6
 801656c:	4621      	mov	r1, r4
 801656e:	4865      	ldr	r0, [pc, #404]	; (8016704 <rcl_expand_topic_name+0x2a8>)
 8016570:	f000 ff77 	bl	8017462 <strncmp>
 8016574:	b128      	cbz	r0, 8016582 <rcl_expand_topic_name+0x126>
 8016576:	4632      	mov	r2, r6
 8016578:	4621      	mov	r1, r4
 801657a:	4863      	ldr	r0, [pc, #396]	; (8016708 <rcl_expand_topic_name+0x2ac>)
 801657c:	f000 ff71 	bl	8017462 <strncmp>
 8016580:	bb38      	cbnz	r0, 80165d2 <rcl_expand_topic_name+0x176>
 8016582:	46d9      	mov	r9, fp
 8016584:	ab18      	add	r3, sp, #96	; 0x60
 8016586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801658a:	ab16      	add	r3, sp, #88	; 0x58
 801658c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016590:	4620      	mov	r0, r4
 8016592:	4631      	mov	r1, r6
 8016594:	cb0c      	ldmia	r3, {r2, r3}
 8016596:	f7fd f9cd 	bl	8013934 <rcutils_strndup>
 801659a:	4604      	mov	r4, r0
 801659c:	2800      	cmp	r0, #0
 801659e:	f000 80a3 	beq.w	80166e8 <rcl_expand_topic_name+0x28c>
 80165a2:	464a      	mov	r2, r9
 80165a4:	4628      	mov	r0, r5
 80165a6:	ab16      	add	r3, sp, #88	; 0x58
 80165a8:	4621      	mov	r1, r4
 80165aa:	f7fd f8a1 	bl	80136f0 <rcutils_repl_str>
 80165ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80165b0:	4605      	mov	r5, r0
 80165b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80165b4:	4620      	mov	r0, r4
 80165b6:	4798      	blx	r3
 80165b8:	4650      	mov	r0, sl
 80165ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80165bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80165be:	4798      	blx	r3
 80165c0:	2d00      	cmp	r5, #0
 80165c2:	d06c      	beq.n	801669e <rcl_expand_topic_name+0x242>
 80165c4:	217b      	movs	r1, #123	; 0x7b
 80165c6:	4628      	mov	r0, r5
 80165c8:	f000 ff3e 	bl	8017448 <strchr>
 80165cc:	46aa      	mov	sl, r5
 80165ce:	4604      	mov	r4, r0
 80165d0:	e7b9      	b.n	8016546 <rcl_expand_topic_name+0xea>
 80165d2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80165d6:	1c61      	adds	r1, r4, #1
 80165d8:	4640      	mov	r0, r8
 80165da:	f7fd fac3 	bl	8013b64 <rcutils_string_map_getn>
 80165de:	4681      	mov	r9, r0
 80165e0:	2800      	cmp	r0, #0
 80165e2:	d1cf      	bne.n	8016584 <rcl_expand_topic_name+0x128>
 80165e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80165e6:	aa18      	add	r2, sp, #96	; 0x60
 80165e8:	2569      	movs	r5, #105	; 0x69
 80165ea:	6018      	str	r0, [r3, #0]
 80165ec:	ab16      	add	r3, sp, #88	; 0x58
 80165ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80165f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165f4:	4631      	mov	r1, r6
 80165f6:	4620      	mov	r0, r4
 80165f8:	cb0c      	ldmia	r3, {r2, r3}
 80165fa:	f7fd f99b 	bl	8013934 <rcutils_strndup>
 80165fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016602:	4798      	blx	r3
 8016604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016606:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016608:	4650      	mov	r0, sl
 801660a:	4798      	blx	r3
 801660c:	e777      	b.n	80164fe <rcl_expand_topic_name+0xa2>
 801660e:	46b9      	mov	r9, r7
 8016610:	e7b8      	b.n	8016584 <rcl_expand_topic_name+0x128>
 8016612:	25ca      	movs	r5, #202	; 0xca
 8016614:	e773      	b.n	80164fe <rcl_expand_topic_name+0xa2>
 8016616:	9e07      	ldr	r6, [sp, #28]
 8016618:	4630      	mov	r0, r6
 801661a:	f7e9 fe6b 	bl	80002f4 <strlen>
 801661e:	4a3b      	ldr	r2, [pc, #236]	; (801670c <rcl_expand_topic_name+0x2b0>)
 8016620:	4b3b      	ldr	r3, [pc, #236]	; (8016710 <rcl_expand_topic_name+0x2b4>)
 8016622:	9603      	str	r6, [sp, #12]
 8016624:	2801      	cmp	r0, #1
 8016626:	bf18      	it	ne
 8016628:	4613      	movne	r3, r2
 801662a:	9704      	str	r7, [sp, #16]
 801662c:	9302      	str	r3, [sp, #8]
 801662e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016630:	9300      	str	r3, [sp, #0]
 8016632:	1c63      	adds	r3, r4, #1
 8016634:	9305      	str	r3, [sp, #20]
 8016636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801663a:	9301      	str	r3, [sp, #4]
 801663c:	ab16      	add	r3, sp, #88	; 0x58
 801663e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016640:	f7fd f81c 	bl	801367c <rcutils_format_string_limit>
 8016644:	4606      	mov	r6, r0
 8016646:	b350      	cbz	r0, 801669e <rcl_expand_topic_name+0x242>
 8016648:	f1b9 0f00 	cmp.w	r9, #0
 801664c:	d005      	beq.n	801665a <rcl_expand_topic_name+0x1fe>
 801664e:	217b      	movs	r1, #123	; 0x7b
 8016650:	46b2      	mov	sl, r6
 8016652:	f000 fef9 	bl	8017448 <strchr>
 8016656:	4681      	mov	r9, r0
 8016658:	e76e      	b.n	8016538 <rcl_expand_topic_name+0xdc>
 801665a:	7833      	ldrb	r3, [r6, #0]
 801665c:	2b2f      	cmp	r3, #47	; 0x2f
 801665e:	d01b      	beq.n	8016698 <rcl_expand_topic_name+0x23c>
 8016660:	9c07      	ldr	r4, [sp, #28]
 8016662:	4620      	mov	r0, r4
 8016664:	f7e9 fe46 	bl	80002f4 <strlen>
 8016668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801666c:	4a29      	ldr	r2, [pc, #164]	; (8016714 <rcl_expand_topic_name+0x2b8>)
 801666e:	9301      	str	r3, [sp, #4]
 8016670:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016672:	9604      	str	r6, [sp, #16]
 8016674:	9300      	str	r3, [sp, #0]
 8016676:	4b28      	ldr	r3, [pc, #160]	; (8016718 <rcl_expand_topic_name+0x2bc>)
 8016678:	9403      	str	r4, [sp, #12]
 801667a:	2801      	cmp	r0, #1
 801667c:	bf18      	it	ne
 801667e:	4613      	movne	r3, r2
 8016680:	9302      	str	r3, [sp, #8]
 8016682:	ab16      	add	r3, sp, #88	; 0x58
 8016684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016686:	f7fc fff9 	bl	801367c <rcutils_format_string_limit>
 801668a:	4603      	mov	r3, r0
 801668c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801668e:	4630      	mov	r0, r6
 8016690:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016692:	461e      	mov	r6, r3
 8016694:	4790      	blx	r2
 8016696:	b116      	cbz	r6, 801669e <rcl_expand_topic_name+0x242>
 8016698:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801669a:	601e      	str	r6, [r3, #0]
 801669c:	e72f      	b.n	80164fe <rcl_expand_topic_name+0xa2>
 801669e:	2300      	movs	r3, #0
 80166a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80166a2:	250a      	movs	r5, #10
 80166a4:	6013      	str	r3, [r2, #0]
 80166a6:	e72a      	b.n	80164fe <rcl_expand_topic_name+0xa2>
 80166a8:	4653      	mov	r3, sl
 80166aa:	4656      	mov	r6, sl
 80166ac:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d1d2      	bne.n	801665a <rcl_expand_topic_name+0x1fe>
 80166b4:	7823      	ldrb	r3, [r4, #0]
 80166b6:	2b2f      	cmp	r3, #47	; 0x2f
 80166b8:	d01e      	beq.n	80166f8 <rcl_expand_topic_name+0x29c>
 80166ba:	9e07      	ldr	r6, [sp, #28]
 80166bc:	4630      	mov	r0, r6
 80166be:	f7e9 fe19 	bl	80002f4 <strlen>
 80166c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80166c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80166c8:	9603      	str	r6, [sp, #12]
 80166ca:	9404      	str	r4, [sp, #16]
 80166cc:	e9cd 2300 	strd	r2, r3, [sp]
 80166d0:	4a10      	ldr	r2, [pc, #64]	; (8016714 <rcl_expand_topic_name+0x2b8>)
 80166d2:	4b11      	ldr	r3, [pc, #68]	; (8016718 <rcl_expand_topic_name+0x2bc>)
 80166d4:	2801      	cmp	r0, #1
 80166d6:	bf18      	it	ne
 80166d8:	4613      	movne	r3, r2
 80166da:	9302      	str	r3, [sp, #8]
 80166dc:	ab16      	add	r3, sp, #88	; 0x58
 80166de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80166e0:	f7fc ffcc 	bl	801367c <rcutils_format_string_limit>
 80166e4:	4606      	mov	r6, r0
 80166e6:	e7d6      	b.n	8016696 <rcl_expand_topic_name+0x23a>
 80166e8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 80166ec:	4650      	mov	r0, sl
 80166ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166f0:	6014      	str	r4, [r2, #0]
 80166f2:	250a      	movs	r5, #10
 80166f4:	4798      	blx	r3
 80166f6:	e702      	b.n	80164fe <rcl_expand_topic_name+0xa2>
 80166f8:	2300      	movs	r3, #0
 80166fa:	461e      	mov	r6, r3
 80166fc:	e7cc      	b.n	8016698 <rcl_expand_topic_name+0x23c>
 80166fe:	bf00      	nop
 8016700:	08018de0 	.word	0x08018de0
 8016704:	08018de8 	.word	0x08018de8
 8016708:	08018df0 	.word	0x08018df0
 801670c:	08018dd8 	.word	0x08018dd8
 8016710:	080185c0 	.word	0x080185c0
 8016714:	08018754 	.word	0x08018754
 8016718:	080185d0 	.word	0x080185d0

0801671c <rcl_get_default_topic_name_substitutions>:
 801671c:	2800      	cmp	r0, #0
 801671e:	bf0c      	ite	eq
 8016720:	200b      	moveq	r0, #11
 8016722:	2000      	movne	r0, #0
 8016724:	4770      	bx	lr
 8016726:	bf00      	nop

08016728 <rcl_get_zero_initialized_guard_condition>:
 8016728:	4a03      	ldr	r2, [pc, #12]	; (8016738 <rcl_get_zero_initialized_guard_condition+0x10>)
 801672a:	4603      	mov	r3, r0
 801672c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016730:	e883 0003 	stmia.w	r3, {r0, r1}
 8016734:	4618      	mov	r0, r3
 8016736:	4770      	bx	lr
 8016738:	08018dfc 	.word	0x08018dfc

0801673c <rcl_guard_condition_init_from_rmw>:
 801673c:	b082      	sub	sp, #8
 801673e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016742:	b086      	sub	sp, #24
 8016744:	4604      	mov	r4, r0
 8016746:	460e      	mov	r6, r1
 8016748:	4615      	mov	r5, r2
 801674a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801674e:	f10d 0e04 	add.w	lr, sp, #4
 8016752:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801675a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801675e:	f8dc 3000 	ldr.w	r3, [ip]
 8016762:	a801      	add	r0, sp, #4
 8016764:	f8ce 3000 	str.w	r3, [lr]
 8016768:	f7f7 fdd2 	bl	800e310 <rcutils_allocator_is_valid>
 801676c:	f080 0301 	eor.w	r3, r0, #1
 8016770:	b2db      	uxtb	r3, r3
 8016772:	bb3b      	cbnz	r3, 80167c4 <rcl_guard_condition_init_from_rmw+0x88>
 8016774:	b334      	cbz	r4, 80167c4 <rcl_guard_condition_init_from_rmw+0x88>
 8016776:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801677a:	f1b8 0f00 	cmp.w	r8, #0
 801677e:	d11a      	bne.n	80167b6 <rcl_guard_condition_init_from_rmw+0x7a>
 8016780:	b305      	cbz	r5, 80167c4 <rcl_guard_condition_init_from_rmw+0x88>
 8016782:	4628      	mov	r0, r5
 8016784:	f7fc f800 	bl	8012788 <rcl_context_is_valid>
 8016788:	b1f0      	cbz	r0, 80167c8 <rcl_guard_condition_init_from_rmw+0x8c>
 801678a:	9b01      	ldr	r3, [sp, #4]
 801678c:	201c      	movs	r0, #28
 801678e:	9905      	ldr	r1, [sp, #20]
 8016790:	4798      	blx	r3
 8016792:	4607      	mov	r7, r0
 8016794:	6060      	str	r0, [r4, #4]
 8016796:	b320      	cbz	r0, 80167e2 <rcl_guard_condition_init_from_rmw+0xa6>
 8016798:	b1c6      	cbz	r6, 80167cc <rcl_guard_condition_init_from_rmw+0x90>
 801679a:	6006      	str	r6, [r0, #0]
 801679c:	f880 8004 	strb.w	r8, [r0, #4]
 80167a0:	ac01      	add	r4, sp, #4
 80167a2:	f107 0c08 	add.w	ip, r7, #8
 80167a6:	2500      	movs	r5, #0
 80167a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167ae:	6823      	ldr	r3, [r4, #0]
 80167b0:	f8cc 3000 	str.w	r3, [ip]
 80167b4:	e000      	b.n	80167b8 <rcl_guard_condition_init_from_rmw+0x7c>
 80167b6:	2564      	movs	r5, #100	; 0x64
 80167b8:	4628      	mov	r0, r5
 80167ba:	b006      	add	sp, #24
 80167bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167c0:	b002      	add	sp, #8
 80167c2:	4770      	bx	lr
 80167c4:	250b      	movs	r5, #11
 80167c6:	e7f7      	b.n	80167b8 <rcl_guard_condition_init_from_rmw+0x7c>
 80167c8:	2565      	movs	r5, #101	; 0x65
 80167ca:	e7f5      	b.n	80167b8 <rcl_guard_condition_init_from_rmw+0x7c>
 80167cc:	6828      	ldr	r0, [r5, #0]
 80167ce:	3028      	adds	r0, #40	; 0x28
 80167d0:	f000 fa42 	bl	8016c58 <rmw_create_guard_condition>
 80167d4:	6038      	str	r0, [r7, #0]
 80167d6:	6867      	ldr	r7, [r4, #4]
 80167d8:	683e      	ldr	r6, [r7, #0]
 80167da:	b126      	cbz	r6, 80167e6 <rcl_guard_condition_init_from_rmw+0xaa>
 80167dc:	2301      	movs	r3, #1
 80167de:	713b      	strb	r3, [r7, #4]
 80167e0:	e7de      	b.n	80167a0 <rcl_guard_condition_init_from_rmw+0x64>
 80167e2:	250a      	movs	r5, #10
 80167e4:	e7e8      	b.n	80167b8 <rcl_guard_condition_init_from_rmw+0x7c>
 80167e6:	9b02      	ldr	r3, [sp, #8]
 80167e8:	4638      	mov	r0, r7
 80167ea:	9905      	ldr	r1, [sp, #20]
 80167ec:	2501      	movs	r5, #1
 80167ee:	4798      	blx	r3
 80167f0:	6066      	str	r6, [r4, #4]
 80167f2:	e7e1      	b.n	80167b8 <rcl_guard_condition_init_from_rmw+0x7c>

080167f4 <rcl_guard_condition_fini>:
 80167f4:	b570      	push	{r4, r5, r6, lr}
 80167f6:	b082      	sub	sp, #8
 80167f8:	b1f0      	cbz	r0, 8016838 <rcl_guard_condition_fini+0x44>
 80167fa:	6843      	ldr	r3, [r0, #4]
 80167fc:	4604      	mov	r4, r0
 80167fe:	b163      	cbz	r3, 801681a <rcl_guard_condition_fini+0x26>
 8016800:	6818      	ldr	r0, [r3, #0]
 8016802:	68de      	ldr	r6, [r3, #12]
 8016804:	6999      	ldr	r1, [r3, #24]
 8016806:	b160      	cbz	r0, 8016822 <rcl_guard_condition_fini+0x2e>
 8016808:	791d      	ldrb	r5, [r3, #4]
 801680a:	b965      	cbnz	r5, 8016826 <rcl_guard_condition_fini+0x32>
 801680c:	4618      	mov	r0, r3
 801680e:	47b0      	blx	r6
 8016810:	2300      	movs	r3, #0
 8016812:	4628      	mov	r0, r5
 8016814:	6063      	str	r3, [r4, #4]
 8016816:	b002      	add	sp, #8
 8016818:	bd70      	pop	{r4, r5, r6, pc}
 801681a:	461d      	mov	r5, r3
 801681c:	4628      	mov	r0, r5
 801681e:	b002      	add	sp, #8
 8016820:	bd70      	pop	{r4, r5, r6, pc}
 8016822:	4605      	mov	r5, r0
 8016824:	e7f2      	b.n	801680c <rcl_guard_condition_fini+0x18>
 8016826:	9101      	str	r1, [sp, #4]
 8016828:	f000 fa2c 	bl	8016c84 <rmw_destroy_guard_condition>
 801682c:	1e05      	subs	r5, r0, #0
 801682e:	6863      	ldr	r3, [r4, #4]
 8016830:	9901      	ldr	r1, [sp, #4]
 8016832:	bf18      	it	ne
 8016834:	2501      	movne	r5, #1
 8016836:	e7e9      	b.n	801680c <rcl_guard_condition_fini+0x18>
 8016838:	250b      	movs	r5, #11
 801683a:	4628      	mov	r0, r5
 801683c:	b002      	add	sp, #8
 801683e:	bd70      	pop	{r4, r5, r6, pc}

08016840 <rcl_guard_condition_get_default_options>:
 8016840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016842:	b087      	sub	sp, #28
 8016844:	4606      	mov	r6, r0
 8016846:	4c0b      	ldr	r4, [pc, #44]	; (8016874 <rcl_guard_condition_get_default_options+0x34>)
 8016848:	4668      	mov	r0, sp
 801684a:	f7f7 fd53 	bl	800e2f4 <rcutils_get_default_allocator>
 801684e:	46ee      	mov	lr, sp
 8016850:	46a4      	mov	ip, r4
 8016852:	4625      	mov	r5, r4
 8016854:	4634      	mov	r4, r6
 8016856:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801685a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801685e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016860:	f8de 7000 	ldr.w	r7, [lr]
 8016864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016866:	4630      	mov	r0, r6
 8016868:	f8cc 7000 	str.w	r7, [ip]
 801686c:	6027      	str	r7, [r4, #0]
 801686e:	b007      	add	sp, #28
 8016870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016872:	bf00      	nop
 8016874:	2400e284 	.word	0x2400e284

08016878 <rcl_validate_topic_name>:
 8016878:	2800      	cmp	r0, #0
 801687a:	f000 8089 	beq.w	8016990 <rcl_validate_topic_name+0x118>
 801687e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016882:	460e      	mov	r6, r1
 8016884:	2900      	cmp	r1, #0
 8016886:	f000 8085 	beq.w	8016994 <rcl_validate_topic_name+0x11c>
 801688a:	4604      	mov	r4, r0
 801688c:	4617      	mov	r7, r2
 801688e:	f7e9 fd31 	bl	80002f4 <strlen>
 8016892:	b1b0      	cbz	r0, 80168c2 <rcl_validate_topic_name+0x4a>
 8016894:	f894 e000 	ldrb.w	lr, [r4]
 8016898:	f8df c160 	ldr.w	ip, [pc, #352]	; 80169fc <rcl_validate_topic_name+0x184>
 801689c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80168a0:	f013 0304 	ands.w	r3, r3, #4
 80168a4:	d139      	bne.n	801691a <rcl_validate_topic_name+0xa2>
 80168a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80168aa:	f814 2008 	ldrb.w	r2, [r4, r8]
 80168ae:	2a2f      	cmp	r2, #47	; 0x2f
 80168b0:	d10f      	bne.n	80168d2 <rcl_validate_topic_name+0x5a>
 80168b2:	2202      	movs	r2, #2
 80168b4:	6032      	str	r2, [r6, #0]
 80168b6:	b3a7      	cbz	r7, 8016922 <rcl_validate_topic_name+0xaa>
 80168b8:	4618      	mov	r0, r3
 80168ba:	f8c7 8000 	str.w	r8, [r7]
 80168be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168c2:	2301      	movs	r3, #1
 80168c4:	6033      	str	r3, [r6, #0]
 80168c6:	b367      	cbz	r7, 8016922 <rcl_validate_topic_name+0xaa>
 80168c8:	2300      	movs	r3, #0
 80168ca:	4618      	mov	r0, r3
 80168cc:	603b      	str	r3, [r7, #0]
 80168ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168d2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 80168d6:	461d      	mov	r5, r3
 80168d8:	4619      	mov	r1, r3
 80168da:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80168de:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80168e2:	f1b9 0f09 	cmp.w	r9, #9
 80168e6:	d91f      	bls.n	8016928 <rcl_validate_topic_name+0xb0>
 80168e8:	f022 0920 	bic.w	r9, r2, #32
 80168ec:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 80168f0:	f1b9 0f19 	cmp.w	r9, #25
 80168f4:	d918      	bls.n	8016928 <rcl_validate_topic_name+0xb0>
 80168f6:	2a5f      	cmp	r2, #95	; 0x5f
 80168f8:	d024      	beq.n	8016944 <rcl_validate_topic_name+0xcc>
 80168fa:	2a2f      	cmp	r2, #47	; 0x2f
 80168fc:	d058      	beq.n	80169b0 <rcl_validate_topic_name+0x138>
 80168fe:	2a7e      	cmp	r2, #126	; 0x7e
 8016900:	d04a      	beq.n	8016998 <rcl_validate_topic_name+0x120>
 8016902:	2a7b      	cmp	r2, #123	; 0x7b
 8016904:	d05b      	beq.n	80169be <rcl_validate_topic_name+0x146>
 8016906:	2a7d      	cmp	r2, #125	; 0x7d
 8016908:	d169      	bne.n	80169de <rcl_validate_topic_name+0x166>
 801690a:	2d00      	cmp	r5, #0
 801690c:	d15c      	bne.n	80169c8 <rcl_validate_topic_name+0x150>
 801690e:	2305      	movs	r3, #5
 8016910:	6033      	str	r3, [r6, #0]
 8016912:	b137      	cbz	r7, 8016922 <rcl_validate_topic_name+0xaa>
 8016914:	2000      	movs	r0, #0
 8016916:	6039      	str	r1, [r7, #0]
 8016918:	e7d9      	b.n	80168ce <rcl_validate_topic_name+0x56>
 801691a:	2304      	movs	r3, #4
 801691c:	6033      	str	r3, [r6, #0]
 801691e:	2f00      	cmp	r7, #0
 8016920:	d1d2      	bne.n	80168c8 <rcl_validate_topic_name+0x50>
 8016922:	2000      	movs	r0, #0
 8016924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016928:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801692c:	0752      	lsls	r2, r2, #29
 801692e:	d509      	bpl.n	8016944 <rcl_validate_topic_name+0xcc>
 8016930:	2900      	cmp	r1, #0
 8016932:	bf0c      	ite	eq
 8016934:	2200      	moveq	r2, #0
 8016936:	f005 0201 	andne.w	r2, r5, #1
 801693a:	b11a      	cbz	r2, 8016944 <rcl_validate_topic_name+0xcc>
 801693c:	1e4d      	subs	r5, r1, #1
 801693e:	429d      	cmp	r5, r3
 8016940:	d031      	beq.n	80169a6 <rcl_validate_topic_name+0x12e>
 8016942:	4615      	mov	r5, r2
 8016944:	3101      	adds	r1, #1
 8016946:	4288      	cmp	r0, r1
 8016948:	d1c7      	bne.n	80168da <rcl_validate_topic_name+0x62>
 801694a:	2d00      	cmp	r5, #0
 801694c:	d142      	bne.n	80169d4 <rcl_validate_topic_name+0x15c>
 801694e:	4628      	mov	r0, r5
 8016950:	2301      	movs	r3, #1
 8016952:	e00c      	b.n	801696e <rcl_validate_topic_name+0xf6>
 8016954:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8016958:	d101      	bne.n	801695e <rcl_validate_topic_name+0xe6>
 801695a:	2801      	cmp	r0, #1
 801695c:	d047      	beq.n	80169ee <rcl_validate_topic_name+0x176>
 801695e:	1c5a      	adds	r2, r3, #1
 8016960:	428b      	cmp	r3, r1
 8016962:	f100 0001 	add.w	r0, r0, #1
 8016966:	f104 0401 	add.w	r4, r4, #1
 801696a:	4613      	mov	r3, r2
 801696c:	d22e      	bcs.n	80169cc <rcl_validate_topic_name+0x154>
 801696e:	4580      	cmp	r8, r0
 8016970:	d0f5      	beq.n	801695e <rcl_validate_topic_name+0xe6>
 8016972:	7822      	ldrb	r2, [r4, #0]
 8016974:	2a2f      	cmp	r2, #47	; 0x2f
 8016976:	d1ed      	bne.n	8016954 <rcl_validate_topic_name+0xdc>
 8016978:	7862      	ldrb	r2, [r4, #1]
 801697a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801697e:	0752      	lsls	r2, r2, #29
 8016980:	d5ed      	bpl.n	801695e <rcl_validate_topic_name+0xe6>
 8016982:	2204      	movs	r2, #4
 8016984:	6032      	str	r2, [r6, #0]
 8016986:	2f00      	cmp	r7, #0
 8016988:	d0cb      	beq.n	8016922 <rcl_validate_topic_name+0xaa>
 801698a:	2000      	movs	r0, #0
 801698c:	603b      	str	r3, [r7, #0]
 801698e:	e79e      	b.n	80168ce <rcl_validate_topic_name+0x56>
 8016990:	200b      	movs	r0, #11
 8016992:	4770      	bx	lr
 8016994:	200b      	movs	r0, #11
 8016996:	e79a      	b.n	80168ce <rcl_validate_topic_name+0x56>
 8016998:	2900      	cmp	r1, #0
 801699a:	d0d3      	beq.n	8016944 <rcl_validate_topic_name+0xcc>
 801699c:	2306      	movs	r3, #6
 801699e:	6033      	str	r3, [r6, #0]
 80169a0:	2f00      	cmp	r7, #0
 80169a2:	d1b7      	bne.n	8016914 <rcl_validate_topic_name+0x9c>
 80169a4:	e7bd      	b.n	8016922 <rcl_validate_topic_name+0xaa>
 80169a6:	2309      	movs	r3, #9
 80169a8:	6033      	str	r3, [r6, #0]
 80169aa:	2f00      	cmp	r7, #0
 80169ac:	d1b2      	bne.n	8016914 <rcl_validate_topic_name+0x9c>
 80169ae:	e7b8      	b.n	8016922 <rcl_validate_topic_name+0xaa>
 80169b0:	2d00      	cmp	r5, #0
 80169b2:	d0c7      	beq.n	8016944 <rcl_validate_topic_name+0xcc>
 80169b4:	2308      	movs	r3, #8
 80169b6:	6033      	str	r3, [r6, #0]
 80169b8:	2f00      	cmp	r7, #0
 80169ba:	d1ab      	bne.n	8016914 <rcl_validate_topic_name+0x9c>
 80169bc:	e7b1      	b.n	8016922 <rcl_validate_topic_name+0xaa>
 80169be:	2d00      	cmp	r5, #0
 80169c0:	d1f8      	bne.n	80169b4 <rcl_validate_topic_name+0x13c>
 80169c2:	460b      	mov	r3, r1
 80169c4:	2501      	movs	r5, #1
 80169c6:	e7bd      	b.n	8016944 <rcl_validate_topic_name+0xcc>
 80169c8:	2500      	movs	r5, #0
 80169ca:	e7bb      	b.n	8016944 <rcl_validate_topic_name+0xcc>
 80169cc:	2300      	movs	r3, #0
 80169ce:	4618      	mov	r0, r3
 80169d0:	6033      	str	r3, [r6, #0]
 80169d2:	e77c      	b.n	80168ce <rcl_validate_topic_name+0x56>
 80169d4:	2205      	movs	r2, #5
 80169d6:	6032      	str	r2, [r6, #0]
 80169d8:	2f00      	cmp	r7, #0
 80169da:	d1d6      	bne.n	801698a <rcl_validate_topic_name+0x112>
 80169dc:	e7a1      	b.n	8016922 <rcl_validate_topic_name+0xaa>
 80169de:	2d00      	cmp	r5, #0
 80169e0:	bf14      	ite	ne
 80169e2:	2308      	movne	r3, #8
 80169e4:	2303      	moveq	r3, #3
 80169e6:	6033      	str	r3, [r6, #0]
 80169e8:	2f00      	cmp	r7, #0
 80169ea:	d193      	bne.n	8016914 <rcl_validate_topic_name+0x9c>
 80169ec:	e799      	b.n	8016922 <rcl_validate_topic_name+0xaa>
 80169ee:	2307      	movs	r3, #7
 80169f0:	6033      	str	r3, [r6, #0]
 80169f2:	2f00      	cmp	r7, #0
 80169f4:	d095      	beq.n	8016922 <rcl_validate_topic_name+0xaa>
 80169f6:	2301      	movs	r3, #1
 80169f8:	e7c7      	b.n	801698a <rcl_validate_topic_name+0x112>
 80169fa:	bf00      	nop
 80169fc:	08018e74 	.word	0x08018e74

08016a00 <on_status>:
 8016a00:	b082      	sub	sp, #8
 8016a02:	b002      	add	sp, #8
 8016a04:	4770      	bx	lr
 8016a06:	bf00      	nop

08016a08 <on_topic>:
 8016a08:	4a23      	ldr	r2, [pc, #140]	; (8016a98 <on_topic+0x90>)
 8016a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a0e:	6812      	ldr	r2, [r2, #0]
 8016a10:	b094      	sub	sp, #80	; 0x50
 8016a12:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016a14:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8016a18:	9113      	str	r1, [sp, #76]	; 0x4c
 8016a1a:	9312      	str	r3, [sp, #72]	; 0x48
 8016a1c:	b3c2      	cbz	r2, 8016a90 <on_topic+0x88>
 8016a1e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8016a22:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8016a26:	e001      	b.n	8016a2c <on_topic+0x24>
 8016a28:	6852      	ldr	r2, [r2, #4]
 8016a2a:	b38a      	cbz	r2, 8016a90 <on_topic+0x88>
 8016a2c:	6894      	ldr	r4, [r2, #8]
 8016a2e:	8aa3      	ldrh	r3, [r4, #20]
 8016a30:	428b      	cmp	r3, r1
 8016a32:	d1f9      	bne.n	8016a28 <on_topic+0x20>
 8016a34:	7da3      	ldrb	r3, [r4, #22]
 8016a36:	4283      	cmp	r3, r0
 8016a38:	d1f6      	bne.n	8016a28 <on_topic+0x20>
 8016a3a:	2248      	movs	r2, #72	; 0x48
 8016a3c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016a40:	4668      	mov	r0, sp
 8016a42:	f000 fdc2 	bl	80175ca <memcpy>
 8016a46:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	cb0c      	ldmia	r3, {r2, r3}
 8016a4e:	f7f8 f84b 	bl	800eae8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a52:	4607      	mov	r7, r0
 8016a54:	b1e0      	cbz	r0, 8016a90 <on_topic+0x88>
 8016a56:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016a5a:	462a      	mov	r2, r5
 8016a5c:	4630      	mov	r0, r6
 8016a5e:	f108 0110 	add.w	r1, r8, #16
 8016a62:	f7fe f855 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8016a66:	b930      	cbnz	r0, 8016a76 <on_topic+0x6e>
 8016a68:	4639      	mov	r1, r7
 8016a6a:	480c      	ldr	r0, [pc, #48]	; (8016a9c <on_topic+0x94>)
 8016a6c:	b014      	add	sp, #80	; 0x50
 8016a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a72:	f7fd ba7b 	b.w	8013f6c <put_memory>
 8016a76:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8016a7a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8016a7e:	f7fd ff3b 	bl	80148f8 <rmw_uros_epoch_nanos>
 8016a82:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8016a86:	2305      	movs	r3, #5
 8016a88:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016a8c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8016a90:	b014      	add	sp, #80	; 0x50
 8016a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a96:	bf00      	nop
 8016a98:	2400e154 	.word	0x2400e154
 8016a9c:	2400e144 	.word	0x2400e144

08016aa0 <on_request>:
 8016aa0:	4824      	ldr	r0, [pc, #144]	; (8016b34 <on_request+0x94>)
 8016aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa6:	6800      	ldr	r0, [r0, #0]
 8016aa8:	b094      	sub	sp, #80	; 0x50
 8016aaa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016aac:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8016ab0:	9113      	str	r1, [sp, #76]	; 0x4c
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d03b      	beq.n	8016b2e <on_request+0x8e>
 8016ab6:	461d      	mov	r5, r3
 8016ab8:	e001      	b.n	8016abe <on_request+0x1e>
 8016aba:	6840      	ldr	r0, [r0, #4]
 8016abc:	b3b8      	cbz	r0, 8016b2e <on_request+0x8e>
 8016abe:	6884      	ldr	r4, [r0, #8]
 8016ac0:	8b21      	ldrh	r1, [r4, #24]
 8016ac2:	4291      	cmp	r1, r2
 8016ac4:	d1f9      	bne.n	8016aba <on_request+0x1a>
 8016ac6:	2248      	movs	r2, #72	; 0x48
 8016ac8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016acc:	4668      	mov	r0, sp
 8016ace:	f000 fd7c 	bl	80175ca <memcpy>
 8016ad2:	f104 0320 	add.w	r3, r4, #32
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	cb0c      	ldmia	r3, {r2, r3}
 8016ada:	f7f8 f805 	bl	800eae8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016ade:	4680      	mov	r8, r0
 8016ae0:	b328      	cbz	r0, 8016b2e <on_request+0x8e>
 8016ae2:	4630      	mov	r0, r6
 8016ae4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8016ae8:	463a      	mov	r2, r7
 8016aea:	f106 0110 	add.w	r1, r6, #16
 8016aee:	f7fe f80f 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8016af2:	b930      	cbnz	r0, 8016b02 <on_request+0x62>
 8016af4:	4641      	mov	r1, r8
 8016af6:	4810      	ldr	r0, [pc, #64]	; (8016b38 <on_request+0x98>)
 8016af8:	b014      	add	sp, #80	; 0x50
 8016afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016afe:	f7fd ba35 	b.w	8013f6c <put_memory>
 8016b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b04:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8016b08:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8016b0c:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8016b10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016b18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016b1c:	f7fd feec 	bl	80148f8 <rmw_uros_epoch_nanos>
 8016b20:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8016b24:	2303      	movs	r3, #3
 8016b26:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016b2a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8016b2e:	b014      	add	sp, #80	; 0x50
 8016b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b34:	2400e124 	.word	0x2400e124
 8016b38:	2400e144 	.word	0x2400e144

08016b3c <on_reply>:
 8016b3c:	4822      	ldr	r0, [pc, #136]	; (8016bc8 <on_reply+0x8c>)
 8016b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b42:	6800      	ldr	r0, [r0, #0]
 8016b44:	b094      	sub	sp, #80	; 0x50
 8016b46:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016b48:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8016b4c:	9113      	str	r1, [sp, #76]	; 0x4c
 8016b4e:	b3b8      	cbz	r0, 8016bc0 <on_reply+0x84>
 8016b50:	461d      	mov	r5, r3
 8016b52:	e001      	b.n	8016b58 <on_reply+0x1c>
 8016b54:	6840      	ldr	r0, [r0, #4]
 8016b56:	b398      	cbz	r0, 8016bc0 <on_reply+0x84>
 8016b58:	6884      	ldr	r4, [r0, #8]
 8016b5a:	8b21      	ldrh	r1, [r4, #24]
 8016b5c:	4291      	cmp	r1, r2
 8016b5e:	d1f9      	bne.n	8016b54 <on_reply+0x18>
 8016b60:	2248      	movs	r2, #72	; 0x48
 8016b62:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016b66:	4668      	mov	r0, sp
 8016b68:	f000 fd2f 	bl	80175ca <memcpy>
 8016b6c:	f104 0320 	add.w	r3, r4, #32
 8016b70:	4620      	mov	r0, r4
 8016b72:	cb0c      	ldmia	r3, {r2, r3}
 8016b74:	f7f7 ffb8 	bl	800eae8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016b78:	4680      	mov	r8, r0
 8016b7a:	b308      	cbz	r0, 8016bc0 <on_reply+0x84>
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8016b82:	463a      	mov	r2, r7
 8016b84:	f106 0110 	add.w	r1, r6, #16
 8016b88:	f7fd ffc2 	bl	8014b10 <ucdr_deserialize_array_uint8_t>
 8016b8c:	b930      	cbnz	r0, 8016b9c <on_reply+0x60>
 8016b8e:	4641      	mov	r1, r8
 8016b90:	480e      	ldr	r0, [pc, #56]	; (8016bcc <on_reply+0x90>)
 8016b92:	b014      	add	sp, #80	; 0x50
 8016b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b98:	f7fd b9e8 	b.w	8013f6c <put_memory>
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8016ba2:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8016ba6:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 8016baa:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 8016bae:	f7fd fea3 	bl	80148f8 <rmw_uros_epoch_nanos>
 8016bb2:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8016bb6:	2304      	movs	r3, #4
 8016bb8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016bbc:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8016bc0:	b014      	add	sp, #80	; 0x50
 8016bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bc6:	bf00      	nop
 8016bc8:	24009838 	.word	0x24009838
 8016bcc:	2400e144 	.word	0x2400e144

08016bd0 <rmw_destroy_client>:
 8016bd0:	b570      	push	{r4, r5, r6, lr}
 8016bd2:	b128      	cbz	r0, 8016be0 <rmw_destroy_client+0x10>
 8016bd4:	4604      	mov	r4, r0
 8016bd6:	6800      	ldr	r0, [r0, #0]
 8016bd8:	460d      	mov	r5, r1
 8016bda:	f7f8 f859 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 8016bde:	b910      	cbnz	r0, 8016be6 <rmw_destroy_client+0x16>
 8016be0:	2401      	movs	r4, #1
 8016be2:	4620      	mov	r0, r4
 8016be4:	bd70      	pop	{r4, r5, r6, pc}
 8016be6:	6863      	ldr	r3, [r4, #4]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d0f9      	beq.n	8016be0 <rmw_destroy_client+0x10>
 8016bec:	2d00      	cmp	r5, #0
 8016bee:	d0f7      	beq.n	8016be0 <rmw_destroy_client+0x10>
 8016bf0:	6828      	ldr	r0, [r5, #0]
 8016bf2:	f7f8 f84d 	bl	800ec90 <is_uxrce_rmw_identifier_valid>
 8016bf6:	2800      	cmp	r0, #0
 8016bf8:	d0f2      	beq.n	8016be0 <rmw_destroy_client+0x10>
 8016bfa:	686e      	ldr	r6, [r5, #4]
 8016bfc:	2e00      	cmp	r6, #0
 8016bfe:	d0ef      	beq.n	8016be0 <rmw_destroy_client+0x10>
 8016c00:	6864      	ldr	r4, [r4, #4]
 8016c02:	6932      	ldr	r2, [r6, #16]
 8016c04:	6920      	ldr	r0, [r4, #16]
 8016c06:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016c0a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016c0e:	6819      	ldr	r1, [r3, #0]
 8016c10:	f7fe fe5e 	bl	80158d0 <uxr_buffer_cancel_data>
 8016c14:	4602      	mov	r2, r0
 8016c16:	6920      	ldr	r0, [r4, #16]
 8016c18:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016c1c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016c20:	f7f7 ffbc 	bl	800eb9c <run_xrce_session>
 8016c24:	6920      	ldr	r0, [r4, #16]
 8016c26:	6932      	ldr	r2, [r6, #16]
 8016c28:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016c2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016c30:	6819      	ldr	r1, [r3, #0]
 8016c32:	f7f9 f8ed 	bl	800fe10 <uxr_buffer_delete_entity>
 8016c36:	4602      	mov	r2, r0
 8016c38:	6920      	ldr	r0, [r4, #16]
 8016c3a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016c3e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016c42:	f7f7 ffab 	bl	800eb9c <run_xrce_session>
 8016c46:	4603      	mov	r3, r0
 8016c48:	4628      	mov	r0, r5
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	bf14      	ite	ne
 8016c4e:	2400      	movne	r4, #0
 8016c50:	2402      	moveq	r4, #2
 8016c52:	f7f7 ff27 	bl	800eaa4 <rmw_uxrce_fini_client_memory>
 8016c56:	e7c4      	b.n	8016be2 <rmw_destroy_client+0x12>

08016c58 <rmw_create_guard_condition>:
 8016c58:	b538      	push	{r3, r4, r5, lr}
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	4808      	ldr	r0, [pc, #32]	; (8016c80 <rmw_create_guard_condition+0x28>)
 8016c5e:	f7fd f975 	bl	8013f4c <get_memory>
 8016c62:	4603      	mov	r3, r0
 8016c64:	b148      	cbz	r0, 8016c7a <rmw_create_guard_condition+0x22>
 8016c66:	6884      	ldr	r4, [r0, #8]
 8016c68:	2300      	movs	r3, #0
 8016c6a:	61e5      	str	r5, [r4, #28]
 8016c6c:	7423      	strb	r3, [r4, #16]
 8016c6e:	f7fd f991 	bl	8013f94 <rmw_get_implementation_identifier>
 8016c72:	f104 0314 	add.w	r3, r4, #20
 8016c76:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	bd38      	pop	{r3, r4, r5, pc}
 8016c7e:	bf00      	nop
 8016c80:	2400e0e4 	.word	0x2400e0e4

08016c84 <rmw_destroy_guard_condition>:
 8016c84:	b508      	push	{r3, lr}
 8016c86:	4b08      	ldr	r3, [pc, #32]	; (8016ca8 <rmw_destroy_guard_condition+0x24>)
 8016c88:	6819      	ldr	r1, [r3, #0]
 8016c8a:	b911      	cbnz	r1, 8016c92 <rmw_destroy_guard_condition+0xe>
 8016c8c:	e00a      	b.n	8016ca4 <rmw_destroy_guard_condition+0x20>
 8016c8e:	6849      	ldr	r1, [r1, #4]
 8016c90:	b141      	cbz	r1, 8016ca4 <rmw_destroy_guard_condition+0x20>
 8016c92:	688b      	ldr	r3, [r1, #8]
 8016c94:	3314      	adds	r3, #20
 8016c96:	4298      	cmp	r0, r3
 8016c98:	d1f9      	bne.n	8016c8e <rmw_destroy_guard_condition+0xa>
 8016c9a:	4803      	ldr	r0, [pc, #12]	; (8016ca8 <rmw_destroy_guard_condition+0x24>)
 8016c9c:	f7fd f966 	bl	8013f6c <put_memory>
 8016ca0:	2000      	movs	r0, #0
 8016ca2:	bd08      	pop	{r3, pc}
 8016ca4:	2001      	movs	r0, #1
 8016ca6:	bd08      	pop	{r3, pc}
 8016ca8:	2400e0e4 	.word	0x2400e0e4

08016cac <calloc>:
 8016cac:	4b02      	ldr	r3, [pc, #8]	; (8016cb8 <calloc+0xc>)
 8016cae:	460a      	mov	r2, r1
 8016cb0:	4601      	mov	r1, r0
 8016cb2:	6818      	ldr	r0, [r3, #0]
 8016cb4:	f000 b802 	b.w	8016cbc <_calloc_r>
 8016cb8:	24000110 	.word	0x24000110

08016cbc <_calloc_r>:
 8016cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cbe:	fba1 2402 	umull	r2, r4, r1, r2
 8016cc2:	b94c      	cbnz	r4, 8016cd8 <_calloc_r+0x1c>
 8016cc4:	4611      	mov	r1, r2
 8016cc6:	9201      	str	r2, [sp, #4]
 8016cc8:	f000 f886 	bl	8016dd8 <_malloc_r>
 8016ccc:	9a01      	ldr	r2, [sp, #4]
 8016cce:	4605      	mov	r5, r0
 8016cd0:	b930      	cbnz	r0, 8016ce0 <_calloc_r+0x24>
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	b003      	add	sp, #12
 8016cd6:	bd30      	pop	{r4, r5, pc}
 8016cd8:	220c      	movs	r2, #12
 8016cda:	6002      	str	r2, [r0, #0]
 8016cdc:	2500      	movs	r5, #0
 8016cde:	e7f8      	b.n	8016cd2 <_calloc_r+0x16>
 8016ce0:	4621      	mov	r1, r4
 8016ce2:	f000 fba9 	bl	8017438 <memset>
 8016ce6:	e7f4      	b.n	8016cd2 <_calloc_r+0x16>

08016ce8 <getenv>:
 8016ce8:	b507      	push	{r0, r1, r2, lr}
 8016cea:	4b04      	ldr	r3, [pc, #16]	; (8016cfc <getenv+0x14>)
 8016cec:	4601      	mov	r1, r0
 8016cee:	aa01      	add	r2, sp, #4
 8016cf0:	6818      	ldr	r0, [r3, #0]
 8016cf2:	f000 f805 	bl	8016d00 <_findenv_r>
 8016cf6:	b003      	add	sp, #12
 8016cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cfc:	24000110 	.word	0x24000110

08016d00 <_findenv_r>:
 8016d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d04:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016d74 <_findenv_r+0x74>
 8016d08:	4607      	mov	r7, r0
 8016d0a:	4689      	mov	r9, r1
 8016d0c:	4616      	mov	r6, r2
 8016d0e:	f000 fc89 	bl	8017624 <__env_lock>
 8016d12:	f8da 4000 	ldr.w	r4, [sl]
 8016d16:	b134      	cbz	r4, 8016d26 <_findenv_r+0x26>
 8016d18:	464b      	mov	r3, r9
 8016d1a:	4698      	mov	r8, r3
 8016d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d20:	b13a      	cbz	r2, 8016d32 <_findenv_r+0x32>
 8016d22:	2a3d      	cmp	r2, #61	; 0x3d
 8016d24:	d1f9      	bne.n	8016d1a <_findenv_r+0x1a>
 8016d26:	4638      	mov	r0, r7
 8016d28:	f000 fc82 	bl	8017630 <__env_unlock>
 8016d2c:	2000      	movs	r0, #0
 8016d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d32:	eba8 0809 	sub.w	r8, r8, r9
 8016d36:	46a3      	mov	fp, r4
 8016d38:	f854 0b04 	ldr.w	r0, [r4], #4
 8016d3c:	2800      	cmp	r0, #0
 8016d3e:	d0f2      	beq.n	8016d26 <_findenv_r+0x26>
 8016d40:	4642      	mov	r2, r8
 8016d42:	4649      	mov	r1, r9
 8016d44:	f000 fb8d 	bl	8017462 <strncmp>
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	d1f4      	bne.n	8016d36 <_findenv_r+0x36>
 8016d4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016d50:	eb03 0508 	add.w	r5, r3, r8
 8016d54:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016d58:	2b3d      	cmp	r3, #61	; 0x3d
 8016d5a:	d1ec      	bne.n	8016d36 <_findenv_r+0x36>
 8016d5c:	f8da 3000 	ldr.w	r3, [sl]
 8016d60:	ebab 0303 	sub.w	r3, fp, r3
 8016d64:	109b      	asrs	r3, r3, #2
 8016d66:	4638      	mov	r0, r7
 8016d68:	6033      	str	r3, [r6, #0]
 8016d6a:	f000 fc61 	bl	8017630 <__env_unlock>
 8016d6e:	1c68      	adds	r0, r5, #1
 8016d70:	e7dd      	b.n	8016d2e <_findenv_r+0x2e>
 8016d72:	bf00      	nop
 8016d74:	24000000 	.word	0x24000000

08016d78 <malloc>:
 8016d78:	4b02      	ldr	r3, [pc, #8]	; (8016d84 <malloc+0xc>)
 8016d7a:	4601      	mov	r1, r0
 8016d7c:	6818      	ldr	r0, [r3, #0]
 8016d7e:	f000 b82b 	b.w	8016dd8 <_malloc_r>
 8016d82:	bf00      	nop
 8016d84:	24000110 	.word	0x24000110

08016d88 <free>:
 8016d88:	4b02      	ldr	r3, [pc, #8]	; (8016d94 <free+0xc>)
 8016d8a:	4601      	mov	r1, r0
 8016d8c:	6818      	ldr	r0, [r3, #0]
 8016d8e:	f000 bc55 	b.w	801763c <_free_r>
 8016d92:	bf00      	nop
 8016d94:	24000110 	.word	0x24000110

08016d98 <sbrk_aligned>:
 8016d98:	b570      	push	{r4, r5, r6, lr}
 8016d9a:	4e0e      	ldr	r6, [pc, #56]	; (8016dd4 <sbrk_aligned+0x3c>)
 8016d9c:	460c      	mov	r4, r1
 8016d9e:	6831      	ldr	r1, [r6, #0]
 8016da0:	4605      	mov	r5, r0
 8016da2:	b911      	cbnz	r1, 8016daa <sbrk_aligned+0x12>
 8016da4:	f000 fbba 	bl	801751c <_sbrk_r>
 8016da8:	6030      	str	r0, [r6, #0]
 8016daa:	4621      	mov	r1, r4
 8016dac:	4628      	mov	r0, r5
 8016dae:	f000 fbb5 	bl	801751c <_sbrk_r>
 8016db2:	1c43      	adds	r3, r0, #1
 8016db4:	d00a      	beq.n	8016dcc <sbrk_aligned+0x34>
 8016db6:	1cc4      	adds	r4, r0, #3
 8016db8:	f024 0403 	bic.w	r4, r4, #3
 8016dbc:	42a0      	cmp	r0, r4
 8016dbe:	d007      	beq.n	8016dd0 <sbrk_aligned+0x38>
 8016dc0:	1a21      	subs	r1, r4, r0
 8016dc2:	4628      	mov	r0, r5
 8016dc4:	f000 fbaa 	bl	801751c <_sbrk_r>
 8016dc8:	3001      	adds	r0, #1
 8016dca:	d101      	bne.n	8016dd0 <sbrk_aligned+0x38>
 8016dcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	bd70      	pop	{r4, r5, r6, pc}
 8016dd4:	2400e29c 	.word	0x2400e29c

08016dd8 <_malloc_r>:
 8016dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ddc:	1ccd      	adds	r5, r1, #3
 8016dde:	f025 0503 	bic.w	r5, r5, #3
 8016de2:	3508      	adds	r5, #8
 8016de4:	2d0c      	cmp	r5, #12
 8016de6:	bf38      	it	cc
 8016de8:	250c      	movcc	r5, #12
 8016dea:	2d00      	cmp	r5, #0
 8016dec:	4607      	mov	r7, r0
 8016dee:	db01      	blt.n	8016df4 <_malloc_r+0x1c>
 8016df0:	42a9      	cmp	r1, r5
 8016df2:	d905      	bls.n	8016e00 <_malloc_r+0x28>
 8016df4:	230c      	movs	r3, #12
 8016df6:	603b      	str	r3, [r7, #0]
 8016df8:	2600      	movs	r6, #0
 8016dfa:	4630      	mov	r0, r6
 8016dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016ed4 <_malloc_r+0xfc>
 8016e04:	f000 f868 	bl	8016ed8 <__malloc_lock>
 8016e08:	f8d8 3000 	ldr.w	r3, [r8]
 8016e0c:	461c      	mov	r4, r3
 8016e0e:	bb5c      	cbnz	r4, 8016e68 <_malloc_r+0x90>
 8016e10:	4629      	mov	r1, r5
 8016e12:	4638      	mov	r0, r7
 8016e14:	f7ff ffc0 	bl	8016d98 <sbrk_aligned>
 8016e18:	1c43      	adds	r3, r0, #1
 8016e1a:	4604      	mov	r4, r0
 8016e1c:	d155      	bne.n	8016eca <_malloc_r+0xf2>
 8016e1e:	f8d8 4000 	ldr.w	r4, [r8]
 8016e22:	4626      	mov	r6, r4
 8016e24:	2e00      	cmp	r6, #0
 8016e26:	d145      	bne.n	8016eb4 <_malloc_r+0xdc>
 8016e28:	2c00      	cmp	r4, #0
 8016e2a:	d048      	beq.n	8016ebe <_malloc_r+0xe6>
 8016e2c:	6823      	ldr	r3, [r4, #0]
 8016e2e:	4631      	mov	r1, r6
 8016e30:	4638      	mov	r0, r7
 8016e32:	eb04 0903 	add.w	r9, r4, r3
 8016e36:	f000 fb71 	bl	801751c <_sbrk_r>
 8016e3a:	4581      	cmp	r9, r0
 8016e3c:	d13f      	bne.n	8016ebe <_malloc_r+0xe6>
 8016e3e:	6821      	ldr	r1, [r4, #0]
 8016e40:	1a6d      	subs	r5, r5, r1
 8016e42:	4629      	mov	r1, r5
 8016e44:	4638      	mov	r0, r7
 8016e46:	f7ff ffa7 	bl	8016d98 <sbrk_aligned>
 8016e4a:	3001      	adds	r0, #1
 8016e4c:	d037      	beq.n	8016ebe <_malloc_r+0xe6>
 8016e4e:	6823      	ldr	r3, [r4, #0]
 8016e50:	442b      	add	r3, r5
 8016e52:	6023      	str	r3, [r4, #0]
 8016e54:	f8d8 3000 	ldr.w	r3, [r8]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d038      	beq.n	8016ece <_malloc_r+0xf6>
 8016e5c:	685a      	ldr	r2, [r3, #4]
 8016e5e:	42a2      	cmp	r2, r4
 8016e60:	d12b      	bne.n	8016eba <_malloc_r+0xe2>
 8016e62:	2200      	movs	r2, #0
 8016e64:	605a      	str	r2, [r3, #4]
 8016e66:	e00f      	b.n	8016e88 <_malloc_r+0xb0>
 8016e68:	6822      	ldr	r2, [r4, #0]
 8016e6a:	1b52      	subs	r2, r2, r5
 8016e6c:	d41f      	bmi.n	8016eae <_malloc_r+0xd6>
 8016e6e:	2a0b      	cmp	r2, #11
 8016e70:	d917      	bls.n	8016ea2 <_malloc_r+0xca>
 8016e72:	1961      	adds	r1, r4, r5
 8016e74:	42a3      	cmp	r3, r4
 8016e76:	6025      	str	r5, [r4, #0]
 8016e78:	bf18      	it	ne
 8016e7a:	6059      	strne	r1, [r3, #4]
 8016e7c:	6863      	ldr	r3, [r4, #4]
 8016e7e:	bf08      	it	eq
 8016e80:	f8c8 1000 	streq.w	r1, [r8]
 8016e84:	5162      	str	r2, [r4, r5]
 8016e86:	604b      	str	r3, [r1, #4]
 8016e88:	4638      	mov	r0, r7
 8016e8a:	f104 060b 	add.w	r6, r4, #11
 8016e8e:	f000 f829 	bl	8016ee4 <__malloc_unlock>
 8016e92:	f026 0607 	bic.w	r6, r6, #7
 8016e96:	1d23      	adds	r3, r4, #4
 8016e98:	1af2      	subs	r2, r6, r3
 8016e9a:	d0ae      	beq.n	8016dfa <_malloc_r+0x22>
 8016e9c:	1b9b      	subs	r3, r3, r6
 8016e9e:	50a3      	str	r3, [r4, r2]
 8016ea0:	e7ab      	b.n	8016dfa <_malloc_r+0x22>
 8016ea2:	42a3      	cmp	r3, r4
 8016ea4:	6862      	ldr	r2, [r4, #4]
 8016ea6:	d1dd      	bne.n	8016e64 <_malloc_r+0x8c>
 8016ea8:	f8c8 2000 	str.w	r2, [r8]
 8016eac:	e7ec      	b.n	8016e88 <_malloc_r+0xb0>
 8016eae:	4623      	mov	r3, r4
 8016eb0:	6864      	ldr	r4, [r4, #4]
 8016eb2:	e7ac      	b.n	8016e0e <_malloc_r+0x36>
 8016eb4:	4634      	mov	r4, r6
 8016eb6:	6876      	ldr	r6, [r6, #4]
 8016eb8:	e7b4      	b.n	8016e24 <_malloc_r+0x4c>
 8016eba:	4613      	mov	r3, r2
 8016ebc:	e7cc      	b.n	8016e58 <_malloc_r+0x80>
 8016ebe:	230c      	movs	r3, #12
 8016ec0:	603b      	str	r3, [r7, #0]
 8016ec2:	4638      	mov	r0, r7
 8016ec4:	f000 f80e 	bl	8016ee4 <__malloc_unlock>
 8016ec8:	e797      	b.n	8016dfa <_malloc_r+0x22>
 8016eca:	6025      	str	r5, [r4, #0]
 8016ecc:	e7dc      	b.n	8016e88 <_malloc_r+0xb0>
 8016ece:	605b      	str	r3, [r3, #4]
 8016ed0:	deff      	udf	#255	; 0xff
 8016ed2:	bf00      	nop
 8016ed4:	2400e298 	.word	0x2400e298

08016ed8 <__malloc_lock>:
 8016ed8:	4801      	ldr	r0, [pc, #4]	; (8016ee0 <__malloc_lock+0x8>)
 8016eda:	f000 bb6c 	b.w	80175b6 <__retarget_lock_acquire_recursive>
 8016ede:	bf00      	nop
 8016ee0:	2400e3e1 	.word	0x2400e3e1

08016ee4 <__malloc_unlock>:
 8016ee4:	4801      	ldr	r0, [pc, #4]	; (8016eec <__malloc_unlock+0x8>)
 8016ee6:	f000 bb67 	b.w	80175b8 <__retarget_lock_release_recursive>
 8016eea:	bf00      	nop
 8016eec:	2400e3e1 	.word	0x2400e3e1

08016ef0 <srand>:
 8016ef0:	b538      	push	{r3, r4, r5, lr}
 8016ef2:	4b10      	ldr	r3, [pc, #64]	; (8016f34 <srand+0x44>)
 8016ef4:	681d      	ldr	r5, [r3, #0]
 8016ef6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016ef8:	4604      	mov	r4, r0
 8016efa:	b9b3      	cbnz	r3, 8016f2a <srand+0x3a>
 8016efc:	2018      	movs	r0, #24
 8016efe:	f7ff ff3b 	bl	8016d78 <malloc>
 8016f02:	4602      	mov	r2, r0
 8016f04:	6328      	str	r0, [r5, #48]	; 0x30
 8016f06:	b920      	cbnz	r0, 8016f12 <srand+0x22>
 8016f08:	4b0b      	ldr	r3, [pc, #44]	; (8016f38 <srand+0x48>)
 8016f0a:	480c      	ldr	r0, [pc, #48]	; (8016f3c <srand+0x4c>)
 8016f0c:	2146      	movs	r1, #70	; 0x46
 8016f0e:	f000 fb6b 	bl	80175e8 <__assert_func>
 8016f12:	490b      	ldr	r1, [pc, #44]	; (8016f40 <srand+0x50>)
 8016f14:	4b0b      	ldr	r3, [pc, #44]	; (8016f44 <srand+0x54>)
 8016f16:	e9c0 1300 	strd	r1, r3, [r0]
 8016f1a:	4b0b      	ldr	r3, [pc, #44]	; (8016f48 <srand+0x58>)
 8016f1c:	6083      	str	r3, [r0, #8]
 8016f1e:	230b      	movs	r3, #11
 8016f20:	8183      	strh	r3, [r0, #12]
 8016f22:	2100      	movs	r1, #0
 8016f24:	2001      	movs	r0, #1
 8016f26:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016f2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	611c      	str	r4, [r3, #16]
 8016f30:	615a      	str	r2, [r3, #20]
 8016f32:	bd38      	pop	{r3, r4, r5, pc}
 8016f34:	24000110 	.word	0x24000110
 8016f38:	08018e04 	.word	0x08018e04
 8016f3c:	08018e1b 	.word	0x08018e1b
 8016f40:	abcd330e 	.word	0xabcd330e
 8016f44:	e66d1234 	.word	0xe66d1234
 8016f48:	0005deec 	.word	0x0005deec

08016f4c <rand>:
 8016f4c:	4b16      	ldr	r3, [pc, #88]	; (8016fa8 <rand+0x5c>)
 8016f4e:	b510      	push	{r4, lr}
 8016f50:	681c      	ldr	r4, [r3, #0]
 8016f52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f54:	b9b3      	cbnz	r3, 8016f84 <rand+0x38>
 8016f56:	2018      	movs	r0, #24
 8016f58:	f7ff ff0e 	bl	8016d78 <malloc>
 8016f5c:	4602      	mov	r2, r0
 8016f5e:	6320      	str	r0, [r4, #48]	; 0x30
 8016f60:	b920      	cbnz	r0, 8016f6c <rand+0x20>
 8016f62:	4b12      	ldr	r3, [pc, #72]	; (8016fac <rand+0x60>)
 8016f64:	4812      	ldr	r0, [pc, #72]	; (8016fb0 <rand+0x64>)
 8016f66:	2152      	movs	r1, #82	; 0x52
 8016f68:	f000 fb3e 	bl	80175e8 <__assert_func>
 8016f6c:	4911      	ldr	r1, [pc, #68]	; (8016fb4 <rand+0x68>)
 8016f6e:	4b12      	ldr	r3, [pc, #72]	; (8016fb8 <rand+0x6c>)
 8016f70:	e9c0 1300 	strd	r1, r3, [r0]
 8016f74:	4b11      	ldr	r3, [pc, #68]	; (8016fbc <rand+0x70>)
 8016f76:	6083      	str	r3, [r0, #8]
 8016f78:	230b      	movs	r3, #11
 8016f7a:	8183      	strh	r3, [r0, #12]
 8016f7c:	2100      	movs	r1, #0
 8016f7e:	2001      	movs	r0, #1
 8016f80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016f84:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016f86:	480e      	ldr	r0, [pc, #56]	; (8016fc0 <rand+0x74>)
 8016f88:	690b      	ldr	r3, [r1, #16]
 8016f8a:	694c      	ldr	r4, [r1, #20]
 8016f8c:	4a0d      	ldr	r2, [pc, #52]	; (8016fc4 <rand+0x78>)
 8016f8e:	4358      	muls	r0, r3
 8016f90:	fb02 0004 	mla	r0, r2, r4, r0
 8016f94:	fba3 3202 	umull	r3, r2, r3, r2
 8016f98:	3301      	adds	r3, #1
 8016f9a:	eb40 0002 	adc.w	r0, r0, r2
 8016f9e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016fa2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016fa6:	bd10      	pop	{r4, pc}
 8016fa8:	24000110 	.word	0x24000110
 8016fac:	08018e04 	.word	0x08018e04
 8016fb0:	08018e1b 	.word	0x08018e1b
 8016fb4:	abcd330e 	.word	0xabcd330e
 8016fb8:	e66d1234 	.word	0xe66d1234
 8016fbc:	0005deec 	.word	0x0005deec
 8016fc0:	5851f42d 	.word	0x5851f42d
 8016fc4:	4c957f2d 	.word	0x4c957f2d

08016fc8 <realloc>:
 8016fc8:	4b02      	ldr	r3, [pc, #8]	; (8016fd4 <realloc+0xc>)
 8016fca:	460a      	mov	r2, r1
 8016fcc:	4601      	mov	r1, r0
 8016fce:	6818      	ldr	r0, [r3, #0]
 8016fd0:	f000 b802 	b.w	8016fd8 <_realloc_r>
 8016fd4:	24000110 	.word	0x24000110

08016fd8 <_realloc_r>:
 8016fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fdc:	4680      	mov	r8, r0
 8016fde:	4614      	mov	r4, r2
 8016fe0:	460e      	mov	r6, r1
 8016fe2:	b921      	cbnz	r1, 8016fee <_realloc_r+0x16>
 8016fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe8:	4611      	mov	r1, r2
 8016fea:	f7ff bef5 	b.w	8016dd8 <_malloc_r>
 8016fee:	b92a      	cbnz	r2, 8016ffc <_realloc_r+0x24>
 8016ff0:	f000 fb24 	bl	801763c <_free_r>
 8016ff4:	4625      	mov	r5, r4
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ffc:	f000 fb6a 	bl	80176d4 <_malloc_usable_size_r>
 8017000:	4284      	cmp	r4, r0
 8017002:	4607      	mov	r7, r0
 8017004:	d802      	bhi.n	801700c <_realloc_r+0x34>
 8017006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801700a:	d812      	bhi.n	8017032 <_realloc_r+0x5a>
 801700c:	4621      	mov	r1, r4
 801700e:	4640      	mov	r0, r8
 8017010:	f7ff fee2 	bl	8016dd8 <_malloc_r>
 8017014:	4605      	mov	r5, r0
 8017016:	2800      	cmp	r0, #0
 8017018:	d0ed      	beq.n	8016ff6 <_realloc_r+0x1e>
 801701a:	42bc      	cmp	r4, r7
 801701c:	4622      	mov	r2, r4
 801701e:	4631      	mov	r1, r6
 8017020:	bf28      	it	cs
 8017022:	463a      	movcs	r2, r7
 8017024:	f000 fad1 	bl	80175ca <memcpy>
 8017028:	4631      	mov	r1, r6
 801702a:	4640      	mov	r0, r8
 801702c:	f000 fb06 	bl	801763c <_free_r>
 8017030:	e7e1      	b.n	8016ff6 <_realloc_r+0x1e>
 8017032:	4635      	mov	r5, r6
 8017034:	e7df      	b.n	8016ff6 <_realloc_r+0x1e>
	...

08017038 <_strtoul_l.constprop.0>:
 8017038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801703c:	4f36      	ldr	r7, [pc, #216]	; (8017118 <_strtoul_l.constprop.0+0xe0>)
 801703e:	4686      	mov	lr, r0
 8017040:	460d      	mov	r5, r1
 8017042:	4628      	mov	r0, r5
 8017044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017048:	5d3e      	ldrb	r6, [r7, r4]
 801704a:	f016 0608 	ands.w	r6, r6, #8
 801704e:	d1f8      	bne.n	8017042 <_strtoul_l.constprop.0+0xa>
 8017050:	2c2d      	cmp	r4, #45	; 0x2d
 8017052:	d130      	bne.n	80170b6 <_strtoul_l.constprop.0+0x7e>
 8017054:	782c      	ldrb	r4, [r5, #0]
 8017056:	2601      	movs	r6, #1
 8017058:	1c85      	adds	r5, r0, #2
 801705a:	2b00      	cmp	r3, #0
 801705c:	d057      	beq.n	801710e <_strtoul_l.constprop.0+0xd6>
 801705e:	2b10      	cmp	r3, #16
 8017060:	d109      	bne.n	8017076 <_strtoul_l.constprop.0+0x3e>
 8017062:	2c30      	cmp	r4, #48	; 0x30
 8017064:	d107      	bne.n	8017076 <_strtoul_l.constprop.0+0x3e>
 8017066:	7828      	ldrb	r0, [r5, #0]
 8017068:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801706c:	2858      	cmp	r0, #88	; 0x58
 801706e:	d149      	bne.n	8017104 <_strtoul_l.constprop.0+0xcc>
 8017070:	786c      	ldrb	r4, [r5, #1]
 8017072:	2310      	movs	r3, #16
 8017074:	3502      	adds	r5, #2
 8017076:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801707a:	2700      	movs	r7, #0
 801707c:	fbb8 f8f3 	udiv	r8, r8, r3
 8017080:	fb03 f908 	mul.w	r9, r3, r8
 8017084:	ea6f 0909 	mvn.w	r9, r9
 8017088:	4638      	mov	r0, r7
 801708a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801708e:	f1bc 0f09 	cmp.w	ip, #9
 8017092:	d815      	bhi.n	80170c0 <_strtoul_l.constprop.0+0x88>
 8017094:	4664      	mov	r4, ip
 8017096:	42a3      	cmp	r3, r4
 8017098:	dd23      	ble.n	80170e2 <_strtoul_l.constprop.0+0xaa>
 801709a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801709e:	d007      	beq.n	80170b0 <_strtoul_l.constprop.0+0x78>
 80170a0:	4580      	cmp	r8, r0
 80170a2:	d31b      	bcc.n	80170dc <_strtoul_l.constprop.0+0xa4>
 80170a4:	d101      	bne.n	80170aa <_strtoul_l.constprop.0+0x72>
 80170a6:	45a1      	cmp	r9, r4
 80170a8:	db18      	blt.n	80170dc <_strtoul_l.constprop.0+0xa4>
 80170aa:	fb00 4003 	mla	r0, r0, r3, r4
 80170ae:	2701      	movs	r7, #1
 80170b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170b4:	e7e9      	b.n	801708a <_strtoul_l.constprop.0+0x52>
 80170b6:	2c2b      	cmp	r4, #43	; 0x2b
 80170b8:	bf04      	itt	eq
 80170ba:	782c      	ldrbeq	r4, [r5, #0]
 80170bc:	1c85      	addeq	r5, r0, #2
 80170be:	e7cc      	b.n	801705a <_strtoul_l.constprop.0+0x22>
 80170c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80170c4:	f1bc 0f19 	cmp.w	ip, #25
 80170c8:	d801      	bhi.n	80170ce <_strtoul_l.constprop.0+0x96>
 80170ca:	3c37      	subs	r4, #55	; 0x37
 80170cc:	e7e3      	b.n	8017096 <_strtoul_l.constprop.0+0x5e>
 80170ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80170d2:	f1bc 0f19 	cmp.w	ip, #25
 80170d6:	d804      	bhi.n	80170e2 <_strtoul_l.constprop.0+0xaa>
 80170d8:	3c57      	subs	r4, #87	; 0x57
 80170da:	e7dc      	b.n	8017096 <_strtoul_l.constprop.0+0x5e>
 80170dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80170e0:	e7e6      	b.n	80170b0 <_strtoul_l.constprop.0+0x78>
 80170e2:	1c7b      	adds	r3, r7, #1
 80170e4:	d106      	bne.n	80170f4 <_strtoul_l.constprop.0+0xbc>
 80170e6:	2322      	movs	r3, #34	; 0x22
 80170e8:	f8ce 3000 	str.w	r3, [lr]
 80170ec:	4638      	mov	r0, r7
 80170ee:	b932      	cbnz	r2, 80170fe <_strtoul_l.constprop.0+0xc6>
 80170f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170f4:	b106      	cbz	r6, 80170f8 <_strtoul_l.constprop.0+0xc0>
 80170f6:	4240      	negs	r0, r0
 80170f8:	2a00      	cmp	r2, #0
 80170fa:	d0f9      	beq.n	80170f0 <_strtoul_l.constprop.0+0xb8>
 80170fc:	b107      	cbz	r7, 8017100 <_strtoul_l.constprop.0+0xc8>
 80170fe:	1e69      	subs	r1, r5, #1
 8017100:	6011      	str	r1, [r2, #0]
 8017102:	e7f5      	b.n	80170f0 <_strtoul_l.constprop.0+0xb8>
 8017104:	2430      	movs	r4, #48	; 0x30
 8017106:	2b00      	cmp	r3, #0
 8017108:	d1b5      	bne.n	8017076 <_strtoul_l.constprop.0+0x3e>
 801710a:	2308      	movs	r3, #8
 801710c:	e7b3      	b.n	8017076 <_strtoul_l.constprop.0+0x3e>
 801710e:	2c30      	cmp	r4, #48	; 0x30
 8017110:	d0a9      	beq.n	8017066 <_strtoul_l.constprop.0+0x2e>
 8017112:	230a      	movs	r3, #10
 8017114:	e7af      	b.n	8017076 <_strtoul_l.constprop.0+0x3e>
 8017116:	bf00      	nop
 8017118:	08018e74 	.word	0x08018e74

0801711c <strtoul>:
 801711c:	4613      	mov	r3, r2
 801711e:	460a      	mov	r2, r1
 8017120:	4601      	mov	r1, r0
 8017122:	4802      	ldr	r0, [pc, #8]	; (801712c <strtoul+0x10>)
 8017124:	6800      	ldr	r0, [r0, #0]
 8017126:	f7ff bf87 	b.w	8017038 <_strtoul_l.constprop.0>
 801712a:	bf00      	nop
 801712c:	24000110 	.word	0x24000110

08017130 <std>:
 8017130:	2300      	movs	r3, #0
 8017132:	b510      	push	{r4, lr}
 8017134:	4604      	mov	r4, r0
 8017136:	e9c0 3300 	strd	r3, r3, [r0]
 801713a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801713e:	6083      	str	r3, [r0, #8]
 8017140:	8181      	strh	r1, [r0, #12]
 8017142:	6643      	str	r3, [r0, #100]	; 0x64
 8017144:	81c2      	strh	r2, [r0, #14]
 8017146:	6183      	str	r3, [r0, #24]
 8017148:	4619      	mov	r1, r3
 801714a:	2208      	movs	r2, #8
 801714c:	305c      	adds	r0, #92	; 0x5c
 801714e:	f000 f973 	bl	8017438 <memset>
 8017152:	4b0d      	ldr	r3, [pc, #52]	; (8017188 <std+0x58>)
 8017154:	6263      	str	r3, [r4, #36]	; 0x24
 8017156:	4b0d      	ldr	r3, [pc, #52]	; (801718c <std+0x5c>)
 8017158:	62a3      	str	r3, [r4, #40]	; 0x28
 801715a:	4b0d      	ldr	r3, [pc, #52]	; (8017190 <std+0x60>)
 801715c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801715e:	4b0d      	ldr	r3, [pc, #52]	; (8017194 <std+0x64>)
 8017160:	6323      	str	r3, [r4, #48]	; 0x30
 8017162:	4b0d      	ldr	r3, [pc, #52]	; (8017198 <std+0x68>)
 8017164:	6224      	str	r4, [r4, #32]
 8017166:	429c      	cmp	r4, r3
 8017168:	d006      	beq.n	8017178 <std+0x48>
 801716a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801716e:	4294      	cmp	r4, r2
 8017170:	d002      	beq.n	8017178 <std+0x48>
 8017172:	33d0      	adds	r3, #208	; 0xd0
 8017174:	429c      	cmp	r4, r3
 8017176:	d105      	bne.n	8017184 <std+0x54>
 8017178:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017180:	f000 ba18 	b.w	80175b4 <__retarget_lock_init_recursive>
 8017184:	bd10      	pop	{r4, pc}
 8017186:	bf00      	nop
 8017188:	08017341 	.word	0x08017341
 801718c:	08017363 	.word	0x08017363
 8017190:	0801739b 	.word	0x0801739b
 8017194:	080173bf 	.word	0x080173bf
 8017198:	2400e2a0 	.word	0x2400e2a0

0801719c <stdio_exit_handler>:
 801719c:	4a02      	ldr	r2, [pc, #8]	; (80171a8 <stdio_exit_handler+0xc>)
 801719e:	4903      	ldr	r1, [pc, #12]	; (80171ac <stdio_exit_handler+0x10>)
 80171a0:	4803      	ldr	r0, [pc, #12]	; (80171b0 <stdio_exit_handler+0x14>)
 80171a2:	f000 b869 	b.w	8017278 <_fwalk_sglue>
 80171a6:	bf00      	nop
 80171a8:	240000b8 	.word	0x240000b8
 80171ac:	08018049 	.word	0x08018049
 80171b0:	240000c4 	.word	0x240000c4

080171b4 <cleanup_stdio>:
 80171b4:	6841      	ldr	r1, [r0, #4]
 80171b6:	4b0c      	ldr	r3, [pc, #48]	; (80171e8 <cleanup_stdio+0x34>)
 80171b8:	4299      	cmp	r1, r3
 80171ba:	b510      	push	{r4, lr}
 80171bc:	4604      	mov	r4, r0
 80171be:	d001      	beq.n	80171c4 <cleanup_stdio+0x10>
 80171c0:	f000 ff42 	bl	8018048 <_fflush_r>
 80171c4:	68a1      	ldr	r1, [r4, #8]
 80171c6:	4b09      	ldr	r3, [pc, #36]	; (80171ec <cleanup_stdio+0x38>)
 80171c8:	4299      	cmp	r1, r3
 80171ca:	d002      	beq.n	80171d2 <cleanup_stdio+0x1e>
 80171cc:	4620      	mov	r0, r4
 80171ce:	f000 ff3b 	bl	8018048 <_fflush_r>
 80171d2:	68e1      	ldr	r1, [r4, #12]
 80171d4:	4b06      	ldr	r3, [pc, #24]	; (80171f0 <cleanup_stdio+0x3c>)
 80171d6:	4299      	cmp	r1, r3
 80171d8:	d004      	beq.n	80171e4 <cleanup_stdio+0x30>
 80171da:	4620      	mov	r0, r4
 80171dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171e0:	f000 bf32 	b.w	8018048 <_fflush_r>
 80171e4:	bd10      	pop	{r4, pc}
 80171e6:	bf00      	nop
 80171e8:	2400e2a0 	.word	0x2400e2a0
 80171ec:	2400e308 	.word	0x2400e308
 80171f0:	2400e370 	.word	0x2400e370

080171f4 <global_stdio_init.part.0>:
 80171f4:	b510      	push	{r4, lr}
 80171f6:	4b0b      	ldr	r3, [pc, #44]	; (8017224 <global_stdio_init.part.0+0x30>)
 80171f8:	4c0b      	ldr	r4, [pc, #44]	; (8017228 <global_stdio_init.part.0+0x34>)
 80171fa:	4a0c      	ldr	r2, [pc, #48]	; (801722c <global_stdio_init.part.0+0x38>)
 80171fc:	601a      	str	r2, [r3, #0]
 80171fe:	4620      	mov	r0, r4
 8017200:	2200      	movs	r2, #0
 8017202:	2104      	movs	r1, #4
 8017204:	f7ff ff94 	bl	8017130 <std>
 8017208:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801720c:	2201      	movs	r2, #1
 801720e:	2109      	movs	r1, #9
 8017210:	f7ff ff8e 	bl	8017130 <std>
 8017214:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017218:	2202      	movs	r2, #2
 801721a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801721e:	2112      	movs	r1, #18
 8017220:	f7ff bf86 	b.w	8017130 <std>
 8017224:	2400e3d8 	.word	0x2400e3d8
 8017228:	2400e2a0 	.word	0x2400e2a0
 801722c:	0801719d 	.word	0x0801719d

08017230 <__sfp_lock_acquire>:
 8017230:	4801      	ldr	r0, [pc, #4]	; (8017238 <__sfp_lock_acquire+0x8>)
 8017232:	f000 b9c0 	b.w	80175b6 <__retarget_lock_acquire_recursive>
 8017236:	bf00      	nop
 8017238:	2400e3e2 	.word	0x2400e3e2

0801723c <__sfp_lock_release>:
 801723c:	4801      	ldr	r0, [pc, #4]	; (8017244 <__sfp_lock_release+0x8>)
 801723e:	f000 b9bb 	b.w	80175b8 <__retarget_lock_release_recursive>
 8017242:	bf00      	nop
 8017244:	2400e3e2 	.word	0x2400e3e2

08017248 <__sinit>:
 8017248:	b510      	push	{r4, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	f7ff fff0 	bl	8017230 <__sfp_lock_acquire>
 8017250:	6a23      	ldr	r3, [r4, #32]
 8017252:	b11b      	cbz	r3, 801725c <__sinit+0x14>
 8017254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017258:	f7ff bff0 	b.w	801723c <__sfp_lock_release>
 801725c:	4b04      	ldr	r3, [pc, #16]	; (8017270 <__sinit+0x28>)
 801725e:	6223      	str	r3, [r4, #32]
 8017260:	4b04      	ldr	r3, [pc, #16]	; (8017274 <__sinit+0x2c>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d1f5      	bne.n	8017254 <__sinit+0xc>
 8017268:	f7ff ffc4 	bl	80171f4 <global_stdio_init.part.0>
 801726c:	e7f2      	b.n	8017254 <__sinit+0xc>
 801726e:	bf00      	nop
 8017270:	080171b5 	.word	0x080171b5
 8017274:	2400e3d8 	.word	0x2400e3d8

08017278 <_fwalk_sglue>:
 8017278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801727c:	4607      	mov	r7, r0
 801727e:	4688      	mov	r8, r1
 8017280:	4614      	mov	r4, r2
 8017282:	2600      	movs	r6, #0
 8017284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017288:	f1b9 0901 	subs.w	r9, r9, #1
 801728c:	d505      	bpl.n	801729a <_fwalk_sglue+0x22>
 801728e:	6824      	ldr	r4, [r4, #0]
 8017290:	2c00      	cmp	r4, #0
 8017292:	d1f7      	bne.n	8017284 <_fwalk_sglue+0xc>
 8017294:	4630      	mov	r0, r6
 8017296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801729a:	89ab      	ldrh	r3, [r5, #12]
 801729c:	2b01      	cmp	r3, #1
 801729e:	d907      	bls.n	80172b0 <_fwalk_sglue+0x38>
 80172a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172a4:	3301      	adds	r3, #1
 80172a6:	d003      	beq.n	80172b0 <_fwalk_sglue+0x38>
 80172a8:	4629      	mov	r1, r5
 80172aa:	4638      	mov	r0, r7
 80172ac:	47c0      	blx	r8
 80172ae:	4306      	orrs	r6, r0
 80172b0:	3568      	adds	r5, #104	; 0x68
 80172b2:	e7e9      	b.n	8017288 <_fwalk_sglue+0x10>

080172b4 <iprintf>:
 80172b4:	b40f      	push	{r0, r1, r2, r3}
 80172b6:	b507      	push	{r0, r1, r2, lr}
 80172b8:	4906      	ldr	r1, [pc, #24]	; (80172d4 <iprintf+0x20>)
 80172ba:	ab04      	add	r3, sp, #16
 80172bc:	6808      	ldr	r0, [r1, #0]
 80172be:	f853 2b04 	ldr.w	r2, [r3], #4
 80172c2:	6881      	ldr	r1, [r0, #8]
 80172c4:	9301      	str	r3, [sp, #4]
 80172c6:	f000 fb8f 	bl	80179e8 <_vfiprintf_r>
 80172ca:	b003      	add	sp, #12
 80172cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80172d0:	b004      	add	sp, #16
 80172d2:	4770      	bx	lr
 80172d4:	24000110 	.word	0x24000110

080172d8 <sniprintf>:
 80172d8:	b40c      	push	{r2, r3}
 80172da:	b530      	push	{r4, r5, lr}
 80172dc:	4b17      	ldr	r3, [pc, #92]	; (801733c <sniprintf+0x64>)
 80172de:	1e0c      	subs	r4, r1, #0
 80172e0:	681d      	ldr	r5, [r3, #0]
 80172e2:	b09d      	sub	sp, #116	; 0x74
 80172e4:	da08      	bge.n	80172f8 <sniprintf+0x20>
 80172e6:	238b      	movs	r3, #139	; 0x8b
 80172e8:	602b      	str	r3, [r5, #0]
 80172ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172ee:	b01d      	add	sp, #116	; 0x74
 80172f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172f4:	b002      	add	sp, #8
 80172f6:	4770      	bx	lr
 80172f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80172fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017300:	bf14      	ite	ne
 8017302:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017306:	4623      	moveq	r3, r4
 8017308:	9304      	str	r3, [sp, #16]
 801730a:	9307      	str	r3, [sp, #28]
 801730c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017310:	9002      	str	r0, [sp, #8]
 8017312:	9006      	str	r0, [sp, #24]
 8017314:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017318:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801731a:	ab21      	add	r3, sp, #132	; 0x84
 801731c:	a902      	add	r1, sp, #8
 801731e:	4628      	mov	r0, r5
 8017320:	9301      	str	r3, [sp, #4]
 8017322:	f000 fa39 	bl	8017798 <_svfiprintf_r>
 8017326:	1c43      	adds	r3, r0, #1
 8017328:	bfbc      	itt	lt
 801732a:	238b      	movlt	r3, #139	; 0x8b
 801732c:	602b      	strlt	r3, [r5, #0]
 801732e:	2c00      	cmp	r4, #0
 8017330:	d0dd      	beq.n	80172ee <sniprintf+0x16>
 8017332:	9b02      	ldr	r3, [sp, #8]
 8017334:	2200      	movs	r2, #0
 8017336:	701a      	strb	r2, [r3, #0]
 8017338:	e7d9      	b.n	80172ee <sniprintf+0x16>
 801733a:	bf00      	nop
 801733c:	24000110 	.word	0x24000110

08017340 <__sread>:
 8017340:	b510      	push	{r4, lr}
 8017342:	460c      	mov	r4, r1
 8017344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017348:	f000 f8d6 	bl	80174f8 <_read_r>
 801734c:	2800      	cmp	r0, #0
 801734e:	bfab      	itete	ge
 8017350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017352:	89a3      	ldrhlt	r3, [r4, #12]
 8017354:	181b      	addge	r3, r3, r0
 8017356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801735a:	bfac      	ite	ge
 801735c:	6563      	strge	r3, [r4, #84]	; 0x54
 801735e:	81a3      	strhlt	r3, [r4, #12]
 8017360:	bd10      	pop	{r4, pc}

08017362 <__swrite>:
 8017362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017366:	461f      	mov	r7, r3
 8017368:	898b      	ldrh	r3, [r1, #12]
 801736a:	05db      	lsls	r3, r3, #23
 801736c:	4605      	mov	r5, r0
 801736e:	460c      	mov	r4, r1
 8017370:	4616      	mov	r6, r2
 8017372:	d505      	bpl.n	8017380 <__swrite+0x1e>
 8017374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017378:	2302      	movs	r3, #2
 801737a:	2200      	movs	r2, #0
 801737c:	f000 f8aa 	bl	80174d4 <_lseek_r>
 8017380:	89a3      	ldrh	r3, [r4, #12]
 8017382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801738a:	81a3      	strh	r3, [r4, #12]
 801738c:	4632      	mov	r2, r6
 801738e:	463b      	mov	r3, r7
 8017390:	4628      	mov	r0, r5
 8017392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017396:	f000 b8d1 	b.w	801753c <_write_r>

0801739a <__sseek>:
 801739a:	b510      	push	{r4, lr}
 801739c:	460c      	mov	r4, r1
 801739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a2:	f000 f897 	bl	80174d4 <_lseek_r>
 80173a6:	1c43      	adds	r3, r0, #1
 80173a8:	89a3      	ldrh	r3, [r4, #12]
 80173aa:	bf15      	itete	ne
 80173ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80173ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80173b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80173b6:	81a3      	strheq	r3, [r4, #12]
 80173b8:	bf18      	it	ne
 80173ba:	81a3      	strhne	r3, [r4, #12]
 80173bc:	bd10      	pop	{r4, pc}

080173be <__sclose>:
 80173be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c2:	f000 b877 	b.w	80174b4 <_close_r>

080173c6 <_vsniprintf_r>:
 80173c6:	b530      	push	{r4, r5, lr}
 80173c8:	4614      	mov	r4, r2
 80173ca:	2c00      	cmp	r4, #0
 80173cc:	b09b      	sub	sp, #108	; 0x6c
 80173ce:	4605      	mov	r5, r0
 80173d0:	461a      	mov	r2, r3
 80173d2:	da05      	bge.n	80173e0 <_vsniprintf_r+0x1a>
 80173d4:	238b      	movs	r3, #139	; 0x8b
 80173d6:	6003      	str	r3, [r0, #0]
 80173d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173dc:	b01b      	add	sp, #108	; 0x6c
 80173de:	bd30      	pop	{r4, r5, pc}
 80173e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80173e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80173e8:	bf14      	ite	ne
 80173ea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80173ee:	4623      	moveq	r3, r4
 80173f0:	9302      	str	r3, [sp, #8]
 80173f2:	9305      	str	r3, [sp, #20]
 80173f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173f8:	9100      	str	r1, [sp, #0]
 80173fa:	9104      	str	r1, [sp, #16]
 80173fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017400:	4669      	mov	r1, sp
 8017402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017404:	f000 f9c8 	bl	8017798 <_svfiprintf_r>
 8017408:	1c43      	adds	r3, r0, #1
 801740a:	bfbc      	itt	lt
 801740c:	238b      	movlt	r3, #139	; 0x8b
 801740e:	602b      	strlt	r3, [r5, #0]
 8017410:	2c00      	cmp	r4, #0
 8017412:	d0e3      	beq.n	80173dc <_vsniprintf_r+0x16>
 8017414:	9b00      	ldr	r3, [sp, #0]
 8017416:	2200      	movs	r2, #0
 8017418:	701a      	strb	r2, [r3, #0]
 801741a:	e7df      	b.n	80173dc <_vsniprintf_r+0x16>

0801741c <vsniprintf>:
 801741c:	b507      	push	{r0, r1, r2, lr}
 801741e:	9300      	str	r3, [sp, #0]
 8017420:	4613      	mov	r3, r2
 8017422:	460a      	mov	r2, r1
 8017424:	4601      	mov	r1, r0
 8017426:	4803      	ldr	r0, [pc, #12]	; (8017434 <vsniprintf+0x18>)
 8017428:	6800      	ldr	r0, [r0, #0]
 801742a:	f7ff ffcc 	bl	80173c6 <_vsniprintf_r>
 801742e:	b003      	add	sp, #12
 8017430:	f85d fb04 	ldr.w	pc, [sp], #4
 8017434:	24000110 	.word	0x24000110

08017438 <memset>:
 8017438:	4402      	add	r2, r0
 801743a:	4603      	mov	r3, r0
 801743c:	4293      	cmp	r3, r2
 801743e:	d100      	bne.n	8017442 <memset+0xa>
 8017440:	4770      	bx	lr
 8017442:	f803 1b01 	strb.w	r1, [r3], #1
 8017446:	e7f9      	b.n	801743c <memset+0x4>

08017448 <strchr>:
 8017448:	b2c9      	uxtb	r1, r1
 801744a:	4603      	mov	r3, r0
 801744c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017450:	b11a      	cbz	r2, 801745a <strchr+0x12>
 8017452:	428a      	cmp	r2, r1
 8017454:	d1f9      	bne.n	801744a <strchr+0x2>
 8017456:	4618      	mov	r0, r3
 8017458:	4770      	bx	lr
 801745a:	2900      	cmp	r1, #0
 801745c:	bf18      	it	ne
 801745e:	2300      	movne	r3, #0
 8017460:	e7f9      	b.n	8017456 <strchr+0xe>

08017462 <strncmp>:
 8017462:	b510      	push	{r4, lr}
 8017464:	b16a      	cbz	r2, 8017482 <strncmp+0x20>
 8017466:	3901      	subs	r1, #1
 8017468:	1884      	adds	r4, r0, r2
 801746a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801746e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017472:	429a      	cmp	r2, r3
 8017474:	d103      	bne.n	801747e <strncmp+0x1c>
 8017476:	42a0      	cmp	r0, r4
 8017478:	d001      	beq.n	801747e <strncmp+0x1c>
 801747a:	2a00      	cmp	r2, #0
 801747c:	d1f5      	bne.n	801746a <strncmp+0x8>
 801747e:	1ad0      	subs	r0, r2, r3
 8017480:	bd10      	pop	{r4, pc}
 8017482:	4610      	mov	r0, r2
 8017484:	e7fc      	b.n	8017480 <strncmp+0x1e>

08017486 <strstr>:
 8017486:	780a      	ldrb	r2, [r1, #0]
 8017488:	b570      	push	{r4, r5, r6, lr}
 801748a:	b96a      	cbnz	r2, 80174a8 <strstr+0x22>
 801748c:	bd70      	pop	{r4, r5, r6, pc}
 801748e:	429a      	cmp	r2, r3
 8017490:	d109      	bne.n	80174a6 <strstr+0x20>
 8017492:	460c      	mov	r4, r1
 8017494:	4605      	mov	r5, r0
 8017496:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801749a:	2b00      	cmp	r3, #0
 801749c:	d0f6      	beq.n	801748c <strstr+0x6>
 801749e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80174a2:	429e      	cmp	r6, r3
 80174a4:	d0f7      	beq.n	8017496 <strstr+0x10>
 80174a6:	3001      	adds	r0, #1
 80174a8:	7803      	ldrb	r3, [r0, #0]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d1ef      	bne.n	801748e <strstr+0x8>
 80174ae:	4618      	mov	r0, r3
 80174b0:	e7ec      	b.n	801748c <strstr+0x6>
	...

080174b4 <_close_r>:
 80174b4:	b538      	push	{r3, r4, r5, lr}
 80174b6:	4d06      	ldr	r5, [pc, #24]	; (80174d0 <_close_r+0x1c>)
 80174b8:	2300      	movs	r3, #0
 80174ba:	4604      	mov	r4, r0
 80174bc:	4608      	mov	r0, r1
 80174be:	602b      	str	r3, [r5, #0]
 80174c0:	f7ea fb93 	bl	8001bea <_close>
 80174c4:	1c43      	adds	r3, r0, #1
 80174c6:	d102      	bne.n	80174ce <_close_r+0x1a>
 80174c8:	682b      	ldr	r3, [r5, #0]
 80174ca:	b103      	cbz	r3, 80174ce <_close_r+0x1a>
 80174cc:	6023      	str	r3, [r4, #0]
 80174ce:	bd38      	pop	{r3, r4, r5, pc}
 80174d0:	2400e3dc 	.word	0x2400e3dc

080174d4 <_lseek_r>:
 80174d4:	b538      	push	{r3, r4, r5, lr}
 80174d6:	4d07      	ldr	r5, [pc, #28]	; (80174f4 <_lseek_r+0x20>)
 80174d8:	4604      	mov	r4, r0
 80174da:	4608      	mov	r0, r1
 80174dc:	4611      	mov	r1, r2
 80174de:	2200      	movs	r2, #0
 80174e0:	602a      	str	r2, [r5, #0]
 80174e2:	461a      	mov	r2, r3
 80174e4:	f7ea fba8 	bl	8001c38 <_lseek>
 80174e8:	1c43      	adds	r3, r0, #1
 80174ea:	d102      	bne.n	80174f2 <_lseek_r+0x1e>
 80174ec:	682b      	ldr	r3, [r5, #0]
 80174ee:	b103      	cbz	r3, 80174f2 <_lseek_r+0x1e>
 80174f0:	6023      	str	r3, [r4, #0]
 80174f2:	bd38      	pop	{r3, r4, r5, pc}
 80174f4:	2400e3dc 	.word	0x2400e3dc

080174f8 <_read_r>:
 80174f8:	b538      	push	{r3, r4, r5, lr}
 80174fa:	4d07      	ldr	r5, [pc, #28]	; (8017518 <_read_r+0x20>)
 80174fc:	4604      	mov	r4, r0
 80174fe:	4608      	mov	r0, r1
 8017500:	4611      	mov	r1, r2
 8017502:	2200      	movs	r2, #0
 8017504:	602a      	str	r2, [r5, #0]
 8017506:	461a      	mov	r2, r3
 8017508:	f7ea fb36 	bl	8001b78 <_read>
 801750c:	1c43      	adds	r3, r0, #1
 801750e:	d102      	bne.n	8017516 <_read_r+0x1e>
 8017510:	682b      	ldr	r3, [r5, #0]
 8017512:	b103      	cbz	r3, 8017516 <_read_r+0x1e>
 8017514:	6023      	str	r3, [r4, #0]
 8017516:	bd38      	pop	{r3, r4, r5, pc}
 8017518:	2400e3dc 	.word	0x2400e3dc

0801751c <_sbrk_r>:
 801751c:	b538      	push	{r3, r4, r5, lr}
 801751e:	4d06      	ldr	r5, [pc, #24]	; (8017538 <_sbrk_r+0x1c>)
 8017520:	2300      	movs	r3, #0
 8017522:	4604      	mov	r4, r0
 8017524:	4608      	mov	r0, r1
 8017526:	602b      	str	r3, [r5, #0]
 8017528:	f7ea fb94 	bl	8001c54 <_sbrk>
 801752c:	1c43      	adds	r3, r0, #1
 801752e:	d102      	bne.n	8017536 <_sbrk_r+0x1a>
 8017530:	682b      	ldr	r3, [r5, #0]
 8017532:	b103      	cbz	r3, 8017536 <_sbrk_r+0x1a>
 8017534:	6023      	str	r3, [r4, #0]
 8017536:	bd38      	pop	{r3, r4, r5, pc}
 8017538:	2400e3dc 	.word	0x2400e3dc

0801753c <_write_r>:
 801753c:	b538      	push	{r3, r4, r5, lr}
 801753e:	4d07      	ldr	r5, [pc, #28]	; (801755c <_write_r+0x20>)
 8017540:	4604      	mov	r4, r0
 8017542:	4608      	mov	r0, r1
 8017544:	4611      	mov	r1, r2
 8017546:	2200      	movs	r2, #0
 8017548:	602a      	str	r2, [r5, #0]
 801754a:	461a      	mov	r2, r3
 801754c:	f7ea fb31 	bl	8001bb2 <_write>
 8017550:	1c43      	adds	r3, r0, #1
 8017552:	d102      	bne.n	801755a <_write_r+0x1e>
 8017554:	682b      	ldr	r3, [r5, #0]
 8017556:	b103      	cbz	r3, 801755a <_write_r+0x1e>
 8017558:	6023      	str	r3, [r4, #0]
 801755a:	bd38      	pop	{r3, r4, r5, pc}
 801755c:	2400e3dc 	.word	0x2400e3dc

08017560 <__errno>:
 8017560:	4b01      	ldr	r3, [pc, #4]	; (8017568 <__errno+0x8>)
 8017562:	6818      	ldr	r0, [r3, #0]
 8017564:	4770      	bx	lr
 8017566:	bf00      	nop
 8017568:	24000110 	.word	0x24000110

0801756c <__libc_init_array>:
 801756c:	b570      	push	{r4, r5, r6, lr}
 801756e:	4d0d      	ldr	r5, [pc, #52]	; (80175a4 <__libc_init_array+0x38>)
 8017570:	4c0d      	ldr	r4, [pc, #52]	; (80175a8 <__libc_init_array+0x3c>)
 8017572:	1b64      	subs	r4, r4, r5
 8017574:	10a4      	asrs	r4, r4, #2
 8017576:	2600      	movs	r6, #0
 8017578:	42a6      	cmp	r6, r4
 801757a:	d109      	bne.n	8017590 <__libc_init_array+0x24>
 801757c:	4d0b      	ldr	r5, [pc, #44]	; (80175ac <__libc_init_array+0x40>)
 801757e:	4c0c      	ldr	r4, [pc, #48]	; (80175b0 <__libc_init_array+0x44>)
 8017580:	f000 ff1c 	bl	80183bc <_init>
 8017584:	1b64      	subs	r4, r4, r5
 8017586:	10a4      	asrs	r4, r4, #2
 8017588:	2600      	movs	r6, #0
 801758a:	42a6      	cmp	r6, r4
 801758c:	d105      	bne.n	801759a <__libc_init_array+0x2e>
 801758e:	bd70      	pop	{r4, r5, r6, pc}
 8017590:	f855 3b04 	ldr.w	r3, [r5], #4
 8017594:	4798      	blx	r3
 8017596:	3601      	adds	r6, #1
 8017598:	e7ee      	b.n	8017578 <__libc_init_array+0xc>
 801759a:	f855 3b04 	ldr.w	r3, [r5], #4
 801759e:	4798      	blx	r3
 80175a0:	3601      	adds	r6, #1
 80175a2:	e7f2      	b.n	801758a <__libc_init_array+0x1e>
 80175a4:	08018fec 	.word	0x08018fec
 80175a8:	08018fec 	.word	0x08018fec
 80175ac:	08018fec 	.word	0x08018fec
 80175b0:	08018ff4 	.word	0x08018ff4

080175b4 <__retarget_lock_init_recursive>:
 80175b4:	4770      	bx	lr

080175b6 <__retarget_lock_acquire_recursive>:
 80175b6:	4770      	bx	lr

080175b8 <__retarget_lock_release_recursive>:
 80175b8:	4770      	bx	lr

080175ba <strcpy>:
 80175ba:	4603      	mov	r3, r0
 80175bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80175c0:	f803 2b01 	strb.w	r2, [r3], #1
 80175c4:	2a00      	cmp	r2, #0
 80175c6:	d1f9      	bne.n	80175bc <strcpy+0x2>
 80175c8:	4770      	bx	lr

080175ca <memcpy>:
 80175ca:	440a      	add	r2, r1
 80175cc:	4291      	cmp	r1, r2
 80175ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80175d2:	d100      	bne.n	80175d6 <memcpy+0xc>
 80175d4:	4770      	bx	lr
 80175d6:	b510      	push	{r4, lr}
 80175d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80175e0:	4291      	cmp	r1, r2
 80175e2:	d1f9      	bne.n	80175d8 <memcpy+0xe>
 80175e4:	bd10      	pop	{r4, pc}
	...

080175e8 <__assert_func>:
 80175e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80175ea:	4614      	mov	r4, r2
 80175ec:	461a      	mov	r2, r3
 80175ee:	4b09      	ldr	r3, [pc, #36]	; (8017614 <__assert_func+0x2c>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	4605      	mov	r5, r0
 80175f4:	68d8      	ldr	r0, [r3, #12]
 80175f6:	b14c      	cbz	r4, 801760c <__assert_func+0x24>
 80175f8:	4b07      	ldr	r3, [pc, #28]	; (8017618 <__assert_func+0x30>)
 80175fa:	9100      	str	r1, [sp, #0]
 80175fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017600:	4906      	ldr	r1, [pc, #24]	; (801761c <__assert_func+0x34>)
 8017602:	462b      	mov	r3, r5
 8017604:	f000 fd48 	bl	8018098 <fiprintf>
 8017608:	f000 fe08 	bl	801821c <abort>
 801760c:	4b04      	ldr	r3, [pc, #16]	; (8017620 <__assert_func+0x38>)
 801760e:	461c      	mov	r4, r3
 8017610:	e7f3      	b.n	80175fa <__assert_func+0x12>
 8017612:	bf00      	nop
 8017614:	24000110 	.word	0x24000110
 8017618:	08018f74 	.word	0x08018f74
 801761c:	08018f81 	.word	0x08018f81
 8017620:	08018faf 	.word	0x08018faf

08017624 <__env_lock>:
 8017624:	4801      	ldr	r0, [pc, #4]	; (801762c <__env_lock+0x8>)
 8017626:	f7ff bfc6 	b.w	80175b6 <__retarget_lock_acquire_recursive>
 801762a:	bf00      	nop
 801762c:	2400e3e0 	.word	0x2400e3e0

08017630 <__env_unlock>:
 8017630:	4801      	ldr	r0, [pc, #4]	; (8017638 <__env_unlock+0x8>)
 8017632:	f7ff bfc1 	b.w	80175b8 <__retarget_lock_release_recursive>
 8017636:	bf00      	nop
 8017638:	2400e3e0 	.word	0x2400e3e0

0801763c <_free_r>:
 801763c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801763e:	2900      	cmp	r1, #0
 8017640:	d044      	beq.n	80176cc <_free_r+0x90>
 8017642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017646:	9001      	str	r0, [sp, #4]
 8017648:	2b00      	cmp	r3, #0
 801764a:	f1a1 0404 	sub.w	r4, r1, #4
 801764e:	bfb8      	it	lt
 8017650:	18e4      	addlt	r4, r4, r3
 8017652:	f7ff fc41 	bl	8016ed8 <__malloc_lock>
 8017656:	4a1e      	ldr	r2, [pc, #120]	; (80176d0 <_free_r+0x94>)
 8017658:	9801      	ldr	r0, [sp, #4]
 801765a:	6813      	ldr	r3, [r2, #0]
 801765c:	b933      	cbnz	r3, 801766c <_free_r+0x30>
 801765e:	6063      	str	r3, [r4, #4]
 8017660:	6014      	str	r4, [r2, #0]
 8017662:	b003      	add	sp, #12
 8017664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017668:	f7ff bc3c 	b.w	8016ee4 <__malloc_unlock>
 801766c:	42a3      	cmp	r3, r4
 801766e:	d908      	bls.n	8017682 <_free_r+0x46>
 8017670:	6825      	ldr	r5, [r4, #0]
 8017672:	1961      	adds	r1, r4, r5
 8017674:	428b      	cmp	r3, r1
 8017676:	bf01      	itttt	eq
 8017678:	6819      	ldreq	r1, [r3, #0]
 801767a:	685b      	ldreq	r3, [r3, #4]
 801767c:	1949      	addeq	r1, r1, r5
 801767e:	6021      	streq	r1, [r4, #0]
 8017680:	e7ed      	b.n	801765e <_free_r+0x22>
 8017682:	461a      	mov	r2, r3
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	b10b      	cbz	r3, 801768c <_free_r+0x50>
 8017688:	42a3      	cmp	r3, r4
 801768a:	d9fa      	bls.n	8017682 <_free_r+0x46>
 801768c:	6811      	ldr	r1, [r2, #0]
 801768e:	1855      	adds	r5, r2, r1
 8017690:	42a5      	cmp	r5, r4
 8017692:	d10b      	bne.n	80176ac <_free_r+0x70>
 8017694:	6824      	ldr	r4, [r4, #0]
 8017696:	4421      	add	r1, r4
 8017698:	1854      	adds	r4, r2, r1
 801769a:	42a3      	cmp	r3, r4
 801769c:	6011      	str	r1, [r2, #0]
 801769e:	d1e0      	bne.n	8017662 <_free_r+0x26>
 80176a0:	681c      	ldr	r4, [r3, #0]
 80176a2:	685b      	ldr	r3, [r3, #4]
 80176a4:	6053      	str	r3, [r2, #4]
 80176a6:	440c      	add	r4, r1
 80176a8:	6014      	str	r4, [r2, #0]
 80176aa:	e7da      	b.n	8017662 <_free_r+0x26>
 80176ac:	d902      	bls.n	80176b4 <_free_r+0x78>
 80176ae:	230c      	movs	r3, #12
 80176b0:	6003      	str	r3, [r0, #0]
 80176b2:	e7d6      	b.n	8017662 <_free_r+0x26>
 80176b4:	6825      	ldr	r5, [r4, #0]
 80176b6:	1961      	adds	r1, r4, r5
 80176b8:	428b      	cmp	r3, r1
 80176ba:	bf04      	itt	eq
 80176bc:	6819      	ldreq	r1, [r3, #0]
 80176be:	685b      	ldreq	r3, [r3, #4]
 80176c0:	6063      	str	r3, [r4, #4]
 80176c2:	bf04      	itt	eq
 80176c4:	1949      	addeq	r1, r1, r5
 80176c6:	6021      	streq	r1, [r4, #0]
 80176c8:	6054      	str	r4, [r2, #4]
 80176ca:	e7ca      	b.n	8017662 <_free_r+0x26>
 80176cc:	b003      	add	sp, #12
 80176ce:	bd30      	pop	{r4, r5, pc}
 80176d0:	2400e298 	.word	0x2400e298

080176d4 <_malloc_usable_size_r>:
 80176d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176d8:	1f18      	subs	r0, r3, #4
 80176da:	2b00      	cmp	r3, #0
 80176dc:	bfbc      	itt	lt
 80176de:	580b      	ldrlt	r3, [r1, r0]
 80176e0:	18c0      	addlt	r0, r0, r3
 80176e2:	4770      	bx	lr

080176e4 <__ssputs_r>:
 80176e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176e8:	688e      	ldr	r6, [r1, #8]
 80176ea:	461f      	mov	r7, r3
 80176ec:	42be      	cmp	r6, r7
 80176ee:	680b      	ldr	r3, [r1, #0]
 80176f0:	4682      	mov	sl, r0
 80176f2:	460c      	mov	r4, r1
 80176f4:	4690      	mov	r8, r2
 80176f6:	d82c      	bhi.n	8017752 <__ssputs_r+0x6e>
 80176f8:	898a      	ldrh	r2, [r1, #12]
 80176fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80176fe:	d026      	beq.n	801774e <__ssputs_r+0x6a>
 8017700:	6965      	ldr	r5, [r4, #20]
 8017702:	6909      	ldr	r1, [r1, #16]
 8017704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017708:	eba3 0901 	sub.w	r9, r3, r1
 801770c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017710:	1c7b      	adds	r3, r7, #1
 8017712:	444b      	add	r3, r9
 8017714:	106d      	asrs	r5, r5, #1
 8017716:	429d      	cmp	r5, r3
 8017718:	bf38      	it	cc
 801771a:	461d      	movcc	r5, r3
 801771c:	0553      	lsls	r3, r2, #21
 801771e:	d527      	bpl.n	8017770 <__ssputs_r+0x8c>
 8017720:	4629      	mov	r1, r5
 8017722:	f7ff fb59 	bl	8016dd8 <_malloc_r>
 8017726:	4606      	mov	r6, r0
 8017728:	b360      	cbz	r0, 8017784 <__ssputs_r+0xa0>
 801772a:	6921      	ldr	r1, [r4, #16]
 801772c:	464a      	mov	r2, r9
 801772e:	f7ff ff4c 	bl	80175ca <memcpy>
 8017732:	89a3      	ldrh	r3, [r4, #12]
 8017734:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801773c:	81a3      	strh	r3, [r4, #12]
 801773e:	6126      	str	r6, [r4, #16]
 8017740:	6165      	str	r5, [r4, #20]
 8017742:	444e      	add	r6, r9
 8017744:	eba5 0509 	sub.w	r5, r5, r9
 8017748:	6026      	str	r6, [r4, #0]
 801774a:	60a5      	str	r5, [r4, #8]
 801774c:	463e      	mov	r6, r7
 801774e:	42be      	cmp	r6, r7
 8017750:	d900      	bls.n	8017754 <__ssputs_r+0x70>
 8017752:	463e      	mov	r6, r7
 8017754:	6820      	ldr	r0, [r4, #0]
 8017756:	4632      	mov	r2, r6
 8017758:	4641      	mov	r1, r8
 801775a:	f000 fd45 	bl	80181e8 <memmove>
 801775e:	68a3      	ldr	r3, [r4, #8]
 8017760:	1b9b      	subs	r3, r3, r6
 8017762:	60a3      	str	r3, [r4, #8]
 8017764:	6823      	ldr	r3, [r4, #0]
 8017766:	4433      	add	r3, r6
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	2000      	movs	r0, #0
 801776c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017770:	462a      	mov	r2, r5
 8017772:	f7ff fc31 	bl	8016fd8 <_realloc_r>
 8017776:	4606      	mov	r6, r0
 8017778:	2800      	cmp	r0, #0
 801777a:	d1e0      	bne.n	801773e <__ssputs_r+0x5a>
 801777c:	6921      	ldr	r1, [r4, #16]
 801777e:	4650      	mov	r0, sl
 8017780:	f7ff ff5c 	bl	801763c <_free_r>
 8017784:	230c      	movs	r3, #12
 8017786:	f8ca 3000 	str.w	r3, [sl]
 801778a:	89a3      	ldrh	r3, [r4, #12]
 801778c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017790:	81a3      	strh	r3, [r4, #12]
 8017792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017796:	e7e9      	b.n	801776c <__ssputs_r+0x88>

08017798 <_svfiprintf_r>:
 8017798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801779c:	4698      	mov	r8, r3
 801779e:	898b      	ldrh	r3, [r1, #12]
 80177a0:	061b      	lsls	r3, r3, #24
 80177a2:	b09d      	sub	sp, #116	; 0x74
 80177a4:	4607      	mov	r7, r0
 80177a6:	460d      	mov	r5, r1
 80177a8:	4614      	mov	r4, r2
 80177aa:	d50e      	bpl.n	80177ca <_svfiprintf_r+0x32>
 80177ac:	690b      	ldr	r3, [r1, #16]
 80177ae:	b963      	cbnz	r3, 80177ca <_svfiprintf_r+0x32>
 80177b0:	2140      	movs	r1, #64	; 0x40
 80177b2:	f7ff fb11 	bl	8016dd8 <_malloc_r>
 80177b6:	6028      	str	r0, [r5, #0]
 80177b8:	6128      	str	r0, [r5, #16]
 80177ba:	b920      	cbnz	r0, 80177c6 <_svfiprintf_r+0x2e>
 80177bc:	230c      	movs	r3, #12
 80177be:	603b      	str	r3, [r7, #0]
 80177c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177c4:	e0d0      	b.n	8017968 <_svfiprintf_r+0x1d0>
 80177c6:	2340      	movs	r3, #64	; 0x40
 80177c8:	616b      	str	r3, [r5, #20]
 80177ca:	2300      	movs	r3, #0
 80177cc:	9309      	str	r3, [sp, #36]	; 0x24
 80177ce:	2320      	movs	r3, #32
 80177d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80177d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80177d8:	2330      	movs	r3, #48	; 0x30
 80177da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017980 <_svfiprintf_r+0x1e8>
 80177de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80177e2:	f04f 0901 	mov.w	r9, #1
 80177e6:	4623      	mov	r3, r4
 80177e8:	469a      	mov	sl, r3
 80177ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177ee:	b10a      	cbz	r2, 80177f4 <_svfiprintf_r+0x5c>
 80177f0:	2a25      	cmp	r2, #37	; 0x25
 80177f2:	d1f9      	bne.n	80177e8 <_svfiprintf_r+0x50>
 80177f4:	ebba 0b04 	subs.w	fp, sl, r4
 80177f8:	d00b      	beq.n	8017812 <_svfiprintf_r+0x7a>
 80177fa:	465b      	mov	r3, fp
 80177fc:	4622      	mov	r2, r4
 80177fe:	4629      	mov	r1, r5
 8017800:	4638      	mov	r0, r7
 8017802:	f7ff ff6f 	bl	80176e4 <__ssputs_r>
 8017806:	3001      	adds	r0, #1
 8017808:	f000 80a9 	beq.w	801795e <_svfiprintf_r+0x1c6>
 801780c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801780e:	445a      	add	r2, fp
 8017810:	9209      	str	r2, [sp, #36]	; 0x24
 8017812:	f89a 3000 	ldrb.w	r3, [sl]
 8017816:	2b00      	cmp	r3, #0
 8017818:	f000 80a1 	beq.w	801795e <_svfiprintf_r+0x1c6>
 801781c:	2300      	movs	r3, #0
 801781e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017826:	f10a 0a01 	add.w	sl, sl, #1
 801782a:	9304      	str	r3, [sp, #16]
 801782c:	9307      	str	r3, [sp, #28]
 801782e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017832:	931a      	str	r3, [sp, #104]	; 0x68
 8017834:	4654      	mov	r4, sl
 8017836:	2205      	movs	r2, #5
 8017838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801783c:	4850      	ldr	r0, [pc, #320]	; (8017980 <_svfiprintf_r+0x1e8>)
 801783e:	f7e8 fd67 	bl	8000310 <memchr>
 8017842:	9a04      	ldr	r2, [sp, #16]
 8017844:	b9d8      	cbnz	r0, 801787e <_svfiprintf_r+0xe6>
 8017846:	06d0      	lsls	r0, r2, #27
 8017848:	bf44      	itt	mi
 801784a:	2320      	movmi	r3, #32
 801784c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017850:	0711      	lsls	r1, r2, #28
 8017852:	bf44      	itt	mi
 8017854:	232b      	movmi	r3, #43	; 0x2b
 8017856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801785a:	f89a 3000 	ldrb.w	r3, [sl]
 801785e:	2b2a      	cmp	r3, #42	; 0x2a
 8017860:	d015      	beq.n	801788e <_svfiprintf_r+0xf6>
 8017862:	9a07      	ldr	r2, [sp, #28]
 8017864:	4654      	mov	r4, sl
 8017866:	2000      	movs	r0, #0
 8017868:	f04f 0c0a 	mov.w	ip, #10
 801786c:	4621      	mov	r1, r4
 801786e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017872:	3b30      	subs	r3, #48	; 0x30
 8017874:	2b09      	cmp	r3, #9
 8017876:	d94d      	bls.n	8017914 <_svfiprintf_r+0x17c>
 8017878:	b1b0      	cbz	r0, 80178a8 <_svfiprintf_r+0x110>
 801787a:	9207      	str	r2, [sp, #28]
 801787c:	e014      	b.n	80178a8 <_svfiprintf_r+0x110>
 801787e:	eba0 0308 	sub.w	r3, r0, r8
 8017882:	fa09 f303 	lsl.w	r3, r9, r3
 8017886:	4313      	orrs	r3, r2
 8017888:	9304      	str	r3, [sp, #16]
 801788a:	46a2      	mov	sl, r4
 801788c:	e7d2      	b.n	8017834 <_svfiprintf_r+0x9c>
 801788e:	9b03      	ldr	r3, [sp, #12]
 8017890:	1d19      	adds	r1, r3, #4
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	9103      	str	r1, [sp, #12]
 8017896:	2b00      	cmp	r3, #0
 8017898:	bfbb      	ittet	lt
 801789a:	425b      	neglt	r3, r3
 801789c:	f042 0202 	orrlt.w	r2, r2, #2
 80178a0:	9307      	strge	r3, [sp, #28]
 80178a2:	9307      	strlt	r3, [sp, #28]
 80178a4:	bfb8      	it	lt
 80178a6:	9204      	strlt	r2, [sp, #16]
 80178a8:	7823      	ldrb	r3, [r4, #0]
 80178aa:	2b2e      	cmp	r3, #46	; 0x2e
 80178ac:	d10c      	bne.n	80178c8 <_svfiprintf_r+0x130>
 80178ae:	7863      	ldrb	r3, [r4, #1]
 80178b0:	2b2a      	cmp	r3, #42	; 0x2a
 80178b2:	d134      	bne.n	801791e <_svfiprintf_r+0x186>
 80178b4:	9b03      	ldr	r3, [sp, #12]
 80178b6:	1d1a      	adds	r2, r3, #4
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	9203      	str	r2, [sp, #12]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	bfb8      	it	lt
 80178c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80178c4:	3402      	adds	r4, #2
 80178c6:	9305      	str	r3, [sp, #20]
 80178c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017990 <_svfiprintf_r+0x1f8>
 80178cc:	7821      	ldrb	r1, [r4, #0]
 80178ce:	2203      	movs	r2, #3
 80178d0:	4650      	mov	r0, sl
 80178d2:	f7e8 fd1d 	bl	8000310 <memchr>
 80178d6:	b138      	cbz	r0, 80178e8 <_svfiprintf_r+0x150>
 80178d8:	9b04      	ldr	r3, [sp, #16]
 80178da:	eba0 000a 	sub.w	r0, r0, sl
 80178de:	2240      	movs	r2, #64	; 0x40
 80178e0:	4082      	lsls	r2, r0
 80178e2:	4313      	orrs	r3, r2
 80178e4:	3401      	adds	r4, #1
 80178e6:	9304      	str	r3, [sp, #16]
 80178e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178ec:	4825      	ldr	r0, [pc, #148]	; (8017984 <_svfiprintf_r+0x1ec>)
 80178ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178f2:	2206      	movs	r2, #6
 80178f4:	f7e8 fd0c 	bl	8000310 <memchr>
 80178f8:	2800      	cmp	r0, #0
 80178fa:	d038      	beq.n	801796e <_svfiprintf_r+0x1d6>
 80178fc:	4b22      	ldr	r3, [pc, #136]	; (8017988 <_svfiprintf_r+0x1f0>)
 80178fe:	bb1b      	cbnz	r3, 8017948 <_svfiprintf_r+0x1b0>
 8017900:	9b03      	ldr	r3, [sp, #12]
 8017902:	3307      	adds	r3, #7
 8017904:	f023 0307 	bic.w	r3, r3, #7
 8017908:	3308      	adds	r3, #8
 801790a:	9303      	str	r3, [sp, #12]
 801790c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801790e:	4433      	add	r3, r6
 8017910:	9309      	str	r3, [sp, #36]	; 0x24
 8017912:	e768      	b.n	80177e6 <_svfiprintf_r+0x4e>
 8017914:	fb0c 3202 	mla	r2, ip, r2, r3
 8017918:	460c      	mov	r4, r1
 801791a:	2001      	movs	r0, #1
 801791c:	e7a6      	b.n	801786c <_svfiprintf_r+0xd4>
 801791e:	2300      	movs	r3, #0
 8017920:	3401      	adds	r4, #1
 8017922:	9305      	str	r3, [sp, #20]
 8017924:	4619      	mov	r1, r3
 8017926:	f04f 0c0a 	mov.w	ip, #10
 801792a:	4620      	mov	r0, r4
 801792c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017930:	3a30      	subs	r2, #48	; 0x30
 8017932:	2a09      	cmp	r2, #9
 8017934:	d903      	bls.n	801793e <_svfiprintf_r+0x1a6>
 8017936:	2b00      	cmp	r3, #0
 8017938:	d0c6      	beq.n	80178c8 <_svfiprintf_r+0x130>
 801793a:	9105      	str	r1, [sp, #20]
 801793c:	e7c4      	b.n	80178c8 <_svfiprintf_r+0x130>
 801793e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017942:	4604      	mov	r4, r0
 8017944:	2301      	movs	r3, #1
 8017946:	e7f0      	b.n	801792a <_svfiprintf_r+0x192>
 8017948:	ab03      	add	r3, sp, #12
 801794a:	9300      	str	r3, [sp, #0]
 801794c:	462a      	mov	r2, r5
 801794e:	4b0f      	ldr	r3, [pc, #60]	; (801798c <_svfiprintf_r+0x1f4>)
 8017950:	a904      	add	r1, sp, #16
 8017952:	4638      	mov	r0, r7
 8017954:	f3af 8000 	nop.w
 8017958:	1c42      	adds	r2, r0, #1
 801795a:	4606      	mov	r6, r0
 801795c:	d1d6      	bne.n	801790c <_svfiprintf_r+0x174>
 801795e:	89ab      	ldrh	r3, [r5, #12]
 8017960:	065b      	lsls	r3, r3, #25
 8017962:	f53f af2d 	bmi.w	80177c0 <_svfiprintf_r+0x28>
 8017966:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017968:	b01d      	add	sp, #116	; 0x74
 801796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801796e:	ab03      	add	r3, sp, #12
 8017970:	9300      	str	r3, [sp, #0]
 8017972:	462a      	mov	r2, r5
 8017974:	4b05      	ldr	r3, [pc, #20]	; (801798c <_svfiprintf_r+0x1f4>)
 8017976:	a904      	add	r1, sp, #16
 8017978:	4638      	mov	r0, r7
 801797a:	f000 f9bd 	bl	8017cf8 <_printf_i>
 801797e:	e7eb      	b.n	8017958 <_svfiprintf_r+0x1c0>
 8017980:	08018fb0 	.word	0x08018fb0
 8017984:	08018fba 	.word	0x08018fba
 8017988:	00000000 	.word	0x00000000
 801798c:	080176e5 	.word	0x080176e5
 8017990:	08018fb6 	.word	0x08018fb6

08017994 <__sfputc_r>:
 8017994:	6893      	ldr	r3, [r2, #8]
 8017996:	3b01      	subs	r3, #1
 8017998:	2b00      	cmp	r3, #0
 801799a:	b410      	push	{r4}
 801799c:	6093      	str	r3, [r2, #8]
 801799e:	da08      	bge.n	80179b2 <__sfputc_r+0x1e>
 80179a0:	6994      	ldr	r4, [r2, #24]
 80179a2:	42a3      	cmp	r3, r4
 80179a4:	db01      	blt.n	80179aa <__sfputc_r+0x16>
 80179a6:	290a      	cmp	r1, #10
 80179a8:	d103      	bne.n	80179b2 <__sfputc_r+0x1e>
 80179aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179ae:	f000 bb85 	b.w	80180bc <__swbuf_r>
 80179b2:	6813      	ldr	r3, [r2, #0]
 80179b4:	1c58      	adds	r0, r3, #1
 80179b6:	6010      	str	r0, [r2, #0]
 80179b8:	7019      	strb	r1, [r3, #0]
 80179ba:	4608      	mov	r0, r1
 80179bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179c0:	4770      	bx	lr

080179c2 <__sfputs_r>:
 80179c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179c4:	4606      	mov	r6, r0
 80179c6:	460f      	mov	r7, r1
 80179c8:	4614      	mov	r4, r2
 80179ca:	18d5      	adds	r5, r2, r3
 80179cc:	42ac      	cmp	r4, r5
 80179ce:	d101      	bne.n	80179d4 <__sfputs_r+0x12>
 80179d0:	2000      	movs	r0, #0
 80179d2:	e007      	b.n	80179e4 <__sfputs_r+0x22>
 80179d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179d8:	463a      	mov	r2, r7
 80179da:	4630      	mov	r0, r6
 80179dc:	f7ff ffda 	bl	8017994 <__sfputc_r>
 80179e0:	1c43      	adds	r3, r0, #1
 80179e2:	d1f3      	bne.n	80179cc <__sfputs_r+0xa>
 80179e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080179e8 <_vfiprintf_r>:
 80179e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ec:	460d      	mov	r5, r1
 80179ee:	b09d      	sub	sp, #116	; 0x74
 80179f0:	4614      	mov	r4, r2
 80179f2:	4698      	mov	r8, r3
 80179f4:	4606      	mov	r6, r0
 80179f6:	b118      	cbz	r0, 8017a00 <_vfiprintf_r+0x18>
 80179f8:	6a03      	ldr	r3, [r0, #32]
 80179fa:	b90b      	cbnz	r3, 8017a00 <_vfiprintf_r+0x18>
 80179fc:	f7ff fc24 	bl	8017248 <__sinit>
 8017a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a02:	07d9      	lsls	r1, r3, #31
 8017a04:	d405      	bmi.n	8017a12 <_vfiprintf_r+0x2a>
 8017a06:	89ab      	ldrh	r3, [r5, #12]
 8017a08:	059a      	lsls	r2, r3, #22
 8017a0a:	d402      	bmi.n	8017a12 <_vfiprintf_r+0x2a>
 8017a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a0e:	f7ff fdd2 	bl	80175b6 <__retarget_lock_acquire_recursive>
 8017a12:	89ab      	ldrh	r3, [r5, #12]
 8017a14:	071b      	lsls	r3, r3, #28
 8017a16:	d501      	bpl.n	8017a1c <_vfiprintf_r+0x34>
 8017a18:	692b      	ldr	r3, [r5, #16]
 8017a1a:	b99b      	cbnz	r3, 8017a44 <_vfiprintf_r+0x5c>
 8017a1c:	4629      	mov	r1, r5
 8017a1e:	4630      	mov	r0, r6
 8017a20:	f000 fb8a 	bl	8018138 <__swsetup_r>
 8017a24:	b170      	cbz	r0, 8017a44 <_vfiprintf_r+0x5c>
 8017a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a28:	07dc      	lsls	r4, r3, #31
 8017a2a:	d504      	bpl.n	8017a36 <_vfiprintf_r+0x4e>
 8017a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a30:	b01d      	add	sp, #116	; 0x74
 8017a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a36:	89ab      	ldrh	r3, [r5, #12]
 8017a38:	0598      	lsls	r0, r3, #22
 8017a3a:	d4f7      	bmi.n	8017a2c <_vfiprintf_r+0x44>
 8017a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a3e:	f7ff fdbb 	bl	80175b8 <__retarget_lock_release_recursive>
 8017a42:	e7f3      	b.n	8017a2c <_vfiprintf_r+0x44>
 8017a44:	2300      	movs	r3, #0
 8017a46:	9309      	str	r3, [sp, #36]	; 0x24
 8017a48:	2320      	movs	r3, #32
 8017a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a52:	2330      	movs	r3, #48	; 0x30
 8017a54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017c08 <_vfiprintf_r+0x220>
 8017a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a5c:	f04f 0901 	mov.w	r9, #1
 8017a60:	4623      	mov	r3, r4
 8017a62:	469a      	mov	sl, r3
 8017a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a68:	b10a      	cbz	r2, 8017a6e <_vfiprintf_r+0x86>
 8017a6a:	2a25      	cmp	r2, #37	; 0x25
 8017a6c:	d1f9      	bne.n	8017a62 <_vfiprintf_r+0x7a>
 8017a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8017a72:	d00b      	beq.n	8017a8c <_vfiprintf_r+0xa4>
 8017a74:	465b      	mov	r3, fp
 8017a76:	4622      	mov	r2, r4
 8017a78:	4629      	mov	r1, r5
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	f7ff ffa1 	bl	80179c2 <__sfputs_r>
 8017a80:	3001      	adds	r0, #1
 8017a82:	f000 80a9 	beq.w	8017bd8 <_vfiprintf_r+0x1f0>
 8017a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a88:	445a      	add	r2, fp
 8017a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8017a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	f000 80a1 	beq.w	8017bd8 <_vfiprintf_r+0x1f0>
 8017a96:	2300      	movs	r3, #0
 8017a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017aa0:	f10a 0a01 	add.w	sl, sl, #1
 8017aa4:	9304      	str	r3, [sp, #16]
 8017aa6:	9307      	str	r3, [sp, #28]
 8017aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017aac:	931a      	str	r3, [sp, #104]	; 0x68
 8017aae:	4654      	mov	r4, sl
 8017ab0:	2205      	movs	r2, #5
 8017ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ab6:	4854      	ldr	r0, [pc, #336]	; (8017c08 <_vfiprintf_r+0x220>)
 8017ab8:	f7e8 fc2a 	bl	8000310 <memchr>
 8017abc:	9a04      	ldr	r2, [sp, #16]
 8017abe:	b9d8      	cbnz	r0, 8017af8 <_vfiprintf_r+0x110>
 8017ac0:	06d1      	lsls	r1, r2, #27
 8017ac2:	bf44      	itt	mi
 8017ac4:	2320      	movmi	r3, #32
 8017ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017aca:	0713      	lsls	r3, r2, #28
 8017acc:	bf44      	itt	mi
 8017ace:	232b      	movmi	r3, #43	; 0x2b
 8017ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8017ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8017ada:	d015      	beq.n	8017b08 <_vfiprintf_r+0x120>
 8017adc:	9a07      	ldr	r2, [sp, #28]
 8017ade:	4654      	mov	r4, sl
 8017ae0:	2000      	movs	r0, #0
 8017ae2:	f04f 0c0a 	mov.w	ip, #10
 8017ae6:	4621      	mov	r1, r4
 8017ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017aec:	3b30      	subs	r3, #48	; 0x30
 8017aee:	2b09      	cmp	r3, #9
 8017af0:	d94d      	bls.n	8017b8e <_vfiprintf_r+0x1a6>
 8017af2:	b1b0      	cbz	r0, 8017b22 <_vfiprintf_r+0x13a>
 8017af4:	9207      	str	r2, [sp, #28]
 8017af6:	e014      	b.n	8017b22 <_vfiprintf_r+0x13a>
 8017af8:	eba0 0308 	sub.w	r3, r0, r8
 8017afc:	fa09 f303 	lsl.w	r3, r9, r3
 8017b00:	4313      	orrs	r3, r2
 8017b02:	9304      	str	r3, [sp, #16]
 8017b04:	46a2      	mov	sl, r4
 8017b06:	e7d2      	b.n	8017aae <_vfiprintf_r+0xc6>
 8017b08:	9b03      	ldr	r3, [sp, #12]
 8017b0a:	1d19      	adds	r1, r3, #4
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	9103      	str	r1, [sp, #12]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	bfbb      	ittet	lt
 8017b14:	425b      	neglt	r3, r3
 8017b16:	f042 0202 	orrlt.w	r2, r2, #2
 8017b1a:	9307      	strge	r3, [sp, #28]
 8017b1c:	9307      	strlt	r3, [sp, #28]
 8017b1e:	bfb8      	it	lt
 8017b20:	9204      	strlt	r2, [sp, #16]
 8017b22:	7823      	ldrb	r3, [r4, #0]
 8017b24:	2b2e      	cmp	r3, #46	; 0x2e
 8017b26:	d10c      	bne.n	8017b42 <_vfiprintf_r+0x15a>
 8017b28:	7863      	ldrb	r3, [r4, #1]
 8017b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8017b2c:	d134      	bne.n	8017b98 <_vfiprintf_r+0x1b0>
 8017b2e:	9b03      	ldr	r3, [sp, #12]
 8017b30:	1d1a      	adds	r2, r3, #4
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	9203      	str	r2, [sp, #12]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	bfb8      	it	lt
 8017b3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017b3e:	3402      	adds	r4, #2
 8017b40:	9305      	str	r3, [sp, #20]
 8017b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017c18 <_vfiprintf_r+0x230>
 8017b46:	7821      	ldrb	r1, [r4, #0]
 8017b48:	2203      	movs	r2, #3
 8017b4a:	4650      	mov	r0, sl
 8017b4c:	f7e8 fbe0 	bl	8000310 <memchr>
 8017b50:	b138      	cbz	r0, 8017b62 <_vfiprintf_r+0x17a>
 8017b52:	9b04      	ldr	r3, [sp, #16]
 8017b54:	eba0 000a 	sub.w	r0, r0, sl
 8017b58:	2240      	movs	r2, #64	; 0x40
 8017b5a:	4082      	lsls	r2, r0
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	3401      	adds	r4, #1
 8017b60:	9304      	str	r3, [sp, #16]
 8017b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b66:	4829      	ldr	r0, [pc, #164]	; (8017c0c <_vfiprintf_r+0x224>)
 8017b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b6c:	2206      	movs	r2, #6
 8017b6e:	f7e8 fbcf 	bl	8000310 <memchr>
 8017b72:	2800      	cmp	r0, #0
 8017b74:	d03f      	beq.n	8017bf6 <_vfiprintf_r+0x20e>
 8017b76:	4b26      	ldr	r3, [pc, #152]	; (8017c10 <_vfiprintf_r+0x228>)
 8017b78:	bb1b      	cbnz	r3, 8017bc2 <_vfiprintf_r+0x1da>
 8017b7a:	9b03      	ldr	r3, [sp, #12]
 8017b7c:	3307      	adds	r3, #7
 8017b7e:	f023 0307 	bic.w	r3, r3, #7
 8017b82:	3308      	adds	r3, #8
 8017b84:	9303      	str	r3, [sp, #12]
 8017b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b88:	443b      	add	r3, r7
 8017b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8017b8c:	e768      	b.n	8017a60 <_vfiprintf_r+0x78>
 8017b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b92:	460c      	mov	r4, r1
 8017b94:	2001      	movs	r0, #1
 8017b96:	e7a6      	b.n	8017ae6 <_vfiprintf_r+0xfe>
 8017b98:	2300      	movs	r3, #0
 8017b9a:	3401      	adds	r4, #1
 8017b9c:	9305      	str	r3, [sp, #20]
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	f04f 0c0a 	mov.w	ip, #10
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017baa:	3a30      	subs	r2, #48	; 0x30
 8017bac:	2a09      	cmp	r2, #9
 8017bae:	d903      	bls.n	8017bb8 <_vfiprintf_r+0x1d0>
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d0c6      	beq.n	8017b42 <_vfiprintf_r+0x15a>
 8017bb4:	9105      	str	r1, [sp, #20]
 8017bb6:	e7c4      	b.n	8017b42 <_vfiprintf_r+0x15a>
 8017bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	2301      	movs	r3, #1
 8017bc0:	e7f0      	b.n	8017ba4 <_vfiprintf_r+0x1bc>
 8017bc2:	ab03      	add	r3, sp, #12
 8017bc4:	9300      	str	r3, [sp, #0]
 8017bc6:	462a      	mov	r2, r5
 8017bc8:	4b12      	ldr	r3, [pc, #72]	; (8017c14 <_vfiprintf_r+0x22c>)
 8017bca:	a904      	add	r1, sp, #16
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f3af 8000 	nop.w
 8017bd2:	4607      	mov	r7, r0
 8017bd4:	1c78      	adds	r0, r7, #1
 8017bd6:	d1d6      	bne.n	8017b86 <_vfiprintf_r+0x19e>
 8017bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017bda:	07d9      	lsls	r1, r3, #31
 8017bdc:	d405      	bmi.n	8017bea <_vfiprintf_r+0x202>
 8017bde:	89ab      	ldrh	r3, [r5, #12]
 8017be0:	059a      	lsls	r2, r3, #22
 8017be2:	d402      	bmi.n	8017bea <_vfiprintf_r+0x202>
 8017be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017be6:	f7ff fce7 	bl	80175b8 <__retarget_lock_release_recursive>
 8017bea:	89ab      	ldrh	r3, [r5, #12]
 8017bec:	065b      	lsls	r3, r3, #25
 8017bee:	f53f af1d 	bmi.w	8017a2c <_vfiprintf_r+0x44>
 8017bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bf4:	e71c      	b.n	8017a30 <_vfiprintf_r+0x48>
 8017bf6:	ab03      	add	r3, sp, #12
 8017bf8:	9300      	str	r3, [sp, #0]
 8017bfa:	462a      	mov	r2, r5
 8017bfc:	4b05      	ldr	r3, [pc, #20]	; (8017c14 <_vfiprintf_r+0x22c>)
 8017bfe:	a904      	add	r1, sp, #16
 8017c00:	4630      	mov	r0, r6
 8017c02:	f000 f879 	bl	8017cf8 <_printf_i>
 8017c06:	e7e4      	b.n	8017bd2 <_vfiprintf_r+0x1ea>
 8017c08:	08018fb0 	.word	0x08018fb0
 8017c0c:	08018fba 	.word	0x08018fba
 8017c10:	00000000 	.word	0x00000000
 8017c14:	080179c3 	.word	0x080179c3
 8017c18:	08018fb6 	.word	0x08018fb6

08017c1c <_printf_common>:
 8017c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c20:	4616      	mov	r6, r2
 8017c22:	4699      	mov	r9, r3
 8017c24:	688a      	ldr	r2, [r1, #8]
 8017c26:	690b      	ldr	r3, [r1, #16]
 8017c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	bfb8      	it	lt
 8017c30:	4613      	movlt	r3, r2
 8017c32:	6033      	str	r3, [r6, #0]
 8017c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c38:	4607      	mov	r7, r0
 8017c3a:	460c      	mov	r4, r1
 8017c3c:	b10a      	cbz	r2, 8017c42 <_printf_common+0x26>
 8017c3e:	3301      	adds	r3, #1
 8017c40:	6033      	str	r3, [r6, #0]
 8017c42:	6823      	ldr	r3, [r4, #0]
 8017c44:	0699      	lsls	r1, r3, #26
 8017c46:	bf42      	ittt	mi
 8017c48:	6833      	ldrmi	r3, [r6, #0]
 8017c4a:	3302      	addmi	r3, #2
 8017c4c:	6033      	strmi	r3, [r6, #0]
 8017c4e:	6825      	ldr	r5, [r4, #0]
 8017c50:	f015 0506 	ands.w	r5, r5, #6
 8017c54:	d106      	bne.n	8017c64 <_printf_common+0x48>
 8017c56:	f104 0a19 	add.w	sl, r4, #25
 8017c5a:	68e3      	ldr	r3, [r4, #12]
 8017c5c:	6832      	ldr	r2, [r6, #0]
 8017c5e:	1a9b      	subs	r3, r3, r2
 8017c60:	42ab      	cmp	r3, r5
 8017c62:	dc26      	bgt.n	8017cb2 <_printf_common+0x96>
 8017c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017c68:	1e13      	subs	r3, r2, #0
 8017c6a:	6822      	ldr	r2, [r4, #0]
 8017c6c:	bf18      	it	ne
 8017c6e:	2301      	movne	r3, #1
 8017c70:	0692      	lsls	r2, r2, #26
 8017c72:	d42b      	bmi.n	8017ccc <_printf_common+0xb0>
 8017c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c78:	4649      	mov	r1, r9
 8017c7a:	4638      	mov	r0, r7
 8017c7c:	47c0      	blx	r8
 8017c7e:	3001      	adds	r0, #1
 8017c80:	d01e      	beq.n	8017cc0 <_printf_common+0xa4>
 8017c82:	6823      	ldr	r3, [r4, #0]
 8017c84:	6922      	ldr	r2, [r4, #16]
 8017c86:	f003 0306 	and.w	r3, r3, #6
 8017c8a:	2b04      	cmp	r3, #4
 8017c8c:	bf02      	ittt	eq
 8017c8e:	68e5      	ldreq	r5, [r4, #12]
 8017c90:	6833      	ldreq	r3, [r6, #0]
 8017c92:	1aed      	subeq	r5, r5, r3
 8017c94:	68a3      	ldr	r3, [r4, #8]
 8017c96:	bf0c      	ite	eq
 8017c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c9c:	2500      	movne	r5, #0
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	bfc4      	itt	gt
 8017ca2:	1a9b      	subgt	r3, r3, r2
 8017ca4:	18ed      	addgt	r5, r5, r3
 8017ca6:	2600      	movs	r6, #0
 8017ca8:	341a      	adds	r4, #26
 8017caa:	42b5      	cmp	r5, r6
 8017cac:	d11a      	bne.n	8017ce4 <_printf_common+0xc8>
 8017cae:	2000      	movs	r0, #0
 8017cb0:	e008      	b.n	8017cc4 <_printf_common+0xa8>
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	4652      	mov	r2, sl
 8017cb6:	4649      	mov	r1, r9
 8017cb8:	4638      	mov	r0, r7
 8017cba:	47c0      	blx	r8
 8017cbc:	3001      	adds	r0, #1
 8017cbe:	d103      	bne.n	8017cc8 <_printf_common+0xac>
 8017cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cc8:	3501      	adds	r5, #1
 8017cca:	e7c6      	b.n	8017c5a <_printf_common+0x3e>
 8017ccc:	18e1      	adds	r1, r4, r3
 8017cce:	1c5a      	adds	r2, r3, #1
 8017cd0:	2030      	movs	r0, #48	; 0x30
 8017cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017cd6:	4422      	add	r2, r4
 8017cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ce0:	3302      	adds	r3, #2
 8017ce2:	e7c7      	b.n	8017c74 <_printf_common+0x58>
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	4622      	mov	r2, r4
 8017ce8:	4649      	mov	r1, r9
 8017cea:	4638      	mov	r0, r7
 8017cec:	47c0      	blx	r8
 8017cee:	3001      	adds	r0, #1
 8017cf0:	d0e6      	beq.n	8017cc0 <_printf_common+0xa4>
 8017cf2:	3601      	adds	r6, #1
 8017cf4:	e7d9      	b.n	8017caa <_printf_common+0x8e>
	...

08017cf8 <_printf_i>:
 8017cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017cfc:	7e0f      	ldrb	r7, [r1, #24]
 8017cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017d00:	2f78      	cmp	r7, #120	; 0x78
 8017d02:	4691      	mov	r9, r2
 8017d04:	4680      	mov	r8, r0
 8017d06:	460c      	mov	r4, r1
 8017d08:	469a      	mov	sl, r3
 8017d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017d0e:	d807      	bhi.n	8017d20 <_printf_i+0x28>
 8017d10:	2f62      	cmp	r7, #98	; 0x62
 8017d12:	d80a      	bhi.n	8017d2a <_printf_i+0x32>
 8017d14:	2f00      	cmp	r7, #0
 8017d16:	f000 80d4 	beq.w	8017ec2 <_printf_i+0x1ca>
 8017d1a:	2f58      	cmp	r7, #88	; 0x58
 8017d1c:	f000 80c0 	beq.w	8017ea0 <_printf_i+0x1a8>
 8017d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017d28:	e03a      	b.n	8017da0 <_printf_i+0xa8>
 8017d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017d2e:	2b15      	cmp	r3, #21
 8017d30:	d8f6      	bhi.n	8017d20 <_printf_i+0x28>
 8017d32:	a101      	add	r1, pc, #4	; (adr r1, 8017d38 <_printf_i+0x40>)
 8017d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017d38:	08017d91 	.word	0x08017d91
 8017d3c:	08017da5 	.word	0x08017da5
 8017d40:	08017d21 	.word	0x08017d21
 8017d44:	08017d21 	.word	0x08017d21
 8017d48:	08017d21 	.word	0x08017d21
 8017d4c:	08017d21 	.word	0x08017d21
 8017d50:	08017da5 	.word	0x08017da5
 8017d54:	08017d21 	.word	0x08017d21
 8017d58:	08017d21 	.word	0x08017d21
 8017d5c:	08017d21 	.word	0x08017d21
 8017d60:	08017d21 	.word	0x08017d21
 8017d64:	08017ea9 	.word	0x08017ea9
 8017d68:	08017dd1 	.word	0x08017dd1
 8017d6c:	08017e63 	.word	0x08017e63
 8017d70:	08017d21 	.word	0x08017d21
 8017d74:	08017d21 	.word	0x08017d21
 8017d78:	08017ecb 	.word	0x08017ecb
 8017d7c:	08017d21 	.word	0x08017d21
 8017d80:	08017dd1 	.word	0x08017dd1
 8017d84:	08017d21 	.word	0x08017d21
 8017d88:	08017d21 	.word	0x08017d21
 8017d8c:	08017e6b 	.word	0x08017e6b
 8017d90:	682b      	ldr	r3, [r5, #0]
 8017d92:	1d1a      	adds	r2, r3, #4
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	602a      	str	r2, [r5, #0]
 8017d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017da0:	2301      	movs	r3, #1
 8017da2:	e09f      	b.n	8017ee4 <_printf_i+0x1ec>
 8017da4:	6820      	ldr	r0, [r4, #0]
 8017da6:	682b      	ldr	r3, [r5, #0]
 8017da8:	0607      	lsls	r7, r0, #24
 8017daa:	f103 0104 	add.w	r1, r3, #4
 8017dae:	6029      	str	r1, [r5, #0]
 8017db0:	d501      	bpl.n	8017db6 <_printf_i+0xbe>
 8017db2:	681e      	ldr	r6, [r3, #0]
 8017db4:	e003      	b.n	8017dbe <_printf_i+0xc6>
 8017db6:	0646      	lsls	r6, r0, #25
 8017db8:	d5fb      	bpl.n	8017db2 <_printf_i+0xba>
 8017dba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017dbe:	2e00      	cmp	r6, #0
 8017dc0:	da03      	bge.n	8017dca <_printf_i+0xd2>
 8017dc2:	232d      	movs	r3, #45	; 0x2d
 8017dc4:	4276      	negs	r6, r6
 8017dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017dca:	485a      	ldr	r0, [pc, #360]	; (8017f34 <_printf_i+0x23c>)
 8017dcc:	230a      	movs	r3, #10
 8017dce:	e012      	b.n	8017df6 <_printf_i+0xfe>
 8017dd0:	682b      	ldr	r3, [r5, #0]
 8017dd2:	6820      	ldr	r0, [r4, #0]
 8017dd4:	1d19      	adds	r1, r3, #4
 8017dd6:	6029      	str	r1, [r5, #0]
 8017dd8:	0605      	lsls	r5, r0, #24
 8017dda:	d501      	bpl.n	8017de0 <_printf_i+0xe8>
 8017ddc:	681e      	ldr	r6, [r3, #0]
 8017dde:	e002      	b.n	8017de6 <_printf_i+0xee>
 8017de0:	0641      	lsls	r1, r0, #25
 8017de2:	d5fb      	bpl.n	8017ddc <_printf_i+0xe4>
 8017de4:	881e      	ldrh	r6, [r3, #0]
 8017de6:	4853      	ldr	r0, [pc, #332]	; (8017f34 <_printf_i+0x23c>)
 8017de8:	2f6f      	cmp	r7, #111	; 0x6f
 8017dea:	bf0c      	ite	eq
 8017dec:	2308      	moveq	r3, #8
 8017dee:	230a      	movne	r3, #10
 8017df0:	2100      	movs	r1, #0
 8017df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017df6:	6865      	ldr	r5, [r4, #4]
 8017df8:	60a5      	str	r5, [r4, #8]
 8017dfa:	2d00      	cmp	r5, #0
 8017dfc:	bfa2      	ittt	ge
 8017dfe:	6821      	ldrge	r1, [r4, #0]
 8017e00:	f021 0104 	bicge.w	r1, r1, #4
 8017e04:	6021      	strge	r1, [r4, #0]
 8017e06:	b90e      	cbnz	r6, 8017e0c <_printf_i+0x114>
 8017e08:	2d00      	cmp	r5, #0
 8017e0a:	d04b      	beq.n	8017ea4 <_printf_i+0x1ac>
 8017e0c:	4615      	mov	r5, r2
 8017e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017e12:	fb03 6711 	mls	r7, r3, r1, r6
 8017e16:	5dc7      	ldrb	r7, [r0, r7]
 8017e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017e1c:	4637      	mov	r7, r6
 8017e1e:	42bb      	cmp	r3, r7
 8017e20:	460e      	mov	r6, r1
 8017e22:	d9f4      	bls.n	8017e0e <_printf_i+0x116>
 8017e24:	2b08      	cmp	r3, #8
 8017e26:	d10b      	bne.n	8017e40 <_printf_i+0x148>
 8017e28:	6823      	ldr	r3, [r4, #0]
 8017e2a:	07de      	lsls	r6, r3, #31
 8017e2c:	d508      	bpl.n	8017e40 <_printf_i+0x148>
 8017e2e:	6923      	ldr	r3, [r4, #16]
 8017e30:	6861      	ldr	r1, [r4, #4]
 8017e32:	4299      	cmp	r1, r3
 8017e34:	bfde      	ittt	le
 8017e36:	2330      	movle	r3, #48	; 0x30
 8017e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017e3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017e40:	1b52      	subs	r2, r2, r5
 8017e42:	6122      	str	r2, [r4, #16]
 8017e44:	f8cd a000 	str.w	sl, [sp]
 8017e48:	464b      	mov	r3, r9
 8017e4a:	aa03      	add	r2, sp, #12
 8017e4c:	4621      	mov	r1, r4
 8017e4e:	4640      	mov	r0, r8
 8017e50:	f7ff fee4 	bl	8017c1c <_printf_common>
 8017e54:	3001      	adds	r0, #1
 8017e56:	d14a      	bne.n	8017eee <_printf_i+0x1f6>
 8017e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e5c:	b004      	add	sp, #16
 8017e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e62:	6823      	ldr	r3, [r4, #0]
 8017e64:	f043 0320 	orr.w	r3, r3, #32
 8017e68:	6023      	str	r3, [r4, #0]
 8017e6a:	4833      	ldr	r0, [pc, #204]	; (8017f38 <_printf_i+0x240>)
 8017e6c:	2778      	movs	r7, #120	; 0x78
 8017e6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017e72:	6823      	ldr	r3, [r4, #0]
 8017e74:	6829      	ldr	r1, [r5, #0]
 8017e76:	061f      	lsls	r7, r3, #24
 8017e78:	f851 6b04 	ldr.w	r6, [r1], #4
 8017e7c:	d402      	bmi.n	8017e84 <_printf_i+0x18c>
 8017e7e:	065f      	lsls	r7, r3, #25
 8017e80:	bf48      	it	mi
 8017e82:	b2b6      	uxthmi	r6, r6
 8017e84:	07df      	lsls	r7, r3, #31
 8017e86:	bf48      	it	mi
 8017e88:	f043 0320 	orrmi.w	r3, r3, #32
 8017e8c:	6029      	str	r1, [r5, #0]
 8017e8e:	bf48      	it	mi
 8017e90:	6023      	strmi	r3, [r4, #0]
 8017e92:	b91e      	cbnz	r6, 8017e9c <_printf_i+0x1a4>
 8017e94:	6823      	ldr	r3, [r4, #0]
 8017e96:	f023 0320 	bic.w	r3, r3, #32
 8017e9a:	6023      	str	r3, [r4, #0]
 8017e9c:	2310      	movs	r3, #16
 8017e9e:	e7a7      	b.n	8017df0 <_printf_i+0xf8>
 8017ea0:	4824      	ldr	r0, [pc, #144]	; (8017f34 <_printf_i+0x23c>)
 8017ea2:	e7e4      	b.n	8017e6e <_printf_i+0x176>
 8017ea4:	4615      	mov	r5, r2
 8017ea6:	e7bd      	b.n	8017e24 <_printf_i+0x12c>
 8017ea8:	682b      	ldr	r3, [r5, #0]
 8017eaa:	6826      	ldr	r6, [r4, #0]
 8017eac:	6961      	ldr	r1, [r4, #20]
 8017eae:	1d18      	adds	r0, r3, #4
 8017eb0:	6028      	str	r0, [r5, #0]
 8017eb2:	0635      	lsls	r5, r6, #24
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	d501      	bpl.n	8017ebc <_printf_i+0x1c4>
 8017eb8:	6019      	str	r1, [r3, #0]
 8017eba:	e002      	b.n	8017ec2 <_printf_i+0x1ca>
 8017ebc:	0670      	lsls	r0, r6, #25
 8017ebe:	d5fb      	bpl.n	8017eb8 <_printf_i+0x1c0>
 8017ec0:	8019      	strh	r1, [r3, #0]
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	6123      	str	r3, [r4, #16]
 8017ec6:	4615      	mov	r5, r2
 8017ec8:	e7bc      	b.n	8017e44 <_printf_i+0x14c>
 8017eca:	682b      	ldr	r3, [r5, #0]
 8017ecc:	1d1a      	adds	r2, r3, #4
 8017ece:	602a      	str	r2, [r5, #0]
 8017ed0:	681d      	ldr	r5, [r3, #0]
 8017ed2:	6862      	ldr	r2, [r4, #4]
 8017ed4:	2100      	movs	r1, #0
 8017ed6:	4628      	mov	r0, r5
 8017ed8:	f7e8 fa1a 	bl	8000310 <memchr>
 8017edc:	b108      	cbz	r0, 8017ee2 <_printf_i+0x1ea>
 8017ede:	1b40      	subs	r0, r0, r5
 8017ee0:	6060      	str	r0, [r4, #4]
 8017ee2:	6863      	ldr	r3, [r4, #4]
 8017ee4:	6123      	str	r3, [r4, #16]
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017eec:	e7aa      	b.n	8017e44 <_printf_i+0x14c>
 8017eee:	6923      	ldr	r3, [r4, #16]
 8017ef0:	462a      	mov	r2, r5
 8017ef2:	4649      	mov	r1, r9
 8017ef4:	4640      	mov	r0, r8
 8017ef6:	47d0      	blx	sl
 8017ef8:	3001      	adds	r0, #1
 8017efa:	d0ad      	beq.n	8017e58 <_printf_i+0x160>
 8017efc:	6823      	ldr	r3, [r4, #0]
 8017efe:	079b      	lsls	r3, r3, #30
 8017f00:	d413      	bmi.n	8017f2a <_printf_i+0x232>
 8017f02:	68e0      	ldr	r0, [r4, #12]
 8017f04:	9b03      	ldr	r3, [sp, #12]
 8017f06:	4298      	cmp	r0, r3
 8017f08:	bfb8      	it	lt
 8017f0a:	4618      	movlt	r0, r3
 8017f0c:	e7a6      	b.n	8017e5c <_printf_i+0x164>
 8017f0e:	2301      	movs	r3, #1
 8017f10:	4632      	mov	r2, r6
 8017f12:	4649      	mov	r1, r9
 8017f14:	4640      	mov	r0, r8
 8017f16:	47d0      	blx	sl
 8017f18:	3001      	adds	r0, #1
 8017f1a:	d09d      	beq.n	8017e58 <_printf_i+0x160>
 8017f1c:	3501      	adds	r5, #1
 8017f1e:	68e3      	ldr	r3, [r4, #12]
 8017f20:	9903      	ldr	r1, [sp, #12]
 8017f22:	1a5b      	subs	r3, r3, r1
 8017f24:	42ab      	cmp	r3, r5
 8017f26:	dcf2      	bgt.n	8017f0e <_printf_i+0x216>
 8017f28:	e7eb      	b.n	8017f02 <_printf_i+0x20a>
 8017f2a:	2500      	movs	r5, #0
 8017f2c:	f104 0619 	add.w	r6, r4, #25
 8017f30:	e7f5      	b.n	8017f1e <_printf_i+0x226>
 8017f32:	bf00      	nop
 8017f34:	08018fc1 	.word	0x08018fc1
 8017f38:	08018fd2 	.word	0x08018fd2

08017f3c <__sflush_r>:
 8017f3c:	898a      	ldrh	r2, [r1, #12]
 8017f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f42:	4605      	mov	r5, r0
 8017f44:	0710      	lsls	r0, r2, #28
 8017f46:	460c      	mov	r4, r1
 8017f48:	d458      	bmi.n	8017ffc <__sflush_r+0xc0>
 8017f4a:	684b      	ldr	r3, [r1, #4]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	dc05      	bgt.n	8017f5c <__sflush_r+0x20>
 8017f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	dc02      	bgt.n	8017f5c <__sflush_r+0x20>
 8017f56:	2000      	movs	r0, #0
 8017f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f5e:	2e00      	cmp	r6, #0
 8017f60:	d0f9      	beq.n	8017f56 <__sflush_r+0x1a>
 8017f62:	2300      	movs	r3, #0
 8017f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017f68:	682f      	ldr	r7, [r5, #0]
 8017f6a:	6a21      	ldr	r1, [r4, #32]
 8017f6c:	602b      	str	r3, [r5, #0]
 8017f6e:	d032      	beq.n	8017fd6 <__sflush_r+0x9a>
 8017f70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017f72:	89a3      	ldrh	r3, [r4, #12]
 8017f74:	075a      	lsls	r2, r3, #29
 8017f76:	d505      	bpl.n	8017f84 <__sflush_r+0x48>
 8017f78:	6863      	ldr	r3, [r4, #4]
 8017f7a:	1ac0      	subs	r0, r0, r3
 8017f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017f7e:	b10b      	cbz	r3, 8017f84 <__sflush_r+0x48>
 8017f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017f82:	1ac0      	subs	r0, r0, r3
 8017f84:	2300      	movs	r3, #0
 8017f86:	4602      	mov	r2, r0
 8017f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f8a:	6a21      	ldr	r1, [r4, #32]
 8017f8c:	4628      	mov	r0, r5
 8017f8e:	47b0      	blx	r6
 8017f90:	1c43      	adds	r3, r0, #1
 8017f92:	89a3      	ldrh	r3, [r4, #12]
 8017f94:	d106      	bne.n	8017fa4 <__sflush_r+0x68>
 8017f96:	6829      	ldr	r1, [r5, #0]
 8017f98:	291d      	cmp	r1, #29
 8017f9a:	d82b      	bhi.n	8017ff4 <__sflush_r+0xb8>
 8017f9c:	4a29      	ldr	r2, [pc, #164]	; (8018044 <__sflush_r+0x108>)
 8017f9e:	410a      	asrs	r2, r1
 8017fa0:	07d6      	lsls	r6, r2, #31
 8017fa2:	d427      	bmi.n	8017ff4 <__sflush_r+0xb8>
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	6062      	str	r2, [r4, #4]
 8017fa8:	04d9      	lsls	r1, r3, #19
 8017faa:	6922      	ldr	r2, [r4, #16]
 8017fac:	6022      	str	r2, [r4, #0]
 8017fae:	d504      	bpl.n	8017fba <__sflush_r+0x7e>
 8017fb0:	1c42      	adds	r2, r0, #1
 8017fb2:	d101      	bne.n	8017fb8 <__sflush_r+0x7c>
 8017fb4:	682b      	ldr	r3, [r5, #0]
 8017fb6:	b903      	cbnz	r3, 8017fba <__sflush_r+0x7e>
 8017fb8:	6560      	str	r0, [r4, #84]	; 0x54
 8017fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017fbc:	602f      	str	r7, [r5, #0]
 8017fbe:	2900      	cmp	r1, #0
 8017fc0:	d0c9      	beq.n	8017f56 <__sflush_r+0x1a>
 8017fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fc6:	4299      	cmp	r1, r3
 8017fc8:	d002      	beq.n	8017fd0 <__sflush_r+0x94>
 8017fca:	4628      	mov	r0, r5
 8017fcc:	f7ff fb36 	bl	801763c <_free_r>
 8017fd0:	2000      	movs	r0, #0
 8017fd2:	6360      	str	r0, [r4, #52]	; 0x34
 8017fd4:	e7c0      	b.n	8017f58 <__sflush_r+0x1c>
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	4628      	mov	r0, r5
 8017fda:	47b0      	blx	r6
 8017fdc:	1c41      	adds	r1, r0, #1
 8017fde:	d1c8      	bne.n	8017f72 <__sflush_r+0x36>
 8017fe0:	682b      	ldr	r3, [r5, #0]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d0c5      	beq.n	8017f72 <__sflush_r+0x36>
 8017fe6:	2b1d      	cmp	r3, #29
 8017fe8:	d001      	beq.n	8017fee <__sflush_r+0xb2>
 8017fea:	2b16      	cmp	r3, #22
 8017fec:	d101      	bne.n	8017ff2 <__sflush_r+0xb6>
 8017fee:	602f      	str	r7, [r5, #0]
 8017ff0:	e7b1      	b.n	8017f56 <__sflush_r+0x1a>
 8017ff2:	89a3      	ldrh	r3, [r4, #12]
 8017ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ff8:	81a3      	strh	r3, [r4, #12]
 8017ffa:	e7ad      	b.n	8017f58 <__sflush_r+0x1c>
 8017ffc:	690f      	ldr	r7, [r1, #16]
 8017ffe:	2f00      	cmp	r7, #0
 8018000:	d0a9      	beq.n	8017f56 <__sflush_r+0x1a>
 8018002:	0793      	lsls	r3, r2, #30
 8018004:	680e      	ldr	r6, [r1, #0]
 8018006:	bf08      	it	eq
 8018008:	694b      	ldreq	r3, [r1, #20]
 801800a:	600f      	str	r7, [r1, #0]
 801800c:	bf18      	it	ne
 801800e:	2300      	movne	r3, #0
 8018010:	eba6 0807 	sub.w	r8, r6, r7
 8018014:	608b      	str	r3, [r1, #8]
 8018016:	f1b8 0f00 	cmp.w	r8, #0
 801801a:	dd9c      	ble.n	8017f56 <__sflush_r+0x1a>
 801801c:	6a21      	ldr	r1, [r4, #32]
 801801e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018020:	4643      	mov	r3, r8
 8018022:	463a      	mov	r2, r7
 8018024:	4628      	mov	r0, r5
 8018026:	47b0      	blx	r6
 8018028:	2800      	cmp	r0, #0
 801802a:	dc06      	bgt.n	801803a <__sflush_r+0xfe>
 801802c:	89a3      	ldrh	r3, [r4, #12]
 801802e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018032:	81a3      	strh	r3, [r4, #12]
 8018034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018038:	e78e      	b.n	8017f58 <__sflush_r+0x1c>
 801803a:	4407      	add	r7, r0
 801803c:	eba8 0800 	sub.w	r8, r8, r0
 8018040:	e7e9      	b.n	8018016 <__sflush_r+0xda>
 8018042:	bf00      	nop
 8018044:	dfbffffe 	.word	0xdfbffffe

08018048 <_fflush_r>:
 8018048:	b538      	push	{r3, r4, r5, lr}
 801804a:	690b      	ldr	r3, [r1, #16]
 801804c:	4605      	mov	r5, r0
 801804e:	460c      	mov	r4, r1
 8018050:	b913      	cbnz	r3, 8018058 <_fflush_r+0x10>
 8018052:	2500      	movs	r5, #0
 8018054:	4628      	mov	r0, r5
 8018056:	bd38      	pop	{r3, r4, r5, pc}
 8018058:	b118      	cbz	r0, 8018062 <_fflush_r+0x1a>
 801805a:	6a03      	ldr	r3, [r0, #32]
 801805c:	b90b      	cbnz	r3, 8018062 <_fflush_r+0x1a>
 801805e:	f7ff f8f3 	bl	8017248 <__sinit>
 8018062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d0f3      	beq.n	8018052 <_fflush_r+0xa>
 801806a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801806c:	07d0      	lsls	r0, r2, #31
 801806e:	d404      	bmi.n	801807a <_fflush_r+0x32>
 8018070:	0599      	lsls	r1, r3, #22
 8018072:	d402      	bmi.n	801807a <_fflush_r+0x32>
 8018074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018076:	f7ff fa9e 	bl	80175b6 <__retarget_lock_acquire_recursive>
 801807a:	4628      	mov	r0, r5
 801807c:	4621      	mov	r1, r4
 801807e:	f7ff ff5d 	bl	8017f3c <__sflush_r>
 8018082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018084:	07da      	lsls	r2, r3, #31
 8018086:	4605      	mov	r5, r0
 8018088:	d4e4      	bmi.n	8018054 <_fflush_r+0xc>
 801808a:	89a3      	ldrh	r3, [r4, #12]
 801808c:	059b      	lsls	r3, r3, #22
 801808e:	d4e1      	bmi.n	8018054 <_fflush_r+0xc>
 8018090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018092:	f7ff fa91 	bl	80175b8 <__retarget_lock_release_recursive>
 8018096:	e7dd      	b.n	8018054 <_fflush_r+0xc>

08018098 <fiprintf>:
 8018098:	b40e      	push	{r1, r2, r3}
 801809a:	b503      	push	{r0, r1, lr}
 801809c:	4601      	mov	r1, r0
 801809e:	ab03      	add	r3, sp, #12
 80180a0:	4805      	ldr	r0, [pc, #20]	; (80180b8 <fiprintf+0x20>)
 80180a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80180a6:	6800      	ldr	r0, [r0, #0]
 80180a8:	9301      	str	r3, [sp, #4]
 80180aa:	f7ff fc9d 	bl	80179e8 <_vfiprintf_r>
 80180ae:	b002      	add	sp, #8
 80180b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80180b4:	b003      	add	sp, #12
 80180b6:	4770      	bx	lr
 80180b8:	24000110 	.word	0x24000110

080180bc <__swbuf_r>:
 80180bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180be:	460e      	mov	r6, r1
 80180c0:	4614      	mov	r4, r2
 80180c2:	4605      	mov	r5, r0
 80180c4:	b118      	cbz	r0, 80180ce <__swbuf_r+0x12>
 80180c6:	6a03      	ldr	r3, [r0, #32]
 80180c8:	b90b      	cbnz	r3, 80180ce <__swbuf_r+0x12>
 80180ca:	f7ff f8bd 	bl	8017248 <__sinit>
 80180ce:	69a3      	ldr	r3, [r4, #24]
 80180d0:	60a3      	str	r3, [r4, #8]
 80180d2:	89a3      	ldrh	r3, [r4, #12]
 80180d4:	071a      	lsls	r2, r3, #28
 80180d6:	d525      	bpl.n	8018124 <__swbuf_r+0x68>
 80180d8:	6923      	ldr	r3, [r4, #16]
 80180da:	b31b      	cbz	r3, 8018124 <__swbuf_r+0x68>
 80180dc:	6823      	ldr	r3, [r4, #0]
 80180de:	6922      	ldr	r2, [r4, #16]
 80180e0:	1a98      	subs	r0, r3, r2
 80180e2:	6963      	ldr	r3, [r4, #20]
 80180e4:	b2f6      	uxtb	r6, r6
 80180e6:	4283      	cmp	r3, r0
 80180e8:	4637      	mov	r7, r6
 80180ea:	dc04      	bgt.n	80180f6 <__swbuf_r+0x3a>
 80180ec:	4621      	mov	r1, r4
 80180ee:	4628      	mov	r0, r5
 80180f0:	f7ff ffaa 	bl	8018048 <_fflush_r>
 80180f4:	b9e0      	cbnz	r0, 8018130 <__swbuf_r+0x74>
 80180f6:	68a3      	ldr	r3, [r4, #8]
 80180f8:	3b01      	subs	r3, #1
 80180fa:	60a3      	str	r3, [r4, #8]
 80180fc:	6823      	ldr	r3, [r4, #0]
 80180fe:	1c5a      	adds	r2, r3, #1
 8018100:	6022      	str	r2, [r4, #0]
 8018102:	701e      	strb	r6, [r3, #0]
 8018104:	6962      	ldr	r2, [r4, #20]
 8018106:	1c43      	adds	r3, r0, #1
 8018108:	429a      	cmp	r2, r3
 801810a:	d004      	beq.n	8018116 <__swbuf_r+0x5a>
 801810c:	89a3      	ldrh	r3, [r4, #12]
 801810e:	07db      	lsls	r3, r3, #31
 8018110:	d506      	bpl.n	8018120 <__swbuf_r+0x64>
 8018112:	2e0a      	cmp	r6, #10
 8018114:	d104      	bne.n	8018120 <__swbuf_r+0x64>
 8018116:	4621      	mov	r1, r4
 8018118:	4628      	mov	r0, r5
 801811a:	f7ff ff95 	bl	8018048 <_fflush_r>
 801811e:	b938      	cbnz	r0, 8018130 <__swbuf_r+0x74>
 8018120:	4638      	mov	r0, r7
 8018122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018124:	4621      	mov	r1, r4
 8018126:	4628      	mov	r0, r5
 8018128:	f000 f806 	bl	8018138 <__swsetup_r>
 801812c:	2800      	cmp	r0, #0
 801812e:	d0d5      	beq.n	80180dc <__swbuf_r+0x20>
 8018130:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018134:	e7f4      	b.n	8018120 <__swbuf_r+0x64>
	...

08018138 <__swsetup_r>:
 8018138:	b538      	push	{r3, r4, r5, lr}
 801813a:	4b2a      	ldr	r3, [pc, #168]	; (80181e4 <__swsetup_r+0xac>)
 801813c:	4605      	mov	r5, r0
 801813e:	6818      	ldr	r0, [r3, #0]
 8018140:	460c      	mov	r4, r1
 8018142:	b118      	cbz	r0, 801814c <__swsetup_r+0x14>
 8018144:	6a03      	ldr	r3, [r0, #32]
 8018146:	b90b      	cbnz	r3, 801814c <__swsetup_r+0x14>
 8018148:	f7ff f87e 	bl	8017248 <__sinit>
 801814c:	89a3      	ldrh	r3, [r4, #12]
 801814e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018152:	0718      	lsls	r0, r3, #28
 8018154:	d422      	bmi.n	801819c <__swsetup_r+0x64>
 8018156:	06d9      	lsls	r1, r3, #27
 8018158:	d407      	bmi.n	801816a <__swsetup_r+0x32>
 801815a:	2309      	movs	r3, #9
 801815c:	602b      	str	r3, [r5, #0]
 801815e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018162:	81a3      	strh	r3, [r4, #12]
 8018164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018168:	e034      	b.n	80181d4 <__swsetup_r+0x9c>
 801816a:	0758      	lsls	r0, r3, #29
 801816c:	d512      	bpl.n	8018194 <__swsetup_r+0x5c>
 801816e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018170:	b141      	cbz	r1, 8018184 <__swsetup_r+0x4c>
 8018172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018176:	4299      	cmp	r1, r3
 8018178:	d002      	beq.n	8018180 <__swsetup_r+0x48>
 801817a:	4628      	mov	r0, r5
 801817c:	f7ff fa5e 	bl	801763c <_free_r>
 8018180:	2300      	movs	r3, #0
 8018182:	6363      	str	r3, [r4, #52]	; 0x34
 8018184:	89a3      	ldrh	r3, [r4, #12]
 8018186:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801818a:	81a3      	strh	r3, [r4, #12]
 801818c:	2300      	movs	r3, #0
 801818e:	6063      	str	r3, [r4, #4]
 8018190:	6923      	ldr	r3, [r4, #16]
 8018192:	6023      	str	r3, [r4, #0]
 8018194:	89a3      	ldrh	r3, [r4, #12]
 8018196:	f043 0308 	orr.w	r3, r3, #8
 801819a:	81a3      	strh	r3, [r4, #12]
 801819c:	6923      	ldr	r3, [r4, #16]
 801819e:	b94b      	cbnz	r3, 80181b4 <__swsetup_r+0x7c>
 80181a0:	89a3      	ldrh	r3, [r4, #12]
 80181a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80181a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80181aa:	d003      	beq.n	80181b4 <__swsetup_r+0x7c>
 80181ac:	4621      	mov	r1, r4
 80181ae:	4628      	mov	r0, r5
 80181b0:	f000 f861 	bl	8018276 <__smakebuf_r>
 80181b4:	89a0      	ldrh	r0, [r4, #12]
 80181b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80181ba:	f010 0301 	ands.w	r3, r0, #1
 80181be:	d00a      	beq.n	80181d6 <__swsetup_r+0x9e>
 80181c0:	2300      	movs	r3, #0
 80181c2:	60a3      	str	r3, [r4, #8]
 80181c4:	6963      	ldr	r3, [r4, #20]
 80181c6:	425b      	negs	r3, r3
 80181c8:	61a3      	str	r3, [r4, #24]
 80181ca:	6923      	ldr	r3, [r4, #16]
 80181cc:	b943      	cbnz	r3, 80181e0 <__swsetup_r+0xa8>
 80181ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80181d2:	d1c4      	bne.n	801815e <__swsetup_r+0x26>
 80181d4:	bd38      	pop	{r3, r4, r5, pc}
 80181d6:	0781      	lsls	r1, r0, #30
 80181d8:	bf58      	it	pl
 80181da:	6963      	ldrpl	r3, [r4, #20]
 80181dc:	60a3      	str	r3, [r4, #8]
 80181de:	e7f4      	b.n	80181ca <__swsetup_r+0x92>
 80181e0:	2000      	movs	r0, #0
 80181e2:	e7f7      	b.n	80181d4 <__swsetup_r+0x9c>
 80181e4:	24000110 	.word	0x24000110

080181e8 <memmove>:
 80181e8:	4288      	cmp	r0, r1
 80181ea:	b510      	push	{r4, lr}
 80181ec:	eb01 0402 	add.w	r4, r1, r2
 80181f0:	d902      	bls.n	80181f8 <memmove+0x10>
 80181f2:	4284      	cmp	r4, r0
 80181f4:	4623      	mov	r3, r4
 80181f6:	d807      	bhi.n	8018208 <memmove+0x20>
 80181f8:	1e43      	subs	r3, r0, #1
 80181fa:	42a1      	cmp	r1, r4
 80181fc:	d008      	beq.n	8018210 <memmove+0x28>
 80181fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018206:	e7f8      	b.n	80181fa <memmove+0x12>
 8018208:	4402      	add	r2, r0
 801820a:	4601      	mov	r1, r0
 801820c:	428a      	cmp	r2, r1
 801820e:	d100      	bne.n	8018212 <memmove+0x2a>
 8018210:	bd10      	pop	{r4, pc}
 8018212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801821a:	e7f7      	b.n	801820c <memmove+0x24>

0801821c <abort>:
 801821c:	b508      	push	{r3, lr}
 801821e:	2006      	movs	r0, #6
 8018220:	f000 f88e 	bl	8018340 <raise>
 8018224:	2001      	movs	r0, #1
 8018226:	f7e9 fc9d 	bl	8001b64 <_exit>

0801822a <__swhatbuf_r>:
 801822a:	b570      	push	{r4, r5, r6, lr}
 801822c:	460c      	mov	r4, r1
 801822e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018232:	2900      	cmp	r1, #0
 8018234:	b096      	sub	sp, #88	; 0x58
 8018236:	4615      	mov	r5, r2
 8018238:	461e      	mov	r6, r3
 801823a:	da0d      	bge.n	8018258 <__swhatbuf_r+0x2e>
 801823c:	89a3      	ldrh	r3, [r4, #12]
 801823e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018242:	f04f 0100 	mov.w	r1, #0
 8018246:	bf0c      	ite	eq
 8018248:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801824c:	2340      	movne	r3, #64	; 0x40
 801824e:	2000      	movs	r0, #0
 8018250:	6031      	str	r1, [r6, #0]
 8018252:	602b      	str	r3, [r5, #0]
 8018254:	b016      	add	sp, #88	; 0x58
 8018256:	bd70      	pop	{r4, r5, r6, pc}
 8018258:	466a      	mov	r2, sp
 801825a:	f000 f879 	bl	8018350 <_fstat_r>
 801825e:	2800      	cmp	r0, #0
 8018260:	dbec      	blt.n	801823c <__swhatbuf_r+0x12>
 8018262:	9901      	ldr	r1, [sp, #4]
 8018264:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018268:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801826c:	4259      	negs	r1, r3
 801826e:	4159      	adcs	r1, r3
 8018270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018274:	e7eb      	b.n	801824e <__swhatbuf_r+0x24>

08018276 <__smakebuf_r>:
 8018276:	898b      	ldrh	r3, [r1, #12]
 8018278:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801827a:	079d      	lsls	r5, r3, #30
 801827c:	4606      	mov	r6, r0
 801827e:	460c      	mov	r4, r1
 8018280:	d507      	bpl.n	8018292 <__smakebuf_r+0x1c>
 8018282:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018286:	6023      	str	r3, [r4, #0]
 8018288:	6123      	str	r3, [r4, #16]
 801828a:	2301      	movs	r3, #1
 801828c:	6163      	str	r3, [r4, #20]
 801828e:	b002      	add	sp, #8
 8018290:	bd70      	pop	{r4, r5, r6, pc}
 8018292:	ab01      	add	r3, sp, #4
 8018294:	466a      	mov	r2, sp
 8018296:	f7ff ffc8 	bl	801822a <__swhatbuf_r>
 801829a:	9900      	ldr	r1, [sp, #0]
 801829c:	4605      	mov	r5, r0
 801829e:	4630      	mov	r0, r6
 80182a0:	f7fe fd9a 	bl	8016dd8 <_malloc_r>
 80182a4:	b948      	cbnz	r0, 80182ba <__smakebuf_r+0x44>
 80182a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182aa:	059a      	lsls	r2, r3, #22
 80182ac:	d4ef      	bmi.n	801828e <__smakebuf_r+0x18>
 80182ae:	f023 0303 	bic.w	r3, r3, #3
 80182b2:	f043 0302 	orr.w	r3, r3, #2
 80182b6:	81a3      	strh	r3, [r4, #12]
 80182b8:	e7e3      	b.n	8018282 <__smakebuf_r+0xc>
 80182ba:	89a3      	ldrh	r3, [r4, #12]
 80182bc:	6020      	str	r0, [r4, #0]
 80182be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182c2:	81a3      	strh	r3, [r4, #12]
 80182c4:	9b00      	ldr	r3, [sp, #0]
 80182c6:	6163      	str	r3, [r4, #20]
 80182c8:	9b01      	ldr	r3, [sp, #4]
 80182ca:	6120      	str	r0, [r4, #16]
 80182cc:	b15b      	cbz	r3, 80182e6 <__smakebuf_r+0x70>
 80182ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182d2:	4630      	mov	r0, r6
 80182d4:	f000 f84e 	bl	8018374 <_isatty_r>
 80182d8:	b128      	cbz	r0, 80182e6 <__smakebuf_r+0x70>
 80182da:	89a3      	ldrh	r3, [r4, #12]
 80182dc:	f023 0303 	bic.w	r3, r3, #3
 80182e0:	f043 0301 	orr.w	r3, r3, #1
 80182e4:	81a3      	strh	r3, [r4, #12]
 80182e6:	89a3      	ldrh	r3, [r4, #12]
 80182e8:	431d      	orrs	r5, r3
 80182ea:	81a5      	strh	r5, [r4, #12]
 80182ec:	e7cf      	b.n	801828e <__smakebuf_r+0x18>

080182ee <_raise_r>:
 80182ee:	291f      	cmp	r1, #31
 80182f0:	b538      	push	{r3, r4, r5, lr}
 80182f2:	4604      	mov	r4, r0
 80182f4:	460d      	mov	r5, r1
 80182f6:	d904      	bls.n	8018302 <_raise_r+0x14>
 80182f8:	2316      	movs	r3, #22
 80182fa:	6003      	str	r3, [r0, #0]
 80182fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018300:	bd38      	pop	{r3, r4, r5, pc}
 8018302:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018304:	b112      	cbz	r2, 801830c <_raise_r+0x1e>
 8018306:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801830a:	b94b      	cbnz	r3, 8018320 <_raise_r+0x32>
 801830c:	4620      	mov	r0, r4
 801830e:	f000 f853 	bl	80183b8 <_getpid_r>
 8018312:	462a      	mov	r2, r5
 8018314:	4601      	mov	r1, r0
 8018316:	4620      	mov	r0, r4
 8018318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801831c:	f000 b83a 	b.w	8018394 <_kill_r>
 8018320:	2b01      	cmp	r3, #1
 8018322:	d00a      	beq.n	801833a <_raise_r+0x4c>
 8018324:	1c59      	adds	r1, r3, #1
 8018326:	d103      	bne.n	8018330 <_raise_r+0x42>
 8018328:	2316      	movs	r3, #22
 801832a:	6003      	str	r3, [r0, #0]
 801832c:	2001      	movs	r0, #1
 801832e:	e7e7      	b.n	8018300 <_raise_r+0x12>
 8018330:	2400      	movs	r4, #0
 8018332:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018336:	4628      	mov	r0, r5
 8018338:	4798      	blx	r3
 801833a:	2000      	movs	r0, #0
 801833c:	e7e0      	b.n	8018300 <_raise_r+0x12>
	...

08018340 <raise>:
 8018340:	4b02      	ldr	r3, [pc, #8]	; (801834c <raise+0xc>)
 8018342:	4601      	mov	r1, r0
 8018344:	6818      	ldr	r0, [r3, #0]
 8018346:	f7ff bfd2 	b.w	80182ee <_raise_r>
 801834a:	bf00      	nop
 801834c:	24000110 	.word	0x24000110

08018350 <_fstat_r>:
 8018350:	b538      	push	{r3, r4, r5, lr}
 8018352:	4d07      	ldr	r5, [pc, #28]	; (8018370 <_fstat_r+0x20>)
 8018354:	2300      	movs	r3, #0
 8018356:	4604      	mov	r4, r0
 8018358:	4608      	mov	r0, r1
 801835a:	4611      	mov	r1, r2
 801835c:	602b      	str	r3, [r5, #0]
 801835e:	f7e9 fc50 	bl	8001c02 <_fstat>
 8018362:	1c43      	adds	r3, r0, #1
 8018364:	d102      	bne.n	801836c <_fstat_r+0x1c>
 8018366:	682b      	ldr	r3, [r5, #0]
 8018368:	b103      	cbz	r3, 801836c <_fstat_r+0x1c>
 801836a:	6023      	str	r3, [r4, #0]
 801836c:	bd38      	pop	{r3, r4, r5, pc}
 801836e:	bf00      	nop
 8018370:	2400e3dc 	.word	0x2400e3dc

08018374 <_isatty_r>:
 8018374:	b538      	push	{r3, r4, r5, lr}
 8018376:	4d06      	ldr	r5, [pc, #24]	; (8018390 <_isatty_r+0x1c>)
 8018378:	2300      	movs	r3, #0
 801837a:	4604      	mov	r4, r0
 801837c:	4608      	mov	r0, r1
 801837e:	602b      	str	r3, [r5, #0]
 8018380:	f7e9 fc4f 	bl	8001c22 <_isatty>
 8018384:	1c43      	adds	r3, r0, #1
 8018386:	d102      	bne.n	801838e <_isatty_r+0x1a>
 8018388:	682b      	ldr	r3, [r5, #0]
 801838a:	b103      	cbz	r3, 801838e <_isatty_r+0x1a>
 801838c:	6023      	str	r3, [r4, #0]
 801838e:	bd38      	pop	{r3, r4, r5, pc}
 8018390:	2400e3dc 	.word	0x2400e3dc

08018394 <_kill_r>:
 8018394:	b538      	push	{r3, r4, r5, lr}
 8018396:	4d07      	ldr	r5, [pc, #28]	; (80183b4 <_kill_r+0x20>)
 8018398:	2300      	movs	r3, #0
 801839a:	4604      	mov	r4, r0
 801839c:	4608      	mov	r0, r1
 801839e:	4611      	mov	r1, r2
 80183a0:	602b      	str	r3, [r5, #0]
 80183a2:	f7e9 fbcf 	bl	8001b44 <_kill>
 80183a6:	1c43      	adds	r3, r0, #1
 80183a8:	d102      	bne.n	80183b0 <_kill_r+0x1c>
 80183aa:	682b      	ldr	r3, [r5, #0]
 80183ac:	b103      	cbz	r3, 80183b0 <_kill_r+0x1c>
 80183ae:	6023      	str	r3, [r4, #0]
 80183b0:	bd38      	pop	{r3, r4, r5, pc}
 80183b2:	bf00      	nop
 80183b4:	2400e3dc 	.word	0x2400e3dc

080183b8 <_getpid_r>:
 80183b8:	f7e9 bbbc 	b.w	8001b34 <_getpid>

080183bc <_init>:
 80183bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183be:	bf00      	nop
 80183c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183c2:	bc08      	pop	{r3}
 80183c4:	469e      	mov	lr, r3
 80183c6:	4770      	bx	lr

080183c8 <_fini>:
 80183c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ca:	bf00      	nop
 80183cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183ce:	bc08      	pop	{r3}
 80183d0:	469e      	mov	lr, r3
 80183d2:	4770      	bx	lr
