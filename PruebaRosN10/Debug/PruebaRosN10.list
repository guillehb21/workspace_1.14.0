
PruebaRosN10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee4  08015860  08015860  00025860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016744  08016744  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08016744  08016744  00026744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801674c  0801674c  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801674c  0801674c  0002674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016754  08016754  00026754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08016758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012a64  20000110  08016868  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20012b74  08016868  00032b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab86  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d82  00000000  00000000  0004ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0004eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113a  00000000  00000000  00050110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000088e0  00000000  00000000  0005124a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fd1  00000000  00000000  00059b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3ad2  00000000  00000000  00073afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b4c  00000000  00000000  001175d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011e11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015848 	.word	0x08015848

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08015848 	.word	0x08015848

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ce:	f000 b9bb 	b.w	8000648 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000658:	f005 fc44 	bl	8005ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800065c:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000664:	f000 f980 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000668:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	f040 808e 	bne.w	8000792 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01d      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800067c:	2208      	movs	r2, #8
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	2b00      	cmp	r3, #0
 800068c:	d014      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	3308      	adds	r3, #8
 8000696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006b4:	bf00      	nop
 80006b6:	e7fe      	b.n	80006b6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d069      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d864      	bhi.n	8000792 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006c8:	4b40      	ldr	r3, [pc, #256]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d2:	e004      	b.n	80006de <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d903      	bls.n	80006f0 <pvPortMallocMicroROS+0xa4>
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f1      	bne.n	80006d4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d04b      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2208      	movs	r2, #8
 8000700:	4413      	add	r3, r2
 8000702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	2308      	movs	r3, #8
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	429a      	cmp	r2, r3
 800071a:	d91f      	bls.n	800075c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00a      	beq.n	8000744 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	613b      	str	r3, [r7, #16]
}
 8000740:	bf00      	nop
 8000742:	e7fe      	b.n	8000742 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f000 f968 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d203      	bcs.n	800077e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 800077c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000792:	f005 fbb5 	bl	8005f00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	60fb      	str	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	e7fe      	b.n	80007b4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007b6:	69fb      	ldr	r3, [r7, #28]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20003d34 	.word	0x20003d34
 80007c4:	20003d40 	.word	0x20003d40
 80007c8:	20003d38 	.word	0x20003d38
 80007cc:	20003d2c 	.word	0x20003d2c
 80007d0:	20003d3c 	.word	0x20003d3c

080007d4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d048      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e6:	2308      	movs	r3, #8
 80007e8:	425b      	negs	r3, r3
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4413      	add	r3, r2
 80007ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <vPortFreeMicroROS+0xac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4013      	ands	r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00a      	beq.n	8000836 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	60bb      	str	r3, [r7, #8]
}
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <vPortFreeMicroROS+0xac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <vPortFreeMicroROS+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f005 fb42 	bl	8005ee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <vPortFreeMicroROS+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <vPortFreeMicroROS+0xb0>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f005 fb44 	bl	8005f00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d40 	.word	0x20003d40
 8000884:	20003d38 	.word	0x20003d38

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d40 	.word	0x20003d40

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f005 fb09 	bl	8005ee4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feba 	bl	800064c <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f014 f8c0 	bl	8014a8a <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff62 	bl	80007d4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f005 faf6 	bl	8005f00 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f005 fadc 	bl	8005ee4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe88 	bl	800064c <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f005 fad2 	bl	8005f00 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20003d2c 	.word	0x20003d2c
 8000a1c:	20003d34 	.word	0x20003d34
 8000a20:	20003d3c 	.word	0x20003d3c
 8000a24:	20003d38 	.word	0x20003d38
 8000a28:	20003d40 	.word	0x20003d40

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003d2c 	.word	0x20003d2c
 8000adc:	20003d34 	.word	0x20003d34

08000ae0 <subscription_callback_ancle_left_reference>:
std_msgs__msg__Float32 msg_heap_right_reference ;
std_msgs__msg__Float32 msg_aux_id_reference ;
std_msgs__msg__Float32 msg_aux_value_reference;

void subscription_callback_ancle_left_reference(const void * msgin)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000aec:	2120      	movs	r1, #32
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <subscription_callback_ancle_left_reference+0x1c>)
 8000af0:	f001 fef1 	bl	80028d6 <HAL_GPIO_TogglePin>

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020000 	.word	0x40020000

08000b00 <subscription_callback_ancle_right_reference>:
void subscription_callback_ancle_right_reference(const void * msgin)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	UNUSED(msg);

}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <subscription_callback_knee_left_reference>:
void subscription_callback_knee_left_reference(const void * msgin)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);

}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <subscription_callback_knee_right_reference>:
void subscription_callback_knee_right_reference(const void * msgin)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	UNUSED(msg);

}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <subscription_callback_heap_left_reference>:
void subscription_callback_heap_left_reference(const void * msgin)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);

}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <subscription_callback_heap_right_reference>:
void subscription_callback_heap_right_reference(const void * msgin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60fb      	str	r3, [r7, #12]
	//printf("Received: %f\n", msg->data);
	UNUSED(msg);

}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 ffe8 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f81a 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f000 f8d6 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b88:	f000 f8ac 	bl	8000ce4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b8c:	f000 f880 	bl	8000c90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b90:	f004 f8a0 	bl	8004cd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <main+0x34>)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <main+0x38>)
 8000b9a:	f004 f8e5 	bl	8004d68 <osThreadNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <main+0x3c>)
 8000ba2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ba4:	f004 f8ba 	bl	8004d1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <main+0x30>
 8000baa:	bf00      	nop
 8000bac:	080159e0 	.word	0x080159e0
 8000bb0:	08000e11 	.word	0x08000e11
 8000bb4:	20003e7c 	.word	0x20003e7c

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f013 fe96 	bl	80148f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <SystemClock_Config+0xd0>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <SystemClock_Config+0xd0>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <SystemClock_Config+0xd0>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <SystemClock_Config+0xd4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <SystemClock_Config+0xd4>)
 8000c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <SystemClock_Config+0xd4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c20:	2310      	movs	r3, #16
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c24:	2302      	movs	r3, #2
 8000c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c36:	2304      	movs	r3, #4
 8000c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fe62 	bl	800290c <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c4e:	f000 fad1 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	230f      	movs	r3, #15
 8000c54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2302      	movs	r3, #2
 8000c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 f8c4 	bl	8002dfc <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c7a:	f000 fabb 	bl	80011f4 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	; 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART2_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f002 fd5e 	bl	8003788 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f000 fa8f 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20003d74 	.word	0x20003d74
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_DMA_Init+0x4c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <MX_DMA_Init+0x4c>)
 8000cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_DMA_Init+0x4c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	2010      	movs	r0, #16
 8000d0c:	f001 f81a 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d10:	2010      	movs	r0, #16
 8000d12:	f001 f833 	bl	8001d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2105      	movs	r1, #5
 8000d1a:	2011      	movs	r0, #17
 8000d1c:	f001 f812 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d20:	2011      	movs	r0, #17
 8000d22:	f001 f82b 	bl	8001d7c <HAL_NVIC_EnableIRQ>

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4812      	ldr	r0, [pc, #72]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000dc0:	f001 fd70 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_GPIO_Init+0xd8>)
 8000ddc:	f001 fbde 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000de0:	2320      	movs	r3, #32
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000df8:	f001 fbd0 	bl	800259c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020800 	.word	0x40020800

08000e10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b0d8      	sub	sp, #352	; 0x160
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000e1e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8000e20:	4bc1      	ldr	r3, [pc, #772]	; (8001128 <StartDefaultTask+0x318>)
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	4bc1      	ldr	r3, [pc, #772]	; (800112c <StartDefaultTask+0x31c>)
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	4bc1      	ldr	r3, [pc, #772]	; (8001130 <StartDefaultTask+0x320>)
 8000e2a:	4ac2      	ldr	r2, [pc, #776]	; (8001134 <StartDefaultTask+0x324>)
 8000e2c:	49c2      	ldr	r1, [pc, #776]	; (8001138 <StartDefaultTask+0x328>)
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f007 fdb2 	bl	8008998 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000e34:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f007 fcdf 	bl	80087fc <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000e3e:	4bbf      	ldr	r3, [pc, #764]	; (800113c <StartDefaultTask+0x32c>)
 8000e40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000e44:	4bbe      	ldr	r3, [pc, #760]	; (8001140 <StartDefaultTask+0x330>)
 8000e46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000e4a:	4bbe      	ldr	r3, [pc, #760]	; (8001144 <StartDefaultTask+0x334>)
 8000e4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000e50:	4bbd      	ldr	r3, [pc, #756]	; (8001148 <StartDefaultTask+0x338>)
 8000e52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000e56:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f007 fcdc 	bl	8008818 <rcutils_set_default_allocator>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f083 0301 	eor.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <StartDefaultTask+0x66>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8000e6c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8000e70:	48b6      	ldr	r0, [pc, #728]	; (800114c <StartDefaultTask+0x33c>)
 8000e72:	f013 fc55 	bl	8014720 <iprintf>



  //mensajes subcriptor

  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor() ;
 8000e76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f007 f8f6 	bl	800806c <rclc_executor_get_zero_initialized_executor>
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 8000e80:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e84:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 fce2 	bl	8008854 <rcutils_get_default_allocator>
 8000e90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e94:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000e98:	461d      	mov	r5, r3
 8000e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	f007 fbaf 	bl	8008610 <rclc_support_init>
  // create node
   rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000eb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb6:	f107 0020 	add.w	r0, r7, #32
 8000eba:	4aa5      	ldr	r2, [pc, #660]	; (8001150 <StartDefaultTask+0x340>)
 8000ebc:	49a5      	ldr	r1, [pc, #660]	; (8001154 <StartDefaultTask+0x344>)
 8000ebe:	f007 fbf1 	bl	80086a4 <rclc_node_init_default>

 // create publisher

  rclc_publisher_init_default(
 8000ec2:	f008 fa95 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f107 0120 	add.w	r1, r7, #32
 8000ecc:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8000ed0:	4ba1      	ldr	r3, [pc, #644]	; (8001158 <StartDefaultTask+0x348>)
 8000ed2:	f007 fc23 	bl	800871c <rclc_publisher_init_default>
    &publisher_ancle_left_current,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
    "ancle_left_current");

  rclc_publisher_init_default(
 8000ed6:	f008 fa8b 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f107 0120 	add.w	r1, r7, #32
 8000ee0:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8000ee4:	4b9d      	ldr	r3, [pc, #628]	; (800115c <StartDefaultTask+0x34c>)
 8000ee6:	f007 fc19 	bl	800871c <rclc_publisher_init_default>
    &publisher_ancle_right_current,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
    "ancle_right_current");

  rclc_publisher_init_default(
 8000eea:	f008 fa81 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f107 0120 	add.w	r1, r7, #32
 8000ef4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000ef8:	4b99      	ldr	r3, [pc, #612]	; (8001160 <StartDefaultTask+0x350>)
 8000efa:	f007 fc0f 	bl	800871c <rclc_publisher_init_default>
      &publisher_knee_left_current,
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
      "knee_left_current");

  rclc_publisher_init_default(
 8000efe:	f008 fa77 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f107 0120 	add.w	r1, r7, #32
 8000f08:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8000f0c:	4b95      	ldr	r3, [pc, #596]	; (8001164 <StartDefaultTask+0x354>)
 8000f0e:	f007 fc05 	bl	800871c <rclc_publisher_init_default>
      &publisher_knee_right_current,
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
      "knee_right_current");
  rclc_publisher_init_default(
 8000f12:	f008 fa6d 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f107 0120 	add.w	r1, r7, #32
 8000f1c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8000f20:	4b91      	ldr	r3, [pc, #580]	; (8001168 <StartDefaultTask+0x358>)
 8000f22:	f007 fbfb 	bl	800871c <rclc_publisher_init_default>
        &publisher_heap_left_current,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
        "heap_left_current");

 rclc_publisher_init_default(
 8000f26:	f008 fa63 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f107 0120 	add.w	r1, r7, #32
 8000f30:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000f34:	4b8d      	ldr	r3, [pc, #564]	; (800116c <StartDefaultTask+0x35c>)
 8000f36:	f007 fbf1 	bl	800871c <rclc_publisher_init_default>
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
        "heap_right_current");



   msg_ancle_left_current.data = 0;
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   msg_ancle_right_current.data = 0;
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   msg_knee_left_current.data=0;
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   msg_knee_right_current.data=0;
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   msg_heap_left_current.data=0;
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   msg_heap_right_current.data=0;
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

//subcriptor
   rclc_subscription_init_default(
 8000f6a:	f008 fa41 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	f107 0120 	add.w	r1, r7, #32
 8000f74:	4b7e      	ldr	r3, [pc, #504]	; (8001170 <StartDefaultTask+0x360>)
 8000f76:	487f      	ldr	r0, [pc, #508]	; (8001174 <StartDefaultTask+0x364>)
 8000f78:	f007 fc04 	bl	8008784 <rclc_subscription_init_default>
   		&subscription_ancle_left_reference,
   		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
   		"/ancle_left_reference");

   rclc_subscription_init_default(
 8000f7c:	f008 fa38 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0120 	add.w	r1, r7, #32
 8000f86:	4b7c      	ldr	r3, [pc, #496]	; (8001178 <StartDefaultTask+0x368>)
 8000f88:	487c      	ldr	r0, [pc, #496]	; (800117c <StartDefaultTask+0x36c>)
 8000f8a:	f007 fbfb 	bl	8008784 <rclc_subscription_init_default>
   		&subscription_ancle_right_reference,
   		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
   		"/ancle_right_reference");

   rclc_subscription_init_default(
 8000f8e:	f008 fa2f 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000f92:	4602      	mov	r2, r0
 8000f94:	f107 0120 	add.w	r1, r7, #32
 8000f98:	4b79      	ldr	r3, [pc, #484]	; (8001180 <StartDefaultTask+0x370>)
 8000f9a:	487a      	ldr	r0, [pc, #488]	; (8001184 <StartDefaultTask+0x374>)
 8000f9c:	f007 fbf2 	bl	8008784 <rclc_subscription_init_default>
   		&subscription_knee_left_reference,
   		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
   		"/knee_left_reference");

   rclc_subscription_init_default(
 8000fa0:	f008 fa26 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f107 0120 	add.w	r1, r7, #32
 8000faa:	4b77      	ldr	r3, [pc, #476]	; (8001188 <StartDefaultTask+0x378>)
 8000fac:	4877      	ldr	r0, [pc, #476]	; (800118c <StartDefaultTask+0x37c>)
 8000fae:	f007 fbe9 	bl	8008784 <rclc_subscription_init_default>
   		&subscription_knee_right_reference,
   		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
   		"/knee_right_reference");

   rclc_subscription_init_default(
 8000fb2:	f008 fa1d 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	f107 0120 	add.w	r1, r7, #32
 8000fbc:	4b74      	ldr	r3, [pc, #464]	; (8001190 <StartDefaultTask+0x380>)
 8000fbe:	4875      	ldr	r0, [pc, #468]	; (8001194 <StartDefaultTask+0x384>)
 8000fc0:	f007 fbe0 	bl	8008784 <rclc_subscription_init_default>
   		&subscription_heap_left_reference,
   		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
   		"/heap_left_reference");

   rclc_subscription_init_default(
 8000fc4:	f008 fa14 	bl	80093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f107 0120 	add.w	r1, r7, #32
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <StartDefaultTask+0x388>)
 8000fd0:	4872      	ldr	r0, [pc, #456]	; (800119c <StartDefaultTask+0x38c>)
 8000fd2:	f007 fbd7 	bl	8008784 <rclc_subscription_init_default>



   //create executor

   rclc_executor_init(&executor, &support.context, 6, &allocator);
 8000fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fda:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000fde:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	f007 f84c 	bl	8008080 <rclc_executor_init>

   rclc_executor_add_subscription(&executor,
 8000fe8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <StartDefaultTask+0x390>)
 8000ff2:	4a6c      	ldr	r2, [pc, #432]	; (80011a4 <StartDefaultTask+0x394>)
 8000ff4:	495f      	ldr	r1, [pc, #380]	; (8001174 <StartDefaultTask+0x364>)
 8000ff6:	f007 f8b3 	bl	8008160 <rclc_executor_add_subscription>
		   	   	   	   	   	   	  &subscription_ancle_left_reference,
								  &msg_ancle_left_reference,
								  &subscription_callback_ancle_left_reference, ON_NEW_DATA);

   rclc_executor_add_subscription(&executor,
 8000ffa:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <StartDefaultTask+0x398>)
 8001004:	4a69      	ldr	r2, [pc, #420]	; (80011ac <StartDefaultTask+0x39c>)
 8001006:	495d      	ldr	r1, [pc, #372]	; (800117c <StartDefaultTask+0x36c>)
 8001008:	f007 f8aa 	bl	8008160 <rclc_executor_add_subscription>
		   	   	   	   	   	   	  &subscription_ancle_right_reference,
								  &msg_ancle_right_reference,
								  &subscription_callback_ancle_right_reference, ON_NEW_DATA);


   rclc_executor_add_subscription(&executor,
 800100c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001010:	2300      	movs	r3, #0
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <StartDefaultTask+0x3a0>)
 8001016:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <StartDefaultTask+0x3a4>)
 8001018:	495a      	ldr	r1, [pc, #360]	; (8001184 <StartDefaultTask+0x374>)
 800101a:	f007 f8a1 	bl	8008160 <rclc_executor_add_subscription>
		   	   	   	   	   	   	  &subscription_knee_left_reference,
								  &msg_knee_left_reference,
								  &subscription_callback_knee_left_reference, ON_NEW_DATA);

   rclc_executor_add_subscription(&executor,
 800101e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	4b64      	ldr	r3, [pc, #400]	; (80011b8 <StartDefaultTask+0x3a8>)
 8001028:	4a64      	ldr	r2, [pc, #400]	; (80011bc <StartDefaultTask+0x3ac>)
 800102a:	4958      	ldr	r1, [pc, #352]	; (800118c <StartDefaultTask+0x37c>)
 800102c:	f007 f898 	bl	8008160 <rclc_executor_add_subscription>
		   	   	   	   	   	   	  &subscription_knee_right_reference,
								  &msg_knee_right_reference,
								  &subscription_callback_knee_right_reference, ON_NEW_DATA);


   rclc_executor_add_subscription(&executor,
 8001030:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001034:	2300      	movs	r3, #0
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <StartDefaultTask+0x3b0>)
 800103a:	4a62      	ldr	r2, [pc, #392]	; (80011c4 <StartDefaultTask+0x3b4>)
 800103c:	4955      	ldr	r1, [pc, #340]	; (8001194 <StartDefaultTask+0x384>)
 800103e:	f007 f88f 	bl	8008160 <rclc_executor_add_subscription>
		   	   	   	   	   	   	  &subscription_heap_left_reference,
								  &msg_heap_left_reference,
								  &subscription_callback_heap_left_reference, ON_NEW_DATA);

   rclc_executor_add_subscription(&executor,
 8001042:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001046:	2300      	movs	r3, #0
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <StartDefaultTask+0x3b8>)
 800104c:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <StartDefaultTask+0x3bc>)
 800104e:	4953      	ldr	r1, [pc, #332]	; (800119c <StartDefaultTask+0x38c>)
 8001050:	f007 f886 	bl	8008160 <rclc_executor_add_subscription>

///
  for(;;)
  {

	  	rcl_ret_t ret1 = rcl_publish(&publisher_ancle_left_current, &msg_ancle_left_current, NULL);
 8001054:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001058:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800105c:	2200      	movs	r2, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fc76 	bl	8007950 <rcl_publish>
 8001064:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154


	    rcl_ret_t ret2 = rcl_publish(&publisher_ancle_right_current, &msg_ancle_right_current, NULL);
 8001068:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800106c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001070:	2200      	movs	r2, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f006 fc6c 	bl	8007950 <rcl_publish>
 8001078:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

	    rcl_ret_t ret3 = rcl_publish(&publisher_knee_left_current, &msg_knee_left_current, NULL);
 800107c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001080:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001084:	2200      	movs	r2, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f006 fc62 	bl	8007950 <rcl_publish>
 800108c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

	    rcl_ret_t ret4 = rcl_publish(&publisher_knee_right_current, &msg_knee_right_current, NULL);
 8001090:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001094:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001098:	2200      	movs	r2, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f006 fc58 	bl	8007950 <rcl_publish>
 80010a0:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148

	    rcl_ret_t ret5 = rcl_publish(&publisher_heap_left_current, &msg_heap_left_current, NULL);
 80010a4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80010a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010ac:	2200      	movs	r2, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 fc4e 	bl	8007950 <rcl_publish>
 80010b4:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144


	    rcl_ret_t ret6 = rcl_publish(&publisher_heap_right_current, &msg_heap_right_current, NULL);
 80010b8:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80010bc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80010c0:	2200      	movs	r2, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 fc44 	bl	8007950 <rcl_publish>
 80010c8:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140


	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	msg_ancle_left_current.data=msg_ancle_left_reference.data;
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <StartDefaultTask+0x394>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	msg_ancle_right_current.data=msg_ancle_right_reference.data;
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <StartDefaultTask+0x39c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	msg_knee_left_current.data=msg_knee_left_reference.data;
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <StartDefaultTask+0x3a4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	msg_knee_right_current.data=msg_knee_right_reference.data;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <StartDefaultTask+0x3ac>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	msg_heap_left_current.data=msg_heap_right_reference.data;
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <StartDefaultTask+0x3bc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	msg_heap_right_current.data++;
 80010f4:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 80010f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001100:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

    osDelay(1000);
 8001104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001108:	f003 fec0 	bl	8004e8c <osDelay>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800110c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001110:	a303      	add	r3, pc, #12	; (adr r3, 8001120 <StartDefaultTask+0x310>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	4608      	mov	r0, r1
 8001118:	f007 fa42 	bl	80085a0 <rclc_executor_spin_some>
  {
 800111c:	e79a      	b.n	8001054 <StartDefaultTask+0x244>
 800111e:	bf00      	nop
 8001120:	05f5e100 	.word	0x05f5e100
 8001124:	00000000 	.word	0x00000000
 8001128:	08001a55 	.word	0x08001a55
 800112c:	080019ed 	.word	0x080019ed
 8001130:	080019cd 	.word	0x080019cd
 8001134:	080019a1 	.word	0x080019a1
 8001138:	20003d74 	.word	0x20003d74
 800113c:	08001201 	.word	0x08001201
 8001140:	08001245 	.word	0x08001245
 8001144:	0800127d 	.word	0x0800127d
 8001148:	080012e9 	.word	0x080012e9
 800114c:	0801586c 	.word	0x0801586c
 8001150:	08015894 	.word	0x08015894
 8001154:	08015898 	.word	0x08015898
 8001158:	080158a4 	.word	0x080158a4
 800115c:	080158b8 	.word	0x080158b8
 8001160:	080158cc 	.word	0x080158cc
 8001164:	080158e0 	.word	0x080158e0
 8001168:	080158f4 	.word	0x080158f4
 800116c:	08015908 	.word	0x08015908
 8001170:	0801591c 	.word	0x0801591c
 8001174:	20003d44 	.word	0x20003d44
 8001178:	08015934 	.word	0x08015934
 800117c:	20003d48 	.word	0x20003d48
 8001180:	0801594c 	.word	0x0801594c
 8001184:	20003d4c 	.word	0x20003d4c
 8001188:	08015964 	.word	0x08015964
 800118c:	20003d50 	.word	0x20003d50
 8001190:	0801597c 	.word	0x0801597c
 8001194:	20003d54 	.word	0x20003d54
 8001198:	08015994 	.word	0x08015994
 800119c:	20003d58 	.word	0x20003d58
 80011a0:	08000ae1 	.word	0x08000ae1
 80011a4:	20003d5c 	.word	0x20003d5c
 80011a8:	08000b01 	.word	0x08000b01
 80011ac:	20003d60 	.word	0x20003d60
 80011b0:	08000b19 	.word	0x08000b19
 80011b4:	20003d64 	.word	0x20003d64
 80011b8:	08000b31 	.word	0x08000b31
 80011bc:	20003d68 	.word	0x20003d68
 80011c0:	08000b49 	.word	0x08000b49
 80011c4:	20003d6c 	.word	0x20003d6c
 80011c8:	08000b61 	.word	0x08000b61
 80011cc:	20003d70 	.word	0x20003d70

080011d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011e2:	f000 fcd7 	bl	8001b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40010000 	.word	0x40010000

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <microros_allocate+0x3c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <microros_allocate+0x3c>)
 8001218:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <microros_allocate+0x40>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <microros_allocate+0x40>)
 8001228:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fa0e 	bl	800064c <pvPortMallocMicroROS>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20008cfc 	.word	0x20008cfc
 8001240:	20008d00 	.word	0x20008d00

08001244 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fb17 	bl	8000888 <getBlockSize>
 800125a:	4603      	mov	r3, r0
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <microros_deallocate+0x34>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	461a      	mov	r2, r3
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <microros_deallocate+0x34>)
 8001266:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fab3 	bl	80007d4 <vPortFreeMicroROS>
  }
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20008d00 	.word	0x20008d00

0800127c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <microros_reallocate+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4413      	add	r3, r2
 8001292:	461a      	mov	r2, r3
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <microros_reallocate+0x64>)
 8001296:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <microros_reallocate+0x68>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <microros_reallocate+0x68>)
 80012a6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80012ae:	68b8      	ldr	r0, [r7, #8]
 80012b0:	f7ff f9cc 	bl	800064c <pvPortMallocMicroROS>
 80012b4:	4603      	mov	r3, r0
 80012b6:	e00e      	b.n	80012d6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff fae5 	bl	8000888 <getBlockSize>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <microros_reallocate+0x68>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <microros_reallocate+0x68>)
 80012ca:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff faf8 	bl	80008c4 <pvPortReallocMicroROS>
 80012d4:	4603      	mov	r3, r0
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20008cfc 	.word	0x20008cfc
 80012e4:	20008d00 	.word	0x20008d00

080012e8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	fb02 f303 	mul.w	r3, r2, r3
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <microros_zero_allocate+0x48>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <microros_zero_allocate+0x48>)
 8001306:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <microros_zero_allocate+0x4c>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4413      	add	r3, r2
 8001316:	461a      	mov	r2, r3
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <microros_zero_allocate+0x4c>)
 800131a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff fafd 	bl	800091e <pvPortCallocMicroROS>
 8001324:	4603      	mov	r3, r0
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20008cfc 	.word	0x20008cfc
 8001334:	20008d00 	.word	0x20008d00

08001338 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800134a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800134e:	a320      	add	r3, pc, #128	; (adr r3, 80013d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7fe ffac 	bl	80002b0 <__aeabi_ldivmod>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001366:	a31a      	add	r3, pc, #104	; (adr r3, 80013d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7fe ffa0 	bl	80002b0 <__aeabi_ldivmod>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da20      	bge.n	80013be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <UTILS_NanosecondsToTimespec+0x90>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1712      	asrs	r2, r2, #28
 8001388:	17db      	asrs	r3, r3, #31
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	17c8      	asrs	r0, r1, #31
 800139a:	460c      	mov	r4, r1
 800139c:	4605      	mov	r5, r0
 800139e:	ebb2 0804 	subs.w	r8, r2, r4
 80013a2:	eb63 0905 	sbc.w	r9, r3, r5
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4906      	ldr	r1, [pc, #24]	; (80013cc <UTILS_NanosecondsToTimespec+0x94>)
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	441a      	add	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]
    }
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c8:	44b82fa1 	.word	0x44b82fa1
 80013cc:	3b9aca00 	.word	0x3b9aca00
 80013d0:	3b9aca00 	.word	0x3b9aca00
 80013d4:	00000000 	.word	0x00000000

080013d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80013d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013dc:	b08e      	sub	sp, #56	; 0x38
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6278      	str	r0, [r7, #36]	; 0x24
 80013e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80013e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013e8:	2300      	movs	r3, #0
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fff8 	bl	80063f4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	17da      	asrs	r2, r3, #31
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	61fa      	str	r2, [r7, #28]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	69b9      	ldr	r1, [r7, #24]
 8001416:	000b      	movs	r3, r1
 8001418:	2200      	movs	r2, #0
 800141a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001420:	2200      	movs	r2, #0
 8001422:	461c      	mov	r4, r3
 8001424:	4615      	mov	r5, r2
 8001426:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800142a:	1911      	adds	r1, r2, r4
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	416b      	adcs	r3, r5
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001436:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800143a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	f04f 0400 	mov.w	r4, #0
 8001446:	f04f 0500 	mov.w	r5, #0
 800144a:	015d      	lsls	r5, r3, #5
 800144c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001450:	0154      	lsls	r4, r2, #5
 8001452:	4622      	mov	r2, r4
 8001454:	462b      	mov	r3, r5
 8001456:	ebb2 0800 	subs.w	r8, r2, r0
 800145a:	eb63 0901 	sbc.w	r9, r3, r1
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800146a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800146e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001472:	4690      	mov	r8, r2
 8001474:	4699      	mov	r9, r3
 8001476:	eb18 0a00 	adds.w	sl, r8, r0
 800147a:	eb49 0b01 	adc.w	fp, r9, r1
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800148a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800148e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001492:	ebb2 040a 	subs.w	r4, r2, sl
 8001496:	603c      	str	r4, [r7, #0]
 8001498:	eb63 030b 	sbc.w	r3, r3, fp
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014a2:	4623      	mov	r3, r4
 80014a4:	181b      	adds	r3, r3, r0
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	462b      	mov	r3, r5
 80014aa:	eb41 0303 	adc.w	r3, r1, r3
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b6:	f7ff ff3f 	bl	8001338 <UTILS_NanosecondsToTimespec>

    return 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	3738      	adds	r7, #56	; 0x38
 80014c0:	46bd      	mov	sp, r7
 80014c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_MspInit+0x54>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_MspInit+0x54>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_MspInit+0x54>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_MspInit+0x54>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_MspInit+0x54>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_MspInit+0x54>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	210f      	movs	r1, #15
 800150a:	f06f 0001 	mvn.w	r0, #1
 800150e:	f000 fc19 	bl	8001d44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <HAL_UART_MspInit+0x154>)
 800153e:	4293      	cmp	r3, r2
 8001540:	f040 8093 	bne.w	800166a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_UART_MspInit+0x158>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_UART_MspInit+0x158>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b48      	ldr	r3, [pc, #288]	; (8001678 <HAL_UART_MspInit+0x158>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b44      	ldr	r3, [pc, #272]	; (8001678 <HAL_UART_MspInit+0x158>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a43      	ldr	r2, [pc, #268]	; (8001678 <HAL_UART_MspInit+0x158>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
 8001570:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_UART_MspInit+0x158>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158c:	2307      	movs	r3, #7
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4839      	ldr	r0, [pc, #228]	; (800167c <HAL_UART_MspInit+0x15c>)
 8001598:	f001 f800 	bl	800259c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800159c:	4b38      	ldr	r3, [pc, #224]	; (8001680 <HAL_UART_MspInit+0x160>)
 800159e:	4a39      	ldr	r2, [pc, #228]	; (8001684 <HAL_UART_MspInit+0x164>)
 80015a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015e0:	4827      	ldr	r0, [pc, #156]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015e2:	f000 fbd9 	bl	8001d98 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80015ec:	f7ff fe02 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80015f6:	4a22      	ldr	r2, [pc, #136]	; (8001680 <HAL_UART_MspInit+0x160>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_UART_MspInit+0x168>)
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_UART_MspInit+0x16c>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001604:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001608:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_UART_MspInit+0x168>)
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x168>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001632:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001636:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_UART_MspInit+0x168>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800163e:	4812      	ldr	r0, [pc, #72]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001640:	f000 fbaa 	bl	8001d98 <HAL_DMA_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800164a:	f7ff fdd3 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_UART_MspInit+0x168>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	2026      	movs	r0, #38	; 0x26
 8001660:	f000 fb70 	bl	8001d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f000 fb89 	bl	8001d7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	20003dbc 	.word	0x20003dbc
 8001684:	40026088 	.word	0x40026088
 8001688:	20003e1c 	.word	0x20003e1c
 800168c:	400260a0 	.word	0x400260a0

08001690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_InitTick+0xd0>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <HAL_InitTick+0xd0>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6453      	str	r3, [r2, #68]	; 0x44
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_InitTick+0xd0>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016bc:	f107 020c 	add.w	r2, r7, #12
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 fdb8 	bl	800323c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016cc:	f001 fda2 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 80016d0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	4a23      	ldr	r2, [pc, #140]	; (8001764 <HAL_InitTick+0xd4>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	3b01      	subs	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_InitTick+0xd8>)
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <HAL_InitTick+0xdc>)
 80016e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_InitTick+0xd8>)
 80016e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_InitTick+0xd8>)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_InitTick+0xd8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_InitTick+0xd8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_InitTick+0xd8>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <HAL_InitTick+0xd8>)
 8001708:	f001 fdca 	bl	80032a0 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11b      	bne.n	8001752 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800171a:	4813      	ldr	r0, [pc, #76]	; (8001768 <HAL_InitTick+0xd8>)
 800171c:	f001 fe1a 	bl	8003354 <HAL_TIM_Base_Start_IT>
 8001720:	4603      	mov	r3, r0
 8001722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800172a:	2b00      	cmp	r3, #0
 800172c:	d111      	bne.n	8001752 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800172e:	2019      	movs	r0, #25
 8001730:	f000 fb24 	bl	8001d7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	d808      	bhi.n	800174c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800173a:	2200      	movs	r2, #0
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	2019      	movs	r0, #25
 8001740:	f000 fb00 	bl	8001d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_InitTick+0xe0>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e002      	b.n	8001752 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001756:	4618      	mov	r0, r3
 8001758:	3730      	adds	r7, #48	; 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	431bde83 	.word	0x431bde83
 8001768:	20008d04 	.word	0x20008d04
 800176c:	40010000 	.word	0x40010000
 8001770:	20000008 	.word	0x20000008

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Stream5_IRQHandler+0x10>)
 80017a6:	f000 fc8f 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20003dbc 	.word	0x20003dbc

080017b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Stream6_IRQHandler+0x10>)
 80017ba:	f000 fc85 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20003e1c 	.word	0x20003e1c

080017c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017ce:	f001 fe23 	bl	8003418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20008d04 	.word	0x20008d04

080017dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USART2_IRQHandler+0x10>)
 80017e2:	f002 f935 	bl	8003a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20003d74 	.word	0x20003d74

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180a:	f013 f909 	bl	8014a20 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
  return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
  }

  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
  }
  return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
  return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f013 f86e 	bl	8014a20 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20018000 	.word	0x20018000
 8001970:	00000400 	.word	0x00000400
 8001974:	20008d50 	.word	0x20008d50
 8001978:	20012b78 	.word	0x20012b78

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019ae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80019b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <cubemx_transport_open+0x28>)
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f001 ffa6 	bl	8003908 <HAL_UART_Receive_DMA>
    return true;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20008d54 	.word	0x20008d54

080019cc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019da:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f001 ffb8 	bl	8003952 <HAL_UART_DMAStop>
    return true;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d11c      	bne.n	8001a48 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f001 ff06 	bl	8003828 <HAL_UART_Transmit_DMA>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a20:	e002      	b.n	8001a28 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f003 fa32 	bl	8004e8c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a28:	7cfb      	ldrb	r3, [r7, #19]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <cubemx_transport_write+0x4e>
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d1f3      	bne.n	8001a22 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001a3a:	7cfb      	ldrb	r3, [r7, #19]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <cubemx_transport_write+0x58>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	e002      	b.n	8001a4a <cubemx_transport_write+0x5e>
 8001a44:	2300      	movs	r3, #0
 8001a46:	e000      	b.n	8001a4a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001a48:	2300      	movs	r3, #0
    }
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a68:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6e:	b672      	cpsid	i
}
 8001a70:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <cubemx_transport_read+0x9c>)
 8001a80:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a82:	b662      	cpsie	i
}
 8001a84:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f003 f9fd 	bl	8004e8c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <cubemx_transport_read+0xa0>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <cubemx_transport_read+0x9c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d103      	bne.n	8001aa6 <cubemx_transport_read+0x52>
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dbe3      	blt.n	8001a6e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001aaa:	e011      	b.n	8001ad0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <cubemx_transport_read+0xa0>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	4910      	ldr	r1, [pc, #64]	; (8001af8 <cubemx_transport_read+0xa4>)
 8001ab8:	5c8a      	ldrb	r2, [r1, r2]
 8001aba:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <cubemx_transport_read+0xa0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <cubemx_transport_read+0xa0>)
 8001ac8:	6013      	str	r3, [r2, #0]
        wrote++;
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <cubemx_transport_read+0xa0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <cubemx_transport_read+0x9c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d003      	beq.n	8001ae4 <cubemx_transport_read+0x90>
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3e3      	bcc.n	8001aac <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20009558 	.word	0x20009558
 8001af4:	20009554 	.word	0x20009554
 8001af8:	20008d54 	.word	0x20008d54

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b00:	f7ff ff3c 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f012 ff7f 	bl	8014a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff f823 	bl	8000b78 <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001b40:	08016758 	.word	0x08016758
  ldr r2, =_sbss
 8001b44:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001b48:	20012b74 	.word	0x20012b74

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_Init+0x40>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_Init+0x40>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x40>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f8d8 	bl	8001d2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f7ff fd86 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fca0 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	2000955c 	.word	0x2000955c

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2000955c 	.word	0x2000955c

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ff4c 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d56:	f7ff ff61 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001d5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	6978      	ldr	r0, [r7, #20]
 8001d62:	f7ff ffb1 	bl	8001cc8 <NVIC_EncodePriority>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff80 	bl	8001c74 <__NVIC_SetPriority>
}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff54 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ff0a 	bl	8001bbc <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e099      	b.n	8001ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd4:	e00f      	b.n	8001df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd6:	f7ff fef1 	bl	8001bbc <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d908      	bls.n	8001df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e078      	b.n	8001ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e8      	bne.n	8001dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_DMA_Init+0x158>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d107      	bne.n	8001e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f023 0307 	bic.w	r3, r3, #7
 8001e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d117      	bne.n	8001eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fb01 	bl	80024a4 <DMA_CheckFifoParam>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e016      	b.n	8001ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fab8 	bl	8002438 <DMA_CalcBaseAndBitshift>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	223f      	movs	r2, #63	; 0x3f
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	f010803f 	.word	0xf010803f

08001ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Start_IT+0x26>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e040      	b.n	8001f9c <HAL_DMA_Start_IT+0xa8>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d12f      	bne.n	8001f8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fa4a 	bl	80023dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	223f      	movs	r2, #63	; 0x3f
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0216 	orr.w	r2, r2, #22
 8001f62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e005      	b.n	8001f9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
 8001f98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb2:	f7ff fe03 	bl	8001bbc <HAL_GetTick>
 8001fb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d008      	beq.n	8001fd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e052      	b.n	800207c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0216 	bic.w	r2, r2, #22
 8001fe4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <HAL_DMA_Abort+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002026:	e013      	b.n	8002050 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002028:	f7ff fdc8 	bl	8001bbc <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b05      	cmp	r3, #5
 8002034:	d90c      	bls.n	8002050 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e015      	b.n	800207c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e4      	bne.n	8002028 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	223f      	movs	r2, #63	; 0x3f
 8002064:	409a      	lsls	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d004      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00c      	b.n	80020bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020d4:	4b8e      	ldr	r3, [pc, #568]	; (8002310 <HAL_DMA_IRQHandler+0x248>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a8e      	ldr	r2, [pc, #568]	; (8002314 <HAL_DMA_IRQHandler+0x24c>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0a9b      	lsrs	r3, r3, #10
 80020e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2208      	movs	r2, #8
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01a      	beq.n	8002134 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0204 	bic.w	r2, r2, #4
 800211a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2208      	movs	r2, #8
 8002122:	409a      	lsls	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	2201      	movs	r2, #1
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	2201      	movs	r2, #1
 8002158:	409a      	lsls	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2204      	movs	r2, #4
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2204      	movs	r2, #4
 800218e:	409a      	lsls	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f043 0204 	orr.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2210      	movs	r2, #16
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d043      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03c      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2210      	movs	r2, #16
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d018      	beq.n	800220a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d024      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
 80021f6:	e01f      	b.n	8002238 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
 8002208:	e016      	b.n	8002238 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0208 	bic.w	r2, r2, #8
 8002226:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	2220      	movs	r2, #32
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 808f 	beq.w	8002368 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8087 	beq.w	8002368 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2220      	movs	r2, #32
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b05      	cmp	r3, #5
 8002270:	d136      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0216 	bic.w	r2, r2, #22
 8002280:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_DMA_IRQHandler+0x1da>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0208 	bic.w	r2, r2, #8
 80022b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	223f      	movs	r2, #63	; 0x3f
 80022b8:	409a      	lsls	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d07e      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
        }
        return;
 80022de:	e079      	b.n	80023d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01d      	beq.n	800232a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	2b00      	cmp	r3, #0
 8002302:	d031      	beq.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
 800230c:	e02c      	b.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
 800230e:	bf00      	nop
 8002310:	20000004 	.word	0x20000004
 8002314:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
 8002328:	e01e      	b.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10f      	bne.n	8002358 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0210 	bic.w	r2, r2, #16
 8002346:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	2b00      	cmp	r3, #0
 800236e:	d032      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d022      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2205      	movs	r2, #5
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3301      	adds	r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	d307      	bcc.n	80023b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f2      	bne.n	8002394 <HAL_DMA_IRQHandler+0x2cc>
 80023ae:	e000      	b.n	80023b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
 80023d2:	e000      	b.n	80023d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023d4:	bf00      	nop
    }
  }
}
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d108      	bne.n	800241c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800241a:	e007      	b.n	800242c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	3b10      	subs	r3, #16
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <DMA_CalcBaseAndBitshift+0x64>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d909      	bls.n	800247a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	659a      	str	r2, [r3, #88]	; 0x58
 8002478:	e007      	b.n	800248a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	aaaaaaab 	.word	0xaaaaaaab
 80024a0:	08015a1c 	.word	0x08015a1c

080024a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11f      	bne.n	80024fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d856      	bhi.n	8002572 <DMA_CheckFifoParam+0xce>
 80024c4:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <DMA_CheckFifoParam+0x28>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024ef 	.word	0x080024ef
 80024d4:	080024dd 	.word	0x080024dd
 80024d8:	08002573 	.word	0x08002573
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d046      	beq.n	8002576 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ec:	e043      	b.n	8002576 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024f6:	d140      	bne.n	800257a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024fc:	e03d      	b.n	800257a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002506:	d121      	bne.n	800254c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d837      	bhi.n	800257e <DMA_CheckFifoParam+0xda>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <DMA_CheckFifoParam+0x70>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002525 	.word	0x08002525
 8002518:	0800252b 	.word	0x0800252b
 800251c:	08002525 	.word	0x08002525
 8002520:	0800253d 	.word	0x0800253d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e030      	b.n	800258c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d025      	beq.n	8002582 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253a:	e022      	b.n	8002582 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002544:	d11f      	bne.n	8002586 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800254a:	e01c      	b.n	8002586 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d903      	bls.n	800255a <DMA_CheckFifoParam+0xb6>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d003      	beq.n	8002560 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002558:	e018      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      break;
 800255e:	e015      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00e      	beq.n	800258a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      break;
 8002570:	e00b      	b.n	800258a <DMA_CheckFifoParam+0xe6>
      break;
 8002572:	bf00      	nop
 8002574:	e00a      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      break;
 8002576:	bf00      	nop
 8002578:	e008      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      break;
 800257a:	bf00      	nop
 800257c:	e006      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
 8002580:	e004      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
 8002584:	e002      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      break;   
 8002586:	bf00      	nop
 8002588:	e000      	b.n	800258c <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
    }
  } 
  
  return status; 
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e159      	b.n	800286c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	f040 8148 	bne.w	8002866 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d005      	beq.n	80025ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d130      	bne.n	8002650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 0201 	and.w	r2, r3, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b03      	cmp	r3, #3
 800265a:	d017      	beq.n	800268c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d123      	bne.n	80026e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	08da      	lsrs	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3208      	adds	r2, #8
 80026a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	220f      	movs	r2, #15
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0203 	and.w	r2, r3, #3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80a2 	beq.w	8002866 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b57      	ldr	r3, [pc, #348]	; (8002884 <HAL_GPIO_Init+0x2e8>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a56      	ldr	r2, [pc, #344]	; (8002884 <HAL_GPIO_Init+0x2e8>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b54      	ldr	r3, [pc, #336]	; (8002884 <HAL_GPIO_Init+0x2e8>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800273e:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x2ec>)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a49      	ldr	r2, [pc, #292]	; (800288c <HAL_GPIO_Init+0x2f0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x202>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a48      	ldr	r2, [pc, #288]	; (8002890 <HAL_GPIO_Init+0x2f4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x1fe>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a47      	ldr	r2, [pc, #284]	; (8002894 <HAL_GPIO_Init+0x2f8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x1fa>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a46      	ldr	r2, [pc, #280]	; (8002898 <HAL_GPIO_Init+0x2fc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x1f6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a45      	ldr	r2, [pc, #276]	; (800289c <HAL_GPIO_Init+0x300>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x1f2>
 800278a:	2304      	movs	r3, #4
 800278c:	e008      	b.n	80027a0 <HAL_GPIO_Init+0x204>
 800278e:	2307      	movs	r3, #7
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x204>
 8002792:	2303      	movs	r3, #3
 8002794:	e004      	b.n	80027a0 <HAL_GPIO_Init+0x204>
 8002796:	2302      	movs	r3, #2
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_Init+0x204>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x204>
 800279e:	2300      	movs	r3, #0
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4093      	lsls	r3, r2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b0:	4935      	ldr	r1, [pc, #212]	; (8002888 <HAL_GPIO_Init+0x2ec>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_GPIO_Init+0x304>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e2:	4a2f      	ldr	r2, [pc, #188]	; (80028a0 <HAL_GPIO_Init+0x304>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_GPIO_Init+0x304>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800280c:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <HAL_GPIO_Init+0x304>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <HAL_GPIO_Init+0x304>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_GPIO_Init+0x304>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_GPIO_Init+0x304>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002860:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <HAL_GPIO_Init+0x304>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	f67f aea2 	bls.w	80025b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40013800 	.word	0x40013800
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c0:	e003      	b.n	80028ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e8:	887a      	ldrh	r2, [r7, #2]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	400b      	ands	r3, r1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	619a      	str	r2, [r3, #24]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e267      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d075      	beq.n	8002a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292a:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d00c      	beq.n	8002950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002936:	4b85      	ldr	r3, [pc, #532]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293e:	2b08      	cmp	r3, #8
 8002940:	d112      	bne.n	8002968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002942:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294e:	d10b      	bne.n	8002968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	4b7e      	ldr	r3, [pc, #504]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d05b      	beq.n	8002a14 <HAL_RCC_OscConfig+0x108>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d157      	bne.n	8002a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e242      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d106      	bne.n	8002980 <HAL_RCC_OscConfig+0x74>
 8002972:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a75      	ldr	r2, [pc, #468]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e01d      	b.n	80029bc <HAL_RCC_OscConfig+0xb0>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x98>
 800298a:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6f      	ldr	r2, [pc, #444]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6c      	ldr	r2, [pc, #432]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e00b      	b.n	80029bc <HAL_RCC_OscConfig+0xb0>
 80029a4:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a68      	ldr	r2, [pc, #416]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b66      	ldr	r3, [pc, #408]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a65      	ldr	r2, [pc, #404]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 80029b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7ff f8fa 	bl	8001bbc <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029cc:	f7ff f8f6 	bl	8001bbc <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e207      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0xc0>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff f8e6 	bl	8001bbc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7ff f8e2 	bl	8001bbc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e1f3      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a06:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0xe8>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d063      	beq.n	8002aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a22:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d11c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3a:	4b44      	ldr	r3, [pc, #272]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d116      	bne.n	8002a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_RCC_OscConfig+0x152>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d001      	beq.n	8002a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e1c7      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	e03a      	b.n	8002aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7c:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_RCC_OscConfig+0x244>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7ff f89b 	bl	8001bbc <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7ff f897 	bl	8001bbc <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e1a8      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4925      	ldr	r1, [pc, #148]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	e015      	b.n	8002aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_OscConfig+0x244>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f87a 	bl	8001bbc <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002acc:	f7ff f876 	bl	8001bbc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e187      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d036      	beq.n	8002b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x248>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7ff f85a 	bl	8001bbc <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7ff f856 	bl	8001bbc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e167      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x240>)
 8002b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x200>
 8002b2a:	e01b      	b.n	8002b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_OscConfig+0x248>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7ff f843 	bl	8001bbc <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b38:	e00e      	b.n	8002b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f83f 	bl	8001bbc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d907      	bls.n	8002b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e150      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	42470000 	.word	0x42470000
 8002b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ea      	bne.n	8002b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8097 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b76:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	4b7d      	ldr	r3, [pc, #500]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a7c      	ldr	r2, [pc, #496]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b77      	ldr	r3, [pc, #476]	; (8002d80 <HAL_RCC_OscConfig+0x474>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bae:	4b74      	ldr	r3, [pc, #464]	; (8002d80 <HAL_RCC_OscConfig+0x474>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a73      	ldr	r2, [pc, #460]	; (8002d80 <HAL_RCC_OscConfig+0x474>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7fe ffff 	bl	8001bbc <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe fffb 	bl	8001bbc <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e10c      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCC_OscConfig+0x474>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2ea>
 8002be8:	4b64      	ldr	r3, [pc, #400]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a63      	ldr	r2, [pc, #396]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	e01c      	b.n	8002c30 <HAL_RCC_OscConfig+0x324>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x30c>
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a5b      	ldr	r2, [pc, #364]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0x324>
 8002c18:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a57      	ldr	r2, [pc, #348]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a54      	ldr	r2, [pc, #336]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c2a:	f023 0304 	bic.w	r3, r3, #4
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe ffc0 	bl	8001bbc <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe ffbc 	bl	8001bbc <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0cb      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ee      	beq.n	8002c40 <HAL_RCC_OscConfig+0x334>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fe ffaa 	bl	8001bbc <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe ffa6 	bl	8001bbc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0b5      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c82:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ee      	bne.n	8002c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c94:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80a1 	beq.w	8002dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002caa:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d05c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d141      	bne.n	8002d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_OscConfig+0x478>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe ff7a 	bl	8001bbc <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe ff76 	bl	8001bbc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e087      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	3b01      	subs	r3, #1
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	491b      	ldr	r1, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x478>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe ff4f 	bl	8001bbc <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d22:	f7fe ff4b 	bl	8001bbc <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e05c      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x416>
 8002d40:	e054      	b.n	8002dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_RCC_OscConfig+0x478>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe ff38 	bl	8001bbc <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe ff34 	bl	8001bbc <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e045      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_OscConfig+0x470>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x444>
 8002d6e:	e03d      	b.n	8002dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e038      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000
 8002d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x4ec>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d028      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d121      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d11a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d111      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0cc      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d90c      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b65      	ldr	r3, [pc, #404]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0b8      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e50:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e68:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a52      	ldr	r2, [pc, #328]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	494d      	ldr	r1, [pc, #308]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d044      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d119      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e07f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e06f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e067      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4934      	ldr	r1, [pc, #208]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eec:	f7fe fe66 	bl	8001bbc <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fe fe62 	bl	8001bbc <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e04f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 020c 	and.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1eb      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d20c      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e032      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4916      	ldr	r1, [pc, #88]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f82:	f000 f821 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f86:	4602      	mov	r2, r0
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	490a      	ldr	r1, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	5ccb      	ldrb	r3, [r1, r3]
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fb74 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	08015a04 	.word	0x08015a04
 8002fc0:	20000004 	.word	0x20000004
 8002fc4:	20000008 	.word	0x20000008

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fcc:	b094      	sub	sp, #80	; 0x50
 8002fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd8:	2300      	movs	r3, #0
 8002fda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe0:	4b79      	ldr	r3, [pc, #484]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d00d      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x40>
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	f200 80e1 	bhi.w	80031b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x34>
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ffa:	e0db      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003000:	e0db      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003002:	4b73      	ldr	r3, [pc, #460]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003004:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003006:	e0d8      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003008:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003012:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d063      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301e:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	2200      	movs	r2, #0
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38
 8003028:	63fa      	str	r2, [r7, #60]	; 0x3c
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
 8003032:	2300      	movs	r3, #0
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
 8003036:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	f04f 0000 	mov.w	r0, #0
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	0159      	lsls	r1, r3, #5
 8003048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800304c:	0150      	lsls	r0, r2, #5
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4621      	mov	r1, r4
 8003054:	1a51      	subs	r1, r2, r1
 8003056:	6139      	str	r1, [r7, #16]
 8003058:	4629      	mov	r1, r5
 800305a:	eb63 0301 	sbc.w	r3, r3, r1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800306c:	4659      	mov	r1, fp
 800306e:	018b      	lsls	r3, r1, #6
 8003070:	4651      	mov	r1, sl
 8003072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003076:	4651      	mov	r1, sl
 8003078:	018a      	lsls	r2, r1, #6
 800307a:	4651      	mov	r1, sl
 800307c:	ebb2 0801 	subs.w	r8, r2, r1
 8003080:	4659      	mov	r1, fp
 8003082:	eb63 0901 	sbc.w	r9, r3, r1
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800309a:	4690      	mov	r8, r2
 800309c:	4699      	mov	r9, r3
 800309e:	4623      	mov	r3, r4
 80030a0:	eb18 0303 	adds.w	r3, r8, r3
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	462b      	mov	r3, r5
 80030a8:	eb49 0303 	adc.w	r3, r9, r3
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ba:	4629      	mov	r1, r5
 80030bc:	024b      	lsls	r3, r1, #9
 80030be:	4621      	mov	r1, r4
 80030c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c4:	4621      	mov	r1, r4
 80030c6:	024a      	lsls	r2, r1, #9
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ce:	2200      	movs	r2, #0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d8:	f7fd f93a 	bl	8000350 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e4:	e058      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e6:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	2200      	movs	r2, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	4611      	mov	r1, r2
 80030f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	2300      	movs	r3, #0
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
 80030fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	f04f 0000 	mov.w	r0, #0
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	0159      	lsls	r1, r3, #5
 800310e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003112:	0150      	lsls	r0, r2, #5
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4641      	mov	r1, r8
 800311a:	ebb2 0a01 	subs.w	sl, r2, r1
 800311e:	4649      	mov	r1, r9
 8003120:	eb63 0b01 	sbc.w	fp, r3, r1
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003130:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003134:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003138:	ebb2 040a 	subs.w	r4, r2, sl
 800313c:	eb63 050b 	sbc.w	r5, r3, fp
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	00eb      	lsls	r3, r5, #3
 800314a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314e:	00e2      	lsls	r2, r4, #3
 8003150:	4614      	mov	r4, r2
 8003152:	461d      	mov	r5, r3
 8003154:	4643      	mov	r3, r8
 8003156:	18e3      	adds	r3, r4, r3
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	464b      	mov	r3, r9
 800315c:	eb45 0303 	adc.w	r3, r5, r3
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316e:	4629      	mov	r1, r5
 8003170:	028b      	lsls	r3, r1, #10
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003178:	4621      	mov	r1, r4
 800317a:	028a      	lsls	r2, r1, #10
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003182:	2200      	movs	r2, #0
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	61fa      	str	r2, [r7, #28]
 8003188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800318c:	f7fd f8e0 	bl	8000350 <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4613      	mov	r3, r2
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	3301      	adds	r3, #1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b2:	e002      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetSysClockFreq+0x204>)
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3750      	adds	r7, #80	; 0x50
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	007a1200 	.word	0x007a1200

080031d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031f0:	f7ff fff0 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	08015a14 	.word	0x08015a14

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003218:	f7ff ffdc 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0b5b      	lsrs	r3, r3, #13
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4903      	ldr	r1, [pc, #12]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	08015a14 	.word	0x08015a14

0800323c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	220f      	movs	r2, #15
 800324a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <HAL_RCC_GetClockConfig+0x60>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	40023c00 	.word	0x40023c00

080032a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e041      	b.n	8003336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f839 	bl	800333e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 f9b2 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d001      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e044      	b.n	80033f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <HAL_TIM_Base_Start_IT+0xb0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d018      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d013      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_TIM_Base_Start_IT+0xb4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_TIM_Base_Start_IT+0xb8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a17      	ldr	r2, [pc, #92]	; (8003410 <HAL_TIM_Base_Start_IT+0xbc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_TIM_Base_Start_IT+0xc0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d111      	bne.n	80033e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d010      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	e007      	b.n	80033f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40014000 	.word	0x40014000

08003418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0202 	mvn.w	r2, #2
 800344c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8d2 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8c4 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8d5 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0204 	mvn.w	r2, #4
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8ac 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f89e 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8af 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d020      	beq.n	8003514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0208 	mvn.w	r2, #8
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2204      	movs	r2, #4
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f886 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f878 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f889 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2208      	movs	r2, #8
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f860 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f852 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f863 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fe26 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8e6 	bl	8003774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f834 	bl	8003634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0220 	mvn.w	r2, #32
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8b8 	bl	8003760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3a      	ldr	r2, [pc, #232]	; (8003744 <TIM_Base_SetConfig+0xfc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00f      	beq.n	8003680 <TIM_Base_SetConfig+0x38>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003666:	d00b      	beq.n	8003680 <TIM_Base_SetConfig+0x38>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a37      	ldr	r2, [pc, #220]	; (8003748 <TIM_Base_SetConfig+0x100>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <TIM_Base_SetConfig+0x38>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a36      	ldr	r2, [pc, #216]	; (800374c <TIM_Base_SetConfig+0x104>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0x38>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a35      	ldr	r2, [pc, #212]	; (8003750 <TIM_Base_SetConfig+0x108>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d108      	bne.n	8003692 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <TIM_Base_SetConfig+0xfc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01b      	beq.n	80036d2 <TIM_Base_SetConfig+0x8a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d017      	beq.n	80036d2 <TIM_Base_SetConfig+0x8a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <TIM_Base_SetConfig+0x100>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <TIM_Base_SetConfig+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <TIM_Base_SetConfig+0x104>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00f      	beq.n	80036d2 <TIM_Base_SetConfig+0x8a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a26      	ldr	r2, [pc, #152]	; (8003750 <TIM_Base_SetConfig+0x108>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00b      	beq.n	80036d2 <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <TIM_Base_SetConfig+0x10c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a24      	ldr	r2, [pc, #144]	; (8003758 <TIM_Base_SetConfig+0x110>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a23      	ldr	r2, [pc, #140]	; (800375c <TIM_Base_SetConfig+0x114>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d108      	bne.n	80036e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <TIM_Base_SetConfig+0xfc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d103      	bne.n	8003718 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f023 0201 	bic.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]
  }
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800

08003760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e042      	b.n	8003820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd feb6 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 ffc9 	bl	8004764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b20      	cmp	r3, #32
 8003840:	d156      	bne.n	80038f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_UART_Transmit_DMA+0x26>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e04f      	b.n	80038f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2221      	movs	r2, #33	; 0x21
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <HAL_UART_Transmit_DMA+0xd4>)
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	4a20      	ldr	r2, [pc, #128]	; (8003900 <HAL_UART_Transmit_DMA+0xd8>)
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_UART_Transmit_DMA+0xdc>)
 8003888:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	2200      	movs	r2, #0
 8003890:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3304      	adds	r3, #4
 80038a6:	461a      	mov	r2, r3
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	f7fe fb23 	bl	8001ef4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3314      	adds	r3, #20
 80038be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	617b      	str	r3, [r7, #20]
   return(result);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d8:	627a      	str	r2, [r7, #36]	; 0x24
 80038da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e5      	bne.n	80038b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3730      	adds	r7, #48	; 0x30
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	08003ff1 	.word	0x08003ff1
 8003900:	0800408b 	.word	0x0800408b
 8003904:	0800420f 	.word	0x0800420f

08003908 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d112      	bne.n	8003948 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_Receive_DMA+0x26>
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00b      	b.n	800394a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	461a      	mov	r2, r3
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fcb0 	bl	80042a4 <UART_Start_Receive_DMA>
 8003944:	4603      	mov	r3, r0
 8003946:	e000      	b.n	800394a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b090      	sub	sp, #64	; 0x40
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b21      	cmp	r3, #33	; 0x21
 800397e:	d128      	bne.n	80039d2 <HAL_UART_DMAStop+0x80>
 8003980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d025      	beq.n	80039d2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3314      	adds	r3, #20
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	623b      	str	r3, [r7, #32]
   return(result);
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3314      	adds	r3, #20
 80039a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a6:	633a      	str	r2, [r7, #48]	; 0x30
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe faec 	bl	8001fa4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fd03 	bl	80043d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b22      	cmp	r3, #34	; 0x22
 80039f2:	d128      	bne.n	8003a46 <HAL_UART_DMAStop+0xf4>
 80039f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d025      	beq.n	8003a46 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a1a:	61fa      	str	r2, [r7, #28]
 8003a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	617b      	str	r3, [r7, #20]
   return(result);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fab2 	bl	8001fa4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fcf1 	bl	8004428 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3740      	adds	r7, #64	; 0x40
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0ba      	sub	sp, #232	; 0xe8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fd99 	bl	80045e6 <UART_Receive_IT>
      return;
 8003ab4:	e25b      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80de 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80d1 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d011      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 81f2 	beq.w	8003f64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fd24 	bl	80045e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_UART_IRQHandler+0x17a>
 8003bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d04f      	beq.n	8003c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fc2c 	bl	8004428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d141      	bne.n	8003c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1d9      	bne.n	8003bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	4a7e      	ldr	r2, [pc, #504]	; (8003e30 <HAL_UART_IRQHandler+0x3e0>)
 8003c38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fa20 	bl	8002084 <HAL_DMA_Abort_IT>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c54:	4610      	mov	r0, r2
 8003c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e00e      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9b2 	bl	8003fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	e00a      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9ae 	bl	8003fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	e006      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f9aa 	bl	8003fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c76:	e175      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	bf00      	nop
    return;
 8003c7a:	e173      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 814f 	bne.w	8003f24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8148 	beq.w	8003f24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8141 	beq.w	8003f24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	f040 80b6 	bne.w	8003e34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8145 	beq.w	8003f68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	f080 813e 	bcs.w	8003f68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfe:	f000 8088 	beq.w	8003e12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1d9      	bne.n	8003d02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e1      	bne.n	8003d4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003db0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003db4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003df4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe f8c9 	bl	8001fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f8d5 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e2e:	e09b      	b.n	8003f68 <HAL_UART_IRQHandler+0x518>
 8003e30:	080044ef 	.word	0x080044ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 808e 	beq.w	8003f6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8089 	beq.w	8003f6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e3      	bne.n	8003e5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3314      	adds	r3, #20
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e3      	bne.n	8003e92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0310 	bic.w	r3, r3, #16
 8003eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003efc:	61fa      	str	r2, [r7, #28]
 8003efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	69b9      	ldr	r1, [r7, #24]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	617b      	str	r3, [r7, #20]
   return(result);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e3      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f85b 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f22:	e023      	b.n	8003f6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_UART_IRQHandler+0x4f4>
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 faea 	bl	8004516 <UART_Transmit_IT>
    return;
 8003f42:	e014      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <HAL_UART_IRQHandler+0x51e>
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fb2a 	bl	80045b6 <UART_EndTransmit_IT>
    return;
 8003f62:	e004      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f64:	bf00      	nop
 8003f66:	e002      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f68:	bf00      	nop
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f6c:	bf00      	nop
  }
}
 8003f6e:	37e8      	adds	r7, #232	; 0xe8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b090      	sub	sp, #64	; 0x40
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d137      	bne.n	800407c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	2200      	movs	r2, #0
 8004010:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	623b      	str	r3, [r7, #32]
   return(result);
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3314      	adds	r3, #20
 8004030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004032:	633a      	str	r2, [r7, #48]	; 0x30
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	60fb      	str	r3, [r7, #12]
   return(result);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	617b      	str	r3, [r7, #20]
   return(result);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800407a:	e002      	b.n	8004082 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800407c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800407e:	f7ff ff79 	bl	8003f74 <HAL_UART_TxCpltCallback>
}
 8004082:	bf00      	nop
 8004084:	3740      	adds	r7, #64	; 0x40
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ff75 	bl	8003f88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b09c      	sub	sp, #112	; 0x70
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d172      	bne.n	80041a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	2200      	movs	r2, #0
 80040c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040de:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80040ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	667b      	str	r3, [r7, #100]	; 0x64
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800411c:	647a      	str	r2, [r7, #68]	; 0x44
 800411e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800412a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	623b      	str	r3, [r7, #32]
   return(result);
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004146:	663b      	str	r3, [r7, #96]	; 0x60
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004150:	633a      	str	r2, [r7, #48]	; 0x30
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2b01      	cmp	r3, #1
 8004172:	d119      	bne.n	80041a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60fb      	str	r3, [r7, #12]
   return(result);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004194:	61fa      	str	r2, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69b9      	ldr	r1, [r7, #24]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	617b      	str	r3, [r7, #20]
   return(result);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041aa:	2200      	movs	r2, #0
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d106      	bne.n	80041c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ba:	4619      	mov	r1, r3
 80041bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041be:	f7ff ff0b 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041c2:	e002      	b.n	80041ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80041c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041c6:	f7ff fee9 	bl	8003f9c <HAL_UART_RxCpltCallback>
}
 80041ca:	bf00      	nop
 80041cc:	3770      	adds	r7, #112	; 0x70
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d108      	bne.n	8004200 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff feed 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041fe:	e002      	b.n	8004206 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fed5 	bl	8003fb0 <HAL_UART_RxHalfCpltCallback>
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b80      	cmp	r3, #128	; 0x80
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b21      	cmp	r3, #33	; 0x21
 8004240:	d108      	bne.n	8004254 <UART_DMAError+0x46>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800424e:	68b8      	ldr	r0, [r7, #8]
 8004250:	f000 f8c2 	bl	80043d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b22      	cmp	r3, #34	; 0x22
 8004274:	d108      	bne.n	8004288 <UART_DMAError+0x7a>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2200      	movs	r2, #0
 8004280:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004282:	68b8      	ldr	r0, [r7, #8]
 8004284:	f000 f8d0 	bl	8004428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f043 0210 	orr.w	r2, r3, #16
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004294:	68b8      	ldr	r0, [r7, #8]
 8004296:	f7ff fe95 	bl	8003fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b098      	sub	sp, #96	; 0x60
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2222      	movs	r2, #34	; 0x22
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	4a3e      	ldr	r2, [pc, #248]	; (80043cc <UART_Start_Receive_DMA+0x128>)
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	4a3d      	ldr	r2, [pc, #244]	; (80043d0 <UART_Start_Receive_DMA+0x12c>)
 80042da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	4a3c      	ldr	r2, [pc, #240]	; (80043d4 <UART_Start_Receive_DMA+0x130>)
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	2200      	movs	r2, #0
 80042ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	f7fd fdf6 	bl	8001ef4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d019      	beq.n	800435a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	65bb      	str	r3, [r7, #88]	; 0x58
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004346:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800434c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	657b      	str	r3, [r7, #84]	; 0x54
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800437a:	63ba      	str	r2, [r7, #56]	; 0x38
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	617b      	str	r3, [r7, #20]
   return(result);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a4:	653b      	str	r3, [r7, #80]	; 0x50
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043ae:	627a      	str	r2, [r7, #36]	; 0x24
 80043b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6a39      	ldr	r1, [r7, #32]
 80043b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3760      	adds	r7, #96	; 0x60
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	080040a7 	.word	0x080040a7
 80043d0:	080041d3 	.word	0x080041d3
 80043d4:	0800420f 	.word	0x0800420f

080043d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	61ba      	str	r2, [r7, #24]
 8004402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6979      	ldr	r1, [r7, #20]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	613b      	str	r3, [r7, #16]
   return(result);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800441c:	bf00      	nop
 800441e:	3724      	adds	r7, #36	; 0x24
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b095      	sub	sp, #84	; 0x54
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004450:	643a      	str	r2, [r7, #64]	; 0x40
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3314      	adds	r3, #20
 800446a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	61fb      	str	r3, [r7, #28]
   return(result);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004484:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800448a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e5      	bne.n	8004464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d119      	bne.n	80044d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f023 0310 	bic.w	r3, r3, #16
 80044b6:	647b      	str	r3, [r7, #68]	; 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c0:	61ba      	str	r2, [r7, #24]
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	613b      	str	r3, [r7, #16]
   return(result);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044e2:	bf00      	nop
 80044e4:	3754      	adds	r7, #84	; 0x54
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fd5b 	bl	8003fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b21      	cmp	r3, #33	; 0x21
 8004528:	d13e      	bne.n	80045a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	d114      	bne.n	800455e <UART_Transmit_IT+0x48>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d110      	bne.n	800455e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004550:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	1c9a      	adds	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	621a      	str	r2, [r3, #32]
 800455c:	e008      	b.n	8004570 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6211      	str	r1, [r2, #32]
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4619      	mov	r1, r3
 800457e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10f      	bne.n	80045a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004592:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff fccc 	bl	8003f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b08c      	sub	sp, #48	; 0x30
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b22      	cmp	r3, #34	; 0x22
 80045f8:	f040 80ae 	bne.w	8004758 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d117      	bne.n	8004636 <UART_Receive_IT+0x50>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d113      	bne.n	8004636 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	b29a      	uxth	r2, r3
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
 8004634:	e026      	b.n	8004684 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d007      	beq.n	800465a <UART_Receive_IT+0x74>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <UART_Receive_IT+0x82>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e008      	b.n	800467a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004674:	b2da      	uxtb	r2, r3
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29b      	uxth	r3, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4619      	mov	r1, r3
 8004692:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004694:	2b00      	cmp	r3, #0
 8004696:	d15d      	bne.n	8004754 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0220 	bic.w	r2, r2, #32
 80046a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d135      	bne.n	800474a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	613b      	str	r3, [r7, #16]
   return(result);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	623a      	str	r2, [r7, #32]
 8004706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	69f9      	ldr	r1, [r7, #28]
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	61bb      	str	r3, [r7, #24]
   return(result);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b10      	cmp	r3, #16
 8004724:	d10a      	bne.n	800473c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fc48 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
 8004748:	e002      	b.n	8004750 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fc26 	bl	8003f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e002      	b.n	800475a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3730      	adds	r7, #48	; 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004768:	b0c0      	sub	sp, #256	; 0x100
 800476a:	af00      	add	r7, sp, #0
 800476c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	68d9      	ldr	r1, [r3, #12]
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	ea40 0301 	orr.w	r3, r0, r1
 800478c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	431a      	orrs	r2, r3
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047bc:	f021 010c 	bic.w	r1, r1, #12
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ca:	430b      	orrs	r3, r1
 80047cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	6999      	ldr	r1, [r3, #24]
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	ea40 0301 	orr.w	r3, r0, r1
 80047ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b8f      	ldr	r3, [pc, #572]	; (8004a30 <UART_SetConfig+0x2cc>)
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d005      	beq.n	8004804 <UART_SetConfig+0xa0>
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b8d      	ldr	r3, [pc, #564]	; (8004a34 <UART_SetConfig+0x2d0>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d104      	bne.n	800480e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7fe fd06 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8004808:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800480c:	e003      	b.n	8004816 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800480e:	f7fe fced 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8004812:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004820:	f040 810c 	bne.w	8004a3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800482e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004832:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	1891      	adds	r1, r2, r2
 800483c:	65b9      	str	r1, [r7, #88]	; 0x58
 800483e:	415b      	adcs	r3, r3
 8004840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004846:	4621      	mov	r1, r4
 8004848:	eb12 0801 	adds.w	r8, r2, r1
 800484c:	4629      	mov	r1, r5
 800484e:	eb43 0901 	adc.w	r9, r3, r1
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800485e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004866:	4690      	mov	r8, r2
 8004868:	4699      	mov	r9, r3
 800486a:	4623      	mov	r3, r4
 800486c:	eb18 0303 	adds.w	r3, r8, r3
 8004870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004874:	462b      	mov	r3, r5
 8004876:	eb49 0303 	adc.w	r3, r9, r3
 800487a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800488a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800488e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004892:	460b      	mov	r3, r1
 8004894:	18db      	adds	r3, r3, r3
 8004896:	653b      	str	r3, [r7, #80]	; 0x50
 8004898:	4613      	mov	r3, r2
 800489a:	eb42 0303 	adc.w	r3, r2, r3
 800489e:	657b      	str	r3, [r7, #84]	; 0x54
 80048a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048a8:	f7fb fd52 	bl	8000350 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4b61      	ldr	r3, [pc, #388]	; (8004a38 <UART_SetConfig+0x2d4>)
 80048b2:	fba3 2302 	umull	r2, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	011c      	lsls	r4, r3, #4
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048d4:	415b      	adcs	r3, r3
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048dc:	4641      	mov	r1, r8
 80048de:	eb12 0a01 	adds.w	sl, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb43 0b01 	adc.w	fp, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048fc:	4692      	mov	sl, r2
 80048fe:	469b      	mov	fp, r3
 8004900:	4643      	mov	r3, r8
 8004902:	eb1a 0303 	adds.w	r3, sl, r3
 8004906:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800490a:	464b      	mov	r3, r9
 800490c:	eb4b 0303 	adc.w	r3, fp, r3
 8004910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004920:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004924:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004928:	460b      	mov	r3, r1
 800492a:	18db      	adds	r3, r3, r3
 800492c:	643b      	str	r3, [r7, #64]	; 0x40
 800492e:	4613      	mov	r3, r2
 8004930:	eb42 0303 	adc.w	r3, r2, r3
 8004934:	647b      	str	r3, [r7, #68]	; 0x44
 8004936:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800493a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800493e:	f7fb fd07 	bl	8000350 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4611      	mov	r1, r2
 8004948:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <UART_SetConfig+0x2d4>)
 800494a:	fba3 2301 	umull	r2, r3, r3, r1
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2264      	movs	r2, #100	; 0x64
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	1acb      	subs	r3, r1, r3
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800495e:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <UART_SetConfig+0x2d4>)
 8004960:	fba3 2302 	umull	r2, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800496c:	441c      	add	r4, r3
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004978:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800497c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	1891      	adds	r1, r2, r2
 8004986:	63b9      	str	r1, [r7, #56]	; 0x38
 8004988:	415b      	adcs	r3, r3
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004990:	4641      	mov	r1, r8
 8004992:	1851      	adds	r1, r2, r1
 8004994:	6339      	str	r1, [r7, #48]	; 0x30
 8004996:	4649      	mov	r1, r9
 8004998:	414b      	adcs	r3, r1
 800499a:	637b      	str	r3, [r7, #52]	; 0x34
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049a8:	4659      	mov	r1, fp
 80049aa:	00cb      	lsls	r3, r1, #3
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b2:	4651      	mov	r1, sl
 80049b4:	00ca      	lsls	r2, r1, #3
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	4642      	mov	r2, r8
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049c4:	464b      	mov	r3, r9
 80049c6:	460a      	mov	r2, r1
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049e4:	460b      	mov	r3, r1
 80049e6:	18db      	adds	r3, r3, r3
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ea:	4613      	mov	r3, r2
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049fa:	f7fb fca9 	bl	8000350 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <UART_SetConfig+0x2d4>)
 8004a04:	fba3 1302 	umull	r1, r3, r3, r2
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	2164      	movs	r1, #100	; 0x64
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	3332      	adds	r3, #50	; 0x32
 8004a16:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <UART_SetConfig+0x2d4>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f003 0207 	and.w	r2, r3, #7
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4422      	add	r2, r4
 8004a2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a2c:	e106      	b.n	8004c3c <UART_SetConfig+0x4d8>
 8004a2e:	bf00      	nop
 8004a30:	40011000 	.word	0x40011000
 8004a34:	40011400 	.word	0x40011400
 8004a38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	1891      	adds	r1, r2, r2
 8004a54:	6239      	str	r1, [r7, #32]
 8004a56:	415b      	adcs	r3, r3
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a5e:	4641      	mov	r1, r8
 8004a60:	1854      	adds	r4, r2, r1
 8004a62:	4649      	mov	r1, r9
 8004a64:	eb43 0501 	adc.w	r5, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	00eb      	lsls	r3, r5, #3
 8004a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a76:	00e2      	lsls	r2, r4, #3
 8004a78:	4614      	mov	r4, r2
 8004a7a:	461d      	mov	r5, r3
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	18e3      	adds	r3, r4, r3
 8004a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a84:	464b      	mov	r3, r9
 8004a86:	eb45 0303 	adc.w	r3, r5, r3
 8004a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aaa:	4629      	mov	r1, r5
 8004aac:	008b      	lsls	r3, r1, #2
 8004aae:	4621      	mov	r1, r4
 8004ab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	008a      	lsls	r2, r1, #2
 8004ab8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004abc:	f7fb fc48 	bl	8000350 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4b60      	ldr	r3, [pc, #384]	; (8004c48 <UART_SetConfig+0x4e4>)
 8004ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	011c      	lsls	r4, r3, #4
 8004ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ad8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004adc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	1891      	adds	r1, r2, r2
 8004ae6:	61b9      	str	r1, [r7, #24]
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af0:	4641      	mov	r1, r8
 8004af2:	1851      	adds	r1, r2, r1
 8004af4:	6139      	str	r1, [r7, #16]
 8004af6:	4649      	mov	r1, r9
 8004af8:	414b      	adcs	r3, r1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	00cb      	lsls	r3, r1, #3
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b12:	4651      	mov	r1, sl
 8004b14:	00ca      	lsls	r2, r1, #3
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b24:	464b      	mov	r3, r9
 8004b26:	460a      	mov	r2, r1
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b48:	4649      	mov	r1, r9
 8004b4a:	008b      	lsls	r3, r1, #2
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b52:	4641      	mov	r1, r8
 8004b54:	008a      	lsls	r2, r1, #2
 8004b56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b5a:	f7fb fbf9 	bl	8000350 <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <UART_SetConfig+0x4e4>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	; 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1acb      	subs	r3, r1, r3
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	3332      	adds	r3, #50	; 0x32
 8004b78:	4a33      	ldr	r2, [pc, #204]	; (8004c48 <UART_SetConfig+0x4e4>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b84:	441c      	add	r4, r3
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b8e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	1891      	adds	r1, r2, r2
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	415b      	adcs	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	1851      	adds	r1, r2, r1
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	4649      	mov	r1, r9
 8004bac:	414b      	adcs	r3, r1
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	00cb      	lsls	r3, r1, #3
 8004bc0:	4651      	mov	r1, sl
 8004bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bc6:	4651      	mov	r1, sl
 8004bc8:	00ca      	lsls	r2, r1, #3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	460a      	mov	r2, r1
 8004bda:	eb42 0303 	adc.w	r3, r2, r3
 8004bde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bea:	667a      	str	r2, [r7, #100]	; 0x64
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	008b      	lsls	r3, r1, #2
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c02:	4641      	mov	r1, r8
 8004c04:	008a      	lsls	r2, r1, #2
 8004c06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c0a:	f7fb fba1 	bl	8000350 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <UART_SetConfig+0x4e4>)
 8004c14:	fba3 1302 	umull	r1, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2164      	movs	r1, #100	; 0x64
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <UART_SetConfig+0x4e4>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4422      	add	r2, r4
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c48:	51eb851f 	.word	0x51eb851f

08004c4c <__NVIC_SetPriority>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	db0a      	blt.n	8004c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	490c      	ldr	r1, [pc, #48]	; (8004c98 <__NVIC_SetPriority+0x4c>)
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	0112      	lsls	r2, r2, #4
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	440b      	add	r3, r1
 8004c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c74:	e00a      	b.n	8004c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4908      	ldr	r1, [pc, #32]	; (8004c9c <__NVIC_SetPriority+0x50>)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	3b04      	subs	r3, #4
 8004c84:	0112      	lsls	r2, r2, #4
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	440b      	add	r3, r1
 8004c8a:	761a      	strb	r2, [r3, #24]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	e000e100 	.word	0xe000e100
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <SysTick_Handler+0x1c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ca8:	f001 fd24 	bl	80066f4 <xTaskGetSchedulerState>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d001      	beq.n	8004cb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004cb2:	f002 fb09 	bl	80072c8 <xPortSysTickHandler>
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	e000e010 	.word	0xe000e010

08004cc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	f06f 0004 	mvn.w	r0, #4
 8004cca:	f7ff ffbf 	bl	8004c4c <__NVIC_SetPriority>
#endif
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cda:	f3ef 8305 	mrs	r3, IPSR
 8004cde:	603b      	str	r3, [r7, #0]
  return(result);
 8004ce0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ce6:	f06f 0305 	mvn.w	r3, #5
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	e00c      	b.n	8004d08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <osKernelInitialize+0x44>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <osKernelInitialize+0x44>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e002      	b.n	8004d08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d08:	687b      	ldr	r3, [r7, #4]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20009560 	.word	0x20009560

08004d1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d22:	f3ef 8305 	mrs	r3, IPSR
 8004d26:	603b      	str	r3, [r7, #0]
  return(result);
 8004d28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d2e:	f06f 0305 	mvn.w	r3, #5
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	e010      	b.n	8004d58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <osKernelStart+0x48>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d109      	bne.n	8004d52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d3e:	f7ff ffbf 	bl	8004cc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <osKernelStart+0x48>)
 8004d44:	2202      	movs	r2, #2
 8004d46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d48:	f001 f866 	bl	8005e18 <vTaskStartScheduler>
      stat = osOK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	e002      	b.n	8004d58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d58:	687b      	ldr	r3, [r7, #4]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20009560 	.word	0x20009560

08004d68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08e      	sub	sp, #56	; 0x38
 8004d6c:	af04      	add	r7, sp, #16
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d78:	f3ef 8305 	mrs	r3, IPSR
 8004d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d17e      	bne.n	8004e82 <osThreadNew+0x11a>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d07b      	beq.n	8004e82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d8e:	2318      	movs	r3, #24
 8004d90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d045      	beq.n	8004e2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <osThreadNew+0x48>
        name = attr->name;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <osThreadNew+0x6e>
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b38      	cmp	r3, #56	; 0x38
 8004dc8:	d805      	bhi.n	8004dd6 <osThreadNew+0x6e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <osThreadNew+0x72>
        return (NULL);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e054      	b.n	8004e84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00e      	beq.n	8004e10 <osThreadNew+0xa8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b5b      	cmp	r3, #91	; 0x5b
 8004df8:	d90a      	bls.n	8004e10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d006      	beq.n	8004e10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <osThreadNew+0xa8>
        mem = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	e010      	b.n	8004e32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10c      	bne.n	8004e32 <osThreadNew+0xca>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d108      	bne.n	8004e32 <osThreadNew+0xca>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <osThreadNew+0xca>
          mem = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e001      	b.n	8004e32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d110      	bne.n	8004e5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e40:	9202      	str	r2, [sp, #8]
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fe0c 	bl	8005a6c <xTaskCreateStatic>
 8004e54:	4603      	mov	r3, r0
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e013      	b.n	8004e82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d110      	bne.n	8004e82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fe57 	bl	8005b26 <xTaskCreate>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d001      	beq.n	8004e82 <osThreadNew+0x11a>
            hTask = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e82:	693b      	ldr	r3, [r7, #16]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3728      	adds	r7, #40	; 0x28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e94:	f3ef 8305 	mrs	r3, IPSR
 8004e98:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <osDelay+0x1c>
    stat = osErrorISR;
 8004ea0:	f06f 0305 	mvn.w	r3, #5
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e007      	b.n	8004eb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 ff7c 	bl	8005db0 <vTaskDelay>
    }
  }

  return (stat);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a07      	ldr	r2, [pc, #28]	; (8004ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a06      	ldr	r2, [pc, #24]	; (8004ef4 <vApplicationGetIdleTaskMemory+0x30>)
 8004eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20009564 	.word	0x20009564
 8004ef4:	200095c0 	.word	0x200095c0

08004ef8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a07      	ldr	r2, [pc, #28]	; (8004f24 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4a06      	ldr	r2, [pc, #24]	; (8004f28 <vApplicationGetTimerTaskMemory+0x30>)
 8004f0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f16:	601a      	str	r2, [r3, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	200097c0 	.word	0x200097c0
 8004f28:	2000981c 	.word	0x2000981c

08004f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0208 	add.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f103 0208 	add.w	r2, r3, #8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f103 0208 	add.w	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe4:	d103      	bne.n	8004fee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e00c      	b.n	8005008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e002      	b.n	8004ffc <vListInsert+0x2e>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	d2f6      	bcs.n	8004ff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6892      	ldr	r2, [r2, #8]
 8005056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6852      	ldr	r2, [r2, #4]
 8005060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	429a      	cmp	r2, r3
 800506a:	d103      	bne.n	8005074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xQueueGenericReset+0x2a>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60bb      	str	r3, [r7, #8]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050be:	f002 f871 	bl	80071a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	441a      	add	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	3b01      	subs	r3, #1
 80050f0:	68f9      	ldr	r1, [r7, #12]
 80050f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	441a      	add	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d114      	bne.n	800513e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3310      	adds	r3, #16
 8005120:	4618      	mov	r0, r3
 8005122:	f001 f903 	bl	800632c <xTaskRemoveFromEventList>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d012      	beq.n	8005152 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <xQueueGenericReset+0xcc>)
 800512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	e009      	b.n	8005152 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3310      	adds	r3, #16
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fef2 	bl	8004f2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3324      	adds	r3, #36	; 0x24
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff feed 	bl	8004f2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005152:	f002 f857 	bl	8007204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005156:	2301      	movs	r3, #1
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08e      	sub	sp, #56	; 0x38
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <xQueueGenericCreateStatic+0x52>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <xQueueGenericCreateStatic+0x56>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <xQueueGenericCreateStatic+0x58>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	623b      	str	r3, [r7, #32]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <xQueueGenericCreateStatic+0x7e>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <xQueueGenericCreateStatic+0x82>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <xQueueGenericCreateStatic+0x84>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	61fb      	str	r3, [r7, #28]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005202:	2350      	movs	r3, #80	; 0x50
 8005204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b50      	cmp	r3, #80	; 0x50
 800520a:	d00a      	beq.n	8005222 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	61bb      	str	r3, [r7, #24]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005222:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00d      	beq.n	800524a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005236:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f805 	bl	8005254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800524c:	4618      	mov	r0, r3
 800524e:	3730      	adds	r7, #48	; 0x30
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	e002      	b.n	8005276 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005282:	2101      	movs	r1, #1
 8005284:	69b8      	ldr	r0, [r7, #24]
 8005286:	f7ff ff05 	bl	8005094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052aa:	2300      	movs	r3, #0
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <xQueueGenericSend+0x32>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d103      	bne.n	80052dc <xQueueGenericSend+0x40>
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <xQueueGenericSend+0x44>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <xQueueGenericSend+0x46>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <xQueueGenericSend+0x60>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d103      	bne.n	800530a <xQueueGenericSend+0x6e>
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <xQueueGenericSend+0x72>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueGenericSend+0x74>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <xQueueGenericSend+0x8e>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	623b      	str	r3, [r7, #32]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800532a:	f001 f9e3 	bl	80066f4 <xTaskGetSchedulerState>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <xQueueGenericSend+0x9e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <xQueueGenericSend+0xa2>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <xQueueGenericSend+0xa4>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <xQueueGenericSend+0xbe>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	61fb      	str	r3, [r7, #28]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800535a:	f001 ff23 	bl	80071a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	429a      	cmp	r2, r3
 8005368:	d302      	bcc.n	8005370 <xQueueGenericSend+0xd4>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d129      	bne.n	80053c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005376:	f000 fa0b 	bl	8005790 <prvCopyDataToQueue>
 800537a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d010      	beq.n	80053a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	4618      	mov	r0, r3
 800538a:	f000 ffcf 	bl	800632c <xTaskRemoveFromEventList>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005394:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <xQueueGenericSend+0x1f8>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	e00a      	b.n	80053bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053ac:	4b39      	ldr	r3, [pc, #228]	; (8005494 <xQueueGenericSend+0x1f8>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053bc:	f001 ff22 	bl	8007204 <vPortExitCritical>
				return pdPASS;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e063      	b.n	800548c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ca:	f001 ff1b 	bl	8007204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e05c      	b.n	800548c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053d8:	f107 0314 	add.w	r3, r7, #20
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 f82f 	bl	8006440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053e6:	f001 ff0d 	bl	8007204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ea:	f000 fd7b 	bl	8005ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ee:	f001 fed9 	bl	80071a4 <vPortEnterCritical>
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053f8:	b25b      	sxtb	r3, r3
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053fe:	d103      	bne.n	8005408 <xQueueGenericSend+0x16c>
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800540e:	b25b      	sxtb	r3, r3
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005414:	d103      	bne.n	800541e <xQueueGenericSend+0x182>
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800541e:	f001 fef1 	bl	8007204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005422:	1d3a      	adds	r2, r7, #4
 8005424:	f107 0314 	add.w	r3, r7, #20
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f81e 	bl	800646c <xTaskCheckForTimeOut>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d124      	bne.n	8005480 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005438:	f000 faa2 	bl	8005980 <prvIsQueueFull>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d018      	beq.n	8005474 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	3310      	adds	r3, #16
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f000 ff1e 	bl	800628c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005452:	f000 fa2d 	bl	80058b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005456:	f000 fd53 	bl	8005f00 <xTaskResumeAll>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	f47f af7c 	bne.w	800535a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <xQueueGenericSend+0x1f8>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	e772      	b.n	800535a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005476:	f000 fa1b 	bl	80058b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800547a:	f000 fd41 	bl	8005f00 <xTaskResumeAll>
 800547e:	e76c      	b.n	800535a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005482:	f000 fa15 	bl	80058b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005486:	f000 fd3b 	bl	8005f00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800548a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800548c:	4618      	mov	r0, r3
 800548e:	3738      	adds	r7, #56	; 0x38
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b090      	sub	sp, #64	; 0x40
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <xQueueGenericSendFromISR+0x3c>
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <xQueueGenericSendFromISR+0x40>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <xQueueGenericSendFromISR+0x42>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d103      	bne.n	8005502 <xQueueGenericSendFromISR+0x6a>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <xQueueGenericSendFromISR+0x6e>
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <xQueueGenericSendFromISR+0x70>
 8005506:	2300      	movs	r3, #0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	623b      	str	r3, [r7, #32]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005522:	f001 ff21 	bl	8007368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005526:	f3ef 8211 	mrs	r2, BASEPRI
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	61fa      	str	r2, [r7, #28]
 800553c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800553e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <xQueueGenericSendFromISR+0xbc>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d12f      	bne.n	80055b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800556a:	f000 f911 	bl	8005790 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800556e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005576:	d112      	bne.n	800559e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d016      	beq.n	80055ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	3324      	adds	r3, #36	; 0x24
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fed1 	bl	800632c <xTaskRemoveFromEventList>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00e      	beq.n	80055ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e007      	b.n	80055ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800559e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055a2:	3301      	adds	r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	b25a      	sxtb	r2, r3
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055ae:	2301      	movs	r3, #1
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80055b2:	e001      	b.n	80055b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3740      	adds	r7, #64	; 0x40
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	; 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <xQueueReceive+0x30>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	623b      	str	r3, [r7, #32]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <xQueueReceive+0x3e>
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <xQueueReceive+0x42>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <xQueueReceive+0x44>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xQueueReceive+0x5e>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	61fb      	str	r3, [r7, #28]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800562e:	f001 f861 	bl	80066f4 <xTaskGetSchedulerState>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <xQueueReceive+0x6e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <xQueueReceive+0x72>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <xQueueReceive+0x74>
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xQueueReceive+0x8e>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	61bb      	str	r3, [r7, #24]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800565e:	f001 fda1 	bl	80071a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01f      	beq.n	80056ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005672:	f000 f8f7 	bl	8005864 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00f      	beq.n	80056a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	3310      	adds	r3, #16
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fe4e 	bl	800632c <xTaskRemoveFromEventList>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005696:	4b3d      	ldr	r3, [pc, #244]	; (800578c <xQueueReceive+0x1bc>)
 8005698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056a6:	f001 fdad 	bl	8007204 <vPortExitCritical>
				return pdPASS;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e069      	b.n	8005782 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056b4:	f001 fda6 	bl	8007204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e062      	b.n	8005782 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056c2:	f107 0310 	add.w	r3, r7, #16
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 feba 	bl	8006440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056d0:	f001 fd98 	bl	8007204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056d4:	f000 fc06 	bl	8005ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056d8:	f001 fd64 	bl	80071a4 <vPortEnterCritical>
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e8:	d103      	bne.n	80056f2 <xQueueReceive+0x122>
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056fe:	d103      	bne.n	8005708 <xQueueReceive+0x138>
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005708:	f001 fd7c 	bl	8007204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800570c:	1d3a      	adds	r2, r7, #4
 800570e:	f107 0310 	add.w	r3, r7, #16
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fea9 	bl	800646c <xTaskCheckForTimeOut>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d123      	bne.n	8005768 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005722:	f000 f917 	bl	8005954 <prvIsQueueEmpty>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fda9 	bl	800628c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800573a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573c:	f000 f8b8 	bl	80058b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005740:	f000 fbde 	bl	8005f00 <xTaskResumeAll>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d189      	bne.n	800565e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <xQueueReceive+0x1bc>)
 800574c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	e780      	b.n	800565e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800575c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575e:	f000 f8a7 	bl	80058b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005762:	f000 fbcd 	bl	8005f00 <xTaskResumeAll>
 8005766:	e77a      	b.n	800565e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576a:	f000 f8a1 	bl	80058b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800576e:	f000 fbc7 	bl	8005f00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005774:	f000 f8ee 	bl	8005954 <prvIsQueueEmpty>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	f43f af6f 	beq.w	800565e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005782:	4618      	mov	r0, r3
 8005784:	3730      	adds	r7, #48	; 0x30
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10d      	bne.n	80057ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d14d      	bne.n	8005852 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 ffb8 	bl	8006730 <xTaskPriorityDisinherit>
 80057c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	e043      	b.n	8005852 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d119      	bne.n	8005804 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6858      	ldr	r0, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	461a      	mov	r2, r3
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	f00f f955 	bl	8014a8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	441a      	add	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d32b      	bcc.n	8005852 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	e026      	b.n	8005852 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68d8      	ldr	r0, [r3, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	461a      	mov	r2, r3
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	f00f f93b 	bl	8014a8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	425b      	negs	r3, r3
 800581e:	441a      	add	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d207      	bcs.n	8005840 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	425b      	negs	r3, r3
 800583a:	441a      	add	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d105      	bne.n	8005852 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3b01      	subs	r3, #1
 8005850:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800585a:	697b      	ldr	r3, [r7, #20]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d018      	beq.n	80058a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	441a      	add	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	d303      	bcc.n	8005898 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68d9      	ldr	r1, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	461a      	mov	r2, r3
 80058a2:	6838      	ldr	r0, [r7, #0]
 80058a4:	f00f f8f1 	bl	8014a8a <memcpy>
	}
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058b8:	f001 fc74 	bl	80071a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c4:	e011      	b.n	80058ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3324      	adds	r3, #36	; 0x24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fd2a 	bl	800632c <xTaskRemoveFromEventList>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058de:	f000 fe27 	bl	8006530 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dce9      	bgt.n	80058c6 <prvUnlockQueue+0x16>
 80058f2:	e000      	b.n	80058f6 <prvUnlockQueue+0x46>
					break;
 80058f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	22ff      	movs	r2, #255	; 0xff
 80058fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058fe:	f001 fc81 	bl	8007204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005902:	f001 fc4f 	bl	80071a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800590c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800590e:	e011      	b.n	8005934 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d012      	beq.n	800593e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3310      	adds	r3, #16
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fd05 	bl	800632c <xTaskRemoveFromEventList>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005928:	f000 fe02 	bl	8006530 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	3b01      	subs	r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005938:	2b00      	cmp	r3, #0
 800593a:	dce9      	bgt.n	8005910 <prvUnlockQueue+0x60>
 800593c:	e000      	b.n	8005940 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800593e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	22ff      	movs	r2, #255	; 0xff
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005948:	f001 fc5c 	bl	8007204 <vPortExitCritical>
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800595c:	f001 fc22 	bl	80071a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e001      	b.n	8005972 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005972:	f001 fc47 	bl	8007204 <vPortExitCritical>

	return xReturn;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005988:	f001 fc0c 	bl	80071a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005994:	429a      	cmp	r2, r3
 8005996:	d102      	bne.n	800599e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e001      	b.n	80059a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059a2:	f001 fc2f 	bl	8007204 <vPortExitCritical>

	return xReturn;
 80059a6:	68fb      	ldr	r3, [r7, #12]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e014      	b.n	80059ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059c0:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <vQueueAddToRegistry+0x50>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059cc:	490c      	ldr	r1, [pc, #48]	; (8005a00 <vQueueAddToRegistry+0x50>)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059d6:	4a0a      	ldr	r2, [pc, #40]	; (8005a00 <vQueueAddToRegistry+0x50>)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059e2:	e006      	b.n	80059f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b07      	cmp	r3, #7
 80059ee:	d9e7      	bls.n	80059c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20009c1c 	.word	0x20009c1c

08005a04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a14:	f001 fbc6 	bl	80071a4 <vPortEnterCritical>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a24:	d103      	bne.n	8005a2e <vQueueWaitForMessageRestricted+0x2a>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a34:	b25b      	sxtb	r3, r3
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3a:	d103      	bne.n	8005a44 <vQueueWaitForMessageRestricted+0x40>
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a44:	f001 fbde 	bl	8007204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fc3b 	bl	80062d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a5e:	6978      	ldr	r0, [r7, #20]
 8005a60:	f7ff ff26 	bl	80058b0 <prvUnlockQueue>
	}
 8005a64:	bf00      	nop
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	; 0x38
 8005a70:	af04      	add	r7, sp, #16
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	623b      	str	r3, [r7, #32]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	61fb      	str	r3, [r7, #28]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ab2:	235c      	movs	r3, #92	; 0x5c
 8005ab4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b5c      	cmp	r3, #92	; 0x5c
 8005aba:	d00a      	beq.n	8005ad2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	61bb      	str	r3, [r7, #24]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ad2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01e      	beq.n	8005b18 <xTaskCreateStatic+0xac>
 8005ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01b      	beq.n	8005b18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005af2:	2300      	movs	r3, #0
 8005af4:	9303      	str	r3, [sp, #12]
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	9302      	str	r3, [sp, #8]
 8005afa:	f107 0314 	add.w	r3, r7, #20
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f850 	bl	8005bb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b12:	f000 f8dd 	bl	8005cd0 <prvAddNewTaskToReadyList>
 8005b16:	e001      	b.n	8005b1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b1c:	697b      	ldr	r3, [r7, #20]
	}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3728      	adds	r7, #40	; 0x28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b08c      	sub	sp, #48	; 0x30
 8005b2a:	af04      	add	r7, sp, #16
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 fc54 	bl	80073e8 <pvPortMalloc>
 8005b40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00e      	beq.n	8005b66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b48:	205c      	movs	r0, #92	; 0x5c
 8005b4a:	f001 fc4d 	bl	80073e8 <pvPortMalloc>
 8005b4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b5c:	e005      	b.n	8005b6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f001 fd0e 	bl	8007580 <vPortFree>
 8005b64:	e001      	b.n	8005b6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d017      	beq.n	8005ba0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9303      	str	r3, [sp, #12]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	9302      	str	r3, [sp, #8]
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f80e 	bl	8005bb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b94:	69f8      	ldr	r0, [r7, #28]
 8005b96:	f000 f89b 	bl	8005cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e002      	b.n	8005ba6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ba4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	21a5      	movs	r1, #165	; 0xa5
 8005bca:	f00e fe95 	bl	80148f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f023 0307 	bic.w	r3, r3, #7
 8005be6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	617b      	str	r3, [r7, #20]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01f      	beq.n	8005c4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e012      	b.n	8005c3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	7819      	ldrb	r1, [r3, #0]
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	3334      	adds	r3, #52	; 0x34
 8005c24:	460a      	mov	r2, r1
 8005c26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b0f      	cmp	r3, #15
 8005c3e:	d9e9      	bls.n	8005c14 <prvInitialiseNewTask+0x64>
 8005c40:	e000      	b.n	8005c44 <prvInitialiseNewTask+0x94>
			{
				break;
 8005c42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c4c:	e003      	b.n	8005c56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	2b37      	cmp	r3, #55	; 0x37
 8005c5a:	d901      	bls.n	8005c60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c5c:	2337      	movs	r3, #55	; 0x37
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	2200      	movs	r2, #0
 8005c70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	3304      	adds	r3, #4
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff f978 	bl	8004f6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	3318      	adds	r3, #24
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff f973 	bl	8004f6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	69b8      	ldr	r0, [r7, #24]
 8005cb0:	f001 f94e 	bl	8006f50 <pxPortInitialiseStack>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cd8:	f001 fa64 	bl	80071a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cdc:	4b2d      	ldr	r3, [pc, #180]	; (8005d94 <prvAddNewTaskToReadyList+0xc4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	4a2c      	ldr	r2, [pc, #176]	; (8005d94 <prvAddNewTaskToReadyList+0xc4>)
 8005ce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ce6:	4b2c      	ldr	r3, [pc, #176]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cee:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cf4:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <prvAddNewTaskToReadyList+0xc4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d110      	bne.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cfc:	f000 fc3c 	bl	8006578 <prvInitialiseTaskLists>
 8005d00:	e00d      	b.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d02:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <prvAddNewTaskToReadyList+0xcc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d0a:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d802      	bhi.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d18:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d1e:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <prvAddNewTaskToReadyList+0xd0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <prvAddNewTaskToReadyList+0xd0>)
 8005d26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d28:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <prvAddNewTaskToReadyList+0xd0>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <prvAddNewTaskToReadyList+0xd4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d903      	bls.n	8005d44 <prvAddNewTaskToReadyList+0x74>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <prvAddNewTaskToReadyList+0xd4>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <prvAddNewTaskToReadyList+0xd8>)
 8005d52:	441a      	add	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7ff f913 	bl	8004f86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d60:	f001 fa50 	bl	8007204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <prvAddNewTaskToReadyList+0xcc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d207      	bcs.n	8005d8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <prvAddNewTaskToReadyList+0xdc>)
 8005d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000a130 	.word	0x2000a130
 8005d98:	20009c5c 	.word	0x20009c5c
 8005d9c:	2000a13c 	.word	0x2000a13c
 8005da0:	2000a14c 	.word	0x2000a14c
 8005da4:	2000a138 	.word	0x2000a138
 8005da8:	20009c60 	.word	0x20009c60
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dc2:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <vTaskDelay+0x60>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <vTaskDelay+0x30>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	60bb      	str	r3, [r7, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005de0:	f000 f880 	bl	8005ee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005de4:	2100      	movs	r1, #0
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fd10 	bl	800680c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dec:	f000 f888 	bl	8005f00 <xTaskResumeAll>
 8005df0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d107      	bne.n	8005e08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <vTaskDelay+0x64>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	2000a158 	.word	0x2000a158
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e26:	463a      	mov	r2, r7
 8005e28:	1d39      	adds	r1, r7, #4
 8005e2a:	f107 0308 	add.w	r3, r7, #8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff f848 	bl	8004ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	9202      	str	r2, [sp, #8]
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	460a      	mov	r2, r1
 8005e46:	4921      	ldr	r1, [pc, #132]	; (8005ecc <vTaskStartScheduler+0xb4>)
 8005e48:	4821      	ldr	r0, [pc, #132]	; (8005ed0 <vTaskStartScheduler+0xb8>)
 8005e4a:	f7ff fe0f 	bl	8005a6c <xTaskCreateStatic>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <vTaskStartScheduler+0xbc>)
 8005e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <vTaskStartScheduler+0xbc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e001      	b.n	8005e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d102      	bne.n	8005e72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e6c:	f000 fd22 	bl	80068b4 <xTimerCreateTimerTask>
 8005e70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d116      	bne.n	8005ea6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	613b      	str	r3, [r7, #16]
}
 8005e8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <vTaskStartScheduler+0xc0>)
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <vTaskStartScheduler+0xc4>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <vTaskStartScheduler+0xc8>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ea0:	f001 f8de 	bl	8007060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ea4:	e00e      	b.n	8005ec4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eac:	d10a      	bne.n	8005ec4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vTaskStartScheduler+0xaa>
}
 8005ec4:	bf00      	nop
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	080159ac 	.word	0x080159ac
 8005ed0:	08006549 	.word	0x08006549
 8005ed4:	2000a154 	.word	0x2000a154
 8005ed8:	2000a150 	.word	0x2000a150
 8005edc:	2000a13c 	.word	0x2000a13c
 8005ee0:	2000a134 	.word	0x2000a134

08005ee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <vTaskSuspendAll+0x18>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	4a03      	ldr	r2, [pc, #12]	; (8005efc <vTaskSuspendAll+0x18>)
 8005ef0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ef2:	bf00      	nop
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	2000a158 	.word	0x2000a158

08005f00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f0e:	4b42      	ldr	r3, [pc, #264]	; (8006018 <xTaskResumeAll+0x118>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <xTaskResumeAll+0x2c>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	603b      	str	r3, [r7, #0]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f2c:	f001 f93a 	bl	80071a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f30:	4b39      	ldr	r3, [pc, #228]	; (8006018 <xTaskResumeAll+0x118>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	4a38      	ldr	r2, [pc, #224]	; (8006018 <xTaskResumeAll+0x118>)
 8005f38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f3a:	4b37      	ldr	r3, [pc, #220]	; (8006018 <xTaskResumeAll+0x118>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d162      	bne.n	8006008 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f42:	4b36      	ldr	r3, [pc, #216]	; (800601c <xTaskResumeAll+0x11c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d05e      	beq.n	8006008 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f4a:	e02f      	b.n	8005fac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4c:	4b34      	ldr	r3, [pc, #208]	; (8006020 <xTaskResumeAll+0x120>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3318      	adds	r3, #24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff f871 	bl	8005040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f86c 	bl	8005040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	4b2d      	ldr	r3, [pc, #180]	; (8006024 <xTaskResumeAll+0x124>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d903      	bls.n	8005f7c <xTaskResumeAll+0x7c>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <xTaskResumeAll+0x124>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4a27      	ldr	r2, [pc, #156]	; (8006028 <xTaskResumeAll+0x128>)
 8005f8a:	441a      	add	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fe fff7 	bl	8004f86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4b23      	ldr	r3, [pc, #140]	; (800602c <xTaskResumeAll+0x12c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fa6:	4b22      	ldr	r3, [pc, #136]	; (8006030 <xTaskResumeAll+0x130>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <xTaskResumeAll+0x120>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1cb      	bne.n	8005f4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fba:	f000 fb7b 	bl	80066b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <xTaskResumeAll+0x134>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d010      	beq.n	8005fec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fca:	f000 f847 	bl	800605c <xTaskIncrementTick>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fd4:	4b16      	ldr	r3, [pc, #88]	; (8006030 <xTaskResumeAll+0x130>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f1      	bne.n	8005fca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <xTaskResumeAll+0x134>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <xTaskResumeAll+0x130>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d009      	beq.n	8006008 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <xTaskResumeAll+0x138>)
 8005ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006008:	f001 f8fc 	bl	8007204 <vPortExitCritical>

	return xAlreadyYielded;
 800600c:	68bb      	ldr	r3, [r7, #8]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	2000a158 	.word	0x2000a158
 800601c:	2000a130 	.word	0x2000a130
 8006020:	2000a0f0 	.word	0x2000a0f0
 8006024:	2000a138 	.word	0x2000a138
 8006028:	20009c60 	.word	0x20009c60
 800602c:	20009c5c 	.word	0x20009c5c
 8006030:	2000a144 	.word	0x2000a144
 8006034:	2000a140 	.word	0x2000a140
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <xTaskGetTickCount+0x1c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006048:	687b      	ldr	r3, [r7, #4]
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	2000a134 	.word	0x2000a134

0800605c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006066:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <xTaskIncrementTick+0x148>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f040 808f 	bne.w	800618e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006070:	4b4d      	ldr	r3, [pc, #308]	; (80061a8 <xTaskIncrementTick+0x14c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006078:	4a4b      	ldr	r2, [pc, #300]	; (80061a8 <xTaskIncrementTick+0x14c>)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d120      	bne.n	80060c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006084:	4b49      	ldr	r3, [pc, #292]	; (80061ac <xTaskIncrementTick+0x150>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	603b      	str	r3, [r7, #0]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <xTaskIncrementTick+0x46>
 80060a4:	4b41      	ldr	r3, [pc, #260]	; (80061ac <xTaskIncrementTick+0x150>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <xTaskIncrementTick+0x154>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3f      	ldr	r2, [pc, #252]	; (80061ac <xTaskIncrementTick+0x150>)
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	4a3f      	ldr	r2, [pc, #252]	; (80061b0 <xTaskIncrementTick+0x154>)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <xTaskIncrementTick+0x158>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	4a3d      	ldr	r2, [pc, #244]	; (80061b4 <xTaskIncrementTick+0x158>)
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	f000 faf7 	bl	80066b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060c6:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <xTaskIncrementTick+0x15c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d349      	bcc.n	8006164 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d0:	4b36      	ldr	r3, [pc, #216]	; (80061ac <xTaskIncrementTick+0x150>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060da:	4b37      	ldr	r3, [pc, #220]	; (80061b8 <xTaskIncrementTick+0x15c>)
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e0:	601a      	str	r2, [r3, #0]
					break;
 80060e2:	e03f      	b.n	8006164 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e4:	4b31      	ldr	r3, [pc, #196]	; (80061ac <xTaskIncrementTick+0x150>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d203      	bcs.n	8006104 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060fc:	4a2e      	ldr	r2, [pc, #184]	; (80061b8 <xTaskIncrementTick+0x15c>)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006102:	e02f      	b.n	8006164 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	3304      	adds	r3, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe ff99 	bl	8005040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d004      	beq.n	8006120 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	3318      	adds	r3, #24
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe ff90 	bl	8005040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <xTaskIncrementTick+0x160>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d903      	bls.n	8006134 <xTaskIncrementTick+0xd8>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	4a22      	ldr	r2, [pc, #136]	; (80061bc <xTaskIncrementTick+0x160>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <xTaskIncrementTick+0x164>)
 8006142:	441a      	add	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe ff1b 	bl	8004f86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <xTaskIncrementTick+0x168>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	429a      	cmp	r2, r3
 800615c:	d3b8      	bcc.n	80060d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800615e:	2301      	movs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006162:	e7b5      	b.n	80060d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006164:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <xTaskIncrementTick+0x168>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616a:	4915      	ldr	r1, [pc, #84]	; (80061c0 <xTaskIncrementTick+0x164>)
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d901      	bls.n	8006180 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006180:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <xTaskIncrementTick+0x16c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e004      	b.n	8006198 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <xTaskIncrementTick+0x170>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <xTaskIncrementTick+0x170>)
 8006196:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006198:	697b      	ldr	r3, [r7, #20]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	2000a158 	.word	0x2000a158
 80061a8:	2000a134 	.word	0x2000a134
 80061ac:	2000a0e8 	.word	0x2000a0e8
 80061b0:	2000a0ec 	.word	0x2000a0ec
 80061b4:	2000a148 	.word	0x2000a148
 80061b8:	2000a150 	.word	0x2000a150
 80061bc:	2000a138 	.word	0x2000a138
 80061c0:	20009c60 	.word	0x20009c60
 80061c4:	20009c5c 	.word	0x20009c5c
 80061c8:	2000a144 	.word	0x2000a144
 80061cc:	2000a140 	.word	0x2000a140

080061d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061d6:	4b28      	ldr	r3, [pc, #160]	; (8006278 <vTaskSwitchContext+0xa8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <vTaskSwitchContext+0xac>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061e4:	e041      	b.n	800626a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80061e6:	4b25      	ldr	r3, [pc, #148]	; (800627c <vTaskSwitchContext+0xac>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ec:	4b24      	ldr	r3, [pc, #144]	; (8006280 <vTaskSwitchContext+0xb0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	e010      	b.n	8006216 <vTaskSwitchContext+0x46>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <vTaskSwitchContext+0x40>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	607b      	str	r3, [r7, #4]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vTaskSwitchContext+0x3e>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3b01      	subs	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	491b      	ldr	r1, [pc, #108]	; (8006284 <vTaskSwitchContext+0xb4>)
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0e4      	beq.n	80061f4 <vTaskSwitchContext+0x24>
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4a13      	ldr	r2, [pc, #76]	; (8006284 <vTaskSwitchContext+0xb4>)
 8006236:	4413      	add	r3, r2
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	3308      	adds	r3, #8
 800624c:	429a      	cmp	r2, r3
 800624e:	d104      	bne.n	800625a <vTaskSwitchContext+0x8a>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a09      	ldr	r2, [pc, #36]	; (8006288 <vTaskSwitchContext+0xb8>)
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4a06      	ldr	r2, [pc, #24]	; (8006280 <vTaskSwitchContext+0xb0>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6013      	str	r3, [r2, #0]
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	2000a158 	.word	0x2000a158
 800627c:	2000a144 	.word	0x2000a144
 8006280:	2000a138 	.word	0x2000a138
 8006284:	20009c60 	.word	0x20009c60
 8006288:	20009c5c 	.word	0x20009c5c

0800628c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	60fb      	str	r3, [r7, #12]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <vTaskPlaceOnEventList+0x44>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3318      	adds	r3, #24
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fe fe87 	bl	8004fce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062c0:	2101      	movs	r1, #1
 80062c2:	6838      	ldr	r0, [r7, #0]
 80062c4:	f000 faa2 	bl	800680c <prvAddCurrentTaskToDelayedList>
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20009c5c 	.word	0x20009c5c

080062d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	617b      	str	r3, [r7, #20]
}
 80062f8:	bf00      	nop
 80062fa:	e7fe      	b.n	80062fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <vTaskPlaceOnEventListRestricted+0x54>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3318      	adds	r3, #24
 8006302:	4619      	mov	r1, r3
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7fe fe3e 	bl	8004f86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006314:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	68b8      	ldr	r0, [r7, #8]
 800631a:	f000 fa77 	bl	800680c <prvAddCurrentTaskToDelayedList>
	}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20009c5c 	.word	0x20009c5c

0800632c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60fb      	str	r3, [r7, #12]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	3318      	adds	r3, #24
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fe6f 	bl	8005040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006362:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <xTaskRemoveFromEventList+0xb0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d11d      	bne.n	80063a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	3304      	adds	r3, #4
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe fe66 	bl	8005040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <xTaskRemoveFromEventList+0xb4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d903      	bls.n	8006388 <xTaskRemoveFromEventList+0x5c>
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <xTaskRemoveFromEventList+0xb4>)
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4a13      	ldr	r2, [pc, #76]	; (80063e4 <xTaskRemoveFromEventList+0xb8>)
 8006396:	441a      	add	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7fe fdf1 	bl	8004f86 <vListInsertEnd>
 80063a4:	e005      	b.n	80063b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	3318      	adds	r3, #24
 80063aa:	4619      	mov	r1, r3
 80063ac:	480e      	ldr	r0, [pc, #56]	; (80063e8 <xTaskRemoveFromEventList+0xbc>)
 80063ae:	f7fe fdea 	bl	8004f86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <xTaskRemoveFromEventList+0xc0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	429a      	cmp	r2, r3
 80063be:	d905      	bls.n	80063cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <xTaskRemoveFromEventList+0xc4>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e001      	b.n	80063d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063d0:	697b      	ldr	r3, [r7, #20]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	2000a158 	.word	0x2000a158
 80063e0:	2000a138 	.word	0x2000a138
 80063e4:	20009c60 	.word	0x20009c60
 80063e8:	2000a0f0 	.word	0x2000a0f0
 80063ec:	20009c5c 	.word	0x20009c5c
 80063f0:	2000a144 	.word	0x2000a144

080063f4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	60fb      	str	r3, [r7, #12]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006418:	f000 fec4 	bl	80071a4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <vTaskSetTimeOutState+0x44>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <vTaskSetTimeOutState+0x48>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800642c:	f000 feea 	bl	8007204 <vPortExitCritical>
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	2000a148 	.word	0x2000a148
 800643c:	2000a134 	.word	0x2000a134

08006440 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <vTaskInternalSetTimeOutState+0x24>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <vTaskInternalSetTimeOutState+0x28>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	2000a148 	.word	0x2000a148
 8006468:	2000a134 	.word	0x2000a134

0800646c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	613b      	str	r3, [r7, #16]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064ae:	f000 fe79 	bl	80071a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064b2:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <xTaskCheckForTimeOut+0xbc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ca:	d102      	bne.n	80064d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	e023      	b.n	800651a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b15      	ldr	r3, [pc, #84]	; (800652c <xTaskCheckForTimeOut+0xc0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d007      	beq.n	80064ee <xTaskCheckForTimeOut+0x82>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	61fb      	str	r3, [r7, #28]
 80064ec:	e015      	b.n	800651a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d20b      	bcs.n	8006510 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff9b 	bl	8006440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	e004      	b.n	800651a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006516:	2301      	movs	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800651a:	f000 fe73 	bl	8007204 <vPortExitCritical>

	return xReturn;
 800651e:	69fb      	ldr	r3, [r7, #28]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	2000a134 	.word	0x2000a134
 800652c:	2000a148 	.word	0x2000a148

08006530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006534:	4b03      	ldr	r3, [pc, #12]	; (8006544 <vTaskMissedYield+0x14>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
}
 800653a:	bf00      	nop
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	2000a144 	.word	0x2000a144

08006548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006550:	f000 f852 	bl	80065f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006554:	4b06      	ldr	r3, [pc, #24]	; (8006570 <prvIdleTask+0x28>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d9f9      	bls.n	8006550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <prvIdleTask+0x2c>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800656c:	e7f0      	b.n	8006550 <prvIdleTask+0x8>
 800656e:	bf00      	nop
 8006570:	20009c60 	.word	0x20009c60
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800657e:	2300      	movs	r3, #0
 8006580:	607b      	str	r3, [r7, #4]
 8006582:	e00c      	b.n	800659e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <prvInitialiseTaskLists+0x60>)
 8006590:	4413      	add	r3, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fcca 	bl	8004f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3301      	adds	r3, #1
 800659c:	607b      	str	r3, [r7, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b37      	cmp	r3, #55	; 0x37
 80065a2:	d9ef      	bls.n	8006584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065a4:	480d      	ldr	r0, [pc, #52]	; (80065dc <prvInitialiseTaskLists+0x64>)
 80065a6:	f7fe fcc1 	bl	8004f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065aa:	480d      	ldr	r0, [pc, #52]	; (80065e0 <prvInitialiseTaskLists+0x68>)
 80065ac:	f7fe fcbe 	bl	8004f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065b0:	480c      	ldr	r0, [pc, #48]	; (80065e4 <prvInitialiseTaskLists+0x6c>)
 80065b2:	f7fe fcbb 	bl	8004f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065b6:	480c      	ldr	r0, [pc, #48]	; (80065e8 <prvInitialiseTaskLists+0x70>)
 80065b8:	f7fe fcb8 	bl	8004f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065bc:	480b      	ldr	r0, [pc, #44]	; (80065ec <prvInitialiseTaskLists+0x74>)
 80065be:	f7fe fcb5 	bl	8004f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065c2:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <prvInitialiseTaskLists+0x78>)
 80065c4:	4a05      	ldr	r2, [pc, #20]	; (80065dc <prvInitialiseTaskLists+0x64>)
 80065c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065c8:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <prvInitialiseTaskLists+0x7c>)
 80065ca:	4a05      	ldr	r2, [pc, #20]	; (80065e0 <prvInitialiseTaskLists+0x68>)
 80065cc:	601a      	str	r2, [r3, #0]
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20009c60 	.word	0x20009c60
 80065dc:	2000a0c0 	.word	0x2000a0c0
 80065e0:	2000a0d4 	.word	0x2000a0d4
 80065e4:	2000a0f0 	.word	0x2000a0f0
 80065e8:	2000a104 	.word	0x2000a104
 80065ec:	2000a11c 	.word	0x2000a11c
 80065f0:	2000a0e8 	.word	0x2000a0e8
 80065f4:	2000a0ec 	.word	0x2000a0ec

080065f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065fe:	e019      	b.n	8006634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006600:	f000 fdd0 	bl	80071a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006604:	4b10      	ldr	r3, [pc, #64]	; (8006648 <prvCheckTasksWaitingTermination+0x50>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fd15 	bl	8005040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <prvCheckTasksWaitingTermination+0x54>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3b01      	subs	r3, #1
 800661c:	4a0b      	ldr	r2, [pc, #44]	; (800664c <prvCheckTasksWaitingTermination+0x54>)
 800661e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <prvCheckTasksWaitingTermination+0x58>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3b01      	subs	r3, #1
 8006626:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <prvCheckTasksWaitingTermination+0x58>)
 8006628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800662a:	f000 fdeb 	bl	8007204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f810 	bl	8006654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006634:	4b06      	ldr	r3, [pc, #24]	; (8006650 <prvCheckTasksWaitingTermination+0x58>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e1      	bne.n	8006600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	2000a104 	.word	0x2000a104
 800664c:	2000a130 	.word	0x2000a130
 8006650:	2000a118 	.word	0x2000a118

08006654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ff88 	bl	8007580 <vPortFree>
				vPortFree( pxTCB );
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 ff85 	bl	8007580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006676:	e018      	b.n	80066aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800667e:	2b01      	cmp	r3, #1
 8006680:	d103      	bne.n	800668a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 ff7c 	bl	8007580 <vPortFree>
	}
 8006688:	e00f      	b.n	80066aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006690:	2b02      	cmp	r3, #2
 8006692:	d00a      	beq.n	80066aa <prvDeleteTCB+0x56>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60fb      	str	r3, [r7, #12]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <prvDeleteTCB+0x54>
	}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ba:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <prvResetNextTaskUnblockTime+0x38>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066c4:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <prvResetNextTaskUnblockTime+0x3c>)
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066cc:	e008      	b.n	80066e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ce:	4b07      	ldr	r3, [pc, #28]	; (80066ec <prvResetNextTaskUnblockTime+0x38>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4a04      	ldr	r2, [pc, #16]	; (80066f0 <prvResetNextTaskUnblockTime+0x3c>)
 80066de:	6013      	str	r3, [r2, #0]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	2000a0e8 	.word	0x2000a0e8
 80066f0:	2000a150 	.word	0x2000a150

080066f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <xTaskGetSchedulerState+0x34>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006702:	2301      	movs	r3, #1
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	e008      	b.n	800671a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006708:	4b08      	ldr	r3, [pc, #32]	; (800672c <xTaskGetSchedulerState+0x38>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006710:	2302      	movs	r3, #2
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	e001      	b.n	800671a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006716:	2300      	movs	r3, #0
 8006718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800671a:	687b      	ldr	r3, [r7, #4]
	}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	2000a13c 	.word	0x2000a13c
 800672c:	2000a158 	.word	0x2000a158

08006730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d056      	beq.n	80067f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <xTaskPriorityDisinherit+0xd0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	429a      	cmp	r2, r3
 800674e:	d00a      	beq.n	8006766 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	60bb      	str	r3, [r7, #8]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	1e5a      	subs	r2, r3, #1
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006796:	429a      	cmp	r2, r3
 8006798:	d02c      	beq.n	80067f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d128      	bne.n	80067f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe fc4a 	bl	8005040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <xTaskPriorityDisinherit+0xd4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d903      	bls.n	80067d4 <xTaskPriorityDisinherit+0xa4>
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <xTaskPriorityDisinherit+0xd4>)
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4a09      	ldr	r2, [pc, #36]	; (8006808 <xTaskPriorityDisinherit+0xd8>)
 80067e2:	441a      	add	r2, r3
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fe fbcb 	bl	8004f86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067f4:	697b      	ldr	r3, [r7, #20]
	}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20009c5c 	.word	0x20009c5c
 8006804:	2000a138 	.word	0x2000a138
 8006808:	20009c60 	.word	0x20009c60

0800680c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006816:	4b21      	ldr	r3, [pc, #132]	; (800689c <prvAddCurrentTaskToDelayedList+0x90>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800681c:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3304      	adds	r3, #4
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fc0c 	bl	8005040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800682e:	d10a      	bne.n	8006846 <prvAddCurrentTaskToDelayedList+0x3a>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4819      	ldr	r0, [pc, #100]	; (80068a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006840:	f7fe fba1 	bl	8004f86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006844:	e026      	b.n	8006894 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4413      	add	r3, r2
 800684c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800684e:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	429a      	cmp	r2, r3
 800685c:	d209      	bcs.n	8006872 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f7fe fbaf 	bl	8004fce <vListInsert>
}
 8006870:	e010      	b.n	8006894 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7fe fba5 	bl	8004fce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	d202      	bcs.n	8006894 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6013      	str	r3, [r2, #0]
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	2000a134 	.word	0x2000a134
 80068a0:	20009c5c 	.word	0x20009c5c
 80068a4:	2000a11c 	.word	0x2000a11c
 80068a8:	2000a0ec 	.word	0x2000a0ec
 80068ac:	2000a0e8 	.word	0x2000a0e8
 80068b0:	2000a150 	.word	0x2000a150

080068b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068be:	f000 fb07 	bl	8006ed0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <xTimerCreateTimerTask+0x80>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d021      	beq.n	800690e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068d2:	1d3a      	adds	r2, r7, #4
 80068d4:	f107 0108 	add.w	r1, r7, #8
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fb0b 	bl	8004ef8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	9202      	str	r2, [sp, #8]
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	2302      	movs	r3, #2
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	2300      	movs	r3, #0
 80068f2:	460a      	mov	r2, r1
 80068f4:	4910      	ldr	r1, [pc, #64]	; (8006938 <xTimerCreateTimerTask+0x84>)
 80068f6:	4811      	ldr	r0, [pc, #68]	; (800693c <xTimerCreateTimerTask+0x88>)
 80068f8:	f7ff f8b8 	bl	8005a6c <xTaskCreateStatic>
 80068fc:	4603      	mov	r3, r0
 80068fe:	4a10      	ldr	r2, [pc, #64]	; (8006940 <xTimerCreateTimerTask+0x8c>)
 8006900:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006902:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <xTimerCreateTimerTask+0x8c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800690a:	2301      	movs	r3, #1
 800690c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	613b      	str	r3, [r7, #16]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800692a:	697b      	ldr	r3, [r7, #20]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	2000a18c 	.word	0x2000a18c
 8006938:	080159b4 	.word	0x080159b4
 800693c:	08006a79 	.word	0x08006a79
 8006940:	2000a190 	.word	0x2000a190

08006944 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	; 0x28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xTimerGenericCommand+0x2e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	623b      	str	r3, [r7, #32]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006972:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <xTimerGenericCommand+0x98>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02a      	beq.n	80069d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b05      	cmp	r3, #5
 800698a:	dc18      	bgt.n	80069be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800698c:	f7ff feb2 	bl	80066f4 <xTaskGetSchedulerState>
 8006990:	4603      	mov	r3, r0
 8006992:	2b02      	cmp	r3, #2
 8006994:	d109      	bne.n	80069aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006996:	4b11      	ldr	r3, [pc, #68]	; (80069dc <xTimerGenericCommand+0x98>)
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	f107 0110 	add.w	r1, r7, #16
 800699e:	2300      	movs	r3, #0
 80069a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a2:	f7fe fc7b 	bl	800529c <xQueueGenericSend>
 80069a6:	6278      	str	r0, [r7, #36]	; 0x24
 80069a8:	e012      	b.n	80069d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069aa:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <xTimerGenericCommand+0x98>)
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	f107 0110 	add.w	r1, r7, #16
 80069b2:	2300      	movs	r3, #0
 80069b4:	2200      	movs	r2, #0
 80069b6:	f7fe fc71 	bl	800529c <xQueueGenericSend>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24
 80069bc:	e008      	b.n	80069d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <xTimerGenericCommand+0x98>)
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f107 0110 	add.w	r1, r7, #16
 80069c6:	2300      	movs	r3, #0
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	f7fe fd65 	bl	8005498 <xQueueGenericSendFromISR>
 80069ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3728      	adds	r7, #40	; 0x28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	2000a18c 	.word	0x2000a18c

080069e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ea:	4b22      	ldr	r3, [pc, #136]	; (8006a74 <prvProcessExpiredTimer+0x94>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe fb21 	bl	8005040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d022      	beq.n	8006a52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	18d1      	adds	r1, r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	6978      	ldr	r0, [r7, #20]
 8006a1a:	f000 f8d1 	bl	8006bc0 <prvInsertTimerInActiveList>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01f      	beq.n	8006a64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a24:	2300      	movs	r3, #0
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	6978      	ldr	r0, [r7, #20]
 8006a30:	f7ff ff88 	bl	8006944 <xTimerGenericCommand>
 8006a34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d113      	bne.n	8006a64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	60fb      	str	r3, [r7, #12]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	4798      	blx	r3
}
 8006a6c:	bf00      	nop
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	2000a184 	.word	0x2000a184

08006a78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a80:	f107 0308 	add.w	r3, r7, #8
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 f857 	bl	8006b38 <prvGetNextExpireTime>
 8006a8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f803 	bl	8006a9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a96:	f000 f8d5 	bl	8006c44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a9a:	e7f1      	b.n	8006a80 <prvTimerTask+0x8>

08006a9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006aa6:	f7ff fa1d 	bl	8005ee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aaa:	f107 0308 	add.w	r3, r7, #8
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f866 	bl	8006b80 <prvSampleTimeNow>
 8006ab4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d130      	bne.n	8006b1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <prvProcessTimerOrBlockTask+0x3c>
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d806      	bhi.n	8006ad8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aca:	f7ff fa19 	bl	8005f00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff ff85 	bl	80069e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ad6:	e024      	b.n	8006b22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <prvProcessTimerOrBlockTask+0x90>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <prvProcessTimerOrBlockTask+0x50>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <prvProcessTimerOrBlockTask+0x52>
 8006aec:	2300      	movs	r3, #0
 8006aee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <prvProcessTimerOrBlockTask+0x94>)
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	4619      	mov	r1, r3
 8006afe:	f7fe ff81 	bl	8005a04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b02:	f7ff f9fd 	bl	8005f00 <xTaskResumeAll>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <prvProcessTimerOrBlockTask+0x98>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	f3bf 8f6f 	isb	sy
}
 8006b1c:	e001      	b.n	8006b22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b1e:	f7ff f9ef 	bl	8005f00 <xTaskResumeAll>
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	2000a188 	.word	0x2000a188
 8006b30:	2000a18c 	.word	0x2000a18c
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b40:	4b0e      	ldr	r3, [pc, #56]	; (8006b7c <prvGetNextExpireTime+0x44>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <prvGetNextExpireTime+0x16>
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	e000      	b.n	8006b50 <prvGetNextExpireTime+0x18>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b5c:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <prvGetNextExpireTime+0x44>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	e001      	b.n	8006b6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	2000a184 	.word	0x2000a184

08006b80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b88:	f7ff fa58 	bl	800603c <xTaskGetTickCount>
 8006b8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b8e:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <prvSampleTimeNow+0x3c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d205      	bcs.n	8006ba4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b98:	f000 f936 	bl	8006e08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e002      	b.n	8006baa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006baa:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <prvSampleTimeNow+0x3c>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	2000a194 	.word	0x2000a194

08006bc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d812      	bhi.n	8006c0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e01b      	b.n	8006c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bfa:	4b10      	ldr	r3, [pc, #64]	; (8006c3c <prvInsertTimerInActiveList+0x7c>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7fe f9e2 	bl	8004fce <vListInsert>
 8006c0a:	e012      	b.n	8006c32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d206      	bcs.n	8006c22 <prvInsertTimerInActiveList+0x62>
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d302      	bcc.n	8006c22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e007      	b.n	8006c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <prvInsertTimerInActiveList+0x80>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	f7fe f9ce 	bl	8004fce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c32:	697b      	ldr	r3, [r7, #20]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	2000a188 	.word	0x2000a188
 8006c40:	2000a184 	.word	0x2000a184

08006c44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08e      	sub	sp, #56	; 0x38
 8006c48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c4a:	e0ca      	b.n	8006de2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da18      	bge.n	8006c84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	3304      	adds	r3, #4
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	61fb      	str	r3, [r7, #28]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7a:	6850      	ldr	r0, [r2, #4]
 8006c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7e:	6892      	ldr	r2, [r2, #8]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f2c0 80ab 	blt.w	8006de2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe f9cf 	bl	8005040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ca2:	463b      	mov	r3, r7
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ff6b 	bl	8006b80 <prvSampleTimeNow>
 8006caa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	f200 8096 	bhi.w	8006de0 <prvProcessReceivedCommands+0x19c>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <prvProcessReceivedCommands+0x78>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006ce5 	.word	0x08006ce5
 8006cc8:	08006d59 	.word	0x08006d59
 8006ccc:	08006d6d 	.word	0x08006d6d
 8006cd0:	08006db7 	.word	0x08006db7
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006ce5 	.word	0x08006ce5
 8006cdc:	08006d59 	.word	0x08006d59
 8006ce0:	08006d6d 	.word	0x08006d6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	18d1      	adds	r1, r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d04:	f7ff ff5c 	bl	8006bc0 <prvInsertTimerInActiveList>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d069      	beq.n	8006de2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d05e      	beq.n	8006de2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	441a      	add	r2, r3
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	2100      	movs	r1, #0
 8006d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d36:	f7ff fe05 	bl	8006944 <xTimerGenericCommand>
 8006d3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d14f      	bne.n	8006de2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	61bb      	str	r3, [r7, #24]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d6a:	e03a      	b.n	8006de2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d72:	f043 0301 	orr.w	r3, r3, #1
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	617b      	str	r3, [r7, #20]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	18d1      	adds	r1, r2, r3
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db0:	f7ff ff06 	bl	8006bc0 <prvInsertTimerInActiveList>
					break;
 8006db4:	e015      	b.n	8006de2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc6:	f000 fbdb 	bl	8007580 <vPortFree>
 8006dca:	e00a      	b.n	8006de2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dde:	e000      	b.n	8006de2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006de0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006de2:	4b08      	ldr	r3, [pc, #32]	; (8006e04 <prvProcessReceivedCommands+0x1c0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	1d39      	adds	r1, r7, #4
 8006de8:	2200      	movs	r2, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe fbf0 	bl	80055d0 <xQueueReceive>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f47f af2a 	bne.w	8006c4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	3730      	adds	r7, #48	; 0x30
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	2000a18c 	.word	0x2000a18c

08006e08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e0e:	e048      	b.n	8006ea2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e10:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <prvSwitchTimerLists+0xc0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1a:	4b2b      	ldr	r3, [pc, #172]	; (8006ec8 <prvSwitchTimerLists+0xc0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe f909 	bl	8005040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d02e      	beq.n	8006ea2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d90e      	bls.n	8006e74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e62:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <prvSwitchTimerLists+0xc0>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7fe f8ae 	bl	8004fce <vListInsert>
 8006e72:	e016      	b.n	8006ea2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e74:	2300      	movs	r3, #0
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff fd60 	bl	8006944 <xTimerGenericCommand>
 8006e84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	603b      	str	r3, [r7, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <prvSwitchTimerLists+0xc0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1b1      	bne.n	8006e10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <prvSwitchTimerLists+0xc0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <prvSwitchTimerLists+0xc4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a04      	ldr	r2, [pc, #16]	; (8006ec8 <prvSwitchTimerLists+0xc0>)
 8006eb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006eba:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <prvSwitchTimerLists+0xc4>)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	2000a184 	.word	0x2000a184
 8006ecc:	2000a188 	.word	0x2000a188

08006ed0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ed6:	f000 f965 	bl	80071a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <prvCheckForValidListAndQueue+0x60>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d120      	bne.n	8006f24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ee2:	4814      	ldr	r0, [pc, #80]	; (8006f34 <prvCheckForValidListAndQueue+0x64>)
 8006ee4:	f7fe f822 	bl	8004f2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ee8:	4813      	ldr	r0, [pc, #76]	; (8006f38 <prvCheckForValidListAndQueue+0x68>)
 8006eea:	f7fe f81f 	bl	8004f2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <prvCheckForValidListAndQueue+0x6c>)
 8006ef0:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <prvCheckForValidListAndQueue+0x64>)
 8006ef2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <prvCheckForValidListAndQueue+0x70>)
 8006ef6:	4a10      	ldr	r2, [pc, #64]	; (8006f38 <prvCheckForValidListAndQueue+0x68>)
 8006ef8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006efa:	2300      	movs	r3, #0
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <prvCheckForValidListAndQueue+0x74>)
 8006f00:	4a11      	ldr	r2, [pc, #68]	; (8006f48 <prvCheckForValidListAndQueue+0x78>)
 8006f02:	2110      	movs	r1, #16
 8006f04:	200a      	movs	r0, #10
 8006f06:	f7fe f92d 	bl	8005164 <xQueueGenericCreateStatic>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <prvCheckForValidListAndQueue+0x60>)
 8006f0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <prvCheckForValidListAndQueue+0x60>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <prvCheckForValidListAndQueue+0x60>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	490b      	ldr	r1, [pc, #44]	; (8006f4c <prvCheckForValidListAndQueue+0x7c>)
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fd46 	bl	80059b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f24:	f000 f96e 	bl	8007204 <vPortExitCritical>
}
 8006f28:	bf00      	nop
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000a18c 	.word	0x2000a18c
 8006f34:	2000a15c 	.word	0x2000a15c
 8006f38:	2000a170 	.word	0x2000a170
 8006f3c:	2000a184 	.word	0x2000a184
 8006f40:	2000a188 	.word	0x2000a188
 8006f44:	2000a238 	.word	0x2000a238
 8006f48:	2000a198 	.word	0x2000a198
 8006f4c:	080159bc 	.word	0x080159bc

08006f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3b04      	subs	r3, #4
 8006f60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f023 0201 	bic.w	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f80:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <pxPortInitialiseStack+0x64>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3b14      	subs	r3, #20
 8006f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3b04      	subs	r3, #4
 8006f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f06f 0202 	mvn.w	r2, #2
 8006f9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3b20      	subs	r3, #32
 8006fa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	08006fb9 	.word	0x08006fb9

08006fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fc2:	4b12      	ldr	r3, [pc, #72]	; (800700c <prvTaskExitError+0x54>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fca:	d00a      	beq.n	8006fe2 <prvTaskExitError+0x2a>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <prvTaskExitError+0x28>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60bb      	str	r3, [r7, #8]
}
 8006ff4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ff6:	bf00      	nop
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0fc      	beq.n	8006ff8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000010 	.word	0x20000010

08007010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <pxCurrentTCBConst2>)
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	6808      	ldr	r0, [r1, #0]
 8007016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	f380 8809 	msr	PSP, r0
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	4770      	bx	lr
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst2>:
 8007030:	20009c5c 	.word	0x20009c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop

08007038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007038:	4808      	ldr	r0, [pc, #32]	; (800705c <prvPortStartFirstTask+0x24>)
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	6800      	ldr	r0, [r0, #0]
 800703e:	f380 8808 	msr	MSP, r0
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8814 	msr	CONTROL, r0
 800704a:	b662      	cpsie	i
 800704c:	b661      	cpsie	f
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	df00      	svc	0
 8007058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800705a:	bf00      	nop
 800705c:	e000ed08 	.word	0xe000ed08

08007060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007066:	4b46      	ldr	r3, [pc, #280]	; (8007180 <xPortStartScheduler+0x120>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a46      	ldr	r2, [pc, #280]	; (8007184 <xPortStartScheduler+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10a      	bne.n	8007086 <xPortStartScheduler+0x26>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	613b      	str	r3, [r7, #16]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007086:	4b3e      	ldr	r3, [pc, #248]	; (8007180 <xPortStartScheduler+0x120>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a3f      	ldr	r2, [pc, #252]	; (8007188 <xPortStartScheduler+0x128>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10a      	bne.n	80070a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070a6:	4b39      	ldr	r3, [pc, #228]	; (800718c <xPortStartScheduler+0x12c>)
 80070a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	22ff      	movs	r2, #255	; 0xff
 80070b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	4b31      	ldr	r3, [pc, #196]	; (8007190 <xPortStartScheduler+0x130>)
 80070cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070ce:	4b31      	ldr	r3, [pc, #196]	; (8007194 <xPortStartScheduler+0x134>)
 80070d0:	2207      	movs	r2, #7
 80070d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070d4:	e009      	b.n	80070ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80070d6:	4b2f      	ldr	r3, [pc, #188]	; (8007194 <xPortStartScheduler+0x134>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3b01      	subs	r3, #1
 80070dc:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <xPortStartScheduler+0x134>)
 80070de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d0ef      	beq.n	80070d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070f6:	4b27      	ldr	r3, [pc, #156]	; (8007194 <xPortStartScheduler+0x134>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1c3 0307 	rsb	r3, r3, #7
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d00a      	beq.n	8007118 <xPortStartScheduler+0xb8>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60bb      	str	r3, [r7, #8]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007118:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <xPortStartScheduler+0x134>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <xPortStartScheduler+0x134>)
 8007120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007122:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <xPortStartScheduler+0x134>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800712a:	4a1a      	ldr	r2, [pc, #104]	; (8007194 <xPortStartScheduler+0x134>)
 800712c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	b2da      	uxtb	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007136:	4b18      	ldr	r3, [pc, #96]	; (8007198 <xPortStartScheduler+0x138>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a17      	ldr	r2, [pc, #92]	; (8007198 <xPortStartScheduler+0x138>)
 800713c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <xPortStartScheduler+0x138>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a14      	ldr	r2, [pc, #80]	; (8007198 <xPortStartScheduler+0x138>)
 8007148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800714c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800714e:	f000 f8dd 	bl	800730c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <xPortStartScheduler+0x13c>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007158:	f000 f8fc 	bl	8007354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800715c:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <xPortStartScheduler+0x140>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0f      	ldr	r2, [pc, #60]	; (80071a0 <xPortStartScheduler+0x140>)
 8007162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007168:	f7ff ff66 	bl	8007038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800716c:	f7ff f830 	bl	80061d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007170:	f7ff ff22 	bl	8006fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	e000ed00 	.word	0xe000ed00
 8007184:	410fc271 	.word	0x410fc271
 8007188:	410fc270 	.word	0x410fc270
 800718c:	e000e400 	.word	0xe000e400
 8007190:	2000a288 	.word	0x2000a288
 8007194:	2000a28c 	.word	0x2000a28c
 8007198:	e000ed20 	.word	0xe000ed20
 800719c:	20000010 	.word	0x20000010
 80071a0:	e000ef34 	.word	0xe000ef34

080071a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	607b      	str	r3, [r7, #4]
}
 80071bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <vPortEnterCritical+0x58>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3301      	adds	r3, #1
 80071c4:	4a0d      	ldr	r2, [pc, #52]	; (80071fc <vPortEnterCritical+0x58>)
 80071c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071c8:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <vPortEnterCritical+0x58>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10f      	bne.n	80071f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <vPortEnterCritical+0x5c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	603b      	str	r3, [r7, #0]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <vPortEnterCritical+0x4a>
	}
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	20000010 	.word	0x20000010
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800720a:	4b12      	ldr	r3, [pc, #72]	; (8007254 <vPortExitCritical+0x50>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <vPortExitCritical+0x24>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	607b      	str	r3, [r7, #4]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <vPortExitCritical+0x50>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3b01      	subs	r3, #1
 800722e:	4a09      	ldr	r2, [pc, #36]	; (8007254 <vPortExitCritical+0x50>)
 8007230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007232:	4b08      	ldr	r3, [pc, #32]	; (8007254 <vPortExitCritical+0x50>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <vPortExitCritical+0x42>
 800723a:	2300      	movs	r3, #0
 800723c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	f383 8811 	msr	BASEPRI, r3
}
 8007244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000010 	.word	0x20000010
	...

08007260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007260:	f3ef 8009 	mrs	r0, PSP
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <pxCurrentTCBConst>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	f01e 0f10 	tst.w	lr, #16
 8007270:	bf08      	it	eq
 8007272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007284:	f380 8811 	msr	BASEPRI, r0
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f7fe ff9e 	bl	80061d0 <vTaskSwitchContext>
 8007294:	f04f 0000 	mov.w	r0, #0
 8007298:	f380 8811 	msr	BASEPRI, r0
 800729c:	bc09      	pop	{r0, r3}
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	6808      	ldr	r0, [r1, #0]
 80072a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a6:	f01e 0f10 	tst.w	lr, #16
 80072aa:	bf08      	it	eq
 80072ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072b0:	f380 8809 	msr	PSP, r0
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst>:
 80072c0:	20009c5c 	.word	0x20009c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	607b      	str	r3, [r7, #4]
}
 80072e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072e2:	f7fe febb 	bl	800605c <xTaskIncrementTick>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <xPortSysTickHandler+0x40>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f383 8811 	msr	BASEPRI, r3
}
 80072fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <vPortSetupTimerInterrupt+0x34>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <vPortSetupTimerInterrupt+0x38>)
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <vPortSetupTimerInterrupt+0x3c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <vPortSetupTimerInterrupt+0x40>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <vPortSetupTimerInterrupt+0x44>)
 800732a:	3b01      	subs	r3, #1
 800732c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800732e:	4b04      	ldr	r3, [pc, #16]	; (8007340 <vPortSetupTimerInterrupt+0x34>)
 8007330:	2207      	movs	r2, #7
 8007332:	601a      	str	r2, [r3, #0]
}
 8007334:	bf00      	nop
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	e000e010 	.word	0xe000e010
 8007344:	e000e018 	.word	0xe000e018
 8007348:	20000004 	.word	0x20000004
 800734c:	10624dd3 	.word	0x10624dd3
 8007350:	e000e014 	.word	0xe000e014

08007354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007364 <vPortEnableVFP+0x10>
 8007358:	6801      	ldr	r1, [r0, #0]
 800735a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800735e:	6001      	str	r1, [r0, #0]
 8007360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007362:	bf00      	nop
 8007364:	e000ed88 	.word	0xe000ed88

08007368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800736e:	f3ef 8305 	mrs	r3, IPSR
 8007372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b0f      	cmp	r3, #15
 8007378:	d914      	bls.n	80073a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <vPortValidateInterruptPriority+0x70>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007384:	4b15      	ldr	r3, [pc, #84]	; (80073dc <vPortValidateInterruptPriority+0x74>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	7afa      	ldrb	r2, [r7, #11]
 800738a:	429a      	cmp	r2, r3
 800738c:	d20a      	bcs.n	80073a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	607b      	str	r3, [r7, #4]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073a4:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <vPortValidateInterruptPriority+0x78>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073ac:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <vPortValidateInterruptPriority+0x7c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d90a      	bls.n	80073ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	603b      	str	r3, [r7, #0]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <vPortValidateInterruptPriority+0x60>
	}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	e000e3f0 	.word	0xe000e3f0
 80073dc:	2000a288 	.word	0x2000a288
 80073e0:	e000ed0c 	.word	0xe000ed0c
 80073e4:	2000a28c 	.word	0x2000a28c

080073e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073f4:	f7fe fd76 	bl	8005ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073f8:	4b5b      	ldr	r3, [pc, #364]	; (8007568 <pvPortMalloc+0x180>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007400:	f000 f920 	bl	8007644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007404:	4b59      	ldr	r3, [pc, #356]	; (800756c <pvPortMalloc+0x184>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4013      	ands	r3, r2
 800740c:	2b00      	cmp	r3, #0
 800740e:	f040 8093 	bne.w	8007538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01d      	beq.n	8007454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007418:	2208      	movs	r2, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	2b00      	cmp	r3, #0
 8007428:	d014      	beq.n	8007454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f023 0307 	bic.w	r3, r3, #7
 8007430:	3308      	adds	r3, #8
 8007432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <pvPortMalloc+0x6c>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	617b      	str	r3, [r7, #20]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d06e      	beq.n	8007538 <pvPortMalloc+0x150>
 800745a:	4b45      	ldr	r3, [pc, #276]	; (8007570 <pvPortMalloc+0x188>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d869      	bhi.n	8007538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007464:	4b43      	ldr	r3, [pc, #268]	; (8007574 <pvPortMalloc+0x18c>)
 8007466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007468:	4b42      	ldr	r3, [pc, #264]	; (8007574 <pvPortMalloc+0x18c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800746e:	e004      	b.n	800747a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <pvPortMalloc+0xa4>
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f1      	bne.n	8007470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800748c:	4b36      	ldr	r3, [pc, #216]	; (8007568 <pvPortMalloc+0x180>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007492:	429a      	cmp	r2, r3
 8007494:	d050      	beq.n	8007538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2208      	movs	r2, #8
 800749c:	4413      	add	r3, r2
 800749e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	2308      	movs	r3, #8
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d91f      	bls.n	80074f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <pvPortMalloc+0xf8>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	613b      	str	r3, [r7, #16]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074f2:	69b8      	ldr	r0, [r7, #24]
 80074f4:	f000 f908 	bl	8007708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074f8:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <pvPortMalloc+0x188>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	4a1b      	ldr	r2, [pc, #108]	; (8007570 <pvPortMalloc+0x188>)
 8007504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007506:	4b1a      	ldr	r3, [pc, #104]	; (8007570 <pvPortMalloc+0x188>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <pvPortMalloc+0x190>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d203      	bcs.n	800751a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007512:	4b17      	ldr	r3, [pc, #92]	; (8007570 <pvPortMalloc+0x188>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a18      	ldr	r2, [pc, #96]	; (8007578 <pvPortMalloc+0x190>)
 8007518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <pvPortMalloc+0x184>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	431a      	orrs	r2, r3
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800752e:	4b13      	ldr	r3, [pc, #76]	; (800757c <pvPortMalloc+0x194>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	4a11      	ldr	r2, [pc, #68]	; (800757c <pvPortMalloc+0x194>)
 8007536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007538:	f7fe fce2 	bl	8005f00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <pvPortMalloc+0x174>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60fb      	str	r3, [r7, #12]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <pvPortMalloc+0x172>
	return pvReturn;
 800755c:	69fb      	ldr	r3, [r7, #28]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3728      	adds	r7, #40	; 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	2000de98 	.word	0x2000de98
 800756c:	2000deac 	.word	0x2000deac
 8007570:	2000de9c 	.word	0x2000de9c
 8007574:	2000de90 	.word	0x2000de90
 8007578:	2000dea0 	.word	0x2000dea0
 800757c:	2000dea4 	.word	0x2000dea4

08007580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d04d      	beq.n	800762e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007592:	2308      	movs	r3, #8
 8007594:	425b      	negs	r3, r3
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4413      	add	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	4b24      	ldr	r3, [pc, #144]	; (8007638 <vPortFree+0xb8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4013      	ands	r3, r2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <vPortFree+0x44>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60fb      	str	r3, [r7, #12]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <vPortFree+0x62>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	60bb      	str	r3, [r7, #8]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	4b14      	ldr	r3, [pc, #80]	; (8007638 <vPortFree+0xb8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01e      	beq.n	800762e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11a      	bne.n	800762e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <vPortFree+0xb8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	43db      	mvns	r3, r3
 8007602:	401a      	ands	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007608:	f7fe fc6c 	bl	8005ee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <vPortFree+0xbc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4413      	add	r3, r2
 8007616:	4a09      	ldr	r2, [pc, #36]	; (800763c <vPortFree+0xbc>)
 8007618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800761a:	6938      	ldr	r0, [r7, #16]
 800761c:	f000 f874 	bl	8007708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <vPortFree+0xc0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	4a06      	ldr	r2, [pc, #24]	; (8007640 <vPortFree+0xc0>)
 8007628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800762a:	f7fe fc69 	bl	8005f00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	2000deac 	.word	0x2000deac
 800763c:	2000de9c 	.word	0x2000de9c
 8007640:	2000dea8 	.word	0x2000dea8

08007644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800764a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800764e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007650:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <prvHeapInit+0xac>)
 8007652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3307      	adds	r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <prvHeapInit+0xac>)
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <prvHeapInit+0xb0>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <prvHeapInit+0xb0>)
 8007684:	2200      	movs	r2, #0
 8007686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007690:	2208      	movs	r2, #8
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0307 	bic.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <prvHeapInit+0xb4>)
 80076a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvHeapInit+0xb4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <prvHeapInit+0xb4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c4:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <prvHeapInit+0xb4>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <prvHeapInit+0xb8>)
 80076d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4a09      	ldr	r2, [pc, #36]	; (8007700 <prvHeapInit+0xbc>)
 80076da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076dc:	4b09      	ldr	r3, [pc, #36]	; (8007704 <prvHeapInit+0xc0>)
 80076de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	2000a290 	.word	0x2000a290
 80076f4:	2000de90 	.word	0x2000de90
 80076f8:	2000de98 	.word	0x2000de98
 80076fc:	2000dea0 	.word	0x2000dea0
 8007700:	2000de9c 	.word	0x2000de9c
 8007704:	2000deac 	.word	0x2000deac

08007708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007710:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <prvInsertBlockIntoFreeList+0xac>)
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e002      	b.n	800771c <prvInsertBlockIntoFreeList+0x14>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d8f7      	bhi.n	8007716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4413      	add	r3, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d108      	bne.n	800774a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d118      	bne.n	8007790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d00d      	beq.n	8007786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	441a      	add	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e008      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e003      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	429a      	cmp	r2, r3
 800779e:	d002      	beq.n	80077a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	2000de90 	.word	0x2000de90
 80077b8:	2000de98 	.word	0x2000de98

080077bc <rcl_get_zero_initialized_publisher>:
 80077bc:	4b01      	ldr	r3, [pc, #4]	; (80077c4 <rcl_get_zero_initialized_publisher+0x8>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	08015a24 	.word	0x08015a24

080077c8 <rcl_publisher_init>:
 80077c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077cc:	b088      	sub	sp, #32
 80077ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	d069      	beq.n	80078a8 <rcl_publisher_init+0xe0>
 80077d4:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80077d8:	4604      	mov	r4, r0
 80077da:	4648      	mov	r0, r9
 80077dc:	460e      	mov	r6, r1
 80077de:	4690      	mov	r8, r2
 80077e0:	461f      	mov	r7, r3
 80077e2:	f001 f845 	bl	8008870 <rcutils_allocator_is_valid>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d05e      	beq.n	80078a8 <rcl_publisher_init+0xe0>
 80077ea:	2c00      	cmp	r4, #0
 80077ec:	d05c      	beq.n	80078a8 <rcl_publisher_init+0xe0>
 80077ee:	f8d4 a000 	ldr.w	sl, [r4]
 80077f2:	f1ba 0f00 	cmp.w	sl, #0
 80077f6:	d004      	beq.n	8007802 <rcl_publisher_init+0x3a>
 80077f8:	2764      	movs	r7, #100	; 0x64
 80077fa:	4638      	mov	r0, r7
 80077fc:	b008      	add	sp, #32
 80077fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007802:	4630      	mov	r0, r6
 8007804:	f006 faca 	bl	800dd9c <rcl_node_is_valid>
 8007808:	2800      	cmp	r0, #0
 800780a:	d052      	beq.n	80078b2 <rcl_publisher_init+0xea>
 800780c:	f1b8 0f00 	cmp.w	r8, #0
 8007810:	d04a      	beq.n	80078a8 <rcl_publisher_init+0xe0>
 8007812:	2f00      	cmp	r7, #0
 8007814:	d048      	beq.n	80078a8 <rcl_publisher_init+0xe0>
 8007816:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800781a:	aa07      	add	r2, sp, #28
 800781c:	9205      	str	r2, [sp, #20]
 800781e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007826:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800782a:	f8cd a01c 	str.w	sl, [sp, #28]
 800782e:	4639      	mov	r1, r7
 8007830:	e899 000c 	ldmia.w	r9, {r2, r3}
 8007834:	4630      	mov	r0, r6
 8007836:	f006 fb05 	bl	800de44 <rcl_node_resolve_name>
 800783a:	4607      	mov	r7, r0
 800783c:	2800      	cmp	r0, #0
 800783e:	d14f      	bne.n	80078e0 <rcl_publisher_init+0x118>
 8007840:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007842:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007844:	20c8      	movs	r0, #200	; 0xc8
 8007846:	4798      	blx	r3
 8007848:	6020      	str	r0, [r4, #0]
 800784a:	2800      	cmp	r0, #0
 800784c:	d04e      	beq.n	80078ec <rcl_publisher_init+0x124>
 800784e:	4630      	mov	r0, r6
 8007850:	f006 fac6 	bl	800dde0 <rcl_node_get_rmw_handle>
 8007854:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	9a07      	ldr	r2, [sp, #28]
 800785c:	6827      	ldr	r7, [r4, #0]
 800785e:	462b      	mov	r3, r5
 8007860:	4641      	mov	r1, r8
 8007862:	f001 f913 	bl	8008a8c <rmw_create_publisher>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800786c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007870:	b370      	cbz	r0, 80078d0 <rcl_publisher_init+0x108>
 8007872:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007876:	f001 f9e7 	bl	8008c48 <rmw_publisher_get_actual_qos>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	4607      	mov	r7, r0
 800787e:	b9d0      	cbnz	r0, 80078b6 <rcl_publisher_init+0xee>
 8007880:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8007884:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8007888:	4629      	mov	r1, r5
 800788a:	2270      	movs	r2, #112	; 0x70
 800788c:	4618      	mov	r0, r3
 800788e:	f00d f8fc 	bl	8014a8a <memcpy>
 8007892:	6832      	ldr	r2, [r6, #0]
 8007894:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8007898:	9807      	ldr	r0, [sp, #28]
 800789a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800789c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800789e:	4798      	blx	r3
 80078a0:	4638      	mov	r0, r7
 80078a2:	b008      	add	sp, #32
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	270b      	movs	r7, #11
 80078aa:	4638      	mov	r0, r7
 80078ac:	b008      	add	sp, #32
 80078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b2:	27c8      	movs	r7, #200	; 0xc8
 80078b4:	e7a1      	b.n	80077fa <rcl_publisher_init+0x32>
 80078b6:	b18b      	cbz	r3, 80078dc <rcl_publisher_init+0x114>
 80078b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80078bc:	b142      	cbz	r2, 80078d0 <rcl_publisher_init+0x108>
 80078be:	4630      	mov	r0, r6
 80078c0:	f006 fa8e 	bl	800dde0 <rcl_node_get_rmw_handle>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80078ca:	f001 f9cd 	bl	8008c68 <rmw_destroy_publisher>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80078d2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80078d4:	4618      	mov	r0, r3
 80078d6:	4790      	blx	r2
 80078d8:	2300      	movs	r3, #0
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	2701      	movs	r7, #1
 80078de:	e7db      	b.n	8007898 <rcl_publisher_init+0xd0>
 80078e0:	2867      	cmp	r0, #103	; 0x67
 80078e2:	d0d9      	beq.n	8007898 <rcl_publisher_init+0xd0>
 80078e4:	2869      	cmp	r0, #105	; 0x69
 80078e6:	d003      	beq.n	80078f0 <rcl_publisher_init+0x128>
 80078e8:	280a      	cmp	r0, #10
 80078ea:	d1f7      	bne.n	80078dc <rcl_publisher_init+0x114>
 80078ec:	270a      	movs	r7, #10
 80078ee:	e7d3      	b.n	8007898 <rcl_publisher_init+0xd0>
 80078f0:	2767      	movs	r7, #103	; 0x67
 80078f2:	e7d1      	b.n	8007898 <rcl_publisher_init+0xd0>

080078f4 <rcl_publisher_get_default_options>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4d14      	ldr	r5, [pc, #80]	; (8007948 <rcl_publisher_get_default_options+0x54>)
 80078f8:	4914      	ldr	r1, [pc, #80]	; (800794c <rcl_publisher_get_default_options+0x58>)
 80078fa:	b088      	sub	sp, #32
 80078fc:	4604      	mov	r4, r0
 80078fe:	2250      	movs	r2, #80	; 0x50
 8007900:	4628      	mov	r0, r5
 8007902:	f00d f8c2 	bl	8014a8a <memcpy>
 8007906:	a802      	add	r0, sp, #8
 8007908:	f000 ffa4 	bl	8008854 <rcutils_get_default_allocator>
 800790c:	f10d 0c08 	add.w	ip, sp, #8
 8007910:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007914:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8007918:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800791c:	466e      	mov	r6, sp
 800791e:	f8dc 3000 	ldr.w	r3, [ip]
 8007922:	f8ce 3000 	str.w	r3, [lr]
 8007926:	4630      	mov	r0, r6
 8007928:	f001 f832 	bl	8008990 <rmw_get_default_publisher_options>
 800792c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007930:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007934:	e883 0003 	stmia.w	r3, {r0, r1}
 8007938:	2270      	movs	r2, #112	; 0x70
 800793a:	4629      	mov	r1, r5
 800793c:	4620      	mov	r0, r4
 800793e:	f00d f8a4 	bl	8014a8a <memcpy>
 8007942:	4620      	mov	r0, r4
 8007944:	b008      	add	sp, #32
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	2000deb0 	.word	0x2000deb0
 800794c:	08015a28 	.word	0x08015a28

08007950 <rcl_publish>:
 8007950:	b1f8      	cbz	r0, 8007992 <rcl_publish+0x42>
 8007952:	6803      	ldr	r3, [r0, #0]
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4604      	mov	r4, r0
 8007958:	b1b3      	cbz	r3, 8007988 <rcl_publish+0x38>
 800795a:	4616      	mov	r6, r2
 800795c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007960:	b192      	cbz	r2, 8007988 <rcl_publish+0x38>
 8007962:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8007966:	460d      	mov	r5, r1
 8007968:	f005 fe3e 	bl	800d5e8 <rcl_context_is_valid>
 800796c:	b160      	cbz	r0, 8007988 <rcl_publish+0x38>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007974:	b140      	cbz	r0, 8007988 <rcl_publish+0x38>
 8007976:	b155      	cbz	r5, 800798e <rcl_publish+0x3e>
 8007978:	4632      	mov	r2, r6
 800797a:	4629      	mov	r1, r5
 800797c:	f001 f826 	bl	80089cc <rmw_publish>
 8007980:	3800      	subs	r0, #0
 8007982:	bf18      	it	ne
 8007984:	2001      	movne	r0, #1
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800798c:	bd70      	pop	{r4, r5, r6, pc}
 800798e:	200b      	movs	r0, #11
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007996:	4770      	bx	lr

08007998 <rcl_publisher_is_valid>:
 8007998:	b1a0      	cbz	r0, 80079c4 <rcl_publisher_is_valid+0x2c>
 800799a:	6803      	ldr	r3, [r0, #0]
 800799c:	b510      	push	{r4, lr}
 800799e:	4604      	mov	r4, r0
 80079a0:	b173      	cbz	r3, 80079c0 <rcl_publisher_is_valid+0x28>
 80079a2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80079a6:	b15a      	cbz	r2, 80079c0 <rcl_publisher_is_valid+0x28>
 80079a8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80079ac:	f005 fe1c 	bl	800d5e8 <rcl_context_is_valid>
 80079b0:	b130      	cbz	r0, 80079c0 <rcl_publisher_is_valid+0x28>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80079b8:	3800      	subs	r0, #0
 80079ba:	bf18      	it	ne
 80079bc:	2001      	movne	r0, #1
 80079be:	bd10      	pop	{r4, pc}
 80079c0:	2000      	movs	r0, #0
 80079c2:	bd10      	pop	{r4, pc}
 80079c4:	2000      	movs	r0, #0
 80079c6:	4770      	bx	lr

080079c8 <rcl_publisher_is_valid_except_context>:
 80079c8:	b130      	cbz	r0, 80079d8 <rcl_publisher_is_valid_except_context+0x10>
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	b120      	cbz	r0, 80079d8 <rcl_publisher_is_valid_except_context+0x10>
 80079ce:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80079d2:	3800      	subs	r0, #0
 80079d4:	bf18      	it	ne
 80079d6:	2001      	movne	r0, #1
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop

080079dc <_rclc_check_for_new_data>:
 80079dc:	2800      	cmp	r0, #0
 80079de:	d046      	beq.n	8007a6e <_rclc_check_for_new_data+0x92>
 80079e0:	b510      	push	{r4, lr}
 80079e2:	7802      	ldrb	r2, [r0, #0]
 80079e4:	b084      	sub	sp, #16
 80079e6:	4603      	mov	r3, r0
 80079e8:	2a0a      	cmp	r2, #10
 80079ea:	d842      	bhi.n	8007a72 <_rclc_check_for_new_data+0x96>
 80079ec:	e8df f002 	tbb	[pc, r2]
 80079f0:	14181212 	.word	0x14181212
 80079f4:	06060614 	.word	0x06060614
 80079f8:	2e1a      	.short	0x2e1a
 80079fa:	16          	.byte	0x16
 80079fb:	00          	.byte	0x00
 80079fc:	6a0a      	ldr	r2, [r1, #32]
 80079fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007a04:	2000      	movs	r0, #0
 8007a06:	1a12      	subs	r2, r2, r0
 8007a08:	bf18      	it	ne
 8007a0a:	2201      	movne	r2, #1
 8007a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007a10:	b004      	add	sp, #16
 8007a12:	bd10      	pop	{r4, pc}
 8007a14:	680a      	ldr	r2, [r1, #0]
 8007a16:	e7f2      	b.n	80079fe <_rclc_check_for_new_data+0x22>
 8007a18:	698a      	ldr	r2, [r1, #24]
 8007a1a:	e7f0      	b.n	80079fe <_rclc_check_for_new_data+0x22>
 8007a1c:	688a      	ldr	r2, [r1, #8]
 8007a1e:	e7ee      	b.n	80079fe <_rclc_check_for_new_data+0x22>
 8007a20:	690a      	ldr	r2, [r1, #16]
 8007a22:	e7ec      	b.n	80079fe <_rclc_check_for_new_data+0x22>
 8007a24:	685c      	ldr	r4, [r3, #4]
 8007a26:	4608      	mov	r0, r1
 8007a28:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8007a2c:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8007a30:	f104 0342 	add.w	r3, r4, #66	; 0x42
 8007a34:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8007a3e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8007a42:	f104 0110 	add.w	r1, r4, #16
 8007a46:	f007 fecb 	bl	800f7e0 <rcl_action_client_wait_set_get_entities_ready>
 8007a4a:	e7e1      	b.n	8007a10 <_rclc_check_for_new_data+0x34>
 8007a4c:	685c      	ldr	r4, [r3, #4]
 8007a4e:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8007a52:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8007a56:	e9cd 3200 	strd	r3, r2, [sp]
 8007a5a:	4608      	mov	r0, r1
 8007a5c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8007a60:	f104 0220 	add.w	r2, r4, #32
 8007a64:	f104 0110 	add.w	r1, r4, #16
 8007a68:	f008 f8d0 	bl	800fc0c <rcl_action_server_wait_set_get_entities_ready>
 8007a6c:	e7d0      	b.n	8007a10 <_rclc_check_for_new_data+0x34>
 8007a6e:	200b      	movs	r0, #11
 8007a70:	4770      	bx	lr
 8007a72:	2001      	movs	r0, #1
 8007a74:	e7cc      	b.n	8007a10 <_rclc_check_for_new_data+0x34>
 8007a76:	bf00      	nop

08007a78 <_rclc_take_new_data>:
 8007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7a:	b09b      	sub	sp, #108	; 0x6c
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f000 8088 	beq.w	8007b92 <_rclc_take_new_data+0x11a>
 8007a82:	7803      	ldrb	r3, [r0, #0]
 8007a84:	4604      	mov	r4, r0
 8007a86:	2b0a      	cmp	r3, #10
 8007a88:	f200 8167 	bhi.w	8007d5a <_rclc_take_new_data+0x2e2>
 8007a8c:	e8df f003 	tbb	[pc, r3]
 8007a90:	44152d2d 	.word	0x44152d2d
 8007a94:	19191944 	.word	0x19191944
 8007a98:	065a      	.short	0x065a
 8007a9a:	15          	.byte	0x15
 8007a9b:	00          	.byte	0x00
 8007a9c:	6840      	ldr	r0, [r0, #4]
 8007a9e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f040 80b2 	bne.w	8007c0c <_rclc_take_new_data+0x194>
 8007aa8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 80e4 	bne.w	8007c7a <_rclc_take_new_data+0x202>
 8007ab2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d16f      	bne.n	8007b9a <_rclc_take_new_data+0x122>
 8007aba:	2500      	movs	r5, #0
 8007abc:	4628      	mov	r0, r5
 8007abe:	b01b      	add	sp, #108	; 0x6c
 8007ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007ac4:	6a0b      	ldr	r3, [r1, #32]
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0f5      	beq.n	8007aba <_rclc_take_new_data+0x42>
 8007ace:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8007ad2:	f104 0110 	add.w	r1, r4, #16
 8007ad6:	f006 fb5f 	bl	800e198 <rcl_take_request>
 8007ada:	4605      	mov	r5, r0
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d0ec      	beq.n	8007aba <_rclc_take_new_data+0x42>
 8007ae0:	f240 2359 	movw	r3, #601	; 0x259
 8007ae4:	4298      	cmp	r0, r3
 8007ae6:	d013      	beq.n	8007b10 <_rclc_take_new_data+0x98>
 8007ae8:	e029      	b.n	8007b3e <_rclc_take_new_data+0xc6>
 8007aea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007aec:	680b      	ldr	r3, [r1, #0]
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0e1      	beq.n	8007aba <_rclc_take_new_data+0x42>
 8007af6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8007afa:	2300      	movs	r3, #0
 8007afc:	aa0a      	add	r2, sp, #40	; 0x28
 8007afe:	f006 fc89 	bl	800e414 <rcl_take>
 8007b02:	4605      	mov	r5, r0
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d0d9      	beq.n	8007abc <_rclc_take_new_data+0x44>
 8007b08:	f240 1391 	movw	r3, #401	; 0x191
 8007b0c:	4298      	cmp	r0, r3
 8007b0e:	d116      	bne.n	8007b3e <_rclc_take_new_data+0xc6>
 8007b10:	2300      	movs	r3, #0
 8007b12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8007b16:	e7d1      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007b18:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007b1a:	698b      	ldr	r3, [r1, #24]
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0ca      	beq.n	8007aba <_rclc_take_new_data+0x42>
 8007b24:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8007b28:	f104 0110 	add.w	r1, r4, #16
 8007b2c:	f005 fcec 	bl	800d508 <rcl_take_response>
 8007b30:	4605      	mov	r5, r0
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d0c1      	beq.n	8007aba <_rclc_take_new_data+0x42>
 8007b36:	f240 13f5 	movw	r3, #501	; 0x1f5
 8007b3a:	4298      	cmp	r0, r3
 8007b3c:	d0be      	beq.n	8007abc <_rclc_take_new_data+0x44>
 8007b3e:	f000 febb 	bl	80088b8 <rcutils_reset_error>
 8007b42:	e7bb      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007b44:	6840      	ldr	r0, [r0, #4]
 8007b46:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d17d      	bne.n	8007c4a <_rclc_take_new_data+0x1d2>
 8007b4e:	69c3      	ldr	r3, [r0, #28]
 8007b50:	b11b      	cbz	r3, 8007b5a <_rclc_take_new_data+0xe2>
 8007b52:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d144      	bne.n	8007be4 <_rclc_take_new_data+0x16c>
 8007b5a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f040 80ac 	bne.w	8007cbc <_rclc_take_new_data+0x244>
 8007b64:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0a6      	beq.n	8007aba <_rclc_take_new_data+0x42>
 8007b6c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007b6e:	a90a      	add	r1, sp, #40	; 0x28
 8007b70:	3010      	adds	r0, #16
 8007b72:	f007 fd0d 	bl	800f590 <rcl_action_take_result_response>
 8007b76:	4605      	mov	r5, r0
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d1e0      	bne.n	8007b3e <_rclc_take_new_data+0xc6>
 8007b7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007b80:	6860      	ldr	r0, [r4, #4]
 8007b82:	f008 f967 	bl	800fe54 <rclc_action_find_handle_by_result_request_sequence_number>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d098      	beq.n	8007abc <_rclc_take_new_data+0x44>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8007b90:	e794      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007b92:	250b      	movs	r5, #11
 8007b94:	4628      	mov	r0, r5
 8007b96:	b01b      	add	sp, #108	; 0x6c
 8007b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b9a:	ae04      	add	r6, sp, #16
 8007b9c:	aa0a      	add	r2, sp, #40	; 0x28
 8007b9e:	3010      	adds	r0, #16
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	f007 ff67 	bl	800fa74 <rcl_action_take_cancel_request>
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d1c8      	bne.n	8007b3e <_rclc_take_new_data+0xc6>
 8007bac:	6860      	ldr	r0, [r4, #4]
 8007bae:	a90a      	add	r1, sp, #40	; 0x28
 8007bb0:	f008 f90e 	bl	800fdd0 <rclc_action_find_goal_handle_by_uuid>
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f000 80bb 	beq.w	8007d32 <_rclc_take_new_data+0x2ba>
 8007bbc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	f008 f88f 	bl	800fce4 <rcl_action_transition_goal_state>
 8007bc6:	2803      	cmp	r0, #3
 8007bc8:	4684      	mov	ip, r0
 8007bca:	f040 80a7 	bne.w	8007d1c <_rclc_take_new_data+0x2a4>
 8007bce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007bd0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8007bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007bda:	e884 0003 	stmia.w	r4, {r0, r1}
 8007bde:	f887 c008 	strb.w	ip, [r7, #8]
 8007be2:	e76b      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007be4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007be6:	3010      	adds	r0, #16
 8007be8:	f007 fd52 	bl	800f690 <rcl_action_take_feedback>
 8007bec:	4605      	mov	r5, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d1a5      	bne.n	8007b3e <_rclc_take_new_data+0xc6>
 8007bf2:	6860      	ldr	r0, [r4, #4]
 8007bf4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007bf6:	f008 f8eb 	bl	800fdd0 <rclc_action_find_goal_handle_by_uuid>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f000 80a3 	beq.w	8007d48 <_rclc_take_new_data+0x2d0>
 8007c02:	2201      	movs	r2, #1
 8007c04:	6860      	ldr	r0, [r4, #4]
 8007c06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8007c0a:	e7a6      	b.n	8007b5a <_rclc_take_new_data+0xe2>
 8007c0c:	f008 f8ba 	bl	800fd84 <rclc_action_take_goal_handle>
 8007c10:	4606      	mov	r6, r0
 8007c12:	6860      	ldr	r0, [r4, #4]
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	f43f af47 	beq.w	8007aa8 <_rclc_take_new_data+0x30>
 8007c1a:	6070      	str	r0, [r6, #4]
 8007c1c:	69f2      	ldr	r2, [r6, #28]
 8007c1e:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8007c22:	3010      	adds	r0, #16
 8007c24:	f007 fe70 	bl	800f908 <rcl_action_take_goal_request>
 8007c28:	4605      	mov	r5, r0
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f040 808e 	bne.w	8007d4c <_rclc_take_new_data+0x2d4>
 8007c30:	69f7      	ldr	r7, [r6, #28]
 8007c32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007c34:	7235      	strb	r5, [r6, #8]
 8007c36:	f8c6 0009 	str.w	r0, [r6, #9]
 8007c3a:	f8c6 100d 	str.w	r1, [r6, #13]
 8007c3e:	6860      	ldr	r0, [r4, #4]
 8007c40:	f8c6 2011 	str.w	r2, [r6, #17]
 8007c44:	f8c6 3015 	str.w	r3, [r6, #21]
 8007c48:	e72e      	b.n	8007aa8 <_rclc_take_new_data+0x30>
 8007c4a:	aa04      	add	r2, sp, #16
 8007c4c:	a90a      	add	r1, sp, #40	; 0x28
 8007c4e:	3010      	adds	r0, #16
 8007c50:	f007 fc26 	bl	800f4a0 <rcl_action_take_goal_response>
 8007c54:	4605      	mov	r5, r0
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f47f af71 	bne.w	8007b3e <_rclc_take_new_data+0xc6>
 8007c5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007c60:	6860      	ldr	r0, [r4, #4]
 8007c62:	f008 f8e5 	bl	800fe30 <rclc_action_find_handle_by_goal_request_sequence_number>
 8007c66:	b130      	cbz	r0, 8007c76 <_rclc_take_new_data+0x1fe>
 8007c68:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007c6c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8007c70:	2201      	movs	r2, #1
 8007c72:	f880 2020 	strb.w	r2, [r0, #32]
 8007c76:	6860      	ldr	r0, [r4, #4]
 8007c78:	e769      	b.n	8007b4e <_rclc_take_new_data+0xd6>
 8007c7a:	aa04      	add	r2, sp, #16
 8007c7c:	3010      	adds	r0, #16
 8007c7e:	a90a      	add	r1, sp, #40	; 0x28
 8007c80:	f007 feb8 	bl	800f9f4 <rcl_action_take_result_request>
 8007c84:	4605      	mov	r5, r0
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f47f af59 	bne.w	8007b3e <_rclc_take_new_data+0xc6>
 8007c8c:	6860      	ldr	r0, [r4, #4]
 8007c8e:	a904      	add	r1, sp, #16
 8007c90:	f008 f89e 	bl	800fdd0 <rclc_action_find_goal_handle_by_uuid>
 8007c94:	4607      	mov	r7, r0
 8007c96:	b160      	cbz	r0, 8007cb2 <_rclc_take_new_data+0x23a>
 8007c98:	ad0a      	add	r5, sp, #40	; 0x28
 8007c9a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8007c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ca0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007ca2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ca6:	f04f 0c02 	mov.w	ip, #2
 8007caa:	e886 0003 	stmia.w	r6, {r0, r1}
 8007cae:	f887 c008 	strb.w	ip, [r7, #8]
 8007cb2:	6860      	ldr	r0, [r4, #4]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8007cba:	e6fa      	b.n	8007ab2 <_rclc_take_new_data+0x3a>
 8007cbc:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8007cc0:	a90a      	add	r1, sp, #40	; 0x28
 8007cc2:	3010      	adds	r0, #16
 8007cc4:	f007 fca4 	bl	800f610 <rcl_action_take_cancel_response>
 8007cc8:	4605      	mov	r5, r0
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	f47f af37 	bne.w	8007b3e <_rclc_take_new_data+0xc6>
 8007cd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007cd4:	6860      	ldr	r0, [r4, #4]
 8007cd6:	f008 f8cf 	bl	800fe78 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	6860      	ldr	r0, [r4, #4]
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	f43f af40 	beq.w	8007b64 <_rclc_take_new_data+0xec>
 8007ce4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007ce6:	2701      	movs	r7, #1
 8007ce8:	84b7      	strh	r7, [r6, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f43f af3a 	beq.w	8007b64 <_rclc_take_new_data+0xec>
 8007cf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007cf2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007cf6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007cfa:	f008 f869 	bl	800fdd0 <rclc_action_find_goal_handle_by_uuid>
 8007cfe:	b138      	cbz	r0, 8007d10 <_rclc_take_new_data+0x298>
 8007d00:	6860      	ldr	r0, [r4, #4]
 8007d02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d04:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8007d08:	3501      	adds	r5, #1
 8007d0a:	42ab      	cmp	r3, r5
 8007d0c:	d8f0      	bhi.n	8007cf0 <_rclc_take_new_data+0x278>
 8007d0e:	e729      	b.n	8007b64 <_rclc_take_new_data+0xec>
 8007d10:	6860      	ldr	r0, [r4, #4]
 8007d12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d14:	3501      	adds	r5, #1
 8007d16:	42ab      	cmp	r3, r5
 8007d18:	d8ea      	bhi.n	8007cf0 <_rclc_take_new_data+0x278>
 8007d1a:	e723      	b.n	8007b64 <_rclc_take_new_data+0xec>
 8007d1c:	ab06      	add	r3, sp, #24
 8007d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007d24:	2103      	movs	r1, #3
 8007d26:	e896 000c 	ldmia.w	r6, {r2, r3}
 8007d2a:	6860      	ldr	r0, [r4, #4]
 8007d2c:	f008 f918 	bl	800ff60 <rclc_action_server_goal_cancel_reject>
 8007d30:	e6c4      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007d32:	ab06      	add	r3, sp, #24
 8007d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d36:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007d3a:	2102      	movs	r1, #2
 8007d3c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8007d40:	6860      	ldr	r0, [r4, #4]
 8007d42:	f008 f90d 	bl	800ff60 <rclc_action_server_goal_cancel_reject>
 8007d46:	e6b9      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007d48:	6860      	ldr	r0, [r4, #4]
 8007d4a:	e706      	b.n	8007b5a <_rclc_take_new_data+0xe2>
 8007d4c:	6860      	ldr	r0, [r4, #4]
 8007d4e:	4631      	mov	r1, r6
 8007d50:	f008 f828 	bl	800fda4 <rclc_action_remove_used_goal_handle>
 8007d54:	f000 fdb0 	bl	80088b8 <rcutils_reset_error>
 8007d58:	e6b0      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007d5a:	2501      	movs	r5, #1
 8007d5c:	e6ae      	b.n	8007abc <_rclc_take_new_data+0x44>
 8007d5e:	bf00      	nop

08007d60 <_rclc_execute.part.0>:
 8007d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d62:	7803      	ldrb	r3, [r0, #0]
 8007d64:	b087      	sub	sp, #28
 8007d66:	4604      	mov	r4, r0
 8007d68:	2b0a      	cmp	r3, #10
 8007d6a:	f200 8136 	bhi.w	8007fda <_rclc_execute.part.0+0x27a>
 8007d6e:	e8df f003 	tbb	[pc, r3]
 8007d72:	435e      	.short	0x435e
 8007d74:	06a1664f 	.word	0x06a1664f
 8007d78:	6c1e0606 	.word	0x6c1e0606
 8007d7c:	59          	.byte	0x59
 8007d7d:	00          	.byte	0x00
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	f000 8122 	beq.w	8007fc8 <_rclc_execute.part.0+0x268>
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007d88:	f040 8118 	bne.w	8007fbc <_rclc_execute.part.0+0x25c>
 8007d8c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8007d90:	6880      	ldr	r0, [r0, #8]
 8007d92:	4798      	blx	r3
 8007d94:	f104 0110 	add.w	r1, r4, #16
 8007d98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007d9a:	6860      	ldr	r0, [r4, #4]
 8007d9c:	f006 fa3c 	bl	800e218 <rcl_send_response>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d033      	beq.n	8007e0c <_rclc_execute.part.0+0xac>
 8007da4:	9005      	str	r0, [sp, #20]
 8007da6:	f000 fd87 	bl	80088b8 <rcutils_reset_error>
 8007daa:	9805      	ldr	r0, [sp, #20]
 8007dac:	e02e      	b.n	8007e0c <_rclc_execute.part.0+0xac>
 8007dae:	6840      	ldr	r0, [r0, #4]
 8007db0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8086 	beq.w	8007ec6 <_rclc_execute.part.0+0x166>
 8007dba:	2600      	movs	r6, #0
 8007dbc:	2701      	movs	r7, #1
 8007dbe:	e004      	b.n	8007dca <_rclc_execute.part.0+0x6a>
 8007dc0:	f007 ffba 	bl	800fd38 <rclc_action_send_result_request>
 8007dc4:	b998      	cbnz	r0, 8007dee <_rclc_execute.part.0+0x8e>
 8007dc6:	722f      	strb	r7, [r5, #8]
 8007dc8:	6860      	ldr	r0, [r4, #4]
 8007dca:	f008 f867 	bl	800fe9c <rclc_action_find_first_handle_with_goal_response>
 8007dce:	4605      	mov	r5, r0
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d077      	beq.n	8007ec4 <_rclc_execute.part.0+0x164>
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8007dde:	f885 6020 	strb.w	r6, [r5, #32]
 8007de2:	4798      	blx	r3
 8007de4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8007de8:	4628      	mov	r0, r5
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e8      	bne.n	8007dc0 <_rclc_execute.part.0+0x60>
 8007dee:	6860      	ldr	r0, [r4, #4]
 8007df0:	4629      	mov	r1, r5
 8007df2:	f007 ffd7 	bl	800fda4 <rclc_action_remove_used_goal_handle>
 8007df6:	e7e7      	b.n	8007dc8 <_rclc_execute.part.0+0x68>
 8007df8:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8007dfc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	f000 80c9 	beq.w	8007f98 <_rclc_execute.part.0+0x238>
 8007e06:	6880      	ldr	r0, [r0, #8]
 8007e08:	4798      	blx	r3
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	b007      	add	sp, #28
 8007e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e10:	6840      	ldr	r0, [r0, #4]
 8007e12:	f006 fc03 	bl	800e61c <rcl_timer_call>
 8007e16:	f240 3321 	movw	r3, #801	; 0x321
 8007e1a:	4298      	cmp	r0, r3
 8007e1c:	d004      	beq.n	8007e28 <_rclc_execute.part.0+0xc8>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0f4      	beq.n	8007e0c <_rclc_execute.part.0+0xac>
 8007e22:	e7bf      	b.n	8007da4 <_rclc_execute.part.0+0x44>
 8007e24:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007e26:	4798      	blx	r3
 8007e28:	2000      	movs	r0, #0
 8007e2a:	b007      	add	sp, #28
 8007e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e2e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8007e32:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007e34:	b925      	cbnz	r5, 8007e40 <_rclc_execute.part.0+0xe0>
 8007e36:	4628      	mov	r0, r5
 8007e38:	4798      	blx	r3
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	e7e6      	b.n	8007e0c <_rclc_execute.part.0+0xac>
 8007e3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007e40:	68a0      	ldr	r0, [r4, #8]
 8007e42:	4798      	blx	r3
 8007e44:	2000      	movs	r0, #0
 8007e46:	b007      	add	sp, #28
 8007e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4a:	6840      	ldr	r0, [r0, #4]
 8007e4c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007e50:	bb3b      	cbnz	r3, 8007ea2 <_rclc_execute.part.0+0x142>
 8007e52:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d07b      	beq.n	8007f52 <_rclc_execute.part.0+0x1f2>
 8007e5a:	f640 0634 	movw	r6, #2100	; 0x834
 8007e5e:	2701      	movs	r7, #1
 8007e60:	e007      	b.n	8007e72 <_rclc_execute.part.0+0x112>
 8007e62:	4628      	mov	r0, r5
 8007e64:	f008 f832 	bl	800fecc <rclc_action_server_response_goal_request>
 8007e68:	6860      	ldr	r0, [r4, #4]
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f007 ff9a 	bl	800fda4 <rclc_action_remove_used_goal_handle>
 8007e70:	6860      	ldr	r0, [r4, #4]
 8007e72:	2100      	movs	r1, #0
 8007e74:	f007 ffc4 	bl	800fe00 <rclc_action_find_first_handle_by_status>
 8007e78:	4605      	mov	r5, r0
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d066      	beq.n	8007f4c <_rclc_execute.part.0+0x1ec>
 8007e7e:	6863      	ldr	r3, [r4, #4]
 8007e80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	4798      	blx	r3
 8007e86:	42b0      	cmp	r0, r6
 8007e88:	f04f 0100 	mov.w	r1, #0
 8007e8c:	d1e9      	bne.n	8007e62 <_rclc_execute.part.0+0x102>
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4628      	mov	r0, r5
 8007e92:	f008 f81b 	bl	800fecc <rclc_action_server_response_goal_request>
 8007e96:	722f      	strb	r7, [r5, #8]
 8007e98:	e7ea      	b.n	8007e70 <_rclc_execute.part.0+0x110>
 8007e9a:	6848      	ldr	r0, [r1, #4]
 8007e9c:	f007 ff82 	bl	800fda4 <rclc_action_remove_used_goal_handle>
 8007ea0:	6860      	ldr	r0, [r4, #4]
 8007ea2:	f007 ffb9 	bl	800fe18 <rclc_action_find_first_terminated_handle>
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d1f6      	bne.n	8007e9a <_rclc_execute.part.0+0x13a>
 8007eac:	6860      	ldr	r0, [r4, #4]
 8007eae:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8007eb2:	e7ce      	b.n	8007e52 <_rclc_execute.part.0+0xf2>
 8007eb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007eb6:	6880      	ldr	r0, [r0, #8]
 8007eb8:	f104 0110 	add.w	r1, r4, #16
 8007ebc:	4798      	blx	r3
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	b007      	add	sp, #28
 8007ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec4:	6860      	ldr	r0, [r4, #4]
 8007ec6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007eca:	b18b      	cbz	r3, 8007ef0 <_rclc_execute.part.0+0x190>
 8007ecc:	68c5      	ldr	r5, [r0, #12]
 8007ece:	b32d      	cbz	r5, 8007f1c <_rclc_execute.part.0+0x1bc>
 8007ed0:	2600      	movs	r6, #0
 8007ed2:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007ed6:	b143      	cbz	r3, 8007eea <_rclc_execute.part.0+0x18a>
 8007ed8:	69c3      	ldr	r3, [r0, #28]
 8007eda:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8007ede:	b123      	cbz	r3, 8007eea <_rclc_execute.part.0+0x18a>
 8007ee0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007ee2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	4798      	blx	r3
 8007ee8:	6860      	ldr	r0, [r4, #4]
 8007eea:	682d      	ldr	r5, [r5, #0]
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	d1f0      	bne.n	8007ed2 <_rclc_execute.part.0+0x172>
 8007ef0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8007ef4:	b193      	cbz	r3, 8007f1c <_rclc_execute.part.0+0x1bc>
 8007ef6:	68c5      	ldr	r5, [r0, #12]
 8007ef8:	b185      	cbz	r5, 8007f1c <_rclc_execute.part.0+0x1bc>
 8007efa:	2600      	movs	r6, #0
 8007efc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007f00:	b14b      	cbz	r3, 8007f16 <_rclc_execute.part.0+0x1b6>
 8007f02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f04:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8007f08:	b12b      	cbz	r3, 8007f16 <_rclc_execute.part.0+0x1b6>
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8007f10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f12:	4798      	blx	r3
 8007f14:	6860      	ldr	r0, [r4, #4]
 8007f16:	682d      	ldr	r5, [r5, #0]
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	d1ef      	bne.n	8007efc <_rclc_execute.part.0+0x19c>
 8007f1c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d081      	beq.n	8007e28 <_rclc_execute.part.0+0xc8>
 8007f24:	2700      	movs	r7, #0
 8007f26:	e00b      	b.n	8007f40 <_rclc_execute.part.0+0x1e0>
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f2e:	6a1e      	ldr	r6, [r3, #32]
 8007f30:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8007f34:	47b0      	blx	r6
 8007f36:	6860      	ldr	r0, [r4, #4]
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f007 ff33 	bl	800fda4 <rclc_action_remove_used_goal_handle>
 8007f3e:	6860      	ldr	r0, [r4, #4]
 8007f40:	f007 ffb8 	bl	800feb4 <rclc_action_find_first_handle_with_result_response>
 8007f44:	4605      	mov	r5, r0
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d1ee      	bne.n	8007f28 <_rclc_execute.part.0+0x1c8>
 8007f4a:	e76d      	b.n	8007e28 <_rclc_execute.part.0+0xc8>
 8007f4c:	6860      	ldr	r0, [r4, #4]
 8007f4e:	f880 5020 	strb.w	r5, [r0, #32]
 8007f52:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f43f af66 	beq.w	8007e28 <_rclc_execute.part.0+0xc8>
 8007f5c:	68c5      	ldr	r5, [r0, #12]
 8007f5e:	b1b5      	cbz	r5, 8007f8e <_rclc_execute.part.0+0x22e>
 8007f60:	2602      	movs	r6, #2
 8007f62:	e001      	b.n	8007f68 <_rclc_execute.part.0+0x208>
 8007f64:	682d      	ldr	r5, [r5, #0]
 8007f66:	b195      	cbz	r5, 8007f8e <_rclc_execute.part.0+0x22e>
 8007f68:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d1f9      	bne.n	8007f64 <_rclc_execute.part.0+0x204>
 8007f70:	69c3      	ldr	r3, [r0, #28]
 8007f72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007f74:	4628      	mov	r0, r5
 8007f76:	4798      	blx	r3
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8007f84:	b163      	cbz	r3, 8007fa0 <_rclc_execute.part.0+0x240>
 8007f86:	f007 ffbf 	bl	800ff08 <rclc_action_server_goal_cancel_accept>
 8007f8a:	6860      	ldr	r0, [r4, #4]
 8007f8c:	e7ea      	b.n	8007f64 <_rclc_execute.part.0+0x204>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8007f94:	4618      	mov	r0, r3
 8007f96:	e739      	b.n	8007e0c <_rclc_execute.part.0+0xac>
 8007f98:	4628      	mov	r0, r5
 8007f9a:	4798      	blx	r3
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	e735      	b.n	8007e0c <_rclc_execute.part.0+0xac>
 8007fa0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8007fa2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007fa6:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8007faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fae:	6860      	ldr	r0, [r4, #4]
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	f007 ffd5 	bl	800ff60 <rclc_action_server_goal_cancel_reject>
 8007fb6:	722e      	strb	r6, [r5, #8]
 8007fb8:	6860      	ldr	r0, [r4, #4]
 8007fba:	e7d3      	b.n	8007f64 <_rclc_execute.part.0+0x204>
 8007fbc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007fbe:	6880      	ldr	r0, [r0, #8]
 8007fc0:	4798      	blx	r3
 8007fc2:	f104 0110 	add.w	r1, r4, #16
 8007fc6:	e6e7      	b.n	8007d98 <_rclc_execute.part.0+0x38>
 8007fc8:	f100 0110 	add.w	r1, r0, #16
 8007fcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007fce:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007fd0:	6880      	ldr	r0, [r0, #8]
 8007fd2:	9105      	str	r1, [sp, #20]
 8007fd4:	4798      	blx	r3
 8007fd6:	9905      	ldr	r1, [sp, #20]
 8007fd8:	e6de      	b.n	8007d98 <_rclc_execute.part.0+0x38>
 8007fda:	2001      	movs	r0, #1
 8007fdc:	e716      	b.n	8007e0c <_rclc_execute.part.0+0xac>
 8007fde:	bf00      	nop

08007fe0 <rclc_executor_trigger_any>:
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d03f      	beq.n	8008064 <rclc_executor_trigger_any+0x84>
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d03e      	beq.n	8008066 <rclc_executor_trigger_any+0x86>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d037      	beq.n	8008064 <rclc_executor_trigger_any+0x84>
 8007ff4:	b430      	push	{r4, r5}
 8007ff6:	f893 c000 	ldrb.w	ip, [r3]
 8007ffa:	f1bc 0f08 	cmp.w	ip, #8
 8007ffe:	d11e      	bne.n	800803e <rclc_executor_trigger_any+0x5e>
 8008000:	685c      	ldr	r4, [r3, #4]
 8008002:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8008004:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8008008:	d105      	bne.n	8008016 <rclc_executor_trigger_any+0x36>
 800800a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800800e:	b910      	cbnz	r0, 8008016 <rclc_executor_trigger_any+0x36>
 8008010:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8008014:	b128      	cbz	r0, 8008022 <rclc_executor_trigger_any+0x42>
 8008016:	bc30      	pop	{r4, r5}
 8008018:	4770      	bx	lr
 800801a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800801e:	2800      	cmp	r0, #0
 8008020:	d1f9      	bne.n	8008016 <rclc_executor_trigger_any+0x36>
 8008022:	3201      	adds	r2, #1
 8008024:	4291      	cmp	r1, r2
 8008026:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800802a:	d018      	beq.n	800805e <rclc_executor_trigger_any+0x7e>
 800802c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8008030:	2800      	cmp	r0, #0
 8008032:	d0f0      	beq.n	8008016 <rclc_executor_trigger_any+0x36>
 8008034:	f893 c000 	ldrb.w	ip, [r3]
 8008038:	f1bc 0f08 	cmp.w	ip, #8
 800803c:	d0e0      	beq.n	8008000 <rclc_executor_trigger_any+0x20>
 800803e:	f1bc 0f09 	cmp.w	ip, #9
 8008042:	d1ea      	bne.n	800801a <rclc_executor_trigger_any+0x3a>
 8008044:	685c      	ldr	r4, [r3, #4]
 8008046:	6a25      	ldr	r5, [r4, #32]
 8008048:	2d00      	cmp	r5, #0
 800804a:	d1e4      	bne.n	8008016 <rclc_executor_trigger_any+0x36>
 800804c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8008050:	2800      	cmp	r0, #0
 8008052:	d1e0      	bne.n	8008016 <rclc_executor_trigger_any+0x36>
 8008054:	3201      	adds	r2, #1
 8008056:	4291      	cmp	r1, r2
 8008058:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800805c:	d1e6      	bne.n	800802c <rclc_executor_trigger_any+0x4c>
 800805e:	2000      	movs	r0, #0
 8008060:	bc30      	pop	{r4, r5}
 8008062:	4770      	bx	lr
 8008064:	4770      	bx	lr
 8008066:	4608      	mov	r0, r1
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop

0800806c <rclc_executor_get_zero_initialized_executor>:
 800806c:	b510      	push	{r4, lr}
 800806e:	4903      	ldr	r1, [pc, #12]	; (800807c <rclc_executor_get_zero_initialized_executor+0x10>)
 8008070:	4604      	mov	r4, r0
 8008072:	2288      	movs	r2, #136	; 0x88
 8008074:	f00c fd09 	bl	8014a8a <memcpy>
 8008078:	4620      	mov	r0, r4
 800807a:	bd10      	pop	{r4, pc}
 800807c:	08015a78 	.word	0x08015a78

08008080 <rclc_executor_init>:
 8008080:	2800      	cmp	r0, #0
 8008082:	d05f      	beq.n	8008144 <rclc_executor_init+0xc4>
 8008084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008088:	460c      	mov	r4, r1
 800808a:	b0b0      	sub	sp, #192	; 0xc0
 800808c:	2900      	cmp	r1, #0
 800808e:	d051      	beq.n	8008134 <rclc_executor_init+0xb4>
 8008090:	4605      	mov	r5, r0
 8008092:	4618      	mov	r0, r3
 8008094:	4616      	mov	r6, r2
 8008096:	461f      	mov	r7, r3
 8008098:	f000 fbea 	bl	8008870 <rcutils_allocator_is_valid>
 800809c:	2800      	cmp	r0, #0
 800809e:	d049      	beq.n	8008134 <rclc_executor_init+0xb4>
 80080a0:	2e00      	cmp	r6, #0
 80080a2:	d047      	beq.n	8008134 <rclc_executor_init+0xb4>
 80080a4:	492c      	ldr	r1, [pc, #176]	; (8008158 <rclc_executor_init+0xd8>)
 80080a6:	2288      	movs	r2, #136	; 0x88
 80080a8:	a80e      	add	r0, sp, #56	; 0x38
 80080aa:	f00c fcee 	bl	8014a8a <memcpy>
 80080ae:	a90e      	add	r1, sp, #56	; 0x38
 80080b0:	2288      	movs	r2, #136	; 0x88
 80080b2:	4628      	mov	r0, r5
 80080b4:	f00c fce9 	bl	8014a8a <memcpy>
 80080b8:	602c      	str	r4, [r5, #0]
 80080ba:	4668      	mov	r0, sp
 80080bc:	60ae      	str	r6, [r5, #8]
 80080be:	466c      	mov	r4, sp
 80080c0:	f006 fc1e 	bl	800e900 <rcl_get_zero_initialized_wait_set>
 80080c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080c6:	f105 0c14 	add.w	ip, r5, #20
 80080ca:	f8d7 8000 	ldr.w	r8, [r7]
 80080ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80080d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80080d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80080de:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8008150 <rclc_executor_init+0xd0>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	f8cc 3000 	str.w	r3, [ip]
 80080e8:	6939      	ldr	r1, [r7, #16]
 80080ea:	612f      	str	r7, [r5, #16]
 80080ec:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 80080f0:	01b0      	lsls	r0, r6, #6
 80080f2:	47c0      	blx	r8
 80080f4:	6068      	str	r0, [r5, #4]
 80080f6:	b338      	cbz	r0, 8008148 <rclc_executor_init+0xc8>
 80080f8:	2400      	movs	r4, #0
 80080fa:	e000      	b.n	80080fe <rclc_executor_init+0x7e>
 80080fc:	6868      	ldr	r0, [r5, #4]
 80080fe:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8008102:	4631      	mov	r1, r6
 8008104:	3401      	adds	r4, #1
 8008106:	f000 fa6b 	bl	80085e0 <rclc_executor_handle_init>
 800810a:	42a6      	cmp	r6, r4
 800810c:	d1f6      	bne.n	80080fc <rclc_executor_init+0x7c>
 800810e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8008112:	f000 fa5b 	bl	80085cc <rclc_executor_handle_counters_zero_init>
 8008116:	4a11      	ldr	r2, [pc, #68]	; (800815c <rclc_executor_init+0xdc>)
 8008118:	686b      	ldr	r3, [r5, #4]
 800811a:	2000      	movs	r0, #0
 800811c:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 8008120:	b163      	cbz	r3, 800813c <rclc_executor_init+0xbc>
 8008122:	692b      	ldr	r3, [r5, #16]
 8008124:	b153      	cbz	r3, 800813c <rclc_executor_init+0xbc>
 8008126:	68ab      	ldr	r3, [r5, #8]
 8008128:	b143      	cbz	r3, 800813c <rclc_executor_init+0xbc>
 800812a:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800812e:	b030      	add	sp, #192	; 0xc0
 8008130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008134:	200b      	movs	r0, #11
 8008136:	b030      	add	sp, #192	; 0xc0
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	4618      	mov	r0, r3
 800813e:	b030      	add	sp, #192	; 0xc0
 8008140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008144:	200b      	movs	r0, #11
 8008146:	4770      	bx	lr
 8008148:	200a      	movs	r0, #10
 800814a:	e7f4      	b.n	8008136 <rclc_executor_init+0xb6>
 800814c:	f3af 8000 	nop.w
 8008150:	3b9aca00 	.word	0x3b9aca00
 8008154:	00000000 	.word	0x00000000
 8008158:	08015a78 	.word	0x08015a78
 800815c:	08007fe1 	.word	0x08007fe1

08008160 <rclc_executor_add_subscription>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	f89d e018 	ldrb.w	lr, [sp, #24]
 8008166:	b338      	cbz	r0, 80081b8 <rclc_executor_add_subscription+0x58>
 8008168:	b331      	cbz	r1, 80081b8 <rclc_executor_add_subscription+0x58>
 800816a:	b32a      	cbz	r2, 80081b8 <rclc_executor_add_subscription+0x58>
 800816c:	b323      	cbz	r3, 80081b8 <rclc_executor_add_subscription+0x58>
 800816e:	4604      	mov	r4, r0
 8008170:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8008174:	42a8      	cmp	r0, r5
 8008176:	d301      	bcc.n	800817c <rclc_executor_add_subscription+0x1c>
 8008178:	2001      	movs	r0, #1
 800817a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800817c:	6866      	ldr	r6, [r4, #4]
 800817e:	0187      	lsls	r7, r0, #6
 8008180:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8008184:	2500      	movs	r5, #0
 8008186:	55f5      	strb	r5, [r6, r7]
 8008188:	3001      	adds	r0, #1
 800818a:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800818e:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 8008192:	2301      	movs	r3, #1
 8008194:	f104 0514 	add.w	r5, r4, #20
 8008198:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800819c:	f88c e001 	strb.w	lr, [ip, #1]
 80081a0:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 80081a4:	60e0      	str	r0, [r4, #12]
 80081a6:	4628      	mov	r0, r5
 80081a8:	f006 fbbe 	bl	800e928 <rcl_wait_set_is_valid>
 80081ac:	b930      	cbnz	r0, 80081bc <rclc_executor_add_subscription+0x5c>
 80081ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80081b0:	3301      	adds	r3, #1
 80081b2:	2000      	movs	r0, #0
 80081b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80081b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b8:	200b      	movs	r0, #11
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081bc:	4628      	mov	r0, r5
 80081be:	f006 fbb9 	bl	800e934 <rcl_wait_set_fini>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d0f3      	beq.n	80081ae <rclc_executor_add_subscription+0x4e>
 80081c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081c8 <rclc_executor_prepare>:
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d044      	beq.n	8008256 <rclc_executor_prepare+0x8e>
 80081cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ce:	f100 0514 	add.w	r5, r0, #20
 80081d2:	b09b      	sub	sp, #108	; 0x6c
 80081d4:	4604      	mov	r4, r0
 80081d6:	4628      	mov	r0, r5
 80081d8:	f006 fba6 	bl	800e928 <rcl_wait_set_is_valid>
 80081dc:	b110      	cbz	r0, 80081e4 <rclc_executor_prepare+0x1c>
 80081de:	2000      	movs	r0, #0
 80081e0:	b01b      	add	sp, #108	; 0x6c
 80081e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e4:	4628      	mov	r0, r5
 80081e6:	f006 fba5 	bl	800e934 <rcl_wait_set_fini>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d130      	bne.n	8008250 <rclc_executor_prepare+0x88>
 80081ee:	a80c      	add	r0, sp, #48	; 0x30
 80081f0:	f006 fb86 	bl	800e900 <rcl_get_zero_initialized_wait_set>
 80081f4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80081f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80081fc:	46ae      	mov	lr, r5
 80081fe:	6927      	ldr	r7, [r4, #16]
 8008200:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008204:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008208:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800820c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008210:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008214:	f8dc 3000 	ldr.w	r3, [ip]
 8008218:	f8ce 3000 	str.w	r3, [lr]
 800821c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800821e:	ae04      	add	r6, sp, #16
 8008220:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	6033      	str	r3, [r6, #0]
 8008228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800822a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800822c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008230:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8008234:	e9cd 2100 	strd	r2, r1, [sp]
 8008238:	4628      	mov	r0, r5
 800823a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800823c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800823e:	f006 fe77 	bl	800ef30 <rcl_wait_set_init>
 8008242:	2800      	cmp	r0, #0
 8008244:	d0cc      	beq.n	80081e0 <rclc_executor_prepare+0x18>
 8008246:	900b      	str	r0, [sp, #44]	; 0x2c
 8008248:	f000 fb36 	bl	80088b8 <rcutils_reset_error>
 800824c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800824e:	e7c7      	b.n	80081e0 <rclc_executor_prepare+0x18>
 8008250:	f000 fb32 	bl	80088b8 <rcutils_reset_error>
 8008254:	e7cb      	b.n	80081ee <rclc_executor_prepare+0x26>
 8008256:	200b      	movs	r0, #11
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop

0800825c <rclc_executor_spin_some.part.0>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	f100 0614 	add.w	r6, r0, #20
 8008264:	b083      	sub	sp, #12
 8008266:	4691      	mov	r9, r2
 8008268:	4698      	mov	r8, r3
 800826a:	4605      	mov	r5, r0
 800826c:	f7ff ffac 	bl	80081c8 <rclc_executor_prepare>
 8008270:	4630      	mov	r0, r6
 8008272:	f006 fc2b 	bl	800eacc <rcl_wait_set_clear>
 8008276:	4607      	mov	r7, r0
 8008278:	2800      	cmp	r0, #0
 800827a:	f040 80ed 	bne.w	8008458 <rclc_executor_spin_some.part.0+0x1fc>
 800827e:	68ab      	ldr	r3, [r5, #8]
 8008280:	4604      	mov	r4, r0
 8008282:	b303      	cbz	r3, 80082c6 <rclc_executor_spin_some.part.0+0x6a>
 8008284:	6869      	ldr	r1, [r5, #4]
 8008286:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800828a:	01a2      	lsls	r2, r4, #6
 800828c:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8008290:	b1cb      	cbz	r3, 80082c6 <rclc_executor_spin_some.part.0+0x6a>
 8008292:	5c8b      	ldrb	r3, [r1, r2]
 8008294:	2b0a      	cmp	r3, #10
 8008296:	f200 80d8 	bhi.w	800844a <rclc_executor_spin_some.part.0+0x1ee>
 800829a:	e8df f003 	tbb	[pc, r3]
 800829e:	9c9c      	.short	0x9c9c
 80082a0:	068c8ca7 	.word	0x068c8ca7
 80082a4:	bdc90606 	.word	0xbdc90606
 80082a8:	b2          	.byte	0xb2
 80082a9:	00          	.byte	0x00
 80082aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80082ae:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80082b2:	4630      	mov	r0, r6
 80082b4:	f006 ff52 	bl	800f15c <rcl_wait_set_add_service>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f040 8086 	bne.w	80083ca <rclc_executor_spin_some.part.0+0x16e>
 80082be:	68ab      	ldr	r3, [r5, #8]
 80082c0:	3401      	adds	r4, #1
 80082c2:	429c      	cmp	r4, r3
 80082c4:	d3de      	bcc.n	8008284 <rclc_executor_spin_some.part.0+0x28>
 80082c6:	4643      	mov	r3, r8
 80082c8:	464a      	mov	r2, r9
 80082ca:	4630      	mov	r0, r6
 80082cc:	f006 ff74 	bl	800f1b8 <rcl_wait>
 80082d0:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80c7 	beq.w	8008468 <rclc_executor_spin_some.part.0+0x20c>
 80082da:	2b01      	cmp	r3, #1
 80082dc:	f040 80b5 	bne.w	800844a <rclc_executor_spin_some.part.0+0x1ee>
 80082e0:	68ab      	ldr	r3, [r5, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 8159 	beq.w	800859a <rclc_executor_spin_some.part.0+0x33e>
 80082e8:	2400      	movs	r4, #0
 80082ea:	46a0      	mov	r8, r4
 80082ec:	f240 1991 	movw	r9, #401	; 0x191
 80082f0:	e00a      	b.n	8008308 <rclc_executor_spin_some.part.0+0xac>
 80082f2:	f7ff fb73 	bl	80079dc <_rclc_check_for_new_data>
 80082f6:	4604      	mov	r4, r0
 80082f8:	b110      	cbz	r0, 8008300 <rclc_executor_spin_some.part.0+0xa4>
 80082fa:	4548      	cmp	r0, r9
 80082fc:	f040 80b2 	bne.w	8008464 <rclc_executor_spin_some.part.0+0x208>
 8008300:	68ab      	ldr	r3, [r5, #8]
 8008302:	4598      	cmp	r8, r3
 8008304:	f080 8126 	bcs.w	8008554 <rclc_executor_spin_some.part.0+0x2f8>
 8008308:	686a      	ldr	r2, [r5, #4]
 800830a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800830e:	4631      	mov	r1, r6
 8008310:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8008314:	f108 0801 	add.w	r8, r8, #1
 8008318:	f1bc 0f00 	cmp.w	ip, #0
 800831c:	d1e9      	bne.n	80082f2 <rclc_executor_spin_some.part.0+0x96>
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8008326:	4798      	blx	r3
 8008328:	2800      	cmp	r0, #0
 800832a:	f000 809b 	beq.w	8008464 <rclc_executor_spin_some.part.0+0x208>
 800832e:	68ab      	ldr	r3, [r5, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8097 	beq.w	8008464 <rclc_executor_spin_some.part.0+0x208>
 8008336:	f04f 0800 	mov.w	r8, #0
 800833a:	f240 1991 	movw	r9, #401	; 0x191
 800833e:	e009      	b.n	8008354 <rclc_executor_spin_some.part.0+0xf8>
 8008340:	f7ff fb9a 	bl	8007a78 <_rclc_take_new_data>
 8008344:	4604      	mov	r4, r0
 8008346:	b110      	cbz	r0, 800834e <rclc_executor_spin_some.part.0+0xf2>
 8008348:	4548      	cmp	r0, r9
 800834a:	f040 808b 	bne.w	8008464 <rclc_executor_spin_some.part.0+0x208>
 800834e:	68ab      	ldr	r3, [r5, #8]
 8008350:	4598      	cmp	r8, r3
 8008352:	d209      	bcs.n	8008368 <rclc_executor_spin_some.part.0+0x10c>
 8008354:	6868      	ldr	r0, [r5, #4]
 8008356:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800835a:	4631      	mov	r1, r6
 800835c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8008360:	f108 0801 	add.w	r8, r8, #1
 8008364:	2a00      	cmp	r2, #0
 8008366:	d1eb      	bne.n	8008340 <rclc_executor_spin_some.part.0+0xe4>
 8008368:	2600      	movs	r6, #0
 800836a:	b97b      	cbnz	r3, 800838c <rclc_executor_spin_some.part.0+0x130>
 800836c:	e07a      	b.n	8008464 <rclc_executor_spin_some.part.0+0x208>
 800836e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8008372:	2a08      	cmp	r2, #8
 8008374:	f000 80fd 	beq.w	8008572 <rclc_executor_spin_some.part.0+0x316>
 8008378:	2a09      	cmp	r2, #9
 800837a:	f000 80ef 	beq.w	800855c <rclc_executor_spin_some.part.0+0x300>
 800837e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8008382:	b98a      	cbnz	r2, 80083a8 <rclc_executor_spin_some.part.0+0x14c>
 8008384:	3601      	adds	r6, #1
 8008386:	429e      	cmp	r6, r3
 8008388:	d262      	bcs.n	8008450 <rclc_executor_spin_some.part.0+0x1f4>
 800838a:	2400      	movs	r4, #0
 800838c:	686a      	ldr	r2, [r5, #4]
 800838e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8008392:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8008396:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800839a:	2900      	cmp	r1, #0
 800839c:	d062      	beq.n	8008464 <rclc_executor_spin_some.part.0+0x208>
 800839e:	7841      	ldrb	r1, [r0, #1]
 80083a0:	2900      	cmp	r1, #0
 80083a2:	d0e4      	beq.n	800836e <rclc_executor_spin_some.part.0+0x112>
 80083a4:	2901      	cmp	r1, #1
 80083a6:	d1ed      	bne.n	8008384 <rclc_executor_spin_some.part.0+0x128>
 80083a8:	f7ff fcda 	bl	8007d60 <_rclc_execute.part.0>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f040 80b6 	bne.w	800851e <rclc_executor_spin_some.part.0+0x2c2>
 80083b2:	68ab      	ldr	r3, [r5, #8]
 80083b4:	e7e6      	b.n	8008384 <rclc_executor_spin_some.part.0+0x128>
 80083b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80083ba:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80083be:	4630      	mov	r0, r6
 80083c0:	f006 fea0 	bl	800f104 <rcl_wait_set_add_client>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f43f af7a 	beq.w	80082be <rclc_executor_spin_some.part.0+0x62>
 80083ca:	9001      	str	r0, [sp, #4]
 80083cc:	f000 fa74 	bl	80088b8 <rcutils_reset_error>
 80083d0:	9801      	ldr	r0, [sp, #4]
 80083d2:	4607      	mov	r7, r0
 80083d4:	e03c      	b.n	8008450 <rclc_executor_spin_some.part.0+0x1f4>
 80083d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80083da:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80083de:	4630      	mov	r0, r6
 80083e0:	f006 fb48 	bl	800ea74 <rcl_wait_set_add_subscription>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f43f af6a 	beq.w	80082be <rclc_executor_spin_some.part.0+0x62>
 80083ea:	e7ee      	b.n	80083ca <rclc_executor_spin_some.part.0+0x16e>
 80083ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80083f0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80083f4:	4630      	mov	r0, r6
 80083f6:	f006 fe55 	bl	800f0a4 <rcl_wait_set_add_timer>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f43f af5f 	beq.w	80082be <rclc_executor_spin_some.part.0+0x62>
 8008400:	e7e3      	b.n	80083ca <rclc_executor_spin_some.part.0+0x16e>
 8008402:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008406:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800840a:	4630      	mov	r0, r6
 800840c:	f006 fe1e 	bl	800f04c <rcl_wait_set_add_guard_condition>
 8008410:	2800      	cmp	r0, #0
 8008412:	f43f af54 	beq.w	80082be <rclc_executor_spin_some.part.0+0x62>
 8008416:	e7d8      	b.n	80083ca <rclc_executor_spin_some.part.0+0x16e>
 8008418:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800841c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8008420:	3110      	adds	r1, #16
 8008422:	4630      	mov	r0, r6
 8008424:	f007 fb9e 	bl	800fb64 <rcl_action_wait_set_add_action_server>
 8008428:	2800      	cmp	r0, #0
 800842a:	f43f af48 	beq.w	80082be <rclc_executor_spin_some.part.0+0x62>
 800842e:	e7cc      	b.n	80083ca <rclc_executor_spin_some.part.0+0x16e>
 8008430:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008434:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8008438:	3110      	adds	r1, #16
 800843a:	2300      	movs	r3, #0
 800843c:	4630      	mov	r0, r6
 800843e:	f007 f96b 	bl	800f718 <rcl_action_wait_set_add_action_client>
 8008442:	2800      	cmp	r0, #0
 8008444:	f43f af3b 	beq.w	80082be <rclc_executor_spin_some.part.0+0x62>
 8008448:	e7bf      	b.n	80083ca <rclc_executor_spin_some.part.0+0x16e>
 800844a:	f000 fa35 	bl	80088b8 <rcutils_reset_error>
 800844e:	2701      	movs	r7, #1
 8008450:	4638      	mov	r0, r7
 8008452:	b003      	add	sp, #12
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008458:	f000 fa2e 	bl	80088b8 <rcutils_reset_error>
 800845c:	4638      	mov	r0, r7
 800845e:	b003      	add	sp, #12
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	4627      	mov	r7, r4
 8008466:	e7f3      	b.n	8008450 <rclc_executor_spin_some.part.0+0x1f4>
 8008468:	68ab      	ldr	r3, [r5, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8092 	beq.w	8008594 <rclc_executor_spin_some.part.0+0x338>
 8008470:	2400      	movs	r4, #0
 8008472:	46a0      	mov	r8, r4
 8008474:	f240 1991 	movw	r9, #401	; 0x191
 8008478:	e008      	b.n	800848c <rclc_executor_spin_some.part.0+0x230>
 800847a:	f7ff faaf 	bl	80079dc <_rclc_check_for_new_data>
 800847e:	4604      	mov	r4, r0
 8008480:	b108      	cbz	r0, 8008486 <rclc_executor_spin_some.part.0+0x22a>
 8008482:	4548      	cmp	r0, r9
 8008484:	d1ee      	bne.n	8008464 <rclc_executor_spin_some.part.0+0x208>
 8008486:	68ab      	ldr	r3, [r5, #8]
 8008488:	4598      	cmp	r8, r3
 800848a:	d265      	bcs.n	8008558 <rclc_executor_spin_some.part.0+0x2fc>
 800848c:	686a      	ldr	r2, [r5, #4]
 800848e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8008492:	4631      	mov	r1, r6
 8008494:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8008498:	f108 0801 	add.w	r8, r8, #1
 800849c:	f1bc 0f00 	cmp.w	ip, #0
 80084a0:	d1eb      	bne.n	800847a <rclc_executor_spin_some.part.0+0x21e>
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 80084aa:	4798      	blx	r3
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d0d9      	beq.n	8008464 <rclc_executor_spin_some.part.0+0x208>
 80084b0:	68ab      	ldr	r3, [r5, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0d6      	beq.n	8008464 <rclc_executor_spin_some.part.0+0x208>
 80084b6:	f04f 0800 	mov.w	r8, #0
 80084ba:	f240 1991 	movw	r9, #401	; 0x191
 80084be:	f240 2a59 	movw	sl, #601	; 0x259
 80084c2:	e00e      	b.n	80084e2 <rclc_executor_spin_some.part.0+0x286>
 80084c4:	f813 300b 	ldrb.w	r3, [r3, fp]
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d033      	beq.n	8008534 <rclc_executor_spin_some.part.0+0x2d8>
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	d028      	beq.n	8008522 <rclc_executor_spin_some.part.0+0x2c6>
 80084d0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80084d4:	b9fb      	cbnz	r3, 8008516 <rclc_executor_spin_some.part.0+0x2ba>
 80084d6:	68ab      	ldr	r3, [r5, #8]
 80084d8:	f108 0801 	add.w	r8, r8, #1
 80084dc:	4598      	cmp	r8, r3
 80084de:	d2b7      	bcs.n	8008450 <rclc_executor_spin_some.part.0+0x1f4>
 80084e0:	2400      	movs	r4, #0
 80084e2:	6868      	ldr	r0, [r5, #4]
 80084e4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80084e8:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80084ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0b7      	beq.n	8008464 <rclc_executor_spin_some.part.0+0x208>
 80084f4:	4631      	mov	r1, r6
 80084f6:	f7ff fabf 	bl	8007a78 <_rclc_take_new_data>
 80084fa:	b118      	cbz	r0, 8008504 <rclc_executor_spin_some.part.0+0x2a8>
 80084fc:	4548      	cmp	r0, r9
 80084fe:	d001      	beq.n	8008504 <rclc_executor_spin_some.part.0+0x2a8>
 8008500:	4550      	cmp	r0, sl
 8008502:	d10c      	bne.n	800851e <rclc_executor_spin_some.part.0+0x2c2>
 8008504:	686b      	ldr	r3, [r5, #4]
 8008506:	eb13 000b 	adds.w	r0, r3, fp
 800850a:	d021      	beq.n	8008550 <rclc_executor_spin_some.part.0+0x2f4>
 800850c:	7842      	ldrb	r2, [r0, #1]
 800850e:	2a00      	cmp	r2, #0
 8008510:	d0d8      	beq.n	80084c4 <rclc_executor_spin_some.part.0+0x268>
 8008512:	2a01      	cmp	r2, #1
 8008514:	d1df      	bne.n	80084d6 <rclc_executor_spin_some.part.0+0x27a>
 8008516:	f7ff fc23 	bl	8007d60 <_rclc_execute.part.0>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0db      	beq.n	80084d6 <rclc_executor_spin_some.part.0+0x27a>
 800851e:	4607      	mov	r7, r0
 8008520:	e796      	b.n	8008450 <rclc_executor_spin_some.part.0+0x1f4>
 8008522:	6843      	ldr	r3, [r0, #4]
 8008524:	6a1a      	ldr	r2, [r3, #32]
 8008526:	2a00      	cmp	r2, #0
 8008528:	d1f5      	bne.n	8008516 <rclc_executor_spin_some.part.0+0x2ba>
 800852a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0d1      	beq.n	80084d6 <rclc_executor_spin_some.part.0+0x27a>
 8008532:	e7f0      	b.n	8008516 <rclc_executor_spin_some.part.0+0x2ba>
 8008534:	6843      	ldr	r3, [r0, #4]
 8008536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008538:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800853c:	d1eb      	bne.n	8008516 <rclc_executor_spin_some.part.0+0x2ba>
 800853e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008542:	2a00      	cmp	r2, #0
 8008544:	d1e7      	bne.n	8008516 <rclc_executor_spin_some.part.0+0x2ba>
 8008546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0c3      	beq.n	80084d6 <rclc_executor_spin_some.part.0+0x27a>
 800854e:	e7e2      	b.n	8008516 <rclc_executor_spin_some.part.0+0x2ba>
 8008550:	270b      	movs	r7, #11
 8008552:	e77d      	b.n	8008450 <rclc_executor_spin_some.part.0+0x1f4>
 8008554:	686a      	ldr	r2, [r5, #4]
 8008556:	e6e2      	b.n	800831e <rclc_executor_spin_some.part.0+0xc2>
 8008558:	686a      	ldr	r2, [r5, #4]
 800855a:	e7a2      	b.n	80084a2 <rclc_executor_spin_some.part.0+0x246>
 800855c:	6842      	ldr	r2, [r0, #4]
 800855e:	6a11      	ldr	r1, [r2, #32]
 8008560:	2900      	cmp	r1, #0
 8008562:	f47f af21 	bne.w	80083a8 <rclc_executor_spin_some.part.0+0x14c>
 8008566:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800856a:	2a00      	cmp	r2, #0
 800856c:	f43f af0a 	beq.w	8008384 <rclc_executor_spin_some.part.0+0x128>
 8008570:	e71a      	b.n	80083a8 <rclc_executor_spin_some.part.0+0x14c>
 8008572:	6842      	ldr	r2, [r0, #4]
 8008574:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8008576:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800857a:	f47f af15 	bne.w	80083a8 <rclc_executor_spin_some.part.0+0x14c>
 800857e:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8008582:	2900      	cmp	r1, #0
 8008584:	f47f af10 	bne.w	80083a8 <rclc_executor_spin_some.part.0+0x14c>
 8008588:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800858c:	2a00      	cmp	r2, #0
 800858e:	f43f aef9 	beq.w	8008384 <rclc_executor_spin_some.part.0+0x128>
 8008592:	e709      	b.n	80083a8 <rclc_executor_spin_some.part.0+0x14c>
 8008594:	686a      	ldr	r2, [r5, #4]
 8008596:	461c      	mov	r4, r3
 8008598:	e783      	b.n	80084a2 <rclc_executor_spin_some.part.0+0x246>
 800859a:	686a      	ldr	r2, [r5, #4]
 800859c:	461c      	mov	r4, r3
 800859e:	e6be      	b.n	800831e <rclc_executor_spin_some.part.0+0xc2>

080085a0 <rclc_executor_spin_some>:
 80085a0:	b190      	cbz	r0, 80085c8 <rclc_executor_spin_some+0x28>
 80085a2:	b570      	push	{r4, r5, r6, lr}
 80085a4:	4604      	mov	r4, r0
 80085a6:	6800      	ldr	r0, [r0, #0]
 80085a8:	4616      	mov	r6, r2
 80085aa:	461d      	mov	r5, r3
 80085ac:	f005 f81c 	bl	800d5e8 <rcl_context_is_valid>
 80085b0:	b130      	cbz	r0, 80085c0 <rclc_executor_spin_some+0x20>
 80085b2:	4632      	mov	r2, r6
 80085b4:	462b      	mov	r3, r5
 80085b6:	4620      	mov	r0, r4
 80085b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085bc:	f7ff be4e 	b.w	800825c <rclc_executor_spin_some.part.0>
 80085c0:	f000 f97a 	bl	80088b8 <rcutils_reset_error>
 80085c4:	2001      	movs	r0, #1
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	200b      	movs	r0, #11
 80085ca:	4770      	bx	lr

080085cc <rclc_executor_handle_counters_zero_init>:
 80085cc:	b130      	cbz	r0, 80085dc <rclc_executor_handle_counters_zero_init+0x10>
 80085ce:	b508      	push	{r3, lr}
 80085d0:	2220      	movs	r2, #32
 80085d2:	2100      	movs	r1, #0
 80085d4:	f00c f990 	bl	80148f8 <memset>
 80085d8:	2000      	movs	r0, #0
 80085da:	bd08      	pop	{r3, pc}
 80085dc:	200b      	movs	r0, #11
 80085de:	4770      	bx	lr

080085e0 <rclc_executor_handle_init>:
 80085e0:	b168      	cbz	r0, 80085fe <rclc_executor_handle_init+0x1e>
 80085e2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8008608 <rclc_executor_handle_init+0x28>
 80085e6:	2300      	movs	r3, #0
 80085e8:	220b      	movs	r2, #11
 80085ea:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 80085ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80085f2:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 80085f6:	8002      	strh	r2, [r0, #0]
 80085f8:	8703      	strh	r3, [r0, #56]	; 0x38
 80085fa:	4618      	mov	r0, r3
 80085fc:	4770      	bx	lr
 80085fe:	200b      	movs	r0, #11
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	f3af 8000 	nop.w
	...

08008610 <rclc_support_init>:
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	b3b8      	cbz	r0, 8008688 <rclc_support_init+0x78>
 8008618:	461c      	mov	r4, r3
 800861a:	b3ab      	cbz	r3, 8008688 <rclc_support_init+0x78>
 800861c:	460f      	mov	r7, r1
 800861e:	4690      	mov	r8, r2
 8008620:	4606      	mov	r6, r0
 8008622:	f005 f94b 	bl	800d8bc <rcl_get_zero_initialized_init_options>
 8008626:	f104 030c 	add.w	r3, r4, #12
 800862a:	9005      	str	r0, [sp, #20]
 800862c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008630:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008634:	a805      	add	r0, sp, #20
 8008636:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800863a:	f005 f941 	bl	800d8c0 <rcl_init_options_init>
 800863e:	4605      	mov	r5, r0
 8008640:	b9e0      	cbnz	r0, 800867c <rclc_support_init+0x6c>
 8008642:	ad02      	add	r5, sp, #8
 8008644:	4628      	mov	r0, r5
 8008646:	f004 ffc5 	bl	800d5d4 <rcl_get_zero_initialized_context>
 800864a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800864e:	4633      	mov	r3, r6
 8008650:	e886 0003 	stmia.w	r6, {r0, r1}
 8008654:	aa05      	add	r2, sp, #20
 8008656:	4641      	mov	r1, r8
 8008658:	4638      	mov	r0, r7
 800865a:	f005 f82b 	bl	800d6b4 <rcl_init>
 800865e:	4605      	mov	r5, r0
 8008660:	b9b8      	cbnz	r0, 8008692 <rclc_support_init+0x82>
 8008662:	60b4      	str	r4, [r6, #8]
 8008664:	4622      	mov	r2, r4
 8008666:	f106 010c 	add.w	r1, r6, #12
 800866a:	2003      	movs	r0, #3
 800866c:	f005 ff52 	bl	800e514 <rcl_clock_init>
 8008670:	4605      	mov	r5, r0
 8008672:	b970      	cbnz	r0, 8008692 <rclc_support_init+0x82>
 8008674:	a805      	add	r0, sp, #20
 8008676:	f005 f989 	bl	800d98c <rcl_init_options_fini>
 800867a:	b108      	cbz	r0, 8008680 <rclc_support_init+0x70>
 800867c:	f000 f91c 	bl	80088b8 <rcutils_reset_error>
 8008680:	4628      	mov	r0, r5
 8008682:	b006      	add	sp, #24
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008688:	250b      	movs	r5, #11
 800868a:	4628      	mov	r0, r5
 800868c:	b006      	add	sp, #24
 800868e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008692:	f000 f911 	bl	80088b8 <rcutils_reset_error>
 8008696:	a805      	add	r0, sp, #20
 8008698:	f005 f978 	bl	800d98c <rcl_init_options_fini>
 800869c:	2800      	cmp	r0, #0
 800869e:	d0ef      	beq.n	8008680 <rclc_support_init+0x70>
 80086a0:	e7ec      	b.n	800867c <rclc_support_init+0x6c>
 80086a2:	bf00      	nop

080086a4 <rclc_node_init_default>:
 80086a4:	b3b8      	cbz	r0, 8008716 <rclc_node_init_default+0x72>
 80086a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086aa:	460d      	mov	r5, r1
 80086ac:	b0a1      	sub	sp, #132	; 0x84
 80086ae:	b329      	cbz	r1, 80086fc <rclc_node_init_default+0x58>
 80086b0:	4616      	mov	r6, r2
 80086b2:	b31a      	cbz	r2, 80086fc <rclc_node_init_default+0x58>
 80086b4:	461f      	mov	r7, r3
 80086b6:	b30b      	cbz	r3, 80086fc <rclc_node_init_default+0x58>
 80086b8:	f10d 0810 	add.w	r8, sp, #16
 80086bc:	4604      	mov	r4, r0
 80086be:	4640      	mov	r0, r8
 80086c0:	f005 fa1c 	bl	800dafc <rcl_get_zero_initialized_node>
 80086c4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80086c8:	f10d 0918 	add.w	r9, sp, #24
 80086cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80086d0:	4648      	mov	r0, r9
 80086d2:	f005 fb8b 	bl	800ddec <rcl_node_get_default_options>
 80086d6:	4640      	mov	r0, r8
 80086d8:	f005 fa10 	bl	800dafc <rcl_get_zero_initialized_node>
 80086dc:	f8cd 9000 	str.w	r9, [sp]
 80086e0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80086e4:	463b      	mov	r3, r7
 80086e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80086ea:	4632      	mov	r2, r6
 80086ec:	4629      	mov	r1, r5
 80086ee:	4620      	mov	r0, r4
 80086f0:	f005 fa0e 	bl	800db10 <rcl_node_init>
 80086f4:	b930      	cbnz	r0, 8008704 <rclc_node_init_default+0x60>
 80086f6:	b021      	add	sp, #132	; 0x84
 80086f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086fc:	200b      	movs	r0, #11
 80086fe:	b021      	add	sp, #132	; 0x84
 8008700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008704:	9003      	str	r0, [sp, #12]
 8008706:	f000 f8d7 	bl	80088b8 <rcutils_reset_error>
 800870a:	f000 f8d5 	bl	80088b8 <rcutils_reset_error>
 800870e:	9803      	ldr	r0, [sp, #12]
 8008710:	b021      	add	sp, #132	; 0x84
 8008712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008716:	200b      	movs	r0, #11
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop

0800871c <rclc_publisher_init_default>:
 800871c:	b368      	cbz	r0, 800877a <rclc_publisher_init_default+0x5e>
 800871e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008722:	460d      	mov	r5, r1
 8008724:	b0a0      	sub	sp, #128	; 0x80
 8008726:	b321      	cbz	r1, 8008772 <rclc_publisher_init_default+0x56>
 8008728:	4616      	mov	r6, r2
 800872a:	b312      	cbz	r2, 8008772 <rclc_publisher_init_default+0x56>
 800872c:	461f      	mov	r7, r3
 800872e:	b303      	cbz	r3, 8008772 <rclc_publisher_init_default+0x56>
 8008730:	4604      	mov	r4, r0
 8008732:	f7ff f843 	bl	80077bc <rcl_get_zero_initialized_publisher>
 8008736:	f10d 0810 	add.w	r8, sp, #16
 800873a:	6020      	str	r0, [r4, #0]
 800873c:	4640      	mov	r0, r8
 800873e:	f7ff f8d9 	bl	80078f4 <rcl_publisher_get_default_options>
 8008742:	490f      	ldr	r1, [pc, #60]	; (8008780 <rclc_publisher_init_default+0x64>)
 8008744:	2250      	movs	r2, #80	; 0x50
 8008746:	4640      	mov	r0, r8
 8008748:	f00c f99f 	bl	8014a8a <memcpy>
 800874c:	f8cd 8000 	str.w	r8, [sp]
 8008750:	463b      	mov	r3, r7
 8008752:	4632      	mov	r2, r6
 8008754:	4629      	mov	r1, r5
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff f836 	bl	80077c8 <rcl_publisher_init>
 800875c:	b910      	cbnz	r0, 8008764 <rclc_publisher_init_default+0x48>
 800875e:	b020      	add	sp, #128	; 0x80
 8008760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008764:	9003      	str	r0, [sp, #12]
 8008766:	f000 f8a7 	bl	80088b8 <rcutils_reset_error>
 800876a:	9803      	ldr	r0, [sp, #12]
 800876c:	b020      	add	sp, #128	; 0x80
 800876e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008772:	200b      	movs	r0, #11
 8008774:	b020      	add	sp, #128	; 0x80
 8008776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800877a:	200b      	movs	r0, #11
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	08015b00 	.word	0x08015b00

08008784 <rclc_subscription_init_default>:
 8008784:	b368      	cbz	r0, 80087e2 <rclc_subscription_init_default+0x5e>
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	460d      	mov	r5, r1
 800878c:	b0a0      	sub	sp, #128	; 0x80
 800878e:	b321      	cbz	r1, 80087da <rclc_subscription_init_default+0x56>
 8008790:	4616      	mov	r6, r2
 8008792:	b312      	cbz	r2, 80087da <rclc_subscription_init_default+0x56>
 8008794:	461f      	mov	r7, r3
 8008796:	b303      	cbz	r3, 80087da <rclc_subscription_init_default+0x56>
 8008798:	4604      	mov	r4, r0
 800879a:	f005 fd5f 	bl	800e25c <rcl_get_zero_initialized_subscription>
 800879e:	f10d 0810 	add.w	r8, sp, #16
 80087a2:	6020      	str	r0, [r4, #0]
 80087a4:	4640      	mov	r0, r8
 80087a6:	f005 fe07 	bl	800e3b8 <rcl_subscription_get_default_options>
 80087aa:	490f      	ldr	r1, [pc, #60]	; (80087e8 <rclc_subscription_init_default+0x64>)
 80087ac:	2250      	movs	r2, #80	; 0x50
 80087ae:	4640      	mov	r0, r8
 80087b0:	f00c f96b 	bl	8014a8a <memcpy>
 80087b4:	f8cd 8000 	str.w	r8, [sp]
 80087b8:	463b      	mov	r3, r7
 80087ba:	4632      	mov	r2, r6
 80087bc:	4629      	mov	r1, r5
 80087be:	4620      	mov	r0, r4
 80087c0:	f005 fd52 	bl	800e268 <rcl_subscription_init>
 80087c4:	b910      	cbnz	r0, 80087cc <rclc_subscription_init_default+0x48>
 80087c6:	b020      	add	sp, #128	; 0x80
 80087c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087cc:	9003      	str	r0, [sp, #12]
 80087ce:	f000 f873 	bl	80088b8 <rcutils_reset_error>
 80087d2:	9803      	ldr	r0, [sp, #12]
 80087d4:	b020      	add	sp, #128	; 0x80
 80087d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087da:	200b      	movs	r0, #11
 80087dc:	b020      	add	sp, #128	; 0x80
 80087de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e2:	200b      	movs	r0, #11
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	08015b50 	.word	0x08015b50

080087ec <__default_zero_allocate>:
 80087ec:	f00b bc94 	b.w	8014118 <calloc>

080087f0 <__default_reallocate>:
 80087f0:	f00b be20 	b.w	8014434 <realloc>

080087f4 <__default_deallocate>:
 80087f4:	f00b bcfe 	b.w	80141f4 <free>

080087f8 <__default_allocate>:
 80087f8:	f00b bcf4 	b.w	80141e4 <malloc>

080087fc <rcutils_get_zero_initialized_allocator>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	4c05      	ldr	r4, [pc, #20]	; (8008814 <rcutils_get_zero_initialized_allocator+0x18>)
 8008800:	4686      	mov	lr, r0
 8008802:	4684      	mov	ip, r0
 8008804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f8cc 3000 	str.w	r3, [ip]
 8008810:	4670      	mov	r0, lr
 8008812:	bd10      	pop	{r4, pc}
 8008814:	08015ba0 	.word	0x08015ba0

08008818 <rcutils_set_default_allocator>:
 8008818:	b1a8      	cbz	r0, 8008846 <rcutils_set_default_allocator+0x2e>
 800881a:	6802      	ldr	r2, [r0, #0]
 800881c:	b1a2      	cbz	r2, 8008848 <rcutils_set_default_allocator+0x30>
 800881e:	6841      	ldr	r1, [r0, #4]
 8008820:	b1a1      	cbz	r1, 800884c <rcutils_set_default_allocator+0x34>
 8008822:	b410      	push	{r4}
 8008824:	68c4      	ldr	r4, [r0, #12]
 8008826:	b164      	cbz	r4, 8008842 <rcutils_set_default_allocator+0x2a>
 8008828:	6880      	ldr	r0, [r0, #8]
 800882a:	b138      	cbz	r0, 800883c <rcutils_set_default_allocator+0x24>
 800882c:	4b08      	ldr	r3, [pc, #32]	; (8008850 <rcutils_set_default_allocator+0x38>)
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	2200      	movs	r2, #0
 8008832:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8008836:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800883a:	2001      	movs	r0, #1
 800883c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	4620      	mov	r0, r4
 8008844:	e7fa      	b.n	800883c <rcutils_set_default_allocator+0x24>
 8008846:	4770      	bx	lr
 8008848:	4610      	mov	r0, r2
 800884a:	4770      	bx	lr
 800884c:	4608      	mov	r0, r1
 800884e:	4770      	bx	lr
 8008850:	20000014 	.word	0x20000014

08008854 <rcutils_get_default_allocator>:
 8008854:	b510      	push	{r4, lr}
 8008856:	4c05      	ldr	r4, [pc, #20]	; (800886c <rcutils_get_default_allocator+0x18>)
 8008858:	4686      	mov	lr, r0
 800885a:	4684      	mov	ip, r0
 800885c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800885e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f8cc 3000 	str.w	r3, [ip]
 8008868:	4670      	mov	r0, lr
 800886a:	bd10      	pop	{r4, pc}
 800886c:	20000014 	.word	0x20000014

08008870 <rcutils_allocator_is_valid>:
 8008870:	b158      	cbz	r0, 800888a <rcutils_allocator_is_valid+0x1a>
 8008872:	6803      	ldr	r3, [r0, #0]
 8008874:	b143      	cbz	r3, 8008888 <rcutils_allocator_is_valid+0x18>
 8008876:	6843      	ldr	r3, [r0, #4]
 8008878:	b133      	cbz	r3, 8008888 <rcutils_allocator_is_valid+0x18>
 800887a:	68c3      	ldr	r3, [r0, #12]
 800887c:	b123      	cbz	r3, 8008888 <rcutils_allocator_is_valid+0x18>
 800887e:	6880      	ldr	r0, [r0, #8]
 8008880:	3800      	subs	r0, #0
 8008882:	bf18      	it	ne
 8008884:	2001      	movne	r0, #1
 8008886:	4770      	bx	lr
 8008888:	4618      	mov	r0, r3
 800888a:	4770      	bx	lr

0800888c <rcutils_get_error_string>:
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <rcutils_get_error_string+0x1c>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b13b      	cbz	r3, 80088a2 <rcutils_get_error_string+0x16>
 8008892:	4b06      	ldr	r3, [pc, #24]	; (80088ac <rcutils_get_error_string+0x20>)
 8008894:	781a      	ldrb	r2, [r3, #0]
 8008896:	b90a      	cbnz	r2, 800889c <rcutils_get_error_string+0x10>
 8008898:	2201      	movs	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <rcutils_get_error_string+0x24>)
 800889e:	7818      	ldrb	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <rcutils_get_error_string+0x28>)
 80088a4:	7818      	ldrb	r0, [r3, #0]
 80088a6:	4770      	bx	lr
 80088a8:	2000df20 	.word	0x2000df20
 80088ac:	2000df39 	.word	0x2000df39
 80088b0:	2000df38 	.word	0x2000df38
 80088b4:	08015bb4 	.word	0x08015bb4

080088b8 <rcutils_reset_error>:
 80088b8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80088d8 <rcutils_reset_error+0x20>
 80088bc:	4a08      	ldr	r2, [pc, #32]	; (80088e0 <rcutils_reset_error+0x28>)
 80088be:	4809      	ldr	r0, [pc, #36]	; (80088e4 <rcutils_reset_error+0x2c>)
 80088c0:	4909      	ldr	r1, [pc, #36]	; (80088e8 <rcutils_reset_error+0x30>)
 80088c2:	2300      	movs	r3, #0
 80088c4:	8013      	strh	r3, [r2, #0]
 80088c6:	ed82 7b02 	vstr	d7, [r2, #8]
 80088ca:	4a08      	ldr	r2, [pc, #32]	; (80088ec <rcutils_reset_error+0x34>)
 80088cc:	7003      	strb	r3, [r0, #0]
 80088ce:	700b      	strb	r3, [r1, #0]
 80088d0:	7013      	strb	r3, [r2, #0]
 80088d2:	4770      	bx	lr
 80088d4:	f3af 8000 	nop.w
	...
 80088e0:	2000df28 	.word	0x2000df28
 80088e4:	2000df39 	.word	0x2000df39
 80088e8:	2000df38 	.word	0x2000df38
 80088ec:	2000df20 	.word	0x2000df20

080088f0 <rcutils_system_time_now>:
 80088f0:	b308      	cbz	r0, 8008936 <rcutils_system_time_now+0x46>
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	4604      	mov	r4, r0
 80088f8:	4669      	mov	r1, sp
 80088fa:	2001      	movs	r0, #1
 80088fc:	f7f8 fd6c 	bl	80013d8 <clock_gettime>
 8008900:	e9dd 3500 	ldrd	r3, r5, [sp]
 8008904:	2d00      	cmp	r5, #0
 8008906:	db13      	blt.n	8008930 <rcutils_system_time_now+0x40>
 8008908:	9902      	ldr	r1, [sp, #8]
 800890a:	2900      	cmp	r1, #0
 800890c:	db0d      	blt.n	800892a <rcutils_system_time_now+0x3a>
 800890e:	4e0b      	ldr	r6, [pc, #44]	; (800893c <rcutils_system_time_now+0x4c>)
 8008910:	fba3 3206 	umull	r3, r2, r3, r6
 8008914:	185b      	adds	r3, r3, r1
 8008916:	fb06 2205 	mla	r2, r6, r5, r2
 800891a:	f04f 0000 	mov.w	r0, #0
 800891e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8008922:	e9c4 3200 	strd	r3, r2, [r4]
 8008926:	b004      	add	sp, #16
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	ea53 0205 	orrs.w	r2, r3, r5
 800892e:	d1ee      	bne.n	800890e <rcutils_system_time_now+0x1e>
 8008930:	2002      	movs	r0, #2
 8008932:	b004      	add	sp, #16
 8008934:	bd70      	pop	{r4, r5, r6, pc}
 8008936:	200b      	movs	r0, #11
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	3b9aca00 	.word	0x3b9aca00

08008940 <rcutils_steady_time_now>:
 8008940:	b308      	cbz	r0, 8008986 <rcutils_steady_time_now+0x46>
 8008942:	b570      	push	{r4, r5, r6, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	4604      	mov	r4, r0
 8008948:	4669      	mov	r1, sp
 800894a:	2000      	movs	r0, #0
 800894c:	f7f8 fd44 	bl	80013d8 <clock_gettime>
 8008950:	e9dd 3500 	ldrd	r3, r5, [sp]
 8008954:	2d00      	cmp	r5, #0
 8008956:	db13      	blt.n	8008980 <rcutils_steady_time_now+0x40>
 8008958:	9902      	ldr	r1, [sp, #8]
 800895a:	2900      	cmp	r1, #0
 800895c:	db0d      	blt.n	800897a <rcutils_steady_time_now+0x3a>
 800895e:	4e0b      	ldr	r6, [pc, #44]	; (800898c <rcutils_steady_time_now+0x4c>)
 8008960:	fba3 3206 	umull	r3, r2, r3, r6
 8008964:	185b      	adds	r3, r3, r1
 8008966:	fb06 2205 	mla	r2, r6, r5, r2
 800896a:	f04f 0000 	mov.w	r0, #0
 800896e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8008972:	e9c4 3200 	strd	r3, r2, [r4]
 8008976:	b004      	add	sp, #16
 8008978:	bd70      	pop	{r4, r5, r6, pc}
 800897a:	ea53 0205 	orrs.w	r2, r3, r5
 800897e:	d1ee      	bne.n	800895e <rcutils_steady_time_now+0x1e>
 8008980:	2002      	movs	r0, #2
 8008982:	b004      	add	sp, #16
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	200b      	movs	r0, #11
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	3b9aca00 	.word	0x3b9aca00

08008990 <rmw_get_default_publisher_options>:
 8008990:	2200      	movs	r2, #0
 8008992:	6002      	str	r2, [r0, #0]
 8008994:	7102      	strb	r2, [r0, #4]
 8008996:	4770      	bx	lr

08008998 <rmw_uros_set_custom_transport>:
 8008998:	b470      	push	{r4, r5, r6}
 800899a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800899e:	b162      	cbz	r2, 80089ba <rmw_uros_set_custom_transport+0x22>
 80089a0:	b15b      	cbz	r3, 80089ba <rmw_uros_set_custom_transport+0x22>
 80089a2:	b155      	cbz	r5, 80089ba <rmw_uros_set_custom_transport+0x22>
 80089a4:	b14e      	cbz	r6, 80089ba <rmw_uros_set_custom_transport+0x22>
 80089a6:	4c06      	ldr	r4, [pc, #24]	; (80089c0 <rmw_uros_set_custom_transport+0x28>)
 80089a8:	7020      	strb	r0, [r4, #0]
 80089aa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80089ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80089b2:	6166      	str	r6, [r4, #20]
 80089b4:	2000      	movs	r0, #0
 80089b6:	bc70      	pop	{r4, r5, r6}
 80089b8:	4770      	bx	lr
 80089ba:	200b      	movs	r0, #11
 80089bc:	bc70      	pop	{r4, r5, r6}
 80089be:	4770      	bx	lr
 80089c0:	2000df3c 	.word	0x2000df3c

080089c4 <flush_session>:
 80089c4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 80089c6:	f002 bdef 	b.w	800b5a8 <uxr_run_session_until_confirm_delivery>
 80089ca:	bf00      	nop

080089cc <rmw_publish>:
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d053      	beq.n	8008a78 <rmw_publish+0xac>
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	460d      	mov	r5, r1
 80089d4:	b08e      	sub	sp, #56	; 0x38
 80089d6:	2900      	cmp	r1, #0
 80089d8:	d04b      	beq.n	8008a72 <rmw_publish+0xa6>
 80089da:	4604      	mov	r4, r0
 80089dc:	6800      	ldr	r0, [r0, #0]
 80089de:	f000 fced 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d045      	beq.n	8008a72 <rmw_publish+0xa6>
 80089e6:	6866      	ldr	r6, [r4, #4]
 80089e8:	2e00      	cmp	r6, #0
 80089ea:	d042      	beq.n	8008a72 <rmw_publish+0xa6>
 80089ec:	69b4      	ldr	r4, [r6, #24]
 80089ee:	4628      	mov	r0, r5
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	4798      	blx	r3
 80089f4:	69f3      	ldr	r3, [r6, #28]
 80089f6:	9005      	str	r0, [sp, #20]
 80089f8:	b113      	cbz	r3, 8008a00 <rmw_publish+0x34>
 80089fa:	a805      	add	r0, sp, #20
 80089fc:	4798      	blx	r3
 80089fe:	9805      	ldr	r0, [sp, #20]
 8008a00:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	9000      	str	r0, [sp, #0]
 8008a08:	6972      	ldr	r2, [r6, #20]
 8008a0a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008a0c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008a10:	ab06      	add	r3, sp, #24
 8008a12:	f003 fbb5 	bl	800c180 <uxr_prepare_output_stream>
 8008a16:	b1d8      	cbz	r0, 8008a50 <rmw_publish+0x84>
 8008a18:	68a3      	ldr	r3, [r4, #8]
 8008a1a:	a906      	add	r1, sp, #24
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	4798      	blx	r3
 8008a20:	6a33      	ldr	r3, [r6, #32]
 8008a22:	4604      	mov	r4, r0
 8008a24:	b10b      	cbz	r3, 8008a2a <rmw_publish+0x5e>
 8008a26:	a806      	add	r0, sp, #24
 8008a28:	4798      	blx	r3
 8008a2a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008a34:	d022      	beq.n	8008a7c <rmw_publish+0xb0>
 8008a36:	6918      	ldr	r0, [r3, #16]
 8008a38:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8008a3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008a3e:	f002 fdb3 	bl	800b5a8 <uxr_run_session_until_confirm_delivery>
 8008a42:	4020      	ands	r0, r4
 8008a44:	b2c4      	uxtb	r4, r0
 8008a46:	f084 0001 	eor.w	r0, r4, #1
 8008a4a:	b2c0      	uxtb	r0, r0
 8008a4c:	b00e      	add	sp, #56	; 0x38
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008a54:	6918      	ldr	r0, [r3, #16]
 8008a56:	9b05      	ldr	r3, [sp, #20]
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <rmw_publish+0xbc>)
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	9602      	str	r6, [sp, #8]
 8008a60:	6972      	ldr	r2, [r6, #20]
 8008a62:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008a64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008a68:	ab06      	add	r3, sp, #24
 8008a6a:	f003 fbb9 	bl	800c1e0 <uxr_prepare_output_stream_fragmented>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d1d2      	bne.n	8008a18 <rmw_publish+0x4c>
 8008a72:	2001      	movs	r0, #1
 8008a74:	b00e      	add	sp, #56	; 0x38
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	2001      	movs	r0, #1
 8008a7a:	4770      	bx	lr
 8008a7c:	6918      	ldr	r0, [r3, #16]
 8008a7e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008a82:	f002 f9d1 	bl	800ae28 <uxr_flash_output_streams>
 8008a86:	e7de      	b.n	8008a46 <rmw_publish+0x7a>
 8008a88:	080089c5 	.word	0x080089c5

08008a8c <rmw_create_publisher>:
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	b087      	sub	sp, #28
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f000 80cc 	beq.w	8008c30 <rmw_create_publisher+0x1a4>
 8008a98:	460e      	mov	r6, r1
 8008a9a:	2900      	cmp	r1, #0
 8008a9c:	f000 80c8 	beq.w	8008c30 <rmw_create_publisher+0x1a4>
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	6800      	ldr	r0, [r0, #0]
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	4698      	mov	r8, r3
 8008aa8:	f000 fc88 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f000 80bf 	beq.w	8008c30 <rmw_create_publisher+0x1a4>
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	f000 80bc 	beq.w	8008c30 <rmw_create_publisher+0x1a4>
 8008ab8:	782b      	ldrb	r3, [r5, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 80b8 	beq.w	8008c30 <rmw_create_publisher+0x1a4>
 8008ac0:	f1b8 0f00 	cmp.w	r8, #0
 8008ac4:	f000 80b4 	beq.w	8008c30 <rmw_create_publisher+0x1a4>
 8008ac8:	485c      	ldr	r0, [pc, #368]	; (8008c3c <rmw_create_publisher+0x1b0>)
 8008aca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008ace:	f007 ffc7 	bl	8010a60 <get_memory>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f000 80ac 	beq.w	8008c30 <rmw_create_publisher+0x1a4>
 8008ad8:	6884      	ldr	r4, [r0, #8]
 8008ada:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8008ade:	f008 f827 	bl	8010b30 <rmw_get_implementation_identifier>
 8008ae2:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8008ae6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8008aea:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8008aee:	4628      	mov	r0, r5
 8008af0:	f7f7 fb80 	bl	80001f4 <strlen>
 8008af4:	3001      	adds	r0, #1
 8008af6:	283c      	cmp	r0, #60	; 0x3c
 8008af8:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8008afc:	f200 8091 	bhi.w	8008c22 <rmw_create_publisher+0x196>
 8008b00:	4a4f      	ldr	r2, [pc, #316]	; (8008c40 <rmw_create_publisher+0x1b4>)
 8008b02:	462b      	mov	r3, r5
 8008b04:	213c      	movs	r1, #60	; 0x3c
 8008b06:	4650      	mov	r0, sl
 8008b08:	f00b fe1c 	bl	8014744 <sniprintf>
 8008b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b10:	67e3      	str	r3, [r4, #124]	; 0x7c
 8008b12:	4641      	mov	r1, r8
 8008b14:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8008b18:	2250      	movs	r2, #80	; 0x50
 8008b1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008b1e:	f00b ffb4 	bl	8014a8a <memcpy>
 8008b22:	f898 3008 	ldrb.w	r3, [r8, #8]
 8008b26:	4947      	ldr	r1, [pc, #284]	; (8008c44 <rmw_create_publisher+0x1b8>)
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b2e:	bf0c      	ite	eq
 8008b30:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8008b34:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8008b38:	67a3      	str	r3, [r4, #120]	; 0x78
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008b40:	4630      	mov	r0, r6
 8008b42:	f000 fc49 	bl	80093d8 <get_message_typesupport_handle>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d06b      	beq.n	8008c22 <rmw_create_publisher+0x196>
 8008b4a:	6842      	ldr	r2, [r0, #4]
 8008b4c:	61a2      	str	r2, [r4, #24]
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	d067      	beq.n	8008c22 <rmw_create_publisher+0x196>
 8008b52:	4629      	mov	r1, r5
 8008b54:	4643      	mov	r3, r8
 8008b56:	4648      	mov	r0, r9
 8008b58:	f008 fa50 	bl	8010ffc <create_topic>
 8008b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d063      	beq.n	8008c2a <rmw_create_publisher+0x19e>
 8008b62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6a:	2103      	movs	r1, #3
 8008b6c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8008b70:	1c42      	adds	r2, r0, #1
 8008b72:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8008b76:	f002 f807 	bl	800ab88 <uxr_object_id>
 8008b7a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008b7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b82:	6120      	str	r0, [r4, #16]
 8008b84:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8008b88:	6910      	ldr	r0, [r2, #16]
 8008b8a:	2506      	movs	r5, #6
 8008b8c:	9500      	str	r5, [sp, #0]
 8008b8e:	6819      	ldr	r1, [r3, #0]
 8008b90:	6922      	ldr	r2, [r4, #16]
 8008b92:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008b96:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008b9a:	f001 fea7 	bl	800a8ec <uxr_buffer_create_publisher_bin>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008ba4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008ba8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008bac:	f000 fb86 	bl	80092bc <run_xrce_session>
 8008bb0:	b3b8      	cbz	r0, 8008c22 <rmw_create_publisher+0x196>
 8008bb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bba:	2105      	movs	r1, #5
 8008bbc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8008bc0:	1c42      	adds	r2, r0, #1
 8008bc2:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8008bc6:	f001 ffdf 	bl	800ab88 <uxr_object_id>
 8008bca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008bce:	6160      	str	r0, [r4, #20]
 8008bd0:	691e      	ldr	r6, [r3, #16]
 8008bd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bd6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8008bda:	f10d 0a10 	add.w	sl, sp, #16
 8008bde:	4641      	mov	r1, r8
 8008be0:	4650      	mov	r0, sl
 8008be2:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8008be6:	f000 fb85 	bl	80092f4 <convert_qos_profile>
 8008bea:	9503      	str	r5, [sp, #12]
 8008bec:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008bf0:	9001      	str	r0, [sp, #4]
 8008bf2:	f8ad 1008 	strh.w	r1, [sp, #8]
 8008bf6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8008c00:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008c04:	f8d8 1000 	ldr.w	r1, [r8]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f001 fecf 	bl	800a9ac <uxr_buffer_create_datawriter_bin>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008c14:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008c18:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008c1c:	f000 fb4e 	bl	80092bc <run_xrce_session>
 8008c20:	b938      	cbnz	r0, 8008c32 <rmw_create_publisher+0x1a6>
 8008c22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c24:	b108      	cbz	r0, 8008c2a <rmw_create_publisher+0x19e>
 8008c26:	f000 fa47 	bl	80090b8 <rmw_uxrce_fini_topic_memory>
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f000 f9ec 	bl	8009008 <rmw_uxrce_fini_publisher_memory>
 8008c30:	2700      	movs	r7, #0
 8008c32:	4638      	mov	r0, r7
 8008c34:	b007      	add	sp, #28
 8008c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20012834 	.word	0x20012834
 8008c40:	08015bec 	.word	0x08015bec
 8008c44:	08015bb8 	.word	0x08015bb8

08008c48 <rmw_publisher_get_actual_qos>:
 8008c48:	b150      	cbz	r0, 8008c60 <rmw_publisher_get_actual_qos+0x18>
 8008c4a:	b508      	push	{r3, lr}
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	b149      	cbz	r1, 8008c64 <rmw_publisher_get_actual_qos+0x1c>
 8008c50:	6841      	ldr	r1, [r0, #4]
 8008c52:	2250      	movs	r2, #80	; 0x50
 8008c54:	3128      	adds	r1, #40	; 0x28
 8008c56:	4618      	mov	r0, r3
 8008c58:	f00b ff17 	bl	8014a8a <memcpy>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	bd08      	pop	{r3, pc}
 8008c60:	200b      	movs	r0, #11
 8008c62:	4770      	bx	lr
 8008c64:	200b      	movs	r0, #11
 8008c66:	bd08      	pop	{r3, pc}

08008c68 <rmw_destroy_publisher>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	b128      	cbz	r0, 8008c78 <rmw_destroy_publisher+0x10>
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	6800      	ldr	r0, [r0, #0]
 8008c70:	460d      	mov	r5, r1
 8008c72:	f000 fba3 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 8008c76:	b910      	cbnz	r0, 8008c7e <rmw_destroy_publisher+0x16>
 8008c78:	2401      	movs	r4, #1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0f9      	beq.n	8008c78 <rmw_destroy_publisher+0x10>
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	d0f7      	beq.n	8008c78 <rmw_destroy_publisher+0x10>
 8008c88:	6828      	ldr	r0, [r5, #0]
 8008c8a:	f000 fb97 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d0f2      	beq.n	8008c78 <rmw_destroy_publisher+0x10>
 8008c92:	686c      	ldr	r4, [r5, #4]
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	d0ef      	beq.n	8008c78 <rmw_destroy_publisher+0x10>
 8008c98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c9a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8008c9e:	f008 f9fd 	bl	801109c <destroy_topic>
 8008ca2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008ca6:	6962      	ldr	r2, [r4, #20]
 8008ca8:	6918      	ldr	r0, [r3, #16]
 8008caa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8008cae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	f001 fd66 	bl	800a784 <uxr_buffer_delete_entity>
 8008cb8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	6809      	ldr	r1, [r1, #0]
 8008cc8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008ccc:	f001 fd5a 	bl	800a784 <uxr_buffer_delete_entity>
 8008cd0:	693e      	ldr	r6, [r7, #16]
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8008cd8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8008cdc:	4604      	mov	r4, r0
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f000 faec 	bl	80092bc <run_xrce_session>
 8008ce4:	693e      	ldr	r6, [r7, #16]
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8008cec:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f000 fae2 	bl	80092bc <run_xrce_session>
 8008cf8:	b12c      	cbz	r4, 8008d06 <rmw_destroy_publisher+0x9e>
 8008cfa:	b120      	cbz	r0, 8008d06 <rmw_destroy_publisher+0x9e>
 8008cfc:	2400      	movs	r4, #0
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f982 	bl	8009008 <rmw_uxrce_fini_publisher_memory>
 8008d04:	e7b9      	b.n	8008c7a <rmw_destroy_publisher+0x12>
 8008d06:	2402      	movs	r4, #2
 8008d08:	e7f9      	b.n	8008cfe <rmw_destroy_publisher+0x96>
 8008d0a:	bf00      	nop

08008d0c <rmw_uxrce_init_service_memory>:
 8008d0c:	b1e2      	cbz	r2, 8008d48 <rmw_uxrce_init_service_memory+0x3c>
 8008d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	7b05      	ldrb	r5, [r0, #12]
 8008d14:	4606      	mov	r6, r0
 8008d16:	b9ad      	cbnz	r5, 8008d44 <rmw_uxrce_init_service_memory+0x38>
 8008d18:	23c8      	movs	r3, #200	; 0xc8
 8008d1a:	e9c0 5500 	strd	r5, r5, [r0]
 8008d1e:	6083      	str	r3, [r0, #8]
 8008d20:	f240 1301 	movw	r3, #257	; 0x101
 8008d24:	4617      	mov	r7, r2
 8008d26:	8183      	strh	r3, [r0, #12]
 8008d28:	460c      	mov	r4, r1
 8008d2a:	46a8      	mov	r8, r5
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4630      	mov	r0, r6
 8008d30:	3501      	adds	r5, #1
 8008d32:	f007 fea5 	bl	8010a80 <put_memory>
 8008d36:	42af      	cmp	r7, r5
 8008d38:	60a4      	str	r4, [r4, #8]
 8008d3a:	f884 800c 	strb.w	r8, [r4, #12]
 8008d3e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8008d42:	d1f3      	bne.n	8008d2c <rmw_uxrce_init_service_memory+0x20>
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop

08008d4c <rmw_uxrce_init_client_memory>:
 8008d4c:	b1e2      	cbz	r2, 8008d88 <rmw_uxrce_init_client_memory+0x3c>
 8008d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d52:	7b05      	ldrb	r5, [r0, #12]
 8008d54:	4606      	mov	r6, r0
 8008d56:	b9ad      	cbnz	r5, 8008d84 <rmw_uxrce_init_client_memory+0x38>
 8008d58:	23c8      	movs	r3, #200	; 0xc8
 8008d5a:	e9c0 5500 	strd	r5, r5, [r0]
 8008d5e:	6083      	str	r3, [r0, #8]
 8008d60:	f240 1301 	movw	r3, #257	; 0x101
 8008d64:	4617      	mov	r7, r2
 8008d66:	8183      	strh	r3, [r0, #12]
 8008d68:	460c      	mov	r4, r1
 8008d6a:	46a8      	mov	r8, r5
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4630      	mov	r0, r6
 8008d70:	3501      	adds	r5, #1
 8008d72:	f007 fe85 	bl	8010a80 <put_memory>
 8008d76:	42af      	cmp	r7, r5
 8008d78:	60a4      	str	r4, [r4, #8]
 8008d7a:	f884 800c 	strb.w	r8, [r4, #12]
 8008d7e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8008d82:	d1f3      	bne.n	8008d6c <rmw_uxrce_init_client_memory+0x20>
 8008d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop

08008d8c <rmw_uxrce_init_publisher_memory>:
 8008d8c:	b1e2      	cbz	r2, 8008dc8 <rmw_uxrce_init_publisher_memory+0x3c>
 8008d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d92:	7b05      	ldrb	r5, [r0, #12]
 8008d94:	4606      	mov	r6, r0
 8008d96:	b9ad      	cbnz	r5, 8008dc4 <rmw_uxrce_init_publisher_memory+0x38>
 8008d98:	23d8      	movs	r3, #216	; 0xd8
 8008d9a:	e9c0 5500 	strd	r5, r5, [r0]
 8008d9e:	6083      	str	r3, [r0, #8]
 8008da0:	f240 1301 	movw	r3, #257	; 0x101
 8008da4:	4617      	mov	r7, r2
 8008da6:	8183      	strh	r3, [r0, #12]
 8008da8:	460c      	mov	r4, r1
 8008daa:	46a8      	mov	r8, r5
 8008dac:	4621      	mov	r1, r4
 8008dae:	4630      	mov	r0, r6
 8008db0:	3501      	adds	r5, #1
 8008db2:	f007 fe65 	bl	8010a80 <put_memory>
 8008db6:	42af      	cmp	r7, r5
 8008db8:	60a4      	str	r4, [r4, #8]
 8008dba:	f884 800c 	strb.w	r8, [r4, #12]
 8008dbe:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8008dc2:	d1f3      	bne.n	8008dac <rmw_uxrce_init_publisher_memory+0x20>
 8008dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop

08008dcc <rmw_uxrce_init_subscription_memory>:
 8008dcc:	b1e2      	cbz	r2, 8008e08 <rmw_uxrce_init_subscription_memory+0x3c>
 8008dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd2:	7b05      	ldrb	r5, [r0, #12]
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	b9ad      	cbnz	r5, 8008e04 <rmw_uxrce_init_subscription_memory+0x38>
 8008dd8:	23d8      	movs	r3, #216	; 0xd8
 8008dda:	e9c0 5500 	strd	r5, r5, [r0]
 8008dde:	6083      	str	r3, [r0, #8]
 8008de0:	f240 1301 	movw	r3, #257	; 0x101
 8008de4:	4617      	mov	r7, r2
 8008de6:	8183      	strh	r3, [r0, #12]
 8008de8:	460c      	mov	r4, r1
 8008dea:	46a8      	mov	r8, r5
 8008dec:	4621      	mov	r1, r4
 8008dee:	4630      	mov	r0, r6
 8008df0:	3501      	adds	r5, #1
 8008df2:	f007 fe45 	bl	8010a80 <put_memory>
 8008df6:	42af      	cmp	r7, r5
 8008df8:	60a4      	str	r4, [r4, #8]
 8008dfa:	f884 800c 	strb.w	r8, [r4, #12]
 8008dfe:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8008e02:	d1f3      	bne.n	8008dec <rmw_uxrce_init_subscription_memory+0x20>
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop

08008e0c <rmw_uxrce_init_node_memory>:
 8008e0c:	b1e2      	cbz	r2, 8008e48 <rmw_uxrce_init_node_memory+0x3c>
 8008e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e12:	7b05      	ldrb	r5, [r0, #12]
 8008e14:	4606      	mov	r6, r0
 8008e16:	b9ad      	cbnz	r5, 8008e44 <rmw_uxrce_init_node_memory+0x38>
 8008e18:	23a4      	movs	r3, #164	; 0xa4
 8008e1a:	e9c0 5500 	strd	r5, r5, [r0]
 8008e1e:	6083      	str	r3, [r0, #8]
 8008e20:	f240 1301 	movw	r3, #257	; 0x101
 8008e24:	4617      	mov	r7, r2
 8008e26:	8183      	strh	r3, [r0, #12]
 8008e28:	460c      	mov	r4, r1
 8008e2a:	46a8      	mov	r8, r5
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4630      	mov	r0, r6
 8008e30:	3501      	adds	r5, #1
 8008e32:	f007 fe25 	bl	8010a80 <put_memory>
 8008e36:	42af      	cmp	r7, r5
 8008e38:	60a4      	str	r4, [r4, #8]
 8008e3a:	f884 800c 	strb.w	r8, [r4, #12]
 8008e3e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8008e42:	d1f3      	bne.n	8008e2c <rmw_uxrce_init_node_memory+0x20>
 8008e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop

08008e4c <rmw_uxrce_init_session_memory>:
 8008e4c:	b1ea      	cbz	r2, 8008e8a <rmw_uxrce_init_session_memory+0x3e>
 8008e4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e52:	7b05      	ldrb	r5, [r0, #12]
 8008e54:	4606      	mov	r6, r0
 8008e56:	b9b5      	cbnz	r5, 8008e86 <rmw_uxrce_init_session_memory+0x3a>
 8008e58:	e9c0 5500 	strd	r5, r5, [r0]
 8008e5c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8008e60:	f240 1301 	movw	r3, #257	; 0x101
 8008e64:	4617      	mov	r7, r2
 8008e66:	f8c0 8008 	str.w	r8, [r0, #8]
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	8183      	strh	r3, [r0, #12]
 8008e6e:	46a9      	mov	r9, r5
 8008e70:	4621      	mov	r1, r4
 8008e72:	4630      	mov	r0, r6
 8008e74:	3501      	adds	r5, #1
 8008e76:	f007 fe03 	bl	8010a80 <put_memory>
 8008e7a:	42af      	cmp	r7, r5
 8008e7c:	60a4      	str	r4, [r4, #8]
 8008e7e:	f884 900c 	strb.w	r9, [r4, #12]
 8008e82:	4444      	add	r4, r8
 8008e84:	d1f4      	bne.n	8008e70 <rmw_uxrce_init_session_memory+0x24>
 8008e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8a:	4770      	bx	lr

08008e8c <rmw_uxrce_init_topic_memory>:
 8008e8c:	b1e2      	cbz	r2, 8008ec8 <rmw_uxrce_init_topic_memory+0x3c>
 8008e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e92:	7b05      	ldrb	r5, [r0, #12]
 8008e94:	4606      	mov	r6, r0
 8008e96:	b9ad      	cbnz	r5, 8008ec4 <rmw_uxrce_init_topic_memory+0x38>
 8008e98:	231c      	movs	r3, #28
 8008e9a:	e9c0 5500 	strd	r5, r5, [r0]
 8008e9e:	6083      	str	r3, [r0, #8]
 8008ea0:	f240 1301 	movw	r3, #257	; 0x101
 8008ea4:	4617      	mov	r7, r2
 8008ea6:	8183      	strh	r3, [r0, #12]
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	46a8      	mov	r8, r5
 8008eac:	4621      	mov	r1, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	f007 fde5 	bl	8010a80 <put_memory>
 8008eb6:	42af      	cmp	r7, r5
 8008eb8:	60a4      	str	r4, [r4, #8]
 8008eba:	f884 800c 	strb.w	r8, [r4, #12]
 8008ebe:	f104 041c 	add.w	r4, r4, #28
 8008ec2:	d1f3      	bne.n	8008eac <rmw_uxrce_init_topic_memory+0x20>
 8008ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop

08008ecc <rmw_uxrce_init_static_input_buffer_memory>:
 8008ecc:	b1ea      	cbz	r2, 8008f0a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8008ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed2:	7b05      	ldrb	r5, [r0, #12]
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	b9b5      	cbnz	r5, 8008f06 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8008ed8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8008edc:	e9c0 5500 	strd	r5, r5, [r0]
 8008ee0:	6083      	str	r3, [r0, #8]
 8008ee2:	f240 1301 	movw	r3, #257	; 0x101
 8008ee6:	4617      	mov	r7, r2
 8008ee8:	8183      	strh	r3, [r0, #12]
 8008eea:	460c      	mov	r4, r1
 8008eec:	46a8      	mov	r8, r5
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	3501      	adds	r5, #1
 8008ef4:	f007 fdc4 	bl	8010a80 <put_memory>
 8008ef8:	42af      	cmp	r7, r5
 8008efa:	60a4      	str	r4, [r4, #8]
 8008efc:	f884 800c 	strb.w	r8, [r4, #12]
 8008f00:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8008f04:	d1f3      	bne.n	8008eee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8008f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f0a:	4770      	bx	lr

08008f0c <rmw_uxrce_init_init_options_impl_memory>:
 8008f0c:	b1e2      	cbz	r2, 8008f48 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8008f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f12:	7b05      	ldrb	r5, [r0, #12]
 8008f14:	4606      	mov	r6, r0
 8008f16:	b9ad      	cbnz	r5, 8008f44 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8008f18:	232c      	movs	r3, #44	; 0x2c
 8008f1a:	e9c0 5500 	strd	r5, r5, [r0]
 8008f1e:	6083      	str	r3, [r0, #8]
 8008f20:	f240 1301 	movw	r3, #257	; 0x101
 8008f24:	4617      	mov	r7, r2
 8008f26:	8183      	strh	r3, [r0, #12]
 8008f28:	460c      	mov	r4, r1
 8008f2a:	46a8      	mov	r8, r5
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4630      	mov	r0, r6
 8008f30:	3501      	adds	r5, #1
 8008f32:	f007 fda5 	bl	8010a80 <put_memory>
 8008f36:	42af      	cmp	r7, r5
 8008f38:	60a4      	str	r4, [r4, #8]
 8008f3a:	f884 800c 	strb.w	r8, [r4, #12]
 8008f3e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8008f42:	d1f3      	bne.n	8008f2c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8008f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop

08008f4c <rmw_uxrce_init_wait_set_memory>:
 8008f4c:	b1e2      	cbz	r2, 8008f88 <rmw_uxrce_init_wait_set_memory+0x3c>
 8008f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	7b05      	ldrb	r5, [r0, #12]
 8008f54:	4606      	mov	r6, r0
 8008f56:	b9ad      	cbnz	r5, 8008f84 <rmw_uxrce_init_wait_set_memory+0x38>
 8008f58:	231c      	movs	r3, #28
 8008f5a:	e9c0 5500 	strd	r5, r5, [r0]
 8008f5e:	6083      	str	r3, [r0, #8]
 8008f60:	f240 1301 	movw	r3, #257	; 0x101
 8008f64:	4617      	mov	r7, r2
 8008f66:	8183      	strh	r3, [r0, #12]
 8008f68:	460c      	mov	r4, r1
 8008f6a:	46a8      	mov	r8, r5
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	3501      	adds	r5, #1
 8008f72:	f007 fd85 	bl	8010a80 <put_memory>
 8008f76:	42af      	cmp	r7, r5
 8008f78:	60a4      	str	r4, [r4, #8]
 8008f7a:	f884 800c 	strb.w	r8, [r4, #12]
 8008f7e:	f104 041c 	add.w	r4, r4, #28
 8008f82:	d1f3      	bne.n	8008f6c <rmw_uxrce_init_wait_set_memory+0x20>
 8008f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop

08008f8c <rmw_uxrce_init_guard_condition_memory>:
 8008f8c:	b1e2      	cbz	r2, 8008fc8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8008f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f92:	7b05      	ldrb	r5, [r0, #12]
 8008f94:	4606      	mov	r6, r0
 8008f96:	b9ad      	cbnz	r5, 8008fc4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8008f98:	2320      	movs	r3, #32
 8008f9a:	e9c0 5500 	strd	r5, r5, [r0]
 8008f9e:	6083      	str	r3, [r0, #8]
 8008fa0:	f240 1301 	movw	r3, #257	; 0x101
 8008fa4:	4617      	mov	r7, r2
 8008fa6:	8183      	strh	r3, [r0, #12]
 8008fa8:	460c      	mov	r4, r1
 8008faa:	46a8      	mov	r8, r5
 8008fac:	4621      	mov	r1, r4
 8008fae:	4630      	mov	r0, r6
 8008fb0:	3501      	adds	r5, #1
 8008fb2:	f007 fd65 	bl	8010a80 <put_memory>
 8008fb6:	42af      	cmp	r7, r5
 8008fb8:	60a4      	str	r4, [r4, #8]
 8008fba:	f884 800c 	strb.w	r8, [r4, #12]
 8008fbe:	f104 0420 	add.w	r4, r4, #32
 8008fc2:	d1f3      	bne.n	8008fac <rmw_uxrce_init_guard_condition_memory+0x20>
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop

08008fcc <rmw_uxrce_fini_session_memory>:
 8008fcc:	4601      	mov	r1, r0
 8008fce:	4801      	ldr	r0, [pc, #4]	; (8008fd4 <rmw_uxrce_fini_session_memory+0x8>)
 8008fd0:	f007 bd56 	b.w	8010a80 <put_memory>
 8008fd4:	20012854 	.word	0x20012854

08008fd8 <rmw_uxrce_fini_node_memory>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4604      	mov	r4, r0
 8008fdc:	6800      	ldr	r0, [r0, #0]
 8008fde:	b128      	cbz	r0, 8008fec <rmw_uxrce_fini_node_memory+0x14>
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <rmw_uxrce_fini_node_memory+0x28>)
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	f7f7 f8fc 	bl	80001e0 <strcmp>
 8008fe8:	b940      	cbnz	r0, 8008ffc <rmw_uxrce_fini_node_memory+0x24>
 8008fea:	6020      	str	r0, [r4, #0]
 8008fec:	6861      	ldr	r1, [r4, #4]
 8008fee:	b129      	cbz	r1, 8008ffc <rmw_uxrce_fini_node_memory+0x24>
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	4804      	ldr	r0, [pc, #16]	; (8009004 <rmw_uxrce_fini_node_memory+0x2c>)
 8008ff4:	610d      	str	r5, [r1, #16]
 8008ff6:	f007 fd43 	bl	8010a80 <put_memory>
 8008ffa:	6065      	str	r5, [r4, #4]
 8008ffc:	bd38      	pop	{r3, r4, r5, pc}
 8008ffe:	bf00      	nop
 8009000:	0801630c 	.word	0x0801630c
 8009004:	20012824 	.word	0x20012824

08009008 <rmw_uxrce_fini_publisher_memory>:
 8009008:	b510      	push	{r4, lr}
 800900a:	4604      	mov	r4, r0
 800900c:	6800      	ldr	r0, [r0, #0]
 800900e:	b128      	cbz	r0, 800901c <rmw_uxrce_fini_publisher_memory+0x14>
 8009010:	4b06      	ldr	r3, [pc, #24]	; (800902c <rmw_uxrce_fini_publisher_memory+0x24>)
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	f7f7 f8e4 	bl	80001e0 <strcmp>
 8009018:	b938      	cbnz	r0, 800902a <rmw_uxrce_fini_publisher_memory+0x22>
 800901a:	6020      	str	r0, [r4, #0]
 800901c:	6861      	ldr	r1, [r4, #4]
 800901e:	b121      	cbz	r1, 800902a <rmw_uxrce_fini_publisher_memory+0x22>
 8009020:	4803      	ldr	r0, [pc, #12]	; (8009030 <rmw_uxrce_fini_publisher_memory+0x28>)
 8009022:	f007 fd2d 	bl	8010a80 <put_memory>
 8009026:	2300      	movs	r3, #0
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	bd10      	pop	{r4, pc}
 800902c:	0801630c 	.word	0x0801630c
 8009030:	20012834 	.word	0x20012834

08009034 <rmw_uxrce_fini_subscription_memory>:
 8009034:	b510      	push	{r4, lr}
 8009036:	4604      	mov	r4, r0
 8009038:	6800      	ldr	r0, [r0, #0]
 800903a:	b128      	cbz	r0, 8009048 <rmw_uxrce_fini_subscription_memory+0x14>
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <rmw_uxrce_fini_subscription_memory+0x24>)
 800903e:	6819      	ldr	r1, [r3, #0]
 8009040:	f7f7 f8ce 	bl	80001e0 <strcmp>
 8009044:	b938      	cbnz	r0, 8009056 <rmw_uxrce_fini_subscription_memory+0x22>
 8009046:	6020      	str	r0, [r4, #0]
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	b121      	cbz	r1, 8009056 <rmw_uxrce_fini_subscription_memory+0x22>
 800904c:	4803      	ldr	r0, [pc, #12]	; (800905c <rmw_uxrce_fini_subscription_memory+0x28>)
 800904e:	f007 fd17 	bl	8010a80 <put_memory>
 8009052:	2300      	movs	r3, #0
 8009054:	6063      	str	r3, [r4, #4]
 8009056:	bd10      	pop	{r4, pc}
 8009058:	0801630c 	.word	0x0801630c
 800905c:	20012874 	.word	0x20012874

08009060 <rmw_uxrce_fini_service_memory>:
 8009060:	b510      	push	{r4, lr}
 8009062:	4604      	mov	r4, r0
 8009064:	6800      	ldr	r0, [r0, #0]
 8009066:	b128      	cbz	r0, 8009074 <rmw_uxrce_fini_service_memory+0x14>
 8009068:	4b06      	ldr	r3, [pc, #24]	; (8009084 <rmw_uxrce_fini_service_memory+0x24>)
 800906a:	6819      	ldr	r1, [r3, #0]
 800906c:	f7f7 f8b8 	bl	80001e0 <strcmp>
 8009070:	b938      	cbnz	r0, 8009082 <rmw_uxrce_fini_service_memory+0x22>
 8009072:	6020      	str	r0, [r4, #0]
 8009074:	6861      	ldr	r1, [r4, #4]
 8009076:	b121      	cbz	r1, 8009082 <rmw_uxrce_fini_service_memory+0x22>
 8009078:	4803      	ldr	r0, [pc, #12]	; (8009088 <rmw_uxrce_fini_service_memory+0x28>)
 800907a:	f007 fd01 	bl	8010a80 <put_memory>
 800907e:	2300      	movs	r3, #0
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	bd10      	pop	{r4, pc}
 8009084:	0801630c 	.word	0x0801630c
 8009088:	20012844 	.word	0x20012844

0800908c <rmw_uxrce_fini_client_memory>:
 800908c:	b510      	push	{r4, lr}
 800908e:	4604      	mov	r4, r0
 8009090:	6800      	ldr	r0, [r0, #0]
 8009092:	b128      	cbz	r0, 80090a0 <rmw_uxrce_fini_client_memory+0x14>
 8009094:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <rmw_uxrce_fini_client_memory+0x24>)
 8009096:	6819      	ldr	r1, [r3, #0]
 8009098:	f7f7 f8a2 	bl	80001e0 <strcmp>
 800909c:	b938      	cbnz	r0, 80090ae <rmw_uxrce_fini_client_memory+0x22>
 800909e:	6020      	str	r0, [r4, #0]
 80090a0:	6861      	ldr	r1, [r4, #4]
 80090a2:	b121      	cbz	r1, 80090ae <rmw_uxrce_fini_client_memory+0x22>
 80090a4:	4803      	ldr	r0, [pc, #12]	; (80090b4 <rmw_uxrce_fini_client_memory+0x28>)
 80090a6:	f007 fceb 	bl	8010a80 <put_memory>
 80090aa:	2300      	movs	r3, #0
 80090ac:	6063      	str	r3, [r4, #4]
 80090ae:	bd10      	pop	{r4, pc}
 80090b0:	0801630c 	.word	0x0801630c
 80090b4:	2000df58 	.word	0x2000df58

080090b8 <rmw_uxrce_fini_topic_memory>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4604      	mov	r4, r0
 80090bc:	4621      	mov	r1, r4
 80090be:	4803      	ldr	r0, [pc, #12]	; (80090cc <rmw_uxrce_fini_topic_memory+0x14>)
 80090c0:	f007 fcde 	bl	8010a80 <put_memory>
 80090c4:	2300      	movs	r3, #0
 80090c6:	61a3      	str	r3, [r4, #24]
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	bf00      	nop
 80090cc:	20012884 	.word	0x20012884

080090d0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80090d0:	b082      	sub	sp, #8
 80090d2:	b530      	push	{r4, r5, lr}
 80090d4:	4925      	ldr	r1, [pc, #148]	; (800916c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80090d6:	680d      	ldr	r5, [r1, #0]
 80090d8:	ac03      	add	r4, sp, #12
 80090da:	e884 000c 	stmia.w	r4, {r2, r3}
 80090de:	461c      	mov	r4, r3
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	d041      	beq.n	8009168 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80090e4:	462b      	mov	r3, r5
 80090e6:	2100      	movs	r1, #0
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80090f0:	4290      	cmp	r0, r2
 80090f2:	bf08      	it	eq
 80090f4:	3101      	addeq	r1, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1f6      	bne.n	80090e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80090fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d029      	beq.n	8009156 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009102:	d907      	bls.n	8009114 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009104:	2b03      	cmp	r3, #3
 8009106:	d005      	beq.n	8009114 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009108:	2100      	movs	r1, #0
 800910a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800910e:	4608      	mov	r0, r1
 8009110:	b002      	add	sp, #8
 8009112:	4770      	bx	lr
 8009114:	b314      	cbz	r4, 800915c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009116:	428c      	cmp	r4, r1
 8009118:	d820      	bhi.n	800915c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800911a:	2d00      	cmp	r5, #0
 800911c:	d0f4      	beq.n	8009108 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800911e:	2100      	movs	r1, #0
 8009120:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009124:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8009128:	e002      	b.n	8009130 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800912a:	686d      	ldr	r5, [r5, #4]
 800912c:	2d00      	cmp	r5, #0
 800912e:	d0ec      	beq.n	800910a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8009130:	68ab      	ldr	r3, [r5, #8]
 8009132:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8009136:	4290      	cmp	r0, r2
 8009138:	d1f7      	bne.n	800912a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800913a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800913e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8009142:	4562      	cmp	r2, ip
 8009144:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009148:	eb73 0e04 	sbcs.w	lr, r3, r4
 800914c:	daed      	bge.n	800912a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800914e:	4694      	mov	ip, r2
 8009150:	461c      	mov	r4, r3
 8009152:	4629      	mov	r1, r5
 8009154:	e7e9      	b.n	800912a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009156:	b10c      	cbz	r4, 800915c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009158:	428c      	cmp	r4, r1
 800915a:	d9d5      	bls.n	8009108 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800915c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009160:	4802      	ldr	r0, [pc, #8]	; (800916c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8009162:	b002      	add	sp, #8
 8009164:	f007 bc7c 	b.w	8010a60 <get_memory>
 8009168:	4629      	mov	r1, r5
 800916a:	e7c6      	b.n	80090fa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800916c:	20012864 	.word	0x20012864

08009170 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8009170:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	b530      	push	{r4, r5, lr}
 8009176:	b1e3      	cbz	r3, 80091b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8009178:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800917c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8009180:	2400      	movs	r4, #0
 8009182:	e001      	b.n	8009188 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b193      	cbz	r3, 80091ae <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800918e:	4288      	cmp	r0, r1
 8009190:	d1f8      	bne.n	8009184 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8009192:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8009196:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800919a:	4571      	cmp	r1, lr
 800919c:	eb72 050c 	sbcs.w	r5, r2, ip
 80091a0:	daf0      	bge.n	8009184 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80091a2:	461c      	mov	r4, r3
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	468e      	mov	lr, r1
 80091a8:	4694      	mov	ip, r2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1ec      	bne.n	8009188 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80091ae:	4620      	mov	r0, r4
 80091b0:	bd30      	pop	{r4, r5, pc}
 80091b2:	461c      	mov	r4, r3
 80091b4:	4620      	mov	r0, r4
 80091b6:	bd30      	pop	{r4, r5, pc}
 80091b8:	20012864 	.word	0x20012864
 80091bc:	00000000 	.word	0x00000000

080091c0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	4b3c      	ldr	r3, [pc, #240]	; (80092b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80091c6:	ed2d 8b06 	vpush	{d8-d10}
 80091ca:	681f      	ldr	r7, [r3, #0]
 80091cc:	b08d      	sub	sp, #52	; 0x34
 80091ce:	f008 fd85 	bl	8011cdc <rmw_uros_epoch_nanos>
 80091d2:	2f00      	cmp	r7, #0
 80091d4:	d05d      	beq.n	8009292 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80091d6:	46b8      	mov	r8, r7
 80091d8:	ed9f 8b31 	vldr	d8, [pc, #196]	; 80092a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80091dc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80091e0:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	ed9f ab30 	vldr	d10, [pc, #192]	; 80092a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80091ea:	ed9f 9b31 	vldr	d9, [pc, #196]	; 80092b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80091ee:	4681      	mov	r9, r0
 80091f0:	468a      	mov	sl, r1
 80091f2:	ac04      	add	r4, sp, #16
 80091f4:	d03f      	beq.n	8009276 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80091f6:	2b05      	cmp	r3, #5
 80091f8:	d044      	beq.n	8009284 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d03b      	beq.n	8009276 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80091fe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009202:	ed8d ab06 	vstr	d10, [sp, #24]
 8009206:	ed8d 8b08 	vstr	d8, [sp, #32]
 800920a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800920e:	ab08      	add	r3, sp, #32
 8009210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009212:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009216:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800921a:	f007 fa55 	bl	80106c8 <rmw_time_equal>
 800921e:	b118      	cbz	r0, 8009228 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8009220:	ed8d 9b04 	vstr	d9, [sp, #16]
 8009224:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009228:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800922c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8009230:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 8009234:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8009238:	f007 fa9a 	bl	8010770 <rmw_time_total_nsec>
 800923c:	1830      	adds	r0, r6, r0
 800923e:	eb47 0101 	adc.w	r1, r7, r1
 8009242:	4548      	cmp	r0, r9
 8009244:	eb71 030a 	sbcs.w	r3, r1, sl
 8009248:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800924c:	db05      	blt.n	800925a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800924e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8009252:	4591      	cmp	r9, r2
 8009254:	eb7a 0303 	sbcs.w	r3, sl, r3
 8009258:	da03      	bge.n	8009262 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800925a:	4817      	ldr	r0, [pc, #92]	; (80092b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800925c:	4641      	mov	r1, r8
 800925e:	f007 fc0f 	bl	8010a80 <put_memory>
 8009262:	f1bb 0f00 	cmp.w	fp, #0
 8009266:	d014      	beq.n	8009292 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8009268:	46d8      	mov	r8, fp
 800926a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800926e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8009272:	2b04      	cmp	r3, #4
 8009274:	d1bf      	bne.n	80091f6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8009276:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800927a:	3340      	adds	r3, #64	; 0x40
 800927c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800927e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009282:	e7c0      	b.n	8009206 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8009284:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8009288:	3348      	adds	r3, #72	; 0x48
 800928a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800928c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009290:	e7b9      	b.n	8009206 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8009292:	b00d      	add	sp, #52	; 0x34
 8009294:	ecbd 8b06 	vpop	{d8-d10}
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	f3af 8000 	nop.w
	...
 80092a8:	00000001 	.word	0x00000001
 80092ac:	00000000 	.word	0x00000000
 80092b0:	0000001e 	.word	0x0000001e
 80092b4:	00000000 	.word	0x00000000
 80092b8:	20012864 	.word	0x20012864

080092bc <run_xrce_session>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	788c      	ldrb	r4, [r1, #2]
 80092c0:	b086      	sub	sp, #24
 80092c2:	2c01      	cmp	r4, #1
 80092c4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80092c8:	d00c      	beq.n	80092e4 <run_xrce_session+0x28>
 80092ca:	4619      	mov	r1, r3
 80092cc:	2301      	movs	r3, #1
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	f10d 020e 	add.w	r2, sp, #14
 80092d4:	f10d 0317 	add.w	r3, sp, #23
 80092d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80092dc:	f002 f98a 	bl	800b5f4 <uxr_run_session_until_all_status>
 80092e0:	b006      	add	sp, #24
 80092e2:	bd10      	pop	{r4, pc}
 80092e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80092e8:	f001 fd9e 	bl	800ae28 <uxr_flash_output_streams>
 80092ec:	4620      	mov	r0, r4
 80092ee:	b006      	add	sp, #24
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	bf00      	nop

080092f4 <convert_qos_profile>:
 80092f4:	7a4a      	ldrb	r2, [r1, #9]
 80092f6:	f891 c008 	ldrb.w	ip, [r1, #8]
 80092fa:	2a02      	cmp	r2, #2
 80092fc:	bf18      	it	ne
 80092fe:	2200      	movne	r2, #0
 8009300:	7002      	strb	r2, [r0, #0]
 8009302:	780a      	ldrb	r2, [r1, #0]
 8009304:	8889      	ldrh	r1, [r1, #4]
 8009306:	8081      	strh	r1, [r0, #4]
 8009308:	f1ac 0c02 	sub.w	ip, ip, #2
 800930c:	f1a2 0202 	sub.w	r2, r2, #2
 8009310:	fabc fc8c 	clz	ip, ip
 8009314:	fab2 f282 	clz	r2, r2
 8009318:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800931c:	0952      	lsrs	r2, r2, #5
 800931e:	f880 c001 	strb.w	ip, [r0, #1]
 8009322:	7082      	strb	r2, [r0, #2]
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop

08009328 <generate_type_name>:
 8009328:	b530      	push	{r4, r5, lr}
 800932a:	2300      	movs	r3, #0
 800932c:	700b      	strb	r3, [r1, #0]
 800932e:	6803      	ldr	r3, [r0, #0]
 8009330:	b087      	sub	sp, #28
 8009332:	4614      	mov	r4, r2
 8009334:	b1d3      	cbz	r3, 800936c <generate_type_name+0x44>
 8009336:	4a0f      	ldr	r2, [pc, #60]	; (8009374 <generate_type_name+0x4c>)
 8009338:	4615      	mov	r5, r2
 800933a:	9203      	str	r2, [sp, #12]
 800933c:	9500      	str	r5, [sp, #0]
 800933e:	6842      	ldr	r2, [r0, #4]
 8009340:	480d      	ldr	r0, [pc, #52]	; (8009378 <generate_type_name+0x50>)
 8009342:	9001      	str	r0, [sp, #4]
 8009344:	4608      	mov	r0, r1
 8009346:	490d      	ldr	r1, [pc, #52]	; (800937c <generate_type_name+0x54>)
 8009348:	9204      	str	r2, [sp, #16]
 800934a:	9105      	str	r1, [sp, #20]
 800934c:	9102      	str	r1, [sp, #8]
 800934e:	4a0c      	ldr	r2, [pc, #48]	; (8009380 <generate_type_name+0x58>)
 8009350:	4621      	mov	r1, r4
 8009352:	f00b f9f7 	bl	8014744 <sniprintf>
 8009356:	2800      	cmp	r0, #0
 8009358:	db05      	blt.n	8009366 <generate_type_name+0x3e>
 800935a:	4284      	cmp	r4, r0
 800935c:	bfd4      	ite	le
 800935e:	2000      	movle	r0, #0
 8009360:	2001      	movgt	r0, #1
 8009362:	b007      	add	sp, #28
 8009364:	bd30      	pop	{r4, r5, pc}
 8009366:	2000      	movs	r0, #0
 8009368:	b007      	add	sp, #28
 800936a:	bd30      	pop	{r4, r5, pc}
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <generate_type_name+0x5c>)
 800936e:	4a01      	ldr	r2, [pc, #4]	; (8009374 <generate_type_name+0x4c>)
 8009370:	461d      	mov	r5, r3
 8009372:	e7e2      	b.n	800933a <generate_type_name+0x12>
 8009374:	08015bdc 	.word	0x08015bdc
 8009378:	08015bf4 	.word	0x08015bf4
 800937c:	08015bf0 	.word	0x08015bf0
 8009380:	08015be0 	.word	0x08015be0
 8009384:	080160e4 	.word	0x080160e4

08009388 <generate_topic_name>:
 8009388:	b510      	push	{r4, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	4614      	mov	r4, r2
 800938e:	9000      	str	r0, [sp, #0]
 8009390:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <generate_topic_name+0x2c>)
 8009392:	4a09      	ldr	r2, [pc, #36]	; (80093b8 <generate_topic_name+0x30>)
 8009394:	4608      	mov	r0, r1
 8009396:	4621      	mov	r1, r4
 8009398:	f00b f9d4 	bl	8014744 <sniprintf>
 800939c:	2800      	cmp	r0, #0
 800939e:	db05      	blt.n	80093ac <generate_topic_name+0x24>
 80093a0:	4284      	cmp	r4, r0
 80093a2:	bfd4      	ite	le
 80093a4:	2000      	movle	r0, #0
 80093a6:	2001      	movgt	r0, #1
 80093a8:	b002      	add	sp, #8
 80093aa:	bd10      	pop	{r4, pc}
 80093ac:	2000      	movs	r0, #0
 80093ae:	b002      	add	sp, #8
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	bf00      	nop
 80093b4:	08015c00 	.word	0x08015c00
 80093b8:	08015bf8 	.word	0x08015bf8

080093bc <is_uxrce_rmw_identifier_valid>:
 80093bc:	b510      	push	{r4, lr}
 80093be:	4604      	mov	r4, r0
 80093c0:	b140      	cbz	r0, 80093d4 <is_uxrce_rmw_identifier_valid+0x18>
 80093c2:	f007 fbb5 	bl	8010b30 <rmw_get_implementation_identifier>
 80093c6:	4601      	mov	r1, r0
 80093c8:	4620      	mov	r0, r4
 80093ca:	f7f6 ff09 	bl	80001e0 <strcmp>
 80093ce:	fab0 f080 	clz	r0, r0
 80093d2:	0940      	lsrs	r0, r0, #5
 80093d4:	bd10      	pop	{r4, pc}
 80093d6:	bf00      	nop

080093d8 <get_message_typesupport_handle>:
 80093d8:	6883      	ldr	r3, [r0, #8]
 80093da:	4718      	bx	r3

080093dc <get_message_typesupport_handle_function>:
 80093dc:	b510      	push	{r4, lr}
 80093de:	4604      	mov	r4, r0
 80093e0:	6800      	ldr	r0, [r0, #0]
 80093e2:	f7f6 fefd 	bl	80001e0 <strcmp>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	bf0c      	ite	eq
 80093ea:	4620      	moveq	r0, r4
 80093ec:	2000      	movne	r0, #0
 80093ee:	bd10      	pop	{r4, pc}

080093f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	b10a      	cbz	r2, 80093fa <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 80093f6:	4803      	ldr	r0, [pc, #12]	; (8009404 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80093f8:	4770      	bx	lr
 80093fa:	4a03      	ldr	r2, [pc, #12]	; (8009408 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80093fe:	6812      	ldr	r2, [r2, #0]
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	4770      	bx	lr
 8009404:	20000030 	.word	0x20000030
 8009408:	200000ac 	.word	0x200000ac

0800940c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800940c:	4a02      	ldr	r2, [pc, #8]	; (8009418 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 800940e:	4b03      	ldr	r3, [pc, #12]	; (800941c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	200000ac 	.word	0x200000ac
 800941c:	20000030 	.word	0x20000030

08009420 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 8009420:	f008 bc98 	b.w	8011d54 <std_msgs__msg__Float32__init>

08009424 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 8009424:	f008 bc9a 	b.w	8011d5c <std_msgs__msg__Float32__fini>

08009428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	b10a      	cbz	r2, 8009432 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800942e:	4803      	ldr	r0, [pc, #12]	; (800943c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8009430:	4770      	bx	lr
 8009432:	4a03      	ldr	r2, [pc, #12]	; (8009440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8009436:	6812      	ldr	r2, [r2, #0]
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	4770      	bx	lr
 800943c:	20000078 	.word	0x20000078
 8009440:	200000b0 	.word	0x200000b0

08009444 <_Float32__max_serialized_size>:
 8009444:	b508      	push	{r3, lr}
 8009446:	2104      	movs	r1, #4
 8009448:	2000      	movs	r0, #0
 800944a:	f001 f92f 	bl	800a6ac <ucdr_alignment>
 800944e:	3004      	adds	r0, #4
 8009450:	bd08      	pop	{r3, pc}
 8009452:	bf00      	nop

08009454 <_Float32__cdr_deserialize>:
 8009454:	b109      	cbz	r1, 800945a <_Float32__cdr_deserialize+0x6>
 8009456:	f001 b841 	b.w	800a4dc <ucdr_deserialize_float>
 800945a:	4608      	mov	r0, r1
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop

08009460 <get_serialized_size_std_msgs__msg__Float32>:
 8009460:	b138      	cbz	r0, 8009472 <get_serialized_size_std_msgs__msg__Float32+0x12>
 8009462:	b508      	push	{r3, lr}
 8009464:	460b      	mov	r3, r1
 8009466:	4618      	mov	r0, r3
 8009468:	2104      	movs	r1, #4
 800946a:	f001 f91f 	bl	800a6ac <ucdr_alignment>
 800946e:	3004      	adds	r0, #4
 8009470:	bd08      	pop	{r3, pc}
 8009472:	4770      	bx	lr

08009474 <_Float32__cdr_serialize>:
 8009474:	b120      	cbz	r0, 8009480 <_Float32__cdr_serialize+0xc>
 8009476:	ed90 0a00 	vldr	s0, [r0]
 800947a:	4608      	mov	r0, r1
 800947c:	f000 bf96 	b.w	800a3ac <ucdr_serialize_float>
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop

08009484 <_Float32__get_serialized_size>:
 8009484:	b130      	cbz	r0, 8009494 <_Float32__get_serialized_size+0x10>
 8009486:	b508      	push	{r3, lr}
 8009488:	2104      	movs	r1, #4
 800948a:	2000      	movs	r0, #0
 800948c:	f001 f90e 	bl	800a6ac <ucdr_alignment>
 8009490:	3004      	adds	r0, #4
 8009492:	bd08      	pop	{r3, pc}
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop

08009498 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8009498:	4800      	ldr	r0, [pc, #0]	; (800949c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 800949a:	4770      	bx	lr
 800949c:	20000084 	.word	0x20000084

080094a0 <ucdr_serialize_bool>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	460d      	mov	r5, r1
 80094a4:	2101      	movs	r1, #1
 80094a6:	4604      	mov	r4, r0
 80094a8:	f001 f8b4 	bl	800a614 <ucdr_check_final_buffer_behavior>
 80094ac:	b148      	cbz	r0, 80094c2 <ucdr_serialize_bool+0x22>
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	701d      	strb	r5, [r3, #0]
 80094b2:	68a2      	ldr	r2, [r4, #8]
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	2101      	movs	r1, #1
 80094b8:	440a      	add	r2, r1
 80094ba:	440b      	add	r3, r1
 80094bc:	60a2      	str	r2, [r4, #8]
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	7561      	strb	r1, [r4, #21]
 80094c2:	7da0      	ldrb	r0, [r4, #22]
 80094c4:	f080 0001 	eor.w	r0, r0, #1
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop

080094cc <ucdr_deserialize_bool>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	460d      	mov	r5, r1
 80094d0:	2101      	movs	r1, #1
 80094d2:	4604      	mov	r4, r0
 80094d4:	f001 f89e 	bl	800a614 <ucdr_check_final_buffer_behavior>
 80094d8:	b160      	cbz	r0, 80094f4 <ucdr_deserialize_bool+0x28>
 80094da:	68a2      	ldr	r2, [r4, #8]
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	f812 1b01 	ldrb.w	r1, [r2], #1
 80094e2:	3900      	subs	r1, #0
 80094e4:	bf18      	it	ne
 80094e6:	2101      	movne	r1, #1
 80094e8:	7029      	strb	r1, [r5, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	2101      	movs	r1, #1
 80094ee:	60a2      	str	r2, [r4, #8]
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	7561      	strb	r1, [r4, #21]
 80094f4:	7da0      	ldrb	r0, [r4, #22]
 80094f6:	f080 0001 	eor.w	r0, r0, #1
 80094fa:	bd38      	pop	{r3, r4, r5, pc}

080094fc <ucdr_serialize_uint8_t>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	460d      	mov	r5, r1
 8009500:	2101      	movs	r1, #1
 8009502:	4604      	mov	r4, r0
 8009504:	f001 f886 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009508:	b148      	cbz	r0, 800951e <ucdr_serialize_uint8_t+0x22>
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	701d      	strb	r5, [r3, #0]
 800950e:	68a2      	ldr	r2, [r4, #8]
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	2101      	movs	r1, #1
 8009514:	440a      	add	r2, r1
 8009516:	440b      	add	r3, r1
 8009518:	60a2      	str	r2, [r4, #8]
 800951a:	6123      	str	r3, [r4, #16]
 800951c:	7561      	strb	r1, [r4, #21]
 800951e:	7da0      	ldrb	r0, [r4, #22]
 8009520:	f080 0001 	eor.w	r0, r0, #1
 8009524:	bd38      	pop	{r3, r4, r5, pc}
 8009526:	bf00      	nop

08009528 <ucdr_deserialize_uint8_t>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	460d      	mov	r5, r1
 800952c:	2101      	movs	r1, #1
 800952e:	4604      	mov	r4, r0
 8009530:	f001 f870 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009534:	b150      	cbz	r0, 800954c <ucdr_deserialize_uint8_t+0x24>
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	702b      	strb	r3, [r5, #0]
 800953c:	68a2      	ldr	r2, [r4, #8]
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	2101      	movs	r1, #1
 8009542:	440a      	add	r2, r1
 8009544:	440b      	add	r3, r1
 8009546:	60a2      	str	r2, [r4, #8]
 8009548:	6123      	str	r3, [r4, #16]
 800954a:	7561      	strb	r1, [r4, #21]
 800954c:	7da0      	ldrb	r0, [r4, #22]
 800954e:	f080 0001 	eor.w	r0, r0, #1
 8009552:	bd38      	pop	{r3, r4, r5, pc}

08009554 <ucdr_serialize_uint16_t>:
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	460b      	mov	r3, r1
 800955c:	2102      	movs	r1, #2
 800955e:	4604      	mov	r4, r0
 8009560:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009564:	f001 f8aa 	bl	800a6bc <ucdr_buffer_alignment>
 8009568:	4601      	mov	r1, r0
 800956a:	4620      	mov	r0, r4
 800956c:	7d67      	ldrb	r7, [r4, #21]
 800956e:	f001 f8e9 	bl	800a744 <ucdr_advance_buffer>
 8009572:	2102      	movs	r1, #2
 8009574:	4620      	mov	r0, r4
 8009576:	f001 f841 	bl	800a5fc <ucdr_check_buffer_available_for>
 800957a:	bb78      	cbnz	r0, 80095dc <ucdr_serialize_uint16_t+0x88>
 800957c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009580:	42ab      	cmp	r3, r5
 8009582:	d926      	bls.n	80095d2 <ucdr_serialize_uint16_t+0x7e>
 8009584:	1b5e      	subs	r6, r3, r5
 8009586:	60a3      	str	r3, [r4, #8]
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	f1c6 0802 	rsb	r8, r6, #2
 800958e:	4433      	add	r3, r6
 8009590:	6123      	str	r3, [r4, #16]
 8009592:	4641      	mov	r1, r8
 8009594:	4620      	mov	r0, r4
 8009596:	f001 f83d 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800959a:	2800      	cmp	r0, #0
 800959c:	d03b      	beq.n	8009616 <ucdr_serialize_uint16_t+0xc2>
 800959e:	7d23      	ldrb	r3, [r4, #20]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d04a      	beq.n	800963a <ucdr_serialize_uint16_t+0xe6>
 80095a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80095a8:	702b      	strb	r3, [r5, #0]
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	d040      	beq.n	8009630 <ucdr_serialize_uint16_t+0xdc>
 80095ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80095b2:	706b      	strb	r3, [r5, #1]
 80095b4:	6923      	ldr	r3, [r4, #16]
 80095b6:	68a2      	ldr	r2, [r4, #8]
 80095b8:	7da0      	ldrb	r0, [r4, #22]
 80095ba:	3302      	adds	r3, #2
 80095bc:	1b9e      	subs	r6, r3, r6
 80095be:	4442      	add	r2, r8
 80095c0:	2302      	movs	r3, #2
 80095c2:	f080 0001 	eor.w	r0, r0, #1
 80095c6:	60a2      	str	r2, [r4, #8]
 80095c8:	6126      	str	r6, [r4, #16]
 80095ca:	7563      	strb	r3, [r4, #21]
 80095cc:	b002      	add	sp, #8
 80095ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d2:	2102      	movs	r1, #2
 80095d4:	4620      	mov	r0, r4
 80095d6:	f001 f81d 	bl	800a614 <ucdr_check_final_buffer_behavior>
 80095da:	b190      	cbz	r0, 8009602 <ucdr_serialize_uint16_t+0xae>
 80095dc:	7d23      	ldrb	r3, [r4, #20]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	68a3      	ldr	r3, [r4, #8]
 80095e2:	d014      	beq.n	800960e <ucdr_serialize_uint16_t+0xba>
 80095e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095f0:	705a      	strb	r2, [r3, #1]
 80095f2:	68a2      	ldr	r2, [r4, #8]
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	3202      	adds	r2, #2
 80095f8:	3302      	adds	r3, #2
 80095fa:	2102      	movs	r1, #2
 80095fc:	60a2      	str	r2, [r4, #8]
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	7561      	strb	r1, [r4, #21]
 8009602:	7da0      	ldrb	r0, [r4, #22]
 8009604:	f080 0001 	eor.w	r0, r0, #1
 8009608:	b002      	add	sp, #8
 800960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009612:	801a      	strh	r2, [r3, #0]
 8009614:	e7ed      	b.n	80095f2 <ucdr_serialize_uint16_t+0x9e>
 8009616:	68a2      	ldr	r2, [r4, #8]
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	7da0      	ldrb	r0, [r4, #22]
 800961c:	7567      	strb	r7, [r4, #21]
 800961e:	1b92      	subs	r2, r2, r6
 8009620:	1b9b      	subs	r3, r3, r6
 8009622:	f080 0001 	eor.w	r0, r0, #1
 8009626:	60a2      	str	r2, [r4, #8]
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	b002      	add	sp, #8
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	e7bc      	b.n	80095b4 <ucdr_serialize_uint16_t+0x60>
 800963a:	4628      	mov	r0, r5
 800963c:	f10d 0506 	add.w	r5, sp, #6
 8009640:	4629      	mov	r1, r5
 8009642:	4632      	mov	r2, r6
 8009644:	f00b fa21 	bl	8014a8a <memcpy>
 8009648:	68a0      	ldr	r0, [r4, #8]
 800964a:	4642      	mov	r2, r8
 800964c:	19a9      	adds	r1, r5, r6
 800964e:	f00b fa1c 	bl	8014a8a <memcpy>
 8009652:	e7af      	b.n	80095b4 <ucdr_serialize_uint16_t+0x60>

08009654 <ucdr_serialize_endian_uint16_t>:
 8009654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009658:	b083      	sub	sp, #12
 800965a:	460d      	mov	r5, r1
 800965c:	2102      	movs	r1, #2
 800965e:	4604      	mov	r4, r0
 8009660:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009664:	f001 f82a 	bl	800a6bc <ucdr_buffer_alignment>
 8009668:	4601      	mov	r1, r0
 800966a:	4620      	mov	r0, r4
 800966c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009670:	f001 f868 	bl	800a744 <ucdr_advance_buffer>
 8009674:	2102      	movs	r1, #2
 8009676:	4620      	mov	r0, r4
 8009678:	f000 ffc0 	bl	800a5fc <ucdr_check_buffer_available_for>
 800967c:	bb70      	cbnz	r0, 80096dc <ucdr_serialize_endian_uint16_t+0x88>
 800967e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009682:	42be      	cmp	r6, r7
 8009684:	d925      	bls.n	80096d2 <ucdr_serialize_endian_uint16_t+0x7e>
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	60a6      	str	r6, [r4, #8]
 800968a:	1bf6      	subs	r6, r6, r7
 800968c:	4433      	add	r3, r6
 800968e:	f1c6 0902 	rsb	r9, r6, #2
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	4649      	mov	r1, r9
 8009696:	4620      	mov	r0, r4
 8009698:	f000 ffbc 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800969c:	2800      	cmp	r0, #0
 800969e:	d039      	beq.n	8009714 <ucdr_serialize_endian_uint16_t+0xc0>
 80096a0:	2d01      	cmp	r5, #1
 80096a2:	d04a      	beq.n	800973a <ucdr_serialize_endian_uint16_t+0xe6>
 80096a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80096a8:	703b      	strb	r3, [r7, #0]
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	d040      	beq.n	8009730 <ucdr_serialize_endian_uint16_t+0xdc>
 80096ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80096b2:	707b      	strb	r3, [r7, #1]
 80096b4:	6923      	ldr	r3, [r4, #16]
 80096b6:	68a2      	ldr	r2, [r4, #8]
 80096b8:	7da0      	ldrb	r0, [r4, #22]
 80096ba:	3302      	adds	r3, #2
 80096bc:	444a      	add	r2, r9
 80096be:	1b9b      	subs	r3, r3, r6
 80096c0:	2102      	movs	r1, #2
 80096c2:	f080 0001 	eor.w	r0, r0, #1
 80096c6:	60a2      	str	r2, [r4, #8]
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	7561      	strb	r1, [r4, #21]
 80096cc:	b003      	add	sp, #12
 80096ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096d2:	2102      	movs	r1, #2
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 ff9d 	bl	800a614 <ucdr_check_final_buffer_behavior>
 80096da:	b188      	cbz	r0, 8009700 <ucdr_serialize_endian_uint16_t+0xac>
 80096dc:	2d01      	cmp	r5, #1
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	d014      	beq.n	800970c <ucdr_serialize_endian_uint16_t+0xb8>
 80096e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	68a3      	ldr	r3, [r4, #8]
 80096ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80096ee:	705a      	strb	r2, [r3, #1]
 80096f0:	68a2      	ldr	r2, [r4, #8]
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	3202      	adds	r2, #2
 80096f6:	3302      	adds	r3, #2
 80096f8:	2102      	movs	r1, #2
 80096fa:	60a2      	str	r2, [r4, #8]
 80096fc:	6123      	str	r3, [r4, #16]
 80096fe:	7561      	strb	r1, [r4, #21]
 8009700:	7da0      	ldrb	r0, [r4, #22]
 8009702:	f080 0001 	eor.w	r0, r0, #1
 8009706:	b003      	add	sp, #12
 8009708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800970c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	e7ed      	b.n	80096f0 <ucdr_serialize_endian_uint16_t+0x9c>
 8009714:	68a2      	ldr	r2, [r4, #8]
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	7da0      	ldrb	r0, [r4, #22]
 800971a:	f884 8015 	strb.w	r8, [r4, #21]
 800971e:	1b92      	subs	r2, r2, r6
 8009720:	1b9b      	subs	r3, r3, r6
 8009722:	f080 0001 	eor.w	r0, r0, #1
 8009726:	60a2      	str	r2, [r4, #8]
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	b003      	add	sp, #12
 800972c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009736:	701a      	strb	r2, [r3, #0]
 8009738:	e7bc      	b.n	80096b4 <ucdr_serialize_endian_uint16_t+0x60>
 800973a:	f10d 0506 	add.w	r5, sp, #6
 800973e:	4629      	mov	r1, r5
 8009740:	4632      	mov	r2, r6
 8009742:	4638      	mov	r0, r7
 8009744:	f00b f9a1 	bl	8014a8a <memcpy>
 8009748:	68a0      	ldr	r0, [r4, #8]
 800974a:	464a      	mov	r2, r9
 800974c:	19a9      	adds	r1, r5, r6
 800974e:	f00b f99c 	bl	8014a8a <memcpy>
 8009752:	e7af      	b.n	80096b4 <ucdr_serialize_endian_uint16_t+0x60>

08009754 <ucdr_deserialize_uint16_t>:
 8009754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009758:	460d      	mov	r5, r1
 800975a:	2102      	movs	r1, #2
 800975c:	4604      	mov	r4, r0
 800975e:	f000 ffad 	bl	800a6bc <ucdr_buffer_alignment>
 8009762:	4601      	mov	r1, r0
 8009764:	4620      	mov	r0, r4
 8009766:	f894 8015 	ldrb.w	r8, [r4, #21]
 800976a:	f000 ffeb 	bl	800a744 <ucdr_advance_buffer>
 800976e:	2102      	movs	r1, #2
 8009770:	4620      	mov	r0, r4
 8009772:	f000 ff43 	bl	800a5fc <ucdr_check_buffer_available_for>
 8009776:	bb60      	cbnz	r0, 80097d2 <ucdr_deserialize_uint16_t+0x7e>
 8009778:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800977c:	42be      	cmp	r6, r7
 800977e:	d923      	bls.n	80097c8 <ucdr_deserialize_uint16_t+0x74>
 8009780:	6923      	ldr	r3, [r4, #16]
 8009782:	60a6      	str	r6, [r4, #8]
 8009784:	1bf6      	subs	r6, r6, r7
 8009786:	4433      	add	r3, r6
 8009788:	f1c6 0902 	rsb	r9, r6, #2
 800978c:	6123      	str	r3, [r4, #16]
 800978e:	4649      	mov	r1, r9
 8009790:	4620      	mov	r0, r4
 8009792:	f000 ff3f 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009796:	2800      	cmp	r0, #0
 8009798:	d034      	beq.n	8009804 <ucdr_deserialize_uint16_t+0xb0>
 800979a:	7d23      	ldrb	r3, [r4, #20]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d042      	beq.n	8009826 <ucdr_deserialize_uint16_t+0xd2>
 80097a0:	787b      	ldrb	r3, [r7, #1]
 80097a2:	702b      	strb	r3, [r5, #0]
 80097a4:	2e00      	cmp	r6, #0
 80097a6:	d03a      	beq.n	800981e <ucdr_deserialize_uint16_t+0xca>
 80097a8:	783b      	ldrb	r3, [r7, #0]
 80097aa:	706b      	strb	r3, [r5, #1]
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	68a2      	ldr	r2, [r4, #8]
 80097b0:	7da0      	ldrb	r0, [r4, #22]
 80097b2:	2102      	movs	r1, #2
 80097b4:	3302      	adds	r3, #2
 80097b6:	444a      	add	r2, r9
 80097b8:	1b9b      	subs	r3, r3, r6
 80097ba:	7561      	strb	r1, [r4, #21]
 80097bc:	60a2      	str	r2, [r4, #8]
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	f080 0001 	eor.w	r0, r0, #1
 80097c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c8:	2102      	movs	r1, #2
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 ff22 	bl	800a614 <ucdr_check_final_buffer_behavior>
 80097d0:	b180      	cbz	r0, 80097f4 <ucdr_deserialize_uint16_t+0xa0>
 80097d2:	7d23      	ldrb	r3, [r4, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	d011      	beq.n	80097fe <ucdr_deserialize_uint16_t+0xaa>
 80097da:	785b      	ldrb	r3, [r3, #1]
 80097dc:	702b      	strb	r3, [r5, #0]
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	706b      	strb	r3, [r5, #1]
 80097e4:	68a2      	ldr	r2, [r4, #8]
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	3202      	adds	r2, #2
 80097ea:	3302      	adds	r3, #2
 80097ec:	2102      	movs	r1, #2
 80097ee:	60a2      	str	r2, [r4, #8]
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	7561      	strb	r1, [r4, #21]
 80097f4:	7da0      	ldrb	r0, [r4, #22]
 80097f6:	f080 0001 	eor.w	r0, r0, #1
 80097fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	802b      	strh	r3, [r5, #0]
 8009802:	e7ef      	b.n	80097e4 <ucdr_deserialize_uint16_t+0x90>
 8009804:	68a2      	ldr	r2, [r4, #8]
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	7da0      	ldrb	r0, [r4, #22]
 800980a:	f884 8015 	strb.w	r8, [r4, #21]
 800980e:	1b92      	subs	r2, r2, r6
 8009810:	1b9b      	subs	r3, r3, r6
 8009812:	60a2      	str	r2, [r4, #8]
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	f080 0001 	eor.w	r0, r0, #1
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981e:	68a3      	ldr	r3, [r4, #8]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	706b      	strb	r3, [r5, #1]
 8009824:	e7c2      	b.n	80097ac <ucdr_deserialize_uint16_t+0x58>
 8009826:	4639      	mov	r1, r7
 8009828:	4632      	mov	r2, r6
 800982a:	4628      	mov	r0, r5
 800982c:	f00b f92d 	bl	8014a8a <memcpy>
 8009830:	68a1      	ldr	r1, [r4, #8]
 8009832:	464a      	mov	r2, r9
 8009834:	19a8      	adds	r0, r5, r6
 8009836:	f00b f928 	bl	8014a8a <memcpy>
 800983a:	e7b7      	b.n	80097ac <ucdr_deserialize_uint16_t+0x58>

0800983c <ucdr_deserialize_endian_uint16_t>:
 800983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	460e      	mov	r6, r1
 8009842:	2102      	movs	r1, #2
 8009844:	4604      	mov	r4, r0
 8009846:	4615      	mov	r5, r2
 8009848:	f000 ff38 	bl	800a6bc <ucdr_buffer_alignment>
 800984c:	4601      	mov	r1, r0
 800984e:	4620      	mov	r0, r4
 8009850:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009854:	f000 ff76 	bl	800a744 <ucdr_advance_buffer>
 8009858:	2102      	movs	r1, #2
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fece 	bl	800a5fc <ucdr_check_buffer_available_for>
 8009860:	bb70      	cbnz	r0, 80098c0 <ucdr_deserialize_endian_uint16_t+0x84>
 8009862:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8009866:	4547      	cmp	r7, r8
 8009868:	d925      	bls.n	80098b6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	60a7      	str	r7, [r4, #8]
 800986e:	eba7 0708 	sub.w	r7, r7, r8
 8009872:	443b      	add	r3, r7
 8009874:	f1c7 0a02 	rsb	sl, r7, #2
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	4651      	mov	r1, sl
 800987c:	4620      	mov	r0, r4
 800987e:	f000 fec9 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009882:	2800      	cmp	r0, #0
 8009884:	d034      	beq.n	80098f0 <ucdr_deserialize_endian_uint16_t+0xb4>
 8009886:	2e01      	cmp	r6, #1
 8009888:	d043      	beq.n	8009912 <ucdr_deserialize_endian_uint16_t+0xd6>
 800988a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800988e:	702b      	strb	r3, [r5, #0]
 8009890:	2f00      	cmp	r7, #0
 8009892:	d03a      	beq.n	800990a <ucdr_deserialize_endian_uint16_t+0xce>
 8009894:	f898 3000 	ldrb.w	r3, [r8]
 8009898:	706b      	strb	r3, [r5, #1]
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	68a2      	ldr	r2, [r4, #8]
 800989e:	7da0      	ldrb	r0, [r4, #22]
 80098a0:	2102      	movs	r1, #2
 80098a2:	3302      	adds	r3, #2
 80098a4:	4452      	add	r2, sl
 80098a6:	1bdb      	subs	r3, r3, r7
 80098a8:	7561      	strb	r1, [r4, #21]
 80098aa:	60a2      	str	r2, [r4, #8]
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	f080 0001 	eor.w	r0, r0, #1
 80098b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b6:	2102      	movs	r1, #2
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 feab 	bl	800a614 <ucdr_check_final_buffer_behavior>
 80098be:	b178      	cbz	r0, 80098e0 <ucdr_deserialize_endian_uint16_t+0xa4>
 80098c0:	2e01      	cmp	r6, #1
 80098c2:	68a3      	ldr	r3, [r4, #8]
 80098c4:	d011      	beq.n	80098ea <ucdr_deserialize_endian_uint16_t+0xae>
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	702b      	strb	r3, [r5, #0]
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	706b      	strb	r3, [r5, #1]
 80098d0:	68a2      	ldr	r2, [r4, #8]
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	3202      	adds	r2, #2
 80098d6:	3302      	adds	r3, #2
 80098d8:	2102      	movs	r1, #2
 80098da:	60a2      	str	r2, [r4, #8]
 80098dc:	6123      	str	r3, [r4, #16]
 80098de:	7561      	strb	r1, [r4, #21]
 80098e0:	7da0      	ldrb	r0, [r4, #22]
 80098e2:	f080 0001 	eor.w	r0, r0, #1
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	802b      	strh	r3, [r5, #0]
 80098ee:	e7ef      	b.n	80098d0 <ucdr_deserialize_endian_uint16_t+0x94>
 80098f0:	68a2      	ldr	r2, [r4, #8]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	7da0      	ldrb	r0, [r4, #22]
 80098f6:	f884 9015 	strb.w	r9, [r4, #21]
 80098fa:	1bd2      	subs	r2, r2, r7
 80098fc:	1bdb      	subs	r3, r3, r7
 80098fe:	60a2      	str	r2, [r4, #8]
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	f080 0001 	eor.w	r0, r0, #1
 8009906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	706b      	strb	r3, [r5, #1]
 8009910:	e7c3      	b.n	800989a <ucdr_deserialize_endian_uint16_t+0x5e>
 8009912:	4641      	mov	r1, r8
 8009914:	463a      	mov	r2, r7
 8009916:	4628      	mov	r0, r5
 8009918:	f00b f8b7 	bl	8014a8a <memcpy>
 800991c:	68a1      	ldr	r1, [r4, #8]
 800991e:	4652      	mov	r2, sl
 8009920:	19e8      	adds	r0, r5, r7
 8009922:	f00b f8b2 	bl	8014a8a <memcpy>
 8009926:	e7b8      	b.n	800989a <ucdr_deserialize_endian_uint16_t+0x5e>

08009928 <ucdr_serialize_uint32_t>:
 8009928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	4604      	mov	r4, r0
 8009930:	9101      	str	r1, [sp, #4]
 8009932:	2104      	movs	r1, #4
 8009934:	f000 fec2 	bl	800a6bc <ucdr_buffer_alignment>
 8009938:	4601      	mov	r1, r0
 800993a:	4620      	mov	r0, r4
 800993c:	7d67      	ldrb	r7, [r4, #21]
 800993e:	f000 ff01 	bl	800a744 <ucdr_advance_buffer>
 8009942:	2104      	movs	r1, #4
 8009944:	4620      	mov	r0, r4
 8009946:	f000 fe59 	bl	800a5fc <ucdr_check_buffer_available_for>
 800994a:	2800      	cmp	r0, #0
 800994c:	d139      	bne.n	80099c2 <ucdr_serialize_uint32_t+0x9a>
 800994e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009952:	42ab      	cmp	r3, r5
 8009954:	d930      	bls.n	80099b8 <ucdr_serialize_uint32_t+0x90>
 8009956:	1b5e      	subs	r6, r3, r5
 8009958:	60a3      	str	r3, [r4, #8]
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	f1c6 0804 	rsb	r8, r6, #4
 8009960:	4433      	add	r3, r6
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	4641      	mov	r1, r8
 8009966:	4620      	mov	r0, r4
 8009968:	f000 fe54 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800996c:	2800      	cmp	r0, #0
 800996e:	d04c      	beq.n	8009a0a <ucdr_serialize_uint32_t+0xe2>
 8009970:	7d23      	ldrb	r3, [r4, #20]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d063      	beq.n	8009a3e <ucdr_serialize_uint32_t+0x116>
 8009976:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800997a:	702b      	strb	r3, [r5, #0]
 800997c:	2e00      	cmp	r6, #0
 800997e:	d051      	beq.n	8009a24 <ucdr_serialize_uint32_t+0xfc>
 8009980:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009984:	706b      	strb	r3, [r5, #1]
 8009986:	2e01      	cmp	r6, #1
 8009988:	d050      	beq.n	8009a2c <ucdr_serialize_uint32_t+0x104>
 800998a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800998e:	70ab      	strb	r3, [r5, #2]
 8009990:	2e02      	cmp	r6, #2
 8009992:	d04f      	beq.n	8009a34 <ucdr_serialize_uint32_t+0x10c>
 8009994:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009998:	70eb      	strb	r3, [r5, #3]
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	68a2      	ldr	r2, [r4, #8]
 800999e:	7da0      	ldrb	r0, [r4, #22]
 80099a0:	3304      	adds	r3, #4
 80099a2:	1b9e      	subs	r6, r3, r6
 80099a4:	4442      	add	r2, r8
 80099a6:	2304      	movs	r3, #4
 80099a8:	f080 0001 	eor.w	r0, r0, #1
 80099ac:	60a2      	str	r2, [r4, #8]
 80099ae:	6126      	str	r6, [r4, #16]
 80099b0:	7563      	strb	r3, [r4, #21]
 80099b2:	b002      	add	sp, #8
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b8:	2104      	movs	r1, #4
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 fe2a 	bl	800a614 <ucdr_check_final_buffer_behavior>
 80099c0:	b1d0      	cbz	r0, 80099f8 <ucdr_serialize_uint32_t+0xd0>
 80099c2:	7d23      	ldrb	r3, [r4, #20]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	d01c      	beq.n	8009a04 <ucdr_serialize_uint32_t+0xdc>
 80099ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	68a3      	ldr	r3, [r4, #8]
 80099d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80099d6:	705a      	strb	r2, [r3, #1]
 80099d8:	68a3      	ldr	r3, [r4, #8]
 80099da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80099de:	709a      	strb	r2, [r3, #2]
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80099e6:	70da      	strb	r2, [r3, #3]
 80099e8:	68a2      	ldr	r2, [r4, #8]
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	3204      	adds	r2, #4
 80099ee:	3304      	adds	r3, #4
 80099f0:	2104      	movs	r1, #4
 80099f2:	60a2      	str	r2, [r4, #8]
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	7561      	strb	r1, [r4, #21]
 80099f8:	7da0      	ldrb	r0, [r4, #22]
 80099fa:	f080 0001 	eor.w	r0, r0, #1
 80099fe:	b002      	add	sp, #8
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	9a01      	ldr	r2, [sp, #4]
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	e7ee      	b.n	80099e8 <ucdr_serialize_uint32_t+0xc0>
 8009a0a:	68a2      	ldr	r2, [r4, #8]
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	7da0      	ldrb	r0, [r4, #22]
 8009a10:	7567      	strb	r7, [r4, #21]
 8009a12:	1b92      	subs	r2, r2, r6
 8009a14:	1b9b      	subs	r3, r3, r6
 8009a16:	f080 0001 	eor.w	r0, r0, #1
 8009a1a:	60a2      	str	r2, [r4, #8]
 8009a1c:	6123      	str	r3, [r4, #16]
 8009a1e:	b002      	add	sp, #8
 8009a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	68a3      	ldr	r3, [r4, #8]
 8009a2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e7ad      	b.n	800999a <ucdr_serialize_uint32_t+0x72>
 8009a3e:	4628      	mov	r0, r5
 8009a40:	ad01      	add	r5, sp, #4
 8009a42:	4629      	mov	r1, r5
 8009a44:	4632      	mov	r2, r6
 8009a46:	f00b f820 	bl	8014a8a <memcpy>
 8009a4a:	68a0      	ldr	r0, [r4, #8]
 8009a4c:	4642      	mov	r2, r8
 8009a4e:	19a9      	adds	r1, r5, r6
 8009a50:	f00b f81b 	bl	8014a8a <memcpy>
 8009a54:	e7a1      	b.n	800999a <ucdr_serialize_uint32_t+0x72>
 8009a56:	bf00      	nop

08009a58 <ucdr_serialize_endian_uint32_t>:
 8009a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	460d      	mov	r5, r1
 8009a60:	2104      	movs	r1, #4
 8009a62:	4604      	mov	r4, r0
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	f000 fe29 	bl	800a6bc <ucdr_buffer_alignment>
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009a72:	f000 fe67 	bl	800a744 <ucdr_advance_buffer>
 8009a76:	2104      	movs	r1, #4
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 fdbf 	bl	800a5fc <ucdr_check_buffer_available_for>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d138      	bne.n	8009af4 <ucdr_serialize_endian_uint32_t+0x9c>
 8009a82:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009a86:	42b7      	cmp	r7, r6
 8009a88:	d92f      	bls.n	8009aea <ucdr_serialize_endian_uint32_t+0x92>
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	60a7      	str	r7, [r4, #8]
 8009a8e:	1bbf      	subs	r7, r7, r6
 8009a90:	443b      	add	r3, r7
 8009a92:	f1c7 0904 	rsb	r9, r7, #4
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 fdba 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d04a      	beq.n	8009b3a <ucdr_serialize_endian_uint32_t+0xe2>
 8009aa4:	2d01      	cmp	r5, #1
 8009aa6:	d063      	beq.n	8009b70 <ucdr_serialize_endian_uint32_t+0x118>
 8009aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009aac:	7033      	strb	r3, [r6, #0]
 8009aae:	2f00      	cmp	r7, #0
 8009ab0:	d051      	beq.n	8009b56 <ucdr_serialize_endian_uint32_t+0xfe>
 8009ab2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009ab6:	7073      	strb	r3, [r6, #1]
 8009ab8:	2f01      	cmp	r7, #1
 8009aba:	d050      	beq.n	8009b5e <ucdr_serialize_endian_uint32_t+0x106>
 8009abc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009ac0:	70b3      	strb	r3, [r6, #2]
 8009ac2:	2f02      	cmp	r7, #2
 8009ac4:	d04f      	beq.n	8009b66 <ucdr_serialize_endian_uint32_t+0x10e>
 8009ac6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009aca:	70f3      	strb	r3, [r6, #3]
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	68a2      	ldr	r2, [r4, #8]
 8009ad0:	7da0      	ldrb	r0, [r4, #22]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	444a      	add	r2, r9
 8009ad6:	1bdb      	subs	r3, r3, r7
 8009ad8:	2104      	movs	r1, #4
 8009ada:	f080 0001 	eor.w	r0, r0, #1
 8009ade:	60a2      	str	r2, [r4, #8]
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	7561      	strb	r1, [r4, #21]
 8009ae4:	b003      	add	sp, #12
 8009ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aea:	2104      	movs	r1, #4
 8009aec:	4620      	mov	r0, r4
 8009aee:	f000 fd91 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009af2:	b1c8      	cbz	r0, 8009b28 <ucdr_serialize_endian_uint32_t+0xd0>
 8009af4:	2d01      	cmp	r5, #1
 8009af6:	68a3      	ldr	r3, [r4, #8]
 8009af8:	d01c      	beq.n	8009b34 <ucdr_serialize_endian_uint32_t+0xdc>
 8009afa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009afe:	701a      	strb	r2, [r3, #0]
 8009b00:	68a3      	ldr	r3, [r4, #8]
 8009b02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009b06:	705a      	strb	r2, [r3, #1]
 8009b08:	68a3      	ldr	r3, [r4, #8]
 8009b0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b0e:	709a      	strb	r2, [r3, #2]
 8009b10:	68a3      	ldr	r3, [r4, #8]
 8009b12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b16:	70da      	strb	r2, [r3, #3]
 8009b18:	68a2      	ldr	r2, [r4, #8]
 8009b1a:	6923      	ldr	r3, [r4, #16]
 8009b1c:	3204      	adds	r2, #4
 8009b1e:	3304      	adds	r3, #4
 8009b20:	2104      	movs	r1, #4
 8009b22:	60a2      	str	r2, [r4, #8]
 8009b24:	6123      	str	r3, [r4, #16]
 8009b26:	7561      	strb	r1, [r4, #21]
 8009b28:	7da0      	ldrb	r0, [r4, #22]
 8009b2a:	f080 0001 	eor.w	r0, r0, #1
 8009b2e:	b003      	add	sp, #12
 8009b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b34:	9a01      	ldr	r2, [sp, #4]
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e7ee      	b.n	8009b18 <ucdr_serialize_endian_uint32_t+0xc0>
 8009b3a:	68a2      	ldr	r2, [r4, #8]
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	7da0      	ldrb	r0, [r4, #22]
 8009b40:	f884 8015 	strb.w	r8, [r4, #21]
 8009b44:	1bd2      	subs	r2, r2, r7
 8009b46:	1bdb      	subs	r3, r3, r7
 8009b48:	f080 0001 	eor.w	r0, r0, #1
 8009b4c:	60a2      	str	r2, [r4, #8]
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	b003      	add	sp, #12
 8009b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b56:	68a3      	ldr	r3, [r4, #8]
 8009b58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	68a3      	ldr	r3, [r4, #8]
 8009b60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	68a3      	ldr	r3, [r4, #8]
 8009b68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	e7ad      	b.n	8009acc <ucdr_serialize_endian_uint32_t+0x74>
 8009b70:	ad01      	add	r5, sp, #4
 8009b72:	4629      	mov	r1, r5
 8009b74:	463a      	mov	r2, r7
 8009b76:	4630      	mov	r0, r6
 8009b78:	f00a ff87 	bl	8014a8a <memcpy>
 8009b7c:	68a0      	ldr	r0, [r4, #8]
 8009b7e:	464a      	mov	r2, r9
 8009b80:	19e9      	adds	r1, r5, r7
 8009b82:	f00a ff82 	bl	8014a8a <memcpy>
 8009b86:	e7a1      	b.n	8009acc <ucdr_serialize_endian_uint32_t+0x74>

08009b88 <ucdr_deserialize_uint32_t>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	2104      	movs	r1, #4
 8009b90:	4604      	mov	r4, r0
 8009b92:	f000 fd93 	bl	800a6bc <ucdr_buffer_alignment>
 8009b96:	4601      	mov	r1, r0
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009b9e:	f000 fdd1 	bl	800a744 <ucdr_advance_buffer>
 8009ba2:	2104      	movs	r1, #4
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 fd29 	bl	800a5fc <ucdr_check_buffer_available_for>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d138      	bne.n	8009c20 <ucdr_deserialize_uint32_t+0x98>
 8009bae:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009bb2:	42b7      	cmp	r7, r6
 8009bb4:	d92f      	bls.n	8009c16 <ucdr_deserialize_uint32_t+0x8e>
 8009bb6:	6923      	ldr	r3, [r4, #16]
 8009bb8:	60a7      	str	r7, [r4, #8]
 8009bba:	1bbf      	subs	r7, r7, r6
 8009bbc:	443b      	add	r3, r7
 8009bbe:	f1c7 0904 	rsb	r9, r7, #4
 8009bc2:	6123      	str	r3, [r4, #16]
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fd24 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d046      	beq.n	8009c5e <ucdr_deserialize_uint32_t+0xd6>
 8009bd0:	7d23      	ldrb	r3, [r4, #20]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d05c      	beq.n	8009c90 <ucdr_deserialize_uint32_t+0x108>
 8009bd6:	78f3      	ldrb	r3, [r6, #3]
 8009bd8:	702b      	strb	r3, [r5, #0]
 8009bda:	2f00      	cmp	r7, #0
 8009bdc:	d04c      	beq.n	8009c78 <ucdr_deserialize_uint32_t+0xf0>
 8009bde:	78b3      	ldrb	r3, [r6, #2]
 8009be0:	706b      	strb	r3, [r5, #1]
 8009be2:	2f01      	cmp	r7, #1
 8009be4:	f105 0302 	add.w	r3, r5, #2
 8009be8:	d04a      	beq.n	8009c80 <ucdr_deserialize_uint32_t+0xf8>
 8009bea:	7873      	ldrb	r3, [r6, #1]
 8009bec:	70ab      	strb	r3, [r5, #2]
 8009bee:	2f02      	cmp	r7, #2
 8009bf0:	f105 0303 	add.w	r3, r5, #3
 8009bf4:	d048      	beq.n	8009c88 <ucdr_deserialize_uint32_t+0x100>
 8009bf6:	7833      	ldrb	r3, [r6, #0]
 8009bf8:	70eb      	strb	r3, [r5, #3]
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	68a2      	ldr	r2, [r4, #8]
 8009bfe:	7da0      	ldrb	r0, [r4, #22]
 8009c00:	2104      	movs	r1, #4
 8009c02:	3304      	adds	r3, #4
 8009c04:	444a      	add	r2, r9
 8009c06:	1bdb      	subs	r3, r3, r7
 8009c08:	7561      	strb	r1, [r4, #21]
 8009c0a:	60a2      	str	r2, [r4, #8]
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	f080 0001 	eor.w	r0, r0, #1
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c16:	2104      	movs	r1, #4
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fcfb 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009c1e:	b1b0      	cbz	r0, 8009c4e <ucdr_deserialize_uint32_t+0xc6>
 8009c20:	7d23      	ldrb	r3, [r4, #20]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	68a3      	ldr	r3, [r4, #8]
 8009c26:	d017      	beq.n	8009c58 <ucdr_deserialize_uint32_t+0xd0>
 8009c28:	78db      	ldrb	r3, [r3, #3]
 8009c2a:	702b      	strb	r3, [r5, #0]
 8009c2c:	68a3      	ldr	r3, [r4, #8]
 8009c2e:	789b      	ldrb	r3, [r3, #2]
 8009c30:	706b      	strb	r3, [r5, #1]
 8009c32:	68a3      	ldr	r3, [r4, #8]
 8009c34:	785b      	ldrb	r3, [r3, #1]
 8009c36:	70ab      	strb	r3, [r5, #2]
 8009c38:	68a3      	ldr	r3, [r4, #8]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	70eb      	strb	r3, [r5, #3]
 8009c3e:	68a2      	ldr	r2, [r4, #8]
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	3204      	adds	r2, #4
 8009c44:	3304      	adds	r3, #4
 8009c46:	2104      	movs	r1, #4
 8009c48:	60a2      	str	r2, [r4, #8]
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	7561      	strb	r1, [r4, #21]
 8009c4e:	7da0      	ldrb	r0, [r4, #22]
 8009c50:	f080 0001 	eor.w	r0, r0, #1
 8009c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	e7ef      	b.n	8009c3e <ucdr_deserialize_uint32_t+0xb6>
 8009c5e:	68a2      	ldr	r2, [r4, #8]
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	7da0      	ldrb	r0, [r4, #22]
 8009c64:	f884 8015 	strb.w	r8, [r4, #21]
 8009c68:	1bd2      	subs	r2, r2, r7
 8009c6a:	1bdb      	subs	r3, r3, r7
 8009c6c:	60a2      	str	r2, [r4, #8]
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	f080 0001 	eor.w	r0, r0, #1
 8009c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c78:	68a3      	ldr	r3, [r4, #8]
 8009c7a:	789b      	ldrb	r3, [r3, #2]
 8009c7c:	706b      	strb	r3, [r5, #1]
 8009c7e:	1cab      	adds	r3, r5, #2
 8009c80:	68a2      	ldr	r2, [r4, #8]
 8009c82:	7852      	ldrb	r2, [r2, #1]
 8009c84:	f803 2b01 	strb.w	r2, [r3], #1
 8009c88:	68a2      	ldr	r2, [r4, #8]
 8009c8a:	7812      	ldrb	r2, [r2, #0]
 8009c8c:	701a      	strb	r2, [r3, #0]
 8009c8e:	e7b4      	b.n	8009bfa <ucdr_deserialize_uint32_t+0x72>
 8009c90:	4631      	mov	r1, r6
 8009c92:	463a      	mov	r2, r7
 8009c94:	4628      	mov	r0, r5
 8009c96:	f00a fef8 	bl	8014a8a <memcpy>
 8009c9a:	68a1      	ldr	r1, [r4, #8]
 8009c9c:	464a      	mov	r2, r9
 8009c9e:	19e8      	adds	r0, r5, r7
 8009ca0:	f00a fef3 	bl	8014a8a <memcpy>
 8009ca4:	e7a9      	b.n	8009bfa <ucdr_deserialize_uint32_t+0x72>
 8009ca6:	bf00      	nop

08009ca8 <ucdr_deserialize_endian_uint32_t>:
 8009ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cac:	460e      	mov	r6, r1
 8009cae:	2104      	movs	r1, #4
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	4615      	mov	r5, r2
 8009cb4:	f000 fd02 	bl	800a6bc <ucdr_buffer_alignment>
 8009cb8:	4601      	mov	r1, r0
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009cc0:	f000 fd40 	bl	800a744 <ucdr_advance_buffer>
 8009cc4:	2104      	movs	r1, #4
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 fc98 	bl	800a5fc <ucdr_check_buffer_available_for>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d13c      	bne.n	8009d4a <ucdr_deserialize_endian_uint32_t+0xa2>
 8009cd0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009cd4:	42bb      	cmp	r3, r7
 8009cd6:	d933      	bls.n	8009d40 <ucdr_deserialize_endian_uint32_t+0x98>
 8009cd8:	eba3 0807 	sub.w	r8, r3, r7
 8009cdc:	60a3      	str	r3, [r4, #8]
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	f1c8 0a04 	rsb	sl, r8, #4
 8009ce4:	4443      	add	r3, r8
 8009ce6:	6123      	str	r3, [r4, #16]
 8009ce8:	4651      	mov	r1, sl
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fc92 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d048      	beq.n	8009d86 <ucdr_deserialize_endian_uint32_t+0xde>
 8009cf4:	2e01      	cmp	r6, #1
 8009cf6:	d061      	beq.n	8009dbc <ucdr_deserialize_endian_uint32_t+0x114>
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	702b      	strb	r3, [r5, #0]
 8009cfc:	f1b8 0f00 	cmp.w	r8, #0
 8009d00:	d050      	beq.n	8009da4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009d02:	78bb      	ldrb	r3, [r7, #2]
 8009d04:	706b      	strb	r3, [r5, #1]
 8009d06:	f1b8 0f01 	cmp.w	r8, #1
 8009d0a:	f105 0302 	add.w	r3, r5, #2
 8009d0e:	d04d      	beq.n	8009dac <ucdr_deserialize_endian_uint32_t+0x104>
 8009d10:	787b      	ldrb	r3, [r7, #1]
 8009d12:	70ab      	strb	r3, [r5, #2]
 8009d14:	f1b8 0f02 	cmp.w	r8, #2
 8009d18:	f105 0303 	add.w	r3, r5, #3
 8009d1c:	d04a      	beq.n	8009db4 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009d1e:	783b      	ldrb	r3, [r7, #0]
 8009d20:	70eb      	strb	r3, [r5, #3]
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	68a2      	ldr	r2, [r4, #8]
 8009d26:	7da0      	ldrb	r0, [r4, #22]
 8009d28:	2104      	movs	r1, #4
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	4452      	add	r2, sl
 8009d2e:	eba3 0308 	sub.w	r3, r3, r8
 8009d32:	7561      	strb	r1, [r4, #21]
 8009d34:	60a2      	str	r2, [r4, #8]
 8009d36:	6123      	str	r3, [r4, #16]
 8009d38:	f080 0001 	eor.w	r0, r0, #1
 8009d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d40:	2104      	movs	r1, #4
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fc66 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009d48:	b1a8      	cbz	r0, 8009d76 <ucdr_deserialize_endian_uint32_t+0xce>
 8009d4a:	2e01      	cmp	r6, #1
 8009d4c:	68a3      	ldr	r3, [r4, #8]
 8009d4e:	d017      	beq.n	8009d80 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009d50:	78db      	ldrb	r3, [r3, #3]
 8009d52:	702b      	strb	r3, [r5, #0]
 8009d54:	68a3      	ldr	r3, [r4, #8]
 8009d56:	789b      	ldrb	r3, [r3, #2]
 8009d58:	706b      	strb	r3, [r5, #1]
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	785b      	ldrb	r3, [r3, #1]
 8009d5e:	70ab      	strb	r3, [r5, #2]
 8009d60:	68a3      	ldr	r3, [r4, #8]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	70eb      	strb	r3, [r5, #3]
 8009d66:	68a2      	ldr	r2, [r4, #8]
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	3204      	adds	r2, #4
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	2104      	movs	r1, #4
 8009d70:	60a2      	str	r2, [r4, #8]
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	7561      	strb	r1, [r4, #21]
 8009d76:	7da0      	ldrb	r0, [r4, #22]
 8009d78:	f080 0001 	eor.w	r0, r0, #1
 8009d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	602b      	str	r3, [r5, #0]
 8009d84:	e7ef      	b.n	8009d66 <ucdr_deserialize_endian_uint32_t+0xbe>
 8009d86:	68a2      	ldr	r2, [r4, #8]
 8009d88:	6923      	ldr	r3, [r4, #16]
 8009d8a:	7da0      	ldrb	r0, [r4, #22]
 8009d8c:	f884 9015 	strb.w	r9, [r4, #21]
 8009d90:	eba2 0208 	sub.w	r2, r2, r8
 8009d94:	eba3 0308 	sub.w	r3, r3, r8
 8009d98:	60a2      	str	r2, [r4, #8]
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	f080 0001 	eor.w	r0, r0, #1
 8009da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da4:	68a3      	ldr	r3, [r4, #8]
 8009da6:	789b      	ldrb	r3, [r3, #2]
 8009da8:	706b      	strb	r3, [r5, #1]
 8009daa:	1cab      	adds	r3, r5, #2
 8009dac:	68a2      	ldr	r2, [r4, #8]
 8009dae:	7852      	ldrb	r2, [r2, #1]
 8009db0:	f803 2b01 	strb.w	r2, [r3], #1
 8009db4:	68a2      	ldr	r2, [r4, #8]
 8009db6:	7812      	ldrb	r2, [r2, #0]
 8009db8:	701a      	strb	r2, [r3, #0]
 8009dba:	e7b2      	b.n	8009d22 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	4642      	mov	r2, r8
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f00a fe62 	bl	8014a8a <memcpy>
 8009dc6:	68a1      	ldr	r1, [r4, #8]
 8009dc8:	4652      	mov	r2, sl
 8009dca:	eb05 0008 	add.w	r0, r5, r8
 8009dce:	f00a fe5c 	bl	8014a8a <memcpy>
 8009dd2:	e7a6      	b.n	8009d22 <ucdr_deserialize_endian_uint32_t+0x7a>

08009dd4 <ucdr_serialize_uint64_t>:
 8009dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd8:	2108      	movs	r1, #8
 8009dda:	b082      	sub	sp, #8
 8009ddc:	4604      	mov	r4, r0
 8009dde:	e9cd 2300 	strd	r2, r3, [sp]
 8009de2:	f000 fc6b 	bl	800a6bc <ucdr_buffer_alignment>
 8009de6:	4601      	mov	r1, r0
 8009de8:	4620      	mov	r0, r4
 8009dea:	7d67      	ldrb	r7, [r4, #21]
 8009dec:	f000 fcaa 	bl	800a744 <ucdr_advance_buffer>
 8009df0:	2108      	movs	r1, #8
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 fc02 	bl	800a5fc <ucdr_check_buffer_available_for>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d14e      	bne.n	8009e9a <ucdr_serialize_uint64_t+0xc6>
 8009dfc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009e00:	42ab      	cmp	r3, r5
 8009e02:	d945      	bls.n	8009e90 <ucdr_serialize_uint64_t+0xbc>
 8009e04:	1b5e      	subs	r6, r3, r5
 8009e06:	60a3      	str	r3, [r4, #8]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	f1c6 0808 	rsb	r8, r6, #8
 8009e0e:	4433      	add	r3, r6
 8009e10:	6123      	str	r3, [r4, #16]
 8009e12:	4641      	mov	r1, r8
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fbfd 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d074      	beq.n	8009f08 <ucdr_serialize_uint64_t+0x134>
 8009e1e:	7d23      	ldrb	r3, [r4, #20]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	f000 809b 	beq.w	8009f5c <ucdr_serialize_uint64_t+0x188>
 8009e26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009e2a:	702b      	strb	r3, [r5, #0]
 8009e2c:	2e00      	cmp	r6, #0
 8009e2e:	d078      	beq.n	8009f22 <ucdr_serialize_uint64_t+0x14e>
 8009e30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009e34:	706b      	strb	r3, [r5, #1]
 8009e36:	2e01      	cmp	r6, #1
 8009e38:	d077      	beq.n	8009f2a <ucdr_serialize_uint64_t+0x156>
 8009e3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009e3e:	70ab      	strb	r3, [r5, #2]
 8009e40:	2e02      	cmp	r6, #2
 8009e42:	d076      	beq.n	8009f32 <ucdr_serialize_uint64_t+0x15e>
 8009e44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009e48:	70eb      	strb	r3, [r5, #3]
 8009e4a:	2e03      	cmp	r6, #3
 8009e4c:	d075      	beq.n	8009f3a <ucdr_serialize_uint64_t+0x166>
 8009e4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e52:	712b      	strb	r3, [r5, #4]
 8009e54:	2e04      	cmp	r6, #4
 8009e56:	d074      	beq.n	8009f42 <ucdr_serialize_uint64_t+0x16e>
 8009e58:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009e5c:	716b      	strb	r3, [r5, #5]
 8009e5e:	2e05      	cmp	r6, #5
 8009e60:	d073      	beq.n	8009f4a <ucdr_serialize_uint64_t+0x176>
 8009e62:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009e66:	71ab      	strb	r3, [r5, #6]
 8009e68:	2e06      	cmp	r6, #6
 8009e6a:	d072      	beq.n	8009f52 <ucdr_serialize_uint64_t+0x17e>
 8009e6c:	f89d 3000 	ldrb.w	r3, [sp]
 8009e70:	71eb      	strb	r3, [r5, #7]
 8009e72:	6923      	ldr	r3, [r4, #16]
 8009e74:	68a2      	ldr	r2, [r4, #8]
 8009e76:	7da0      	ldrb	r0, [r4, #22]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	1b9e      	subs	r6, r3, r6
 8009e7c:	4442      	add	r2, r8
 8009e7e:	2308      	movs	r3, #8
 8009e80:	f080 0001 	eor.w	r0, r0, #1
 8009e84:	60a2      	str	r2, [r4, #8]
 8009e86:	6126      	str	r6, [r4, #16]
 8009e88:	7563      	strb	r3, [r4, #21]
 8009e8a:	b002      	add	sp, #8
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	2108      	movs	r1, #8
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 fbbe 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009e98:	b350      	cbz	r0, 8009ef0 <ucdr_serialize_uint64_t+0x11c>
 8009e9a:	7d23      	ldrb	r3, [r4, #20]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d02d      	beq.n	8009efc <ucdr_serialize_uint64_t+0x128>
 8009ea0:	68a3      	ldr	r3, [r4, #8]
 8009ea2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	68a3      	ldr	r3, [r4, #8]
 8009eaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009eae:	705a      	strb	r2, [r3, #1]
 8009eb0:	68a3      	ldr	r3, [r4, #8]
 8009eb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009eb6:	709a      	strb	r2, [r3, #2]
 8009eb8:	68a3      	ldr	r3, [r4, #8]
 8009eba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ebe:	70da      	strb	r2, [r3, #3]
 8009ec0:	68a3      	ldr	r3, [r4, #8]
 8009ec2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009ec6:	711a      	strb	r2, [r3, #4]
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009ece:	715a      	strb	r2, [r3, #5]
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009ed6:	719a      	strb	r2, [r3, #6]
 8009ed8:	68a3      	ldr	r3, [r4, #8]
 8009eda:	f89d 2000 	ldrb.w	r2, [sp]
 8009ede:	71da      	strb	r2, [r3, #7]
 8009ee0:	68a2      	ldr	r2, [r4, #8]
 8009ee2:	6923      	ldr	r3, [r4, #16]
 8009ee4:	3208      	adds	r2, #8
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	2108      	movs	r1, #8
 8009eea:	60a2      	str	r2, [r4, #8]
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	7561      	strb	r1, [r4, #21]
 8009ef0:	7da0      	ldrb	r0, [r4, #22]
 8009ef2:	f080 0001 	eor.w	r0, r0, #1
 8009ef6:	b002      	add	sp, #8
 8009ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009efc:	466b      	mov	r3, sp
 8009efe:	cb03      	ldmia	r3!, {r0, r1}
 8009f00:	68a3      	ldr	r3, [r4, #8]
 8009f02:	6018      	str	r0, [r3, #0]
 8009f04:	6059      	str	r1, [r3, #4]
 8009f06:	e7eb      	b.n	8009ee0 <ucdr_serialize_uint64_t+0x10c>
 8009f08:	68a2      	ldr	r2, [r4, #8]
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	7da0      	ldrb	r0, [r4, #22]
 8009f0e:	7567      	strb	r7, [r4, #21]
 8009f10:	1b92      	subs	r2, r2, r6
 8009f12:	1b9b      	subs	r3, r3, r6
 8009f14:	f080 0001 	eor.w	r0, r0, #1
 8009f18:	60a2      	str	r2, [r4, #8]
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	b002      	add	sp, #8
 8009f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f22:	68a3      	ldr	r3, [r4, #8]
 8009f24:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	68a3      	ldr	r3, [r4, #8]
 8009f2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	68a3      	ldr	r3, [r4, #8]
 8009f34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009f48:	701a      	strb	r2, [r3, #0]
 8009f4a:	68a3      	ldr	r3, [r4, #8]
 8009f4c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	f89d 2000 	ldrb.w	r2, [sp]
 8009f58:	701a      	strb	r2, [r3, #0]
 8009f5a:	e78a      	b.n	8009e72 <ucdr_serialize_uint64_t+0x9e>
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	466d      	mov	r5, sp
 8009f60:	4629      	mov	r1, r5
 8009f62:	4632      	mov	r2, r6
 8009f64:	f00a fd91 	bl	8014a8a <memcpy>
 8009f68:	68a0      	ldr	r0, [r4, #8]
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	19a9      	adds	r1, r5, r6
 8009f6e:	f00a fd8c 	bl	8014a8a <memcpy>
 8009f72:	e77e      	b.n	8009e72 <ucdr_serialize_uint64_t+0x9e>

08009f74 <ucdr_serialize_int16_t>:
 8009f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	4604      	mov	r4, r0
 8009f80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009f84:	f000 fb9a 	bl	800a6bc <ucdr_buffer_alignment>
 8009f88:	4601      	mov	r1, r0
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	7d67      	ldrb	r7, [r4, #21]
 8009f8e:	f000 fbd9 	bl	800a744 <ucdr_advance_buffer>
 8009f92:	2102      	movs	r1, #2
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 fb31 	bl	800a5fc <ucdr_check_buffer_available_for>
 8009f9a:	bb78      	cbnz	r0, 8009ffc <ucdr_serialize_int16_t+0x88>
 8009f9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	d926      	bls.n	8009ff2 <ucdr_serialize_int16_t+0x7e>
 8009fa4:	1b5e      	subs	r6, r3, r5
 8009fa6:	60a3      	str	r3, [r4, #8]
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	f1c6 0802 	rsb	r8, r6, #2
 8009fae:	4433      	add	r3, r6
 8009fb0:	6123      	str	r3, [r4, #16]
 8009fb2:	4641      	mov	r1, r8
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f000 fb2d 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d03b      	beq.n	800a036 <ucdr_serialize_int16_t+0xc2>
 8009fbe:	7d23      	ldrb	r3, [r4, #20]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d04a      	beq.n	800a05a <ucdr_serialize_int16_t+0xe6>
 8009fc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009fc8:	702b      	strb	r3, [r5, #0]
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	d040      	beq.n	800a050 <ucdr_serialize_int16_t+0xdc>
 8009fce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009fd2:	706b      	strb	r3, [r5, #1]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	68a2      	ldr	r2, [r4, #8]
 8009fd8:	7da0      	ldrb	r0, [r4, #22]
 8009fda:	3302      	adds	r3, #2
 8009fdc:	1b9e      	subs	r6, r3, r6
 8009fde:	4442      	add	r2, r8
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	f080 0001 	eor.w	r0, r0, #1
 8009fe6:	60a2      	str	r2, [r4, #8]
 8009fe8:	6126      	str	r6, [r4, #16]
 8009fea:	7563      	strb	r3, [r4, #21]
 8009fec:	b002      	add	sp, #8
 8009fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fb0d 	bl	800a614 <ucdr_check_final_buffer_behavior>
 8009ffa:	b190      	cbz	r0, 800a022 <ucdr_serialize_int16_t+0xae>
 8009ffc:	7d23      	ldrb	r3, [r4, #20]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	68a3      	ldr	r3, [r4, #8]
 800a002:	d014      	beq.n	800a02e <ucdr_serialize_int16_t+0xba>
 800a004:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	68a3      	ldr	r3, [r4, #8]
 800a00c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a010:	705a      	strb	r2, [r3, #1]
 800a012:	68a2      	ldr	r2, [r4, #8]
 800a014:	6923      	ldr	r3, [r4, #16]
 800a016:	3202      	adds	r2, #2
 800a018:	3302      	adds	r3, #2
 800a01a:	2102      	movs	r1, #2
 800a01c:	60a2      	str	r2, [r4, #8]
 800a01e:	6123      	str	r3, [r4, #16]
 800a020:	7561      	strb	r1, [r4, #21]
 800a022:	7da0      	ldrb	r0, [r4, #22]
 800a024:	f080 0001 	eor.w	r0, r0, #1
 800a028:	b002      	add	sp, #8
 800a02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a02e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a032:	801a      	strh	r2, [r3, #0]
 800a034:	e7ed      	b.n	800a012 <ucdr_serialize_int16_t+0x9e>
 800a036:	68a2      	ldr	r2, [r4, #8]
 800a038:	6923      	ldr	r3, [r4, #16]
 800a03a:	7da0      	ldrb	r0, [r4, #22]
 800a03c:	7567      	strb	r7, [r4, #21]
 800a03e:	1b92      	subs	r2, r2, r6
 800a040:	1b9b      	subs	r3, r3, r6
 800a042:	f080 0001 	eor.w	r0, r0, #1
 800a046:	60a2      	str	r2, [r4, #8]
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	b002      	add	sp, #8
 800a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a050:	68a3      	ldr	r3, [r4, #8]
 800a052:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	e7bc      	b.n	8009fd4 <ucdr_serialize_int16_t+0x60>
 800a05a:	4628      	mov	r0, r5
 800a05c:	f10d 0506 	add.w	r5, sp, #6
 800a060:	4629      	mov	r1, r5
 800a062:	4632      	mov	r2, r6
 800a064:	f00a fd11 	bl	8014a8a <memcpy>
 800a068:	68a0      	ldr	r0, [r4, #8]
 800a06a:	4642      	mov	r2, r8
 800a06c:	19a9      	adds	r1, r5, r6
 800a06e:	f00a fd0c 	bl	8014a8a <memcpy>
 800a072:	e7af      	b.n	8009fd4 <ucdr_serialize_int16_t+0x60>

0800a074 <ucdr_deserialize_int16_t>:
 800a074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a078:	460d      	mov	r5, r1
 800a07a:	2102      	movs	r1, #2
 800a07c:	4604      	mov	r4, r0
 800a07e:	f000 fb1d 	bl	800a6bc <ucdr_buffer_alignment>
 800a082:	4601      	mov	r1, r0
 800a084:	4620      	mov	r0, r4
 800a086:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a08a:	f000 fb5b 	bl	800a744 <ucdr_advance_buffer>
 800a08e:	2102      	movs	r1, #2
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fab3 	bl	800a5fc <ucdr_check_buffer_available_for>
 800a096:	bb60      	cbnz	r0, 800a0f2 <ucdr_deserialize_int16_t+0x7e>
 800a098:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a09c:	42be      	cmp	r6, r7
 800a09e:	d923      	bls.n	800a0e8 <ucdr_deserialize_int16_t+0x74>
 800a0a0:	6923      	ldr	r3, [r4, #16]
 800a0a2:	60a6      	str	r6, [r4, #8]
 800a0a4:	1bf6      	subs	r6, r6, r7
 800a0a6:	4433      	add	r3, r6
 800a0a8:	f1c6 0902 	rsb	r9, r6, #2
 800a0ac:	6123      	str	r3, [r4, #16]
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 faaf 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d034      	beq.n	800a124 <ucdr_deserialize_int16_t+0xb0>
 800a0ba:	7d23      	ldrb	r3, [r4, #20]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d042      	beq.n	800a146 <ucdr_deserialize_int16_t+0xd2>
 800a0c0:	787b      	ldrb	r3, [r7, #1]
 800a0c2:	702b      	strb	r3, [r5, #0]
 800a0c4:	2e00      	cmp	r6, #0
 800a0c6:	d03a      	beq.n	800a13e <ucdr_deserialize_int16_t+0xca>
 800a0c8:	783b      	ldrb	r3, [r7, #0]
 800a0ca:	706b      	strb	r3, [r5, #1]
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	68a2      	ldr	r2, [r4, #8]
 800a0d0:	7da0      	ldrb	r0, [r4, #22]
 800a0d2:	2102      	movs	r1, #2
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	444a      	add	r2, r9
 800a0d8:	1b9b      	subs	r3, r3, r6
 800a0da:	7561      	strb	r1, [r4, #21]
 800a0dc:	60a2      	str	r2, [r4, #8]
 800a0de:	6123      	str	r3, [r4, #16]
 800a0e0:	f080 0001 	eor.w	r0, r0, #1
 800a0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0e8:	2102      	movs	r1, #2
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f000 fa92 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a0f0:	b180      	cbz	r0, 800a114 <ucdr_deserialize_int16_t+0xa0>
 800a0f2:	7d23      	ldrb	r3, [r4, #20]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	d011      	beq.n	800a11e <ucdr_deserialize_int16_t+0xaa>
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	702b      	strb	r3, [r5, #0]
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	706b      	strb	r3, [r5, #1]
 800a104:	68a2      	ldr	r2, [r4, #8]
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	3202      	adds	r2, #2
 800a10a:	3302      	adds	r3, #2
 800a10c:	2102      	movs	r1, #2
 800a10e:	60a2      	str	r2, [r4, #8]
 800a110:	6123      	str	r3, [r4, #16]
 800a112:	7561      	strb	r1, [r4, #21]
 800a114:	7da0      	ldrb	r0, [r4, #22]
 800a116:	f080 0001 	eor.w	r0, r0, #1
 800a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	802b      	strh	r3, [r5, #0]
 800a122:	e7ef      	b.n	800a104 <ucdr_deserialize_int16_t+0x90>
 800a124:	68a2      	ldr	r2, [r4, #8]
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	7da0      	ldrb	r0, [r4, #22]
 800a12a:	f884 8015 	strb.w	r8, [r4, #21]
 800a12e:	1b92      	subs	r2, r2, r6
 800a130:	1b9b      	subs	r3, r3, r6
 800a132:	60a2      	str	r2, [r4, #8]
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	f080 0001 	eor.w	r0, r0, #1
 800a13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	706b      	strb	r3, [r5, #1]
 800a144:	e7c2      	b.n	800a0cc <ucdr_deserialize_int16_t+0x58>
 800a146:	4639      	mov	r1, r7
 800a148:	4632      	mov	r2, r6
 800a14a:	4628      	mov	r0, r5
 800a14c:	f00a fc9d 	bl	8014a8a <memcpy>
 800a150:	68a1      	ldr	r1, [r4, #8]
 800a152:	464a      	mov	r2, r9
 800a154:	19a8      	adds	r0, r5, r6
 800a156:	f00a fc98 	bl	8014a8a <memcpy>
 800a15a:	e7b7      	b.n	800a0cc <ucdr_deserialize_int16_t+0x58>

0800a15c <ucdr_serialize_int32_t>:
 800a15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	4604      	mov	r4, r0
 800a164:	9101      	str	r1, [sp, #4]
 800a166:	2104      	movs	r1, #4
 800a168:	f000 faa8 	bl	800a6bc <ucdr_buffer_alignment>
 800a16c:	4601      	mov	r1, r0
 800a16e:	4620      	mov	r0, r4
 800a170:	7d67      	ldrb	r7, [r4, #21]
 800a172:	f000 fae7 	bl	800a744 <ucdr_advance_buffer>
 800a176:	2104      	movs	r1, #4
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 fa3f 	bl	800a5fc <ucdr_check_buffer_available_for>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d139      	bne.n	800a1f6 <ucdr_serialize_int32_t+0x9a>
 800a182:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a186:	42ab      	cmp	r3, r5
 800a188:	d930      	bls.n	800a1ec <ucdr_serialize_int32_t+0x90>
 800a18a:	1b5e      	subs	r6, r3, r5
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	f1c6 0804 	rsb	r8, r6, #4
 800a194:	4433      	add	r3, r6
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	4641      	mov	r1, r8
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 fa3a 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d04c      	beq.n	800a23e <ucdr_serialize_int32_t+0xe2>
 800a1a4:	7d23      	ldrb	r3, [r4, #20]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d063      	beq.n	800a272 <ucdr_serialize_int32_t+0x116>
 800a1aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a1ae:	702b      	strb	r3, [r5, #0]
 800a1b0:	2e00      	cmp	r6, #0
 800a1b2:	d051      	beq.n	800a258 <ucdr_serialize_int32_t+0xfc>
 800a1b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a1b8:	706b      	strb	r3, [r5, #1]
 800a1ba:	2e01      	cmp	r6, #1
 800a1bc:	d050      	beq.n	800a260 <ucdr_serialize_int32_t+0x104>
 800a1be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a1c2:	70ab      	strb	r3, [r5, #2]
 800a1c4:	2e02      	cmp	r6, #2
 800a1c6:	d04f      	beq.n	800a268 <ucdr_serialize_int32_t+0x10c>
 800a1c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a1cc:	70eb      	strb	r3, [r5, #3]
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	68a2      	ldr	r2, [r4, #8]
 800a1d2:	7da0      	ldrb	r0, [r4, #22]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	1b9e      	subs	r6, r3, r6
 800a1d8:	4442      	add	r2, r8
 800a1da:	2304      	movs	r3, #4
 800a1dc:	f080 0001 	eor.w	r0, r0, #1
 800a1e0:	60a2      	str	r2, [r4, #8]
 800a1e2:	6126      	str	r6, [r4, #16]
 800a1e4:	7563      	strb	r3, [r4, #21]
 800a1e6:	b002      	add	sp, #8
 800a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ec:	2104      	movs	r1, #4
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f000 fa10 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a1f4:	b1d0      	cbz	r0, 800a22c <ucdr_serialize_int32_t+0xd0>
 800a1f6:	7d23      	ldrb	r3, [r4, #20]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	68a3      	ldr	r3, [r4, #8]
 800a1fc:	d01c      	beq.n	800a238 <ucdr_serialize_int32_t+0xdc>
 800a1fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	68a3      	ldr	r3, [r4, #8]
 800a206:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a20a:	705a      	strb	r2, [r3, #1]
 800a20c:	68a3      	ldr	r3, [r4, #8]
 800a20e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a212:	709a      	strb	r2, [r3, #2]
 800a214:	68a3      	ldr	r3, [r4, #8]
 800a216:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a21a:	70da      	strb	r2, [r3, #3]
 800a21c:	68a2      	ldr	r2, [r4, #8]
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	3204      	adds	r2, #4
 800a222:	3304      	adds	r3, #4
 800a224:	2104      	movs	r1, #4
 800a226:	60a2      	str	r2, [r4, #8]
 800a228:	6123      	str	r3, [r4, #16]
 800a22a:	7561      	strb	r1, [r4, #21]
 800a22c:	7da0      	ldrb	r0, [r4, #22]
 800a22e:	f080 0001 	eor.w	r0, r0, #1
 800a232:	b002      	add	sp, #8
 800a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a238:	9a01      	ldr	r2, [sp, #4]
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	e7ee      	b.n	800a21c <ucdr_serialize_int32_t+0xc0>
 800a23e:	68a2      	ldr	r2, [r4, #8]
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	7da0      	ldrb	r0, [r4, #22]
 800a244:	7567      	strb	r7, [r4, #21]
 800a246:	1b92      	subs	r2, r2, r6
 800a248:	1b9b      	subs	r3, r3, r6
 800a24a:	f080 0001 	eor.w	r0, r0, #1
 800a24e:	60a2      	str	r2, [r4, #8]
 800a250:	6123      	str	r3, [r4, #16]
 800a252:	b002      	add	sp, #8
 800a254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a258:	68a3      	ldr	r3, [r4, #8]
 800a25a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	68a3      	ldr	r3, [r4, #8]
 800a262:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	68a3      	ldr	r3, [r4, #8]
 800a26a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	e7ad      	b.n	800a1ce <ucdr_serialize_int32_t+0x72>
 800a272:	4628      	mov	r0, r5
 800a274:	ad01      	add	r5, sp, #4
 800a276:	4629      	mov	r1, r5
 800a278:	4632      	mov	r2, r6
 800a27a:	f00a fc06 	bl	8014a8a <memcpy>
 800a27e:	68a0      	ldr	r0, [r4, #8]
 800a280:	4642      	mov	r2, r8
 800a282:	19a9      	adds	r1, r5, r6
 800a284:	f00a fc01 	bl	8014a8a <memcpy>
 800a288:	e7a1      	b.n	800a1ce <ucdr_serialize_int32_t+0x72>
 800a28a:	bf00      	nop

0800a28c <ucdr_deserialize_int32_t>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	460d      	mov	r5, r1
 800a292:	2104      	movs	r1, #4
 800a294:	4604      	mov	r4, r0
 800a296:	f000 fa11 	bl	800a6bc <ucdr_buffer_alignment>
 800a29a:	4601      	mov	r1, r0
 800a29c:	4620      	mov	r0, r4
 800a29e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a2a2:	f000 fa4f 	bl	800a744 <ucdr_advance_buffer>
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f000 f9a7 	bl	800a5fc <ucdr_check_buffer_available_for>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d138      	bne.n	800a324 <ucdr_deserialize_int32_t+0x98>
 800a2b2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a2b6:	42b7      	cmp	r7, r6
 800a2b8:	d92f      	bls.n	800a31a <ucdr_deserialize_int32_t+0x8e>
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	60a7      	str	r7, [r4, #8]
 800a2be:	1bbf      	subs	r7, r7, r6
 800a2c0:	443b      	add	r3, r7
 800a2c2:	f1c7 0904 	rsb	r9, r7, #4
 800a2c6:	6123      	str	r3, [r4, #16]
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 f9a2 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d046      	beq.n	800a362 <ucdr_deserialize_int32_t+0xd6>
 800a2d4:	7d23      	ldrb	r3, [r4, #20]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d05c      	beq.n	800a394 <ucdr_deserialize_int32_t+0x108>
 800a2da:	78f3      	ldrb	r3, [r6, #3]
 800a2dc:	702b      	strb	r3, [r5, #0]
 800a2de:	2f00      	cmp	r7, #0
 800a2e0:	d04c      	beq.n	800a37c <ucdr_deserialize_int32_t+0xf0>
 800a2e2:	78b3      	ldrb	r3, [r6, #2]
 800a2e4:	706b      	strb	r3, [r5, #1]
 800a2e6:	2f01      	cmp	r7, #1
 800a2e8:	f105 0302 	add.w	r3, r5, #2
 800a2ec:	d04a      	beq.n	800a384 <ucdr_deserialize_int32_t+0xf8>
 800a2ee:	7873      	ldrb	r3, [r6, #1]
 800a2f0:	70ab      	strb	r3, [r5, #2]
 800a2f2:	2f02      	cmp	r7, #2
 800a2f4:	f105 0303 	add.w	r3, r5, #3
 800a2f8:	d048      	beq.n	800a38c <ucdr_deserialize_int32_t+0x100>
 800a2fa:	7833      	ldrb	r3, [r6, #0]
 800a2fc:	70eb      	strb	r3, [r5, #3]
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	68a2      	ldr	r2, [r4, #8]
 800a302:	7da0      	ldrb	r0, [r4, #22]
 800a304:	2104      	movs	r1, #4
 800a306:	3304      	adds	r3, #4
 800a308:	444a      	add	r2, r9
 800a30a:	1bdb      	subs	r3, r3, r7
 800a30c:	7561      	strb	r1, [r4, #21]
 800a30e:	60a2      	str	r2, [r4, #8]
 800a310:	6123      	str	r3, [r4, #16]
 800a312:	f080 0001 	eor.w	r0, r0, #1
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	2104      	movs	r1, #4
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 f979 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a322:	b1b0      	cbz	r0, 800a352 <ucdr_deserialize_int32_t+0xc6>
 800a324:	7d23      	ldrb	r3, [r4, #20]
 800a326:	2b01      	cmp	r3, #1
 800a328:	68a3      	ldr	r3, [r4, #8]
 800a32a:	d017      	beq.n	800a35c <ucdr_deserialize_int32_t+0xd0>
 800a32c:	78db      	ldrb	r3, [r3, #3]
 800a32e:	702b      	strb	r3, [r5, #0]
 800a330:	68a3      	ldr	r3, [r4, #8]
 800a332:	789b      	ldrb	r3, [r3, #2]
 800a334:	706b      	strb	r3, [r5, #1]
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	70ab      	strb	r3, [r5, #2]
 800a33c:	68a3      	ldr	r3, [r4, #8]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	70eb      	strb	r3, [r5, #3]
 800a342:	68a2      	ldr	r2, [r4, #8]
 800a344:	6923      	ldr	r3, [r4, #16]
 800a346:	3204      	adds	r2, #4
 800a348:	3304      	adds	r3, #4
 800a34a:	2104      	movs	r1, #4
 800a34c:	60a2      	str	r2, [r4, #8]
 800a34e:	6123      	str	r3, [r4, #16]
 800a350:	7561      	strb	r1, [r4, #21]
 800a352:	7da0      	ldrb	r0, [r4, #22]
 800a354:	f080 0001 	eor.w	r0, r0, #1
 800a358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	602b      	str	r3, [r5, #0]
 800a360:	e7ef      	b.n	800a342 <ucdr_deserialize_int32_t+0xb6>
 800a362:	68a2      	ldr	r2, [r4, #8]
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	7da0      	ldrb	r0, [r4, #22]
 800a368:	f884 8015 	strb.w	r8, [r4, #21]
 800a36c:	1bd2      	subs	r2, r2, r7
 800a36e:	1bdb      	subs	r3, r3, r7
 800a370:	60a2      	str	r2, [r4, #8]
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	f080 0001 	eor.w	r0, r0, #1
 800a378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	789b      	ldrb	r3, [r3, #2]
 800a380:	706b      	strb	r3, [r5, #1]
 800a382:	1cab      	adds	r3, r5, #2
 800a384:	68a2      	ldr	r2, [r4, #8]
 800a386:	7852      	ldrb	r2, [r2, #1]
 800a388:	f803 2b01 	strb.w	r2, [r3], #1
 800a38c:	68a2      	ldr	r2, [r4, #8]
 800a38e:	7812      	ldrb	r2, [r2, #0]
 800a390:	701a      	strb	r2, [r3, #0]
 800a392:	e7b4      	b.n	800a2fe <ucdr_deserialize_int32_t+0x72>
 800a394:	4631      	mov	r1, r6
 800a396:	463a      	mov	r2, r7
 800a398:	4628      	mov	r0, r5
 800a39a:	f00a fb76 	bl	8014a8a <memcpy>
 800a39e:	68a1      	ldr	r1, [r4, #8]
 800a3a0:	464a      	mov	r2, r9
 800a3a2:	19e8      	adds	r0, r5, r7
 800a3a4:	f00a fb71 	bl	8014a8a <memcpy>
 800a3a8:	e7a9      	b.n	800a2fe <ucdr_deserialize_int32_t+0x72>
 800a3aa:	bf00      	nop

0800a3ac <ucdr_serialize_float>:
 800a3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b0:	2104      	movs	r1, #4
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a3ba:	f000 f97f 	bl	800a6bc <ucdr_buffer_alignment>
 800a3be:	4601      	mov	r1, r0
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	7d67      	ldrb	r7, [r4, #21]
 800a3c4:	f000 f9be 	bl	800a744 <ucdr_advance_buffer>
 800a3c8:	2104      	movs	r1, #4
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 f916 	bl	800a5fc <ucdr_check_buffer_available_for>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d139      	bne.n	800a448 <ucdr_serialize_float+0x9c>
 800a3d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a3d8:	42ab      	cmp	r3, r5
 800a3da:	d930      	bls.n	800a43e <ucdr_serialize_float+0x92>
 800a3dc:	1b5e      	subs	r6, r3, r5
 800a3de:	60a3      	str	r3, [r4, #8]
 800a3e0:	6923      	ldr	r3, [r4, #16]
 800a3e2:	f1c6 0804 	rsb	r8, r6, #4
 800a3e6:	4433      	add	r3, r6
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 f911 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d04c      	beq.n	800a490 <ucdr_serialize_float+0xe4>
 800a3f6:	7d23      	ldrb	r3, [r4, #20]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d063      	beq.n	800a4c4 <ucdr_serialize_float+0x118>
 800a3fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a400:	702b      	strb	r3, [r5, #0]
 800a402:	2e00      	cmp	r6, #0
 800a404:	d051      	beq.n	800a4aa <ucdr_serialize_float+0xfe>
 800a406:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a40a:	706b      	strb	r3, [r5, #1]
 800a40c:	2e01      	cmp	r6, #1
 800a40e:	d050      	beq.n	800a4b2 <ucdr_serialize_float+0x106>
 800a410:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a414:	70ab      	strb	r3, [r5, #2]
 800a416:	2e02      	cmp	r6, #2
 800a418:	d04f      	beq.n	800a4ba <ucdr_serialize_float+0x10e>
 800a41a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a41e:	70eb      	strb	r3, [r5, #3]
 800a420:	6923      	ldr	r3, [r4, #16]
 800a422:	68a2      	ldr	r2, [r4, #8]
 800a424:	7da0      	ldrb	r0, [r4, #22]
 800a426:	3304      	adds	r3, #4
 800a428:	1b9e      	subs	r6, r3, r6
 800a42a:	4442      	add	r2, r8
 800a42c:	2304      	movs	r3, #4
 800a42e:	f080 0001 	eor.w	r0, r0, #1
 800a432:	60a2      	str	r2, [r4, #8]
 800a434:	6126      	str	r6, [r4, #16]
 800a436:	7563      	strb	r3, [r4, #21]
 800a438:	b002      	add	sp, #8
 800a43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a43e:	2104      	movs	r1, #4
 800a440:	4620      	mov	r0, r4
 800a442:	f000 f8e7 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a446:	b1d0      	cbz	r0, 800a47e <ucdr_serialize_float+0xd2>
 800a448:	7d23      	ldrb	r3, [r4, #20]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	68a3      	ldr	r3, [r4, #8]
 800a44e:	d01c      	beq.n	800a48a <ucdr_serialize_float+0xde>
 800a450:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	68a3      	ldr	r3, [r4, #8]
 800a458:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a45c:	705a      	strb	r2, [r3, #1]
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a464:	709a      	strb	r2, [r3, #2]
 800a466:	68a3      	ldr	r3, [r4, #8]
 800a468:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a46c:	70da      	strb	r2, [r3, #3]
 800a46e:	68a2      	ldr	r2, [r4, #8]
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	3204      	adds	r2, #4
 800a474:	3304      	adds	r3, #4
 800a476:	2104      	movs	r1, #4
 800a478:	60a2      	str	r2, [r4, #8]
 800a47a:	6123      	str	r3, [r4, #16]
 800a47c:	7561      	strb	r1, [r4, #21]
 800a47e:	7da0      	ldrb	r0, [r4, #22]
 800a480:	f080 0001 	eor.w	r0, r0, #1
 800a484:	b002      	add	sp, #8
 800a486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48a:	9a01      	ldr	r2, [sp, #4]
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e7ee      	b.n	800a46e <ucdr_serialize_float+0xc2>
 800a490:	68a2      	ldr	r2, [r4, #8]
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	7da0      	ldrb	r0, [r4, #22]
 800a496:	7567      	strb	r7, [r4, #21]
 800a498:	1b92      	subs	r2, r2, r6
 800a49a:	1b9b      	subs	r3, r3, r6
 800a49c:	f080 0001 	eor.w	r0, r0, #1
 800a4a0:	60a2      	str	r2, [r4, #8]
 800a4a2:	6123      	str	r3, [r4, #16]
 800a4a4:	b002      	add	sp, #8
 800a4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4b0:	701a      	strb	r2, [r3, #0]
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a4b8:	701a      	strb	r2, [r3, #0]
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	e7ad      	b.n	800a420 <ucdr_serialize_float+0x74>
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	ad01      	add	r5, sp, #4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4632      	mov	r2, r6
 800a4cc:	f00a fadd 	bl	8014a8a <memcpy>
 800a4d0:	68a0      	ldr	r0, [r4, #8]
 800a4d2:	4642      	mov	r2, r8
 800a4d4:	19a9      	adds	r1, r5, r6
 800a4d6:	f00a fad8 	bl	8014a8a <memcpy>
 800a4da:	e7a1      	b.n	800a420 <ucdr_serialize_float+0x74>

0800a4dc <ucdr_deserialize_float>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	2104      	movs	r1, #4
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	f000 f8e9 	bl	800a6bc <ucdr_buffer_alignment>
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a4f2:	f000 f927 	bl	800a744 <ucdr_advance_buffer>
 800a4f6:	2104      	movs	r1, #4
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 f87f 	bl	800a5fc <ucdr_check_buffer_available_for>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d138      	bne.n	800a574 <ucdr_deserialize_float+0x98>
 800a502:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a506:	42b7      	cmp	r7, r6
 800a508:	d92f      	bls.n	800a56a <ucdr_deserialize_float+0x8e>
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	60a7      	str	r7, [r4, #8]
 800a50e:	1bbf      	subs	r7, r7, r6
 800a510:	443b      	add	r3, r7
 800a512:	f1c7 0904 	rsb	r9, r7, #4
 800a516:	6123      	str	r3, [r4, #16]
 800a518:	4649      	mov	r1, r9
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 f87a 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a520:	2800      	cmp	r0, #0
 800a522:	d046      	beq.n	800a5b2 <ucdr_deserialize_float+0xd6>
 800a524:	7d23      	ldrb	r3, [r4, #20]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d05c      	beq.n	800a5e4 <ucdr_deserialize_float+0x108>
 800a52a:	78f3      	ldrb	r3, [r6, #3]
 800a52c:	702b      	strb	r3, [r5, #0]
 800a52e:	2f00      	cmp	r7, #0
 800a530:	d04c      	beq.n	800a5cc <ucdr_deserialize_float+0xf0>
 800a532:	78b3      	ldrb	r3, [r6, #2]
 800a534:	706b      	strb	r3, [r5, #1]
 800a536:	2f01      	cmp	r7, #1
 800a538:	f105 0302 	add.w	r3, r5, #2
 800a53c:	d04a      	beq.n	800a5d4 <ucdr_deserialize_float+0xf8>
 800a53e:	7873      	ldrb	r3, [r6, #1]
 800a540:	70ab      	strb	r3, [r5, #2]
 800a542:	2f02      	cmp	r7, #2
 800a544:	f105 0303 	add.w	r3, r5, #3
 800a548:	d048      	beq.n	800a5dc <ucdr_deserialize_float+0x100>
 800a54a:	7833      	ldrb	r3, [r6, #0]
 800a54c:	70eb      	strb	r3, [r5, #3]
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	68a2      	ldr	r2, [r4, #8]
 800a552:	7da0      	ldrb	r0, [r4, #22]
 800a554:	2104      	movs	r1, #4
 800a556:	3304      	adds	r3, #4
 800a558:	444a      	add	r2, r9
 800a55a:	1bdb      	subs	r3, r3, r7
 800a55c:	7561      	strb	r1, [r4, #21]
 800a55e:	60a2      	str	r2, [r4, #8]
 800a560:	6123      	str	r3, [r4, #16]
 800a562:	f080 0001 	eor.w	r0, r0, #1
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	2104      	movs	r1, #4
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 f851 	bl	800a614 <ucdr_check_final_buffer_behavior>
 800a572:	b1b0      	cbz	r0, 800a5a2 <ucdr_deserialize_float+0xc6>
 800a574:	7d23      	ldrb	r3, [r4, #20]
 800a576:	2b01      	cmp	r3, #1
 800a578:	68a3      	ldr	r3, [r4, #8]
 800a57a:	d017      	beq.n	800a5ac <ucdr_deserialize_float+0xd0>
 800a57c:	78db      	ldrb	r3, [r3, #3]
 800a57e:	702b      	strb	r3, [r5, #0]
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	789b      	ldrb	r3, [r3, #2]
 800a584:	706b      	strb	r3, [r5, #1]
 800a586:	68a3      	ldr	r3, [r4, #8]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	70ab      	strb	r3, [r5, #2]
 800a58c:	68a3      	ldr	r3, [r4, #8]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	70eb      	strb	r3, [r5, #3]
 800a592:	68a2      	ldr	r2, [r4, #8]
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	3204      	adds	r2, #4
 800a598:	3304      	adds	r3, #4
 800a59a:	2104      	movs	r1, #4
 800a59c:	60a2      	str	r2, [r4, #8]
 800a59e:	6123      	str	r3, [r4, #16]
 800a5a0:	7561      	strb	r1, [r4, #21]
 800a5a2:	7da0      	ldrb	r0, [r4, #22]
 800a5a4:	f080 0001 	eor.w	r0, r0, #1
 800a5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	e7ef      	b.n	800a592 <ucdr_deserialize_float+0xb6>
 800a5b2:	68a2      	ldr	r2, [r4, #8]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	7da0      	ldrb	r0, [r4, #22]
 800a5b8:	f884 8015 	strb.w	r8, [r4, #21]
 800a5bc:	1bd2      	subs	r2, r2, r7
 800a5be:	1bdb      	subs	r3, r3, r7
 800a5c0:	60a2      	str	r2, [r4, #8]
 800a5c2:	6123      	str	r3, [r4, #16]
 800a5c4:	f080 0001 	eor.w	r0, r0, #1
 800a5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	789b      	ldrb	r3, [r3, #2]
 800a5d0:	706b      	strb	r3, [r5, #1]
 800a5d2:	1cab      	adds	r3, r5, #2
 800a5d4:	68a2      	ldr	r2, [r4, #8]
 800a5d6:	7852      	ldrb	r2, [r2, #1]
 800a5d8:	f803 2b01 	strb.w	r2, [r3], #1
 800a5dc:	68a2      	ldr	r2, [r4, #8]
 800a5de:	7812      	ldrb	r2, [r2, #0]
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	e7b4      	b.n	800a54e <ucdr_deserialize_float+0x72>
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	463a      	mov	r2, r7
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f00a fa4e 	bl	8014a8a <memcpy>
 800a5ee:	68a1      	ldr	r1, [r4, #8]
 800a5f0:	464a      	mov	r2, r9
 800a5f2:	19e8      	adds	r0, r5, r7
 800a5f4:	f00a fa49 	bl	8014a8a <memcpy>
 800a5f8:	e7a9      	b.n	800a54e <ucdr_deserialize_float+0x72>
 800a5fa:	bf00      	nop

0800a5fc <ucdr_check_buffer_available_for>:
 800a5fc:	7d83      	ldrb	r3, [r0, #22]
 800a5fe:	b93b      	cbnz	r3, 800a610 <ucdr_check_buffer_available_for+0x14>
 800a600:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800a604:	4419      	add	r1, r3
 800a606:	4288      	cmp	r0, r1
 800a608:	bf34      	ite	cc
 800a60a:	2000      	movcc	r0, #0
 800a60c:	2001      	movcs	r0, #1
 800a60e:	4770      	bx	lr
 800a610:	2000      	movs	r0, #0
 800a612:	4770      	bx	lr

0800a614 <ucdr_check_final_buffer_behavior>:
 800a614:	7d83      	ldrb	r3, [r0, #22]
 800a616:	b943      	cbnz	r3, 800a62a <ucdr_check_final_buffer_behavior+0x16>
 800a618:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a61c:	4291      	cmp	r1, r2
 800a61e:	b510      	push	{r4, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	d205      	bcs.n	800a630 <ucdr_check_final_buffer_behavior+0x1c>
 800a624:	2301      	movs	r3, #1
 800a626:	4618      	mov	r0, r3
 800a628:	bd10      	pop	{r4, pc}
 800a62a:	2300      	movs	r3, #0
 800a62c:	4618      	mov	r0, r3
 800a62e:	4770      	bx	lr
 800a630:	6982      	ldr	r2, [r0, #24]
 800a632:	b13a      	cbz	r2, 800a644 <ucdr_check_final_buffer_behavior+0x30>
 800a634:	69c1      	ldr	r1, [r0, #28]
 800a636:	4790      	blx	r2
 800a638:	f080 0301 	eor.w	r3, r0, #1
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	75a0      	strb	r0, [r4, #22]
 800a640:	4618      	mov	r0, r3
 800a642:	bd10      	pop	{r4, pc}
 800a644:	2001      	movs	r0, #1
 800a646:	75a0      	strb	r0, [r4, #22]
 800a648:	e7fa      	b.n	800a640 <ucdr_check_final_buffer_behavior+0x2c>
 800a64a:	bf00      	nop

0800a64c <ucdr_set_on_full_buffer_callback>:
 800a64c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop

0800a654 <ucdr_init_buffer_origin_offset_endian>:
 800a654:	b410      	push	{r4}
 800a656:	9c01      	ldr	r4, [sp, #4]
 800a658:	6001      	str	r1, [r0, #0]
 800a65a:	440a      	add	r2, r1
 800a65c:	6042      	str	r2, [r0, #4]
 800a65e:	190a      	adds	r2, r1, r4
 800a660:	441c      	add	r4, r3
 800a662:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800a666:	6082      	str	r2, [r0, #8]
 800a668:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a66c:	7503      	strb	r3, [r0, #20]
 800a66e:	2200      	movs	r2, #0
 800a670:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800a674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a678:	7542      	strb	r2, [r0, #21]
 800a67a:	7582      	strb	r2, [r0, #22]
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop

0800a680 <ucdr_init_buffer_origin_offset>:
 800a680:	b510      	push	{r4, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	9c04      	ldr	r4, [sp, #16]
 800a686:	9400      	str	r4, [sp, #0]
 800a688:	2401      	movs	r4, #1
 800a68a:	9401      	str	r4, [sp, #4]
 800a68c:	f7ff ffe2 	bl	800a654 <ucdr_init_buffer_origin_offset_endian>
 800a690:	b002      	add	sp, #8
 800a692:	bd10      	pop	{r4, pc}

0800a694 <ucdr_init_buffer_origin>:
 800a694:	b510      	push	{r4, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	2400      	movs	r4, #0
 800a69a:	9400      	str	r4, [sp, #0]
 800a69c:	f7ff fff0 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800a6a0:	b002      	add	sp, #8
 800a6a2:	bd10      	pop	{r4, pc}

0800a6a4 <ucdr_init_buffer>:
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f7ff bff5 	b.w	800a694 <ucdr_init_buffer_origin>
 800a6aa:	bf00      	nop

0800a6ac <ucdr_alignment>:
 800a6ac:	fbb0 f3f1 	udiv	r3, r0, r1
 800a6b0:	fb03 0011 	mls	r0, r3, r1, r0
 800a6b4:	1a08      	subs	r0, r1, r0
 800a6b6:	3901      	subs	r1, #1
 800a6b8:	4008      	ands	r0, r1
 800a6ba:	4770      	bx	lr

0800a6bc <ucdr_buffer_alignment>:
 800a6bc:	7d43      	ldrb	r3, [r0, #21]
 800a6be:	428b      	cmp	r3, r1
 800a6c0:	d208      	bcs.n	800a6d4 <ucdr_buffer_alignment+0x18>
 800a6c2:	6900      	ldr	r0, [r0, #16]
 800a6c4:	fbb0 f3f1 	udiv	r3, r0, r1
 800a6c8:	fb01 0013 	mls	r0, r1, r3, r0
 800a6cc:	1a08      	subs	r0, r1, r0
 800a6ce:	3901      	subs	r1, #1
 800a6d0:	4008      	ands	r0, r1
 800a6d2:	4770      	bx	lr
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	4770      	bx	lr

0800a6d8 <ucdr_align_to>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4604      	mov	r4, r0
 800a6dc:	460d      	mov	r5, r1
 800a6de:	f7ff ffed 	bl	800a6bc <ucdr_buffer_alignment>
 800a6e2:	68a3      	ldr	r3, [r4, #8]
 800a6e4:	6921      	ldr	r1, [r4, #16]
 800a6e6:	7565      	strb	r5, [r4, #21]
 800a6e8:	181a      	adds	r2, r3, r0
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	4408      	add	r0, r1
 800a6f0:	bf28      	it	cs
 800a6f2:	4613      	movcs	r3, r2
 800a6f4:	6120      	str	r0, [r4, #16]
 800a6f6:	60a3      	str	r3, [r4, #8]
 800a6f8:	bd38      	pop	{r3, r4, r5, pc}
 800a6fa:	bf00      	nop

0800a6fc <ucdr_buffer_length>:
 800a6fc:	6882      	ldr	r2, [r0, #8]
 800a6fe:	6800      	ldr	r0, [r0, #0]
 800a700:	1a10      	subs	r0, r2, r0
 800a702:	4770      	bx	lr

0800a704 <ucdr_buffer_remaining>:
 800a704:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a708:	1a10      	subs	r0, r2, r0
 800a70a:	4770      	bx	lr

0800a70c <ucdr_check_final_buffer_behavior_array>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	7d83      	ldrb	r3, [r0, #22]
 800a710:	b963      	cbnz	r3, 800a72c <ucdr_check_final_buffer_behavior_array+0x20>
 800a712:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	4604      	mov	r4, r0
 800a71a:	460d      	mov	r5, r1
 800a71c:	d308      	bcc.n	800a730 <ucdr_check_final_buffer_behavior_array+0x24>
 800a71e:	b139      	cbz	r1, 800a730 <ucdr_check_final_buffer_behavior_array+0x24>
 800a720:	6983      	ldr	r3, [r0, #24]
 800a722:	b163      	cbz	r3, 800a73e <ucdr_check_final_buffer_behavior_array+0x32>
 800a724:	69c1      	ldr	r1, [r0, #28]
 800a726:	4798      	blx	r3
 800a728:	75a0      	strb	r0, [r4, #22]
 800a72a:	b108      	cbz	r0, 800a730 <ucdr_check_final_buffer_behavior_array+0x24>
 800a72c:	2000      	movs	r0, #0
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	4620      	mov	r0, r4
 800a732:	f7ff ffe7 	bl	800a704 <ucdr_buffer_remaining>
 800a736:	42a8      	cmp	r0, r5
 800a738:	bf28      	it	cs
 800a73a:	4628      	movcs	r0, r5
 800a73c:	bd38      	pop	{r3, r4, r5, pc}
 800a73e:	2301      	movs	r3, #1
 800a740:	7583      	strb	r3, [r0, #22]
 800a742:	e7f3      	b.n	800a72c <ucdr_check_final_buffer_behavior_array+0x20>

0800a744 <ucdr_advance_buffer>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	f7ff ff57 	bl	800a5fc <ucdr_check_buffer_available_for>
 800a74e:	b178      	cbz	r0, 800a770 <ucdr_advance_buffer+0x2c>
 800a750:	6923      	ldr	r3, [r4, #16]
 800a752:	68a2      	ldr	r2, [r4, #8]
 800a754:	442b      	add	r3, r5
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	2301      	movs	r3, #1
 800a75a:	442a      	add	r2, r5
 800a75c:	7563      	strb	r3, [r4, #21]
 800a75e:	60a2      	str	r2, [r4, #8]
 800a760:	bd38      	pop	{r3, r4, r5, pc}
 800a762:	68a2      	ldr	r2, [r4, #8]
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	4402      	add	r2, r0
 800a768:	4403      	add	r3, r0
 800a76a:	1a2d      	subs	r5, r5, r0
 800a76c:	60a2      	str	r2, [r4, #8]
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	4629      	mov	r1, r5
 800a772:	2201      	movs	r2, #1
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff ffc9 	bl	800a70c <ucdr_check_final_buffer_behavior_array>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d1f1      	bne.n	800a762 <ucdr_advance_buffer+0x1e>
 800a77e:	2301      	movs	r3, #1
 800a780:	7563      	strb	r3, [r4, #21]
 800a782:	bd38      	pop	{r3, r4, r5, pc}

0800a784 <uxr_buffer_delete_entity>:
 800a784:	b510      	push	{r4, lr}
 800a786:	2300      	movs	r3, #0
 800a788:	b08e      	sub	sp, #56	; 0x38
 800a78a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a78e:	2303      	movs	r3, #3
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	2204      	movs	r2, #4
 800a794:	ab06      	add	r3, sp, #24
 800a796:	4604      	mov	r4, r0
 800a798:	9103      	str	r1, [sp, #12]
 800a79a:	f001 f953 	bl	800ba44 <uxr_prepare_stream_to_write_submessage>
 800a79e:	b918      	cbnz	r0, 800a7a8 <uxr_buffer_delete_entity+0x24>
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	b00e      	add	sp, #56	; 0x38
 800a7a6:	bd10      	pop	{r4, pc}
 800a7a8:	9902      	ldr	r1, [sp, #8]
 800a7aa:	aa05      	add	r2, sp, #20
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f001 fa7f 	bl	800bcb0 <uxr_init_base_object_request>
 800a7b2:	a905      	add	r1, sp, #20
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	a806      	add	r0, sp, #24
 800a7b8:	f002 fcd0 	bl	800d15c <uxr_serialize_DELETE_Payload>
 800a7bc:	4620      	mov	r0, r4
 800a7be:	b00e      	add	sp, #56	; 0x38
 800a7c0:	bd10      	pop	{r4, pc}
 800a7c2:	bf00      	nop

0800a7c4 <uxr_common_create_entity>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a7ca:	b08c      	sub	sp, #48	; 0x30
 800a7cc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a7d0:	f1bc 0f01 	cmp.w	ip, #1
 800a7d4:	bf0c      	ite	eq
 800a7d6:	f003 0201 	andeq.w	r2, r3, #1
 800a7da:	2200      	movne	r2, #0
 800a7dc:	330e      	adds	r3, #14
 800a7de:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800a7e2:	9101      	str	r1, [sp, #4]
 800a7e4:	441a      	add	r2, r3
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	9903      	ldr	r1, [sp, #12]
 800a7ec:	ab04      	add	r3, sp, #16
 800a7ee:	b292      	uxth	r2, r2
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	f001 f927 	bl	800ba44 <uxr_prepare_stream_to_write_submessage>
 800a7f6:	b918      	cbnz	r0, 800a800 <uxr_common_create_entity+0x3c>
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	b00c      	add	sp, #48	; 0x30
 800a7fe:	bd10      	pop	{r4, pc}
 800a800:	9902      	ldr	r1, [sp, #8]
 800a802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a804:	4620      	mov	r0, r4
 800a806:	f001 fa53 	bl	800bcb0 <uxr_init_base_object_request>
 800a80a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a80c:	4604      	mov	r4, r0
 800a80e:	a804      	add	r0, sp, #16
 800a810:	f002 fc00 	bl	800d014 <uxr_serialize_CREATE_Payload>
 800a814:	4620      	mov	r0, r4
 800a816:	b00c      	add	sp, #48	; 0x30
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	bf00      	nop

0800a81c <uxr_buffer_create_participant_bin>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800a822:	ac11      	add	r4, sp, #68	; 0x44
 800a824:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800a828:	2303      	movs	r3, #3
 800a82a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a82e:	7223      	strb	r3, [r4, #8]
 800a830:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800a832:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800a836:	2201      	movs	r2, #1
 800a838:	2100      	movs	r1, #0
 800a83a:	4605      	mov	r5, r0
 800a83c:	7122      	strb	r2, [r4, #4]
 800a83e:	f88d 1014 	strb.w	r1, [sp, #20]
 800a842:	b1cb      	cbz	r3, 800a878 <uxr_buffer_create_participant_bin+0x5c>
 800a844:	f88d 201c 	strb.w	r2, [sp, #28]
 800a848:	9308      	str	r3, [sp, #32]
 800a84a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a84e:	a915      	add	r1, sp, #84	; 0x54
 800a850:	a809      	add	r0, sp, #36	; 0x24
 800a852:	f7ff ff27 	bl	800a6a4 <ucdr_init_buffer>
 800a856:	a905      	add	r1, sp, #20
 800a858:	a809      	add	r0, sp, #36	; 0x24
 800a85a:	f001 ffbd 	bl	800c7d8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800a85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a860:	9600      	str	r6, [sp, #0]
 800a862:	9401      	str	r4, [sp, #4]
 800a864:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a868:	60e3      	str	r3, [r4, #12]
 800a86a:	4628      	mov	r0, r5
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	f7ff ffa9 	bl	800a7c4 <uxr_common_create_entity>
 800a872:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	f88d 301c 	strb.w	r3, [sp, #28]
 800a87c:	e7e5      	b.n	800a84a <uxr_buffer_create_participant_bin+0x2e>
 800a87e:	bf00      	nop

0800a880 <uxr_buffer_create_topic_bin>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800a886:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a88a:	9105      	str	r1, [sp, #20]
 800a88c:	4605      	mov	r5, r0
 800a88e:	a997      	add	r1, sp, #604	; 0x25c
 800a890:	4618      	mov	r0, r3
 800a892:	2302      	movs	r3, #2
 800a894:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800a898:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800a89c:	f000 f996 	bl	800abcc <uxr_object_id_to_raw>
 800a8a0:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800a8a2:	9306      	str	r3, [sp, #24]
 800a8a4:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800a8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a8b8:	a917      	add	r1, sp, #92	; 0x5c
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	a80b      	add	r0, sp, #44	; 0x2c
 800a8be:	f88d 301c 	strb.w	r3, [sp, #28]
 800a8c2:	f7ff feef 	bl	800a6a4 <ucdr_init_buffer>
 800a8c6:	a906      	add	r1, sp, #24
 800a8c8:	a80b      	add	r0, sp, #44	; 0x2c
 800a8ca:	f001 ffa7 	bl	800c81c <uxr_serialize_OBJK_Topic_Binary>
 800a8ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8d0:	9316      	str	r3, [sp, #88]	; 0x58
 800a8d2:	ac13      	add	r4, sp, #76	; 0x4c
 800a8d4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a8d8:	9600      	str	r6, [sp, #0]
 800a8da:	9401      	str	r4, [sp, #4]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f7ff ff70 	bl	800a7c4 <uxr_common_create_entity>
 800a8e4:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800a8e8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ea:	bf00      	nop

0800a8ec <uxr_buffer_create_publisher_bin>:
 800a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ee:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	9105      	str	r1, [sp, #20]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	2603      	movs	r6, #3
 800a8fa:	a992      	add	r1, sp, #584	; 0x248
 800a8fc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a900:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800a904:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800a908:	f000 f960 	bl	800abcc <uxr_object_id_to_raw>
 800a90c:	2300      	movs	r3, #0
 800a90e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a912:	a912      	add	r1, sp, #72	; 0x48
 800a914:	a806      	add	r0, sp, #24
 800a916:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800a91a:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800a91e:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800a922:	f7ff febf 	bl	800a6a4 <ucdr_init_buffer>
 800a926:	a993      	add	r1, sp, #588	; 0x24c
 800a928:	a806      	add	r0, sp, #24
 800a92a:	f002 f82b 	bl	800c984 <uxr_serialize_OBJK_Publisher_Binary>
 800a92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a930:	9311      	str	r3, [sp, #68]	; 0x44
 800a932:	ac0e      	add	r4, sp, #56	; 0x38
 800a934:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a938:	9700      	str	r7, [sp, #0]
 800a93a:	9401      	str	r4, [sp, #4]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4628      	mov	r0, r5
 800a940:	f7ff ff40 	bl	800a7c4 <uxr_common_create_entity>
 800a944:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800a948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94a:	bf00      	nop

0800a94c <uxr_buffer_create_subscriber_bin>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800a952:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a956:	9105      	str	r1, [sp, #20]
 800a958:	4605      	mov	r5, r0
 800a95a:	a992      	add	r1, sp, #584	; 0x248
 800a95c:	4618      	mov	r0, r3
 800a95e:	2304      	movs	r3, #4
 800a960:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800a964:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800a968:	f000 f930 	bl	800abcc <uxr_object_id_to_raw>
 800a96c:	2300      	movs	r3, #0
 800a96e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a972:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800a976:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800a97a:	a912      	add	r1, sp, #72	; 0x48
 800a97c:	2303      	movs	r3, #3
 800a97e:	a806      	add	r0, sp, #24
 800a980:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800a984:	f7ff fe8e 	bl	800a6a4 <ucdr_init_buffer>
 800a988:	a993      	add	r1, sp, #588	; 0x24c
 800a98a:	a806      	add	r0, sp, #24
 800a98c:	f002 f8aa 	bl	800cae4 <uxr_serialize_OBJK_Subscriber_Binary>
 800a990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a992:	9311      	str	r3, [sp, #68]	; 0x44
 800a994:	ac0e      	add	r4, sp, #56	; 0x38
 800a996:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a99a:	9600      	str	r6, [sp, #0]
 800a99c:	9401      	str	r4, [sp, #4]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f7ff ff0f 	bl	800a7c4 <uxr_common_create_entity>
 800a9a6:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}

0800a9ac <uxr_buffer_create_datawriter_bin>:
 800a9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b0:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a9b4:	ac1d      	add	r4, sp, #116	; 0x74
 800a9b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a9ba:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800a9be:	9105      	str	r1, [sp, #20]
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	a9a1      	add	r1, sp, #644	; 0x284
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	2305      	movs	r3, #5
 800a9c8:	7123      	strb	r3, [r4, #4]
 800a9ca:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800a9ce:	2703      	movs	r7, #3
 800a9d0:	f000 f8fc 	bl	800abcc <uxr_object_id_to_raw>
 800a9d4:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800a9d6:	7227      	strb	r7, [r4, #8]
 800a9d8:	a90e      	add	r1, sp, #56	; 0x38
 800a9da:	f000 f8f7 	bl	800abcc <uxr_object_id_to_raw>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800a9e4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800a9e8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800a9ec:	3d00      	subs	r5, #0
 800a9ee:	bf18      	it	ne
 800a9f0:	2501      	movne	r5, #1
 800a9f2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800a9f6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800a9fa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a9fe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800aa02:	2301      	movs	r3, #1
 800aa04:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800aa08:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800aa0c:	bb8a      	cbnz	r2, 800aa72 <uxr_buffer_create_datawriter_bin+0xc6>
 800aa0e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800aa12:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800aa16:	f04f 0c13 	mov.w	ip, #19
 800aa1a:	250b      	movs	r5, #11
 800aa1c:	2221      	movs	r2, #33	; 0x21
 800aa1e:	2111      	movs	r1, #17
 800aa20:	2009      	movs	r0, #9
 800aa22:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800aa26:	b923      	cbnz	r3, 800aa32 <uxr_buffer_create_datawriter_bin+0x86>
 800aa28:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800aa2c:	4672      	mov	r2, lr
 800aa2e:	4661      	mov	r1, ip
 800aa30:	4628      	mov	r0, r5
 800aa32:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d025      	beq.n	800aa86 <uxr_buffer_create_datawriter_bin+0xda>
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d029      	beq.n	800aa92 <uxr_buffer_create_datawriter_bin+0xe6>
 800aa3e:	b32b      	cbz	r3, 800aa8c <uxr_buffer_create_datawriter_bin+0xe0>
 800aa40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa44:	a921      	add	r1, sp, #132	; 0x84
 800aa46:	a806      	add	r0, sp, #24
 800aa48:	f7ff fe2c 	bl	800a6a4 <ucdr_init_buffer>
 800aa4c:	a90e      	add	r1, sp, #56	; 0x38
 800aa4e:	a806      	add	r0, sp, #24
 800aa50:	f002 f8fa 	bl	800cc48 <uxr_serialize_OBJK_DataWriter_Binary>
 800aa54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa56:	f8cd 8000 	str.w	r8, [sp]
 800aa5a:	9401      	str	r4, [sp, #4]
 800aa5c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800aa60:	60e3      	str	r3, [r4, #12]
 800aa62:	4630      	mov	r0, r6
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	f7ff fead 	bl	800a7c4 <uxr_common_create_entity>
 800aa6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800aa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa72:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800aa76:	f04f 0c12 	mov.w	ip, #18
 800aa7a:	250a      	movs	r5, #10
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	2110      	movs	r1, #16
 800aa80:	2008      	movs	r0, #8
 800aa82:	2702      	movs	r7, #2
 800aa84:	e7cd      	b.n	800aa22 <uxr_buffer_create_datawriter_bin+0x76>
 800aa86:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800aa8a:	e7d9      	b.n	800aa40 <uxr_buffer_create_datawriter_bin+0x94>
 800aa8c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800aa90:	e7d6      	b.n	800aa40 <uxr_buffer_create_datawriter_bin+0x94>
 800aa92:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800aa96:	e7d3      	b.n	800aa40 <uxr_buffer_create_datawriter_bin+0x94>

0800aa98 <uxr_buffer_create_datareader_bin>:
 800aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800aaa0:	ac1f      	add	r4, sp, #124	; 0x7c
 800aaa2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800aaa6:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800aaaa:	9105      	str	r1, [sp, #20]
 800aaac:	4606      	mov	r6, r0
 800aaae:	a9a3      	add	r1, sp, #652	; 0x28c
 800aab0:	4618      	mov	r0, r3
 800aab2:	2306      	movs	r3, #6
 800aab4:	7123      	strb	r3, [r4, #4]
 800aab6:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800aaba:	2703      	movs	r7, #3
 800aabc:	f000 f886 	bl	800abcc <uxr_object_id_to_raw>
 800aac0:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800aac2:	7227      	strb	r7, [r4, #8]
 800aac4:	a90e      	add	r1, sp, #56	; 0x38
 800aac6:	f000 f881 	bl	800abcc <uxr_object_id_to_raw>
 800aaca:	2300      	movs	r3, #0
 800aacc:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800aad0:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800aad4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800aad8:	3d00      	subs	r5, #0
 800aada:	bf18      	it	ne
 800aadc:	2501      	movne	r5, #1
 800aade:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800aae2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800aae6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800aaea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800aaee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800aaf8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800aafc:	bb8a      	cbnz	r2, 800ab62 <uxr_buffer_create_datareader_bin+0xca>
 800aafe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ab02:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800ab06:	f04f 0c13 	mov.w	ip, #19
 800ab0a:	250b      	movs	r5, #11
 800ab0c:	2221      	movs	r2, #33	; 0x21
 800ab0e:	2111      	movs	r1, #17
 800ab10:	2009      	movs	r0, #9
 800ab12:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800ab16:	b923      	cbnz	r3, 800ab22 <uxr_buffer_create_datareader_bin+0x8a>
 800ab18:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800ab1c:	4672      	mov	r2, lr
 800ab1e:	4661      	mov	r1, ip
 800ab20:	4628      	mov	r0, r5
 800ab22:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d025      	beq.n	800ab76 <uxr_buffer_create_datareader_bin+0xde>
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d029      	beq.n	800ab82 <uxr_buffer_create_datareader_bin+0xea>
 800ab2e:	b32b      	cbz	r3, 800ab7c <uxr_buffer_create_datareader_bin+0xe4>
 800ab30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab34:	a923      	add	r1, sp, #140	; 0x8c
 800ab36:	a806      	add	r0, sp, #24
 800ab38:	f7ff fdb4 	bl	800a6a4 <ucdr_init_buffer>
 800ab3c:	a90e      	add	r1, sp, #56	; 0x38
 800ab3e:	a806      	add	r0, sp, #24
 800ab40:	f002 f846 	bl	800cbd0 <uxr_serialize_OBJK_DataReader_Binary>
 800ab44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab46:	f8cd 8000 	str.w	r8, [sp]
 800ab4a:	9401      	str	r4, [sp, #4]
 800ab4c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ab50:	60e3      	str	r3, [r4, #12]
 800ab52:	4630      	mov	r0, r6
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	f7ff fe35 	bl	800a7c4 <uxr_common_create_entity>
 800ab5a:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800ab5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab62:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800ab66:	f04f 0c12 	mov.w	ip, #18
 800ab6a:	250a      	movs	r5, #10
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	2110      	movs	r1, #16
 800ab70:	2008      	movs	r0, #8
 800ab72:	2702      	movs	r7, #2
 800ab74:	e7cd      	b.n	800ab12 <uxr_buffer_create_datareader_bin+0x7a>
 800ab76:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800ab7a:	e7d9      	b.n	800ab30 <uxr_buffer_create_datareader_bin+0x98>
 800ab7c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ab80:	e7d6      	b.n	800ab30 <uxr_buffer_create_datareader_bin+0x98>
 800ab82:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ab86:	e7d3      	b.n	800ab30 <uxr_buffer_create_datareader_bin+0x98>

0800ab88 <uxr_object_id>:
 800ab88:	b082      	sub	sp, #8
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f88d 1006 	strb.w	r1, [sp, #6]
 800ab90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab94:	f360 030f 	bfi	r3, r0, #0, #16
 800ab98:	f362 431f 	bfi	r3, r2, #16, #16
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	b002      	add	sp, #8
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop

0800aba4 <uxr_object_id_from_raw>:
 800aba4:	7843      	ldrb	r3, [r0, #1]
 800aba6:	7801      	ldrb	r1, [r0, #0]
 800aba8:	b082      	sub	sp, #8
 800abaa:	f003 020f 	and.w	r2, r3, #15
 800abae:	f88d 2006 	strb.w	r2, [sp, #6]
 800abb2:	091b      	lsrs	r3, r3, #4
 800abb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800abb8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800abbc:	2000      	movs	r0, #0
 800abbe:	f363 000f 	bfi	r0, r3, #0, #16
 800abc2:	f362 401f 	bfi	r0, r2, #16, #16
 800abc6:	b002      	add	sp, #8
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <uxr_object_id_to_raw>:
 800abcc:	4602      	mov	r2, r0
 800abce:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800abd2:	b082      	sub	sp, #8
 800abd4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800abd8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800abdc:	f881 c000 	strb.w	ip, [r1]
 800abe0:	7048      	strb	r0, [r1, #1]
 800abe2:	b002      	add	sp, #8
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop

0800abe8 <on_get_fragmentation_info>:
 800abe8:	b500      	push	{lr}
 800abea:	b08b      	sub	sp, #44	; 0x2c
 800abec:	4601      	mov	r1, r0
 800abee:	2204      	movs	r2, #4
 800abf0:	a802      	add	r0, sp, #8
 800abf2:	f7ff fd57 	bl	800a6a4 <ucdr_init_buffer>
 800abf6:	f10d 0305 	add.w	r3, sp, #5
 800abfa:	f10d 0206 	add.w	r2, sp, #6
 800abfe:	a901      	add	r1, sp, #4
 800ac00:	a802      	add	r0, sp, #8
 800ac02:	f001 f9d7 	bl	800bfb4 <uxr_read_submessage_header>
 800ac06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ac0a:	2b0d      	cmp	r3, #13
 800ac0c:	d003      	beq.n	800ac16 <on_get_fragmentation_info+0x2e>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	b00b      	add	sp, #44	; 0x2c
 800ac12:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ac1a:	f013 0f02 	tst.w	r3, #2
 800ac1e:	bf14      	ite	ne
 800ac20:	2002      	movne	r0, #2
 800ac22:	2001      	moveq	r0, #1
 800ac24:	b00b      	add	sp, #44	; 0x2c
 800ac26:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac2a:	bf00      	nop

0800ac2c <read_submessage_get_info>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	2500      	movs	r5, #0
 800ac30:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800ac34:	4604      	mov	r4, r0
 800ac36:	f44f 7224 	mov.w	r2, #656	; 0x290
 800ac3a:	460e      	mov	r6, r1
 800ac3c:	a810      	add	r0, sp, #64	; 0x40
 800ac3e:	4629      	mov	r1, r5
 800ac40:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ac44:	f009 fe58 	bl	80148f8 <memset>
 800ac48:	a903      	add	r1, sp, #12
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f002 fa72 	bl	800d134 <uxr_deserialize_GET_INFO_Payload>
 800ac50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ac54:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f001 f821 	bl	800bca0 <uxr_session_header_offset>
 800ac5e:	462b      	mov	r3, r5
 800ac60:	9000      	str	r0, [sp, #0]
 800ac62:	220c      	movs	r2, #12
 800ac64:	a905      	add	r1, sp, #20
 800ac66:	a808      	add	r0, sp, #32
 800ac68:	f7ff fd0a 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800ac6c:	a910      	add	r1, sp, #64	; 0x40
 800ac6e:	a808      	add	r0, sp, #32
 800ac70:	f002 fad2 	bl	800d218 <uxr_serialize_INFO_Payload>
 800ac74:	9b08      	ldr	r3, [sp, #32]
 800ac76:	462a      	mov	r2, r5
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 ffba 	bl	800bbf4 <uxr_stamp_session_header>
 800ac80:	a808      	add	r0, sp, #32
 800ac82:	f7ff fd3b 	bl	800a6fc <ucdr_buffer_length>
 800ac86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac88:	4602      	mov	r2, r0
 800ac8a:	a905      	add	r1, sp, #20
 800ac8c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ac90:	47a0      	blx	r4
 800ac92:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800ac96:	bd70      	pop	{r4, r5, r6, pc}

0800ac98 <write_submessage_acknack.isra.0>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	b092      	sub	sp, #72	; 0x48
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	460e      	mov	r6, r1
 800aca0:	4614      	mov	r4, r2
 800aca2:	f000 fffd 	bl	800bca0 <uxr_session_header_offset>
 800aca6:	a905      	add	r1, sp, #20
 800aca8:	9000      	str	r0, [sp, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	a80a      	add	r0, sp, #40	; 0x28
 800acae:	2211      	movs	r2, #17
 800acb0:	f7ff fce6 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800acb4:	2218      	movs	r2, #24
 800acb6:	fb02 5404 	mla	r4, r2, r4, r5
 800acba:	2300      	movs	r3, #0
 800acbc:	2205      	movs	r2, #5
 800acbe:	3450      	adds	r4, #80	; 0x50
 800acc0:	210a      	movs	r1, #10
 800acc2:	a80a      	add	r0, sp, #40	; 0x28
 800acc4:	f001 f95c 	bl	800bf80 <uxr_buffer_submessage_header>
 800acc8:	a903      	add	r1, sp, #12
 800acca:	4620      	mov	r0, r4
 800accc:	f007 fc48 	bl	8012560 <uxr_compute_acknack>
 800acd0:	ba40      	rev16	r0, r0
 800acd2:	f8ad 000e 	strh.w	r0, [sp, #14]
 800acd6:	a903      	add	r1, sp, #12
 800acd8:	a80a      	add	r0, sp, #40	; 0x28
 800acda:	f88d 6010 	strb.w	r6, [sp, #16]
 800acde:	f002 fb0b 	bl	800d2f8 <uxr_serialize_ACKNACK_Payload>
 800ace2:	2200      	movs	r2, #0
 800ace4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace6:	4611      	mov	r1, r2
 800ace8:	4628      	mov	r0, r5
 800acea:	f000 ff83 	bl	800bbf4 <uxr_stamp_session_header>
 800acee:	a80a      	add	r0, sp, #40	; 0x28
 800acf0:	f7ff fd04 	bl	800a6fc <ucdr_buffer_length>
 800acf4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800acf6:	4602      	mov	r2, r0
 800acf8:	a905      	add	r1, sp, #20
 800acfa:	e9d3 0400 	ldrd	r0, r4, [r3]
 800acfe:	47a0      	blx	r4
 800ad00:	b012      	add	sp, #72	; 0x48
 800ad02:	bd70      	pop	{r4, r5, r6, pc}
 800ad04:	0000      	movs	r0, r0
	...

0800ad08 <uxr_init_session>:
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ad40 <uxr_init_session+0x38>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800ad14:	4604      	mov	r4, r0
 800ad16:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800ad1a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800ad1e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800ad22:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800ad26:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800ad2a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800ad2e:	2181      	movs	r1, #129	; 0x81
 800ad30:	f000 fecc 	bl	800bacc <uxr_init_session_info>
 800ad34:	f104 0008 	add.w	r0, r4, #8
 800ad38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad3c:	f001 b83c 	b.w	800bdb8 <uxr_init_stream_storage>
	...

0800ad48 <uxr_set_status_callback>:
 800ad48:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop

0800ad50 <uxr_set_topic_callback>:
 800ad50:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop

0800ad58 <uxr_set_request_callback>:
 800ad58:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop

0800ad60 <uxr_set_reply_callback>:
 800ad60:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop

0800ad68 <uxr_create_output_best_effort_stream>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	e9cd 2100 	strd	r2, r1, [sp]
 800ad70:	4604      	mov	r4, r0
 800ad72:	f000 ff95 	bl	800bca0 <uxr_session_header_offset>
 800ad76:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f104 0008 	add.w	r0, r4, #8
 800ad80:	b004      	add	sp, #16
 800ad82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad86:	f001 b861 	b.w	800be4c <uxr_add_output_best_effort_buffer>
 800ad8a:	bf00      	nop

0800ad8c <uxr_create_output_reliable_stream>:
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ad94:	4604      	mov	r4, r0
 800ad96:	9303      	str	r3, [sp, #12]
 800ad98:	f000 ff82 	bl	800bca0 <uxr_session_header_offset>
 800ad9c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ada0:	9000      	str	r0, [sp, #0]
 800ada2:	9905      	ldr	r1, [sp, #20]
 800ada4:	f104 0008 	add.w	r0, r4, #8
 800ada8:	f001 f864 	bl	800be74 <uxr_add_output_reliable_buffer>
 800adac:	2200      	movs	r2, #0
 800adae:	b2c3      	uxtb	r3, r0
 800adb0:	f363 0207 	bfi	r2, r3, #0, #8
 800adb4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800adb8:	f363 220f 	bfi	r2, r3, #8, #8
 800adbc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800adc0:	f363 4217 	bfi	r2, r3, #16, #8
 800adc4:	0e03      	lsrs	r3, r0, #24
 800adc6:	f363 621f 	bfi	r2, r3, #24, #8
 800adca:	4610      	mov	r0, r2
 800adcc:	b008      	add	sp, #32
 800adce:	bd10      	pop	{r4, pc}

0800add0 <uxr_create_input_best_effort_stream>:
 800add0:	b082      	sub	sp, #8
 800add2:	3008      	adds	r0, #8
 800add4:	b002      	add	sp, #8
 800add6:	f001 b867 	b.w	800bea8 <uxr_add_input_best_effort_buffer>
 800adda:	bf00      	nop

0800addc <uxr_create_input_reliable_stream>:
 800addc:	b510      	push	{r4, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	4c0b      	ldr	r4, [pc, #44]	; (800ae10 <uxr_create_input_reliable_stream+0x34>)
 800ade2:	9400      	str	r4, [sp, #0]
 800ade4:	3008      	adds	r0, #8
 800ade6:	f001 f875 	bl	800bed4 <uxr_add_input_reliable_buffer>
 800adea:	2200      	movs	r2, #0
 800adec:	b2c3      	uxtb	r3, r0
 800adee:	f363 0207 	bfi	r2, r3, #0, #8
 800adf2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800adf6:	f363 220f 	bfi	r2, r3, #8, #8
 800adfa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800adfe:	f363 4217 	bfi	r2, r3, #16, #8
 800ae02:	0e03      	lsrs	r3, r0, #24
 800ae04:	f363 621f 	bfi	r2, r3, #24, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	b004      	add	sp, #16
 800ae0c:	bd10      	pop	{r4, pc}
 800ae0e:	bf00      	nop
 800ae10:	0800abe9 	.word	0x0800abe9

0800ae14 <uxr_epoch_nanos>:
 800ae14:	b510      	push	{r4, lr}
 800ae16:	4604      	mov	r4, r0
 800ae18:	f001 f912 	bl	800c040 <uxr_nanos>
 800ae1c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800ae20:	1ac0      	subs	r0, r0, r3
 800ae22:	eb61 0102 	sbc.w	r1, r1, r2
 800ae26:	bd10      	pop	{r4, pc}

0800ae28 <uxr_flash_output_streams>:
 800ae28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	7e03      	ldrb	r3, [r0, #24]
 800ae2e:	b084      	sub	sp, #16
 800ae30:	4604      	mov	r4, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d035      	beq.n	800aea2 <uxr_flash_output_streams+0x7a>
 800ae36:	f04f 0900 	mov.w	r9, #0
 800ae3a:	4648      	mov	r0, r9
 800ae3c:	f10d 0802 	add.w	r8, sp, #2
 800ae40:	af03      	add	r7, sp, #12
 800ae42:	ae02      	add	r6, sp, #8
 800ae44:	e006      	b.n	800ae54 <uxr_flash_output_streams+0x2c>
 800ae46:	7e23      	ldrb	r3, [r4, #24]
 800ae48:	f109 0901 	add.w	r9, r9, #1
 800ae4c:	fa5f f089 	uxtb.w	r0, r9
 800ae50:	4283      	cmp	r3, r0
 800ae52:	d926      	bls.n	800aea2 <uxr_flash_output_streams+0x7a>
 800ae54:	2201      	movs	r2, #1
 800ae56:	4611      	mov	r1, r2
 800ae58:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ae5c:	f000 ff58 	bl	800bd10 <uxr_stream_id>
 800ae60:	3508      	adds	r5, #8
 800ae62:	4684      	mov	ip, r0
 800ae64:	4643      	mov	r3, r8
 800ae66:	463a      	mov	r2, r7
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f8cd c004 	str.w	ip, [sp, #4]
 800ae70:	f007 fbfc 	bl	801266c <uxr_prepare_best_effort_buffer_to_send>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d0e6      	beq.n	800ae46 <uxr_flash_output_streams+0x1e>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ae7e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 feb6 	bl	800bbf4 <uxr_stamp_session_header>
 800ae88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae8a:	9a03      	ldr	r2, [sp, #12]
 800ae8c:	685d      	ldr	r5, [r3, #4]
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	9902      	ldr	r1, [sp, #8]
 800ae92:	47a8      	blx	r5
 800ae94:	f109 0901 	add.w	r9, r9, #1
 800ae98:	7e23      	ldrb	r3, [r4, #24]
 800ae9a:	fa5f f089 	uxtb.w	r0, r9
 800ae9e:	4283      	cmp	r3, r0
 800aea0:	d8d8      	bhi.n	800ae54 <uxr_flash_output_streams+0x2c>
 800aea2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800aea6:	b38b      	cbz	r3, 800af0c <uxr_flash_output_streams+0xe4>
 800aea8:	f04f 0900 	mov.w	r9, #0
 800aeac:	f10d 0802 	add.w	r8, sp, #2
 800aeb0:	af03      	add	r7, sp, #12
 800aeb2:	ae02      	add	r6, sp, #8
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	2102      	movs	r1, #2
 800aeba:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800aebe:	f000 ff27 	bl	800bd10 <uxr_stream_id>
 800aec2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800aec6:	3520      	adds	r5, #32
 800aec8:	9001      	str	r0, [sp, #4]
 800aeca:	e00d      	b.n	800aee8 <uxr_flash_output_streams+0xc0>
 800aecc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aed0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800aed4:	9b02      	ldr	r3, [sp, #8]
 800aed6:	f000 fe8d 	bl	800bbf4 <uxr_stamp_session_header>
 800aeda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aedc:	9a03      	ldr	r2, [sp, #12]
 800aede:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800aee2:	9902      	ldr	r1, [sp, #8]
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	47d0      	blx	sl
 800aee8:	4643      	mov	r3, r8
 800aeea:	463a      	mov	r2, r7
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	f007 fdda 	bl	8012aa8 <uxr_prepare_next_reliable_buffer_to_send>
 800aef4:	4603      	mov	r3, r0
 800aef6:	4620      	mov	r0, r4
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1e7      	bne.n	800aecc <uxr_flash_output_streams+0xa4>
 800aefc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800af00:	f109 0901 	add.w	r9, r9, #1
 800af04:	fa5f f089 	uxtb.w	r0, r9
 800af08:	4283      	cmp	r3, r0
 800af0a:	d8d4      	bhi.n	800aeb6 <uxr_flash_output_streams+0x8e>
 800af0c:	b004      	add	sp, #16
 800af0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af12:	bf00      	nop

0800af14 <read_submessage_info>:
 800af14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af18:	460d      	mov	r5, r1
 800af1a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800af1e:	4669      	mov	r1, sp
 800af20:	4607      	mov	r7, r0
 800af22:	4628      	mov	r0, r5
 800af24:	f002 f814 	bl	800cf50 <uxr_deserialize_BaseObjectReply>
 800af28:	a902      	add	r1, sp, #8
 800af2a:	4604      	mov	r4, r0
 800af2c:	4628      	mov	r0, r5
 800af2e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800af32:	f7fe facb 	bl	80094cc <ucdr_deserialize_bool>
 800af36:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800af3a:	4004      	ands	r4, r0
 800af3c:	b2e4      	uxtb	r4, r4
 800af3e:	b95b      	cbnz	r3, 800af58 <read_submessage_info+0x44>
 800af40:	a987      	add	r1, sp, #540	; 0x21c
 800af42:	4628      	mov	r0, r5
 800af44:	f7fe fac2 	bl	80094cc <ucdr_deserialize_bool>
 800af48:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800af4c:	4606      	mov	r6, r0
 800af4e:	b94b      	cbnz	r3, 800af64 <read_submessage_info+0x50>
 800af50:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800af54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af58:	a903      	add	r1, sp, #12
 800af5a:	4628      	mov	r0, r5
 800af5c:	f001 fea0 	bl	800cca0 <uxr_deserialize_ObjectVariant>
 800af60:	4004      	ands	r4, r0
 800af62:	e7ed      	b.n	800af40 <read_submessage_info+0x2c>
 800af64:	a988      	add	r1, sp, #544	; 0x220
 800af66:	4628      	mov	r0, r5
 800af68:	f7fe fade 	bl	8009528 <ucdr_deserialize_uint8_t>
 800af6c:	4234      	tst	r4, r6
 800af6e:	d0ef      	beq.n	800af50 <read_submessage_info+0x3c>
 800af70:	2800      	cmp	r0, #0
 800af72:	d0ed      	beq.n	800af50 <read_submessage_info+0x3c>
 800af74:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800af78:	2b0d      	cmp	r3, #13
 800af7a:	d1e9      	bne.n	800af50 <read_submessage_info+0x3c>
 800af7c:	a98a      	add	r1, sp, #552	; 0x228
 800af7e:	4628      	mov	r0, r5
 800af80:	f7ff f878 	bl	800a074 <ucdr_deserialize_int16_t>
 800af84:	b140      	cbz	r0, 800af98 <read_submessage_info+0x84>
 800af86:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	dd07      	ble.n	800af9e <read_submessage_info+0x8a>
 800af8e:	f1b8 0f00 	cmp.w	r8, #0
 800af92:	bf14      	ite	ne
 800af94:	2001      	movne	r0, #1
 800af96:	2002      	moveq	r0, #2
 800af98:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800af9c:	e7d8      	b.n	800af50 <read_submessage_info+0x3c>
 800af9e:	2000      	movs	r0, #0
 800afa0:	e7fa      	b.n	800af98 <read_submessage_info+0x84>
 800afa2:	bf00      	nop

0800afa4 <read_submessage_list>:
 800afa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa8:	b097      	sub	sp, #92	; 0x5c
 800afaa:	4ec1      	ldr	r6, [pc, #772]	; (800b2b0 <read_submessage_list+0x30c>)
 800afac:	9209      	str	r2, [sp, #36]	; 0x24
 800afae:	4604      	mov	r4, r0
 800afb0:	460d      	mov	r5, r1
 800afb2:	f04f 0801 	mov.w	r8, #1
 800afb6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800afba:	aa0c      	add	r2, sp, #48	; 0x30
 800afbc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 fff7 	bl	800bfb4 <uxr_read_submessage_header>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f000 813e 	beq.w	800b248 <read_submessage_list+0x2a4>
 800afcc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800afd0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800afd4:	3b02      	subs	r3, #2
 800afd6:	2b0d      	cmp	r3, #13
 800afd8:	d8ed      	bhi.n	800afb6 <read_submessage_list+0x12>
 800afda:	a101      	add	r1, pc, #4	; (adr r1, 800afe0 <read_submessage_list+0x3c>)
 800afdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afe0:	0800b23f 	.word	0x0800b23f
 800afe4:	0800afb7 	.word	0x0800afb7
 800afe8:	0800b22f 	.word	0x0800b22f
 800afec:	0800b1cd 	.word	0x0800b1cd
 800aff0:	0800b1c3 	.word	0x0800b1c3
 800aff4:	0800afb7 	.word	0x0800afb7
 800aff8:	0800afb7 	.word	0x0800afb7
 800affc:	0800b123 	.word	0x0800b123
 800b000:	0800b0b3 	.word	0x0800b0b3
 800b004:	0800b073 	.word	0x0800b073
 800b008:	0800afb7 	.word	0x0800afb7
 800b00c:	0800afb7 	.word	0x0800afb7
 800b010:	0800afb7 	.word	0x0800afb7
 800b014:	0800b019 	.word	0x0800b019
 800b018:	a910      	add	r1, sp, #64	; 0x40
 800b01a:	4628      	mov	r0, r5
 800b01c:	f002 f9bc 	bl	800d398 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800b020:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800b024:	f1b9 0f00 	cmp.w	r9, #0
 800b028:	f000 8116 	beq.w	800b258 <read_submessage_list+0x2b4>
 800b02c:	f001 f808 	bl	800c040 <uxr_nanos>
 800b030:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b038:	2100      	movs	r1, #0
 800b03a:	468c      	mov	ip, r1
 800b03c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800b040:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800b044:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b046:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b048:	468c      	mov	ip, r1
 800b04a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800b04e:	46e2      	mov	sl, ip
 800b050:	46bc      	mov	ip, r7
 800b052:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800b056:	fbc0 7106 	smlal	r7, r1, r0, r6
 800b05a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800b05e:	e9cd 7100 	strd	r7, r1, [sp]
 800b062:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b066:	9106      	str	r1, [sp, #24]
 800b068:	4620      	mov	r0, r4
 800b06a:	47c8      	blx	r9
 800b06c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800b070:	e7a1      	b.n	800afb6 <read_submessage_list+0x12>
 800b072:	a910      	add	r1, sp, #64	; 0x40
 800b074:	4628      	mov	r0, r5
 800b076:	f002 f97d 	bl	800d374 <uxr_deserialize_HEARTBEAT_Payload>
 800b07a:	2100      	movs	r1, #0
 800b07c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800b080:	f000 fe70 	bl	800bd64 <uxr_stream_id_from_raw>
 800b084:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800b088:	900f      	str	r0, [sp, #60]	; 0x3c
 800b08a:	4639      	mov	r1, r7
 800b08c:	f104 0008 	add.w	r0, r4, #8
 800b090:	f000 ff56 	bl	800bf40 <uxr_get_input_reliable_stream>
 800b094:	2800      	cmp	r0, #0
 800b096:	d08e      	beq.n	800afb6 <read_submessage_list+0x12>
 800b098:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800b09c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b0a0:	f007 fa52 	bl	8012548 <uxr_process_heartbeat>
 800b0a4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800b0a8:	463a      	mov	r2, r7
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f7ff fdf4 	bl	800ac98 <write_submessage_acknack.isra.0>
 800b0b0:	e781      	b.n	800afb6 <read_submessage_list+0x12>
 800b0b2:	a910      	add	r1, sp, #64	; 0x40
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	f002 f935 	bl	800d324 <uxr_deserialize_ACKNACK_Payload>
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800b0c0:	f000 fe50 	bl	800bd64 <uxr_stream_id_from_raw>
 800b0c4:	900d      	str	r0, [sp, #52]	; 0x34
 800b0c6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800b0ca:	f104 0008 	add.w	r0, r4, #8
 800b0ce:	f000 ff23 	bl	800bf18 <uxr_get_output_reliable_stream>
 800b0d2:	4607      	mov	r7, r0
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f43f af6e 	beq.w	800afb6 <read_submessage_list+0x12>
 800b0da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800b0de:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800b0e2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800b0e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b0ea:	b289      	uxth	r1, r1
 800b0ec:	f007 fd86 	bl	8012bfc <uxr_process_acknack>
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f007 fd43 	bl	8012b7c <uxr_begin_output_nack_buffer_it>
 800b0f6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800b0fa:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800b0fe:	e006      	b.n	800b10e <read_submessage_list+0x16a>
 800b100:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b102:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b104:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800b108:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	47c8      	blx	r9
 800b10e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800b112:	aa0f      	add	r2, sp, #60	; 0x3c
 800b114:	4651      	mov	r1, sl
 800b116:	4638      	mov	r0, r7
 800b118:	f007 fd32 	bl	8012b80 <uxr_next_reliable_nack_buffer_to_send>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d1ef      	bne.n	800b100 <read_submessage_list+0x15c>
 800b120:	e749      	b.n	800afb6 <read_submessage_list+0x12>
 800b122:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b126:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800b12a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800b12e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b132:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800b136:	4651      	mov	r1, sl
 800b138:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b13c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800b140:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800b144:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800b148:	4628      	mov	r0, r5
 800b14a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800b14e:	f001 fe49 	bl	800cde4 <uxr_deserialize_BaseObjectRequest>
 800b152:	4650      	mov	r0, sl
 800b154:	a90f      	add	r1, sp, #60	; 0x3c
 800b156:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b15a:	f000 fdc7 	bl	800bcec <uxr_parse_base_object_request>
 800b15e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800b162:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b164:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800b168:	9110      	str	r1, [sp, #64]	; 0x40
 800b16a:	3f04      	subs	r7, #4
 800b16c:	f009 090e 	and.w	r9, r9, #14
 800b170:	b2bf      	uxth	r7, r7
 800b172:	f1bb 0f00 	cmp.w	fp, #0
 800b176:	d006      	beq.n	800b186 <read_submessage_list+0x1e2>
 800b178:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	4652      	mov	r2, sl
 800b180:	2300      	movs	r3, #0
 800b182:	4620      	mov	r0, r4
 800b184:	47d8      	blx	fp
 800b186:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b188:	b16a      	cbz	r2, 800b1a6 <read_submessage_list+0x202>
 800b18a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b18c:	2100      	movs	r1, #0
 800b18e:	3802      	subs	r0, #2
 800b190:	e002      	b.n	800b198 <read_submessage_list+0x1f4>
 800b192:	3101      	adds	r1, #1
 800b194:	4291      	cmp	r1, r2
 800b196:	d006      	beq.n	800b1a6 <read_submessage_list+0x202>
 800b198:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b19c:	4553      	cmp	r3, sl
 800b19e:	d1f8      	bne.n	800b192 <read_submessage_list+0x1ee>
 800b1a0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	545a      	strb	r2, [r3, r1]
 800b1a6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800b1aa:	9102      	str	r1, [sp, #8]
 800b1ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b1ae:	9101      	str	r1, [sp, #4]
 800b1b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1b2:	9100      	str	r1, [sp, #0]
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f007 fddc 	bl	8012d78 <read_submessage_format>
 800b1c0:	e6f9      	b.n	800afb6 <read_submessage_list+0x12>
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f7ff fea5 	bl	800af14 <read_submessage_info>
 800b1ca:	e6f4      	b.n	800afb6 <read_submessage_list+0x12>
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	d03e      	beq.n	800b24e <read_submessage_list+0x2aa>
 800b1d0:	a910      	add	r1, sp, #64	; 0x40
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f002 f802 	bl	800d1dc <uxr_deserialize_STATUS_Payload>
 800b1d8:	a90e      	add	r1, sp, #56	; 0x38
 800b1da:	aa0d      	add	r2, sp, #52	; 0x34
 800b1dc:	a810      	add	r0, sp, #64	; 0x40
 800b1de:	f000 fd85 	bl	800bcec <uxr_parse_base_object_request>
 800b1e2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800b1e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b1e8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800b1ec:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800b1f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b1f2:	f1ba 0f00 	cmp.w	sl, #0
 800b1f6:	d006      	beq.n	800b206 <read_submessage_list+0x262>
 800b1f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	463a      	mov	r2, r7
 800b200:	464b      	mov	r3, r9
 800b202:	4620      	mov	r0, r4
 800b204:	47d0      	blx	sl
 800b206:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b208:	2a00      	cmp	r2, #0
 800b20a:	f43f aed4 	beq.w	800afb6 <read_submessage_list+0x12>
 800b20e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b210:	2100      	movs	r1, #0
 800b212:	3802      	subs	r0, #2
 800b214:	e003      	b.n	800b21e <read_submessage_list+0x27a>
 800b216:	3101      	adds	r1, #1
 800b218:	4291      	cmp	r1, r2
 800b21a:	f43f aecc 	beq.w	800afb6 <read_submessage_list+0x12>
 800b21e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b222:	42bb      	cmp	r3, r7
 800b224:	d1f7      	bne.n	800b216 <read_submessage_list+0x272>
 800b226:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b228:	f803 9001 	strb.w	r9, [r3, r1]
 800b22c:	e6c3      	b.n	800afb6 <read_submessage_list+0x12>
 800b22e:	2a00      	cmp	r2, #0
 800b230:	f47f aec1 	bne.w	800afb6 <read_submessage_list+0x12>
 800b234:	4629      	mov	r1, r5
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fc9e 	bl	800bb78 <uxr_read_create_session_status>
 800b23c:	e6bb      	b.n	800afb6 <read_submessage_list+0x12>
 800b23e:	4629      	mov	r1, r5
 800b240:	4620      	mov	r0, r4
 800b242:	f7ff fcf3 	bl	800ac2c <read_submessage_get_info>
 800b246:	e6b6      	b.n	800afb6 <read_submessage_list+0x12>
 800b248:	b017      	add	sp, #92	; 0x5c
 800b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24e:	4629      	mov	r1, r5
 800b250:	4620      	mov	r0, r4
 800b252:	f000 fc9d 	bl	800bb90 <uxr_read_delete_session_status>
 800b256:	e6ae      	b.n	800afb6 <read_submessage_list+0x12>
 800b258:	f000 fef2 	bl	800c040 <uxr_nanos>
 800b25c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b25e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b260:	464f      	mov	r7, r9
 800b262:	fbc3 2706 	smlal	r2, r7, r3, r6
 800b266:	1812      	adds	r2, r2, r0
 800b268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b26a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b26c:	eb47 0101 	adc.w	r1, r7, r1
 800b270:	464f      	mov	r7, r9
 800b272:	fbc3 0706 	smlal	r0, r7, r3, r6
 800b276:	463b      	mov	r3, r7
 800b278:	4684      	mov	ip, r0
 800b27a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800b27e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800b282:	eb1c 0c00 	adds.w	ip, ip, r0
 800b286:	464f      	mov	r7, r9
 800b288:	eb43 0307 	adc.w	r3, r3, r7
 800b28c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800b290:	eb61 0303 	sbc.w	r3, r1, r3
 800b294:	0fda      	lsrs	r2, r3, #31
 800b296:	eb12 020c 	adds.w	r2, r2, ip
 800b29a:	f143 0300 	adc.w	r3, r3, #0
 800b29e:	0852      	lsrs	r2, r2, #1
 800b2a0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800b2a4:	105b      	asrs	r3, r3, #1
 800b2a6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800b2aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800b2ae:	e6dd      	b.n	800b06c <read_submessage_list+0xc8>
 800b2b0:	3b9aca00 	.word	0x3b9aca00

0800b2b4 <listen_message_reliably>:
 800b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	1e0b      	subs	r3, r1, #0
 800b2ba:	b09d      	sub	sp, #116	; 0x74
 800b2bc:	bfb8      	it	lt
 800b2be:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800b2c2:	4680      	mov	r8, r0
 800b2c4:	9305      	str	r3, [sp, #20]
 800b2c6:	f000 fea1 	bl	800c00c <uxr_millis>
 800b2ca:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800b2ce:	4681      	mov	r9, r0
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	f000 80a1 	beq.w	800b418 <listen_message_reliably+0x164>
 800b2d6:	2600      	movs	r6, #0
 800b2d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b2dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b2e0:	9303      	str	r3, [sp, #12]
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	460f      	mov	r7, r1
 800b2e6:	e00f      	b.n	800b308 <listen_message_reliably+0x54>
 800b2e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b2ec:	9903      	ldr	r1, [sp, #12]
 800b2ee:	455a      	cmp	r2, fp
 800b2f0:	f106 0601 	add.w	r6, r6, #1
 800b2f4:	eb73 0101 	sbcs.w	r1, r3, r1
 800b2f8:	b2f0      	uxtb	r0, r6
 800b2fa:	da01      	bge.n	800b300 <listen_message_reliably+0x4c>
 800b2fc:	4693      	mov	fp, r2
 800b2fe:	9303      	str	r3, [sp, #12]
 800b300:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b304:	4283      	cmp	r3, r0
 800b306:	d960      	bls.n	800b3ca <listen_message_reliably+0x116>
 800b308:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800b30c:	2102      	movs	r1, #2
 800b30e:	2201      	movs	r2, #1
 800b310:	f000 fcfe 	bl	800bd10 <uxr_stream_id>
 800b314:	00e4      	lsls	r4, r4, #3
 800b316:	f104 0520 	add.w	r5, r4, #32
 800b31a:	4445      	add	r5, r8
 800b31c:	4601      	mov	r1, r0
 800b31e:	463b      	mov	r3, r7
 800b320:	464a      	mov	r2, r9
 800b322:	4628      	mov	r0, r5
 800b324:	9109      	str	r1, [sp, #36]	; 0x24
 800b326:	f007 fbff 	bl	8012b28 <uxr_update_output_stream_heartbeat_timestamp>
 800b32a:	eb08 0304 	add.w	r3, r8, r4
 800b32e:	2800      	cmp	r0, #0
 800b330:	d0da      	beq.n	800b2e8 <listen_message_reliably+0x34>
 800b332:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b336:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	4640      	mov	r0, r8
 800b33e:	f000 fcaf 	bl	800bca0 <uxr_session_header_offset>
 800b342:	3501      	adds	r5, #1
 800b344:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800b348:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b34c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800b350:	2300      	movs	r3, #0
 800b352:	2211      	movs	r2, #17
 800b354:	9000      	str	r0, [sp, #0]
 800b356:	a90c      	add	r1, sp, #48	; 0x30
 800b358:	4650      	mov	r0, sl
 800b35a:	f7ff f991 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800b35e:	2300      	movs	r3, #0
 800b360:	2205      	movs	r2, #5
 800b362:	210b      	movs	r1, #11
 800b364:	4650      	mov	r0, sl
 800b366:	f000 fe0b 	bl	800bf80 <uxr_buffer_submessage_header>
 800b36a:	8968      	ldrh	r0, [r5, #10]
 800b36c:	2101      	movs	r1, #1
 800b36e:	f007 fdcd 	bl	8012f0c <uxr_seq_num_add>
 800b372:	892b      	ldrh	r3, [r5, #8]
 800b374:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800b378:	4602      	mov	r2, r0
 800b37a:	9b04      	ldr	r3, [sp, #16]
 800b37c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800b380:	a90a      	add	r1, sp, #40	; 0x28
 800b382:	4650      	mov	r0, sl
 800b384:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800b388:	f001 ffe0 	bl	800d34c <uxr_serialize_HEARTBEAT_Payload>
 800b38c:	2200      	movs	r2, #0
 800b38e:	4611      	mov	r1, r2
 800b390:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b392:	4640      	mov	r0, r8
 800b394:	f000 fc2e 	bl	800bbf4 <uxr_stamp_session_header>
 800b398:	4650      	mov	r0, sl
 800b39a:	f7ff f9af 	bl	800a6fc <ucdr_buffer_length>
 800b39e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	a90c      	add	r1, sp, #48	; 0x30
 800b3a6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b3aa:	4444      	add	r4, r8
 800b3ac:	47a8      	blx	r5
 800b3ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800b3b2:	9903      	ldr	r1, [sp, #12]
 800b3b4:	455a      	cmp	r2, fp
 800b3b6:	f106 0601 	add.w	r6, r6, #1
 800b3ba:	eb73 0101 	sbcs.w	r1, r3, r1
 800b3be:	b2f0      	uxtb	r0, r6
 800b3c0:	db9c      	blt.n	800b2fc <listen_message_reliably+0x48>
 800b3c2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b3c6:	4283      	cmp	r3, r0
 800b3c8:	d89e      	bhi.n	800b308 <listen_message_reliably+0x54>
 800b3ca:	9a03      	ldr	r2, [sp, #12]
 800b3cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	bf08      	it	eq
 800b3d4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800b3d8:	d01e      	beq.n	800b418 <listen_message_reliably+0x164>
 800b3da:	ebab 0309 	sub.w	r3, fp, r9
 800b3de:	9905      	ldr	r1, [sp, #20]
 800b3e0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bf08      	it	eq
 800b3e8:	2301      	moveq	r3, #1
 800b3ea:	4299      	cmp	r1, r3
 800b3ec:	bfa8      	it	ge
 800b3ee:	4619      	movge	r1, r3
 800b3f0:	6894      	ldr	r4, [r2, #8]
 800b3f2:	6810      	ldr	r0, [r2, #0]
 800b3f4:	4689      	mov	r9, r1
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	aa08      	add	r2, sp, #32
 800b3fa:	a907      	add	r1, sp, #28
 800b3fc:	47a0      	blx	r4
 800b3fe:	b968      	cbnz	r0, 800b41c <listen_message_reliably+0x168>
 800b400:	9b05      	ldr	r3, [sp, #20]
 800b402:	eba3 0309 	sub.w	r3, r3, r9
 800b406:	2b00      	cmp	r3, #0
 800b408:	9305      	str	r3, [sp, #20]
 800b40a:	f73f af5c 	bgt.w	800b2c6 <listen_message_reliably+0x12>
 800b40e:	4604      	mov	r4, r0
 800b410:	4620      	mov	r0, r4
 800b412:	b01d      	add	sp, #116	; 0x74
 800b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	9b05      	ldr	r3, [sp, #20]
 800b41a:	e7e0      	b.n	800b3de <listen_message_reliably+0x12a>
 800b41c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b420:	4604      	mov	r4, r0
 800b422:	a80c      	add	r0, sp, #48	; 0x30
 800b424:	f7ff f93e 	bl	800a6a4 <ucdr_init_buffer>
 800b428:	2500      	movs	r5, #0
 800b42a:	f10d 031a 	add.w	r3, sp, #26
 800b42e:	aa06      	add	r2, sp, #24
 800b430:	a90c      	add	r1, sp, #48	; 0x30
 800b432:	4640      	mov	r0, r8
 800b434:	f88d 5018 	strb.w	r5, [sp, #24]
 800b438:	f000 fbf0 	bl	800bc1c <uxr_read_session_header>
 800b43c:	b918      	cbnz	r0, 800b446 <listen_message_reliably+0x192>
 800b43e:	4620      	mov	r0, r4
 800b440:	b01d      	add	sp, #116	; 0x74
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	4629      	mov	r1, r5
 800b448:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b44c:	f000 fc8a 	bl	800bd64 <uxr_stream_id_from_raw>
 800b450:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800b454:	2d01      	cmp	r5, #1
 800b456:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800b45a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800b45e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b462:	d04b      	beq.n	800b4fc <listen_message_reliably+0x248>
 800b464:	2d02      	cmp	r5, #2
 800b466:	d00f      	beq.n	800b488 <listen_message_reliably+0x1d4>
 800b468:	2d00      	cmp	r5, #0
 800b46a:	d1e8      	bne.n	800b43e <listen_message_reliably+0x18a>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 fc78 	bl	800bd64 <uxr_stream_id_from_raw>
 800b474:	a90c      	add	r1, sp, #48	; 0x30
 800b476:	4602      	mov	r2, r0
 800b478:	4640      	mov	r0, r8
 800b47a:	920a      	str	r2, [sp, #40]	; 0x28
 800b47c:	f7ff fd92 	bl	800afa4 <read_submessage_list>
 800b480:	4620      	mov	r0, r4
 800b482:	b01d      	add	sp, #116	; 0x74
 800b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	4631      	mov	r1, r6
 800b48a:	f108 0008 	add.w	r0, r8, #8
 800b48e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800b492:	f000 fd55 	bl	800bf40 <uxr_get_input_reliable_stream>
 800b496:	4607      	mov	r7, r0
 800b498:	b338      	cbz	r0, 800b4ea <listen_message_reliably+0x236>
 800b49a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b49c:	9203      	str	r2, [sp, #12]
 800b49e:	a80c      	add	r0, sp, #48	; 0x30
 800b4a0:	f7ff f930 	bl	800a704 <ucdr_buffer_remaining>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f10d 0019 	add.w	r0, sp, #25
 800b4aa:	9000      	str	r0, [sp, #0]
 800b4ac:	9a03      	ldr	r2, [sp, #12]
 800b4ae:	4651      	mov	r1, sl
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f006 ff4f 	bl	8012354 <uxr_receive_reliable_message>
 800b4b6:	b1c0      	cbz	r0, 800b4ea <listen_message_reliably+0x236>
 800b4b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b4bc:	b393      	cbz	r3, 800b524 <listen_message_reliably+0x270>
 800b4be:	ad14      	add	r5, sp, #80	; 0x50
 800b4c0:	f04f 0a02 	mov.w	sl, #2
 800b4c4:	e00a      	b.n	800b4dc <listen_message_reliably+0x228>
 800b4c6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800b4ca:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800b4ce:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800b4d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f7ff fd64 	bl	800afa4 <read_submessage_list>
 800b4dc:	2204      	movs	r2, #4
 800b4de:	4629      	mov	r1, r5
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f006 ffb7 	bl	8012454 <uxr_next_input_reliable_buffer_available>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d1ed      	bne.n	800b4c6 <listen_message_reliably+0x212>
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	f7ff fbd2 	bl	800ac98 <write_submessage_acknack.isra.0>
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	b01d      	add	sp, #116	; 0x74
 800b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	f108 0008 	add.w	r0, r8, #8
 800b502:	f000 fd13 	bl	800bf2c <uxr_get_input_best_effort_stream>
 800b506:	2800      	cmp	r0, #0
 800b508:	d099      	beq.n	800b43e <listen_message_reliably+0x18a>
 800b50a:	4651      	mov	r1, sl
 800b50c:	f006 fe8e 	bl	801222c <uxr_receive_best_effort_message>
 800b510:	2800      	cmp	r0, #0
 800b512:	d094      	beq.n	800b43e <listen_message_reliably+0x18a>
 800b514:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800b518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b51a:	a90c      	add	r1, sp, #48	; 0x30
 800b51c:	4640      	mov	r0, r8
 800b51e:	f7ff fd41 	bl	800afa4 <read_submessage_list>
 800b522:	e78c      	b.n	800b43e <listen_message_reliably+0x18a>
 800b524:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800b528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b52a:	a90c      	add	r1, sp, #48	; 0x30
 800b52c:	4640      	mov	r0, r8
 800b52e:	f7ff fd39 	bl	800afa4 <read_submessage_list>
 800b532:	e7c4      	b.n	800b4be <listen_message_reliably+0x20a>

0800b534 <uxr_run_session_timeout>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4604      	mov	r4, r0
 800b538:	460d      	mov	r5, r1
 800b53a:	f000 fd67 	bl	800c00c <uxr_millis>
 800b53e:	4606      	mov	r6, r0
 800b540:	4620      	mov	r0, r4
 800b542:	f7ff fc71 	bl	800ae28 <uxr_flash_output_streams>
 800b546:	4629      	mov	r1, r5
 800b548:	4620      	mov	r0, r4
 800b54a:	f7ff feb3 	bl	800b2b4 <listen_message_reliably>
 800b54e:	f000 fd5d 	bl	800c00c <uxr_millis>
 800b552:	1b83      	subs	r3, r0, r6
 800b554:	1ae9      	subs	r1, r5, r3
 800b556:	2900      	cmp	r1, #0
 800b558:	dcf6      	bgt.n	800b548 <uxr_run_session_timeout+0x14>
 800b55a:	f104 0008 	add.w	r0, r4, #8
 800b55e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b562:	f000 bcf7 	b.w	800bf54 <uxr_output_streams_confirmed>
 800b566:	bf00      	nop

0800b568 <uxr_run_session_until_data>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	4604      	mov	r4, r0
 800b56c:	460d      	mov	r5, r1
 800b56e:	f000 fd4d 	bl	800c00c <uxr_millis>
 800b572:	4606      	mov	r6, r0
 800b574:	4620      	mov	r0, r4
 800b576:	f7ff fc57 	bl	800ae28 <uxr_flash_output_streams>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800b580:	4629      	mov	r1, r5
 800b582:	e005      	b.n	800b590 <uxr_run_session_until_data+0x28>
 800b584:	f000 fd42 	bl	800c00c <uxr_millis>
 800b588:	1b83      	subs	r3, r0, r6
 800b58a:	1ae9      	subs	r1, r5, r3
 800b58c:	2900      	cmp	r1, #0
 800b58e:	dd07      	ble.n	800b5a0 <uxr_run_session_until_data+0x38>
 800b590:	4620      	mov	r0, r4
 800b592:	f7ff fe8f 	bl	800b2b4 <listen_message_reliably>
 800b596:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d0f2      	beq.n	800b584 <uxr_run_session_until_data+0x1c>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	bf00      	nop

0800b5a8 <uxr_run_session_until_confirm_delivery>:
 800b5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	460d      	mov	r5, r1
 800b5b0:	f000 fd2c 	bl	800c00c <uxr_millis>
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7ff fc36 	bl	800ae28 <uxr_flash_output_streams>
 800b5bc:	2d00      	cmp	r5, #0
 800b5be:	f106 0808 	add.w	r8, r6, #8
 800b5c2:	bfa8      	it	ge
 800b5c4:	462c      	movge	r4, r5
 800b5c6:	da07      	bge.n	800b5d8 <uxr_run_session_until_confirm_delivery+0x30>
 800b5c8:	e00e      	b.n	800b5e8 <uxr_run_session_until_confirm_delivery+0x40>
 800b5ca:	f7ff fe73 	bl	800b2b4 <listen_message_reliably>
 800b5ce:	f000 fd1d 	bl	800c00c <uxr_millis>
 800b5d2:	1bc3      	subs	r3, r0, r7
 800b5d4:	1aec      	subs	r4, r5, r3
 800b5d6:	d407      	bmi.n	800b5e8 <uxr_run_session_until_confirm_delivery+0x40>
 800b5d8:	4640      	mov	r0, r8
 800b5da:	f000 fcbb 	bl	800bf54 <uxr_output_streams_confirmed>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0f0      	beq.n	800b5ca <uxr_run_session_until_confirm_delivery+0x22>
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ee:	f000 bcb1 	b.w	800bf54 <uxr_output_streams_confirmed>
 800b5f2:	bf00      	nop

0800b5f4 <uxr_run_session_until_all_status>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	9c08      	ldr	r4, [sp, #32]
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	4691      	mov	r9, r2
 800b600:	461d      	mov	r5, r3
 800b602:	f7ff fc11 	bl	800ae28 <uxr_flash_output_streams>
 800b606:	b124      	cbz	r4, 800b612 <uxr_run_session_until_all_status+0x1e>
 800b608:	4622      	mov	r2, r4
 800b60a:	21ff      	movs	r1, #255	; 0xff
 800b60c:	4628      	mov	r0, r5
 800b60e:	f009 f973 	bl	80148f8 <memset>
 800b612:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800b616:	67f4      	str	r4, [r6, #124]	; 0x7c
 800b618:	f000 fcf8 	bl	800c00c <uxr_millis>
 800b61c:	3d01      	subs	r5, #1
 800b61e:	f1a9 0902 	sub.w	r9, r9, #2
 800b622:	4680      	mov	r8, r0
 800b624:	4639      	mov	r1, r7
 800b626:	4630      	mov	r0, r6
 800b628:	f7ff fe44 	bl	800b2b4 <listen_message_reliably>
 800b62c:	f000 fcee 	bl	800c00c <uxr_millis>
 800b630:	eba0 0008 	sub.w	r0, r0, r8
 800b634:	1a39      	subs	r1, r7, r0
 800b636:	b344      	cbz	r4, 800b68a <uxr_run_session_until_all_status+0x96>
 800b638:	4628      	mov	r0, r5
 800b63a:	46ac      	mov	ip, r5
 800b63c:	2301      	movs	r3, #1
 800b63e:	e002      	b.n	800b646 <uxr_run_session_until_all_status+0x52>
 800b640:	42a3      	cmp	r3, r4
 800b642:	d20d      	bcs.n	800b660 <uxr_run_session_until_all_status+0x6c>
 800b644:	3301      	adds	r3, #1
 800b646:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800b64a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800b64e:	d1f7      	bne.n	800b640 <uxr_run_session_until_all_status+0x4c>
 800b650:	42a3      	cmp	r3, r4
 800b652:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800b656:	d213      	bcs.n	800b680 <uxr_run_session_until_all_status+0x8c>
 800b658:	2a00      	cmp	r2, #0
 800b65a:	d0f3      	beq.n	800b644 <uxr_run_session_until_all_status+0x50>
 800b65c:	2900      	cmp	r1, #0
 800b65e:	dce2      	bgt.n	800b626 <uxr_run_session_until_all_status+0x32>
 800b660:	2300      	movs	r3, #0
 800b662:	67f3      	str	r3, [r6, #124]	; 0x7c
 800b664:	442c      	add	r4, r5
 800b666:	e001      	b.n	800b66c <uxr_run_session_until_all_status+0x78>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d812      	bhi.n	800b692 <uxr_run_session_until_all_status+0x9e>
 800b66c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b670:	4284      	cmp	r4, r0
 800b672:	d1f9      	bne.n	800b668 <uxr_run_session_until_all_status+0x74>
 800b674:	2b01      	cmp	r3, #1
 800b676:	bf8c      	ite	hi
 800b678:	2000      	movhi	r0, #0
 800b67a:	2001      	movls	r0, #1
 800b67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b680:	2900      	cmp	r1, #0
 800b682:	dded      	ble.n	800b660 <uxr_run_session_until_all_status+0x6c>
 800b684:	2a00      	cmp	r2, #0
 800b686:	d1ce      	bne.n	800b626 <uxr_run_session_until_all_status+0x32>
 800b688:	e7ea      	b.n	800b660 <uxr_run_session_until_all_status+0x6c>
 800b68a:	67f4      	str	r4, [r6, #124]	; 0x7c
 800b68c:	2001      	movs	r0, #1
 800b68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b692:	2000      	movs	r0, #0
 800b694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b698 <wait_session_status>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	4604      	mov	r4, r0
 800b69e:	b09d      	sub	sp, #116	; 0x74
 800b6a0:	20ff      	movs	r0, #255	; 0xff
 800b6a2:	7160      	strb	r0, [r4, #5]
 800b6a4:	9303      	str	r3, [sp, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 80b6 	beq.w	800b818 <wait_session_status+0x180>
 800b6ac:	468a      	mov	sl, r1
 800b6ae:	4691      	mov	r9, r2
 800b6b0:	f04f 0b00 	mov.w	fp, #0
 800b6b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b6b6:	464a      	mov	r2, r9
 800b6b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b6bc:	4651      	mov	r1, sl
 800b6be:	47a8      	blx	r5
 800b6c0:	f000 fca4 	bl	800c00c <uxr_millis>
 800b6c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	e009      	b.n	800b6e0 <wait_session_status+0x48>
 800b6cc:	f000 fc9e 	bl	800c00c <uxr_millis>
 800b6d0:	1b40      	subs	r0, r0, r5
 800b6d2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	dd40      	ble.n	800b75c <wait_session_status+0xc4>
 800b6da:	7960      	ldrb	r0, [r4, #5]
 800b6dc:	28ff      	cmp	r0, #255	; 0xff
 800b6de:	d145      	bne.n	800b76c <wait_session_status+0xd4>
 800b6e0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b6e2:	a908      	add	r1, sp, #32
 800b6e4:	6896      	ldr	r6, [r2, #8]
 800b6e6:	6810      	ldr	r0, [r2, #0]
 800b6e8:	aa09      	add	r2, sp, #36	; 0x24
 800b6ea:	47b0      	blx	r6
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d0ed      	beq.n	800b6cc <wait_session_status+0x34>
 800b6f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b6f4:	a80c      	add	r0, sp, #48	; 0x30
 800b6f6:	f7fe ffd5 	bl	800a6a4 <ucdr_init_buffer>
 800b6fa:	2600      	movs	r6, #0
 800b6fc:	f10d 031e 	add.w	r3, sp, #30
 800b700:	aa07      	add	r2, sp, #28
 800b702:	a90c      	add	r1, sp, #48	; 0x30
 800b704:	4620      	mov	r0, r4
 800b706:	f88d 601c 	strb.w	r6, [sp, #28]
 800b70a:	f000 fa87 	bl	800bc1c <uxr_read_session_header>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d0dc      	beq.n	800b6cc <wait_session_status+0x34>
 800b712:	4631      	mov	r1, r6
 800b714:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b718:	f000 fb24 	bl	800bd64 <uxr_stream_id_from_raw>
 800b71c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b720:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	2f01      	cmp	r7, #1
 800b728:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800b72c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b730:	d05c      	beq.n	800b7ec <wait_session_status+0x154>
 800b732:	2f02      	cmp	r7, #2
 800b734:	d020      	beq.n	800b778 <wait_session_status+0xe0>
 800b736:	2f00      	cmp	r7, #0
 800b738:	d1c8      	bne.n	800b6cc <wait_session_status+0x34>
 800b73a:	4639      	mov	r1, r7
 800b73c:	4638      	mov	r0, r7
 800b73e:	f000 fb11 	bl	800bd64 <uxr_stream_id_from_raw>
 800b742:	a90c      	add	r1, sp, #48	; 0x30
 800b744:	4602      	mov	r2, r0
 800b746:	900b      	str	r0, [sp, #44]	; 0x2c
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff fc2b 	bl	800afa4 <read_submessage_list>
 800b74e:	f000 fc5d 	bl	800c00c <uxr_millis>
 800b752:	1b40      	subs	r0, r0, r5
 800b754:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dcbe      	bgt.n	800b6da <wait_session_status+0x42>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	7960      	ldrb	r0, [r4, #5]
 800b760:	f10b 0b01 	add.w	fp, fp, #1
 800b764:	455b      	cmp	r3, fp
 800b766:	d001      	beq.n	800b76c <wait_session_status+0xd4>
 800b768:	28ff      	cmp	r0, #255	; 0xff
 800b76a:	d0a3      	beq.n	800b6b4 <wait_session_status+0x1c>
 800b76c:	38ff      	subs	r0, #255	; 0xff
 800b76e:	bf18      	it	ne
 800b770:	2001      	movne	r0, #1
 800b772:	b01d      	add	sp, #116	; 0x74
 800b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b778:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800b77c:	9304      	str	r3, [sp, #16]
 800b77e:	4631      	mov	r1, r6
 800b780:	f104 0008 	add.w	r0, r4, #8
 800b784:	f000 fbdc 	bl	800bf40 <uxr_get_input_reliable_stream>
 800b788:	4680      	mov	r8, r0
 800b78a:	b348      	cbz	r0, 800b7e0 <wait_session_status+0x148>
 800b78c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b78e:	9205      	str	r2, [sp, #20]
 800b790:	a80c      	add	r0, sp, #48	; 0x30
 800b792:	f7fe ffb7 	bl	800a704 <ucdr_buffer_remaining>
 800b796:	4603      	mov	r3, r0
 800b798:	f10d 001d 	add.w	r0, sp, #29
 800b79c:	9000      	str	r0, [sp, #0]
 800b79e:	9a05      	ldr	r2, [sp, #20]
 800b7a0:	9902      	ldr	r1, [sp, #8]
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	f006 fdd6 	bl	8012354 <uxr_receive_reliable_message>
 800b7a8:	b1d0      	cbz	r0, 800b7e0 <wait_session_status+0x148>
 800b7aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d03a      	beq.n	800b828 <wait_session_status+0x190>
 800b7b2:	9f04      	ldr	r7, [sp, #16]
 800b7b4:	e00a      	b.n	800b7cc <wait_session_status+0x134>
 800b7b6:	f04f 0302 	mov.w	r3, #2
 800b7ba:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800b7be:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800b7c2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800b7c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7c8:	f7ff fbec 	bl	800afa4 <read_submessage_list>
 800b7cc:	a914      	add	r1, sp, #80	; 0x50
 800b7ce:	2204      	movs	r2, #4
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	f006 fe3f 	bl	8012454 <uxr_next_input_reliable_buffer_available>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	a914      	add	r1, sp, #80	; 0x50
 800b7da:	4620      	mov	r0, r4
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1ea      	bne.n	800b7b6 <wait_session_status+0x11e>
 800b7e0:	9904      	ldr	r1, [sp, #16]
 800b7e2:	4632      	mov	r2, r6
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7ff fa57 	bl	800ac98 <write_submessage_acknack.isra.0>
 800b7ea:	e76f      	b.n	800b6cc <wait_session_status+0x34>
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	f104 0008 	add.w	r0, r4, #8
 800b7f2:	f000 fb9b 	bl	800bf2c <uxr_get_input_best_effort_stream>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	f43f af68 	beq.w	800b6cc <wait_session_status+0x34>
 800b7fc:	9902      	ldr	r1, [sp, #8]
 800b7fe:	f006 fd15 	bl	801222c <uxr_receive_best_effort_message>
 800b802:	2800      	cmp	r0, #0
 800b804:	f43f af62 	beq.w	800b6cc <wait_session_status+0x34>
 800b808:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800b80c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b80e:	a90c      	add	r1, sp, #48	; 0x30
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff fbc7 	bl	800afa4 <read_submessage_list>
 800b816:	e759      	b.n	800b6cc <wait_session_status+0x34>
 800b818:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b81a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b81e:	47a0      	blx	r4
 800b820:	2001      	movs	r0, #1
 800b822:	b01d      	add	sp, #116	; 0x74
 800b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b828:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800b82c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b82e:	a90c      	add	r1, sp, #48	; 0x30
 800b830:	4620      	mov	r0, r4
 800b832:	f7ff fbb7 	bl	800afa4 <read_submessage_list>
 800b836:	e7bc      	b.n	800b7b2 <wait_session_status+0x11a>

0800b838 <uxr_delete_session_retries>:
 800b838:	b530      	push	{r4, r5, lr}
 800b83a:	b08f      	sub	sp, #60	; 0x3c
 800b83c:	4604      	mov	r4, r0
 800b83e:	460d      	mov	r5, r1
 800b840:	f000 fa2e 	bl	800bca0 <uxr_session_header_offset>
 800b844:	2300      	movs	r3, #0
 800b846:	2210      	movs	r2, #16
 800b848:	9000      	str	r0, [sp, #0]
 800b84a:	a902      	add	r1, sp, #8
 800b84c:	a806      	add	r0, sp, #24
 800b84e:	f7fe ff17 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800b852:	a906      	add	r1, sp, #24
 800b854:	4620      	mov	r0, r4
 800b856:	f000 f973 	bl	800bb40 <uxr_buffer_delete_session>
 800b85a:	2200      	movs	r2, #0
 800b85c:	4611      	mov	r1, r2
 800b85e:	9b06      	ldr	r3, [sp, #24]
 800b860:	4620      	mov	r0, r4
 800b862:	f000 f9c7 	bl	800bbf4 <uxr_stamp_session_header>
 800b866:	a806      	add	r0, sp, #24
 800b868:	f7fe ff48 	bl	800a6fc <ucdr_buffer_length>
 800b86c:	462b      	mov	r3, r5
 800b86e:	4602      	mov	r2, r0
 800b870:	a902      	add	r1, sp, #8
 800b872:	4620      	mov	r0, r4
 800b874:	f7ff ff10 	bl	800b698 <wait_session_status>
 800b878:	b118      	cbz	r0, 800b882 <uxr_delete_session_retries+0x4a>
 800b87a:	7960      	ldrb	r0, [r4, #5]
 800b87c:	fab0 f080 	clz	r0, r0
 800b880:	0940      	lsrs	r0, r0, #5
 800b882:	b00f      	add	sp, #60	; 0x3c
 800b884:	bd30      	pop	{r4, r5, pc}
 800b886:	bf00      	nop

0800b888 <uxr_create_session>:
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	f100 0b08 	add.w	fp, r0, #8
 800b890:	b0ab      	sub	sp, #172	; 0xac
 800b892:	4604      	mov	r4, r0
 800b894:	4658      	mov	r0, fp
 800b896:	f000 fa99 	bl	800bdcc <uxr_reset_stream_storage>
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fa00 	bl	800bca0 <uxr_session_header_offset>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	9000      	str	r0, [sp, #0]
 800b8a4:	221c      	movs	r2, #28
 800b8a6:	a90b      	add	r1, sp, #44	; 0x2c
 800b8a8:	a812      	add	r0, sp, #72	; 0x48
 800b8aa:	f7fe fee9 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800b8ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b8b0:	8a1a      	ldrh	r2, [r3, #16]
 800b8b2:	3a04      	subs	r2, #4
 800b8b4:	b292      	uxth	r2, r2
 800b8b6:	a912      	add	r1, sp, #72	; 0x48
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 f917 	bl	800baec <uxr_buffer_create_session>
 800b8be:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f000 f983 	bl	800bbcc <uxr_stamp_create_session_header>
 800b8c6:	a812      	add	r0, sp, #72	; 0x48
 800b8c8:	f7fe ff18 	bl	800a6fc <ucdr_buffer_length>
 800b8cc:	23ff      	movs	r3, #255	; 0xff
 800b8ce:	7163      	strb	r3, [r4, #5]
 800b8d0:	230a      	movs	r3, #10
 800b8d2:	46da      	mov	sl, fp
 800b8d4:	9303      	str	r3, [sp, #12]
 800b8d6:	4683      	mov	fp, r0
 800b8d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b8da:	465a      	mov	r2, fp
 800b8dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b8e0:	a90b      	add	r1, sp, #44	; 0x2c
 800b8e2:	47a8      	blx	r5
 800b8e4:	f000 fb92 	bl	800c00c <uxr_millis>
 800b8e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	e009      	b.n	800b904 <uxr_create_session+0x7c>
 800b8f0:	f000 fb8c 	bl	800c00c <uxr_millis>
 800b8f4:	1b40      	subs	r0, r0, r5
 800b8f6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	7962      	ldrb	r2, [r4, #5]
 800b8fe:	dd38      	ble.n	800b972 <uxr_create_session+0xea>
 800b900:	2aff      	cmp	r2, #255	; 0xff
 800b902:	d13c      	bne.n	800b97e <uxr_create_session+0xf6>
 800b904:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b906:	a907      	add	r1, sp, #28
 800b908:	6896      	ldr	r6, [r2, #8]
 800b90a:	6810      	ldr	r0, [r2, #0]
 800b90c:	aa08      	add	r2, sp, #32
 800b90e:	47b0      	blx	r6
 800b910:	2800      	cmp	r0, #0
 800b912:	d0ed      	beq.n	800b8f0 <uxr_create_session+0x68>
 800b914:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b918:	a81a      	add	r0, sp, #104	; 0x68
 800b91a:	f7fe fec3 	bl	800a6a4 <ucdr_init_buffer>
 800b91e:	2600      	movs	r6, #0
 800b920:	f10d 031a 	add.w	r3, sp, #26
 800b924:	aa06      	add	r2, sp, #24
 800b926:	a91a      	add	r1, sp, #104	; 0x68
 800b928:	4620      	mov	r0, r4
 800b92a:	f88d 6018 	strb.w	r6, [sp, #24]
 800b92e:	f000 f975 	bl	800bc1c <uxr_read_session_header>
 800b932:	2800      	cmp	r0, #0
 800b934:	d0dc      	beq.n	800b8f0 <uxr_create_session+0x68>
 800b936:	4631      	mov	r1, r6
 800b938:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b93c:	f000 fa12 	bl	800bd64 <uxr_stream_id_from_raw>
 800b940:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b944:	2e01      	cmp	r6, #1
 800b946:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800b94a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800b94e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800b952:	d053      	beq.n	800b9fc <uxr_create_session+0x174>
 800b954:	2e02      	cmp	r6, #2
 800b956:	d018      	beq.n	800b98a <uxr_create_session+0x102>
 800b958:	2e00      	cmp	r6, #0
 800b95a:	d1c9      	bne.n	800b8f0 <uxr_create_session+0x68>
 800b95c:	4631      	mov	r1, r6
 800b95e:	4630      	mov	r0, r6
 800b960:	f000 fa00 	bl	800bd64 <uxr_stream_id_from_raw>
 800b964:	a91a      	add	r1, sp, #104	; 0x68
 800b966:	4602      	mov	r2, r0
 800b968:	900a      	str	r0, [sp, #40]	; 0x28
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7ff fb1a 	bl	800afa4 <read_submessage_list>
 800b970:	e7be      	b.n	800b8f0 <uxr_create_session+0x68>
 800b972:	9b03      	ldr	r3, [sp, #12]
 800b974:	3b01      	subs	r3, #1
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	d001      	beq.n	800b97e <uxr_create_session+0xf6>
 800b97a:	2aff      	cmp	r2, #255	; 0xff
 800b97c:	d0ac      	beq.n	800b8d8 <uxr_create_session+0x50>
 800b97e:	2a00      	cmp	r2, #0
 800b980:	d051      	beq.n	800ba26 <uxr_create_session+0x19e>
 800b982:	2000      	movs	r0, #0
 800b984:	b02b      	add	sp, #172	; 0xac
 800b986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b98e:	9304      	str	r3, [sp, #16]
 800b990:	4639      	mov	r1, r7
 800b992:	4650      	mov	r0, sl
 800b994:	f000 fad4 	bl	800bf40 <uxr_get_input_reliable_stream>
 800b998:	4680      	mov	r8, r0
 800b99a:	b348      	cbz	r0, 800b9f0 <uxr_create_session+0x168>
 800b99c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b99e:	9205      	str	r2, [sp, #20]
 800b9a0:	a81a      	add	r0, sp, #104	; 0x68
 800b9a2:	f7fe feaf 	bl	800a704 <ucdr_buffer_remaining>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	f10d 0019 	add.w	r0, sp, #25
 800b9ac:	9000      	str	r0, [sp, #0]
 800b9ae:	9a05      	ldr	r2, [sp, #20]
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f006 fcce 	bl	8012354 <uxr_receive_reliable_message>
 800b9b8:	b1d0      	cbz	r0, 800b9f0 <uxr_create_session+0x168>
 800b9ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d038      	beq.n	800ba34 <uxr_create_session+0x1ac>
 800b9c2:	9e04      	ldr	r6, [sp, #16]
 800b9c4:	e00a      	b.n	800b9dc <uxr_create_session+0x154>
 800b9c6:	f04f 0302 	mov.w	r3, #2
 800b9ca:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800b9ce:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800b9d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9d8:	f7ff fae4 	bl	800afa4 <read_submessage_list>
 800b9dc:	a922      	add	r1, sp, #136	; 0x88
 800b9de:	2204      	movs	r2, #4
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	f006 fd37 	bl	8012454 <uxr_next_input_reliable_buffer_available>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	a922      	add	r1, sp, #136	; 0x88
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1ea      	bne.n	800b9c6 <uxr_create_session+0x13e>
 800b9f0:	9904      	ldr	r1, [sp, #16]
 800b9f2:	463a      	mov	r2, r7
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f7ff f94f 	bl	800ac98 <write_submessage_acknack.isra.0>
 800b9fa:	e779      	b.n	800b8f0 <uxr_create_session+0x68>
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	4650      	mov	r0, sl
 800ba00:	f000 fa94 	bl	800bf2c <uxr_get_input_best_effort_stream>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	f43f af73 	beq.w	800b8f0 <uxr_create_session+0x68>
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f006 fc0e 	bl	801222c <uxr_receive_best_effort_message>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	f43f af6d 	beq.w	800b8f0 <uxr_create_session+0x68>
 800ba16:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800ba1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba1c:	a91a      	add	r1, sp, #104	; 0x68
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f7ff fac0 	bl	800afa4 <read_submessage_list>
 800ba24:	e764      	b.n	800b8f0 <uxr_create_session+0x68>
 800ba26:	4650      	mov	r0, sl
 800ba28:	f000 f9d0 	bl	800bdcc <uxr_reset_stream_storage>
 800ba2c:	2001      	movs	r0, #1
 800ba2e:	b02b      	add	sp, #172	; 0xac
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800ba38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba3a:	a91a      	add	r1, sp, #104	; 0x68
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7ff fab1 	bl	800afa4 <read_submessage_list>
 800ba42:	e7be      	b.n	800b9c2 <uxr_create_session+0x13a>

0800ba44 <uxr_prepare_stream_to_write_submessage>:
 800ba44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	4682      	mov	sl, r0
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4615      	mov	r5, r2
 800ba50:	461e      	mov	r6, r3
 800ba52:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800ba56:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800ba5a:	9101      	str	r1, [sp, #4]
 800ba5c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ba60:	f000 face 	bl	800c000 <uxr_submessage_padding>
 800ba64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba68:	f105 0904 	add.w	r9, r5, #4
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	4481      	add	r9, r0
 800ba70:	d01d      	beq.n	800baae <uxr_prepare_stream_to_write_submessage+0x6a>
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d116      	bne.n	800baa4 <uxr_prepare_stream_to_write_submessage+0x60>
 800ba76:	4621      	mov	r1, r4
 800ba78:	f10a 0008 	add.w	r0, sl, #8
 800ba7c:	f000 fa4c 	bl	800bf18 <uxr_get_output_reliable_stream>
 800ba80:	4604      	mov	r4, r0
 800ba82:	b158      	cbz	r0, 800ba9c <uxr_prepare_stream_to_write_submessage+0x58>
 800ba84:	4649      	mov	r1, r9
 800ba86:	4632      	mov	r2, r6
 800ba88:	f006 fea0 	bl	80127cc <uxr_prepare_reliable_buffer_to_write>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	b12c      	cbz	r4, 800ba9c <uxr_prepare_stream_to_write_submessage+0x58>
 800ba90:	4643      	mov	r3, r8
 800ba92:	b2aa      	uxth	r2, r5
 800ba94:	4639      	mov	r1, r7
 800ba96:	4630      	mov	r0, r6
 800ba98:	f000 fa72 	bl	800bf80 <uxr_buffer_submessage_header>
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	b002      	add	sp, #8
 800baa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa4:	2400      	movs	r4, #0
 800baa6:	4620      	mov	r0, r4
 800baa8:	b002      	add	sp, #8
 800baaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baae:	4621      	mov	r1, r4
 800bab0:	f10a 0008 	add.w	r0, sl, #8
 800bab4:	f000 fa28 	bl	800bf08 <uxr_get_output_best_effort_stream>
 800bab8:	4604      	mov	r4, r0
 800baba:	2800      	cmp	r0, #0
 800babc:	d0ee      	beq.n	800ba9c <uxr_prepare_stream_to_write_submessage+0x58>
 800babe:	4649      	mov	r1, r9
 800bac0:	4632      	mov	r2, r6
 800bac2:	f006 fdb3 	bl	801262c <uxr_prepare_best_effort_buffer_to_write>
 800bac6:	4604      	mov	r4, r0
 800bac8:	e7e1      	b.n	800ba8e <uxr_prepare_stream_to_write_submessage+0x4a>
 800baca:	bf00      	nop

0800bacc <uxr_init_session_info>:
 800bacc:	0e13      	lsrs	r3, r2, #24
 800bace:	7043      	strb	r3, [r0, #1]
 800bad0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800bad4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800bad8:	7001      	strb	r1, [r0, #0]
 800bada:	70c3      	strb	r3, [r0, #3]
 800badc:	2109      	movs	r1, #9
 800bade:	23ff      	movs	r3, #255	; 0xff
 800bae0:	f880 c002 	strb.w	ip, [r0, #2]
 800bae4:	7102      	strb	r2, [r0, #4]
 800bae6:	80c1      	strh	r1, [r0, #6]
 800bae8:	7143      	strb	r3, [r0, #5]
 800baea:	4770      	bx	lr

0800baec <uxr_buffer_create_session>:
 800baec:	b530      	push	{r4, r5, lr}
 800baee:	b089      	sub	sp, #36	; 0x24
 800baf0:	2300      	movs	r3, #0
 800baf2:	4d12      	ldr	r5, [pc, #72]	; (800bb3c <uxr_buffer_create_session+0x50>)
 800baf4:	9307      	str	r3, [sp, #28]
 800baf6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800bafa:	2201      	movs	r2, #1
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	80c2      	strh	r2, [r0, #6]
 800bb00:	f88d 2004 	strb.w	r2, [sp, #4]
 800bb04:	682a      	ldr	r2, [r5, #0]
 800bb06:	9200      	str	r2, [sp, #0]
 800bb08:	88aa      	ldrh	r2, [r5, #4]
 800bb0a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bb0e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800bb12:	9202      	str	r2, [sp, #8]
 800bb14:	460c      	mov	r4, r1
 800bb16:	7802      	ldrb	r2, [r0, #0]
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	f88d 200c 	strb.w	r2, [sp, #12]
 800bb20:	4620      	mov	r0, r4
 800bb22:	2210      	movs	r2, #16
 800bb24:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800bb28:	9306      	str	r3, [sp, #24]
 800bb2a:	f000 fa29 	bl	800bf80 <uxr_buffer_submessage_header>
 800bb2e:	4669      	mov	r1, sp
 800bb30:	4620      	mov	r0, r4
 800bb32:	f001 fa6d 	bl	800d010 <uxr_serialize_CREATE_CLIENT_Payload>
 800bb36:	b009      	add	sp, #36	; 0x24
 800bb38:	bd30      	pop	{r4, r5, pc}
 800bb3a:	bf00      	nop
 800bb3c:	080159c4 	.word	0x080159c4

0800bb40 <uxr_buffer_delete_session>:
 800bb40:	b510      	push	{r4, lr}
 800bb42:	4b0c      	ldr	r3, [pc, #48]	; (800bb74 <uxr_buffer_delete_session+0x34>)
 800bb44:	b082      	sub	sp, #8
 800bb46:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800bb4a:	f8ad c006 	strh.w	ip, [sp, #6]
 800bb4e:	460c      	mov	r4, r1
 800bb50:	2202      	movs	r2, #2
 800bb52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb56:	80c2      	strh	r2, [r0, #6]
 800bb58:	f8ad 3004 	strh.w	r3, [sp, #4]
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2103      	movs	r1, #3
 800bb62:	4620      	mov	r0, r4
 800bb64:	f000 fa0c 	bl	800bf80 <uxr_buffer_submessage_header>
 800bb68:	a901      	add	r1, sp, #4
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f001 faf6 	bl	800d15c <uxr_serialize_DELETE_Payload>
 800bb70:	b002      	add	sp, #8
 800bb72:	bd10      	pop	{r4, pc}
 800bb74:	080159c4 	.word	0x080159c4

0800bb78 <uxr_read_create_session_status>:
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	b088      	sub	sp, #32
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	4608      	mov	r0, r1
 800bb80:	a901      	add	r1, sp, #4
 800bb82:	f001 fafb 	bl	800d17c <uxr_deserialize_STATUS_AGENT_Payload>
 800bb86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bb8a:	7163      	strb	r3, [r4, #5]
 800bb8c:	b008      	add	sp, #32
 800bb8e:	bd10      	pop	{r4, pc}

0800bb90 <uxr_read_delete_session_status>:
 800bb90:	b510      	push	{r4, lr}
 800bb92:	4604      	mov	r4, r0
 800bb94:	b084      	sub	sp, #16
 800bb96:	4608      	mov	r0, r1
 800bb98:	a902      	add	r1, sp, #8
 800bb9a:	f001 fb1f 	bl	800d1dc <uxr_deserialize_STATUS_Payload>
 800bb9e:	88e3      	ldrh	r3, [r4, #6]
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d001      	beq.n	800bba8 <uxr_read_delete_session_status+0x18>
 800bba4:	b004      	add	sp, #16
 800bba6:	bd10      	pop	{r4, pc}
 800bba8:	f10d 000a 	add.w	r0, sp, #10
 800bbac:	f7fe fffa 	bl	800aba4 <uxr_object_id_from_raw>
 800bbb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800bbb4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800bbb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	bf04      	itt	eq
 800bbc2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800bbc6:	7163      	strbeq	r3, [r4, #5]
 800bbc8:	b004      	add	sp, #16
 800bbca:	bd10      	pop	{r4, pc}

0800bbcc <uxr_stamp_create_session_header>:
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	2208      	movs	r2, #8
 800bbd0:	b08a      	sub	sp, #40	; 0x28
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	eb0d 0002 	add.w	r0, sp, r2
 800bbd8:	f7fe fd64 	bl	800a6a4 <ucdr_init_buffer>
 800bbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe0:	9400      	str	r4, [sp, #0]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800bbea:	a802      	add	r0, sp, #8
 800bbec:	f000 fbc2 	bl	800c374 <uxr_serialize_message_header>
 800bbf0:	b00a      	add	sp, #40	; 0x28
 800bbf2:	bd10      	pop	{r4, pc}

0800bbf4 <uxr_stamp_session_header>:
 800bbf4:	b530      	push	{r4, r5, lr}
 800bbf6:	b08d      	sub	sp, #52	; 0x34
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	9203      	str	r2, [sp, #12]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	a804      	add	r0, sp, #16
 800bc02:	2208      	movs	r2, #8
 800bc04:	f7fe fd4e 	bl	800a6a4 <ucdr_init_buffer>
 800bc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc0c:	9b03      	ldr	r3, [sp, #12]
 800bc0e:	9400      	str	r4, [sp, #0]
 800bc10:	462a      	mov	r2, r5
 800bc12:	a804      	add	r0, sp, #16
 800bc14:	f000 fbae 	bl	800c374 <uxr_serialize_message_header>
 800bc18:	b00d      	add	sp, #52	; 0x34
 800bc1a:	bd30      	pop	{r4, r5, pc}

0800bc1c <uxr_read_session_header>:
 800bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc20:	4607      	mov	r7, r0
 800bc22:	b084      	sub	sp, #16
 800bc24:	4608      	mov	r0, r1
 800bc26:	460c      	mov	r4, r1
 800bc28:	4615      	mov	r5, r2
 800bc2a:	461e      	mov	r6, r3
 800bc2c:	f7fe fd6a 	bl	800a704 <ucdr_buffer_remaining>
 800bc30:	2808      	cmp	r0, #8
 800bc32:	d803      	bhi.n	800bc3c <uxr_read_session_header+0x20>
 800bc34:	2000      	movs	r0, #0
 800bc36:	b004      	add	sp, #16
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3c:	f10d 080c 	add.w	r8, sp, #12
 800bc40:	4633      	mov	r3, r6
 800bc42:	462a      	mov	r2, r5
 800bc44:	f8cd 8000 	str.w	r8, [sp]
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f10d 010b 	add.w	r1, sp, #11
 800bc4e:	f000 fbaf 	bl	800c3b0 <uxr_deserialize_message_header>
 800bc52:	783a      	ldrb	r2, [r7, #0]
 800bc54:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d1eb      	bne.n	800bc34 <uxr_read_session_header+0x18>
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	d41c      	bmi.n	800bc9a <uxr_read_session_header+0x7e>
 800bc60:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800bc64:	787b      	ldrb	r3, [r7, #1]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d003      	beq.n	800bc72 <uxr_read_session_header+0x56>
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	f080 0001 	eor.w	r0, r0, #1
 800bc70:	e7e1      	b.n	800bc36 <uxr_read_session_header+0x1a>
 800bc72:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800bc76:	78bb      	ldrb	r3, [r7, #2]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	f107 0102 	add.w	r1, r7, #2
 800bc7e:	d1f4      	bne.n	800bc6a <uxr_read_session_header+0x4e>
 800bc80:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800bc84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d1ee      	bne.n	800bc6a <uxr_read_session_header+0x4e>
 800bc8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800bc90:	784b      	ldrb	r3, [r1, #1]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d1e9      	bne.n	800bc6a <uxr_read_session_header+0x4e>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e7e8      	b.n	800bc6c <uxr_read_session_header+0x50>
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	e7cb      	b.n	800bc36 <uxr_read_session_header+0x1a>
 800bc9e:	bf00      	nop

0800bca0 <uxr_session_header_offset>:
 800bca0:	f990 3000 	ldrsb.w	r3, [r0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	bfac      	ite	ge
 800bca8:	2008      	movge	r0, #8
 800bcaa:	2004      	movlt	r0, #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop

0800bcb0 <uxr_init_base_object_request>:
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	88c3      	ldrh	r3, [r0, #6]
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800bcba:	9101      	str	r1, [sp, #4]
 800bcbc:	f1a3 010a 	sub.w	r1, r3, #10
 800bcc0:	b289      	uxth	r1, r1
 800bcc2:	42a1      	cmp	r1, r4
 800bcc4:	d80e      	bhi.n	800bce4 <uxr_init_base_object_request+0x34>
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	b29c      	uxth	r4, r3
 800bcca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	80c4      	strh	r4, [r0, #6]
 800bcd2:	9801      	ldr	r0, [sp, #4]
 800bcd4:	7011      	strb	r1, [r2, #0]
 800bcd6:	7053      	strb	r3, [r2, #1]
 800bcd8:	1c91      	adds	r1, r2, #2
 800bcda:	f7fe ff77 	bl	800abcc <uxr_object_id_to_raw>
 800bcde:	4620      	mov	r0, r4
 800bce0:	b002      	add	sp, #8
 800bce2:	bd10      	pop	{r4, pc}
 800bce4:	230a      	movs	r3, #10
 800bce6:	2100      	movs	r1, #0
 800bce8:	461c      	mov	r4, r3
 800bcea:	e7f1      	b.n	800bcd0 <uxr_init_base_object_request+0x20>

0800bcec <uxr_parse_base_object_request>:
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	4604      	mov	r4, r0
 800bcf0:	3002      	adds	r0, #2
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	4616      	mov	r6, r2
 800bcf6:	f7fe ff55 	bl	800aba4 <uxr_object_id_from_raw>
 800bcfa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800bcfe:	8028      	strh	r0, [r5, #0]
 800bd00:	806b      	strh	r3, [r5, #2]
 800bd02:	7822      	ldrb	r2, [r4, #0]
 800bd04:	7863      	ldrb	r3, [r4, #1]
 800bd06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bd0a:	8033      	strh	r3, [r6, #0]
 800bd0c:	bd70      	pop	{r4, r5, r6, pc}
 800bd0e:	bf00      	nop

0800bd10 <uxr_stream_id>:
 800bd10:	2901      	cmp	r1, #1
 800bd12:	b082      	sub	sp, #8
 800bd14:	d01d      	beq.n	800bd52 <uxr_stream_id+0x42>
 800bd16:	2902      	cmp	r1, #2
 800bd18:	f04f 0c00 	mov.w	ip, #0
 800bd1c:	d01e      	beq.n	800bd5c <uxr_stream_id+0x4c>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f36c 0307 	bfi	r3, ip, #0, #8
 800bd24:	f360 230f 	bfi	r3, r0, #8, #8
 800bd28:	f361 4317 	bfi	r3, r1, #16, #8
 800bd2c:	f362 631f 	bfi	r3, r2, #24, #8
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	2000      	movs	r0, #0
 800bd34:	f362 0007 	bfi	r0, r2, #0, #8
 800bd38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bd3c:	f362 200f 	bfi	r0, r2, #8, #8
 800bd40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bd44:	f362 4017 	bfi	r0, r2, #16, #8
 800bd48:	0e1b      	lsrs	r3, r3, #24
 800bd4a:	f363 601f 	bfi	r0, r3, #24, #8
 800bd4e:	b002      	add	sp, #8
 800bd50:	4770      	bx	lr
 800bd52:	f100 0c01 	add.w	ip, r0, #1
 800bd56:	fa5f fc8c 	uxtb.w	ip, ip
 800bd5a:	e7e0      	b.n	800bd1e <uxr_stream_id+0xe>
 800bd5c:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800bd60:	e7dd      	b.n	800bd1e <uxr_stream_id+0xe>
 800bd62:	bf00      	nop

0800bd64 <uxr_stream_id_from_raw>:
 800bd64:	b082      	sub	sp, #8
 800bd66:	b130      	cbz	r0, 800bd76 <uxr_stream_id_from_raw+0x12>
 800bd68:	0603      	lsls	r3, r0, #24
 800bd6a:	d420      	bmi.n	800bdae <uxr_stream_id_from_raw+0x4a>
 800bd6c:	1e42      	subs	r2, r0, #1
 800bd6e:	b2d2      	uxtb	r2, r2
 800bd70:	f04f 0c01 	mov.w	ip, #1
 800bd74:	e001      	b.n	800bd7a <uxr_stream_id_from_raw+0x16>
 800bd76:	4684      	mov	ip, r0
 800bd78:	4602      	mov	r2, r0
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f360 0307 	bfi	r3, r0, #0, #8
 800bd80:	f362 230f 	bfi	r3, r2, #8, #8
 800bd84:	f36c 4317 	bfi	r3, ip, #16, #8
 800bd88:	f361 631f 	bfi	r3, r1, #24, #8
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	2000      	movs	r0, #0
 800bd90:	f362 0007 	bfi	r0, r2, #0, #8
 800bd94:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bd98:	f362 200f 	bfi	r0, r2, #8, #8
 800bd9c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bda0:	f362 4017 	bfi	r0, r2, #16, #8
 800bda4:	0e1b      	lsrs	r3, r3, #24
 800bda6:	f363 601f 	bfi	r0, r3, #24, #8
 800bdaa:	b002      	add	sp, #8
 800bdac:	4770      	bx	lr
 800bdae:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800bdb2:	f04f 0c02 	mov.w	ip, #2
 800bdb6:	e7e0      	b.n	800bd7a <uxr_stream_id_from_raw+0x16>

0800bdb8 <uxr_init_stream_storage>:
 800bdb8:	2300      	movs	r3, #0
 800bdba:	7403      	strb	r3, [r0, #16]
 800bdbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800bdc0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800bdc4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop

0800bdcc <uxr_reset_stream_storage>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	7c03      	ldrb	r3, [r0, #16]
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	b153      	cbz	r3, 800bdea <uxr_reset_stream_storage+0x1e>
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f006 fc21 	bl	8012620 <uxr_reset_output_best_effort_stream>
 800bdde:	7c23      	ldrb	r3, [r4, #16]
 800bde0:	3501      	adds	r5, #1
 800bde2:	42ab      	cmp	r3, r5
 800bde4:	f106 0610 	add.w	r6, r6, #16
 800bde8:	d8f6      	bhi.n	800bdd8 <uxr_reset_stream_storage+0xc>
 800bdea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bdee:	b163      	cbz	r3, 800be0a <uxr_reset_stream_storage+0x3e>
 800bdf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdf4:	2500      	movs	r5, #0
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f006 fa14 	bl	8012224 <uxr_reset_input_best_effort_stream>
 800bdfc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be00:	3501      	adds	r5, #1
 800be02:	42ab      	cmp	r3, r5
 800be04:	f106 0602 	add.w	r6, r6, #2
 800be08:	d8f5      	bhi.n	800bdf6 <uxr_reset_stream_storage+0x2a>
 800be0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800be0e:	b163      	cbz	r3, 800be2a <uxr_reset_stream_storage+0x5e>
 800be10:	f104 0618 	add.w	r6, r4, #24
 800be14:	2500      	movs	r5, #0
 800be16:	4630      	mov	r0, r6
 800be18:	f006 fcae 	bl	8012778 <uxr_reset_output_reliable_stream>
 800be1c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800be20:	3501      	adds	r5, #1
 800be22:	42ab      	cmp	r3, r5
 800be24:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800be28:	d8f5      	bhi.n	800be16 <uxr_reset_stream_storage+0x4a>
 800be2a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800be2e:	b163      	cbz	r3, 800be4a <uxr_reset_stream_storage+0x7e>
 800be30:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800be34:	2500      	movs	r5, #0
 800be36:	4630      	mov	r0, r6
 800be38:	f006 fa68 	bl	801230c <uxr_reset_input_reliable_stream>
 800be3c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800be40:	3501      	adds	r5, #1
 800be42:	42ab      	cmp	r3, r5
 800be44:	f106 0618 	add.w	r6, r6, #24
 800be48:	d8f5      	bhi.n	800be36 <uxr_reset_stream_storage+0x6a>
 800be4a:	bd70      	pop	{r4, r5, r6, pc}

0800be4c <uxr_add_output_best_effort_buffer>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	7c04      	ldrb	r4, [r0, #16]
 800be50:	f104 0c01 	add.w	ip, r4, #1
 800be54:	b082      	sub	sp, #8
 800be56:	f880 c010 	strb.w	ip, [r0, #16]
 800be5a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800be5e:	f006 fbd5 	bl	801260c <uxr_init_output_best_effort_stream>
 800be62:	2201      	movs	r2, #1
 800be64:	4611      	mov	r1, r2
 800be66:	4620      	mov	r0, r4
 800be68:	b002      	add	sp, #8
 800be6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be6e:	f7ff bf4f 	b.w	800bd10 <uxr_stream_id>
 800be72:	bf00      	nop

0800be74 <uxr_add_output_reliable_buffer>:
 800be74:	b510      	push	{r4, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	4684      	mov	ip, r0
 800be7a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800be7e:	9000      	str	r0, [sp, #0]
 800be80:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800be84:	2028      	movs	r0, #40	; 0x28
 800be86:	fb00 c004 	mla	r0, r0, r4, ip
 800be8a:	f104 0e01 	add.w	lr, r4, #1
 800be8e:	3018      	adds	r0, #24
 800be90:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800be94:	f006 fc38 	bl	8012708 <uxr_init_output_reliable_stream>
 800be98:	2201      	movs	r2, #1
 800be9a:	2102      	movs	r1, #2
 800be9c:	4620      	mov	r0, r4
 800be9e:	b004      	add	sp, #16
 800bea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea4:	f7ff bf34 	b.w	800bd10 <uxr_stream_id>

0800bea8 <uxr_add_input_best_effort_buffer>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800beae:	4603      	mov	r3, r0
 800beb0:	1c62      	adds	r2, r4, #1
 800beb2:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800beb6:	b082      	sub	sp, #8
 800beb8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800bebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bec0:	f006 f9ac 	bl	801221c <uxr_init_input_best_effort_stream>
 800bec4:	2200      	movs	r2, #0
 800bec6:	2101      	movs	r1, #1
 800bec8:	4620      	mov	r0, r4
 800beca:	b002      	add	sp, #8
 800becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed0:	f7ff bf1e 	b.w	800bd10 <uxr_stream_id>

0800bed4 <uxr_add_input_reliable_buffer>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	4684      	mov	ip, r0
 800beda:	9806      	ldr	r0, [sp, #24]
 800bedc:	9000      	str	r0, [sp, #0]
 800bede:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800bee2:	2018      	movs	r0, #24
 800bee4:	fb00 c004 	mla	r0, r0, r4, ip
 800bee8:	f104 0e01 	add.w	lr, r4, #1
 800beec:	3048      	adds	r0, #72	; 0x48
 800beee:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800bef2:	f006 f9df 	bl	80122b4 <uxr_init_input_reliable_stream>
 800bef6:	2200      	movs	r2, #0
 800bef8:	2102      	movs	r1, #2
 800befa:	4620      	mov	r0, r4
 800befc:	b004      	add	sp, #16
 800befe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf02:	f7ff bf05 	b.w	800bd10 <uxr_stream_id>
 800bf06:	bf00      	nop

0800bf08 <uxr_get_output_best_effort_stream>:
 800bf08:	7c03      	ldrb	r3, [r0, #16]
 800bf0a:	428b      	cmp	r3, r1
 800bf0c:	bf8c      	ite	hi
 800bf0e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800bf12:	2000      	movls	r0, #0
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop

0800bf18 <uxr_get_output_reliable_stream>:
 800bf18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bf1c:	428b      	cmp	r3, r1
 800bf1e:	bf83      	ittte	hi
 800bf20:	2328      	movhi	r3, #40	; 0x28
 800bf22:	fb03 0001 	mlahi	r0, r3, r1, r0
 800bf26:	3018      	addhi	r0, #24
 800bf28:	2000      	movls	r0, #0
 800bf2a:	4770      	bx	lr

0800bf2c <uxr_get_input_best_effort_stream>:
 800bf2c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800bf30:	428b      	cmp	r3, r1
 800bf32:	bf86      	itte	hi
 800bf34:	3121      	addhi	r1, #33	; 0x21
 800bf36:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800bf3a:	2000      	movls	r0, #0
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop

0800bf40 <uxr_get_input_reliable_stream>:
 800bf40:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800bf44:	428b      	cmp	r3, r1
 800bf46:	bf83      	ittte	hi
 800bf48:	2318      	movhi	r3, #24
 800bf4a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800bf4e:	3048      	addhi	r0, #72	; 0x48
 800bf50:	2000      	movls	r0, #0
 800bf52:	4770      	bx	lr

0800bf54 <uxr_output_streams_confirmed>:
 800bf54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bf58:	b183      	cbz	r3, 800bf7c <uxr_output_streams_confirmed+0x28>
 800bf5a:	b570      	push	{r4, r5, r6, lr}
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	f100 0518 	add.w	r5, r0, #24
 800bf62:	2400      	movs	r4, #0
 800bf64:	e001      	b.n	800bf6a <uxr_output_streams_confirmed+0x16>
 800bf66:	3528      	adds	r5, #40	; 0x28
 800bf68:	b138      	cbz	r0, 800bf7a <uxr_output_streams_confirmed+0x26>
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f006 fe74 	bl	8012c58 <uxr_is_output_up_to_date>
 800bf70:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800bf74:	3401      	adds	r4, #1
 800bf76:	42a3      	cmp	r3, r4
 800bf78:	d8f5      	bhi.n	800bf66 <uxr_output_streams_confirmed+0x12>
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	2001      	movs	r0, #1
 800bf7e:	4770      	bx	lr

0800bf80 <uxr_buffer_submessage_header>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	4604      	mov	r4, r0
 800bf84:	460e      	mov	r6, r1
 800bf86:	2104      	movs	r1, #4
 800bf88:	4615      	mov	r5, r2
 800bf8a:	461f      	mov	r7, r3
 800bf8c:	f7fe fba4 	bl	800a6d8 <ucdr_align_to>
 800bf90:	2301      	movs	r3, #1
 800bf92:	ea47 0203 	orr.w	r2, r7, r3
 800bf96:	4631      	mov	r1, r6
 800bf98:	7523      	strb	r3, [r4, #20]
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	462b      	mov	r3, r5
 800bf9e:	f000 fa27 	bl	800c3f0 <uxr_serialize_submessage_header>
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7fe fbae 	bl	800a704 <ucdr_buffer_remaining>
 800bfa8:	42a8      	cmp	r0, r5
 800bfaa:	bf34      	ite	cc
 800bfac:	2000      	movcc	r0, #0
 800bfae:	2001      	movcs	r0, #1
 800bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb2:	bf00      	nop

0800bfb4 <uxr_read_submessage_header>:
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	4604      	mov	r4, r0
 800bfba:	460d      	mov	r5, r1
 800bfbc:	2104      	movs	r1, #4
 800bfbe:	4616      	mov	r6, r2
 800bfc0:	4698      	mov	r8, r3
 800bfc2:	f7fe fb89 	bl	800a6d8 <ucdr_align_to>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f7fe fb9c 	bl	800a704 <ucdr_buffer_remaining>
 800bfcc:	2803      	cmp	r0, #3
 800bfce:	bf8c      	ite	hi
 800bfd0:	2701      	movhi	r7, #1
 800bfd2:	2700      	movls	r7, #0
 800bfd4:	d802      	bhi.n	800bfdc <uxr_read_submessage_header+0x28>
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfdc:	4633      	mov	r3, r6
 800bfde:	4642      	mov	r2, r8
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	f000 fa18 	bl	800c418 <uxr_deserialize_submessage_header>
 800bfe8:	f898 3000 	ldrb.w	r3, [r8]
 800bfec:	f003 0201 	and.w	r2, r3, #1
 800bff0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bff4:	f888 3000 	strb.w	r3, [r8]
 800bff8:	7522      	strb	r2, [r4, #20]
 800bffa:	4638      	mov	r0, r7
 800bffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c000 <uxr_submessage_padding>:
 800c000:	f010 0003 	ands.w	r0, r0, #3
 800c004:	bf18      	it	ne
 800c006:	f1c0 0004 	rsbne	r0, r0, #4
 800c00a:	4770      	bx	lr

0800c00c <uxr_millis>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	4669      	mov	r1, sp
 800c012:	2001      	movs	r0, #1
 800c014:	f7f5 f9e0 	bl	80013d8 <clock_gettime>
 800c018:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800c01c:	4906      	ldr	r1, [pc, #24]	; (800c038 <uxr_millis+0x2c>)
 800c01e:	fba0 0301 	umull	r0, r3, r0, r1
 800c022:	1900      	adds	r0, r0, r4
 800c024:	fb01 3102 	mla	r1, r1, r2, r3
 800c028:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800c02c:	4a03      	ldr	r2, [pc, #12]	; (800c03c <uxr_millis+0x30>)
 800c02e:	2300      	movs	r3, #0
 800c030:	f7f4 f93e 	bl	80002b0 <__aeabi_ldivmod>
 800c034:	b004      	add	sp, #16
 800c036:	bd10      	pop	{r4, pc}
 800c038:	3b9aca00 	.word	0x3b9aca00
 800c03c:	000f4240 	.word	0x000f4240

0800c040 <uxr_nanos>:
 800c040:	b510      	push	{r4, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	4669      	mov	r1, sp
 800c046:	2001      	movs	r0, #1
 800c048:	f7f5 f9c6 	bl	80013d8 <clock_gettime>
 800c04c:	4a06      	ldr	r2, [pc, #24]	; (800c068 <uxr_nanos+0x28>)
 800c04e:	9800      	ldr	r0, [sp, #0]
 800c050:	9902      	ldr	r1, [sp, #8]
 800c052:	9c01      	ldr	r4, [sp, #4]
 800c054:	fba0 0302 	umull	r0, r3, r0, r2
 800c058:	1840      	adds	r0, r0, r1
 800c05a:	fb02 3304 	mla	r3, r2, r4, r3
 800c05e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800c062:	b004      	add	sp, #16
 800c064:	bd10      	pop	{r4, pc}
 800c066:	bf00      	nop
 800c068:	3b9aca00 	.word	0x3b9aca00

0800c06c <on_full_output_buffer_fragmented>:
 800c06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	b08a      	sub	sp, #40	; 0x28
 800c074:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800c078:	4606      	mov	r6, r0
 800c07a:	f104 0008 	add.w	r0, r4, #8
 800c07e:	f7ff ff4b 	bl	800bf18 <uxr_get_output_reliable_stream>
 800c082:	4605      	mov	r5, r0
 800c084:	f006 fdf2 	bl	8012c6c <get_available_free_slots>
 800c088:	b968      	cbnz	r0, 800c0a6 <on_full_output_buffer_fragmented+0x3a>
 800c08a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800c08e:	4620      	mov	r0, r4
 800c090:	4798      	blx	r3
 800c092:	b918      	cbnz	r0, 800c09c <on_full_output_buffer_fragmented+0x30>
 800c094:	2001      	movs	r0, #1
 800c096:	b00a      	add	sp, #40	; 0x28
 800c098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c09c:	4628      	mov	r0, r5
 800c09e:	f006 fde5 	bl	8012c6c <get_available_free_slots>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0f6      	beq.n	800c094 <on_full_output_buffer_fragmented+0x28>
 800c0a6:	8929      	ldrh	r1, [r5, #8]
 800c0a8:	89eb      	ldrh	r3, [r5, #14]
 800c0aa:	7b28      	ldrb	r0, [r5, #12]
 800c0ac:	686a      	ldr	r2, [r5, #4]
 800c0ae:	fbb2 f8f1 	udiv	r8, r2, r1
 800c0b2:	fbb3 f2f1 	udiv	r2, r3, r1
 800c0b6:	fb01 3112 	mls	r1, r1, r2, r3
 800c0ba:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800c0be:	b289      	uxth	r1, r1
 800c0c0:	fb08 f101 	mul.w	r1, r8, r1
 800c0c4:	30fc      	adds	r0, #252	; 0xfc
 800c0c6:	f1a8 0804 	sub.w	r8, r8, #4
 800c0ca:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800c0ce:	4440      	add	r0, r8
 800c0d0:	b287      	uxth	r7, r0
 800c0d2:	1bdb      	subs	r3, r3, r7
 800c0d4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	3104      	adds	r1, #4
 800c0dc:	4419      	add	r1, r3
 800c0de:	4642      	mov	r2, r8
 800c0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	a802      	add	r0, sp, #8
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f7fe fac9 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800c0ee:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800c0f2:	f102 0308 	add.w	r3, r2, #8
 800c0f6:	4543      	cmp	r3, r8
 800c0f8:	d928      	bls.n	800c14c <on_full_output_buffer_fragmented+0xe0>
 800c0fa:	463a      	mov	r2, r7
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	210d      	movs	r1, #13
 800c100:	a802      	add	r0, sp, #8
 800c102:	f7ff ff3d 	bl	800bf80 <uxr_buffer_submessage_header>
 800c106:	8929      	ldrh	r1, [r5, #8]
 800c108:	89eb      	ldrh	r3, [r5, #14]
 800c10a:	fbb3 f2f1 	udiv	r2, r3, r1
 800c10e:	fb01 3312 	mls	r3, r1, r2, r3
 800c112:	b29b      	uxth	r3, r3
 800c114:	686a      	ldr	r2, [r5, #4]
 800c116:	fbb2 f2f1 	udiv	r2, r2, r1
 800c11a:	fb02 f303 	mul.w	r3, r2, r3
 800c11e:	682a      	ldr	r2, [r5, #0]
 800c120:	f842 8003 	str.w	r8, [r2, r3]
 800c124:	89e8      	ldrh	r0, [r5, #14]
 800c126:	2101      	movs	r1, #1
 800c128:	f006 fef0 	bl	8012f0c <uxr_seq_num_add>
 800c12c:	9904      	ldr	r1, [sp, #16]
 800c12e:	9a03      	ldr	r2, [sp, #12]
 800c130:	81e8      	strh	r0, [r5, #14]
 800c132:	1a52      	subs	r2, r2, r1
 800c134:	4630      	mov	r0, r6
 800c136:	f7fe fab5 	bl	800a6a4 <ucdr_init_buffer>
 800c13a:	4630      	mov	r0, r6
 800c13c:	490f      	ldr	r1, [pc, #60]	; (800c17c <on_full_output_buffer_fragmented+0x110>)
 800c13e:	4622      	mov	r2, r4
 800c140:	f7fe fa84 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 800c144:	2000      	movs	r0, #0
 800c146:	b00a      	add	sp, #40	; 0x28
 800c148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c14c:	b292      	uxth	r2, r2
 800c14e:	2302      	movs	r3, #2
 800c150:	210d      	movs	r1, #13
 800c152:	a802      	add	r0, sp, #8
 800c154:	f7ff ff14 	bl	800bf80 <uxr_buffer_submessage_header>
 800c158:	8928      	ldrh	r0, [r5, #8]
 800c15a:	89eb      	ldrh	r3, [r5, #14]
 800c15c:	fbb3 f1f0 	udiv	r1, r3, r0
 800c160:	fb00 3311 	mls	r3, r0, r1, r3
 800c164:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800c168:	6869      	ldr	r1, [r5, #4]
 800c16a:	fbb1 f1f0 	udiv	r1, r1, r0
 800c16e:	b29b      	uxth	r3, r3
 800c170:	fb01 f303 	mul.w	r3, r1, r3
 800c174:	6829      	ldr	r1, [r5, #0]
 800c176:	3208      	adds	r2, #8
 800c178:	50ca      	str	r2, [r1, r3]
 800c17a:	e7d3      	b.n	800c124 <on_full_output_buffer_fragmented+0xb8>
 800c17c:	0800c06d 	.word	0x0800c06d

0800c180 <uxr_prepare_output_stream>:
 800c180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c182:	b087      	sub	sp, #28
 800c184:	2707      	movs	r7, #7
 800c186:	9202      	str	r2, [sp, #8]
 800c188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c18a:	9103      	str	r1, [sp, #12]
 800c18c:	2500      	movs	r5, #0
 800c18e:	3204      	adds	r2, #4
 800c190:	e9cd 7500 	strd	r7, r5, [sp]
 800c194:	461c      	mov	r4, r3
 800c196:	4606      	mov	r6, r0
 800c198:	f7ff fc54 	bl	800ba44 <uxr_prepare_stream_to_write_submessage>
 800c19c:	f080 0201 	eor.w	r2, r0, #1
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	75a2      	strb	r2, [r4, #22]
 800c1a4:	b112      	cbz	r2, 800c1ac <uxr_prepare_output_stream+0x2c>
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	b007      	add	sp, #28
 800c1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ac:	aa05      	add	r2, sp, #20
 800c1ae:	9902      	ldr	r1, [sp, #8]
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7ff fd7d 	bl	800bcb0 <uxr_init_base_object_request>
 800c1b6:	a905      	add	r1, sp, #20
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f001 f88c 	bl	800d2d8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800c1c0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800c1c4:	69a6      	ldr	r6, [r4, #24]
 800c1c6:	69e7      	ldr	r7, [r4, #28]
 800c1c8:	1a52      	subs	r2, r2, r1
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f7fe fa6a 	bl	800a6a4 <ucdr_init_buffer>
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	463a      	mov	r2, r7
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	f7fe fa39 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 800c1da:	4628      	mov	r0, r5
 800c1dc:	b007      	add	sp, #28
 800c1de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c1e0 <uxr_prepare_output_stream_fragmented>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	b091      	sub	sp, #68	; 0x44
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	9105      	str	r1, [sp, #20]
 800c1ea:	3008      	adds	r0, #8
 800c1ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c1f0:	461e      	mov	r6, r3
 800c1f2:	9204      	str	r2, [sp, #16]
 800c1f4:	f7ff fe90 	bl	800bf18 <uxr_get_output_reliable_stream>
 800c1f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	f000 8091 	beq.w	800c324 <uxr_prepare_output_stream_fragmented+0x144>
 800c202:	4604      	mov	r4, r0
 800c204:	2800      	cmp	r0, #0
 800c206:	f000 808d 	beq.w	800c324 <uxr_prepare_output_stream_fragmented+0x144>
 800c20a:	f006 fd2f 	bl	8012c6c <get_available_free_slots>
 800c20e:	2800      	cmp	r0, #0
 800c210:	f000 8083 	beq.w	800c31a <uxr_prepare_output_stream_fragmented+0x13a>
 800c214:	8922      	ldrh	r2, [r4, #8]
 800c216:	89e7      	ldrh	r7, [r4, #14]
 800c218:	fbb7 f9f2 	udiv	r9, r7, r2
 800c21c:	fb02 7919 	mls	r9, r2, r9, r7
 800c220:	fa1f f989 	uxth.w	r9, r9
 800c224:	6863      	ldr	r3, [r4, #4]
 800c226:	fbb3 f2f2 	udiv	r2, r3, r2
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	9203      	str	r2, [sp, #12]
 800c22e:	fb02 f909 	mul.w	r9, r2, r9
 800c232:	f109 0904 	add.w	r9, r9, #4
 800c236:	4499      	add	r9, r3
 800c238:	7b23      	ldrb	r3, [r4, #12]
 800c23a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c23e:	4543      	cmp	r3, r8
 800c240:	f1a2 0b04 	sub.w	fp, r2, #4
 800c244:	d37a      	bcc.n	800c33c <uxr_prepare_output_stream_fragmented+0x15c>
 800c246:	f1ab 0a04 	sub.w	sl, fp, #4
 800c24a:	ebaa 0a03 	sub.w	sl, sl, r3
 800c24e:	465a      	mov	r2, fp
 800c250:	2300      	movs	r3, #0
 800c252:	4649      	mov	r1, r9
 800c254:	a808      	add	r0, sp, #32
 800c256:	f8cd 8000 	str.w	r8, [sp]
 800c25a:	f7fe fa11 	bl	800a680 <ucdr_init_buffer_origin_offset>
 800c25e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c260:	fa1f fa8a 	uxth.w	sl, sl
 800c264:	4652      	mov	r2, sl
 800c266:	f103 0a08 	add.w	sl, r3, #8
 800c26a:	45da      	cmp	sl, fp
 800c26c:	bf34      	ite	cc
 800c26e:	2302      	movcc	r3, #2
 800c270:	2300      	movcs	r3, #0
 800c272:	210d      	movs	r1, #13
 800c274:	a808      	add	r0, sp, #32
 800c276:	f7ff fe83 	bl	800bf80 <uxr_buffer_submessage_header>
 800c27a:	8921      	ldrh	r1, [r4, #8]
 800c27c:	fbb7 f2f1 	udiv	r2, r7, r1
 800c280:	fb01 7212 	mls	r2, r1, r2, r7
 800c284:	b292      	uxth	r2, r2
 800c286:	6863      	ldr	r3, [r4, #4]
 800c288:	fbb3 f3f1 	udiv	r3, r3, r1
 800c28c:	fb02 f303 	mul.w	r3, r2, r3
 800c290:	6822      	ldr	r2, [r4, #0]
 800c292:	4638      	mov	r0, r7
 800c294:	f842 b003 	str.w	fp, [r2, r3]
 800c298:	2101      	movs	r1, #1
 800c29a:	f006 fe37 	bl	8012f0c <uxr_seq_num_add>
 800c29e:	9b03      	ldr	r3, [sp, #12]
 800c2a0:	f108 0104 	add.w	r1, r8, #4
 800c2a4:	f1a3 0208 	sub.w	r2, r3, #8
 800c2a8:	eba2 0208 	sub.w	r2, r2, r8
 800c2ac:	4449      	add	r1, r9
 800c2ae:	4607      	mov	r7, r0
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f7fe f9f7 	bl	800a6a4 <ucdr_init_buffer>
 800c2b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c2b8:	81e7      	strh	r7, [r4, #14]
 800c2ba:	1d1a      	adds	r2, r3, #4
 800c2bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c2c0:	bf28      	it	cs
 800c2c2:	2200      	movcs	r2, #0
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	b292      	uxth	r2, r2
 800c2c8:	2107      	movs	r1, #7
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	f7ff fe58 	bl	800bf80 <uxr_buffer_submessage_header>
 800c2d0:	9904      	ldr	r1, [sp, #16]
 800c2d2:	aa07      	add	r2, sp, #28
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7ff fceb 	bl	800bcb0 <uxr_init_base_object_request>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	b318      	cbz	r0, 800c326 <uxr_prepare_output_stream_fragmented+0x146>
 800c2de:	a907      	add	r1, sp, #28
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f000 fff9 	bl	800d2d8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800c2e6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	1a52      	subs	r2, r2, r1
 800c2ee:	f7fe f9d9 	bl	800a6a4 <ucdr_init_buffer>
 800c2f2:	9b05      	ldr	r3, [sp, #20]
 800c2f4:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800c2f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2fa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800c2fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c300:	491b      	ldr	r1, [pc, #108]	; (800c370 <uxr_prepare_output_stream_fragmented+0x190>)
 800c302:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800c306:	4630      	mov	r0, r6
 800c308:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800c30c:	462a      	mov	r2, r5
 800c30e:	f7fe f99d 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 800c312:	4620      	mov	r0, r4
 800c314:	b011      	add	sp, #68	; 0x44
 800c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c31c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c31e:	4628      	mov	r0, r5
 800c320:	4798      	blx	r3
 800c322:	b920      	cbnz	r0, 800c32e <uxr_prepare_output_stream_fragmented+0x14e>
 800c324:	2400      	movs	r4, #0
 800c326:	4620      	mov	r0, r4
 800c328:	b011      	add	sp, #68	; 0x44
 800c32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32e:	4620      	mov	r0, r4
 800c330:	f006 fc9c 	bl	8012c6c <get_available_free_slots>
 800c334:	2800      	cmp	r0, #0
 800c336:	f47f af6d 	bne.w	800c214 <uxr_prepare_output_stream_fragmented+0x34>
 800c33a:	e7f3      	b.n	800c324 <uxr_prepare_output_stream_fragmented+0x144>
 800c33c:	4638      	mov	r0, r7
 800c33e:	2101      	movs	r1, #1
 800c340:	f006 fde4 	bl	8012f0c <uxr_seq_num_add>
 800c344:	8921      	ldrh	r1, [r4, #8]
 800c346:	fbb0 f2f1 	udiv	r2, r0, r1
 800c34a:	fb01 0912 	mls	r9, r1, r2, r0
 800c34e:	fa1f f289 	uxth.w	r2, r9
 800c352:	6863      	ldr	r3, [r4, #4]
 800c354:	fbb3 f9f1 	udiv	r9, r3, r1
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	fb02 f909 	mul.w	r9, r2, r9
 800c35e:	f109 0904 	add.w	r9, r9, #4
 800c362:	4499      	add	r9, r3
 800c364:	4607      	mov	r7, r0
 800c366:	7b23      	ldrb	r3, [r4, #12]
 800c368:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c36c:	e76b      	b.n	800c246 <uxr_prepare_output_stream_fragmented+0x66>
 800c36e:	bf00      	nop
 800c370:	0800c06d 	.word	0x0800c06d

0800c374 <uxr_serialize_message_header>:
 800c374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c376:	b083      	sub	sp, #12
 800c378:	4616      	mov	r6, r2
 800c37a:	4604      	mov	r4, r0
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	460d      	mov	r5, r1
 800c380:	9f08      	ldr	r7, [sp, #32]
 800c382:	f7fd f8bb 	bl	80094fc <ucdr_serialize_uint8_t>
 800c386:	4631      	mov	r1, r6
 800c388:	4620      	mov	r0, r4
 800c38a:	f7fd f8b7 	bl	80094fc <ucdr_serialize_uint8_t>
 800c38e:	9a01      	ldr	r2, [sp, #4]
 800c390:	2101      	movs	r1, #1
 800c392:	4620      	mov	r0, r4
 800c394:	f7fd f95e 	bl	8009654 <ucdr_serialize_endian_uint16_t>
 800c398:	062b      	lsls	r3, r5, #24
 800c39a:	d501      	bpl.n	800c3a0 <uxr_serialize_message_header+0x2c>
 800c39c:	b003      	add	sp, #12
 800c39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a0:	2204      	movs	r2, #4
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	b003      	add	sp, #12
 800c3a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c3ac:	f005 bd3c 	b.w	8011e28 <ucdr_serialize_array_uint8_t>

0800c3b0 <uxr_deserialize_message_header>:
 800c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	4616      	mov	r6, r2
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	460d      	mov	r5, r1
 800c3bc:	9f08      	ldr	r7, [sp, #32]
 800c3be:	f7fd f8b3 	bl	8009528 <ucdr_deserialize_uint8_t>
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7fd f8af 	bl	8009528 <ucdr_deserialize_uint8_t>
 800c3ca:	9a01      	ldr	r2, [sp, #4]
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f7fd fa34 	bl	800983c <ucdr_deserialize_endian_uint16_t>
 800c3d4:	f995 3000 	ldrsb.w	r3, [r5]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	da01      	bge.n	800c3e0 <uxr_deserialize_message_header+0x30>
 800c3dc:	b003      	add	sp, #12
 800c3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	b003      	add	sp, #12
 800c3e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c3ec:	f005 bd80 	b.w	8011ef0 <ucdr_deserialize_array_uint8_t>

0800c3f0 <uxr_serialize_submessage_header>:
 800c3f0:	b530      	push	{r4, r5, lr}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	4615      	mov	r5, r2
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	f7fd f87f 	bl	80094fc <ucdr_serialize_uint8_t>
 800c3fe:	4629      	mov	r1, r5
 800c400:	4620      	mov	r0, r4
 800c402:	f7fd f87b 	bl	80094fc <ucdr_serialize_uint8_t>
 800c406:	9a01      	ldr	r2, [sp, #4]
 800c408:	2101      	movs	r1, #1
 800c40a:	4620      	mov	r0, r4
 800c40c:	b003      	add	sp, #12
 800c40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c412:	f7fd b91f 	b.w	8009654 <ucdr_serialize_endian_uint16_t>
 800c416:	bf00      	nop

0800c418 <uxr_deserialize_submessage_header>:
 800c418:	b530      	push	{r4, r5, lr}
 800c41a:	b083      	sub	sp, #12
 800c41c:	4615      	mov	r5, r2
 800c41e:	4604      	mov	r4, r0
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	f7fd f881 	bl	8009528 <ucdr_deserialize_uint8_t>
 800c426:	4629      	mov	r1, r5
 800c428:	4620      	mov	r0, r4
 800c42a:	f7fd f87d 	bl	8009528 <ucdr_deserialize_uint8_t>
 800c42e:	9a01      	ldr	r2, [sp, #4]
 800c430:	2101      	movs	r1, #1
 800c432:	4620      	mov	r0, r4
 800c434:	b003      	add	sp, #12
 800c436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c43a:	f7fd b9ff 	b.w	800983c <ucdr_deserialize_endian_uint16_t>
 800c43e:	bf00      	nop

0800c440 <uxr_serialize_CLIENT_Representation>:
 800c440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c444:	2204      	movs	r2, #4
 800c446:	460e      	mov	r6, r1
 800c448:	4605      	mov	r5, r0
 800c44a:	f005 fced 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c44e:	2202      	movs	r2, #2
 800c450:	4607      	mov	r7, r0
 800c452:	1d31      	adds	r1, r6, #4
 800c454:	4628      	mov	r0, r5
 800c456:	f005 fce7 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c45a:	4038      	ands	r0, r7
 800c45c:	2202      	movs	r2, #2
 800c45e:	1db1      	adds	r1, r6, #6
 800c460:	b2c7      	uxtb	r7, r0
 800c462:	4628      	mov	r0, r5
 800c464:	f005 fce0 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c468:	2204      	movs	r2, #4
 800c46a:	4007      	ands	r7, r0
 800c46c:	f106 0108 	add.w	r1, r6, #8
 800c470:	4628      	mov	r0, r5
 800c472:	f005 fcd9 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c476:	7b31      	ldrb	r1, [r6, #12]
 800c478:	4007      	ands	r7, r0
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7fd f83e 	bl	80094fc <ucdr_serialize_uint8_t>
 800c480:	7b71      	ldrb	r1, [r6, #13]
 800c482:	4007      	ands	r7, r0
 800c484:	4628      	mov	r0, r5
 800c486:	f7fd f80b 	bl	80094a0 <ucdr_serialize_bool>
 800c48a:	7b73      	ldrb	r3, [r6, #13]
 800c48c:	ea07 0800 	and.w	r8, r7, r0
 800c490:	b93b      	cbnz	r3, 800c4a2 <uxr_serialize_CLIENT_Representation+0x62>
 800c492:	8bb1      	ldrh	r1, [r6, #28]
 800c494:	4628      	mov	r0, r5
 800c496:	f7fd f85d 	bl	8009554 <ucdr_serialize_uint16_t>
 800c49a:	ea08 0000 	and.w	r0, r8, r0
 800c49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a2:	6931      	ldr	r1, [r6, #16]
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f7fd fa3f 	bl	8009928 <ucdr_serialize_uint32_t>
 800c4aa:	6933      	ldr	r3, [r6, #16]
 800c4ac:	b1e3      	cbz	r3, 800c4e8 <uxr_serialize_CLIENT_Representation+0xa8>
 800c4ae:	b1c0      	cbz	r0, 800c4e2 <uxr_serialize_CLIENT_Representation+0xa2>
 800c4b0:	4637      	mov	r7, r6
 800c4b2:	f04f 0900 	mov.w	r9, #0
 800c4b6:	e001      	b.n	800c4bc <uxr_serialize_CLIENT_Representation+0x7c>
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	b194      	cbz	r4, 800c4e2 <uxr_serialize_CLIENT_Representation+0xa2>
 800c4bc:	6979      	ldr	r1, [r7, #20]
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f005 fdd2 	bl	8012068 <ucdr_serialize_string>
 800c4c4:	69b9      	ldr	r1, [r7, #24]
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f005 fdcd 	bl	8012068 <ucdr_serialize_string>
 800c4ce:	6933      	ldr	r3, [r6, #16]
 800c4d0:	f109 0901 	add.w	r9, r9, #1
 800c4d4:	4004      	ands	r4, r0
 800c4d6:	4599      	cmp	r9, r3
 800c4d8:	b2e4      	uxtb	r4, r4
 800c4da:	d3ed      	bcc.n	800c4b8 <uxr_serialize_CLIENT_Representation+0x78>
 800c4dc:	ea08 0804 	and.w	r8, r8, r4
 800c4e0:	e7d7      	b.n	800c492 <uxr_serialize_CLIENT_Representation+0x52>
 800c4e2:	f04f 0800 	mov.w	r8, #0
 800c4e6:	e7d4      	b.n	800c492 <uxr_serialize_CLIENT_Representation+0x52>
 800c4e8:	ea08 0800 	and.w	r8, r8, r0
 800c4ec:	e7d1      	b.n	800c492 <uxr_serialize_CLIENT_Representation+0x52>
 800c4ee:	bf00      	nop

0800c4f0 <uxr_deserialize_CLIENT_Representation>:
 800c4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	2204      	movs	r2, #4
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	f005 fcf9 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800c4fe:	2202      	movs	r2, #2
 800c500:	4607      	mov	r7, r0
 800c502:	1d21      	adds	r1, r4, #4
 800c504:	4628      	mov	r0, r5
 800c506:	f005 fcf3 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800c50a:	4038      	ands	r0, r7
 800c50c:	2202      	movs	r2, #2
 800c50e:	1da1      	adds	r1, r4, #6
 800c510:	b2c6      	uxtb	r6, r0
 800c512:	4628      	mov	r0, r5
 800c514:	f005 fcec 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800c518:	2204      	movs	r2, #4
 800c51a:	4006      	ands	r6, r0
 800c51c:	f104 0108 	add.w	r1, r4, #8
 800c520:	4628      	mov	r0, r5
 800c522:	f005 fce5 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800c526:	f104 010c 	add.w	r1, r4, #12
 800c52a:	4006      	ands	r6, r0
 800c52c:	4628      	mov	r0, r5
 800c52e:	f7fc fffb 	bl	8009528 <ucdr_deserialize_uint8_t>
 800c532:	f104 010d 	add.w	r1, r4, #13
 800c536:	ea06 0700 	and.w	r7, r6, r0
 800c53a:	4628      	mov	r0, r5
 800c53c:	f7fc ffc6 	bl	80094cc <ucdr_deserialize_bool>
 800c540:	7b63      	ldrb	r3, [r4, #13]
 800c542:	4007      	ands	r7, r0
 800c544:	b93b      	cbnz	r3, 800c556 <uxr_deserialize_CLIENT_Representation+0x66>
 800c546:	f104 011c 	add.w	r1, r4, #28
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7fd f902 	bl	8009754 <ucdr_deserialize_uint16_t>
 800c550:	4038      	ands	r0, r7
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	f104 0110 	add.w	r1, r4, #16
 800c55a:	4628      	mov	r0, r5
 800c55c:	f7fd fb14 	bl	8009b88 <ucdr_deserialize_uint32_t>
 800c560:	6923      	ldr	r3, [r4, #16]
 800c562:	2b01      	cmp	r3, #1
 800c564:	d903      	bls.n	800c56e <uxr_deserialize_CLIENT_Representation+0x7e>
 800c566:	2301      	movs	r3, #1
 800c568:	75ab      	strb	r3, [r5, #22]
 800c56a:	2700      	movs	r7, #0
 800c56c:	e7eb      	b.n	800c546 <uxr_deserialize_CLIENT_Representation+0x56>
 800c56e:	b30b      	cbz	r3, 800c5b4 <uxr_deserialize_CLIENT_Representation+0xc4>
 800c570:	2800      	cmp	r0, #0
 800c572:	d0fa      	beq.n	800c56a <uxr_deserialize_CLIENT_Representation+0x7a>
 800c574:	46a0      	mov	r8, r4
 800c576:	f04f 0900 	mov.w	r9, #0
 800c57a:	e001      	b.n	800c580 <uxr_deserialize_CLIENT_Representation+0x90>
 800c57c:	2e00      	cmp	r6, #0
 800c57e:	d0f4      	beq.n	800c56a <uxr_deserialize_CLIENT_Representation+0x7a>
 800c580:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c584:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c588:	4628      	mov	r0, r5
 800c58a:	f005 fd7d 	bl	8012088 <ucdr_deserialize_string>
 800c58e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c592:	4606      	mov	r6, r0
 800c594:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c598:	4628      	mov	r0, r5
 800c59a:	f005 fd75 	bl	8012088 <ucdr_deserialize_string>
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	f109 0901 	add.w	r9, r9, #1
 800c5a4:	4006      	ands	r6, r0
 800c5a6:	4599      	cmp	r9, r3
 800c5a8:	f108 0808 	add.w	r8, r8, #8
 800c5ac:	b2f6      	uxtb	r6, r6
 800c5ae:	d3e5      	bcc.n	800c57c <uxr_deserialize_CLIENT_Representation+0x8c>
 800c5b0:	4037      	ands	r7, r6
 800c5b2:	e7c8      	b.n	800c546 <uxr_deserialize_CLIENT_Representation+0x56>
 800c5b4:	4007      	ands	r7, r0
 800c5b6:	e7c6      	b.n	800c546 <uxr_deserialize_CLIENT_Representation+0x56>

0800c5b8 <uxr_serialize_AGENT_Representation>:
 800c5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5bc:	2204      	movs	r2, #4
 800c5be:	460f      	mov	r7, r1
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	f005 fc31 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	1d39      	adds	r1, r7, #4
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f005 fc2b 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c5d2:	4020      	ands	r0, r4
 800c5d4:	2202      	movs	r2, #2
 800c5d6:	1db9      	adds	r1, r7, #6
 800c5d8:	b2c4      	uxtb	r4, r0
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f005 fc24 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c5e0:	7a39      	ldrb	r1, [r7, #8]
 800c5e2:	4004      	ands	r4, r0
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	f7fc ff5b 	bl	80094a0 <ucdr_serialize_bool>
 800c5ea:	7a3b      	ldrb	r3, [r7, #8]
 800c5ec:	ea00 0804 	and.w	r8, r0, r4
 800c5f0:	b913      	cbnz	r3, 800c5f8 <uxr_serialize_AGENT_Representation+0x40>
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f8:	68f9      	ldr	r1, [r7, #12]
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f7fd f994 	bl	8009928 <ucdr_serialize_uint32_t>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	b303      	cbz	r3, 800c646 <uxr_serialize_AGENT_Representation+0x8e>
 800c604:	b1d0      	cbz	r0, 800c63c <uxr_serialize_AGENT_Representation+0x84>
 800c606:	463e      	mov	r6, r7
 800c608:	f04f 0900 	mov.w	r9, #0
 800c60c:	e001      	b.n	800c612 <uxr_serialize_AGENT_Representation+0x5a>
 800c60e:	3608      	adds	r6, #8
 800c610:	b1a4      	cbz	r4, 800c63c <uxr_serialize_AGENT_Representation+0x84>
 800c612:	6931      	ldr	r1, [r6, #16]
 800c614:	4628      	mov	r0, r5
 800c616:	f005 fd27 	bl	8012068 <ucdr_serialize_string>
 800c61a:	6971      	ldr	r1, [r6, #20]
 800c61c:	4604      	mov	r4, r0
 800c61e:	4628      	mov	r0, r5
 800c620:	f005 fd22 	bl	8012068 <ucdr_serialize_string>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f109 0901 	add.w	r9, r9, #1
 800c62a:	4004      	ands	r4, r0
 800c62c:	4599      	cmp	r9, r3
 800c62e:	b2e4      	uxtb	r4, r4
 800c630:	d3ed      	bcc.n	800c60e <uxr_serialize_AGENT_Representation+0x56>
 800c632:	ea08 0804 	and.w	r8, r8, r4
 800c636:	4640      	mov	r0, r8
 800c638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c63c:	f04f 0800 	mov.w	r8, #0
 800c640:	4640      	mov	r0, r8
 800c642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c646:	ea08 0800 	and.w	r8, r8, r0
 800c64a:	e7d2      	b.n	800c5f2 <uxr_serialize_AGENT_Representation+0x3a>

0800c64c <uxr_serialize_DATAWRITER_Representation>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	460d      	mov	r5, r1
 800c650:	7809      	ldrb	r1, [r1, #0]
 800c652:	4606      	mov	r6, r0
 800c654:	f7fc ff52 	bl	80094fc <ucdr_serialize_uint8_t>
 800c658:	4604      	mov	r4, r0
 800c65a:	b130      	cbz	r0, 800c66a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c65c:	782b      	ldrb	r3, [r5, #0]
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d00c      	beq.n	800c67c <uxr_serialize_DATAWRITER_Representation+0x30>
 800c662:	2b03      	cmp	r3, #3
 800c664:	d010      	beq.n	800c688 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800c666:	2b01      	cmp	r3, #1
 800c668:	d008      	beq.n	800c67c <uxr_serialize_DATAWRITER_Representation+0x30>
 800c66a:	2202      	movs	r2, #2
 800c66c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800c670:	4630      	mov	r0, r6
 800c672:	f005 fbd9 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c676:	4020      	ands	r0, r4
 800c678:	b2c0      	uxtb	r0, r0
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
 800c67c:	6869      	ldr	r1, [r5, #4]
 800c67e:	4630      	mov	r0, r6
 800c680:	f005 fcf2 	bl	8012068 <ucdr_serialize_string>
 800c684:	4604      	mov	r4, r0
 800c686:	e7f0      	b.n	800c66a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c688:	4629      	mov	r1, r5
 800c68a:	4630      	mov	r0, r6
 800c68c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c690:	3104      	adds	r1, #4
 800c692:	f005 fcbd 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800c696:	4604      	mov	r4, r0
 800c698:	e7e7      	b.n	800c66a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c69a:	bf00      	nop

0800c69c <uxr_serialize_ObjectVariant.part.0>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	780b      	ldrb	r3, [r1, #0]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	2b0d      	cmp	r3, #13
 800c6a8:	d854      	bhi.n	800c754 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c6aa:	e8df f003 	tbb	[pc, r3]
 800c6ae:	0730      	.short	0x0730
 800c6b0:	07071b1b 	.word	0x07071b1b
 800c6b4:	0c530707 	.word	0x0c530707
 800c6b8:	494e0c0c 	.word	0x494e0c0c
 800c6bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6c0:	3104      	adds	r1, #4
 800c6c2:	f7ff bfc3 	b.w	800c64c <uxr_serialize_DATAWRITER_Representation>
 800c6c6:	7909      	ldrb	r1, [r1, #4]
 800c6c8:	f7fc ff18 	bl	80094fc <ucdr_serialize_uint8_t>
 800c6cc:	b1e8      	cbz	r0, 800c70a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800c6ce:	7923      	ldrb	r3, [r4, #4]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d001      	beq.n	800c6d8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d13d      	bne.n	800c754 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c6d8:	68a1      	ldr	r1, [r4, #8]
 800c6da:	4628      	mov	r0, r5
 800c6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6e0:	f005 bcc2 	b.w	8012068 <ucdr_serialize_string>
 800c6e4:	7909      	ldrb	r1, [r1, #4]
 800c6e6:	f7fc ff09 	bl	80094fc <ucdr_serialize_uint8_t>
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	b120      	cbz	r0, 800c6f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c6ee:	7923      	ldrb	r3, [r4, #4]
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d039      	beq.n	800c768 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d02f      	beq.n	800c758 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800c6fe:	4628      	mov	r0, r5
 800c700:	f005 fb92 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800c704:	4030      	ands	r0, r6
 800c706:	b2c0      	uxtb	r0, r0
 800c708:	bd70      	pop	{r4, r5, r6, pc}
 800c70a:	2000      	movs	r0, #0
 800c70c:	bd70      	pop	{r4, r5, r6, pc}
 800c70e:	7909      	ldrb	r1, [r1, #4]
 800c710:	f7fc fef4 	bl	80094fc <ucdr_serialize_uint8_t>
 800c714:	4606      	mov	r6, r0
 800c716:	b158      	cbz	r0, 800c730 <uxr_serialize_ObjectVariant.part.0+0x94>
 800c718:	7923      	ldrb	r3, [r4, #4]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d003      	beq.n	800c726 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d028      	beq.n	800c774 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800c722:	2b01      	cmp	r3, #1
 800c724:	d104      	bne.n	800c730 <uxr_serialize_ObjectVariant.part.0+0x94>
 800c726:	68a1      	ldr	r1, [r4, #8]
 800c728:	4628      	mov	r0, r5
 800c72a:	f005 fc9d 	bl	8012068 <ucdr_serialize_string>
 800c72e:	4606      	mov	r6, r0
 800c730:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800c734:	4628      	mov	r0, r5
 800c736:	f7fd fc1d 	bl	8009f74 <ucdr_serialize_int16_t>
 800c73a:	4030      	ands	r0, r6
 800c73c:	b2c0      	uxtb	r0, r0
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c744:	3104      	adds	r1, #4
 800c746:	f7ff be7b 	b.w	800c440 <uxr_serialize_CLIENT_Representation>
 800c74a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c74e:	3104      	adds	r1, #4
 800c750:	f7ff bf32 	b.w	800c5b8 <uxr_serialize_AGENT_Representation>
 800c754:	2001      	movs	r0, #1
 800c756:	bd70      	pop	{r4, r5, r6, pc}
 800c758:	68a2      	ldr	r2, [r4, #8]
 800c75a:	f104 010c 	add.w	r1, r4, #12
 800c75e:	4628      	mov	r0, r5
 800c760:	f005 fc56 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800c764:	4606      	mov	r6, r0
 800c766:	e7c7      	b.n	800c6f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c768:	68a1      	ldr	r1, [r4, #8]
 800c76a:	4628      	mov	r0, r5
 800c76c:	f005 fc7c 	bl	8012068 <ucdr_serialize_string>
 800c770:	4606      	mov	r6, r0
 800c772:	e7c1      	b.n	800c6f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c774:	68a2      	ldr	r2, [r4, #8]
 800c776:	f104 010c 	add.w	r1, r4, #12
 800c77a:	4628      	mov	r0, r5
 800c77c:	f005 fc48 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800c780:	4606      	mov	r6, r0
 800c782:	e7d5      	b.n	800c730 <uxr_serialize_ObjectVariant.part.0+0x94>

0800c784 <uxr_deserialize_DATAWRITER_Representation>:
 800c784:	b570      	push	{r4, r5, r6, lr}
 800c786:	4606      	mov	r6, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	f7fc fecd 	bl	8009528 <ucdr_deserialize_uint8_t>
 800c78e:	4604      	mov	r4, r0
 800c790:	b130      	cbz	r0, 800c7a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c792:	782b      	ldrb	r3, [r5, #0]
 800c794:	2b02      	cmp	r3, #2
 800c796:	d00c      	beq.n	800c7b2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c798:	2b03      	cmp	r3, #3
 800c79a:	d012      	beq.n	800c7c2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d008      	beq.n	800c7b2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f005 fba2 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800c7ac:	4020      	ands	r0, r4
 800c7ae:	b2c0      	uxtb	r0, r0
 800c7b0:	bd70      	pop	{r4, r5, r6, pc}
 800c7b2:	6869      	ldr	r1, [r5, #4]
 800c7b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f005 fc65 	bl	8012088 <ucdr_deserialize_string>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	e7ee      	b.n	800c7a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c7c2:	1d2b      	adds	r3, r5, #4
 800c7c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7c8:	f105 0108 	add.w	r1, r5, #8
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f005 fc31 	bl	8012034 <ucdr_deserialize_sequence_uint8_t>
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	e7e4      	b.n	800c7a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c7d6:	bf00      	nop

0800c7d8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	460d      	mov	r5, r1
 800c7dc:	7809      	ldrb	r1, [r1, #0]
 800c7de:	4606      	mov	r6, r0
 800c7e0:	f7fc fe5e 	bl	80094a0 <ucdr_serialize_bool>
 800c7e4:	782b      	ldrb	r3, [r5, #0]
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	b94b      	cbnz	r3, 800c7fe <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c7ea:	7a29      	ldrb	r1, [r5, #8]
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	f7fc fe57 	bl	80094a0 <ucdr_serialize_bool>
 800c7f2:	7a2b      	ldrb	r3, [r5, #8]
 800c7f4:	4004      	ands	r4, r0
 800c7f6:	b2e4      	uxtb	r4, r4
 800c7f8:	b943      	cbnz	r3, 800c80c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	bd70      	pop	{r4, r5, r6, pc}
 800c7fe:	6869      	ldr	r1, [r5, #4]
 800c800:	4630      	mov	r0, r6
 800c802:	f005 fc31 	bl	8012068 <ucdr_serialize_string>
 800c806:	4004      	ands	r4, r0
 800c808:	b2e4      	uxtb	r4, r4
 800c80a:	e7ee      	b.n	800c7ea <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c80c:	68e9      	ldr	r1, [r5, #12]
 800c80e:	4630      	mov	r0, r6
 800c810:	f005 fc2a 	bl	8012068 <ucdr_serialize_string>
 800c814:	4004      	ands	r4, r0
 800c816:	4620      	mov	r0, r4
 800c818:	bd70      	pop	{r4, r5, r6, pc}
 800c81a:	bf00      	nop

0800c81c <uxr_serialize_OBJK_Topic_Binary>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	460d      	mov	r5, r1
 800c820:	6809      	ldr	r1, [r1, #0]
 800c822:	4606      	mov	r6, r0
 800c824:	f005 fc20 	bl	8012068 <ucdr_serialize_string>
 800c828:	7929      	ldrb	r1, [r5, #4]
 800c82a:	4604      	mov	r4, r0
 800c82c:	4630      	mov	r0, r6
 800c82e:	f7fc fe37 	bl	80094a0 <ucdr_serialize_bool>
 800c832:	792b      	ldrb	r3, [r5, #4]
 800c834:	4004      	ands	r4, r0
 800c836:	b2e4      	uxtb	r4, r4
 800c838:	b943      	cbnz	r3, 800c84c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c83a:	7b29      	ldrb	r1, [r5, #12]
 800c83c:	4630      	mov	r0, r6
 800c83e:	f7fc fe2f 	bl	80094a0 <ucdr_serialize_bool>
 800c842:	7b2b      	ldrb	r3, [r5, #12]
 800c844:	4004      	ands	r4, r0
 800c846:	b93b      	cbnz	r3, 800c858 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c848:	4620      	mov	r0, r4
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	68a9      	ldr	r1, [r5, #8]
 800c84e:	4630      	mov	r0, r6
 800c850:	f005 fc0a 	bl	8012068 <ucdr_serialize_string>
 800c854:	4004      	ands	r4, r0
 800c856:	e7f0      	b.n	800c83a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c858:	6929      	ldr	r1, [r5, #16]
 800c85a:	4630      	mov	r0, r6
 800c85c:	f005 fc04 	bl	8012068 <ucdr_serialize_string>
 800c860:	4004      	ands	r4, r0
 800c862:	b2e4      	uxtb	r4, r4
 800c864:	4620      	mov	r0, r4
 800c866:	bd70      	pop	{r4, r5, r6, pc}

0800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86c:	460c      	mov	r4, r1
 800c86e:	7809      	ldrb	r1, [r1, #0]
 800c870:	4606      	mov	r6, r0
 800c872:	f7fc fe15 	bl	80094a0 <ucdr_serialize_bool>
 800c876:	7823      	ldrb	r3, [r4, #0]
 800c878:	4605      	mov	r5, r0
 800c87a:	b96b      	cbnz	r3, 800c898 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c87c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800c880:	4630      	mov	r0, r6
 800c882:	f7fc fe0d 	bl	80094a0 <ucdr_serialize_bool>
 800c886:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c88a:	4005      	ands	r5, r0
 800c88c:	b2ed      	uxtb	r5, r5
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d169      	bne.n	800c966 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c892:	4628      	mov	r0, r5
 800c894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c898:	6861      	ldr	r1, [r4, #4]
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7fd f844 	bl	8009928 <ucdr_serialize_uint32_t>
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d06b      	beq.n	800c97e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d067      	beq.n	800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c8aa:	68a1      	ldr	r1, [r4, #8]
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f005 fbdb 	bl	8012068 <ucdr_serialize_string>
 800c8b2:	6863      	ldr	r3, [r4, #4]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d953      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d05e      	beq.n	800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c8bc:	68e1      	ldr	r1, [r4, #12]
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f005 fbd2 	bl	8012068 <ucdr_serialize_string>
 800c8c4:	6863      	ldr	r3, [r4, #4]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d94a      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d055      	beq.n	800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c8ce:	6921      	ldr	r1, [r4, #16]
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f005 fbc9 	bl	8012068 <ucdr_serialize_string>
 800c8d6:	6863      	ldr	r3, [r4, #4]
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d941      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d04c      	beq.n	800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c8e0:	6961      	ldr	r1, [r4, #20]
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f005 fbc0 	bl	8012068 <ucdr_serialize_string>
 800c8e8:	6863      	ldr	r3, [r4, #4]
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	d938      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d043      	beq.n	800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c8f2:	69a1      	ldr	r1, [r4, #24]
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f005 fbb7 	bl	8012068 <ucdr_serialize_string>
 800c8fa:	6863      	ldr	r3, [r4, #4]
 800c8fc:	2b05      	cmp	r3, #5
 800c8fe:	d92f      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c900:	2800      	cmp	r0, #0
 800c902:	d03a      	beq.n	800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c904:	69e1      	ldr	r1, [r4, #28]
 800c906:	4630      	mov	r0, r6
 800c908:	f005 fbae 	bl	8012068 <ucdr_serialize_string>
 800c90c:	6863      	ldr	r3, [r4, #4]
 800c90e:	2b06      	cmp	r3, #6
 800c910:	d926      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c912:	b390      	cbz	r0, 800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c914:	6a21      	ldr	r1, [r4, #32]
 800c916:	4630      	mov	r0, r6
 800c918:	f005 fba6 	bl	8012068 <ucdr_serialize_string>
 800c91c:	6863      	ldr	r3, [r4, #4]
 800c91e:	2b07      	cmp	r3, #7
 800c920:	d91e      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c922:	b350      	cbz	r0, 800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c924:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c926:	4630      	mov	r0, r6
 800c928:	f005 fb9e 	bl	8012068 <ucdr_serialize_string>
 800c92c:	6863      	ldr	r3, [r4, #4]
 800c92e:	2b08      	cmp	r3, #8
 800c930:	d916      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c932:	b310      	cbz	r0, 800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c934:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c936:	4630      	mov	r0, r6
 800c938:	f005 fb96 	bl	8012068 <ucdr_serialize_string>
 800c93c:	6863      	ldr	r3, [r4, #4]
 800c93e:	2b09      	cmp	r3, #9
 800c940:	d90e      	bls.n	800c960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c942:	b1d0      	cbz	r0, 800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c944:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800c948:	2709      	movs	r7, #9
 800c94a:	e000      	b.n	800c94e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c94c:	b1a8      	cbz	r0, 800c97a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c94e:	f858 1b04 	ldr.w	r1, [r8], #4
 800c952:	4630      	mov	r0, r6
 800c954:	f005 fb88 	bl	8012068 <ucdr_serialize_string>
 800c958:	6862      	ldr	r2, [r4, #4]
 800c95a:	3701      	adds	r7, #1
 800c95c:	4297      	cmp	r7, r2
 800c95e:	d3f5      	bcc.n	800c94c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c960:	4005      	ands	r5, r0
 800c962:	b2ed      	uxtb	r5, r5
 800c964:	e78a      	b.n	800c87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c966:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c968:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c96c:	4630      	mov	r0, r6
 800c96e:	f005 fb4f 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800c972:	4005      	ands	r5, r0
 800c974:	4628      	mov	r0, r5
 800c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97a:	2500      	movs	r5, #0
 800c97c:	e77e      	b.n	800c87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c97e:	4028      	ands	r0, r5
 800c980:	b2c5      	uxtb	r5, r0
 800c982:	e77b      	b.n	800c87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c984 <uxr_serialize_OBJK_Publisher_Binary>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	460d      	mov	r5, r1
 800c988:	7809      	ldrb	r1, [r1, #0]
 800c98a:	4606      	mov	r6, r0
 800c98c:	f7fc fd88 	bl	80094a0 <ucdr_serialize_bool>
 800c990:	782b      	ldrb	r3, [r5, #0]
 800c992:	4604      	mov	r4, r0
 800c994:	b94b      	cbnz	r3, 800c9aa <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c996:	7a29      	ldrb	r1, [r5, #8]
 800c998:	4630      	mov	r0, r6
 800c99a:	f7fc fd81 	bl	80094a0 <ucdr_serialize_bool>
 800c99e:	7a2b      	ldrb	r3, [r5, #8]
 800c9a0:	4004      	ands	r4, r0
 800c9a2:	b2e4      	uxtb	r4, r4
 800c9a4:	b943      	cbnz	r3, 800c9b8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
 800c9aa:	6869      	ldr	r1, [r5, #4]
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f005 fb5b 	bl	8012068 <ucdr_serialize_string>
 800c9b2:	4004      	ands	r4, r0
 800c9b4:	b2e4      	uxtb	r4, r4
 800c9b6:	e7ee      	b.n	800c996 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800c9b8:	f105 010c 	add.w	r1, r5, #12
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff ff53 	bl	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c9c2:	4004      	ands	r4, r0
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}

0800c9c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	7809      	ldrb	r1, [r1, #0]
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	f7fc fd65 	bl	80094a0 <ucdr_serialize_bool>
 800c9d6:	7823      	ldrb	r3, [r4, #0]
 800c9d8:	4605      	mov	r5, r0
 800c9da:	b96b      	cbnz	r3, 800c9f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800c9dc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	f7fc fd5d 	bl	80094a0 <ucdr_serialize_bool>
 800c9e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c9ea:	4005      	ands	r5, r0
 800c9ec:	b2ed      	uxtb	r5, r5
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d169      	bne.n	800cac6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f8:	6861      	ldr	r1, [r4, #4]
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7fc ff94 	bl	8009928 <ucdr_serialize_uint32_t>
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d06b      	beq.n	800cade <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d067      	beq.n	800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca0a:	68a1      	ldr	r1, [r4, #8]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f005 fb2b 	bl	8012068 <ucdr_serialize_string>
 800ca12:	6863      	ldr	r3, [r4, #4]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d953      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d05e      	beq.n	800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca1c:	68e1      	ldr	r1, [r4, #12]
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f005 fb22 	bl	8012068 <ucdr_serialize_string>
 800ca24:	6863      	ldr	r3, [r4, #4]
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d94a      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d055      	beq.n	800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca2e:	6921      	ldr	r1, [r4, #16]
 800ca30:	4630      	mov	r0, r6
 800ca32:	f005 fb19 	bl	8012068 <ucdr_serialize_string>
 800ca36:	6863      	ldr	r3, [r4, #4]
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	d941      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d04c      	beq.n	800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca40:	6961      	ldr	r1, [r4, #20]
 800ca42:	4630      	mov	r0, r6
 800ca44:	f005 fb10 	bl	8012068 <ucdr_serialize_string>
 800ca48:	6863      	ldr	r3, [r4, #4]
 800ca4a:	2b04      	cmp	r3, #4
 800ca4c:	d938      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d043      	beq.n	800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca52:	69a1      	ldr	r1, [r4, #24]
 800ca54:	4630      	mov	r0, r6
 800ca56:	f005 fb07 	bl	8012068 <ucdr_serialize_string>
 800ca5a:	6863      	ldr	r3, [r4, #4]
 800ca5c:	2b05      	cmp	r3, #5
 800ca5e:	d92f      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d03a      	beq.n	800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca64:	69e1      	ldr	r1, [r4, #28]
 800ca66:	4630      	mov	r0, r6
 800ca68:	f005 fafe 	bl	8012068 <ucdr_serialize_string>
 800ca6c:	6863      	ldr	r3, [r4, #4]
 800ca6e:	2b06      	cmp	r3, #6
 800ca70:	d926      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca72:	b390      	cbz	r0, 800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca74:	6a21      	ldr	r1, [r4, #32]
 800ca76:	4630      	mov	r0, r6
 800ca78:	f005 faf6 	bl	8012068 <ucdr_serialize_string>
 800ca7c:	6863      	ldr	r3, [r4, #4]
 800ca7e:	2b07      	cmp	r3, #7
 800ca80:	d91e      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca82:	b350      	cbz	r0, 800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ca86:	4630      	mov	r0, r6
 800ca88:	f005 faee 	bl	8012068 <ucdr_serialize_string>
 800ca8c:	6863      	ldr	r3, [r4, #4]
 800ca8e:	2b08      	cmp	r3, #8
 800ca90:	d916      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ca92:	b310      	cbz	r0, 800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ca94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ca96:	4630      	mov	r0, r6
 800ca98:	f005 fae6 	bl	8012068 <ucdr_serialize_string>
 800ca9c:	6863      	ldr	r3, [r4, #4]
 800ca9e:	2b09      	cmp	r3, #9
 800caa0:	d90e      	bls.n	800cac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800caa2:	b1d0      	cbz	r0, 800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800caa4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800caa8:	2709      	movs	r7, #9
 800caaa:	e000      	b.n	800caae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800caac:	b1a8      	cbz	r0, 800cada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800caae:	f858 1b04 	ldr.w	r1, [r8], #4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f005 fad8 	bl	8012068 <ucdr_serialize_string>
 800cab8:	6862      	ldr	r2, [r4, #4]
 800caba:	3701      	adds	r7, #1
 800cabc:	4297      	cmp	r7, r2
 800cabe:	d3f5      	bcc.n	800caac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800cac0:	4005      	ands	r5, r0
 800cac2:	b2ed      	uxtb	r5, r5
 800cac4:	e78a      	b.n	800c9dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800cac6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cac8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800cacc:	4630      	mov	r0, r6
 800cace:	f005 fa9f 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800cad2:	4005      	ands	r5, r0
 800cad4:	4628      	mov	r0, r5
 800cad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cada:	2500      	movs	r5, #0
 800cadc:	e77e      	b.n	800c9dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800cade:	4028      	ands	r0, r5
 800cae0:	b2c5      	uxtb	r5, r0
 800cae2:	e77b      	b.n	800c9dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800cae4 <uxr_serialize_OBJK_Subscriber_Binary>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	460d      	mov	r5, r1
 800cae8:	7809      	ldrb	r1, [r1, #0]
 800caea:	4606      	mov	r6, r0
 800caec:	f7fc fcd8 	bl	80094a0 <ucdr_serialize_bool>
 800caf0:	782b      	ldrb	r3, [r5, #0]
 800caf2:	4604      	mov	r4, r0
 800caf4:	b94b      	cbnz	r3, 800cb0a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800caf6:	7a29      	ldrb	r1, [r5, #8]
 800caf8:	4630      	mov	r0, r6
 800cafa:	f7fc fcd1 	bl	80094a0 <ucdr_serialize_bool>
 800cafe:	7a2b      	ldrb	r3, [r5, #8]
 800cb00:	4004      	ands	r4, r0
 800cb02:	b2e4      	uxtb	r4, r4
 800cb04:	b943      	cbnz	r3, 800cb18 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800cb06:	4620      	mov	r0, r4
 800cb08:	bd70      	pop	{r4, r5, r6, pc}
 800cb0a:	6869      	ldr	r1, [r5, #4]
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f005 faab 	bl	8012068 <ucdr_serialize_string>
 800cb12:	4004      	ands	r4, r0
 800cb14:	b2e4      	uxtb	r4, r4
 800cb16:	e7ee      	b.n	800caf6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800cb18:	f105 010c 	add.w	r1, r5, #12
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff ff53 	bl	800c9c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800cb22:	4004      	ands	r4, r0
 800cb24:	4620      	mov	r0, r4
 800cb26:	bd70      	pop	{r4, r5, r6, pc}

0800cb28 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800cb28:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800cb2c:	4688      	mov	r8, r1
 800cb2e:	8809      	ldrh	r1, [r1, #0]
 800cb30:	4681      	mov	r9, r0
 800cb32:	f7fc fd0f 	bl	8009554 <ucdr_serialize_uint16_t>
 800cb36:	f898 1002 	ldrb.w	r1, [r8, #2]
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	4648      	mov	r0, r9
 800cb3e:	f7fc fcaf 	bl	80094a0 <ucdr_serialize_bool>
 800cb42:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cb46:	4006      	ands	r6, r0
 800cb48:	b2f5      	uxtb	r5, r6
 800cb4a:	b9eb      	cbnz	r3, 800cb88 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800cb4c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800cb50:	4648      	mov	r0, r9
 800cb52:	f7fc fca5 	bl	80094a0 <ucdr_serialize_bool>
 800cb56:	f898 3006 	ldrb.w	r3, [r8, #6]
 800cb5a:	4005      	ands	r5, r0
 800cb5c:	bb7b      	cbnz	r3, 800cbbe <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800cb5e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800cb62:	4648      	mov	r0, r9
 800cb64:	f7fc fc9c 	bl	80094a0 <ucdr_serialize_bool>
 800cb68:	f898 300c 	ldrb.w	r3, [r8, #12]
 800cb6c:	4005      	ands	r5, r0
 800cb6e:	b9f3      	cbnz	r3, 800cbae <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800cb70:	f898 1014 	ldrb.w	r1, [r8, #20]
 800cb74:	4648      	mov	r0, r9
 800cb76:	f7fc fc93 	bl	80094a0 <ucdr_serialize_bool>
 800cb7a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800cb7e:	4005      	ands	r5, r0
 800cb80:	b94b      	cbnz	r3, 800cb96 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800cb82:	4628      	mov	r0, r5
 800cb84:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800cb88:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800cb8c:	4648      	mov	r0, r9
 800cb8e:	f7fc fce1 	bl	8009554 <ucdr_serialize_uint16_t>
 800cb92:	4005      	ands	r5, r0
 800cb94:	e7da      	b.n	800cb4c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800cb96:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800cb9a:	f108 011c 	add.w	r1, r8, #28
 800cb9e:	4648      	mov	r0, r9
 800cba0:	f005 fa36 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800cba4:	4028      	ands	r0, r5
 800cba6:	b2c5      	uxtb	r5, r0
 800cba8:	4628      	mov	r0, r5
 800cbaa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800cbae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cbb2:	4648      	mov	r0, r9
 800cbb4:	f7fc feb8 	bl	8009928 <ucdr_serialize_uint32_t>
 800cbb8:	4028      	ands	r0, r5
 800cbba:	b2c5      	uxtb	r5, r0
 800cbbc:	e7d8      	b.n	800cb70 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800cbbe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800cbc2:	4648      	mov	r0, r9
 800cbc4:	f7fc feb0 	bl	8009928 <ucdr_serialize_uint32_t>
 800cbc8:	4028      	ands	r0, r5
 800cbca:	b2c5      	uxtb	r5, r0
 800cbcc:	e7c7      	b.n	800cb5e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800cbce:	bf00      	nop

0800cbd0 <uxr_serialize_OBJK_DataReader_Binary>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	f005 f926 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800cbdc:	78a1      	ldrb	r1, [r4, #2]
 800cbde:	4605      	mov	r5, r0
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f7fc fc5d 	bl	80094a0 <ucdr_serialize_bool>
 800cbe6:	78a3      	ldrb	r3, [r4, #2]
 800cbe8:	4005      	ands	r5, r0
 800cbea:	b2ed      	uxtb	r5, r5
 800cbec:	b90b      	cbnz	r3, 800cbf2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800cbee:	4628      	mov	r0, r5
 800cbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbf2:	f104 0108 	add.w	r1, r4, #8
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff ff96 	bl	800cb28 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800cbfc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800cc00:	4607      	mov	r7, r0
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7fc fc4c 	bl	80094a0 <ucdr_serialize_bool>
 800cc08:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800cc0c:	4038      	ands	r0, r7
 800cc0e:	b2c7      	uxtb	r7, r0
 800cc10:	b95b      	cbnz	r3, 800cc2a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800cc12:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7fc fc42 	bl	80094a0 <ucdr_serialize_bool>
 800cc1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800cc20:	4007      	ands	r7, r0
 800cc22:	b94b      	cbnz	r3, 800cc38 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800cc24:	403d      	ands	r5, r7
 800cc26:	4628      	mov	r0, r5
 800cc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f7fd f8d0 	bl	8009dd4 <ucdr_serialize_uint64_t>
 800cc34:	4007      	ands	r7, r0
 800cc36:	e7ec      	b.n	800cc12 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800cc38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f005 fa14 	bl	8012068 <ucdr_serialize_string>
 800cc40:	4007      	ands	r7, r0
 800cc42:	b2ff      	uxtb	r7, r7
 800cc44:	e7ee      	b.n	800cc24 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800cc46:	bf00      	nop

0800cc48 <uxr_serialize_OBJK_DataWriter_Binary>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	460d      	mov	r5, r1
 800cc4e:	4606      	mov	r6, r0
 800cc50:	f005 f8ea 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800cc54:	78a9      	ldrb	r1, [r5, #2]
 800cc56:	4604      	mov	r4, r0
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f7fc fc21 	bl	80094a0 <ucdr_serialize_bool>
 800cc5e:	78ab      	ldrb	r3, [r5, #2]
 800cc60:	4004      	ands	r4, r0
 800cc62:	b2e4      	uxtb	r4, r4
 800cc64:	b90b      	cbnz	r3, 800cc6a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800cc66:	4620      	mov	r0, r4
 800cc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc6a:	f105 0108 	add.w	r1, r5, #8
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f7ff ff5a 	bl	800cb28 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800cc74:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800cc78:	4607      	mov	r7, r0
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f7fc fc10 	bl	80094a0 <ucdr_serialize_bool>
 800cc80:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800cc84:	4038      	ands	r0, r7
 800cc86:	b2c7      	uxtb	r7, r0
 800cc88:	b913      	cbnz	r3, 800cc90 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800cc8a:	403c      	ands	r4, r7
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc90:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800cc94:	4630      	mov	r0, r6
 800cc96:	f7fd f89d 	bl	8009dd4 <ucdr_serialize_uint64_t>
 800cc9a:	4007      	ands	r7, r0
 800cc9c:	e7f5      	b.n	800cc8a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800cc9e:	bf00      	nop

0800cca0 <uxr_deserialize_ObjectVariant>:
 800cca0:	b570      	push	{r4, r5, r6, lr}
 800cca2:	4605      	mov	r5, r0
 800cca4:	460e      	mov	r6, r1
 800cca6:	f7fc fc3f 	bl	8009528 <ucdr_deserialize_uint8_t>
 800ccaa:	b168      	cbz	r0, 800ccc8 <uxr_deserialize_ObjectVariant+0x28>
 800ccac:	7833      	ldrb	r3, [r6, #0]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	2b0d      	cmp	r3, #13
 800ccb4:	d809      	bhi.n	800ccca <uxr_deserialize_ObjectVariant+0x2a>
 800ccb6:	e8df f003 	tbb	[pc, r3]
 800ccba:	0a41      	.short	0x0a41
 800ccbc:	0a0a2323 	.word	0x0a0a2323
 800ccc0:	10080a0a 	.word	0x10080a0a
 800ccc4:	565c1010 	.word	0x565c1010
 800ccc8:	2400      	movs	r4, #0
 800ccca:	4620      	mov	r0, r4
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
 800ccce:	1d31      	adds	r1, r6, #4
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccd6:	f7ff bd55 	b.w	800c784 <uxr_deserialize_DATAWRITER_Representation>
 800ccda:	1d31      	adds	r1, r6, #4
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7fc fc23 	bl	8009528 <ucdr_deserialize_uint8_t>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d0f0      	beq.n	800ccc8 <uxr_deserialize_ObjectVariant+0x28>
 800cce6:	7933      	ldrb	r3, [r6, #4]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d001      	beq.n	800ccf0 <uxr_deserialize_ObjectVariant+0x50>
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	d1ec      	bne.n	800ccca <uxr_deserialize_ObjectVariant+0x2a>
 800ccf0:	68b1      	ldr	r1, [r6, #8]
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccfc:	f005 b9c4 	b.w	8012088 <ucdr_deserialize_string>
 800cd00:	1d31      	adds	r1, r6, #4
 800cd02:	4628      	mov	r0, r5
 800cd04:	f7fc fc10 	bl	8009528 <ucdr_deserialize_uint8_t>
 800cd08:	4604      	mov	r4, r0
 800cd0a:	b170      	cbz	r0, 800cd2a <uxr_deserialize_ObjectVariant+0x8a>
 800cd0c:	7933      	ldrb	r3, [r6, #4]
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d04c      	beq.n	800cdac <uxr_deserialize_ObjectVariant+0x10c>
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d109      	bne.n	800cd2a <uxr_deserialize_ObjectVariant+0x8a>
 800cd16:	f106 0308 	add.w	r3, r6, #8
 800cd1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd1e:	f106 010c 	add.w	r1, r6, #12
 800cd22:	4628      	mov	r0, r5
 800cd24:	f005 f986 	bl	8012034 <ucdr_deserialize_sequence_uint8_t>
 800cd28:	4604      	mov	r4, r0
 800cd2a:	2202      	movs	r2, #2
 800cd2c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800cd30:	4628      	mov	r0, r5
 800cd32:	f005 f8dd 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cd36:	4020      	ands	r0, r4
 800cd38:	b2c4      	uxtb	r4, r0
 800cd3a:	e7c6      	b.n	800ccca <uxr_deserialize_ObjectVariant+0x2a>
 800cd3c:	1d31      	adds	r1, r6, #4
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f7fc fbf2 	bl	8009528 <ucdr_deserialize_uint8_t>
 800cd44:	4604      	mov	r4, r0
 800cd46:	b130      	cbz	r0, 800cd56 <uxr_deserialize_ObjectVariant+0xb6>
 800cd48:	7933      	ldrb	r3, [r6, #4]
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d036      	beq.n	800cdbc <uxr_deserialize_ObjectVariant+0x11c>
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d03c      	beq.n	800cdcc <uxr_deserialize_ObjectVariant+0x12c>
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d032      	beq.n	800cdbc <uxr_deserialize_ObjectVariant+0x11c>
 800cd56:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f7fd f98a 	bl	800a074 <ucdr_deserialize_int16_t>
 800cd60:	4020      	ands	r0, r4
 800cd62:	b2c4      	uxtb	r4, r0
 800cd64:	e7b1      	b.n	800ccca <uxr_deserialize_ObjectVariant+0x2a>
 800cd66:	1d31      	adds	r1, r6, #4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd6e:	f7ff bbbf 	b.w	800c4f0 <uxr_deserialize_CLIENT_Representation>
 800cd72:	2204      	movs	r2, #4
 800cd74:	18b1      	adds	r1, r6, r2
 800cd76:	4628      	mov	r0, r5
 800cd78:	f005 f8ba 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cd7c:	2202      	movs	r2, #2
 800cd7e:	f106 0108 	add.w	r1, r6, #8
 800cd82:	4604      	mov	r4, r0
 800cd84:	4628      	mov	r0, r5
 800cd86:	f005 f8b3 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	4004      	ands	r4, r0
 800cd8e:	f106 010a 	add.w	r1, r6, #10
 800cd92:	4628      	mov	r0, r5
 800cd94:	f005 f8ac 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cd98:	b2e4      	uxtb	r4, r4
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f106 010c 	add.w	r1, r6, #12
 800cda0:	4628      	mov	r0, r5
 800cda2:	401c      	ands	r4, r3
 800cda4:	f7fc fb92 	bl	80094cc <ucdr_deserialize_bool>
 800cda8:	4004      	ands	r4, r0
 800cdaa:	e78e      	b.n	800ccca <uxr_deserialize_ObjectVariant+0x2a>
 800cdac:	68b1      	ldr	r1, [r6, #8]
 800cdae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f005 f968 	bl	8012088 <ucdr_deserialize_string>
 800cdb8:	4604      	mov	r4, r0
 800cdba:	e7b6      	b.n	800cd2a <uxr_deserialize_ObjectVariant+0x8a>
 800cdbc:	68b1      	ldr	r1, [r6, #8]
 800cdbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	f005 f960 	bl	8012088 <ucdr_deserialize_string>
 800cdc8:	4604      	mov	r4, r0
 800cdca:	e7c4      	b.n	800cd56 <uxr_deserialize_ObjectVariant+0xb6>
 800cdcc:	f106 0308 	add.w	r3, r6, #8
 800cdd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdd4:	f106 010c 	add.w	r1, r6, #12
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f005 f92b 	bl	8012034 <ucdr_deserialize_sequence_uint8_t>
 800cdde:	4604      	mov	r4, r0
 800cde0:	e7b9      	b.n	800cd56 <uxr_deserialize_ObjectVariant+0xb6>
 800cde2:	bf00      	nop

0800cde4 <uxr_deserialize_BaseObjectRequest>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	2202      	movs	r2, #2
 800cde8:	4605      	mov	r5, r0
 800cdea:	460e      	mov	r6, r1
 800cdec:	f005 f880 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	18b1      	adds	r1, r6, r2
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f005 f87a 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cdfc:	4020      	ands	r0, r4
 800cdfe:	b2c0      	uxtb	r0, r0
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	bf00      	nop

0800ce04 <uxr_serialize_ActivityInfoVariant>:
 800ce04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce08:	460d      	mov	r5, r1
 800ce0a:	7809      	ldrb	r1, [r1, #0]
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	f7fc fb75 	bl	80094fc <ucdr_serialize_uint8_t>
 800ce12:	4681      	mov	r9, r0
 800ce14:	b138      	cbz	r0, 800ce26 <uxr_serialize_ActivityInfoVariant+0x22>
 800ce16:	782b      	ldrb	r3, [r5, #0]
 800ce18:	2b06      	cmp	r3, #6
 800ce1a:	f000 8082 	beq.w	800cf22 <uxr_serialize_ActivityInfoVariant+0x11e>
 800ce1e:	2b0d      	cmp	r3, #13
 800ce20:	d016      	beq.n	800ce50 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ce22:	2b05      	cmp	r3, #5
 800ce24:	d002      	beq.n	800ce2c <uxr_serialize_ActivityInfoVariant+0x28>
 800ce26:	4648      	mov	r0, r9
 800ce28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7fd f89f 	bl	8009f74 <ucdr_serialize_int16_t>
 800ce36:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ce3a:	4681      	mov	r9, r0
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f7fc ffc9 	bl	8009dd4 <ucdr_serialize_uint64_t>
 800ce42:	ea09 0000 	and.w	r0, r9, r0
 800ce46:	fa5f f980 	uxtb.w	r9, r0
 800ce4a:	4648      	mov	r0, r9
 800ce4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce50:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ce54:	4638      	mov	r0, r7
 800ce56:	f7fd f88d 	bl	8009f74 <ucdr_serialize_int16_t>
 800ce5a:	68e9      	ldr	r1, [r5, #12]
 800ce5c:	4681      	mov	r9, r0
 800ce5e:	4638      	mov	r0, r7
 800ce60:	f7fc fd62 	bl	8009928 <ucdr_serialize_uint32_t>
 800ce64:	68eb      	ldr	r3, [r5, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0eb      	beq.n	800ce42 <uxr_serialize_ActivityInfoVariant+0x3e>
 800ce6a:	b320      	cbz	r0, 800ceb6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800ce6c:	f105 080c 	add.w	r8, r5, #12
 800ce70:	2600      	movs	r6, #0
 800ce72:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ce76:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ce7a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ce7e:	4638      	mov	r0, r7
 800ce80:	f7fc fb3c 	bl	80094fc <ucdr_serialize_uint8_t>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d053      	beq.n	800cf30 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ce88:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ce8c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ce90:	0074      	lsls	r4, r6, #1
 800ce92:	00c9      	lsls	r1, r1, #3
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	d854      	bhi.n	800cf42 <uxr_serialize_ActivityInfoVariant+0x13e>
 800ce98:	e8df f003 	tbb	[pc, r3]
 800ce9c:	02102132 	.word	0x02102132
 800cea0:	4441      	add	r1, r8
 800cea2:	4638      	mov	r0, r7
 800cea4:	6889      	ldr	r1, [r1, #8]
 800cea6:	f005 f8df 	bl	8012068 <ucdr_serialize_string>
 800ceaa:	68ea      	ldr	r2, [r5, #12]
 800ceac:	3601      	adds	r6, #1
 800ceae:	4296      	cmp	r6, r2
 800ceb0:	d242      	bcs.n	800cf38 <uxr_serialize_ActivityInfoVariant+0x134>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d1dd      	bne.n	800ce72 <uxr_serialize_ActivityInfoVariant+0x6e>
 800ceb6:	f04f 0900 	mov.w	r9, #0
 800ceba:	e7b4      	b.n	800ce26 <uxr_serialize_ActivityInfoVariant+0x22>
 800cebc:	3108      	adds	r1, #8
 800cebe:	4441      	add	r1, r8
 800cec0:	2210      	movs	r2, #16
 800cec2:	4638      	mov	r0, r7
 800cec4:	f004 ffb0 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800cec8:	4434      	add	r4, r6
 800ceca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cece:	4604      	mov	r4, r0
 800ced0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ced2:	4638      	mov	r0, r7
 800ced4:	f7fc fd28 	bl	8009928 <ucdr_serialize_uint32_t>
 800ced8:	4020      	ands	r0, r4
 800ceda:	b2c0      	uxtb	r0, r0
 800cedc:	e7e5      	b.n	800ceaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800cede:	3108      	adds	r1, #8
 800cee0:	4441      	add	r1, r8
 800cee2:	2204      	movs	r2, #4
 800cee4:	4638      	mov	r0, r7
 800cee6:	f004 ff9f 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800ceea:	4434      	add	r4, r6
 800ceec:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cef0:	4604      	mov	r4, r0
 800cef2:	8b19      	ldrh	r1, [r3, #24]
 800cef4:	4638      	mov	r0, r7
 800cef6:	f7fc fb2d 	bl	8009554 <ucdr_serialize_uint16_t>
 800cefa:	4020      	ands	r0, r4
 800cefc:	b2c0      	uxtb	r0, r0
 800cefe:	e7d4      	b.n	800ceaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800cf00:	3108      	adds	r1, #8
 800cf02:	4441      	add	r1, r8
 800cf04:	2202      	movs	r2, #2
 800cf06:	4638      	mov	r0, r7
 800cf08:	f004 ff8e 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800cf0c:	4434      	add	r4, r6
 800cf0e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cf12:	4604      	mov	r4, r0
 800cf14:	7d99      	ldrb	r1, [r3, #22]
 800cf16:	4638      	mov	r0, r7
 800cf18:	f7fc faf0 	bl	80094fc <ucdr_serialize_uint8_t>
 800cf1c:	4020      	ands	r0, r4
 800cf1e:	b2c0      	uxtb	r0, r0
 800cf20:	e7c3      	b.n	800ceaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800cf22:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800cf26:	4638      	mov	r0, r7
 800cf28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf2c:	f7fd b822 	b.w	8009f74 <ucdr_serialize_int16_t>
 800cf30:	68ea      	ldr	r2, [r5, #12]
 800cf32:	3601      	adds	r6, #1
 800cf34:	42b2      	cmp	r2, r6
 800cf36:	d8be      	bhi.n	800ceb6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800cf38:	ea09 0900 	and.w	r9, r9, r0
 800cf3c:	fa5f f989 	uxtb.w	r9, r9
 800cf40:	e771      	b.n	800ce26 <uxr_serialize_ActivityInfoVariant+0x22>
 800cf42:	68eb      	ldr	r3, [r5, #12]
 800cf44:	3601      	adds	r6, #1
 800cf46:	429e      	cmp	r6, r3
 800cf48:	f10a 0a18 	add.w	sl, sl, #24
 800cf4c:	d395      	bcc.n	800ce7a <uxr_serialize_ActivityInfoVariant+0x76>
 800cf4e:	e76a      	b.n	800ce26 <uxr_serialize_ActivityInfoVariant+0x22>

0800cf50 <uxr_deserialize_BaseObjectReply>:
 800cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf54:	2202      	movs	r2, #2
 800cf56:	4606      	mov	r6, r0
 800cf58:	460f      	mov	r7, r1
 800cf5a:	f004 ffc9 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cf5e:	2202      	movs	r2, #2
 800cf60:	18b9      	adds	r1, r7, r2
 800cf62:	4605      	mov	r5, r0
 800cf64:	4630      	mov	r0, r6
 800cf66:	f004 ffc3 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800cf6a:	1d39      	adds	r1, r7, #4
 800cf6c:	4680      	mov	r8, r0
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7fc fada 	bl	8009528 <ucdr_deserialize_uint8_t>
 800cf74:	1d79      	adds	r1, r7, #5
 800cf76:	4604      	mov	r4, r0
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7fc fad5 	bl	8009528 <ucdr_deserialize_uint8_t>
 800cf7e:	ea05 0508 	and.w	r5, r5, r8
 800cf82:	402c      	ands	r4, r5
 800cf84:	4020      	ands	r0, r4
 800cf86:	b2c0      	uxtb	r0, r0
 800cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf8c <uxr_serialize_ReadSpecification>:
 800cf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf90:	460e      	mov	r6, r1
 800cf92:	7809      	ldrb	r1, [r1, #0]
 800cf94:	4607      	mov	r7, r0
 800cf96:	f7fc fab1 	bl	80094fc <ucdr_serialize_uint8_t>
 800cf9a:	7871      	ldrb	r1, [r6, #1]
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	f7fc faac 	bl	80094fc <ucdr_serialize_uint8_t>
 800cfa4:	78b1      	ldrb	r1, [r6, #2]
 800cfa6:	4004      	ands	r4, r0
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	f7fc fa79 	bl	80094a0 <ucdr_serialize_bool>
 800cfae:	78b3      	ldrb	r3, [r6, #2]
 800cfb0:	b2e4      	uxtb	r4, r4
 800cfb2:	4004      	ands	r4, r0
 800cfb4:	b94b      	cbnz	r3, 800cfca <uxr_serialize_ReadSpecification+0x3e>
 800cfb6:	7a31      	ldrb	r1, [r6, #8]
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7fc fa71 	bl	80094a0 <ucdr_serialize_bool>
 800cfbe:	7a33      	ldrb	r3, [r6, #8]
 800cfc0:	4004      	ands	r4, r0
 800cfc2:	b943      	cbnz	r3, 800cfd6 <uxr_serialize_ReadSpecification+0x4a>
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfca:	6871      	ldr	r1, [r6, #4]
 800cfcc:	4638      	mov	r0, r7
 800cfce:	f005 f84b 	bl	8012068 <ucdr_serialize_string>
 800cfd2:	4004      	ands	r4, r0
 800cfd4:	e7ef      	b.n	800cfb6 <uxr_serialize_ReadSpecification+0x2a>
 800cfd6:	8971      	ldrh	r1, [r6, #10]
 800cfd8:	4638      	mov	r0, r7
 800cfda:	f7fc fabb 	bl	8009554 <ucdr_serialize_uint16_t>
 800cfde:	89b1      	ldrh	r1, [r6, #12]
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f7fc fab6 	bl	8009554 <ucdr_serialize_uint16_t>
 800cfe8:	89f1      	ldrh	r1, [r6, #14]
 800cfea:	4005      	ands	r5, r0
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7fc fab1 	bl	8009554 <ucdr_serialize_uint16_t>
 800cff2:	8a31      	ldrh	r1, [r6, #16]
 800cff4:	4680      	mov	r8, r0
 800cff6:	4638      	mov	r0, r7
 800cff8:	f7fc faac 	bl	8009554 <ucdr_serialize_uint16_t>
 800cffc:	b2ed      	uxtb	r5, r5
 800cffe:	4025      	ands	r5, r4
 800d000:	ea08 0505 	and.w	r5, r8, r5
 800d004:	ea00 0405 	and.w	r4, r0, r5
 800d008:	4620      	mov	r0, r4
 800d00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d00e:	bf00      	nop

0800d010 <uxr_serialize_CREATE_CLIENT_Payload>:
 800d010:	f7ff ba16 	b.w	800c440 <uxr_serialize_CLIENT_Representation>

0800d014 <uxr_serialize_CREATE_Payload>:
 800d014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d016:	2202      	movs	r2, #2
 800d018:	4607      	mov	r7, r0
 800d01a:	460e      	mov	r6, r1
 800d01c:	f004 ff04 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d020:	2202      	movs	r2, #2
 800d022:	18b1      	adds	r1, r6, r2
 800d024:	4605      	mov	r5, r0
 800d026:	4638      	mov	r0, r7
 800d028:	f004 fefe 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d02c:	7931      	ldrb	r1, [r6, #4]
 800d02e:	4604      	mov	r4, r0
 800d030:	4638      	mov	r0, r7
 800d032:	f7fc fa63 	bl	80094fc <ucdr_serialize_uint8_t>
 800d036:	b170      	cbz	r0, 800d056 <uxr_serialize_CREATE_Payload+0x42>
 800d038:	7933      	ldrb	r3, [r6, #4]
 800d03a:	402c      	ands	r4, r5
 800d03c:	3b01      	subs	r3, #1
 800d03e:	b2e4      	uxtb	r4, r4
 800d040:	2b0d      	cmp	r3, #13
 800d042:	d809      	bhi.n	800d058 <uxr_serialize_CREATE_Payload+0x44>
 800d044:	e8df f003 	tbb	[pc, r3]
 800d048:	23230a4c 	.word	0x23230a4c
 800d04c:	0a0a0a0a 	.word	0x0a0a0a0a
 800d050:	12121208 	.word	0x12121208
 800d054:	3e45      	.short	0x3e45
 800d056:	2400      	movs	r4, #0
 800d058:	4620      	mov	r0, r4
 800d05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d05c:	f106 0108 	add.w	r1, r6, #8
 800d060:	4638      	mov	r0, r7
 800d062:	f7ff faf3 	bl	800c64c <uxr_serialize_DATAWRITER_Representation>
 800d066:	4004      	ands	r4, r0
 800d068:	4620      	mov	r0, r4
 800d06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d06c:	7a31      	ldrb	r1, [r6, #8]
 800d06e:	4638      	mov	r0, r7
 800d070:	f7fc fa44 	bl	80094fc <ucdr_serialize_uint8_t>
 800d074:	2800      	cmp	r0, #0
 800d076:	d0ee      	beq.n	800d056 <uxr_serialize_CREATE_Payload+0x42>
 800d078:	7a33      	ldrb	r3, [r6, #8]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d001      	beq.n	800d082 <uxr_serialize_CREATE_Payload+0x6e>
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d1ea      	bne.n	800d058 <uxr_serialize_CREATE_Payload+0x44>
 800d082:	68f1      	ldr	r1, [r6, #12]
 800d084:	4638      	mov	r0, r7
 800d086:	f004 ffef 	bl	8012068 <ucdr_serialize_string>
 800d08a:	4004      	ands	r4, r0
 800d08c:	e7e4      	b.n	800d058 <uxr_serialize_CREATE_Payload+0x44>
 800d08e:	7a31      	ldrb	r1, [r6, #8]
 800d090:	4638      	mov	r0, r7
 800d092:	f7fc fa33 	bl	80094fc <ucdr_serialize_uint8_t>
 800d096:	4605      	mov	r5, r0
 800d098:	b158      	cbz	r0, 800d0b2 <uxr_serialize_CREATE_Payload+0x9e>
 800d09a:	7a33      	ldrb	r3, [r6, #8]
 800d09c:	2b02      	cmp	r3, #2
 800d09e:	d034      	beq.n	800d10a <uxr_serialize_CREATE_Payload+0xf6>
 800d0a0:	2b03      	cmp	r3, #3
 800d0a2:	d106      	bne.n	800d0b2 <uxr_serialize_CREATE_Payload+0x9e>
 800d0a4:	68f2      	ldr	r2, [r6, #12]
 800d0a6:	f106 0110 	add.w	r1, r6, #16
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	f004 ffb0 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	f004 feb5 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d0be:	4028      	ands	r0, r5
 800d0c0:	4004      	ands	r4, r0
 800d0c2:	e7c9      	b.n	800d058 <uxr_serialize_CREATE_Payload+0x44>
 800d0c4:	f106 0108 	add.w	r1, r6, #8
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f7ff f9b9 	bl	800c440 <uxr_serialize_CLIENT_Representation>
 800d0ce:	4004      	ands	r4, r0
 800d0d0:	e7c2      	b.n	800d058 <uxr_serialize_CREATE_Payload+0x44>
 800d0d2:	f106 0108 	add.w	r1, r6, #8
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f7ff fa6e 	bl	800c5b8 <uxr_serialize_AGENT_Representation>
 800d0dc:	4004      	ands	r4, r0
 800d0de:	e7bb      	b.n	800d058 <uxr_serialize_CREATE_Payload+0x44>
 800d0e0:	7a31      	ldrb	r1, [r6, #8]
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	f7fc fa0a 	bl	80094fc <ucdr_serialize_uint8_t>
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	b130      	cbz	r0, 800d0fa <uxr_serialize_CREATE_Payload+0xe6>
 800d0ec:	7a33      	ldrb	r3, [r6, #8]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d011      	beq.n	800d116 <uxr_serialize_CREATE_Payload+0x102>
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	d015      	beq.n	800d122 <uxr_serialize_CREATE_Payload+0x10e>
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d00d      	beq.n	800d116 <uxr_serialize_CREATE_Payload+0x102>
 800d0fa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800d0fe:	4638      	mov	r0, r7
 800d100:	f7fc ff38 	bl	8009f74 <ucdr_serialize_int16_t>
 800d104:	4028      	ands	r0, r5
 800d106:	4004      	ands	r4, r0
 800d108:	e7a6      	b.n	800d058 <uxr_serialize_CREATE_Payload+0x44>
 800d10a:	68f1      	ldr	r1, [r6, #12]
 800d10c:	4638      	mov	r0, r7
 800d10e:	f004 ffab 	bl	8012068 <ucdr_serialize_string>
 800d112:	4605      	mov	r5, r0
 800d114:	e7cd      	b.n	800d0b2 <uxr_serialize_CREATE_Payload+0x9e>
 800d116:	68f1      	ldr	r1, [r6, #12]
 800d118:	4638      	mov	r0, r7
 800d11a:	f004 ffa5 	bl	8012068 <ucdr_serialize_string>
 800d11e:	4605      	mov	r5, r0
 800d120:	e7eb      	b.n	800d0fa <uxr_serialize_CREATE_Payload+0xe6>
 800d122:	68f2      	ldr	r2, [r6, #12]
 800d124:	f106 0110 	add.w	r1, r6, #16
 800d128:	4638      	mov	r0, r7
 800d12a:	f004 ff71 	bl	8012010 <ucdr_serialize_sequence_uint8_t>
 800d12e:	4605      	mov	r5, r0
 800d130:	e7e3      	b.n	800d0fa <uxr_serialize_CREATE_Payload+0xe6>
 800d132:	bf00      	nop

0800d134 <uxr_deserialize_GET_INFO_Payload>:
 800d134:	b570      	push	{r4, r5, r6, lr}
 800d136:	2202      	movs	r2, #2
 800d138:	4605      	mov	r5, r0
 800d13a:	460e      	mov	r6, r1
 800d13c:	f004 fed8 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d140:	2202      	movs	r2, #2
 800d142:	18b1      	adds	r1, r6, r2
 800d144:	4604      	mov	r4, r0
 800d146:	4628      	mov	r0, r5
 800d148:	f004 fed2 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d14c:	1d31      	adds	r1, r6, #4
 800d14e:	4004      	ands	r4, r0
 800d150:	4628      	mov	r0, r5
 800d152:	f7fc fd19 	bl	8009b88 <ucdr_deserialize_uint32_t>
 800d156:	b2e4      	uxtb	r4, r4
 800d158:	4020      	ands	r0, r4
 800d15a:	bd70      	pop	{r4, r5, r6, pc}

0800d15c <uxr_serialize_DELETE_Payload>:
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	2202      	movs	r2, #2
 800d160:	4605      	mov	r5, r0
 800d162:	460e      	mov	r6, r1
 800d164:	f004 fe60 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d168:	2202      	movs	r2, #2
 800d16a:	4604      	mov	r4, r0
 800d16c:	18b1      	adds	r1, r6, r2
 800d16e:	4628      	mov	r0, r5
 800d170:	f004 fe5a 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d174:	4020      	ands	r0, r4
 800d176:	b2c0      	uxtb	r0, r0
 800d178:	bd70      	pop	{r4, r5, r6, pc}
 800d17a:	bf00      	nop

0800d17c <uxr_deserialize_STATUS_AGENT_Payload>:
 800d17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d180:	4605      	mov	r5, r0
 800d182:	460e      	mov	r6, r1
 800d184:	f7fc f9d0 	bl	8009528 <ucdr_deserialize_uint8_t>
 800d188:	1c71      	adds	r1, r6, #1
 800d18a:	4604      	mov	r4, r0
 800d18c:	4628      	mov	r0, r5
 800d18e:	f7fc f9cb 	bl	8009528 <ucdr_deserialize_uint8_t>
 800d192:	2204      	movs	r2, #4
 800d194:	18b1      	adds	r1, r6, r2
 800d196:	4680      	mov	r8, r0
 800d198:	4628      	mov	r0, r5
 800d19a:	f004 fea9 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d19e:	f106 0108 	add.w	r1, r6, #8
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f004 fea2 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d1ac:	ea04 0308 	and.w	r3, r4, r8
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	ea03 0407 	and.w	r4, r3, r7
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	4607      	mov	r7, r0
 800d1ba:	f106 010a 	add.w	r1, r6, #10
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f004 fe96 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d1c4:	f106 010c 	add.w	r1, r6, #12
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	461d      	mov	r5, r3
 800d1ce:	f7fc f97d 	bl	80094cc <ucdr_deserialize_bool>
 800d1d2:	403c      	ands	r4, r7
 800d1d4:	4025      	ands	r5, r4
 800d1d6:	4028      	ands	r0, r5
 800d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1dc <uxr_deserialize_STATUS_Payload>:
 800d1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	4606      	mov	r6, r0
 800d1e4:	460f      	mov	r7, r1
 800d1e6:	f004 fe83 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	18b9      	adds	r1, r7, r2
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f004 fe7d 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d1f6:	1d39      	adds	r1, r7, #4
 800d1f8:	4680      	mov	r8, r0
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7fc f994 	bl	8009528 <ucdr_deserialize_uint8_t>
 800d200:	1d79      	adds	r1, r7, #5
 800d202:	4604      	mov	r4, r0
 800d204:	4630      	mov	r0, r6
 800d206:	f7fc f98f 	bl	8009528 <ucdr_deserialize_uint8_t>
 800d20a:	ea05 0508 	and.w	r5, r5, r8
 800d20e:	402c      	ands	r4, r5
 800d210:	4020      	ands	r0, r4
 800d212:	b2c0      	uxtb	r0, r0
 800d214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d218 <uxr_serialize_INFO_Payload>:
 800d218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d21c:	2202      	movs	r2, #2
 800d21e:	460c      	mov	r4, r1
 800d220:	4605      	mov	r5, r0
 800d222:	f004 fe01 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d226:	2202      	movs	r2, #2
 800d228:	18a1      	adds	r1, r4, r2
 800d22a:	4680      	mov	r8, r0
 800d22c:	4628      	mov	r0, r5
 800d22e:	f004 fdfb 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d232:	7921      	ldrb	r1, [r4, #4]
 800d234:	4607      	mov	r7, r0
 800d236:	4628      	mov	r0, r5
 800d238:	f7fc f960 	bl	80094fc <ucdr_serialize_uint8_t>
 800d23c:	7961      	ldrb	r1, [r4, #5]
 800d23e:	4606      	mov	r6, r0
 800d240:	4628      	mov	r0, r5
 800d242:	f7fc f95b 	bl	80094fc <ucdr_serialize_uint8_t>
 800d246:	ea08 0807 	and.w	r8, r8, r7
 800d24a:	ea06 0608 	and.w	r6, r6, r8
 800d24e:	4006      	ands	r6, r0
 800d250:	7a21      	ldrb	r1, [r4, #8]
 800d252:	4628      	mov	r0, r5
 800d254:	f7fc f924 	bl	80094a0 <ucdr_serialize_bool>
 800d258:	7a23      	ldrb	r3, [r4, #8]
 800d25a:	b2f7      	uxtb	r7, r6
 800d25c:	4606      	mov	r6, r0
 800d25e:	b96b      	cbnz	r3, 800d27c <uxr_serialize_INFO_Payload+0x64>
 800d260:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800d264:	4628      	mov	r0, r5
 800d266:	f7fc f91b 	bl	80094a0 <ucdr_serialize_bool>
 800d26a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800d26e:	4030      	ands	r0, r6
 800d270:	b2c6      	uxtb	r6, r0
 800d272:	b983      	cbnz	r3, 800d296 <uxr_serialize_INFO_Payload+0x7e>
 800d274:	ea06 0007 	and.w	r0, r6, r7
 800d278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d27c:	7b21      	ldrb	r1, [r4, #12]
 800d27e:	4628      	mov	r0, r5
 800d280:	f7fc f93c 	bl	80094fc <ucdr_serialize_uint8_t>
 800d284:	b188      	cbz	r0, 800d2aa <uxr_serialize_INFO_Payload+0x92>
 800d286:	f104 010c 	add.w	r1, r4, #12
 800d28a:	4628      	mov	r0, r5
 800d28c:	f7ff fa06 	bl	800c69c <uxr_serialize_ObjectVariant.part.0>
 800d290:	4030      	ands	r0, r6
 800d292:	b2c6      	uxtb	r6, r0
 800d294:	e7e4      	b.n	800d260 <uxr_serialize_INFO_Payload+0x48>
 800d296:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800d29a:	4628      	mov	r0, r5
 800d29c:	f7ff fdb2 	bl	800ce04 <uxr_serialize_ActivityInfoVariant>
 800d2a0:	4006      	ands	r6, r0
 800d2a2:	ea06 0007 	and.w	r0, r6, r7
 800d2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	e7d8      	b.n	800d260 <uxr_serialize_INFO_Payload+0x48>
 800d2ae:	bf00      	nop

0800d2b0 <uxr_serialize_READ_DATA_Payload>:
 800d2b0:	b570      	push	{r4, r5, r6, lr}
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	460e      	mov	r6, r1
 800d2b8:	f004 fdb6 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d2bc:	2202      	movs	r2, #2
 800d2be:	18b1      	adds	r1, r6, r2
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	f004 fdb0 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d2c8:	1d31      	adds	r1, r6, #4
 800d2ca:	4004      	ands	r4, r0
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f7ff fe5d 	bl	800cf8c <uxr_serialize_ReadSpecification>
 800d2d2:	b2e4      	uxtb	r4, r4
 800d2d4:	4020      	ands	r0, r4
 800d2d6:	bd70      	pop	{r4, r5, r6, pc}

0800d2d8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	2202      	movs	r2, #2
 800d2dc:	4605      	mov	r5, r0
 800d2de:	460e      	mov	r6, r1
 800d2e0:	f004 fda2 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d2e4:	2202      	movs	r2, #2
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	18b1      	adds	r1, r6, r2
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f004 fd9c 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d2f0:	4020      	ands	r0, r4
 800d2f2:	b2c0      	uxtb	r0, r0
 800d2f4:	bd70      	pop	{r4, r5, r6, pc}
 800d2f6:	bf00      	nop

0800d2f8 <uxr_serialize_ACKNACK_Payload>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	460e      	mov	r6, r1
 800d2fe:	f834 1b02 	ldrh.w	r1, [r4], #2
 800d302:	4605      	mov	r5, r0
 800d304:	f7fc f926 	bl	8009554 <ucdr_serialize_uint16_t>
 800d308:	2202      	movs	r2, #2
 800d30a:	4621      	mov	r1, r4
 800d30c:	4604      	mov	r4, r0
 800d30e:	4628      	mov	r0, r5
 800d310:	f004 fd8a 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d314:	7931      	ldrb	r1, [r6, #4]
 800d316:	4004      	ands	r4, r0
 800d318:	4628      	mov	r0, r5
 800d31a:	f7fc f8ef 	bl	80094fc <ucdr_serialize_uint8_t>
 800d31e:	b2e4      	uxtb	r4, r4
 800d320:	4020      	ands	r0, r4
 800d322:	bd70      	pop	{r4, r5, r6, pc}

0800d324 <uxr_deserialize_ACKNACK_Payload>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	4605      	mov	r5, r0
 800d328:	460e      	mov	r6, r1
 800d32a:	f7fc fa13 	bl	8009754 <ucdr_deserialize_uint16_t>
 800d32e:	2202      	movs	r2, #2
 800d330:	18b1      	adds	r1, r6, r2
 800d332:	4604      	mov	r4, r0
 800d334:	4628      	mov	r0, r5
 800d336:	f004 fddb 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d33a:	1d31      	adds	r1, r6, #4
 800d33c:	4004      	ands	r4, r0
 800d33e:	4628      	mov	r0, r5
 800d340:	f7fc f8f2 	bl	8009528 <ucdr_deserialize_uint8_t>
 800d344:	b2e4      	uxtb	r4, r4
 800d346:	4020      	ands	r0, r4
 800d348:	bd70      	pop	{r4, r5, r6, pc}
 800d34a:	bf00      	nop

0800d34c <uxr_serialize_HEARTBEAT_Payload>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	460d      	mov	r5, r1
 800d350:	8809      	ldrh	r1, [r1, #0]
 800d352:	4606      	mov	r6, r0
 800d354:	f7fc f8fe 	bl	8009554 <ucdr_serialize_uint16_t>
 800d358:	8869      	ldrh	r1, [r5, #2]
 800d35a:	4604      	mov	r4, r0
 800d35c:	4630      	mov	r0, r6
 800d35e:	f7fc f8f9 	bl	8009554 <ucdr_serialize_uint16_t>
 800d362:	7929      	ldrb	r1, [r5, #4]
 800d364:	4004      	ands	r4, r0
 800d366:	4630      	mov	r0, r6
 800d368:	f7fc f8c8 	bl	80094fc <ucdr_serialize_uint8_t>
 800d36c:	b2e4      	uxtb	r4, r4
 800d36e:	4020      	ands	r0, r4
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	bf00      	nop

0800d374 <uxr_deserialize_HEARTBEAT_Payload>:
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	4605      	mov	r5, r0
 800d378:	460e      	mov	r6, r1
 800d37a:	f7fc f9eb 	bl	8009754 <ucdr_deserialize_uint16_t>
 800d37e:	1cb1      	adds	r1, r6, #2
 800d380:	4604      	mov	r4, r0
 800d382:	4628      	mov	r0, r5
 800d384:	f7fc f9e6 	bl	8009754 <ucdr_deserialize_uint16_t>
 800d388:	1d31      	adds	r1, r6, #4
 800d38a:	4004      	ands	r4, r0
 800d38c:	4628      	mov	r0, r5
 800d38e:	f7fc f8cb 	bl	8009528 <ucdr_deserialize_uint8_t>
 800d392:	b2e4      	uxtb	r4, r4
 800d394:	4020      	ands	r0, r4
 800d396:	bd70      	pop	{r4, r5, r6, pc}

0800d398 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39c:	4605      	mov	r5, r0
 800d39e:	460e      	mov	r6, r1
 800d3a0:	f7fc ff74 	bl	800a28c <ucdr_deserialize_int32_t>
 800d3a4:	1d31      	adds	r1, r6, #4
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	f7fc fbed 	bl	8009b88 <ucdr_deserialize_uint32_t>
 800d3ae:	f106 0108 	add.w	r1, r6, #8
 800d3b2:	4680      	mov	r8, r0
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f7fc ff69 	bl	800a28c <ucdr_deserialize_int32_t>
 800d3ba:	f106 010c 	add.w	r1, r6, #12
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	f7fc fbe1 	bl	8009b88 <ucdr_deserialize_uint32_t>
 800d3c6:	ea07 0708 	and.w	r7, r7, r8
 800d3ca:	403c      	ands	r4, r7
 800d3cc:	f106 0110 	add.w	r1, r6, #16
 800d3d0:	4004      	ands	r4, r0
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	f7fc ff5a 	bl	800a28c <ucdr_deserialize_int32_t>
 800d3d8:	f106 0114 	add.w	r1, r6, #20
 800d3dc:	4607      	mov	r7, r0
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f7fc fbd2 	bl	8009b88 <ucdr_deserialize_uint32_t>
 800d3e4:	b2e4      	uxtb	r4, r4
 800d3e6:	403c      	ands	r4, r7
 800d3e8:	4020      	ands	r0, r4
 800d3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ee:	bf00      	nop

0800d3f0 <uxr_serialize_SampleIdentity>:
 800d3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f4:	220c      	movs	r2, #12
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	460d      	mov	r5, r1
 800d3fa:	f004 fd15 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d3fe:	2203      	movs	r2, #3
 800d400:	f105 010c 	add.w	r1, r5, #12
 800d404:	4607      	mov	r7, r0
 800d406:	4620      	mov	r0, r4
 800d408:	f004 fd0e 	bl	8011e28 <ucdr_serialize_array_uint8_t>
 800d40c:	7be9      	ldrb	r1, [r5, #15]
 800d40e:	4680      	mov	r8, r0
 800d410:	4620      	mov	r0, r4
 800d412:	f7fc f873 	bl	80094fc <ucdr_serialize_uint8_t>
 800d416:	6929      	ldr	r1, [r5, #16]
 800d418:	4606      	mov	r6, r0
 800d41a:	4620      	mov	r0, r4
 800d41c:	f7fc fe9e 	bl	800a15c <ucdr_serialize_int32_t>
 800d420:	6969      	ldr	r1, [r5, #20]
 800d422:	4603      	mov	r3, r0
 800d424:	4620      	mov	r0, r4
 800d426:	ea07 0708 	and.w	r7, r7, r8
 800d42a:	461c      	mov	r4, r3
 800d42c:	f7fc fa7c 	bl	8009928 <ucdr_serialize_uint32_t>
 800d430:	403e      	ands	r6, r7
 800d432:	4034      	ands	r4, r6
 800d434:	4020      	ands	r0, r4
 800d436:	b2c0      	uxtb	r0, r0
 800d438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d43c <uxr_deserialize_SampleIdentity>:
 800d43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d440:	220c      	movs	r2, #12
 800d442:	4604      	mov	r4, r0
 800d444:	460d      	mov	r5, r1
 800d446:	f004 fd53 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d44a:	2203      	movs	r2, #3
 800d44c:	f105 010c 	add.w	r1, r5, #12
 800d450:	4607      	mov	r7, r0
 800d452:	4620      	mov	r0, r4
 800d454:	f004 fd4c 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 800d458:	f105 010f 	add.w	r1, r5, #15
 800d45c:	4680      	mov	r8, r0
 800d45e:	4620      	mov	r0, r4
 800d460:	f7fc f862 	bl	8009528 <ucdr_deserialize_uint8_t>
 800d464:	f105 0110 	add.w	r1, r5, #16
 800d468:	4606      	mov	r6, r0
 800d46a:	4620      	mov	r0, r4
 800d46c:	f7fc ff0e 	bl	800a28c <ucdr_deserialize_int32_t>
 800d470:	f105 0114 	add.w	r1, r5, #20
 800d474:	4603      	mov	r3, r0
 800d476:	4620      	mov	r0, r4
 800d478:	ea07 0708 	and.w	r7, r7, r8
 800d47c:	461c      	mov	r4, r3
 800d47e:	f7fc fb83 	bl	8009b88 <ucdr_deserialize_uint32_t>
 800d482:	403e      	ands	r6, r7
 800d484:	4034      	ands	r4, r6
 800d486:	4020      	ands	r0, r4
 800d488:	b2c0      	uxtb	r0, r0
 800d48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d48e:	bf00      	nop

0800d490 <rcl_client_get_rmw_handle>:
 800d490:	b118      	cbz	r0, 800d49a <rcl_client_get_rmw_handle+0xa>
 800d492:	6800      	ldr	r0, [r0, #0]
 800d494:	b108      	cbz	r0, 800d49a <rcl_client_get_rmw_handle+0xa>
 800d496:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800d49a:	4770      	bx	lr

0800d49c <rcl_send_request>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	b1e8      	cbz	r0, 800d4de <rcl_send_request+0x42>
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	6800      	ldr	r0, [r0, #0]
 800d4a6:	b1d0      	cbz	r0, 800d4de <rcl_send_request+0x42>
 800d4a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800d4ac:	b1bb      	cbz	r3, 800d4de <rcl_send_request+0x42>
 800d4ae:	460e      	mov	r6, r1
 800d4b0:	b1d1      	cbz	r1, 800d4e8 <rcl_send_request+0x4c>
 800d4b2:	4615      	mov	r5, r2
 800d4b4:	b1c2      	cbz	r2, 800d4e8 <rcl_send_request+0x4c>
 800d4b6:	2105      	movs	r1, #5
 800d4b8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800d4bc:	f002 fd70 	bl	800ffa0 <__atomic_load_8>
 800d4c0:	6823      	ldr	r3, [r4, #0]
 800d4c2:	e9c5 0100 	strd	r0, r1, [r5]
 800d4c6:	462a      	mov	r2, r5
 800d4c8:	4631      	mov	r1, r6
 800d4ca:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800d4ce:	f003 ff1b 	bl	8011308 <rmw_send_request>
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	b160      	cbz	r0, 800d4f0 <rcl_send_request+0x54>
 800d4d6:	2601      	movs	r6, #1
 800d4d8:	4630      	mov	r0, r6
 800d4da:	b002      	add	sp, #8
 800d4dc:	bd70      	pop	{r4, r5, r6, pc}
 800d4de:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	b002      	add	sp, #8
 800d4e6:	bd70      	pop	{r4, r5, r6, pc}
 800d4e8:	260b      	movs	r6, #11
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	b002      	add	sp, #8
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	2105      	movs	r1, #5
 800d4f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4f8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800d4fc:	9100      	str	r1, [sp, #0]
 800d4fe:	f002 fdbb 	bl	8010078 <__atomic_exchange_8>
 800d502:	4630      	mov	r0, r6
 800d504:	b002      	add	sp, #8
 800d506:	bd70      	pop	{r4, r5, r6, pc}

0800d508 <rcl_take_response>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	468e      	mov	lr, r1
 800d50c:	460c      	mov	r4, r1
 800d50e:	4616      	mov	r6, r2
 800d510:	4605      	mov	r5, r0
 800d512:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d516:	b08c      	sub	sp, #48	; 0x30
 800d518:	f10d 0c18 	add.w	ip, sp, #24
 800d51c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d520:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d524:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d528:	b35d      	cbz	r5, 800d582 <rcl_take_response+0x7a>
 800d52a:	682b      	ldr	r3, [r5, #0]
 800d52c:	b34b      	cbz	r3, 800d582 <rcl_take_response+0x7a>
 800d52e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800d532:	b330      	cbz	r0, 800d582 <rcl_take_response+0x7a>
 800d534:	b346      	cbz	r6, 800d588 <rcl_take_response+0x80>
 800d536:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d590 <rcl_take_response+0x88>
 800d53a:	2300      	movs	r3, #0
 800d53c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d540:	4632      	mov	r2, r6
 800d542:	f10d 0307 	add.w	r3, sp, #7
 800d546:	a902      	add	r1, sp, #8
 800d548:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d54c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d550:	f003 ffe2 	bl	8011518 <rmw_take_response>
 800d554:	4605      	mov	r5, r0
 800d556:	b9c8      	cbnz	r0, 800d58c <rcl_take_response+0x84>
 800d558:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d55c:	f240 13f5 	movw	r3, #501	; 0x1f5
 800d560:	2a00      	cmp	r2, #0
 800d562:	bf08      	it	eq
 800d564:	461d      	moveq	r5, r3
 800d566:	f10d 0e18 	add.w	lr, sp, #24
 800d56a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d56e:	46a4      	mov	ip, r4
 800d570:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d574:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d578:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d57c:	4628      	mov	r0, r5
 800d57e:	b00c      	add	sp, #48	; 0x30
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800d586:	e7ee      	b.n	800d566 <rcl_take_response+0x5e>
 800d588:	250b      	movs	r5, #11
 800d58a:	e7ec      	b.n	800d566 <rcl_take_response+0x5e>
 800d58c:	2501      	movs	r5, #1
 800d58e:	e7ea      	b.n	800d566 <rcl_take_response+0x5e>
	...

0800d598 <rcl_client_is_valid>:
 800d598:	b130      	cbz	r0, 800d5a8 <rcl_client_is_valid+0x10>
 800d59a:	6800      	ldr	r0, [r0, #0]
 800d59c:	b120      	cbz	r0, 800d5a8 <rcl_client_is_valid+0x10>
 800d59e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800d5a2:	3800      	subs	r0, #0
 800d5a4:	bf18      	it	ne
 800d5a6:	2001      	movne	r0, #1
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop

0800d5ac <rcl_convert_rmw_ret_to_rcl_ret>:
 800d5ac:	280b      	cmp	r0, #11
 800d5ae:	dc0d      	bgt.n	800d5cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	db09      	blt.n	800d5c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d5b4:	280b      	cmp	r0, #11
 800d5b6:	d807      	bhi.n	800d5c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d5b8:	e8df f000 	tbb	[pc, r0]
 800d5bc:	07060607 	.word	0x07060607
 800d5c0:	06060606 	.word	0x06060606
 800d5c4:	07070606 	.word	0x07070606
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	4770      	bx	lr
 800d5cc:	28cb      	cmp	r0, #203	; 0xcb
 800d5ce:	bf18      	it	ne
 800d5d0:	2001      	movne	r0, #1
 800d5d2:	4770      	bx	lr

0800d5d4 <rcl_get_zero_initialized_context>:
 800d5d4:	4a03      	ldr	r2, [pc, #12]	; (800d5e4 <rcl_get_zero_initialized_context+0x10>)
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	4770      	bx	lr
 800d5e4:	08015d54 	.word	0x08015d54

0800d5e8 <rcl_context_is_valid>:
 800d5e8:	b118      	cbz	r0, 800d5f2 <rcl_context_is_valid+0xa>
 800d5ea:	6840      	ldr	r0, [r0, #4]
 800d5ec:	3800      	subs	r0, #0
 800d5ee:	bf18      	it	ne
 800d5f0:	2001      	movne	r0, #1
 800d5f2:	4770      	bx	lr

0800d5f4 <__cleanup_context>:
 800d5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	6800      	ldr	r0, [r0, #0]
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	6073      	str	r3, [r6, #4]
 800d600:	2800      	cmp	r0, #0
 800d602:	d049      	beq.n	800d698 <__cleanup_context+0xa4>
 800d604:	6947      	ldr	r7, [r0, #20]
 800d606:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d60a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d60e:	b137      	cbz	r7, 800d61e <__cleanup_context+0x2a>
 800d610:	3014      	adds	r0, #20
 800d612:	f000 f9bb 	bl	800d98c <rcl_init_options_fini>
 800d616:	4607      	mov	r7, r0
 800d618:	2800      	cmp	r0, #0
 800d61a:	d144      	bne.n	800d6a6 <__cleanup_context+0xb2>
 800d61c:	6830      	ldr	r0, [r6, #0]
 800d61e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d620:	b143      	cbz	r3, 800d634 <__cleanup_context+0x40>
 800d622:	3028      	adds	r0, #40	; 0x28
 800d624:	f003 fcb8 	bl	8010f98 <rmw_context_fini>
 800d628:	b118      	cbz	r0, 800d632 <__cleanup_context+0x3e>
 800d62a:	2f00      	cmp	r7, #0
 800d62c:	d03e      	beq.n	800d6ac <__cleanup_context+0xb8>
 800d62e:	f7fb f943 	bl	80088b8 <rcutils_reset_error>
 800d632:	6830      	ldr	r0, [r6, #0]
 800d634:	6a03      	ldr	r3, [r0, #32]
 800d636:	b1db      	cbz	r3, 800d670 <__cleanup_context+0x7c>
 800d638:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800d63c:	2a01      	cmp	r2, #1
 800d63e:	f17c 0100 	sbcs.w	r1, ip, #0
 800d642:	db11      	blt.n	800d668 <__cleanup_context+0x74>
 800d644:	2400      	movs	r4, #0
 800d646:	4625      	mov	r5, r4
 800d648:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d64c:	4649      	mov	r1, r9
 800d64e:	b1b8      	cbz	r0, 800d680 <__cleanup_context+0x8c>
 800d650:	47c0      	blx	r8
 800d652:	6833      	ldr	r3, [r6, #0]
 800d654:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800d658:	3401      	adds	r4, #1
 800d65a:	f145 0500 	adc.w	r5, r5, #0
 800d65e:	4294      	cmp	r4, r2
 800d660:	eb75 010c 	sbcs.w	r1, r5, ip
 800d664:	6a1b      	ldr	r3, [r3, #32]
 800d666:	dbef      	blt.n	800d648 <__cleanup_context+0x54>
 800d668:	4618      	mov	r0, r3
 800d66a:	4649      	mov	r1, r9
 800d66c:	47c0      	blx	r8
 800d66e:	6830      	ldr	r0, [r6, #0]
 800d670:	4649      	mov	r1, r9
 800d672:	47c0      	blx	r8
 800d674:	2300      	movs	r3, #0
 800d676:	e9c6 3300 	strd	r3, r3, [r6]
 800d67a:	4638      	mov	r0, r7
 800d67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d680:	3401      	adds	r4, #1
 800d682:	f145 0500 	adc.w	r5, r5, #0
 800d686:	4294      	cmp	r4, r2
 800d688:	eb75 010c 	sbcs.w	r1, r5, ip
 800d68c:	dbdc      	blt.n	800d648 <__cleanup_context+0x54>
 800d68e:	4618      	mov	r0, r3
 800d690:	4649      	mov	r1, r9
 800d692:	47c0      	blx	r8
 800d694:	6830      	ldr	r0, [r6, #0]
 800d696:	e7eb      	b.n	800d670 <__cleanup_context+0x7c>
 800d698:	4607      	mov	r7, r0
 800d69a:	2300      	movs	r3, #0
 800d69c:	e9c6 3300 	strd	r3, r3, [r6]
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6a6:	f7fb f907 	bl	80088b8 <rcutils_reset_error>
 800d6aa:	e7b7      	b.n	800d61c <__cleanup_context+0x28>
 800d6ac:	f7ff ff7e 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800d6b0:	4607      	mov	r7, r0
 800d6b2:	e7bc      	b.n	800d62e <__cleanup_context+0x3a>

0800d6b4 <rcl_init>:
 800d6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b8:	1e05      	subs	r5, r0, #0
 800d6ba:	b09e      	sub	sp, #120	; 0x78
 800d6bc:	460e      	mov	r6, r1
 800d6be:	4690      	mov	r8, r2
 800d6c0:	461f      	mov	r7, r3
 800d6c2:	f340 809c 	ble.w	800d7fe <rcl_init+0x14a>
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	f000 809c 	beq.w	800d804 <rcl_init+0x150>
 800d6cc:	f1a1 0e04 	sub.w	lr, r1, #4
 800d6d0:	f04f 0c00 	mov.w	ip, #0
 800d6d4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800d6d8:	f10c 0c01 	add.w	ip, ip, #1
 800d6dc:	2c00      	cmp	r4, #0
 800d6de:	f000 8091 	beq.w	800d804 <rcl_init+0x150>
 800d6e2:	4565      	cmp	r5, ip
 800d6e4:	d1f6      	bne.n	800d6d4 <rcl_init+0x20>
 800d6e6:	f1b8 0f00 	cmp.w	r8, #0
 800d6ea:	f000 808b 	beq.w	800d804 <rcl_init+0x150>
 800d6ee:	f8d8 4000 	ldr.w	r4, [r8]
 800d6f2:	2c00      	cmp	r4, #0
 800d6f4:	f000 8086 	beq.w	800d804 <rcl_init+0x150>
 800d6f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6fa:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800d6fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	f8cc 3000 	str.w	r3, [ip]
 800d708:	a819      	add	r0, sp, #100	; 0x64
 800d70a:	f7fb f8b1 	bl	8008870 <rcutils_allocator_is_valid>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d078      	beq.n	800d804 <rcl_init+0x150>
 800d712:	2f00      	cmp	r7, #0
 800d714:	d076      	beq.n	800d804 <rcl_init+0x150>
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d178      	bne.n	800d80e <rcl_init+0x15a>
 800d71c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d720:	2178      	movs	r1, #120	; 0x78
 800d722:	2001      	movs	r0, #1
 800d724:	4798      	blx	r3
 800d726:	4604      	mov	r4, r0
 800d728:	6038      	str	r0, [r7, #0]
 800d72a:	2800      	cmp	r0, #0
 800d72c:	f000 80b6 	beq.w	800d89c <rcl_init+0x1e8>
 800d730:	a802      	add	r0, sp, #8
 800d732:	f002 ff85 	bl	8010640 <rmw_get_zero_initialized_context>
 800d736:	a902      	add	r1, sp, #8
 800d738:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d73c:	2250      	movs	r2, #80	; 0x50
 800d73e:	ac19      	add	r4, sp, #100	; 0x64
 800d740:	f007 f9a3 	bl	8014a8a <memcpy>
 800d744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d746:	f8d7 e000 	ldr.w	lr, [r7]
 800d74a:	46f4      	mov	ip, lr
 800d74c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	f8cc 3000 	str.w	r3, [ip]
 800d756:	f10e 0114 	add.w	r1, lr, #20
 800d75a:	4640      	mov	r0, r8
 800d75c:	f000 f940 	bl	800d9e0 <rcl_init_options_copy>
 800d760:	4604      	mov	r4, r0
 800d762:	2800      	cmp	r0, #0
 800d764:	d144      	bne.n	800d7f0 <rcl_init+0x13c>
 800d766:	f8d7 9000 	ldr.w	r9, [r7]
 800d76a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800d76e:	f8c9 0020 	str.w	r0, [r9, #32]
 800d772:	f8c9 5018 	str.w	r5, [r9, #24]
 800d776:	f8c9 801c 	str.w	r8, [r9, #28]
 800d77a:	2d00      	cmp	r5, #0
 800d77c:	d04e      	beq.n	800d81c <rcl_init+0x168>
 800d77e:	2e00      	cmp	r6, #0
 800d780:	d04c      	beq.n	800d81c <rcl_init+0x168>
 800d782:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d786:	2104      	movs	r1, #4
 800d788:	4628      	mov	r0, r5
 800d78a:	4798      	blx	r3
 800d78c:	f8c9 0020 	str.w	r0, [r9, #32]
 800d790:	f8d7 9000 	ldr.w	r9, [r7]
 800d794:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800d798:	46ca      	mov	sl, r9
 800d79a:	b343      	cbz	r3, 800d7ee <rcl_init+0x13a>
 800d79c:	2d01      	cmp	r5, #1
 800d79e:	f178 0300 	sbcs.w	r3, r8, #0
 800d7a2:	db3b      	blt.n	800d81c <rcl_init+0x168>
 800d7a4:	2400      	movs	r4, #0
 800d7a6:	3e04      	subs	r6, #4
 800d7a8:	46a1      	mov	r9, r4
 800d7aa:	e00b      	b.n	800d7c4 <rcl_init+0x110>
 800d7ac:	6831      	ldr	r1, [r6, #0]
 800d7ae:	f007 f96c 	bl	8014a8a <memcpy>
 800d7b2:	3401      	adds	r4, #1
 800d7b4:	f149 0900 	adc.w	r9, r9, #0
 800d7b8:	45c8      	cmp	r8, r9
 800d7ba:	bf08      	it	eq
 800d7bc:	42a5      	cmpeq	r5, r4
 800d7be:	d02b      	beq.n	800d818 <rcl_init+0x164>
 800d7c0:	f8d7 a000 	ldr.w	sl, [r7]
 800d7c4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800d7c8:	f7f2 fd14 	bl	80001f4 <strlen>
 800d7cc:	1c42      	adds	r2, r0, #1
 800d7ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d7d0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d7d2:	f8da a020 	ldr.w	sl, [sl, #32]
 800d7d6:	9201      	str	r2, [sp, #4]
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4798      	blx	r3
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	9a01      	ldr	r2, [sp, #4]
 800d7e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d1de      	bne.n	800d7ac <rcl_init+0xf8>
 800d7ee:	240a      	movs	r4, #10
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f7ff feff 	bl	800d5f4 <__cleanup_context>
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	b01e      	add	sp, #120	; 0x78
 800d7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fe:	2900      	cmp	r1, #0
 800d800:	f43f af71 	beq.w	800d6e6 <rcl_init+0x32>
 800d804:	240b      	movs	r4, #11
 800d806:	4620      	mov	r0, r4
 800d808:	b01e      	add	sp, #120	; 0x78
 800d80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80e:	2464      	movs	r4, #100	; 0x64
 800d810:	4620      	mov	r0, r4
 800d812:	b01e      	add	sp, #120	; 0x78
 800d814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d818:	f8d7 9000 	ldr.w	r9, [r7]
 800d81c:	4926      	ldr	r1, [pc, #152]	; (800d8b8 <rcl_init+0x204>)
 800d81e:	680b      	ldr	r3, [r1, #0]
 800d820:	3301      	adds	r3, #1
 800d822:	d036      	beq.n	800d892 <rcl_init+0x1de>
 800d824:	600b      	str	r3, [r1, #0]
 800d826:	461a      	mov	r2, r3
 800d828:	2400      	movs	r4, #0
 800d82a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d82e:	607b      	str	r3, [r7, #4]
 800d830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d832:	3301      	adds	r3, #1
 800d834:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800d838:	d034      	beq.n	800d8a4 <rcl_init+0x1f0>
 800d83a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800d83e:	b93b      	cbnz	r3, 800d850 <rcl_init+0x19c>
 800d840:	3030      	adds	r0, #48	; 0x30
 800d842:	f000 f939 	bl	800dab8 <rcl_get_localhost_only>
 800d846:	4604      	mov	r4, r0
 800d848:	2800      	cmp	r0, #0
 800d84a:	d1d1      	bne.n	800d7f0 <rcl_init+0x13c>
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	6958      	ldr	r0, [r3, #20]
 800d850:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d852:	aa18      	add	r2, sp, #96	; 0x60
 800d854:	a917      	add	r1, sp, #92	; 0x5c
 800d856:	f001 f841 	bl	800e8dc <rcl_validate_enclave_name>
 800d85a:	4604      	mov	r4, r0
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d1c7      	bne.n	800d7f0 <rcl_init+0x13c>
 800d860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d862:	b9eb      	cbnz	r3, 800d8a0 <rcl_init+0x1ec>
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	694b      	ldr	r3, [r1, #20]
 800d868:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d86a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d86e:	f000 fc3d 	bl	800e0ec <rcl_get_security_options_from_environment>
 800d872:	4604      	mov	r4, r0
 800d874:	2800      	cmp	r0, #0
 800d876:	d1bb      	bne.n	800d7f0 <rcl_init+0x13c>
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	6948      	ldr	r0, [r1, #20]
 800d87c:	3128      	adds	r1, #40	; 0x28
 800d87e:	3018      	adds	r0, #24
 800d880:	f003 fa54 	bl	8010d2c <rmw_init>
 800d884:	4604      	mov	r4, r0
 800d886:	2800      	cmp	r0, #0
 800d888:	d0bd      	beq.n	800d806 <rcl_init+0x152>
 800d88a:	f7ff fe8f 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800d88e:	4604      	mov	r4, r0
 800d890:	e7ae      	b.n	800d7f0 <rcl_init+0x13c>
 800d892:	2201      	movs	r2, #1
 800d894:	461c      	mov	r4, r3
 800d896:	600a      	str	r2, [r1, #0]
 800d898:	4613      	mov	r3, r2
 800d89a:	e7c6      	b.n	800d82a <rcl_init+0x176>
 800d89c:	240a      	movs	r4, #10
 800d89e:	e7b2      	b.n	800d806 <rcl_init+0x152>
 800d8a0:	2401      	movs	r4, #1
 800d8a2:	e7a5      	b.n	800d7f0 <rcl_init+0x13c>
 800d8a4:	3024      	adds	r0, #36	; 0x24
 800d8a6:	f005 ffe3 	bl	8013870 <rcl_get_default_domain_id>
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d19f      	bne.n	800d7f0 <rcl_init+0x13c>
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	6958      	ldr	r0, [r3, #20]
 800d8b4:	e7c1      	b.n	800d83a <rcl_init+0x186>
 800d8b6:	bf00      	nop
 800d8b8:	200128a4 	.word	0x200128a4

0800d8bc <rcl_get_zero_initialized_init_options>:
 800d8bc:	2000      	movs	r0, #0
 800d8be:	4770      	bx	lr

0800d8c0 <rcl_init_options_init>:
 800d8c0:	b084      	sub	sp, #16
 800d8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8c4:	b097      	sub	sp, #92	; 0x5c
 800d8c6:	ae1d      	add	r6, sp, #116	; 0x74
 800d8c8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d058      	beq.n	800d982 <rcl_init_options_init+0xc2>
 800d8d0:	6803      	ldr	r3, [r0, #0]
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	b133      	cbz	r3, 800d8e4 <rcl_init_options_init+0x24>
 800d8d6:	2464      	movs	r4, #100	; 0x64
 800d8d8:	4620      	mov	r0, r4
 800d8da:	b017      	add	sp, #92	; 0x5c
 800d8dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d8e0:	b004      	add	sp, #16
 800d8e2:	4770      	bx	lr
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7fa ffc3 	bl	8008870 <rcutils_allocator_is_valid>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d049      	beq.n	800d982 <rcl_init_options_init+0xc2>
 800d8ee:	46b4      	mov	ip, r6
 800d8f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d8f4:	ac11      	add	r4, sp, #68	; 0x44
 800d8f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8f8:	f8dc 3000 	ldr.w	r3, [ip]
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d902:	2050      	movs	r0, #80	; 0x50
 800d904:	4798      	blx	r3
 800d906:	4604      	mov	r4, r0
 800d908:	6028      	str	r0, [r5, #0]
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d03b      	beq.n	800d986 <rcl_init_options_init+0xc6>
 800d90e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d912:	4686      	mov	lr, r0
 800d914:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d918:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d91c:	f8dc 3000 	ldr.w	r3, [ip]
 800d920:	f8ce 3000 	str.w	r3, [lr]
 800d924:	a802      	add	r0, sp, #8
 800d926:	f002 fe9b 	bl	8010660 <rmw_get_zero_initialized_init_options>
 800d92a:	f10d 0e08 	add.w	lr, sp, #8
 800d92e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d932:	f104 0c18 	add.w	ip, r4, #24
 800d936:	682f      	ldr	r7, [r5, #0]
 800d938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d93c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d944:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d94c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d950:	ac20      	add	r4, sp, #128	; 0x80
 800d952:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d95a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d95e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d962:	f107 0018 	add.w	r0, r7, #24
 800d966:	f003 f8e9 	bl	8010b3c <rmw_init_options_init>
 800d96a:	4604      	mov	r4, r0
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d0b3      	beq.n	800d8d8 <rcl_init_options_init+0x18>
 800d970:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d974:	6828      	ldr	r0, [r5, #0]
 800d976:	4798      	blx	r3
 800d978:	4620      	mov	r0, r4
 800d97a:	f7ff fe17 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800d97e:	4604      	mov	r4, r0
 800d980:	e7aa      	b.n	800d8d8 <rcl_init_options_init+0x18>
 800d982:	240b      	movs	r4, #11
 800d984:	e7a8      	b.n	800d8d8 <rcl_init_options_init+0x18>
 800d986:	240a      	movs	r4, #10
 800d988:	e7a6      	b.n	800d8d8 <rcl_init_options_init+0x18>
 800d98a:	bf00      	nop

0800d98c <rcl_init_options_fini>:
 800d98c:	b530      	push	{r4, r5, lr}
 800d98e:	b087      	sub	sp, #28
 800d990:	b1f0      	cbz	r0, 800d9d0 <rcl_init_options_fini+0x44>
 800d992:	6803      	ldr	r3, [r0, #0]
 800d994:	4604      	mov	r4, r0
 800d996:	b1db      	cbz	r3, 800d9d0 <rcl_init_options_fini+0x44>
 800d998:	469c      	mov	ip, r3
 800d99a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d99e:	f10d 0e04 	add.w	lr, sp, #4
 800d9a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d9a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d9aa:	f8ce 3000 	str.w	r3, [lr]
 800d9ae:	a801      	add	r0, sp, #4
 800d9b0:	f7fa ff5e 	bl	8008870 <rcutils_allocator_is_valid>
 800d9b4:	b160      	cbz	r0, 800d9d0 <rcl_init_options_fini+0x44>
 800d9b6:	6820      	ldr	r0, [r4, #0]
 800d9b8:	3018      	adds	r0, #24
 800d9ba:	f003 f96f 	bl	8010c9c <rmw_init_options_fini>
 800d9be:	4605      	mov	r5, r0
 800d9c0:	b950      	cbnz	r0, 800d9d8 <rcl_init_options_fini+0x4c>
 800d9c2:	6820      	ldr	r0, [r4, #0]
 800d9c4:	9b02      	ldr	r3, [sp, #8]
 800d9c6:	9905      	ldr	r1, [sp, #20]
 800d9c8:	4798      	blx	r3
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	b007      	add	sp, #28
 800d9ce:	bd30      	pop	{r4, r5, pc}
 800d9d0:	250b      	movs	r5, #11
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	b007      	add	sp, #28
 800d9d6:	bd30      	pop	{r4, r5, pc}
 800d9d8:	f7ff fde8 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800d9dc:	4605      	mov	r5, r0
 800d9de:	e7f8      	b.n	800d9d2 <rcl_init_options_fini+0x46>

0800d9e0 <rcl_init_options_copy>:
 800d9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e4:	b094      	sub	sp, #80	; 0x50
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d058      	beq.n	800da9c <rcl_init_options_copy+0xbc>
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	6800      	ldr	r0, [r0, #0]
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d054      	beq.n	800da9c <rcl_init_options_copy+0xbc>
 800d9f2:	460e      	mov	r6, r1
 800d9f4:	f7fa ff3c 	bl	8008870 <rcutils_allocator_is_valid>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d04f      	beq.n	800da9c <rcl_init_options_copy+0xbc>
 800d9fc:	2e00      	cmp	r6, #0
 800d9fe:	d04d      	beq.n	800da9c <rcl_init_options_copy+0xbc>
 800da00:	6833      	ldr	r3, [r6, #0]
 800da02:	b123      	cbz	r3, 800da0e <rcl_init_options_copy+0x2e>
 800da04:	2464      	movs	r4, #100	; 0x64
 800da06:	4620      	mov	r0, r4
 800da08:	b014      	add	sp, #80	; 0x50
 800da0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da0e:	6827      	ldr	r7, [r4, #0]
 800da10:	46bc      	mov	ip, r7
 800da12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da16:	ad0f      	add	r5, sp, #60	; 0x3c
 800da18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800da1a:	f8dc 3000 	ldr.w	r3, [ip]
 800da1e:	f8d7 8000 	ldr.w	r8, [r7]
 800da22:	602b      	str	r3, [r5, #0]
 800da24:	4619      	mov	r1, r3
 800da26:	2050      	movs	r0, #80	; 0x50
 800da28:	47c0      	blx	r8
 800da2a:	4605      	mov	r5, r0
 800da2c:	6030      	str	r0, [r6, #0]
 800da2e:	b3d0      	cbz	r0, 800daa6 <rcl_init_options_copy+0xc6>
 800da30:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800da34:	4686      	mov	lr, r0
 800da36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800da3e:	f8dc 3000 	ldr.w	r3, [ip]
 800da42:	f8ce 3000 	str.w	r3, [lr]
 800da46:	4668      	mov	r0, sp
 800da48:	f002 fe0a 	bl	8010660 <rmw_get_zero_initialized_init_options>
 800da4c:	46ee      	mov	lr, sp
 800da4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da52:	f105 0c18 	add.w	ip, r5, #24
 800da56:	6824      	ldr	r4, [r4, #0]
 800da58:	6835      	ldr	r5, [r6, #0]
 800da5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da6e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800da72:	e88c 0003 	stmia.w	ip, {r0, r1}
 800da76:	f104 0018 	add.w	r0, r4, #24
 800da7a:	f105 0118 	add.w	r1, r5, #24
 800da7e:	f003 f8c5 	bl	8010c0c <rmw_init_options_copy>
 800da82:	4604      	mov	r4, r0
 800da84:	2800      	cmp	r0, #0
 800da86:	d0be      	beq.n	800da06 <rcl_init_options_copy+0x26>
 800da88:	f7fa ff00 	bl	800888c <rcutils_get_error_string>
 800da8c:	f7fa ff14 	bl	80088b8 <rcutils_reset_error>
 800da90:	4630      	mov	r0, r6
 800da92:	f7ff ff7b 	bl	800d98c <rcl_init_options_fini>
 800da96:	b140      	cbz	r0, 800daaa <rcl_init_options_copy+0xca>
 800da98:	4604      	mov	r4, r0
 800da9a:	e7b4      	b.n	800da06 <rcl_init_options_copy+0x26>
 800da9c:	240b      	movs	r4, #11
 800da9e:	4620      	mov	r0, r4
 800daa0:	b014      	add	sp, #80	; 0x50
 800daa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa6:	240a      	movs	r4, #10
 800daa8:	e7ad      	b.n	800da06 <rcl_init_options_copy+0x26>
 800daaa:	4620      	mov	r0, r4
 800daac:	b014      	add	sp, #80	; 0x50
 800daae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dab2:	f7ff bd7b 	b.w	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800dab6:	bf00      	nop

0800dab8 <rcl_get_localhost_only>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	2300      	movs	r3, #0
 800dabe:	9301      	str	r3, [sp, #4]
 800dac0:	b1b8      	cbz	r0, 800daf2 <rcl_get_localhost_only+0x3a>
 800dac2:	4604      	mov	r4, r0
 800dac4:	a901      	add	r1, sp, #4
 800dac6:	480c      	ldr	r0, [pc, #48]	; (800daf8 <rcl_get_localhost_only+0x40>)
 800dac8:	f002 fb0e 	bl	80100e8 <rcutils_get_env>
 800dacc:	b110      	cbz	r0, 800dad4 <rcl_get_localhost_only+0x1c>
 800dace:	2001      	movs	r0, #1
 800dad0:	b002      	add	sp, #8
 800dad2:	bd10      	pop	{r4, pc}
 800dad4:	9b01      	ldr	r3, [sp, #4]
 800dad6:	b113      	cbz	r3, 800dade <rcl_get_localhost_only+0x26>
 800dad8:	781a      	ldrb	r2, [r3, #0]
 800dada:	2a31      	cmp	r2, #49	; 0x31
 800dadc:	d004      	beq.n	800dae8 <rcl_get_localhost_only+0x30>
 800dade:	2302      	movs	r3, #2
 800dae0:	2000      	movs	r0, #0
 800dae2:	7023      	strb	r3, [r4, #0]
 800dae4:	b002      	add	sp, #8
 800dae6:	bd10      	pop	{r4, pc}
 800dae8:	785b      	ldrb	r3, [r3, #1]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d1f7      	bne.n	800dade <rcl_get_localhost_only+0x26>
 800daee:	2301      	movs	r3, #1
 800daf0:	e7f6      	b.n	800dae0 <rcl_get_localhost_only+0x28>
 800daf2:	200b      	movs	r0, #11
 800daf4:	b002      	add	sp, #8
 800daf6:	bd10      	pop	{r4, pc}
 800daf8:	08015d5c 	.word	0x08015d5c

0800dafc <rcl_get_zero_initialized_node>:
 800dafc:	4a03      	ldr	r2, [pc, #12]	; (800db0c <rcl_get_zero_initialized_node+0x10>)
 800dafe:	4603      	mov	r3, r0
 800db00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db04:	e883 0003 	stmia.w	r3, {r0, r1}
 800db08:	4618      	mov	r0, r3
 800db0a:	4770      	bx	lr
 800db0c:	08015d84 	.word	0x08015d84

0800db10 <rcl_node_init>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	b0a9      	sub	sp, #164	; 0xa4
 800db16:	4604      	mov	r4, r0
 800db18:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800db1c:	a823      	add	r0, sp, #140	; 0x8c
 800db1e:	460e      	mov	r6, r1
 800db20:	4615      	mov	r5, r2
 800db22:	461f      	mov	r7, r3
 800db24:	f006 f8cc 	bl	8013cc0 <rcl_guard_condition_get_default_options>
 800db28:	f1b8 0f00 	cmp.w	r8, #0
 800db2c:	f000 80e6 	beq.w	800dcfc <rcl_node_init+0x1ec>
 800db30:	4640      	mov	r0, r8
 800db32:	f7fa fe9d 	bl	8008870 <rcutils_allocator_is_valid>
 800db36:	2800      	cmp	r0, #0
 800db38:	f000 80e0 	beq.w	800dcfc <rcl_node_init+0x1ec>
 800db3c:	2e00      	cmp	r6, #0
 800db3e:	f000 80dd 	beq.w	800dcfc <rcl_node_init+0x1ec>
 800db42:	2d00      	cmp	r5, #0
 800db44:	f000 80da 	beq.w	800dcfc <rcl_node_init+0x1ec>
 800db48:	2c00      	cmp	r4, #0
 800db4a:	f000 80d7 	beq.w	800dcfc <rcl_node_init+0x1ec>
 800db4e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800db52:	f1b9 0f00 	cmp.w	r9, #0
 800db56:	f040 80fd 	bne.w	800dd54 <rcl_node_init+0x244>
 800db5a:	2f00      	cmp	r7, #0
 800db5c:	f000 80ce 	beq.w	800dcfc <rcl_node_init+0x1ec>
 800db60:	4638      	mov	r0, r7
 800db62:	f7ff fd41 	bl	800d5e8 <rcl_context_is_valid>
 800db66:	4682      	mov	sl, r0
 800db68:	2800      	cmp	r0, #0
 800db6a:	f000 80cd 	beq.w	800dd08 <rcl_node_init+0x1f8>
 800db6e:	464a      	mov	r2, r9
 800db70:	a922      	add	r1, sp, #136	; 0x88
 800db72:	4630      	mov	r0, r6
 800db74:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800db78:	f002 ff14 	bl	80109a4 <rmw_validate_node_name>
 800db7c:	4681      	mov	r9, r0
 800db7e:	2800      	cmp	r0, #0
 800db80:	f040 80be 	bne.w	800dd00 <rcl_node_init+0x1f0>
 800db84:	9822      	ldr	r0, [sp, #136]	; 0x88
 800db86:	2800      	cmp	r0, #0
 800db88:	f040 80f0 	bne.w	800dd6c <rcl_node_init+0x25c>
 800db8c:	4628      	mov	r0, r5
 800db8e:	f7f2 fb31 	bl	80001f4 <strlen>
 800db92:	2800      	cmp	r0, #0
 800db94:	f040 80bb 	bne.w	800dd0e <rcl_node_init+0x1fe>
 800db98:	4d7c      	ldr	r5, [pc, #496]	; (800dd8c <rcl_node_init+0x27c>)
 800db9a:	a922      	add	r1, sp, #136	; 0x88
 800db9c:	2200      	movs	r2, #0
 800db9e:	4628      	mov	r0, r5
 800dba0:	f002 fee2 	bl	8010968 <rmw_validate_namespace>
 800dba4:	4681      	mov	r9, r0
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f040 80aa 	bne.w	800dd00 <rcl_node_init+0x1f0>
 800dbac:	4682      	mov	sl, r0
 800dbae:	9822      	ldr	r0, [sp, #136]	; 0x88
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	f040 80e0 	bne.w	800dd76 <rcl_node_init+0x266>
 800dbb6:	f8d8 3000 	ldr.w	r3, [r8]
 800dbba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbbe:	2078      	movs	r0, #120	; 0x78
 800dbc0:	4798      	blx	r3
 800dbc2:	4681      	mov	r9, r0
 800dbc4:	6060      	str	r0, [r4, #4]
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	f000 80ca 	beq.w	800dd60 <rcl_node_init+0x250>
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800dbd4:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800dbd8:	a808      	add	r0, sp, #32
 800dbda:	f000 f907 	bl	800ddec <rcl_node_get_default_options>
 800dbde:	a908      	add	r1, sp, #32
 800dbe0:	4648      	mov	r0, r9
 800dbe2:	2268      	movs	r2, #104	; 0x68
 800dbe4:	f006 ff51 	bl	8014a8a <memcpy>
 800dbe8:	6861      	ldr	r1, [r4, #4]
 800dbea:	6027      	str	r7, [r4, #0]
 800dbec:	4640      	mov	r0, r8
 800dbee:	f000 f90b 	bl	800de08 <rcl_node_options_copy>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d158      	bne.n	800dca8 <rcl_node_init+0x198>
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f7f2 fafc 	bl	80001f4 <strlen>
 800dbfc:	4428      	add	r0, r5
 800dbfe:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800dc02:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800dc06:	2b2f      	cmp	r3, #47	; 0x2f
 800dc08:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	bf0c      	ite	eq
 800dc10:	4b5f      	ldreq	r3, [pc, #380]	; (800dd90 <rcl_node_init+0x280>)
 800dc12:	4b60      	ldrne	r3, [pc, #384]	; (800dd94 <rcl_node_init+0x284>)
 800dc14:	9302      	str	r3, [sp, #8]
 800dc16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc1a:	9301      	str	r3, [sp, #4]
 800dc1c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dc20:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dc24:	f002 fa88 	bl	8010138 <rcutils_format_string_limit>
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800dc2e:	6818      	ldr	r0, [r3, #0]
 800dc30:	4631      	mov	r1, r6
 800dc32:	3028      	adds	r0, #40	; 0x28
 800dc34:	462a      	mov	r2, r5
 800dc36:	6866      	ldr	r6, [r4, #4]
 800dc38:	f003 facc 	bl	80111d4 <rmw_create_node>
 800dc3c:	6863      	ldr	r3, [r4, #4]
 800dc3e:	66b0      	str	r0, [r6, #104]	; 0x68
 800dc40:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d032      	beq.n	800dcac <rcl_node_init+0x19c>
 800dc46:	f003 fb59 	bl	80112fc <rmw_node_get_graph_guard_condition>
 800dc4a:	4681      	mov	r9, r0
 800dc4c:	b360      	cbz	r0, 800dca8 <rcl_node_init+0x198>
 800dc4e:	f8d8 3000 	ldr.w	r3, [r8]
 800dc52:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dc56:	6866      	ldr	r6, [r4, #4]
 800dc58:	2008      	movs	r0, #8
 800dc5a:	4798      	blx	r3
 800dc5c:	6863      	ldr	r3, [r4, #4]
 800dc5e:	66f0      	str	r0, [r6, #108]	; 0x6c
 800dc60:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800dc64:	f1bb 0f00 	cmp.w	fp, #0
 800dc68:	d020      	beq.n	800dcac <rcl_node_init+0x19c>
 800dc6a:	a806      	add	r0, sp, #24
 800dc6c:	f005 ff98 	bl	8013ba0 <rcl_get_zero_initialized_guard_condition>
 800dc70:	a806      	add	r0, sp, #24
 800dc72:	c803      	ldmia	r0, {r0, r1}
 800dc74:	6863      	ldr	r3, [r4, #4]
 800dc76:	46c4      	mov	ip, r8
 800dc78:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800dc7c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800dc80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc84:	ae23      	add	r6, sp, #140	; 0x8c
 800dc86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dc88:	f8dc 3000 	ldr.w	r3, [ip]
 800dc8c:	6033      	str	r3, [r6, #0]
 800dc8e:	ab28      	add	r3, sp, #160	; 0xa0
 800dc90:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800dc94:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc98:	4649      	mov	r1, r9
 800dc9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc9c:	463a      	mov	r2, r7
 800dc9e:	4670      	mov	r0, lr
 800dca0:	f005 ff88 	bl	8013bb4 <rcl_guard_condition_init_from_rmw>
 800dca4:	4681      	mov	r9, r0
 800dca6:	b328      	cbz	r0, 800dcf4 <rcl_node_init+0x1e4>
 800dca8:	6863      	ldr	r3, [r4, #4]
 800dcaa:	b1f3      	cbz	r3, 800dcea <rcl_node_init+0x1da>
 800dcac:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800dcae:	b128      	cbz	r0, 800dcbc <rcl_node_init+0x1ac>
 800dcb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcb4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dcb8:	4798      	blx	r3
 800dcba:	6863      	ldr	r3, [r4, #4]
 800dcbc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dcbe:	b110      	cbz	r0, 800dcc6 <rcl_node_init+0x1b6>
 800dcc0:	f003 faa0 	bl	8011204 <rmw_destroy_node>
 800dcc4:	6863      	ldr	r3, [r4, #4]
 800dcc6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800dcc8:	b148      	cbz	r0, 800dcde <rcl_node_init+0x1ce>
 800dcca:	f005 ffd3 	bl	8013c74 <rcl_guard_condition_fini>
 800dcce:	6863      	ldr	r3, [r4, #4]
 800dcd0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dcd4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800dcd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcda:	4798      	blx	r3
 800dcdc:	6863      	ldr	r3, [r4, #4]
 800dcde:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dce8:	4798      	blx	r3
 800dcea:	2300      	movs	r3, #0
 800dcec:	e9c4 3300 	strd	r3, r3, [r4]
 800dcf0:	f04f 0901 	mov.w	r9, #1
 800dcf4:	f1ba 0f00 	cmp.w	sl, #0
 800dcf8:	d125      	bne.n	800dd46 <rcl_node_init+0x236>
 800dcfa:	e001      	b.n	800dd00 <rcl_node_init+0x1f0>
 800dcfc:	f04f 090b 	mov.w	r9, #11
 800dd00:	4648      	mov	r0, r9
 800dd02:	b029      	add	sp, #164	; 0xa4
 800dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd08:	f04f 0965 	mov.w	r9, #101	; 0x65
 800dd0c:	e7f8      	b.n	800dd00 <rcl_node_init+0x1f0>
 800dd0e:	782b      	ldrb	r3, [r5, #0]
 800dd10:	2b2f      	cmp	r3, #47	; 0x2f
 800dd12:	f43f af42 	beq.w	800db9a <rcl_node_init+0x8a>
 800dd16:	9503      	str	r5, [sp, #12]
 800dd18:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	4b1e      	ldr	r3, [pc, #120]	; (800dd98 <rcl_node_init+0x288>)
 800dd20:	9302      	str	r3, [sp, #8]
 800dd22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dd2c:	f002 fa04 	bl	8010138 <rcutils_format_string_limit>
 800dd30:	4605      	mov	r5, r0
 800dd32:	b340      	cbz	r0, 800dd86 <rcl_node_init+0x276>
 800dd34:	2200      	movs	r2, #0
 800dd36:	a922      	add	r1, sp, #136	; 0x88
 800dd38:	9222      	str	r2, [sp, #136]	; 0x88
 800dd3a:	f002 fe15 	bl	8010968 <rmw_validate_namespace>
 800dd3e:	4681      	mov	r9, r0
 800dd40:	2800      	cmp	r0, #0
 800dd42:	f43f af34 	beq.w	800dbae <rcl_node_init+0x9e>
 800dd46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd4a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dd4e:	4628      	mov	r0, r5
 800dd50:	4798      	blx	r3
 800dd52:	e7d5      	b.n	800dd00 <rcl_node_init+0x1f0>
 800dd54:	f04f 0964 	mov.w	r9, #100	; 0x64
 800dd58:	4648      	mov	r0, r9
 800dd5a:	b029      	add	sp, #164	; 0xa4
 800dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd60:	f04f 090a 	mov.w	r9, #10
 800dd64:	f1ba 0f00 	cmp.w	sl, #0
 800dd68:	d1ed      	bne.n	800dd46 <rcl_node_init+0x236>
 800dd6a:	e7c9      	b.n	800dd00 <rcl_node_init+0x1f0>
 800dd6c:	f002 fe6c 	bl	8010a48 <rmw_node_name_validation_result_string>
 800dd70:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800dd74:	e7c4      	b.n	800dd00 <rcl_node_init+0x1f0>
 800dd76:	f002 fe09 	bl	801098c <rmw_namespace_validation_result_string>
 800dd7a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800dd7e:	f1ba 0f00 	cmp.w	sl, #0
 800dd82:	d1e0      	bne.n	800dd46 <rcl_node_init+0x236>
 800dd84:	e7bc      	b.n	800dd00 <rcl_node_init+0x1f0>
 800dd86:	f04f 090a 	mov.w	r9, #10
 800dd8a:	e7b9      	b.n	800dd00 <rcl_node_init+0x1f0>
 800dd8c:	08015d74 	.word	0x08015d74
 800dd90:	08015bf8 	.word	0x08015bf8
 800dd94:	08015d7c 	.word	0x08015d7c
 800dd98:	08015d78 	.word	0x08015d78

0800dd9c <rcl_node_is_valid>:
 800dd9c:	b130      	cbz	r0, 800ddac <rcl_node_is_valid+0x10>
 800dd9e:	6843      	ldr	r3, [r0, #4]
 800dda0:	b123      	cbz	r3, 800ddac <rcl_node_is_valid+0x10>
 800dda2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dda4:	b113      	cbz	r3, 800ddac <rcl_node_is_valid+0x10>
 800dda6:	6800      	ldr	r0, [r0, #0]
 800dda8:	f7ff bc1e 	b.w	800d5e8 <rcl_context_is_valid>
 800ddac:	2000      	movs	r0, #0
 800ddae:	4770      	bx	lr

0800ddb0 <rcl_node_get_name>:
 800ddb0:	b120      	cbz	r0, 800ddbc <rcl_node_get_name+0xc>
 800ddb2:	6840      	ldr	r0, [r0, #4]
 800ddb4:	b110      	cbz	r0, 800ddbc <rcl_node_get_name+0xc>
 800ddb6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ddb8:	b100      	cbz	r0, 800ddbc <rcl_node_get_name+0xc>
 800ddba:	6880      	ldr	r0, [r0, #8]
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop

0800ddc0 <rcl_node_get_namespace>:
 800ddc0:	b120      	cbz	r0, 800ddcc <rcl_node_get_namespace+0xc>
 800ddc2:	6840      	ldr	r0, [r0, #4]
 800ddc4:	b110      	cbz	r0, 800ddcc <rcl_node_get_namespace+0xc>
 800ddc6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ddc8:	b100      	cbz	r0, 800ddcc <rcl_node_get_namespace+0xc>
 800ddca:	68c0      	ldr	r0, [r0, #12]
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop

0800ddd0 <rcl_node_get_options>:
 800ddd0:	b128      	cbz	r0, 800ddde <rcl_node_get_options+0xe>
 800ddd2:	6840      	ldr	r0, [r0, #4]
 800ddd4:	b118      	cbz	r0, 800ddde <rcl_node_get_options+0xe>
 800ddd6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	bf08      	it	eq
 800dddc:	2000      	moveq	r0, #0
 800ddde:	4770      	bx	lr

0800dde0 <rcl_node_get_rmw_handle>:
 800dde0:	b110      	cbz	r0, 800dde8 <rcl_node_get_rmw_handle+0x8>
 800dde2:	6840      	ldr	r0, [r0, #4]
 800dde4:	b100      	cbz	r0, 800dde8 <rcl_node_get_rmw_handle+0x8>
 800dde6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop

0800ddec <rcl_node_get_default_options>:
 800ddec:	b510      	push	{r4, lr}
 800ddee:	2268      	movs	r2, #104	; 0x68
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	f006 fd80 	bl	80148f8 <memset>
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7fa fd2b 	bl	8008854 <rcutils_get_default_allocator>
 800ddfe:	2301      	movs	r3, #1
 800de00:	7523      	strb	r3, [r4, #20]
 800de02:	4620      	mov	r0, r4
 800de04:	bd10      	pop	{r4, pc}
 800de06:	bf00      	nop

0800de08 <rcl_node_options_copy>:
 800de08:	b1d0      	cbz	r0, 800de40 <rcl_node_options_copy+0x38>
 800de0a:	b570      	push	{r4, r5, r6, lr}
 800de0c:	460c      	mov	r4, r1
 800de0e:	b1a9      	cbz	r1, 800de3c <rcl_node_options_copy+0x34>
 800de10:	4288      	cmp	r0, r1
 800de12:	4684      	mov	ip, r0
 800de14:	d012      	beq.n	800de3c <rcl_node_options_copy+0x34>
 800de16:	4605      	mov	r5, r0
 800de18:	8a86      	ldrh	r6, [r0, #20]
 800de1a:	468e      	mov	lr, r1
 800de1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800de22:	682b      	ldr	r3, [r5, #0]
 800de24:	f8ce 3000 	str.w	r3, [lr]
 800de28:	f10c 0118 	add.w	r1, ip, #24
 800de2c:	2250      	movs	r2, #80	; 0x50
 800de2e:	82a6      	strh	r6, [r4, #20]
 800de30:	f104 0018 	add.w	r0, r4, #24
 800de34:	f006 fe29 	bl	8014a8a <memcpy>
 800de38:	2000      	movs	r0, #0
 800de3a:	bd70      	pop	{r4, r5, r6, pc}
 800de3c:	200b      	movs	r0, #11
 800de3e:	bd70      	pop	{r4, r5, r6, pc}
 800de40:	200b      	movs	r0, #11
 800de42:	4770      	bx	lr

0800de44 <rcl_node_resolve_name>:
 800de44:	b082      	sub	sp, #8
 800de46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4a:	b091      	sub	sp, #68	; 0x44
 800de4c:	ac1a      	add	r4, sp, #104	; 0x68
 800de4e:	e884 000c 	stmia.w	r4, {r2, r3}
 800de52:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800de56:	2800      	cmp	r0, #0
 800de58:	d03b      	beq.n	800ded2 <rcl_node_resolve_name+0x8e>
 800de5a:	460c      	mov	r4, r1
 800de5c:	4605      	mov	r5, r0
 800de5e:	f7ff ffb7 	bl	800ddd0 <rcl_node_get_options>
 800de62:	2800      	cmp	r0, #0
 800de64:	d037      	beq.n	800ded6 <rcl_node_resolve_name+0x92>
 800de66:	4628      	mov	r0, r5
 800de68:	f7ff ffa2 	bl	800ddb0 <rcl_node_get_name>
 800de6c:	4606      	mov	r6, r0
 800de6e:	4628      	mov	r0, r5
 800de70:	f7ff ffa6 	bl	800ddc0 <rcl_node_get_namespace>
 800de74:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800de78:	4681      	mov	r9, r0
 800de7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800de7e:	ad0b      	add	r5, sp, #44	; 0x2c
 800de80:	46ac      	mov	ip, r5
 800de82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de86:	f8de 3000 	ldr.w	r3, [lr]
 800de8a:	f8cc 3000 	str.w	r3, [ip]
 800de8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de90:	b1fb      	cbz	r3, 800ded2 <rcl_node_resolve_name+0x8e>
 800de92:	468a      	mov	sl, r1
 800de94:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800de98:	f002 faa6 	bl	80103e8 <rcutils_get_zero_initialized_string_map>
 800de9c:	ab10      	add	r3, sp, #64	; 0x40
 800de9e:	9008      	str	r0, [sp, #32]
 800dea0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800dea4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dea8:	2100      	movs	r1, #0
 800deaa:	e895 000c 	ldmia.w	r5, {r2, r3}
 800deae:	a808      	add	r0, sp, #32
 800deb0:	f002 fb12 	bl	80104d8 <rcutils_string_map_init>
 800deb4:	4607      	mov	r7, r0
 800deb6:	b180      	cbz	r0, 800deda <rcl_node_resolve_name+0x96>
 800deb8:	f7fa fce8 	bl	800888c <rcutils_get_error_string>
 800debc:	f7fa fcfc 	bl	80088b8 <rcutils_reset_error>
 800dec0:	2f0a      	cmp	r7, #10
 800dec2:	bf18      	it	ne
 800dec4:	2701      	movne	r7, #1
 800dec6:	4638      	mov	r0, r7
 800dec8:	b011      	add	sp, #68	; 0x44
 800deca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dece:	b002      	add	sp, #8
 800ded0:	4770      	bx	lr
 800ded2:	270b      	movs	r7, #11
 800ded4:	e7f7      	b.n	800dec6 <rcl_node_resolve_name+0x82>
 800ded6:	2701      	movs	r7, #1
 800ded8:	e7f5      	b.n	800dec6 <rcl_node_resolve_name+0x82>
 800deda:	9009      	str	r0, [sp, #36]	; 0x24
 800dedc:	9007      	str	r0, [sp, #28]
 800dede:	a808      	add	r0, sp, #32
 800dee0:	f005 fe58 	bl	8013b94 <rcl_get_default_topic_name_substitutions>
 800dee4:	4607      	mov	r7, r0
 800dee6:	b1a8      	cbz	r0, 800df14 <rcl_node_resolve_name+0xd0>
 800dee8:	280a      	cmp	r0, #10
 800deea:	9c07      	ldr	r4, [sp, #28]
 800deec:	d000      	beq.n	800def0 <rcl_node_resolve_name+0xac>
 800deee:	2701      	movs	r7, #1
 800def0:	a808      	add	r0, sp, #32
 800def2:	f002 fb31 	bl	8010558 <rcutils_string_map_fini>
 800def6:	2800      	cmp	r0, #0
 800def8:	d13d      	bne.n	800df76 <rcl_node_resolve_name+0x132>
 800defa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800defc:	4659      	mov	r1, fp
 800defe:	47d0      	blx	sl
 800df00:	4659      	mov	r1, fp
 800df02:	4620      	mov	r0, r4
 800df04:	47d0      	blx	sl
 800df06:	f1b8 0f00 	cmp.w	r8, #0
 800df0a:	d0dc      	beq.n	800dec6 <rcl_node_resolve_name+0x82>
 800df0c:	2f67      	cmp	r7, #103	; 0x67
 800df0e:	bf08      	it	eq
 800df10:	2768      	moveq	r7, #104	; 0x68
 800df12:	e7d8      	b.n	800dec6 <rcl_node_resolve_name+0x82>
 800df14:	ab09      	add	r3, sp, #36	; 0x24
 800df16:	9305      	str	r3, [sp, #20]
 800df18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df1a:	46ec      	mov	ip, sp
 800df1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df20:	682b      	ldr	r3, [r5, #0]
 800df22:	f8cc 3000 	str.w	r3, [ip]
 800df26:	464a      	mov	r2, r9
 800df28:	4631      	mov	r1, r6
 800df2a:	4620      	mov	r0, r4
 800df2c:	ab08      	add	r3, sp, #32
 800df2e:	f005 fcd3 	bl	80138d8 <rcl_expand_topic_name>
 800df32:	4607      	mov	r7, r0
 800df34:	b9b8      	cbnz	r0, 800df66 <rcl_node_resolve_name+0x122>
 800df36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df38:	9009      	str	r0, [sp, #36]	; 0x24
 800df3a:	4602      	mov	r2, r0
 800df3c:	a90a      	add	r1, sp, #40	; 0x28
 800df3e:	4620      	mov	r0, r4
 800df40:	f002 fc4e 	bl	80107e0 <rmw_validate_full_topic_name>
 800df44:	b988      	cbnz	r0, 800df6a <rcl_node_resolve_name+0x126>
 800df46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800df48:	b9d5      	cbnz	r5, 800df80 <rcl_node_resolve_name+0x13c>
 800df4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df4c:	a808      	add	r0, sp, #32
 800df4e:	601c      	str	r4, [r3, #0]
 800df50:	f002 fb02 	bl	8010558 <rcutils_string_map_fini>
 800df54:	4607      	mov	r7, r0
 800df56:	b1a8      	cbz	r0, 800df84 <rcl_node_resolve_name+0x140>
 800df58:	f7fa fc98 	bl	800888c <rcutils_get_error_string>
 800df5c:	462c      	mov	r4, r5
 800df5e:	f7fa fcab 	bl	80088b8 <rcutils_reset_error>
 800df62:	2701      	movs	r7, #1
 800df64:	e7c9      	b.n	800defa <rcl_node_resolve_name+0xb6>
 800df66:	9c07      	ldr	r4, [sp, #28]
 800df68:	e7c2      	b.n	800def0 <rcl_node_resolve_name+0xac>
 800df6a:	f7fa fc8f 	bl	800888c <rcutils_get_error_string>
 800df6e:	2701      	movs	r7, #1
 800df70:	f7fa fca2 	bl	80088b8 <rcutils_reset_error>
 800df74:	e7bc      	b.n	800def0 <rcl_node_resolve_name+0xac>
 800df76:	f7fa fc89 	bl	800888c <rcutils_get_error_string>
 800df7a:	f7fa fc9d 	bl	80088b8 <rcutils_reset_error>
 800df7e:	e7bc      	b.n	800defa <rcl_node_resolve_name+0xb6>
 800df80:	2767      	movs	r7, #103	; 0x67
 800df82:	e7b5      	b.n	800def0 <rcl_node_resolve_name+0xac>
 800df84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df86:	4659      	mov	r1, fp
 800df88:	47d0      	blx	sl
 800df8a:	4659      	mov	r1, fp
 800df8c:	4638      	mov	r0, r7
 800df8e:	47d0      	blx	sl
 800df90:	e799      	b.n	800dec6 <rcl_node_resolve_name+0x82>
 800df92:	bf00      	nop

0800df94 <exact_match_lookup>:
 800df94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df96:	f102 0708 	add.w	r7, r2, #8
 800df9a:	460b      	mov	r3, r1
 800df9c:	4614      	mov	r4, r2
 800df9e:	4606      	mov	r6, r0
 800dfa0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800dfa4:	b085      	sub	sp, #20
 800dfa6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	4919      	ldr	r1, [pc, #100]	; (800e014 <exact_match_lookup+0x80>)
 800dfae:	e894 000c 	ldmia.w	r4, {r2, r3}
 800dfb2:	f002 f8b3 	bl	801011c <rcutils_join_path>
 800dfb6:	7833      	ldrb	r3, [r6, #0]
 800dfb8:	2b2f      	cmp	r3, #47	; 0x2f
 800dfba:	4605      	mov	r5, r0
 800dfbc:	d023      	beq.n	800e006 <exact_match_lookup+0x72>
 800dfbe:	f104 030c 	add.w	r3, r4, #12
 800dfc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfc6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dfca:	1c70      	adds	r0, r6, #1
 800dfcc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800dfd0:	f002 f8aa 	bl	8010128 <rcutils_to_native_path>
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800dfda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dfde:	4631      	mov	r1, r6
 800dfe0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f002 f899 	bl	801011c <rcutils_join_path>
 800dfea:	6862      	ldr	r2, [r4, #4]
 800dfec:	6921      	ldr	r1, [r4, #16]
 800dfee:	4603      	mov	r3, r0
 800dff0:	4630      	mov	r0, r6
 800dff2:	461e      	mov	r6, r3
 800dff4:	4790      	blx	r2
 800dff6:	4628      	mov	r0, r5
 800dff8:	6863      	ldr	r3, [r4, #4]
 800dffa:	6921      	ldr	r1, [r4, #16]
 800dffc:	4798      	blx	r3
 800dffe:	4635      	mov	r5, r6
 800e000:	4628      	mov	r0, r5
 800e002:	b005      	add	sp, #20
 800e004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e006:	7873      	ldrb	r3, [r6, #1]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1d8      	bne.n	800dfbe <exact_match_lookup+0x2a>
 800e00c:	4628      	mov	r0, r5
 800e00e:	b005      	add	sp, #20
 800e010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e012:	bf00      	nop
 800e014:	08015dc8 	.word	0x08015dc8

0800e018 <rcl_get_secure_root>:
 800e018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e01c:	b085      	sub	sp, #20
 800e01e:	b168      	cbz	r0, 800e03c <rcl_get_secure_root+0x24>
 800e020:	4607      	mov	r7, r0
 800e022:	4608      	mov	r0, r1
 800e024:	460c      	mov	r4, r1
 800e026:	f7fa fc23 	bl	8008870 <rcutils_allocator_is_valid>
 800e02a:	b138      	cbz	r0, 800e03c <rcl_get_secure_root+0x24>
 800e02c:	2300      	movs	r3, #0
 800e02e:	482d      	ldr	r0, [pc, #180]	; (800e0e4 <rcl_get_secure_root+0xcc>)
 800e030:	9303      	str	r3, [sp, #12]
 800e032:	a903      	add	r1, sp, #12
 800e034:	f002 f858 	bl	80100e8 <rcutils_get_env>
 800e038:	4605      	mov	r5, r0
 800e03a:	b120      	cbz	r0, 800e046 <rcl_get_secure_root+0x2e>
 800e03c:	2500      	movs	r5, #0
 800e03e:	4628      	mov	r0, r5
 800e040:	b005      	add	sp, #20
 800e042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	781a      	ldrb	r2, [r3, #0]
 800e04a:	2a00      	cmp	r2, #0
 800e04c:	d0f6      	beq.n	800e03c <rcl_get_secure_root+0x24>
 800e04e:	f104 090c 	add.w	r9, r4, #12
 800e052:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e056:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e05a:	4618      	mov	r0, r3
 800e05c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e060:	f002 f984 	bl	801036c <rcutils_strdup>
 800e064:	4680      	mov	r8, r0
 800e066:	2800      	cmp	r0, #0
 800e068:	d0e8      	beq.n	800e03c <rcl_get_secure_root+0x24>
 800e06a:	481f      	ldr	r0, [pc, #124]	; (800e0e8 <rcl_get_secure_root+0xd0>)
 800e06c:	9503      	str	r5, [sp, #12]
 800e06e:	a903      	add	r1, sp, #12
 800e070:	f002 f83a 	bl	80100e8 <rcutils_get_env>
 800e074:	b160      	cbz	r0, 800e090 <rcl_get_secure_root+0x78>
 800e076:	2600      	movs	r6, #0
 800e078:	6863      	ldr	r3, [r4, #4]
 800e07a:	6921      	ldr	r1, [r4, #16]
 800e07c:	4630      	mov	r0, r6
 800e07e:	4798      	blx	r3
 800e080:	4640      	mov	r0, r8
 800e082:	6863      	ldr	r3, [r4, #4]
 800e084:	6921      	ldr	r1, [r4, #16]
 800e086:	4798      	blx	r3
 800e088:	4628      	mov	r0, r5
 800e08a:	b005      	add	sp, #20
 800e08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e090:	9b03      	ldr	r3, [sp, #12]
 800e092:	781e      	ldrb	r6, [r3, #0]
 800e094:	b1f6      	cbz	r6, 800e0d4 <rcl_get_secure_root+0xbc>
 800e096:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e09a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e0a4:	f002 f962 	bl	801036c <rcutils_strdup>
 800e0a8:	4606      	mov	r6, r0
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0e3      	beq.n	800e076 <rcl_get_secure_root+0x5e>
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	4641      	mov	r1, r8
 800e0b2:	f7ff ff6f 	bl	800df94 <exact_match_lookup>
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	2d00      	cmp	r5, #0
 800e0ba:	d0dd      	beq.n	800e078 <rcl_get_secure_root+0x60>
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f002 f82b 	bl	8010118 <rcutils_is_directory>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d1d7      	bne.n	800e078 <rcl_get_secure_root+0x60>
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	6921      	ldr	r1, [r4, #16]
 800e0cc:	461d      	mov	r5, r3
 800e0ce:	6863      	ldr	r3, [r4, #4]
 800e0d0:	4798      	blx	r3
 800e0d2:	e7d1      	b.n	800e078 <rcl_get_secure_root+0x60>
 800e0d4:	4622      	mov	r2, r4
 800e0d6:	4638      	mov	r0, r7
 800e0d8:	4641      	mov	r1, r8
 800e0da:	f7ff ff5b 	bl	800df94 <exact_match_lookup>
 800e0de:	4605      	mov	r5, r0
 800e0e0:	e7ea      	b.n	800e0b8 <rcl_get_secure_root+0xa0>
 800e0e2:	bf00      	nop
 800e0e4:	08015dd4 	.word	0x08015dd4
 800e0e8:	08015dec 	.word	0x08015dec

0800e0ec <rcl_get_security_options_from_environment>:
 800e0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f0:	b082      	sub	sp, #8
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	460f      	mov	r7, r1
 800e0f8:	4820      	ldr	r0, [pc, #128]	; (800e17c <rcl_get_security_options_from_environment+0x90>)
 800e0fa:	9301      	str	r3, [sp, #4]
 800e0fc:	a901      	add	r1, sp, #4
 800e0fe:	4690      	mov	r8, r2
 800e100:	f001 fff2 	bl	80100e8 <rcutils_get_env>
 800e104:	b120      	cbz	r0, 800e110 <rcl_get_security_options_from_environment+0x24>
 800e106:	2501      	movs	r5, #1
 800e108:	4628      	mov	r0, r5
 800e10a:	b002      	add	sp, #8
 800e10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e110:	491b      	ldr	r1, [pc, #108]	; (800e180 <rcl_get_security_options_from_environment+0x94>)
 800e112:	4604      	mov	r4, r0
 800e114:	9801      	ldr	r0, [sp, #4]
 800e116:	f7f2 f863 	bl	80001e0 <strcmp>
 800e11a:	4605      	mov	r5, r0
 800e11c:	b9e8      	cbnz	r0, 800e15a <rcl_get_security_options_from_environment+0x6e>
 800e11e:	9001      	str	r0, [sp, #4]
 800e120:	f1b8 0f00 	cmp.w	r8, #0
 800e124:	d020      	beq.n	800e168 <rcl_get_security_options_from_environment+0x7c>
 800e126:	4817      	ldr	r0, [pc, #92]	; (800e184 <rcl_get_security_options_from_environment+0x98>)
 800e128:	a901      	add	r1, sp, #4
 800e12a:	f001 ffdd 	bl	80100e8 <rcutils_get_env>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d1e9      	bne.n	800e106 <rcl_get_security_options_from_environment+0x1a>
 800e132:	4915      	ldr	r1, [pc, #84]	; (800e188 <rcl_get_security_options_from_environment+0x9c>)
 800e134:	9801      	ldr	r0, [sp, #4]
 800e136:	f7f2 f853 	bl	80001e0 <strcmp>
 800e13a:	fab0 f080 	clz	r0, r0
 800e13e:	0940      	lsrs	r0, r0, #5
 800e140:	f888 0000 	strb.w	r0, [r8]
 800e144:	4639      	mov	r1, r7
 800e146:	4630      	mov	r0, r6
 800e148:	f7ff ff66 	bl	800e018 <rcl_get_secure_root>
 800e14c:	b170      	cbz	r0, 800e16c <rcl_get_security_options_from_environment+0x80>
 800e14e:	f8c8 0004 	str.w	r0, [r8, #4]
 800e152:	4628      	mov	r0, r5
 800e154:	b002      	add	sp, #8
 800e156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15a:	4625      	mov	r5, r4
 800e15c:	4628      	mov	r0, r5
 800e15e:	f888 4000 	strb.w	r4, [r8]
 800e162:	b002      	add	sp, #8
 800e164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e168:	250b      	movs	r5, #11
 800e16a:	e7cd      	b.n	800e108 <rcl_get_security_options_from_environment+0x1c>
 800e16c:	f898 5000 	ldrb.w	r5, [r8]
 800e170:	f1a5 0501 	sub.w	r5, r5, #1
 800e174:	fab5 f585 	clz	r5, r5
 800e178:	096d      	lsrs	r5, r5, #5
 800e17a:	e7c5      	b.n	800e108 <rcl_get_security_options_from_environment+0x1c>
 800e17c:	08015d8c 	.word	0x08015d8c
 800e180:	08015da0 	.word	0x08015da0
 800e184:	08015da8 	.word	0x08015da8
 800e188:	08015dc0 	.word	0x08015dc0

0800e18c <rcl_service_get_rmw_handle>:
 800e18c:	b118      	cbz	r0, 800e196 <rcl_service_get_rmw_handle+0xa>
 800e18e:	6800      	ldr	r0, [r0, #0]
 800e190:	b108      	cbz	r0, 800e196 <rcl_service_get_rmw_handle+0xa>
 800e192:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800e196:	4770      	bx	lr

0800e198 <rcl_take_request>:
 800e198:	b570      	push	{r4, r5, r6, lr}
 800e19a:	468e      	mov	lr, r1
 800e19c:	460c      	mov	r4, r1
 800e19e:	4616      	mov	r6, r2
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1a6:	b08c      	sub	sp, #48	; 0x30
 800e1a8:	f10d 0c18 	add.w	ip, sp, #24
 800e1ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e1b4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e1b8:	b30d      	cbz	r5, 800e1fe <rcl_take_request+0x66>
 800e1ba:	682b      	ldr	r3, [r5, #0]
 800e1bc:	b1fb      	cbz	r3, 800e1fe <rcl_take_request+0x66>
 800e1be:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800e1c2:	b1e0      	cbz	r0, 800e1fe <rcl_take_request+0x66>
 800e1c4:	b336      	cbz	r6, 800e214 <rcl_take_request+0x7c>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f88d 3007 	strb.w	r3, [sp, #7]
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	f10d 0307 	add.w	r3, sp, #7
 800e1d2:	a902      	add	r1, sp, #8
 800e1d4:	f003 f8e6 	bl	80113a4 <rmw_take_request>
 800e1d8:	4605      	mov	r5, r0
 800e1da:	b198      	cbz	r0, 800e204 <rcl_take_request+0x6c>
 800e1dc:	280a      	cmp	r0, #10
 800e1de:	bf18      	it	ne
 800e1e0:	2501      	movne	r5, #1
 800e1e2:	f10d 0e18 	add.w	lr, sp, #24
 800e1e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1ea:	46a4      	mov	ip, r4
 800e1ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1f0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e1f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	b00c      	add	sp, #48	; 0x30
 800e1fc:	bd70      	pop	{r4, r5, r6, pc}
 800e1fe:	f44f 7516 	mov.w	r5, #600	; 0x258
 800e202:	e7ee      	b.n	800e1e2 <rcl_take_request+0x4a>
 800e204:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e208:	f240 2359 	movw	r3, #601	; 0x259
 800e20c:	2a00      	cmp	r2, #0
 800e20e:	bf08      	it	eq
 800e210:	461d      	moveq	r5, r3
 800e212:	e7e6      	b.n	800e1e2 <rcl_take_request+0x4a>
 800e214:	250b      	movs	r5, #11
 800e216:	e7e4      	b.n	800e1e2 <rcl_take_request+0x4a>

0800e218 <rcl_send_response>:
 800e218:	b170      	cbz	r0, 800e238 <rcl_send_response+0x20>
 800e21a:	6800      	ldr	r0, [r0, #0]
 800e21c:	b160      	cbz	r0, 800e238 <rcl_send_response+0x20>
 800e21e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800e222:	b148      	cbz	r0, 800e238 <rcl_send_response+0x20>
 800e224:	b159      	cbz	r1, 800e23e <rcl_send_response+0x26>
 800e226:	b510      	push	{r4, lr}
 800e228:	b15a      	cbz	r2, 800e242 <rcl_send_response+0x2a>
 800e22a:	f003 f919 	bl	8011460 <rmw_send_response>
 800e22e:	b110      	cbz	r0, 800e236 <rcl_send_response+0x1e>
 800e230:	2802      	cmp	r0, #2
 800e232:	bf18      	it	ne
 800e234:	2001      	movne	r0, #1
 800e236:	bd10      	pop	{r4, pc}
 800e238:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e23c:	4770      	bx	lr
 800e23e:	200b      	movs	r0, #11
 800e240:	4770      	bx	lr
 800e242:	200b      	movs	r0, #11
 800e244:	bd10      	pop	{r4, pc}
 800e246:	bf00      	nop

0800e248 <rcl_service_is_valid>:
 800e248:	b130      	cbz	r0, 800e258 <rcl_service_is_valid+0x10>
 800e24a:	6800      	ldr	r0, [r0, #0]
 800e24c:	b120      	cbz	r0, 800e258 <rcl_service_is_valid+0x10>
 800e24e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800e252:	3800      	subs	r0, #0
 800e254:	bf18      	it	ne
 800e256:	2001      	movne	r0, #1
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop

0800e25c <rcl_get_zero_initialized_subscription>:
 800e25c:	4b01      	ldr	r3, [pc, #4]	; (800e264 <rcl_get_zero_initialized_subscription+0x8>)
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	08015e0c 	.word	0x08015e0c

0800e268 <rcl_subscription_init>:
 800e268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e26c:	b089      	sub	sp, #36	; 0x24
 800e26e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800e270:	b1d6      	cbz	r6, 800e2a8 <rcl_subscription_init+0x40>
 800e272:	f106 0950 	add.w	r9, r6, #80	; 0x50
 800e276:	4604      	mov	r4, r0
 800e278:	4648      	mov	r0, r9
 800e27a:	460d      	mov	r5, r1
 800e27c:	4690      	mov	r8, r2
 800e27e:	461f      	mov	r7, r3
 800e280:	f7fa faf6 	bl	8008870 <rcutils_allocator_is_valid>
 800e284:	b180      	cbz	r0, 800e2a8 <rcl_subscription_init+0x40>
 800e286:	b17c      	cbz	r4, 800e2a8 <rcl_subscription_init+0x40>
 800e288:	4628      	mov	r0, r5
 800e28a:	f7ff fd87 	bl	800dd9c <rcl_node_is_valid>
 800e28e:	2800      	cmp	r0, #0
 800e290:	d054      	beq.n	800e33c <rcl_subscription_init+0xd4>
 800e292:	f1b8 0f00 	cmp.w	r8, #0
 800e296:	d007      	beq.n	800e2a8 <rcl_subscription_init+0x40>
 800e298:	b137      	cbz	r7, 800e2a8 <rcl_subscription_init+0x40>
 800e29a:	6823      	ldr	r3, [r4, #0]
 800e29c:	b14b      	cbz	r3, 800e2b2 <rcl_subscription_init+0x4a>
 800e29e:	2764      	movs	r7, #100	; 0x64
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	b009      	add	sp, #36	; 0x24
 800e2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a8:	270b      	movs	r7, #11
 800e2aa:	4638      	mov	r0, r7
 800e2ac:	b009      	add	sp, #36	; 0x24
 800e2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e2b6:	aa07      	add	r2, sp, #28
 800e2b8:	9205      	str	r2, [sp, #20]
 800e2ba:	9307      	str	r3, [sp, #28]
 800e2bc:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800e2c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e2c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e2c8:	4639      	mov	r1, r7
 800e2ca:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7ff fdb8 	bl	800de44 <rcl_node_resolve_name>
 800e2d4:	4607      	mov	r7, r0
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d15f      	bne.n	800e39a <rcl_subscription_init+0x132>
 800e2da:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800e2de:	21c8      	movs	r1, #200	; 0xc8
 800e2e0:	2001      	movs	r0, #1
 800e2e2:	4798      	blx	r3
 800e2e4:	6020      	str	r0, [r4, #0]
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d05d      	beq.n	800e3a6 <rcl_subscription_init+0x13e>
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f7ff fd78 	bl	800dde0 <rcl_node_get_rmw_handle>
 800e2f0:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	9a07      	ldr	r2, [sp, #28]
 800e2f8:	6827      	ldr	r7, [r4, #0]
 800e2fa:	4641      	mov	r1, r8
 800e2fc:	4633      	mov	r3, r6
 800e2fe:	f003 f999 	bl	8011634 <rmw_create_subscription>
 800e302:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800e306:	6827      	ldr	r7, [r4, #0]
 800e308:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e30c:	b348      	cbz	r0, 800e362 <rcl_subscription_init+0xfa>
 800e30e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800e312:	f003 fa71 	bl	80117f8 <rmw_subscription_get_actual_qos>
 800e316:	4607      	mov	r7, r0
 800e318:	b9a8      	cbnz	r0, 800e346 <rcl_subscription_init+0xde>
 800e31a:	6820      	ldr	r0, [r4, #0]
 800e31c:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800e320:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800e324:	2270      	movs	r2, #112	; 0x70
 800e326:	4631      	mov	r1, r6
 800e328:	f006 fbaf 	bl	8014a8a <memcpy>
 800e32c:	9807      	ldr	r0, [sp, #28]
 800e32e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e330:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800e332:	4798      	blx	r3
 800e334:	4638      	mov	r0, r7
 800e336:	b009      	add	sp, #36	; 0x24
 800e338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e33c:	27c8      	movs	r7, #200	; 0xc8
 800e33e:	4638      	mov	r0, r7
 800e340:	b009      	add	sp, #36	; 0x24
 800e342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e346:	6827      	ldr	r7, [r4, #0]
 800e348:	b32f      	cbz	r7, 800e396 <rcl_subscription_init+0x12e>
 800e34a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e34e:	b14b      	cbz	r3, 800e364 <rcl_subscription_init+0xfc>
 800e350:	4628      	mov	r0, r5
 800e352:	f7ff fd45 	bl	800dde0 <rcl_node_get_rmw_handle>
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800e35c:	f003 fa5c 	bl	8011818 <rmw_destroy_subscription>
 800e360:	6827      	ldr	r7, [r4, #0]
 800e362:	b197      	cbz	r7, 800e38a <rcl_subscription_init+0x122>
 800e364:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e368:	4628      	mov	r0, r5
 800e36a:	f7fa fa81 	bl	8008870 <rcutils_allocator_is_valid>
 800e36e:	b158      	cbz	r0, 800e388 <rcl_subscription_init+0x120>
 800e370:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e372:	b148      	cbz	r0, 800e388 <rcl_subscription_init+0x120>
 800e374:	4629      	mov	r1, r5
 800e376:	f002 f987 	bl	8010688 <rmw_subscription_content_filter_options_fini>
 800e37a:	4605      	mov	r5, r0
 800e37c:	b9b8      	cbnz	r0, 800e3ae <rcl_subscription_init+0x146>
 800e37e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e380:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e382:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e384:	4798      	blx	r3
 800e386:	66fd      	str	r5, [r7, #108]	; 0x6c
 800e388:	6827      	ldr	r7, [r4, #0]
 800e38a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e38c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800e38e:	4638      	mov	r0, r7
 800e390:	4798      	blx	r3
 800e392:	2300      	movs	r3, #0
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	2701      	movs	r7, #1
 800e398:	e7c8      	b.n	800e32c <rcl_subscription_init+0xc4>
 800e39a:	2867      	cmp	r0, #103	; 0x67
 800e39c:	d0c6      	beq.n	800e32c <rcl_subscription_init+0xc4>
 800e39e:	2869      	cmp	r0, #105	; 0x69
 800e3a0:	d003      	beq.n	800e3aa <rcl_subscription_init+0x142>
 800e3a2:	280a      	cmp	r0, #10
 800e3a4:	d1f7      	bne.n	800e396 <rcl_subscription_init+0x12e>
 800e3a6:	270a      	movs	r7, #10
 800e3a8:	e7c0      	b.n	800e32c <rcl_subscription_init+0xc4>
 800e3aa:	2767      	movs	r7, #103	; 0x67
 800e3ac:	e7be      	b.n	800e32c <rcl_subscription_init+0xc4>
 800e3ae:	f7ff f8fd 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800e3b2:	6827      	ldr	r7, [r4, #0]
 800e3b4:	e7e9      	b.n	800e38a <rcl_subscription_init+0x122>
 800e3b6:	bf00      	nop

0800e3b8 <rcl_subscription_get_default_options>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	4d14      	ldr	r5, [pc, #80]	; (800e40c <rcl_subscription_get_default_options+0x54>)
 800e3bc:	4914      	ldr	r1, [pc, #80]	; (800e410 <rcl_subscription_get_default_options+0x58>)
 800e3be:	b08a      	sub	sp, #40	; 0x28
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	2250      	movs	r2, #80	; 0x50
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f006 fb60 	bl	8014a8a <memcpy>
 800e3ca:	a804      	add	r0, sp, #16
 800e3cc:	f7fa fa42 	bl	8008854 <rcutils_get_default_allocator>
 800e3d0:	f10d 0c10 	add.w	ip, sp, #16
 800e3d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3d8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800e3dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e3e0:	466e      	mov	r6, sp
 800e3e2:	f8dc 3000 	ldr.w	r3, [ip]
 800e3e6:	f8ce 3000 	str.w	r3, [lr]
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f002 f966 	bl	80106bc <rmw_get_default_subscription_options>
 800e3f0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e3f4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800e3f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e3fc:	2270      	movs	r2, #112	; 0x70
 800e3fe:	4629      	mov	r1, r5
 800e400:	4620      	mov	r0, r4
 800e402:	f006 fb42 	bl	8014a8a <memcpy>
 800e406:	4620      	mov	r0, r4
 800e408:	b00a      	add	sp, #40	; 0x28
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
 800e40c:	200128a8 	.word	0x200128a8
 800e410:	08015e10 	.word	0x08015e10

0800e414 <rcl_take>:
 800e414:	2800      	cmp	r0, #0
 800e416:	d04a      	beq.n	800e4ae <rcl_take+0x9a>
 800e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e41c:	4604      	mov	r4, r0
 800e41e:	6800      	ldr	r0, [r0, #0]
 800e420:	b0a4      	sub	sp, #144	; 0x90
 800e422:	2800      	cmp	r0, #0
 800e424:	d03b      	beq.n	800e49e <rcl_take+0x8a>
 800e426:	461f      	mov	r7, r3
 800e428:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d036      	beq.n	800e49e <rcl_take+0x8a>
 800e430:	460e      	mov	r6, r1
 800e432:	2900      	cmp	r1, #0
 800e434:	d039      	beq.n	800e4aa <rcl_take+0x96>
 800e436:	4615      	mov	r5, r2
 800e438:	2a00      	cmp	r2, #0
 800e43a:	d03c      	beq.n	800e4b6 <rcl_take+0xa2>
 800e43c:	a802      	add	r0, sp, #8
 800e43e:	f002 f9c7 	bl	80107d0 <rmw_get_zero_initialized_message_info>
 800e442:	f10d 0c08 	add.w	ip, sp, #8
 800e446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e44a:	46ae      	mov	lr, r5
 800e44c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e450:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e454:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e458:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e45c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e460:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800e464:	f04f 0800 	mov.w	r8, #0
 800e468:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800e46c:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 800e470:	6822      	ldr	r2, [r4, #0]
 800e472:	462b      	mov	r3, r5
 800e474:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 800e478:	9700      	str	r7, [sp, #0]
 800e47a:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 800e47e:	4631      	mov	r1, r6
 800e480:	f003 fa2a 	bl	80118d8 <rmw_take_with_info>
 800e484:	4603      	mov	r3, r0
 800e486:	b9c0      	cbnz	r0, 800e4ba <rcl_take+0xa6>
 800e488:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 800e48c:	f240 1291 	movw	r2, #401	; 0x191
 800e490:	2900      	cmp	r1, #0
 800e492:	bf08      	it	eq
 800e494:	4613      	moveq	r3, r2
 800e496:	4618      	mov	r0, r3
 800e498:	b024      	add	sp, #144	; 0x90
 800e49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	b024      	add	sp, #144	; 0x90
 800e4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4aa:	230b      	movs	r3, #11
 800e4ac:	e7f3      	b.n	800e496 <rcl_take+0x82>
 800e4ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	4770      	bx	lr
 800e4b6:	ad14      	add	r5, sp, #80	; 0x50
 800e4b8:	e7c0      	b.n	800e43c <rcl_take+0x28>
 800e4ba:	f7ff f877 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	e7e9      	b.n	800e496 <rcl_take+0x82>
 800e4c2:	bf00      	nop

0800e4c4 <rcl_subscription_get_rmw_handle>:
 800e4c4:	b118      	cbz	r0, 800e4ce <rcl_subscription_get_rmw_handle+0xa>
 800e4c6:	6800      	ldr	r0, [r0, #0]
 800e4c8:	b108      	cbz	r0, 800e4ce <rcl_subscription_get_rmw_handle+0xa>
 800e4ca:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800e4ce:	4770      	bx	lr

0800e4d0 <rcl_subscription_is_valid>:
 800e4d0:	b130      	cbz	r0, 800e4e0 <rcl_subscription_is_valid+0x10>
 800e4d2:	6800      	ldr	r0, [r0, #0]
 800e4d4:	b120      	cbz	r0, 800e4e0 <rcl_subscription_is_valid+0x10>
 800e4d6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800e4da:	3800      	subs	r0, #0
 800e4dc:	bf18      	it	ne
 800e4de:	2001      	movne	r0, #1
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop

0800e4e4 <rcl_get_system_time>:
 800e4e4:	4608      	mov	r0, r1
 800e4e6:	f7fa ba03 	b.w	80088f0 <rcutils_system_time_now>
 800e4ea:	bf00      	nop

0800e4ec <rcl_get_steady_time>:
 800e4ec:	4608      	mov	r0, r1
 800e4ee:	f7fa ba27 	b.w	8008940 <rcutils_steady_time_now>
 800e4f2:	bf00      	nop

0800e4f4 <rcl_get_ros_time>:
 800e4f4:	7a03      	ldrb	r3, [r0, #8]
 800e4f6:	b510      	push	{r4, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	b133      	cbz	r3, 800e50a <rcl_get_ros_time+0x16>
 800e4fc:	2105      	movs	r1, #5
 800e4fe:	f001 fd4f 	bl	800ffa0 <__atomic_load_8>
 800e502:	e9c4 0100 	strd	r0, r1, [r4]
 800e506:	2000      	movs	r0, #0
 800e508:	bd10      	pop	{r4, pc}
 800e50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e50e:	4608      	mov	r0, r1
 800e510:	f7fa b9ee 	b.w	80088f0 <rcutils_system_time_now>

0800e514 <rcl_clock_init>:
 800e514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e516:	4605      	mov	r5, r0
 800e518:	4610      	mov	r0, r2
 800e51a:	4614      	mov	r4, r2
 800e51c:	460e      	mov	r6, r1
 800e51e:	f7fa f9a7 	bl	8008870 <rcutils_allocator_is_valid>
 800e522:	b128      	cbz	r0, 800e530 <rcl_clock_init+0x1c>
 800e524:	2d03      	cmp	r5, #3
 800e526:	d803      	bhi.n	800e530 <rcl_clock_init+0x1c>
 800e528:	e8df f005 	tbb	[pc, r5]
 800e52c:	06532e1d 	.word	0x06532e1d
 800e530:	f04f 0c0b 	mov.w	ip, #11
 800e534:	4660      	mov	r0, ip
 800e536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e538:	2e00      	cmp	r6, #0
 800e53a:	d0f9      	beq.n	800e530 <rcl_clock_init+0x1c>
 800e53c:	2c00      	cmp	r4, #0
 800e53e:	d0f7      	beq.n	800e530 <rcl_clock_init+0x1c>
 800e540:	2300      	movs	r3, #0
 800e542:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e546:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800e5fc <rcl_clock_init+0xe8>
 800e54a:	6133      	str	r3, [r6, #16]
 800e54c:	f106 0514 	add.w	r5, r6, #20
 800e550:	469c      	mov	ip, r3
 800e552:	2703      	movs	r7, #3
 800e554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	602b      	str	r3, [r5, #0]
 800e55c:	7037      	strb	r7, [r6, #0]
 800e55e:	f8c6 e00c 	str.w	lr, [r6, #12]
 800e562:	4660      	mov	r0, ip
 800e564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e566:	2e00      	cmp	r6, #0
 800e568:	d0e2      	beq.n	800e530 <rcl_clock_init+0x1c>
 800e56a:	2300      	movs	r3, #0
 800e56c:	7033      	strb	r3, [r6, #0]
 800e56e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e572:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800e576:	469c      	mov	ip, r3
 800e578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e57a:	f106 0514 	add.w	r5, r6, #20
 800e57e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	602b      	str	r3, [r5, #0]
 800e584:	4660      	mov	r0, ip
 800e586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e588:	2e00      	cmp	r6, #0
 800e58a:	d0d1      	beq.n	800e530 <rcl_clock_init+0x1c>
 800e58c:	2c00      	cmp	r4, #0
 800e58e:	d0cf      	beq.n	800e530 <rcl_clock_init+0x1c>
 800e590:	2700      	movs	r7, #0
 800e592:	7037      	strb	r7, [r6, #0]
 800e594:	46a4      	mov	ip, r4
 800e596:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e59a:	f106 0514 	add.w	r5, r6, #20
 800e59e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800e5a2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800e5a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5a8:	f8dc 3000 	ldr.w	r3, [ip]
 800e5ac:	602b      	str	r3, [r5, #0]
 800e5ae:	6921      	ldr	r1, [r4, #16]
 800e5b0:	6823      	ldr	r3, [r4, #0]
 800e5b2:	2010      	movs	r0, #16
 800e5b4:	4798      	blx	r3
 800e5b6:	6130      	str	r0, [r6, #16]
 800e5b8:	b1d0      	cbz	r0, 800e5f0 <rcl_clock_init+0xdc>
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	2300      	movs	r3, #0
 800e5be:	e9c0 2300 	strd	r2, r3, [r0]
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	7207      	strb	r7, [r0, #8]
 800e5c6:	4a0c      	ldr	r2, [pc, #48]	; (800e5f8 <rcl_clock_init+0xe4>)
 800e5c8:	7033      	strb	r3, [r6, #0]
 800e5ca:	46bc      	mov	ip, r7
 800e5cc:	60f2      	str	r2, [r6, #12]
 800e5ce:	4660      	mov	r0, ip
 800e5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d2:	2e00      	cmp	r6, #0
 800e5d4:	d0ac      	beq.n	800e530 <rcl_clock_init+0x1c>
 800e5d6:	2c00      	cmp	r4, #0
 800e5d8:	d0aa      	beq.n	800e530 <rcl_clock_init+0x1c>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e5e0:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800e600 <rcl_clock_init+0xec>
 800e5e4:	6133      	str	r3, [r6, #16]
 800e5e6:	f106 0514 	add.w	r5, r6, #20
 800e5ea:	469c      	mov	ip, r3
 800e5ec:	2702      	movs	r7, #2
 800e5ee:	e7b1      	b.n	800e554 <rcl_clock_init+0x40>
 800e5f0:	f04f 0c0a 	mov.w	ip, #10
 800e5f4:	e79e      	b.n	800e534 <rcl_clock_init+0x20>
 800e5f6:	bf00      	nop
 800e5f8:	0800e4f5 	.word	0x0800e4f5
 800e5fc:	0800e4ed 	.word	0x0800e4ed
 800e600:	0800e4e5 	.word	0x0800e4e5

0800e604 <rcl_clock_get_now>:
 800e604:	b140      	cbz	r0, 800e618 <rcl_clock_get_now+0x14>
 800e606:	b139      	cbz	r1, 800e618 <rcl_clock_get_now+0x14>
 800e608:	7803      	ldrb	r3, [r0, #0]
 800e60a:	b11b      	cbz	r3, 800e614 <rcl_clock_get_now+0x10>
 800e60c:	68c3      	ldr	r3, [r0, #12]
 800e60e:	b10b      	cbz	r3, 800e614 <rcl_clock_get_now+0x10>
 800e610:	6900      	ldr	r0, [r0, #16]
 800e612:	4718      	bx	r3
 800e614:	2001      	movs	r0, #1
 800e616:	4770      	bx	lr
 800e618:	200b      	movs	r0, #11
 800e61a:	4770      	bx	lr

0800e61c <rcl_timer_call>:
 800e61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	b087      	sub	sp, #28
 800e622:	2800      	cmp	r0, #0
 800e624:	d06d      	beq.n	800e702 <rcl_timer_call+0xe6>
 800e626:	6803      	ldr	r3, [r0, #0]
 800e628:	4604      	mov	r4, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d063      	beq.n	800e6f6 <rcl_timer_call+0xda>
 800e62e:	f3bf 8f5b 	dmb	ish
 800e632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e636:	f3bf 8f5b 	dmb	ish
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d150      	bne.n	800e6e0 <rcl_timer_call+0xc4>
 800e63e:	6803      	ldr	r3, [r0, #0]
 800e640:	a904      	add	r1, sp, #16
 800e642:	6818      	ldr	r0, [r3, #0]
 800e644:	f7ff ffde 	bl	800e604 <rcl_clock_get_now>
 800e648:	4605      	mov	r5, r0
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d14a      	bne.n	800e6e4 <rcl_timer_call+0xc8>
 800e64e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	db4a      	blt.n	800e6ec <rcl_timer_call+0xd0>
 800e656:	6820      	ldr	r0, [r4, #0]
 800e658:	f04f 0a05 	mov.w	sl, #5
 800e65c:	f8cd a000 	str.w	sl, [sp]
 800e660:	3020      	adds	r0, #32
 800e662:	f001 fd09 	bl	8010078 <__atomic_exchange_8>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	f3bf 8f5b 	dmb	ish
 800e66c:	4680      	mov	r8, r0
 800e66e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800e672:	f3bf 8f5b 	dmb	ish
 800e676:	6820      	ldr	r0, [r4, #0]
 800e678:	4689      	mov	r9, r1
 800e67a:	3028      	adds	r0, #40	; 0x28
 800e67c:	4651      	mov	r1, sl
 800e67e:	f001 fc8f 	bl	800ffa0 <__atomic_load_8>
 800e682:	4606      	mov	r6, r0
 800e684:	6820      	ldr	r0, [r4, #0]
 800e686:	460f      	mov	r7, r1
 800e688:	3018      	adds	r0, #24
 800e68a:	4651      	mov	r1, sl
 800e68c:	f001 fc88 	bl	800ffa0 <__atomic_load_8>
 800e690:	1836      	adds	r6, r6, r0
 800e692:	4602      	mov	r2, r0
 800e694:	4682      	mov	sl, r0
 800e696:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800e69a:	eb47 0701 	adc.w	r7, r7, r1
 800e69e:	4286      	cmp	r6, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	eb77 010c 	sbcs.w	r1, r7, ip
 800e6a6:	da04      	bge.n	800e6b2 <rcl_timer_call+0x96>
 800e6a8:	ea53 0102 	orrs.w	r1, r3, r2
 800e6ac:	d12e      	bne.n	800e70c <rcl_timer_call+0xf0>
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	4667      	mov	r7, ip
 800e6b2:	6820      	ldr	r0, [r4, #0]
 800e6b4:	2105      	movs	r1, #5
 800e6b6:	4632      	mov	r2, r6
 800e6b8:	463b      	mov	r3, r7
 800e6ba:	3028      	adds	r0, #40	; 0x28
 800e6bc:	9100      	str	r1, [sp, #0]
 800e6be:	f001 fca5 	bl	801000c <__atomic_store_8>
 800e6c2:	f1bb 0f00 	cmp.w	fp, #0
 800e6c6:	d00d      	beq.n	800e6e4 <rcl_timer_call+0xc8>
 800e6c8:	9a04      	ldr	r2, [sp, #16]
 800e6ca:	9b05      	ldr	r3, [sp, #20]
 800e6cc:	ebb2 0208 	subs.w	r2, r2, r8
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	eb63 0309 	sbc.w	r3, r3, r9
 800e6d6:	47d8      	blx	fp
 800e6d8:	4628      	mov	r0, r5
 800e6da:	b007      	add	sp, #28
 800e6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e0:	f240 3521 	movw	r5, #801	; 0x321
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	b007      	add	sp, #28
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ec:	2501      	movs	r5, #1
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	b007      	add	sp, #28
 800e6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f6:	f44f 7548 	mov.w	r5, #800	; 0x320
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	b007      	add	sp, #28
 800e6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e702:	250b      	movs	r5, #11
 800e704:	4628      	mov	r0, r5
 800e706:	b007      	add	sp, #28
 800e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70c:	1b80      	subs	r0, r0, r6
 800e70e:	eb6c 0107 	sbc.w	r1, ip, r7
 800e712:	3801      	subs	r0, #1
 800e714:	f161 0100 	sbc.w	r1, r1, #0
 800e718:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e71c:	f7f1 fdc8 	bl	80002b0 <__aeabi_ldivmod>
 800e720:	9b02      	ldr	r3, [sp, #8]
 800e722:	3001      	adds	r0, #1
 800e724:	f141 0100 	adc.w	r1, r1, #0
 800e728:	fb00 f303 	mul.w	r3, r0, r3
 800e72c:	fb01 330a 	mla	r3, r1, sl, r3
 800e730:	fba0 0a0a 	umull	r0, sl, r0, sl
 800e734:	1986      	adds	r6, r0, r6
 800e736:	4453      	add	r3, sl
 800e738:	eb43 0707 	adc.w	r7, r3, r7
 800e73c:	e7b9      	b.n	800e6b2 <rcl_timer_call+0x96>
 800e73e:	bf00      	nop

0800e740 <rcl_timer_is_ready>:
 800e740:	b570      	push	{r4, r5, r6, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	b378      	cbz	r0, 800e7a6 <rcl_timer_is_ready+0x66>
 800e746:	6803      	ldr	r3, [r0, #0]
 800e748:	4604      	mov	r4, r0
 800e74a:	b383      	cbz	r3, 800e7ae <rcl_timer_is_ready+0x6e>
 800e74c:	460d      	mov	r5, r1
 800e74e:	b351      	cbz	r1, 800e7a6 <rcl_timer_is_ready+0x66>
 800e750:	f3bf 8f5b 	dmb	ish
 800e754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e758:	f3bf 8f5b 	dmb	ish
 800e75c:	b953      	cbnz	r3, 800e774 <rcl_timer_is_ready+0x34>
 800e75e:	6803      	ldr	r3, [r0, #0]
 800e760:	4669      	mov	r1, sp
 800e762:	6818      	ldr	r0, [r3, #0]
 800e764:	f7ff ff4e 	bl	800e604 <rcl_clock_get_now>
 800e768:	4606      	mov	r6, r0
 800e76a:	b140      	cbz	r0, 800e77e <rcl_timer_is_ready+0x3e>
 800e76c:	f240 3321 	movw	r3, #801	; 0x321
 800e770:	4298      	cmp	r0, r3
 800e772:	d101      	bne.n	800e778 <rcl_timer_is_ready+0x38>
 800e774:	2600      	movs	r6, #0
 800e776:	702e      	strb	r6, [r5, #0]
 800e778:	4630      	mov	r0, r6
 800e77a:	b002      	add	sp, #8
 800e77c:	bd70      	pop	{r4, r5, r6, pc}
 800e77e:	6820      	ldr	r0, [r4, #0]
 800e780:	2105      	movs	r1, #5
 800e782:	3028      	adds	r0, #40	; 0x28
 800e784:	f001 fc0c 	bl	800ffa0 <__atomic_load_8>
 800e788:	9b00      	ldr	r3, [sp, #0]
 800e78a:	1ac0      	subs	r0, r0, r3
 800e78c:	9b01      	ldr	r3, [sp, #4]
 800e78e:	eb61 0103 	sbc.w	r1, r1, r3
 800e792:	2801      	cmp	r0, #1
 800e794:	f171 0300 	sbcs.w	r3, r1, #0
 800e798:	bfb4      	ite	lt
 800e79a:	2301      	movlt	r3, #1
 800e79c:	2300      	movge	r3, #0
 800e79e:	4630      	mov	r0, r6
 800e7a0:	702b      	strb	r3, [r5, #0]
 800e7a2:	b002      	add	sp, #8
 800e7a4:	bd70      	pop	{r4, r5, r6, pc}
 800e7a6:	260b      	movs	r6, #11
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	b002      	add	sp, #8
 800e7ac:	bd70      	pop	{r4, r5, r6, pc}
 800e7ae:	f44f 7648 	mov.w	r6, #800	; 0x320
 800e7b2:	e7e1      	b.n	800e778 <rcl_timer_is_ready+0x38>

0800e7b4 <rcl_timer_get_time_until_next_call>:
 800e7b4:	b570      	push	{r4, r5, r6, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	b330      	cbz	r0, 800e808 <rcl_timer_get_time_until_next_call+0x54>
 800e7ba:	6803      	ldr	r3, [r0, #0]
 800e7bc:	4604      	mov	r4, r0
 800e7be:	b33b      	cbz	r3, 800e810 <rcl_timer_get_time_until_next_call+0x5c>
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	b309      	cbz	r1, 800e808 <rcl_timer_get_time_until_next_call+0x54>
 800e7c4:	f3bf 8f5b 	dmb	ish
 800e7c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e7cc:	f3bf 8f5b 	dmb	ish
 800e7d0:	b9ab      	cbnz	r3, 800e7fe <rcl_timer_get_time_until_next_call+0x4a>
 800e7d2:	6803      	ldr	r3, [r0, #0]
 800e7d4:	4669      	mov	r1, sp
 800e7d6:	6818      	ldr	r0, [r3, #0]
 800e7d8:	f7ff ff14 	bl	800e604 <rcl_clock_get_now>
 800e7dc:	4606      	mov	r6, r0
 800e7de:	b958      	cbnz	r0, 800e7f8 <rcl_timer_get_time_until_next_call+0x44>
 800e7e0:	6820      	ldr	r0, [r4, #0]
 800e7e2:	2105      	movs	r1, #5
 800e7e4:	3028      	adds	r0, #40	; 0x28
 800e7e6:	f001 fbdb 	bl	800ffa0 <__atomic_load_8>
 800e7ea:	9b00      	ldr	r3, [sp, #0]
 800e7ec:	1ac0      	subs	r0, r0, r3
 800e7ee:	9b01      	ldr	r3, [sp, #4]
 800e7f0:	6028      	str	r0, [r5, #0]
 800e7f2:	eb61 0103 	sbc.w	r1, r1, r3
 800e7f6:	6069      	str	r1, [r5, #4]
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	b002      	add	sp, #8
 800e7fc:	bd70      	pop	{r4, r5, r6, pc}
 800e7fe:	f240 3621 	movw	r6, #801	; 0x321
 800e802:	4630      	mov	r0, r6
 800e804:	b002      	add	sp, #8
 800e806:	bd70      	pop	{r4, r5, r6, pc}
 800e808:	260b      	movs	r6, #11
 800e80a:	4630      	mov	r0, r6
 800e80c:	b002      	add	sp, #8
 800e80e:	bd70      	pop	{r4, r5, r6, pc}
 800e810:	f44f 7648 	mov.w	r6, #800	; 0x320
 800e814:	e7f0      	b.n	800e7f8 <rcl_timer_get_time_until_next_call+0x44>
 800e816:	bf00      	nop

0800e818 <rcl_timer_get_guard_condition>:
 800e818:	b130      	cbz	r0, 800e828 <rcl_timer_get_guard_condition+0x10>
 800e81a:	6800      	ldr	r0, [r0, #0]
 800e81c:	b120      	cbz	r0, 800e828 <rcl_timer_get_guard_condition+0x10>
 800e81e:	68c3      	ldr	r3, [r0, #12]
 800e820:	b10b      	cbz	r3, 800e826 <rcl_timer_get_guard_condition+0xe>
 800e822:	3008      	adds	r0, #8
 800e824:	4770      	bx	lr
 800e826:	4618      	mov	r0, r3
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop

0800e82c <rcl_validate_enclave_name_with_size>:
 800e82c:	b378      	cbz	r0, 800e88e <rcl_validate_enclave_name_with_size+0x62>
 800e82e:	b570      	push	{r4, r5, r6, lr}
 800e830:	4615      	mov	r5, r2
 800e832:	b0c2      	sub	sp, #264	; 0x108
 800e834:	b302      	cbz	r2, 800e878 <rcl_validate_enclave_name_with_size+0x4c>
 800e836:	461e      	mov	r6, r3
 800e838:	466a      	mov	r2, sp
 800e83a:	ab01      	add	r3, sp, #4
 800e83c:	460c      	mov	r4, r1
 800e83e:	f002 f845 	bl	80108cc <rmw_validate_namespace_with_size>
 800e842:	4684      	mov	ip, r0
 800e844:	b9e8      	cbnz	r0, 800e882 <rcl_validate_enclave_name_with_size+0x56>
 800e846:	9b00      	ldr	r3, [sp, #0]
 800e848:	b923      	cbnz	r3, 800e854 <rcl_validate_enclave_name_with_size+0x28>
 800e84a:	2300      	movs	r3, #0
 800e84c:	602b      	str	r3, [r5, #0]
 800e84e:	4660      	mov	r0, ip
 800e850:	b042      	add	sp, #264	; 0x108
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	2b07      	cmp	r3, #7
 800e856:	d007      	beq.n	800e868 <rcl_validate_enclave_name_with_size+0x3c>
 800e858:	1e5a      	subs	r2, r3, #1
 800e85a:	2a05      	cmp	r2, #5
 800e85c:	d833      	bhi.n	800e8c6 <rcl_validate_enclave_name_with_size+0x9a>
 800e85e:	e8df f002 	tbb	[pc, r2]
 800e862:	2c2f      	.short	0x2c2f
 800e864:	1a232629 	.word	0x1a232629
 800e868:	2cff      	cmp	r4, #255	; 0xff
 800e86a:	d9ee      	bls.n	800e84a <rcl_validate_enclave_name_with_size+0x1e>
 800e86c:	602b      	str	r3, [r5, #0]
 800e86e:	2e00      	cmp	r6, #0
 800e870:	d0ed      	beq.n	800e84e <rcl_validate_enclave_name_with_size+0x22>
 800e872:	23fe      	movs	r3, #254	; 0xfe
 800e874:	6033      	str	r3, [r6, #0]
 800e876:	e7ea      	b.n	800e84e <rcl_validate_enclave_name_with_size+0x22>
 800e878:	f04f 0c0b 	mov.w	ip, #11
 800e87c:	4660      	mov	r0, ip
 800e87e:	b042      	add	sp, #264	; 0x108
 800e880:	bd70      	pop	{r4, r5, r6, pc}
 800e882:	f7fe fe93 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 800e886:	4684      	mov	ip, r0
 800e888:	4660      	mov	r0, ip
 800e88a:	b042      	add	sp, #264	; 0x108
 800e88c:	bd70      	pop	{r4, r5, r6, pc}
 800e88e:	f04f 0c0b 	mov.w	ip, #11
 800e892:	4660      	mov	r0, ip
 800e894:	4770      	bx	lr
 800e896:	2306      	movs	r3, #6
 800e898:	602b      	str	r3, [r5, #0]
 800e89a:	2e00      	cmp	r6, #0
 800e89c:	d0d7      	beq.n	800e84e <rcl_validate_enclave_name_with_size+0x22>
 800e89e:	9b01      	ldr	r3, [sp, #4]
 800e8a0:	6033      	str	r3, [r6, #0]
 800e8a2:	4660      	mov	r0, ip
 800e8a4:	b042      	add	sp, #264	; 0x108
 800e8a6:	bd70      	pop	{r4, r5, r6, pc}
 800e8a8:	2305      	movs	r3, #5
 800e8aa:	602b      	str	r3, [r5, #0]
 800e8ac:	e7f5      	b.n	800e89a <rcl_validate_enclave_name_with_size+0x6e>
 800e8ae:	2304      	movs	r3, #4
 800e8b0:	602b      	str	r3, [r5, #0]
 800e8b2:	e7f2      	b.n	800e89a <rcl_validate_enclave_name_with_size+0x6e>
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	602b      	str	r3, [r5, #0]
 800e8b8:	e7ef      	b.n	800e89a <rcl_validate_enclave_name_with_size+0x6e>
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	602b      	str	r3, [r5, #0]
 800e8be:	e7ec      	b.n	800e89a <rcl_validate_enclave_name_with_size+0x6e>
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	602b      	str	r3, [r5, #0]
 800e8c4:	e7e9      	b.n	800e89a <rcl_validate_enclave_name_with_size+0x6e>
 800e8c6:	4a04      	ldr	r2, [pc, #16]	; (800e8d8 <rcl_validate_enclave_name_with_size+0xac>)
 800e8c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e8cc:	a802      	add	r0, sp, #8
 800e8ce:	f001 fd21 	bl	8010314 <rcutils_snprintf>
 800e8d2:	f04f 0c01 	mov.w	ip, #1
 800e8d6:	e7ba      	b.n	800e84e <rcl_validate_enclave_name_with_size+0x22>
 800e8d8:	08015e60 	.word	0x08015e60

0800e8dc <rcl_validate_enclave_name>:
 800e8dc:	b168      	cbz	r0, 800e8fa <rcl_validate_enclave_name+0x1e>
 800e8de:	b570      	push	{r4, r5, r6, lr}
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	4616      	mov	r6, r2
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	f7f1 fc85 	bl	80001f4 <strlen>
 800e8ea:	4633      	mov	r3, r6
 800e8ec:	4601      	mov	r1, r0
 800e8ee:	462a      	mov	r2, r5
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8f6:	f7ff bf99 	b.w	800e82c <rcl_validate_enclave_name_with_size>
 800e8fa:	200b      	movs	r0, #11
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop

0800e900 <rcl_get_zero_initialized_wait_set>:
 800e900:	b510      	push	{r4, lr}
 800e902:	4c08      	ldr	r4, [pc, #32]	; (800e924 <rcl_get_zero_initialized_wait_set+0x24>)
 800e904:	4686      	mov	lr, r0
 800e906:	4684      	mov	ip, r0
 800e908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e90a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e90e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e910:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e916:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	f8cc 3000 	str.w	r3, [ip]
 800e920:	4670      	mov	r0, lr
 800e922:	bd10      	pop	{r4, pc}
 800e924:	08015ec0 	.word	0x08015ec0

0800e928 <rcl_wait_set_is_valid>:
 800e928:	b118      	cbz	r0, 800e932 <rcl_wait_set_is_valid+0xa>
 800e92a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e92c:	3800      	subs	r0, #0
 800e92e:	bf18      	it	ne
 800e930:	2001      	movne	r0, #1
 800e932:	4770      	bx	lr

0800e934 <rcl_wait_set_fini>:
 800e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	b082      	sub	sp, #8
 800e93a:	2800      	cmp	r0, #0
 800e93c:	f000 8095 	beq.w	800ea6a <rcl_wait_set_fini+0x136>
 800e940:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800e942:	4604      	mov	r4, r0
 800e944:	2e00      	cmp	r6, #0
 800e946:	f000 808c 	beq.w	800ea62 <rcl_wait_set_fini+0x12e>
 800e94a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800e94c:	f003 f9b2 	bl	8011cb4 <rmw_destroy_wait_set>
 800e950:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e952:	1e06      	subs	r6, r0, #0
 800e954:	bf18      	it	ne
 800e956:	f44f 7661 	movne.w	r6, #900	; 0x384
 800e95a:	2d00      	cmp	r5, #0
 800e95c:	f000 8081 	beq.w	800ea62 <rcl_wait_set_fini+0x12e>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800e966:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800e968:	2700      	movs	r7, #0
 800e96a:	6067      	str	r7, [r4, #4]
 800e96c:	602f      	str	r7, [r5, #0]
 800e96e:	b120      	cbz	r0, 800e97a <rcl_wait_set_fini+0x46>
 800e970:	9101      	str	r1, [sp, #4]
 800e972:	47c0      	blx	r8
 800e974:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e976:	9901      	ldr	r1, [sp, #4]
 800e978:	6027      	str	r7, [r4, #0]
 800e97a:	68a8      	ldr	r0, [r5, #8]
 800e97c:	b120      	cbz	r0, 800e988 <rcl_wait_set_fini+0x54>
 800e97e:	47c0      	blx	r8
 800e980:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e982:	2300      	movs	r3, #0
 800e984:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800e988:	68a0      	ldr	r0, [r4, #8]
 800e98a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800e98c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800e98e:	f04f 0800 	mov.w	r8, #0
 800e992:	f8c4 800c 	str.w	r8, [r4, #12]
 800e996:	f8c5 800c 	str.w	r8, [r5, #12]
 800e99a:	b128      	cbz	r0, 800e9a8 <rcl_wait_set_fini+0x74>
 800e99c:	47b8      	blx	r7
 800e99e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e9a0:	f8c4 8008 	str.w	r8, [r4, #8]
 800e9a4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800e9a6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800e9a8:	6968      	ldr	r0, [r5, #20]
 800e9aa:	f04f 0800 	mov.w	r8, #0
 800e9ae:	f8c5 8010 	str.w	r8, [r5, #16]
 800e9b2:	b128      	cbz	r0, 800e9c0 <rcl_wait_set_fini+0x8c>
 800e9b4:	47b8      	blx	r7
 800e9b6:	f8c5 8014 	str.w	r8, [r5, #20]
 800e9ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e9bc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800e9be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800e9c0:	6920      	ldr	r0, [r4, #16]
 800e9c2:	f04f 0800 	mov.w	r8, #0
 800e9c6:	f8c4 8014 	str.w	r8, [r4, #20]
 800e9ca:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800e9ce:	b128      	cbz	r0, 800e9dc <rcl_wait_set_fini+0xa8>
 800e9d0:	47b8      	blx	r7
 800e9d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e9d4:	f8c4 8010 	str.w	r8, [r4, #16]
 800e9d8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800e9da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800e9dc:	69a0      	ldr	r0, [r4, #24]
 800e9de:	f04f 0800 	mov.w	r8, #0
 800e9e2:	f8c4 801c 	str.w	r8, [r4, #28]
 800e9e6:	f8c5 8018 	str.w	r8, [r5, #24]
 800e9ea:	b128      	cbz	r0, 800e9f8 <rcl_wait_set_fini+0xc4>
 800e9ec:	9101      	str	r1, [sp, #4]
 800e9ee:	47b8      	blx	r7
 800e9f0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e9f2:	9901      	ldr	r1, [sp, #4]
 800e9f4:	f8c4 8018 	str.w	r8, [r4, #24]
 800e9f8:	6a28      	ldr	r0, [r5, #32]
 800e9fa:	b120      	cbz	r0, 800ea06 <rcl_wait_set_fini+0xd2>
 800e9fc:	47b8      	blx	r7
 800e9fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ea00:	2300      	movs	r3, #0
 800ea02:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800ea06:	6a20      	ldr	r0, [r4, #32]
 800ea08:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800ea0c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ea0e:	2700      	movs	r7, #0
 800ea10:	6267      	str	r7, [r4, #36]	; 0x24
 800ea12:	626f      	str	r7, [r5, #36]	; 0x24
 800ea14:	b120      	cbz	r0, 800ea20 <rcl_wait_set_fini+0xec>
 800ea16:	9101      	str	r1, [sp, #4]
 800ea18:	47c0      	blx	r8
 800ea1a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ea1c:	9901      	ldr	r1, [sp, #4]
 800ea1e:	6227      	str	r7, [r4, #32]
 800ea20:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800ea22:	b120      	cbz	r0, 800ea2e <rcl_wait_set_fini+0xfa>
 800ea24:	47c0      	blx	r8
 800ea26:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ea28:	2300      	movs	r3, #0
 800ea2a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800ea2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ea30:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800ea34:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ea36:	2700      	movs	r7, #0
 800ea38:	62e7      	str	r7, [r4, #44]	; 0x2c
 800ea3a:	632f      	str	r7, [r5, #48]	; 0x30
 800ea3c:	b120      	cbz	r0, 800ea48 <rcl_wait_set_fini+0x114>
 800ea3e:	9101      	str	r1, [sp, #4]
 800ea40:	47c0      	blx	r8
 800ea42:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ea44:	9901      	ldr	r1, [sp, #4]
 800ea46:	62a7      	str	r7, [r4, #40]	; 0x28
 800ea48:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800ea4a:	b120      	cbz	r0, 800ea56 <rcl_wait_set_fini+0x122>
 800ea4c:	47c0      	blx	r8
 800ea4e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ea50:	2300      	movs	r3, #0
 800ea52:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800ea56:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ea58:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	4798      	blx	r3
 800ea5e:	2300      	movs	r3, #0
 800ea60:	6323      	str	r3, [r4, #48]	; 0x30
 800ea62:	4630      	mov	r0, r6
 800ea64:	b002      	add	sp, #8
 800ea66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea6a:	260b      	movs	r6, #11
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	b002      	add	sp, #8
 800ea70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea74 <rcl_wait_set_add_subscription>:
 800ea74:	b318      	cbz	r0, 800eabe <rcl_wait_set_add_subscription+0x4a>
 800ea76:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ea78:	b570      	push	{r4, r5, r6, lr}
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	b30b      	cbz	r3, 800eac2 <rcl_wait_set_add_subscription+0x4e>
 800ea7e:	b319      	cbz	r1, 800eac8 <rcl_wait_set_add_subscription+0x54>
 800ea80:	681d      	ldr	r5, [r3, #0]
 800ea82:	6840      	ldr	r0, [r0, #4]
 800ea84:	4285      	cmp	r5, r0
 800ea86:	d217      	bcs.n	800eab8 <rcl_wait_set_add_subscription+0x44>
 800ea88:	6820      	ldr	r0, [r4, #0]
 800ea8a:	1c6e      	adds	r6, r5, #1
 800ea8c:	601e      	str	r6, [r3, #0]
 800ea8e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ea92:	b102      	cbz	r2, 800ea96 <rcl_wait_set_add_subscription+0x22>
 800ea94:	6015      	str	r5, [r2, #0]
 800ea96:	4608      	mov	r0, r1
 800ea98:	f7ff fd14 	bl	800e4c4 <rcl_subscription_get_rmw_handle>
 800ea9c:	b150      	cbz	r0, 800eab4 <rcl_wait_set_add_subscription+0x40>
 800ea9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eaa0:	6842      	ldr	r2, [r0, #4]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaa8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800eaaa:	6853      	ldr	r3, [r2, #4]
 800eaac:	3301      	adds	r3, #1
 800eaae:	2000      	movs	r0, #0
 800eab0:	6053      	str	r3, [r2, #4]
 800eab2:	bd70      	pop	{r4, r5, r6, pc}
 800eab4:	2001      	movs	r0, #1
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	f240 3086 	movw	r0, #902	; 0x386
 800eabc:	bd70      	pop	{r4, r5, r6, pc}
 800eabe:	200b      	movs	r0, #11
 800eac0:	4770      	bx	lr
 800eac2:	f44f 7061 	mov.w	r0, #900	; 0x384
 800eac6:	bd70      	pop	{r4, r5, r6, pc}
 800eac8:	200b      	movs	r0, #11
 800eaca:	bd70      	pop	{r4, r5, r6, pc}

0800eacc <rcl_wait_set_clear>:
 800eacc:	2800      	cmp	r0, #0
 800eace:	d073      	beq.n	800ebb8 <rcl_wait_set_clear+0xec>
 800ead0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ead2:	b510      	push	{r4, lr}
 800ead4:	4604      	mov	r4, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d070      	beq.n	800ebbc <rcl_wait_set_clear+0xf0>
 800eada:	6800      	ldr	r0, [r0, #0]
 800eadc:	b138      	cbz	r0, 800eaee <rcl_wait_set_clear+0x22>
 800eade:	6862      	ldr	r2, [r4, #4]
 800eae0:	2100      	movs	r1, #0
 800eae2:	0092      	lsls	r2, r2, #2
 800eae4:	f005 ff08 	bl	80148f8 <memset>
 800eae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eaea:	2200      	movs	r2, #0
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	68a0      	ldr	r0, [r4, #8]
 800eaf0:	b138      	cbz	r0, 800eb02 <rcl_wait_set_clear+0x36>
 800eaf2:	68e2      	ldr	r2, [r4, #12]
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	0092      	lsls	r2, r2, #2
 800eaf8:	f005 fefe 	bl	80148f8 <memset>
 800eafc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eafe:	2200      	movs	r2, #0
 800eb00:	60da      	str	r2, [r3, #12]
 800eb02:	69a0      	ldr	r0, [r4, #24]
 800eb04:	b138      	cbz	r0, 800eb16 <rcl_wait_set_clear+0x4a>
 800eb06:	69e2      	ldr	r2, [r4, #28]
 800eb08:	2100      	movs	r1, #0
 800eb0a:	0092      	lsls	r2, r2, #2
 800eb0c:	f005 fef4 	bl	80148f8 <memset>
 800eb10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb12:	2200      	movs	r2, #0
 800eb14:	619a      	str	r2, [r3, #24]
 800eb16:	6a20      	ldr	r0, [r4, #32]
 800eb18:	b138      	cbz	r0, 800eb2a <rcl_wait_set_clear+0x5e>
 800eb1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	0092      	lsls	r2, r2, #2
 800eb20:	f005 feea 	bl	80148f8 <memset>
 800eb24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb26:	2200      	movs	r2, #0
 800eb28:	625a      	str	r2, [r3, #36]	; 0x24
 800eb2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eb2c:	b138      	cbz	r0, 800eb3e <rcl_wait_set_clear+0x72>
 800eb2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eb30:	2100      	movs	r1, #0
 800eb32:	0092      	lsls	r2, r2, #2
 800eb34:	f005 fee0 	bl	80148f8 <memset>
 800eb38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	631a      	str	r2, [r3, #48]	; 0x30
 800eb3e:	6920      	ldr	r0, [r4, #16]
 800eb40:	b138      	cbz	r0, 800eb52 <rcl_wait_set_clear+0x86>
 800eb42:	6962      	ldr	r2, [r4, #20]
 800eb44:	2100      	movs	r1, #0
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	f005 fed6 	bl	80148f8 <memset>
 800eb4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb4e:	2200      	movs	r2, #0
 800eb50:	641a      	str	r2, [r3, #64]	; 0x40
 800eb52:	6898      	ldr	r0, [r3, #8]
 800eb54:	b138      	cbz	r0, 800eb66 <rcl_wait_set_clear+0x9a>
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	2100      	movs	r1, #0
 800eb5a:	0092      	lsls	r2, r2, #2
 800eb5c:	f005 fecc 	bl	80148f8 <memset>
 800eb60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb62:	2200      	movs	r2, #0
 800eb64:	605a      	str	r2, [r3, #4]
 800eb66:	6958      	ldr	r0, [r3, #20]
 800eb68:	b138      	cbz	r0, 800eb7a <rcl_wait_set_clear+0xae>
 800eb6a:	691a      	ldr	r2, [r3, #16]
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	0092      	lsls	r2, r2, #2
 800eb70:	f005 fec2 	bl	80148f8 <memset>
 800eb74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb76:	2200      	movs	r2, #0
 800eb78:	611a      	str	r2, [r3, #16]
 800eb7a:	6a18      	ldr	r0, [r3, #32]
 800eb7c:	b138      	cbz	r0, 800eb8e <rcl_wait_set_clear+0xc2>
 800eb7e:	69da      	ldr	r2, [r3, #28]
 800eb80:	2100      	movs	r1, #0
 800eb82:	0092      	lsls	r2, r2, #2
 800eb84:	f005 feb8 	bl	80148f8 <memset>
 800eb88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	61da      	str	r2, [r3, #28]
 800eb8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eb90:	b138      	cbz	r0, 800eba2 <rcl_wait_set_clear+0xd6>
 800eb92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb94:	2100      	movs	r1, #0
 800eb96:	0092      	lsls	r2, r2, #2
 800eb98:	f005 feae 	bl	80148f8 <memset>
 800eb9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb9e:	2200      	movs	r2, #0
 800eba0:	629a      	str	r2, [r3, #40]	; 0x28
 800eba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800eba4:	b138      	cbz	r0, 800ebb6 <rcl_wait_set_clear+0xea>
 800eba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eba8:	2100      	movs	r1, #0
 800ebaa:	0092      	lsls	r2, r2, #2
 800ebac:	f005 fea4 	bl	80148f8 <memset>
 800ebb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	6358      	str	r0, [r3, #52]	; 0x34
 800ebb6:	bd10      	pop	{r4, pc}
 800ebb8:	200b      	movs	r0, #11
 800ebba:	4770      	bx	lr
 800ebbc:	f44f 7061 	mov.w	r0, #900	; 0x384
 800ebc0:	bd10      	pop	{r4, pc}
 800ebc2:	bf00      	nop

0800ebc4 <rcl_wait_set_resize>:
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	f000 8185 	beq.w	800eed4 <rcl_wait_set_resize+0x310>
 800ebca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800ebd0:	b083      	sub	sp, #12
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	2c00      	cmp	r4, #0
 800ebd6:	f000 817f 	beq.w	800eed8 <rcl_wait_set_resize+0x314>
 800ebda:	f04f 0900 	mov.w	r9, #0
 800ebde:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ebe2:	461f      	mov	r7, r3
 800ebe4:	4688      	mov	r8, r1
 800ebe6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 800ebea:	4616      	mov	r6, r2
 800ebec:	f8c0 9004 	str.w	r9, [r0, #4]
 800ebf0:	f8c4 9000 	str.w	r9, [r4]
 800ebf4:	2900      	cmp	r1, #0
 800ebf6:	f000 80bd 	beq.w	800ed74 <rcl_wait_set_resize+0x1b0>
 800ebfa:	008c      	lsls	r4, r1, #2
 800ebfc:	6800      	ldr	r0, [r0, #0]
 800ebfe:	9301      	str	r3, [sp, #4]
 800ec00:	4652      	mov	r2, sl
 800ec02:	4621      	mov	r1, r4
 800ec04:	4798      	blx	r3
 800ec06:	9b01      	ldr	r3, [sp, #4]
 800ec08:	6028      	str	r0, [r5, #0]
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	f000 80cb 	beq.w	800eda6 <rcl_wait_set_resize+0x1e2>
 800ec10:	4622      	mov	r2, r4
 800ec12:	4649      	mov	r1, r9
 800ec14:	9301      	str	r3, [sp, #4]
 800ec16:	f005 fe6f 	bl	80148f8 <memset>
 800ec1a:	f8c5 8004 	str.w	r8, [r5, #4]
 800ec1e:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800ec22:	9b01      	ldr	r3, [sp, #4]
 800ec24:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ec28:	f8c8 9004 	str.w	r9, [r8, #4]
 800ec2c:	4652      	mov	r2, sl
 800ec2e:	4621      	mov	r1, r4
 800ec30:	4798      	blx	r3
 800ec32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ec34:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f000 80ac 	beq.w	800ed98 <rcl_wait_set_resize+0x1d4>
 800ec40:	4622      	mov	r2, r4
 800ec42:	4649      	mov	r1, r9
 800ec44:	4618      	mov	r0, r3
 800ec46:	f005 fe57 	bl	80148f8 <memset>
 800ec4a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ec4c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ec50:	f04f 0800 	mov.w	r8, #0
 800ec54:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 800ec58:	f8c5 800c 	str.w	r8, [r5, #12]
 800ec5c:	f8c4 800c 	str.w	r8, [r4, #12]
 800ec60:	2e00      	cmp	r6, #0
 800ec62:	f040 80a4 	bne.w	800edae <rcl_wait_set_resize+0x1ea>
 800ec66:	68a8      	ldr	r0, [r5, #8]
 800ec68:	b128      	cbz	r0, 800ec76 <rcl_wait_set_resize+0xb2>
 800ec6a:	4649      	mov	r1, r9
 800ec6c:	4790      	blx	r2
 800ec6e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ec70:	60ae      	str	r6, [r5, #8]
 800ec72:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ec76:	f04f 0800 	mov.w	r8, #0
 800ec7a:	19f6      	adds	r6, r6, r7
 800ec7c:	f8c4 8010 	str.w	r8, [r4, #16]
 800ec80:	f040 80ac 	bne.w	800eddc <rcl_wait_set_resize+0x218>
 800ec84:	6960      	ldr	r0, [r4, #20]
 800ec86:	b130      	cbz	r0, 800ec96 <rcl_wait_set_resize+0xd2>
 800ec88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	4798      	blx	r3
 800ec8e:	6166      	str	r6, [r4, #20]
 800ec90:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ec92:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ec96:	2600      	movs	r6, #0
 800ec98:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800ec9c:	616e      	str	r6, [r5, #20]
 800ec9e:	6426      	str	r6, [r4, #64]	; 0x40
 800eca0:	2f00      	cmp	r7, #0
 800eca2:	f040 80ad 	bne.w	800ee00 <rcl_wait_set_resize+0x23c>
 800eca6:	6928      	ldr	r0, [r5, #16]
 800eca8:	b138      	cbz	r0, 800ecba <rcl_wait_set_resize+0xf6>
 800ecaa:	4649      	mov	r1, r9
 800ecac:	47d0      	blx	sl
 800ecae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ecb0:	612f      	str	r7, [r5, #16]
 800ecb2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800ecb6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ecba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecbc:	2600      	movs	r6, #0
 800ecbe:	61ee      	str	r6, [r5, #28]
 800ecc0:	61a6      	str	r6, [r4, #24]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f040 80af 	bne.w	800ee26 <rcl_wait_set_resize+0x262>
 800ecc8:	69a8      	ldr	r0, [r5, #24]
 800ecca:	b120      	cbz	r0, 800ecd6 <rcl_wait_set_resize+0x112>
 800eccc:	4649      	mov	r1, r9
 800ecce:	47d0      	blx	sl
 800ecd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecd2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ecd4:	61ab      	str	r3, [r5, #24]
 800ecd6:	6a20      	ldr	r0, [r4, #32]
 800ecd8:	b128      	cbz	r0, 800ece6 <rcl_wait_set_resize+0x122>
 800ecda:	4649      	mov	r1, r9
 800ecdc:	47d0      	blx	sl
 800ecde:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ece0:	2300      	movs	r3, #0
 800ece2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ece6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ece8:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800ecea:	2600      	movs	r6, #0
 800ecec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800ecf0:	626e      	str	r6, [r5, #36]	; 0x24
 800ecf2:	6266      	str	r6, [r4, #36]	; 0x24
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f000 80b6 	beq.w	800ee66 <rcl_wait_set_resize+0x2a2>
 800ecfa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800ecfe:	6a28      	ldr	r0, [r5, #32]
 800ed00:	463a      	mov	r2, r7
 800ed02:	4651      	mov	r1, sl
 800ed04:	47c8      	blx	r9
 800ed06:	6228      	str	r0, [r5, #32]
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	d04c      	beq.n	800eda6 <rcl_wait_set_resize+0x1e2>
 800ed0c:	4652      	mov	r2, sl
 800ed0e:	4631      	mov	r1, r6
 800ed10:	f005 fdf2 	bl	80148f8 <memset>
 800ed14:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ed16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed18:	626b      	str	r3, [r5, #36]	; 0x24
 800ed1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ed1c:	62a6      	str	r6, [r4, #40]	; 0x28
 800ed1e:	463a      	mov	r2, r7
 800ed20:	4651      	mov	r1, sl
 800ed22:	47c8      	blx	r9
 800ed24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ed26:	62e0      	str	r0, [r4, #44]	; 0x2c
 800ed28:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ed2a:	2c00      	cmp	r4, #0
 800ed2c:	f000 80f0 	beq.w	800ef10 <rcl_wait_set_resize+0x34c>
 800ed30:	4620      	mov	r0, r4
 800ed32:	4652      	mov	r2, sl
 800ed34:	4631      	mov	r1, r6
 800ed36:	f005 fddf 	bl	80148f8 <memset>
 800ed3a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ed3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed3e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800ed40:	2600      	movs	r6, #0
 800ed42:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800ed46:	62ee      	str	r6, [r5, #44]	; 0x2c
 800ed48:	6326      	str	r6, [r4, #48]	; 0x30
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f040 809d 	bne.w	800ee8a <rcl_wait_set_resize+0x2c6>
 800ed50:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ed52:	b120      	cbz	r0, 800ed5e <rcl_wait_set_resize+0x19a>
 800ed54:	4639      	mov	r1, r7
 800ed56:	47c0      	blx	r8
 800ed58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed5a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ed5c:	62ab      	str	r3, [r5, #40]	; 0x28
 800ed5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ed60:	b310      	cbz	r0, 800eda8 <rcl_wait_set_resize+0x1e4>
 800ed62:	4639      	mov	r1, r7
 800ed64:	47c0      	blx	r8
 800ed66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ed68:	2000      	movs	r0, #0
 800ed6a:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 800ed6e:	b003      	add	sp, #12
 800ed70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed74:	6800      	ldr	r0, [r0, #0]
 800ed76:	b120      	cbz	r0, 800ed82 <rcl_wait_set_resize+0x1be>
 800ed78:	4651      	mov	r1, sl
 800ed7a:	47d8      	blx	fp
 800ed7c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ed7e:	f8c5 8000 	str.w	r8, [r5]
 800ed82:	68a0      	ldr	r0, [r4, #8]
 800ed84:	2800      	cmp	r0, #0
 800ed86:	f43f af61 	beq.w	800ec4c <rcl_wait_set_resize+0x88>
 800ed8a:	4651      	mov	r1, sl
 800ed8c:	47d8      	blx	fp
 800ed8e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ed90:	2300      	movs	r3, #0
 800ed92:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800ed96:	e759      	b.n	800ec4c <rcl_wait_set_resize+0x88>
 800ed98:	6828      	ldr	r0, [r5, #0]
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	4651      	mov	r1, sl
 800ed9e:	47d8      	blx	fp
 800eda0:	9b01      	ldr	r3, [sp, #4]
 800eda2:	e9c5 3300 	strd	r3, r3, [r5]
 800eda6:	200a      	movs	r0, #10
 800eda8:	b003      	add	sp, #12
 800edaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edae:	00b4      	lsls	r4, r6, #2
 800edb0:	68a8      	ldr	r0, [r5, #8]
 800edb2:	464a      	mov	r2, r9
 800edb4:	4621      	mov	r1, r4
 800edb6:	4798      	blx	r3
 800edb8:	60a8      	str	r0, [r5, #8]
 800edba:	2800      	cmp	r0, #0
 800edbc:	d0f3      	beq.n	800eda6 <rcl_wait_set_resize+0x1e2>
 800edbe:	4622      	mov	r2, r4
 800edc0:	4641      	mov	r1, r8
 800edc2:	f005 fd99 	bl	80148f8 <memset>
 800edc6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800edc8:	60ee      	str	r6, [r5, #12]
 800edca:	f04f 0800 	mov.w	r8, #0
 800edce:	19f6      	adds	r6, r6, r7
 800edd0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800edd4:	f8c4 8010 	str.w	r8, [r4, #16]
 800edd8:	f43f af54 	beq.w	800ec84 <rcl_wait_set_resize+0xc0>
 800eddc:	00b6      	lsls	r6, r6, #2
 800edde:	464a      	mov	r2, r9
 800ede0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ede2:	6960      	ldr	r0, [r4, #20]
 800ede4:	4631      	mov	r1, r6
 800ede6:	4798      	blx	r3
 800ede8:	4681      	mov	r9, r0
 800edea:	6160      	str	r0, [r4, #20]
 800edec:	2800      	cmp	r0, #0
 800edee:	d076      	beq.n	800eede <rcl_wait_set_resize+0x31a>
 800edf0:	4632      	mov	r2, r6
 800edf2:	4641      	mov	r1, r8
 800edf4:	f005 fd80 	bl	80148f8 <memset>
 800edf8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800edfa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800edfe:	e74a      	b.n	800ec96 <rcl_wait_set_resize+0xd2>
 800ee00:	00bc      	lsls	r4, r7, #2
 800ee02:	6928      	ldr	r0, [r5, #16]
 800ee04:	464a      	mov	r2, r9
 800ee06:	4621      	mov	r1, r4
 800ee08:	47c0      	blx	r8
 800ee0a:	6128      	str	r0, [r5, #16]
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d0ca      	beq.n	800eda6 <rcl_wait_set_resize+0x1e2>
 800ee10:	4622      	mov	r2, r4
 800ee12:	4631      	mov	r1, r6
 800ee14:	f005 fd70 	bl	80148f8 <memset>
 800ee18:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ee1a:	616f      	str	r7, [r5, #20]
 800ee1c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800ee20:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ee24:	e749      	b.n	800ecba <rcl_wait_set_resize+0xf6>
 800ee26:	009c      	lsls	r4, r3, #2
 800ee28:	69a8      	ldr	r0, [r5, #24]
 800ee2a:	464a      	mov	r2, r9
 800ee2c:	4621      	mov	r1, r4
 800ee2e:	47c0      	blx	r8
 800ee30:	61a8      	str	r0, [r5, #24]
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d0b7      	beq.n	800eda6 <rcl_wait_set_resize+0x1e2>
 800ee36:	4622      	mov	r2, r4
 800ee38:	4631      	mov	r1, r6
 800ee3a:	f005 fd5d 	bl	80148f8 <memset>
 800ee3e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800ee40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee42:	61eb      	str	r3, [r5, #28]
 800ee44:	6a38      	ldr	r0, [r7, #32]
 800ee46:	61fe      	str	r6, [r7, #28]
 800ee48:	464a      	mov	r2, r9
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	47c0      	blx	r8
 800ee4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ee50:	6238      	str	r0, [r7, #32]
 800ee52:	6a1f      	ldr	r7, [r3, #32]
 800ee54:	2f00      	cmp	r7, #0
 800ee56:	d054      	beq.n	800ef02 <rcl_wait_set_resize+0x33e>
 800ee58:	4622      	mov	r2, r4
 800ee5a:	4631      	mov	r1, r6
 800ee5c:	4638      	mov	r0, r7
 800ee5e:	f005 fd4b 	bl	80148f8 <memset>
 800ee62:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ee64:	e73f      	b.n	800ece6 <rcl_wait_set_resize+0x122>
 800ee66:	6a28      	ldr	r0, [r5, #32]
 800ee68:	b120      	cbz	r0, 800ee74 <rcl_wait_set_resize+0x2b0>
 800ee6a:	4639      	mov	r1, r7
 800ee6c:	47c0      	blx	r8
 800ee6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee70:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ee72:	622b      	str	r3, [r5, #32]
 800ee74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ee76:	2800      	cmp	r0, #0
 800ee78:	f43f af60 	beq.w	800ed3c <rcl_wait_set_resize+0x178>
 800ee7c:	4639      	mov	r1, r7
 800ee7e:	47c0      	blx	r8
 800ee80:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800ee82:	2300      	movs	r3, #0
 800ee84:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800ee88:	e758      	b.n	800ed3c <rcl_wait_set_resize+0x178>
 800ee8a:	009c      	lsls	r4, r3, #2
 800ee8c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ee8e:	463a      	mov	r2, r7
 800ee90:	4621      	mov	r1, r4
 800ee92:	47c8      	blx	r9
 800ee94:	62a8      	str	r0, [r5, #40]	; 0x28
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d085      	beq.n	800eda6 <rcl_wait_set_resize+0x1e2>
 800ee9a:	4622      	mov	r2, r4
 800ee9c:	4631      	mov	r1, r6
 800ee9e:	f005 fd2b 	bl	80148f8 <memset>
 800eea2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800eea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eea8:	62eb      	str	r3, [r5, #44]	; 0x2c
 800eeaa:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800eeae:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 800eeb2:	463a      	mov	r2, r7
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	47c8      	blx	r9
 800eeb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800eeba:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 800eebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec0:	b36b      	cbz	r3, 800ef1e <rcl_wait_set_resize+0x35a>
 800eec2:	4622      	mov	r2, r4
 800eec4:	4631      	mov	r1, r6
 800eec6:	4618      	mov	r0, r3
 800eec8:	f005 fd16 	bl	80148f8 <memset>
 800eecc:	4630      	mov	r0, r6
 800eece:	b003      	add	sp, #12
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed4:	200b      	movs	r0, #11
 800eed6:	4770      	bx	lr
 800eed8:	f44f 7061 	mov.w	r0, #900	; 0x384
 800eedc:	e764      	b.n	800eda8 <rcl_wait_set_resize+0x1e4>
 800eede:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800eee0:	68a8      	ldr	r0, [r5, #8]
 800eee2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800eee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eee6:	4798      	blx	r3
 800eee8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800eeea:	6928      	ldr	r0, [r5, #16]
 800eeec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eeee:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800eef0:	f8c5 900c 	str.w	r9, [r5, #12]
 800eef4:	f8c5 9008 	str.w	r9, [r5, #8]
 800eef8:	4790      	blx	r2
 800eefa:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800eefe:	200a      	movs	r0, #10
 800ef00:	e752      	b.n	800eda8 <rcl_wait_set_resize+0x1e4>
 800ef02:	69a8      	ldr	r0, [r5, #24]
 800ef04:	4649      	mov	r1, r9
 800ef06:	47d0      	blx	sl
 800ef08:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800ef0c:	200a      	movs	r0, #10
 800ef0e:	e74b      	b.n	800eda8 <rcl_wait_set_resize+0x1e4>
 800ef10:	6a28      	ldr	r0, [r5, #32]
 800ef12:	4639      	mov	r1, r7
 800ef14:	47c0      	blx	r8
 800ef16:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800ef1a:	200a      	movs	r0, #10
 800ef1c:	e744      	b.n	800eda8 <rcl_wait_set_resize+0x1e4>
 800ef1e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	4639      	mov	r1, r7
 800ef24:	47c0      	blx	r8
 800ef26:	9b01      	ldr	r3, [sp, #4]
 800ef28:	200a      	movs	r0, #10
 800ef2a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800ef2e:	e73b      	b.n	800eda8 <rcl_wait_set_resize+0x1e4>

0800ef30 <rcl_wait_set_init>:
 800ef30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	4604      	mov	r4, r0
 800ef38:	a810      	add	r0, sp, #64	; 0x40
 800ef3a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800ef3e:	460f      	mov	r7, r1
 800ef40:	4690      	mov	r8, r2
 800ef42:	4699      	mov	r9, r3
 800ef44:	f7f9 fc94 	bl	8008870 <rcutils_allocator_is_valid>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d06b      	beq.n	800f024 <rcl_wait_set_init+0xf4>
 800ef4c:	2c00      	cmp	r4, #0
 800ef4e:	d069      	beq.n	800f024 <rcl_wait_set_init+0xf4>
 800ef50:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ef52:	b125      	cbz	r5, 800ef5e <rcl_wait_set_init+0x2e>
 800ef54:	2564      	movs	r5, #100	; 0x64
 800ef56:	4628      	mov	r0, r5
 800ef58:	b004      	add	sp, #16
 800ef5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5e:	f1ba 0f00 	cmp.w	sl, #0
 800ef62:	d05f      	beq.n	800f024 <rcl_wait_set_init+0xf4>
 800ef64:	4650      	mov	r0, sl
 800ef66:	f7fe fb3f 	bl	800d5e8 <rcl_context_is_valid>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d067      	beq.n	800f03e <rcl_wait_set_init+0x10e>
 800ef6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef70:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ef72:	205c      	movs	r0, #92	; 0x5c
 800ef74:	4798      	blx	r3
 800ef76:	6320      	str	r0, [r4, #48]	; 0x30
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	d062      	beq.n	800f042 <rcl_wait_set_init+0x112>
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	225c      	movs	r2, #92	; 0x5c
 800ef80:	f005 fcba 	bl	80148f8 <memset>
 800ef84:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ef88:	eb03 0e02 	add.w	lr, r3, r2
 800ef8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef8e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800ef90:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 800ef94:	449e      	add	lr, r3
 800ef96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef9a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800ef9e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800efa2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800efa6:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 800efaa:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 800efae:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800efb2:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 800efb6:	f8da a000 	ldr.w	sl, [sl]
 800efba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800efbc:	44c6      	add	lr, r8
 800efbe:	f8dc 3000 	ldr.w	r3, [ip]
 800efc2:	602b      	str	r3, [r5, #0]
 800efc4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800efc8:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 800efcc:	f002 fe68 	bl	8011ca0 <rmw_create_wait_set>
 800efd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800efd2:	63f0      	str	r0, [r6, #60]	; 0x3c
 800efd4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800efd6:	b350      	cbz	r0, 800f02e <rcl_wait_set_init+0xfe>
 800efd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efda:	9302      	str	r3, [sp, #8]
 800efdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efde:	9301      	str	r3, [sp, #4]
 800efe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	4642      	mov	r2, r8
 800efe6:	464b      	mov	r3, r9
 800efe8:	4639      	mov	r1, r7
 800efea:	4620      	mov	r0, r4
 800efec:	f7ff fdea 	bl	800ebc4 <rcl_wait_set_resize>
 800eff0:	4605      	mov	r5, r0
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d0af      	beq.n	800ef56 <rcl_wait_set_init+0x26>
 800eff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eff8:	bb2b      	cbnz	r3, 800f046 <rcl_wait_set_init+0x116>
 800effa:	2600      	movs	r6, #0
 800effc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800f000:	9600      	str	r6, [sp, #0]
 800f002:	4633      	mov	r3, r6
 800f004:	4632      	mov	r2, r6
 800f006:	4631      	mov	r1, r6
 800f008:	4620      	mov	r0, r4
 800f00a:	f7ff fddb 	bl	800ebc4 <rcl_wait_set_resize>
 800f00e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f010:	2800      	cmp	r0, #0
 800f012:	d0a0      	beq.n	800ef56 <rcl_wait_set_init+0x26>
 800f014:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800f016:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800f018:	4798      	blx	r3
 800f01a:	4628      	mov	r0, r5
 800f01c:	6326      	str	r6, [r4, #48]	; 0x30
 800f01e:	b004      	add	sp, #16
 800f020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f024:	250b      	movs	r5, #11
 800f026:	4628      	mov	r0, r5
 800f028:	b004      	add	sp, #16
 800f02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f02e:	2501      	movs	r5, #1
 800f030:	f002 fe40 	bl	8011cb4 <rmw_destroy_wait_set>
 800f034:	2800      	cmp	r0, #0
 800f036:	bf18      	it	ne
 800f038:	f44f 7561 	movne.w	r5, #900	; 0x384
 800f03c:	e7dd      	b.n	800effa <rcl_wait_set_init+0xca>
 800f03e:	2565      	movs	r5, #101	; 0x65
 800f040:	e789      	b.n	800ef56 <rcl_wait_set_init+0x26>
 800f042:	250a      	movs	r5, #10
 800f044:	e787      	b.n	800ef56 <rcl_wait_set_init+0x26>
 800f046:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f048:	e7f2      	b.n	800f030 <rcl_wait_set_init+0x100>
 800f04a:	bf00      	nop

0800f04c <rcl_wait_set_add_guard_condition>:
 800f04c:	b318      	cbz	r0, 800f096 <rcl_wait_set_add_guard_condition+0x4a>
 800f04e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	4604      	mov	r4, r0
 800f054:	b30b      	cbz	r3, 800f09a <rcl_wait_set_add_guard_condition+0x4e>
 800f056:	b319      	cbz	r1, 800f0a0 <rcl_wait_set_add_guard_condition+0x54>
 800f058:	68dd      	ldr	r5, [r3, #12]
 800f05a:	68c0      	ldr	r0, [r0, #12]
 800f05c:	4285      	cmp	r5, r0
 800f05e:	d217      	bcs.n	800f090 <rcl_wait_set_add_guard_condition+0x44>
 800f060:	68a0      	ldr	r0, [r4, #8]
 800f062:	1c6e      	adds	r6, r5, #1
 800f064:	60de      	str	r6, [r3, #12]
 800f066:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f06a:	b102      	cbz	r2, 800f06e <rcl_wait_set_add_guard_condition+0x22>
 800f06c:	6015      	str	r5, [r2, #0]
 800f06e:	4608      	mov	r0, r1
 800f070:	f004 fe42 	bl	8013cf8 <rcl_guard_condition_get_rmw_handle>
 800f074:	b150      	cbz	r0, 800f08c <rcl_wait_set_add_guard_condition+0x40>
 800f076:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f078:	6842      	ldr	r2, [r0, #4]
 800f07a:	695b      	ldr	r3, [r3, #20]
 800f07c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f080:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f082:	6913      	ldr	r3, [r2, #16]
 800f084:	3301      	adds	r3, #1
 800f086:	2000      	movs	r0, #0
 800f088:	6113      	str	r3, [r2, #16]
 800f08a:	bd70      	pop	{r4, r5, r6, pc}
 800f08c:	2001      	movs	r0, #1
 800f08e:	bd70      	pop	{r4, r5, r6, pc}
 800f090:	f240 3086 	movw	r0, #902	; 0x386
 800f094:	bd70      	pop	{r4, r5, r6, pc}
 800f096:	200b      	movs	r0, #11
 800f098:	4770      	bx	lr
 800f09a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f09e:	bd70      	pop	{r4, r5, r6, pc}
 800f0a0:	200b      	movs	r0, #11
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}

0800f0a4 <rcl_wait_set_add_timer>:
 800f0a4:	b328      	cbz	r0, 800f0f2 <rcl_wait_set_add_timer+0x4e>
 800f0a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f0a8:	b570      	push	{r4, r5, r6, lr}
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	b31b      	cbz	r3, 800f0f6 <rcl_wait_set_add_timer+0x52>
 800f0ae:	b329      	cbz	r1, 800f0fc <rcl_wait_set_add_timer+0x58>
 800f0b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f0b2:	6965      	ldr	r5, [r4, #20]
 800f0b4:	42a8      	cmp	r0, r5
 800f0b6:	d219      	bcs.n	800f0ec <rcl_wait_set_add_timer+0x48>
 800f0b8:	6925      	ldr	r5, [r4, #16]
 800f0ba:	1c46      	adds	r6, r0, #1
 800f0bc:	641e      	str	r6, [r3, #64]	; 0x40
 800f0be:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800f0c2:	b102      	cbz	r2, 800f0c6 <rcl_wait_set_add_timer+0x22>
 800f0c4:	6010      	str	r0, [r2, #0]
 800f0c6:	4608      	mov	r0, r1
 800f0c8:	f7ff fba6 	bl	800e818 <rcl_timer_get_guard_condition>
 800f0cc:	b168      	cbz	r0, 800f0ea <rcl_wait_set_add_timer+0x46>
 800f0ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f0d0:	68e3      	ldr	r3, [r4, #12]
 800f0d2:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	441d      	add	r5, r3
 800f0d8:	f004 fe0e 	bl	8013cf8 <rcl_guard_condition_get_rmw_handle>
 800f0dc:	b180      	cbz	r0, 800f100 <rcl_wait_set_add_timer+0x5c>
 800f0de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0e0:	6842      	ldr	r2, [r0, #4]
 800f0e2:	695b      	ldr	r3, [r3, #20]
 800f0e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}
 800f0ec:	f240 3086 	movw	r0, #902	; 0x386
 800f0f0:	bd70      	pop	{r4, r5, r6, pc}
 800f0f2:	200b      	movs	r0, #11
 800f0f4:	4770      	bx	lr
 800f0f6:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
 800f0fc:	200b      	movs	r0, #11
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	2001      	movs	r0, #1
 800f102:	bd70      	pop	{r4, r5, r6, pc}

0800f104 <rcl_wait_set_add_client>:
 800f104:	b318      	cbz	r0, 800f14e <rcl_wait_set_add_client+0x4a>
 800f106:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f108:	b570      	push	{r4, r5, r6, lr}
 800f10a:	4604      	mov	r4, r0
 800f10c:	b30b      	cbz	r3, 800f152 <rcl_wait_set_add_client+0x4e>
 800f10e:	b319      	cbz	r1, 800f158 <rcl_wait_set_add_client+0x54>
 800f110:	699d      	ldr	r5, [r3, #24]
 800f112:	69c0      	ldr	r0, [r0, #28]
 800f114:	4285      	cmp	r5, r0
 800f116:	d217      	bcs.n	800f148 <rcl_wait_set_add_client+0x44>
 800f118:	69a0      	ldr	r0, [r4, #24]
 800f11a:	1c6e      	adds	r6, r5, #1
 800f11c:	619e      	str	r6, [r3, #24]
 800f11e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f122:	b102      	cbz	r2, 800f126 <rcl_wait_set_add_client+0x22>
 800f124:	6015      	str	r5, [r2, #0]
 800f126:	4608      	mov	r0, r1
 800f128:	f7fe f9b2 	bl	800d490 <rcl_client_get_rmw_handle>
 800f12c:	b150      	cbz	r0, 800f144 <rcl_wait_set_add_client+0x40>
 800f12e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f130:	6842      	ldr	r2, [r0, #4]
 800f132:	6a1b      	ldr	r3, [r3, #32]
 800f134:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f138:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f13a:	69d3      	ldr	r3, [r2, #28]
 800f13c:	3301      	adds	r3, #1
 800f13e:	2000      	movs	r0, #0
 800f140:	61d3      	str	r3, [r2, #28]
 800f142:	bd70      	pop	{r4, r5, r6, pc}
 800f144:	2001      	movs	r0, #1
 800f146:	bd70      	pop	{r4, r5, r6, pc}
 800f148:	f240 3086 	movw	r0, #902	; 0x386
 800f14c:	bd70      	pop	{r4, r5, r6, pc}
 800f14e:	200b      	movs	r0, #11
 800f150:	4770      	bx	lr
 800f152:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	200b      	movs	r0, #11
 800f15a:	bd70      	pop	{r4, r5, r6, pc}

0800f15c <rcl_wait_set_add_service>:
 800f15c:	b318      	cbz	r0, 800f1a6 <rcl_wait_set_add_service+0x4a>
 800f15e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	4604      	mov	r4, r0
 800f164:	b30b      	cbz	r3, 800f1aa <rcl_wait_set_add_service+0x4e>
 800f166:	b319      	cbz	r1, 800f1b0 <rcl_wait_set_add_service+0x54>
 800f168:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f16a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f16c:	4285      	cmp	r5, r0
 800f16e:	d217      	bcs.n	800f1a0 <rcl_wait_set_add_service+0x44>
 800f170:	6a20      	ldr	r0, [r4, #32]
 800f172:	1c6e      	adds	r6, r5, #1
 800f174:	625e      	str	r6, [r3, #36]	; 0x24
 800f176:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f17a:	b102      	cbz	r2, 800f17e <rcl_wait_set_add_service+0x22>
 800f17c:	6015      	str	r5, [r2, #0]
 800f17e:	4608      	mov	r0, r1
 800f180:	f7ff f804 	bl	800e18c <rcl_service_get_rmw_handle>
 800f184:	b150      	cbz	r0, 800f19c <rcl_wait_set_add_service+0x40>
 800f186:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f188:	6842      	ldr	r2, [r0, #4]
 800f18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f18c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f190:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f192:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f194:	3301      	adds	r3, #1
 800f196:	2000      	movs	r0, #0
 800f198:	6293      	str	r3, [r2, #40]	; 0x28
 800f19a:	bd70      	pop	{r4, r5, r6, pc}
 800f19c:	2001      	movs	r0, #1
 800f19e:	bd70      	pop	{r4, r5, r6, pc}
 800f1a0:	f240 3086 	movw	r0, #902	; 0x386
 800f1a4:	bd70      	pop	{r4, r5, r6, pc}
 800f1a6:	200b      	movs	r0, #11
 800f1a8:	4770      	bx	lr
 800f1aa:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}
 800f1b0:	200b      	movs	r0, #11
 800f1b2:	bd70      	pop	{r4, r5, r6, pc}
 800f1b4:	0000      	movs	r0, r0
	...

0800f1b8 <rcl_wait>:
 800f1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1bc:	ed2d 8b02 	vpush	{d8}
 800f1c0:	b08d      	sub	sp, #52	; 0x34
 800f1c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f000 8143 	beq.w	800f452 <rcl_wait+0x29a>
 800f1cc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800f1ce:	4605      	mov	r5, r0
 800f1d0:	2e00      	cmp	r6, #0
 800f1d2:	f000 8112 	beq.w	800f3fa <rcl_wait+0x242>
 800f1d6:	6843      	ldr	r3, [r0, #4]
 800f1d8:	b983      	cbnz	r3, 800f1fc <rcl_wait+0x44>
 800f1da:	68eb      	ldr	r3, [r5, #12]
 800f1dc:	b973      	cbnz	r3, 800f1fc <rcl_wait+0x44>
 800f1de:	696b      	ldr	r3, [r5, #20]
 800f1e0:	b963      	cbnz	r3, 800f1fc <rcl_wait+0x44>
 800f1e2:	69eb      	ldr	r3, [r5, #28]
 800f1e4:	b953      	cbnz	r3, 800f1fc <rcl_wait+0x44>
 800f1e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1e8:	b943      	cbnz	r3, 800f1fc <rcl_wait+0x44>
 800f1ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f1ec:	b933      	cbnz	r3, 800f1fc <rcl_wait+0x44>
 800f1ee:	f240 3085 	movw	r0, #901	; 0x385
 800f1f2:	b00d      	add	sp, #52	; 0x34
 800f1f4:	ecbd 8b02 	vpop	{d8}
 800f1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1fc:	9b04      	ldr	r3, [sp, #16]
 800f1fe:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800f200:	2b01      	cmp	r3, #1
 800f202:	9b05      	ldr	r3, [sp, #20]
 800f204:	f173 0300 	sbcs.w	r3, r3, #0
 800f208:	f2c0 80f0 	blt.w	800f3ec <rcl_wait+0x234>
 800f20c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800f210:	4643      	mov	r3, r8
 800f212:	2a00      	cmp	r2, #0
 800f214:	f000 8133 	beq.w	800f47e <rcl_wait+0x2c6>
 800f218:	2400      	movs	r4, #0
 800f21a:	4613      	mov	r3, r2
 800f21c:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 800f490 <rcl_wait+0x2d8>
 800f220:	46a2      	mov	sl, r4
 800f222:	46a3      	mov	fp, r4
 800f224:	f240 3921 	movw	r9, #801	; 0x321
 800f228:	4632      	mov	r2, r6
 800f22a:	e014      	b.n	800f256 <rcl_wait+0x9e>
 800f22c:	2800      	cmp	r0, #0
 800f22e:	d1e0      	bne.n	800f1f2 <rcl_wait+0x3a>
 800f230:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f234:	4542      	cmp	r2, r8
 800f236:	eb73 0107 	sbcs.w	r1, r3, r7
 800f23a:	da03      	bge.n	800f244 <rcl_wait+0x8c>
 800f23c:	4690      	mov	r8, r2
 800f23e:	461f      	mov	r7, r3
 800f240:	f04f 0b01 	mov.w	fp, #1
 800f244:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f246:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f248:	3401      	adds	r4, #1
 800f24a:	f14a 0a00 	adc.w	sl, sl, #0
 800f24e:	429c      	cmp	r4, r3
 800f250:	f17a 0100 	sbcs.w	r1, sl, #0
 800f254:	d228      	bcs.n	800f2a8 <rcl_wait+0xf0>
 800f256:	6928      	ldr	r0, [r5, #16]
 800f258:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f25c:	a908      	add	r1, sp, #32
 800f25e:	00a6      	lsls	r6, r4, #2
 800f260:	2800      	cmp	r0, #0
 800f262:	d0f1      	beq.n	800f248 <rcl_wait+0x90>
 800f264:	68eb      	ldr	r3, [r5, #12]
 800f266:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800f26a:	4423      	add	r3, r4
 800f26c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800f270:	f1be 0f00 	cmp.w	lr, #0
 800f274:	d006      	beq.n	800f284 <rcl_wait+0xcc>
 800f276:	6913      	ldr	r3, [r2, #16]
 800f278:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800f27c:	3301      	adds	r3, #1
 800f27e:	6113      	str	r3, [r2, #16]
 800f280:	692b      	ldr	r3, [r5, #16]
 800f282:	5998      	ldr	r0, [r3, r6]
 800f284:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f288:	f7ff fa94 	bl	800e7b4 <rcl_timer_get_time_until_next_call>
 800f28c:	4548      	cmp	r0, r9
 800f28e:	d1cd      	bne.n	800f22c <rcl_wait+0x74>
 800f290:	692b      	ldr	r3, [r5, #16]
 800f292:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f294:	2100      	movs	r1, #0
 800f296:	5199      	str	r1, [r3, r6]
 800f298:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f29a:	3401      	adds	r4, #1
 800f29c:	f14a 0a00 	adc.w	sl, sl, #0
 800f2a0:	429c      	cmp	r4, r3
 800f2a2:	f17a 0100 	sbcs.w	r1, sl, #0
 800f2a6:	d3d6      	bcc.n	800f256 <rcl_wait+0x9e>
 800f2a8:	4616      	mov	r6, r2
 800f2aa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	46d9      	mov	r9, fp
 800f2b2:	f040 80a9 	bne.w	800f408 <rcl_wait+0x250>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f2be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f2c2:	ab08      	add	r3, sp, #32
 800f2c4:	9302      	str	r3, [sp, #8]
 800f2c6:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800f2c8:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800f2cc:	e9cd 3200 	strd	r3, r2, [sp]
 800f2d0:	f106 0110 	add.w	r1, r6, #16
 800f2d4:	f106 031c 	add.w	r3, r6, #28
 800f2d8:	f106 0228 	add.w	r2, r6, #40	; 0x28
 800f2dc:	1d30      	adds	r0, r6, #4
 800f2de:	f002 fb67 	bl	80119b0 <rmw_wait>
 800f2e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f2e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2e6:	4680      	mov	r8, r0
 800f2e8:	b1ca      	cbz	r2, 800f31e <rcl_wait+0x166>
 800f2ea:	2400      	movs	r4, #0
 800f2ec:	4627      	mov	r7, r4
 800f2ee:	692a      	ldr	r2, [r5, #16]
 800f2f0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800f2f4:	f10d 011f 	add.w	r1, sp, #31
 800f2f8:	00a6      	lsls	r6, r4, #2
 800f2fa:	b160      	cbz	r0, 800f316 <rcl_wait+0x15e>
 800f2fc:	f88d 701f 	strb.w	r7, [sp, #31]
 800f300:	f7ff fa1e 	bl	800e740 <rcl_timer_is_ready>
 800f304:	2800      	cmp	r0, #0
 800f306:	f47f af74 	bne.w	800f1f2 <rcl_wait+0x3a>
 800f30a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f30e:	b90b      	cbnz	r3, 800f314 <rcl_wait+0x15c>
 800f310:	692a      	ldr	r2, [r5, #16]
 800f312:	5193      	str	r3, [r2, r6]
 800f314:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f318:	3401      	adds	r4, #1
 800f31a:	42a2      	cmp	r2, r4
 800f31c:	d8e7      	bhi.n	800f2ee <rcl_wait+0x136>
 800f31e:	f038 0002 	bics.w	r0, r8, #2
 800f322:	f040 8090 	bne.w	800f446 <rcl_wait+0x28e>
 800f326:	686e      	ldr	r6, [r5, #4]
 800f328:	4602      	mov	r2, r0
 800f32a:	b91e      	cbnz	r6, 800f334 <rcl_wait+0x17c>
 800f32c:	e00d      	b.n	800f34a <rcl_wait+0x192>
 800f32e:	3201      	adds	r2, #1
 800f330:	42b2      	cmp	r2, r6
 800f332:	d00a      	beq.n	800f34a <rcl_wait+0x192>
 800f334:	6899      	ldr	r1, [r3, #8]
 800f336:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f33a:	2900      	cmp	r1, #0
 800f33c:	d1f7      	bne.n	800f32e <rcl_wait+0x176>
 800f33e:	682c      	ldr	r4, [r5, #0]
 800f340:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f344:	3201      	adds	r2, #1
 800f346:	42b2      	cmp	r2, r6
 800f348:	d1f4      	bne.n	800f334 <rcl_wait+0x17c>
 800f34a:	68ee      	ldr	r6, [r5, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	b91e      	cbnz	r6, 800f358 <rcl_wait+0x1a0>
 800f350:	e00d      	b.n	800f36e <rcl_wait+0x1b6>
 800f352:	3201      	adds	r2, #1
 800f354:	42b2      	cmp	r2, r6
 800f356:	d00a      	beq.n	800f36e <rcl_wait+0x1b6>
 800f358:	6959      	ldr	r1, [r3, #20]
 800f35a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f35e:	2900      	cmp	r1, #0
 800f360:	d1f7      	bne.n	800f352 <rcl_wait+0x19a>
 800f362:	68ac      	ldr	r4, [r5, #8]
 800f364:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f368:	3201      	adds	r2, #1
 800f36a:	42b2      	cmp	r2, r6
 800f36c:	d1f4      	bne.n	800f358 <rcl_wait+0x1a0>
 800f36e:	69ee      	ldr	r6, [r5, #28]
 800f370:	2200      	movs	r2, #0
 800f372:	b91e      	cbnz	r6, 800f37c <rcl_wait+0x1c4>
 800f374:	e00d      	b.n	800f392 <rcl_wait+0x1da>
 800f376:	3201      	adds	r2, #1
 800f378:	42b2      	cmp	r2, r6
 800f37a:	d00a      	beq.n	800f392 <rcl_wait+0x1da>
 800f37c:	6a19      	ldr	r1, [r3, #32]
 800f37e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f382:	2900      	cmp	r1, #0
 800f384:	d1f7      	bne.n	800f376 <rcl_wait+0x1be>
 800f386:	69ac      	ldr	r4, [r5, #24]
 800f388:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f38c:	3201      	adds	r2, #1
 800f38e:	42b2      	cmp	r2, r6
 800f390:	d1f4      	bne.n	800f37c <rcl_wait+0x1c4>
 800f392:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f394:	2200      	movs	r2, #0
 800f396:	b91e      	cbnz	r6, 800f3a0 <rcl_wait+0x1e8>
 800f398:	e00d      	b.n	800f3b6 <rcl_wait+0x1fe>
 800f39a:	3201      	adds	r2, #1
 800f39c:	4296      	cmp	r6, r2
 800f39e:	d00a      	beq.n	800f3b6 <rcl_wait+0x1fe>
 800f3a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f3a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f3a6:	2900      	cmp	r1, #0
 800f3a8:	d1f7      	bne.n	800f39a <rcl_wait+0x1e2>
 800f3aa:	6a2c      	ldr	r4, [r5, #32]
 800f3ac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f3b0:	3201      	adds	r2, #1
 800f3b2:	4296      	cmp	r6, r2
 800f3b4:	d1f4      	bne.n	800f3a0 <rcl_wait+0x1e8>
 800f3b6:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	b91e      	cbnz	r6, 800f3c4 <rcl_wait+0x20c>
 800f3bc:	e00d      	b.n	800f3da <rcl_wait+0x222>
 800f3be:	3201      	adds	r2, #1
 800f3c0:	42b2      	cmp	r2, r6
 800f3c2:	d00a      	beq.n	800f3da <rcl_wait+0x222>
 800f3c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800f3c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f3ca:	2900      	cmp	r1, #0
 800f3cc:	d1f7      	bne.n	800f3be <rcl_wait+0x206>
 800f3ce:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800f3d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f3d4:	3201      	adds	r2, #1
 800f3d6:	42b2      	cmp	r2, r6
 800f3d8:	d1f4      	bne.n	800f3c4 <rcl_wait+0x20c>
 800f3da:	f1b8 0f02 	cmp.w	r8, #2
 800f3de:	f47f af08 	bne.w	800f1f2 <rcl_wait+0x3a>
 800f3e2:	464b      	mov	r3, r9
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	bf08      	it	eq
 800f3e8:	2002      	moveq	r0, #2
 800f3ea:	e702      	b.n	800f1f2 <rcl_wait+0x3a>
 800f3ec:	2a00      	cmp	r2, #0
 800f3ee:	d03a      	beq.n	800f466 <rcl_wait+0x2ae>
 800f3f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f3f4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800f3f8:	e70e      	b.n	800f218 <rcl_wait+0x60>
 800f3fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f3fe:	b00d      	add	sp, #52	; 0x34
 800f400:	ecbd 8b02 	vpop	{d8}
 800f404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f408:	9b04      	ldr	r3, [sp, #16]
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	9b05      	ldr	r3, [sp, #20]
 800f40e:	f173 0300 	sbcs.w	r3, r3, #0
 800f412:	db24      	blt.n	800f45e <rcl_wait+0x2a6>
 800f414:	2f00      	cmp	r7, #0
 800f416:	bfbc      	itt	lt
 800f418:	f04f 0800 	movlt.w	r8, #0
 800f41c:	4647      	movlt	r7, r8
 800f41e:	a31e      	add	r3, pc, #120	; (adr r3, 800f498 <rcl_wait+0x2e0>)
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	4640      	mov	r0, r8
 800f426:	4639      	mov	r1, r7
 800f428:	f7f0 ff42 	bl	80002b0 <__aeabi_ldivmod>
 800f42c:	a31a      	add	r3, pc, #104	; (adr r3, 800f498 <rcl_wait+0x2e0>)
 800f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f432:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f436:	4640      	mov	r0, r8
 800f438:	4639      	mov	r1, r7
 800f43a:	f7f0 ff39 	bl	80002b0 <__aeabi_ldivmod>
 800f43e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f442:	ab08      	add	r3, sp, #32
 800f444:	e73e      	b.n	800f2c4 <rcl_wait+0x10c>
 800f446:	2001      	movs	r0, #1
 800f448:	b00d      	add	sp, #52	; 0x34
 800f44a:	ecbd 8b02 	vpop	{d8}
 800f44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f452:	200b      	movs	r0, #11
 800f454:	b00d      	add	sp, #52	; 0x34
 800f456:	ecbd 8b02 	vpop	{d8}
 800f45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f45e:	465b      	mov	r3, fp
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1d7      	bne.n	800f414 <rcl_wait+0x25c>
 800f464:	e72e      	b.n	800f2c4 <rcl_wait+0x10c>
 800f466:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f46a:	430b      	orrs	r3, r1
 800f46c:	bf08      	it	eq
 800f46e:	4691      	moveq	r9, r2
 800f470:	f43f af21 	beq.w	800f2b6 <rcl_wait+0xfe>
 800f474:	9b04      	ldr	r3, [sp, #16]
 800f476:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f47a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800f47e:	2b01      	cmp	r3, #1
 800f480:	9b05      	ldr	r3, [sp, #20]
 800f482:	f173 0300 	sbcs.w	r3, r3, #0
 800f486:	f04f 0300 	mov.w	r3, #0
 800f48a:	4699      	mov	r9, r3
 800f48c:	dac2      	bge.n	800f414 <rcl_wait+0x25c>
 800f48e:	e719      	b.n	800f2c4 <rcl_wait+0x10c>
 800f490:	ffffffff 	.word	0xffffffff
 800f494:	7fffffff 	.word	0x7fffffff
 800f498:	3b9aca00 	.word	0x3b9aca00
 800f49c:	00000000 	.word	0x00000000

0800f4a0 <rcl_action_take_goal_response>:
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	d039      	beq.n	800f518 <rcl_action_take_goal_response+0x78>
 800f4a4:	b570      	push	{r4, r5, r6, lr}
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	6800      	ldr	r0, [r0, #0]
 800f4aa:	b380      	cbz	r0, 800f50e <rcl_action_take_goal_response+0x6e>
 800f4ac:	460d      	mov	r5, r1
 800f4ae:	4616      	mov	r6, r2
 800f4b0:	f7fe f872 	bl	800d598 <rcl_client_is_valid>
 800f4b4:	b330      	cbz	r0, 800f504 <rcl_action_take_goal_response+0x64>
 800f4b6:	6820      	ldr	r0, [r4, #0]
 800f4b8:	3004      	adds	r0, #4
 800f4ba:	f7fe f86d 	bl	800d598 <rcl_client_is_valid>
 800f4be:	b308      	cbz	r0, 800f504 <rcl_action_take_goal_response+0x64>
 800f4c0:	6820      	ldr	r0, [r4, #0]
 800f4c2:	3008      	adds	r0, #8
 800f4c4:	f7fe f868 	bl	800d598 <rcl_client_is_valid>
 800f4c8:	b1e0      	cbz	r0, 800f504 <rcl_action_take_goal_response+0x64>
 800f4ca:	6820      	ldr	r0, [r4, #0]
 800f4cc:	300c      	adds	r0, #12
 800f4ce:	f7fe ffff 	bl	800e4d0 <rcl_subscription_is_valid>
 800f4d2:	b1b8      	cbz	r0, 800f504 <rcl_action_take_goal_response+0x64>
 800f4d4:	6820      	ldr	r0, [r4, #0]
 800f4d6:	3010      	adds	r0, #16
 800f4d8:	f7fe fffa 	bl	800e4d0 <rcl_subscription_is_valid>
 800f4dc:	b190      	cbz	r0, 800f504 <rcl_action_take_goal_response+0x64>
 800f4de:	b1cd      	cbz	r5, 800f514 <rcl_action_take_goal_response+0x74>
 800f4e0:	b1c6      	cbz	r6, 800f514 <rcl_action_take_goal_response+0x74>
 800f4e2:	6820      	ldr	r0, [r4, #0]
 800f4e4:	4632      	mov	r2, r6
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	f7fe f80e 	bl	800d508 <rcl_take_response>
 800f4ec:	b148      	cbz	r0, 800f502 <rcl_action_take_goal_response+0x62>
 800f4ee:	280a      	cmp	r0, #10
 800f4f0:	d007      	beq.n	800f502 <rcl_action_take_goal_response+0x62>
 800f4f2:	f240 12f5 	movw	r2, #501	; 0x1f5
 800f4f6:	f640 0337 	movw	r3, #2103	; 0x837
 800f4fa:	4290      	cmp	r0, r2
 800f4fc:	bf0c      	ite	eq
 800f4fe:	4618      	moveq	r0, r3
 800f500:	2001      	movne	r0, #1
 800f502:	bd70      	pop	{r4, r5, r6, pc}
 800f504:	f7f9 f9d8 	bl	80088b8 <rcutils_reset_error>
 800f508:	f640 0036 	movw	r0, #2102	; 0x836
 800f50c:	bd70      	pop	{r4, r5, r6, pc}
 800f50e:	f640 0036 	movw	r0, #2102	; 0x836
 800f512:	bd70      	pop	{r4, r5, r6, pc}
 800f514:	200b      	movs	r0, #11
 800f516:	bd70      	pop	{r4, r5, r6, pc}
 800f518:	f640 0036 	movw	r0, #2102	; 0x836
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop

0800f520 <rcl_action_send_result_request>:
 800f520:	b390      	cbz	r0, 800f588 <rcl_action_send_result_request+0x68>
 800f522:	b570      	push	{r4, r5, r6, lr}
 800f524:	4604      	mov	r4, r0
 800f526:	6800      	ldr	r0, [r0, #0]
 800f528:	b348      	cbz	r0, 800f57e <rcl_action_send_result_request+0x5e>
 800f52a:	460d      	mov	r5, r1
 800f52c:	4616      	mov	r6, r2
 800f52e:	f7fe f833 	bl	800d598 <rcl_client_is_valid>
 800f532:	b1f8      	cbz	r0, 800f574 <rcl_action_send_result_request+0x54>
 800f534:	6820      	ldr	r0, [r4, #0]
 800f536:	3004      	adds	r0, #4
 800f538:	f7fe f82e 	bl	800d598 <rcl_client_is_valid>
 800f53c:	b1d0      	cbz	r0, 800f574 <rcl_action_send_result_request+0x54>
 800f53e:	6820      	ldr	r0, [r4, #0]
 800f540:	3008      	adds	r0, #8
 800f542:	f7fe f829 	bl	800d598 <rcl_client_is_valid>
 800f546:	b1a8      	cbz	r0, 800f574 <rcl_action_send_result_request+0x54>
 800f548:	6820      	ldr	r0, [r4, #0]
 800f54a:	300c      	adds	r0, #12
 800f54c:	f7fe ffc0 	bl	800e4d0 <rcl_subscription_is_valid>
 800f550:	b180      	cbz	r0, 800f574 <rcl_action_send_result_request+0x54>
 800f552:	6820      	ldr	r0, [r4, #0]
 800f554:	3010      	adds	r0, #16
 800f556:	f7fe ffbb 	bl	800e4d0 <rcl_subscription_is_valid>
 800f55a:	b158      	cbz	r0, 800f574 <rcl_action_send_result_request+0x54>
 800f55c:	b195      	cbz	r5, 800f584 <rcl_action_send_result_request+0x64>
 800f55e:	b18e      	cbz	r6, 800f584 <rcl_action_send_result_request+0x64>
 800f560:	6820      	ldr	r0, [r4, #0]
 800f562:	4632      	mov	r2, r6
 800f564:	4629      	mov	r1, r5
 800f566:	3008      	adds	r0, #8
 800f568:	f7fd ff98 	bl	800d49c <rcl_send_request>
 800f56c:	3800      	subs	r0, #0
 800f56e:	bf18      	it	ne
 800f570:	2001      	movne	r0, #1
 800f572:	bd70      	pop	{r4, r5, r6, pc}
 800f574:	f7f9 f9a0 	bl	80088b8 <rcutils_reset_error>
 800f578:	f640 0036 	movw	r0, #2102	; 0x836
 800f57c:	bd70      	pop	{r4, r5, r6, pc}
 800f57e:	f640 0036 	movw	r0, #2102	; 0x836
 800f582:	bd70      	pop	{r4, r5, r6, pc}
 800f584:	200b      	movs	r0, #11
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	f640 0036 	movw	r0, #2102	; 0x836
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop

0800f590 <rcl_action_take_result_response>:
 800f590:	2800      	cmp	r0, #0
 800f592:	d03a      	beq.n	800f60a <rcl_action_take_result_response+0x7a>
 800f594:	b570      	push	{r4, r5, r6, lr}
 800f596:	4604      	mov	r4, r0
 800f598:	6800      	ldr	r0, [r0, #0]
 800f59a:	b388      	cbz	r0, 800f600 <rcl_action_take_result_response+0x70>
 800f59c:	460d      	mov	r5, r1
 800f59e:	4616      	mov	r6, r2
 800f5a0:	f7fd fffa 	bl	800d598 <rcl_client_is_valid>
 800f5a4:	b338      	cbz	r0, 800f5f6 <rcl_action_take_result_response+0x66>
 800f5a6:	6820      	ldr	r0, [r4, #0]
 800f5a8:	3004      	adds	r0, #4
 800f5aa:	f7fd fff5 	bl	800d598 <rcl_client_is_valid>
 800f5ae:	b310      	cbz	r0, 800f5f6 <rcl_action_take_result_response+0x66>
 800f5b0:	6820      	ldr	r0, [r4, #0]
 800f5b2:	3008      	adds	r0, #8
 800f5b4:	f7fd fff0 	bl	800d598 <rcl_client_is_valid>
 800f5b8:	b1e8      	cbz	r0, 800f5f6 <rcl_action_take_result_response+0x66>
 800f5ba:	6820      	ldr	r0, [r4, #0]
 800f5bc:	300c      	adds	r0, #12
 800f5be:	f7fe ff87 	bl	800e4d0 <rcl_subscription_is_valid>
 800f5c2:	b1c0      	cbz	r0, 800f5f6 <rcl_action_take_result_response+0x66>
 800f5c4:	6820      	ldr	r0, [r4, #0]
 800f5c6:	3010      	adds	r0, #16
 800f5c8:	f7fe ff82 	bl	800e4d0 <rcl_subscription_is_valid>
 800f5cc:	b198      	cbz	r0, 800f5f6 <rcl_action_take_result_response+0x66>
 800f5ce:	b1d5      	cbz	r5, 800f606 <rcl_action_take_result_response+0x76>
 800f5d0:	b1ce      	cbz	r6, 800f606 <rcl_action_take_result_response+0x76>
 800f5d2:	6820      	ldr	r0, [r4, #0]
 800f5d4:	4632      	mov	r2, r6
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	3008      	adds	r0, #8
 800f5da:	f7fd ff95 	bl	800d508 <rcl_take_response>
 800f5de:	b148      	cbz	r0, 800f5f4 <rcl_action_take_result_response+0x64>
 800f5e0:	280a      	cmp	r0, #10
 800f5e2:	d007      	beq.n	800f5f4 <rcl_action_take_result_response+0x64>
 800f5e4:	f240 12f5 	movw	r2, #501	; 0x1f5
 800f5e8:	f640 0337 	movw	r3, #2103	; 0x837
 800f5ec:	4290      	cmp	r0, r2
 800f5ee:	bf0c      	ite	eq
 800f5f0:	4618      	moveq	r0, r3
 800f5f2:	2001      	movne	r0, #1
 800f5f4:	bd70      	pop	{r4, r5, r6, pc}
 800f5f6:	f7f9 f95f 	bl	80088b8 <rcutils_reset_error>
 800f5fa:	f640 0036 	movw	r0, #2102	; 0x836
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}
 800f600:	f640 0036 	movw	r0, #2102	; 0x836
 800f604:	bd70      	pop	{r4, r5, r6, pc}
 800f606:	200b      	movs	r0, #11
 800f608:	bd70      	pop	{r4, r5, r6, pc}
 800f60a:	f640 0036 	movw	r0, #2102	; 0x836
 800f60e:	4770      	bx	lr

0800f610 <rcl_action_take_cancel_response>:
 800f610:	2800      	cmp	r0, #0
 800f612:	d03a      	beq.n	800f68a <rcl_action_take_cancel_response+0x7a>
 800f614:	b570      	push	{r4, r5, r6, lr}
 800f616:	4604      	mov	r4, r0
 800f618:	6800      	ldr	r0, [r0, #0]
 800f61a:	b388      	cbz	r0, 800f680 <rcl_action_take_cancel_response+0x70>
 800f61c:	460d      	mov	r5, r1
 800f61e:	4616      	mov	r6, r2
 800f620:	f7fd ffba 	bl	800d598 <rcl_client_is_valid>
 800f624:	b338      	cbz	r0, 800f676 <rcl_action_take_cancel_response+0x66>
 800f626:	6820      	ldr	r0, [r4, #0]
 800f628:	3004      	adds	r0, #4
 800f62a:	f7fd ffb5 	bl	800d598 <rcl_client_is_valid>
 800f62e:	b310      	cbz	r0, 800f676 <rcl_action_take_cancel_response+0x66>
 800f630:	6820      	ldr	r0, [r4, #0]
 800f632:	3008      	adds	r0, #8
 800f634:	f7fd ffb0 	bl	800d598 <rcl_client_is_valid>
 800f638:	b1e8      	cbz	r0, 800f676 <rcl_action_take_cancel_response+0x66>
 800f63a:	6820      	ldr	r0, [r4, #0]
 800f63c:	300c      	adds	r0, #12
 800f63e:	f7fe ff47 	bl	800e4d0 <rcl_subscription_is_valid>
 800f642:	b1c0      	cbz	r0, 800f676 <rcl_action_take_cancel_response+0x66>
 800f644:	6820      	ldr	r0, [r4, #0]
 800f646:	3010      	adds	r0, #16
 800f648:	f7fe ff42 	bl	800e4d0 <rcl_subscription_is_valid>
 800f64c:	b198      	cbz	r0, 800f676 <rcl_action_take_cancel_response+0x66>
 800f64e:	b1d5      	cbz	r5, 800f686 <rcl_action_take_cancel_response+0x76>
 800f650:	b1ce      	cbz	r6, 800f686 <rcl_action_take_cancel_response+0x76>
 800f652:	6820      	ldr	r0, [r4, #0]
 800f654:	4632      	mov	r2, r6
 800f656:	4629      	mov	r1, r5
 800f658:	3004      	adds	r0, #4
 800f65a:	f7fd ff55 	bl	800d508 <rcl_take_response>
 800f65e:	b148      	cbz	r0, 800f674 <rcl_action_take_cancel_response+0x64>
 800f660:	280a      	cmp	r0, #10
 800f662:	d007      	beq.n	800f674 <rcl_action_take_cancel_response+0x64>
 800f664:	f240 12f5 	movw	r2, #501	; 0x1f5
 800f668:	f640 0337 	movw	r3, #2103	; 0x837
 800f66c:	4290      	cmp	r0, r2
 800f66e:	bf0c      	ite	eq
 800f670:	4618      	moveq	r0, r3
 800f672:	2001      	movne	r0, #1
 800f674:	bd70      	pop	{r4, r5, r6, pc}
 800f676:	f7f9 f91f 	bl	80088b8 <rcutils_reset_error>
 800f67a:	f640 0036 	movw	r0, #2102	; 0x836
 800f67e:	bd70      	pop	{r4, r5, r6, pc}
 800f680:	f640 0036 	movw	r0, #2102	; 0x836
 800f684:	bd70      	pop	{r4, r5, r6, pc}
 800f686:	200b      	movs	r0, #11
 800f688:	bd70      	pop	{r4, r5, r6, pc}
 800f68a:	f640 0036 	movw	r0, #2102	; 0x836
 800f68e:	4770      	bx	lr

0800f690 <rcl_action_take_feedback>:
 800f690:	2800      	cmp	r0, #0
 800f692:	d038      	beq.n	800f706 <rcl_action_take_feedback+0x76>
 800f694:	b530      	push	{r4, r5, lr}
 800f696:	4604      	mov	r4, r0
 800f698:	6800      	ldr	r0, [r0, #0]
 800f69a:	b091      	sub	sp, #68	; 0x44
 800f69c:	b378      	cbz	r0, 800f6fe <rcl_action_take_feedback+0x6e>
 800f69e:	460d      	mov	r5, r1
 800f6a0:	f7fd ff7a 	bl	800d598 <rcl_client_is_valid>
 800f6a4:	b328      	cbz	r0, 800f6f2 <rcl_action_take_feedback+0x62>
 800f6a6:	6820      	ldr	r0, [r4, #0]
 800f6a8:	3004      	adds	r0, #4
 800f6aa:	f7fd ff75 	bl	800d598 <rcl_client_is_valid>
 800f6ae:	b300      	cbz	r0, 800f6f2 <rcl_action_take_feedback+0x62>
 800f6b0:	6820      	ldr	r0, [r4, #0]
 800f6b2:	3008      	adds	r0, #8
 800f6b4:	f7fd ff70 	bl	800d598 <rcl_client_is_valid>
 800f6b8:	b1d8      	cbz	r0, 800f6f2 <rcl_action_take_feedback+0x62>
 800f6ba:	6820      	ldr	r0, [r4, #0]
 800f6bc:	300c      	adds	r0, #12
 800f6be:	f7fe ff07 	bl	800e4d0 <rcl_subscription_is_valid>
 800f6c2:	b1b0      	cbz	r0, 800f6f2 <rcl_action_take_feedback+0x62>
 800f6c4:	6820      	ldr	r0, [r4, #0]
 800f6c6:	3010      	adds	r0, #16
 800f6c8:	f7fe ff02 	bl	800e4d0 <rcl_subscription_is_valid>
 800f6cc:	b188      	cbz	r0, 800f6f2 <rcl_action_take_feedback+0x62>
 800f6ce:	b1ed      	cbz	r5, 800f70c <rcl_action_take_feedback+0x7c>
 800f6d0:	6820      	ldr	r0, [r4, #0]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	466a      	mov	r2, sp
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	300c      	adds	r0, #12
 800f6da:	f7fe fe9b 	bl	800e414 <rcl_take>
 800f6de:	b160      	cbz	r0, 800f6fa <rcl_action_take_feedback+0x6a>
 800f6e0:	f240 1391 	movw	r3, #401	; 0x191
 800f6e4:	4298      	cmp	r0, r3
 800f6e6:	d014      	beq.n	800f712 <rcl_action_take_feedback+0x82>
 800f6e8:	280a      	cmp	r0, #10
 800f6ea:	bf18      	it	ne
 800f6ec:	2001      	movne	r0, #1
 800f6ee:	b011      	add	sp, #68	; 0x44
 800f6f0:	bd30      	pop	{r4, r5, pc}
 800f6f2:	f7f9 f8e1 	bl	80088b8 <rcutils_reset_error>
 800f6f6:	f640 0036 	movw	r0, #2102	; 0x836
 800f6fa:	b011      	add	sp, #68	; 0x44
 800f6fc:	bd30      	pop	{r4, r5, pc}
 800f6fe:	f640 0036 	movw	r0, #2102	; 0x836
 800f702:	b011      	add	sp, #68	; 0x44
 800f704:	bd30      	pop	{r4, r5, pc}
 800f706:	f640 0036 	movw	r0, #2102	; 0x836
 800f70a:	4770      	bx	lr
 800f70c:	200b      	movs	r0, #11
 800f70e:	b011      	add	sp, #68	; 0x44
 800f710:	bd30      	pop	{r4, r5, pc}
 800f712:	f640 0037 	movw	r0, #2103	; 0x837
 800f716:	e7f0      	b.n	800f6fa <rcl_action_take_feedback+0x6a>

0800f718 <rcl_action_wait_set_add_action_client>:
 800f718:	2800      	cmp	r0, #0
 800f71a:	d048      	beq.n	800f7ae <rcl_action_wait_set_add_action_client+0x96>
 800f71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71e:	460c      	mov	r4, r1
 800f720:	2900      	cmp	r1, #0
 800f722:	d03c      	beq.n	800f79e <rcl_action_wait_set_add_action_client+0x86>
 800f724:	4605      	mov	r5, r0
 800f726:	6808      	ldr	r0, [r1, #0]
 800f728:	2800      	cmp	r0, #0
 800f72a:	d038      	beq.n	800f79e <rcl_action_wait_set_add_action_client+0x86>
 800f72c:	4617      	mov	r7, r2
 800f72e:	461e      	mov	r6, r3
 800f730:	f7fd ff32 	bl	800d598 <rcl_client_is_valid>
 800f734:	b3b0      	cbz	r0, 800f7a4 <rcl_action_wait_set_add_action_client+0x8c>
 800f736:	6820      	ldr	r0, [r4, #0]
 800f738:	3004      	adds	r0, #4
 800f73a:	f7fd ff2d 	bl	800d598 <rcl_client_is_valid>
 800f73e:	b388      	cbz	r0, 800f7a4 <rcl_action_wait_set_add_action_client+0x8c>
 800f740:	6820      	ldr	r0, [r4, #0]
 800f742:	3008      	adds	r0, #8
 800f744:	f7fd ff28 	bl	800d598 <rcl_client_is_valid>
 800f748:	b360      	cbz	r0, 800f7a4 <rcl_action_wait_set_add_action_client+0x8c>
 800f74a:	6820      	ldr	r0, [r4, #0]
 800f74c:	300c      	adds	r0, #12
 800f74e:	f7fe febf 	bl	800e4d0 <rcl_subscription_is_valid>
 800f752:	b338      	cbz	r0, 800f7a4 <rcl_action_wait_set_add_action_client+0x8c>
 800f754:	6820      	ldr	r0, [r4, #0]
 800f756:	3010      	adds	r0, #16
 800f758:	f7fe feba 	bl	800e4d0 <rcl_subscription_is_valid>
 800f75c:	b310      	cbz	r0, 800f7a4 <rcl_action_wait_set_add_action_client+0x8c>
 800f75e:	6821      	ldr	r1, [r4, #0]
 800f760:	4628      	mov	r0, r5
 800f762:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 800f766:	f7ff fccd 	bl	800f104 <rcl_wait_set_add_client>
 800f76a:	b9b8      	cbnz	r0, 800f79c <rcl_action_wait_set_add_action_client+0x84>
 800f76c:	6821      	ldr	r1, [r4, #0]
 800f76e:	4628      	mov	r0, r5
 800f770:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 800f774:	3104      	adds	r1, #4
 800f776:	f7ff fcc5 	bl	800f104 <rcl_wait_set_add_client>
 800f77a:	b978      	cbnz	r0, 800f79c <rcl_action_wait_set_add_action_client+0x84>
 800f77c:	6821      	ldr	r1, [r4, #0]
 800f77e:	4628      	mov	r0, r5
 800f780:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 800f784:	3108      	adds	r1, #8
 800f786:	f7ff fcbd 	bl	800f104 <rcl_wait_set_add_client>
 800f78a:	b938      	cbnz	r0, 800f79c <rcl_action_wait_set_add_action_client+0x84>
 800f78c:	6821      	ldr	r1, [r4, #0]
 800f78e:	4628      	mov	r0, r5
 800f790:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 800f794:	310c      	adds	r1, #12
 800f796:	f7ff f96d 	bl	800ea74 <rcl_wait_set_add_subscription>
 800f79a:	b158      	cbz	r0, 800f7b4 <rcl_action_wait_set_add_action_client+0x9c>
 800f79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f79e:	f640 0036 	movw	r0, #2102	; 0x836
 800f7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a4:	f7f9 f888 	bl	80088b8 <rcutils_reset_error>
 800f7a8:	f640 0036 	movw	r0, #2102	; 0x836
 800f7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ae:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f7b2:	4770      	bx	lr
 800f7b4:	6821      	ldr	r1, [r4, #0]
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 800f7bc:	3110      	adds	r1, #16
 800f7be:	f7ff f959 	bl	800ea74 <rcl_wait_set_add_subscription>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d1ea      	bne.n	800f79c <rcl_action_wait_set_add_action_client+0x84>
 800f7c6:	b11f      	cbz	r7, 800f7d0 <rcl_action_wait_set_add_action_client+0xb8>
 800f7c8:	6823      	ldr	r3, [r4, #0]
 800f7ca:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800f7ce:	603b      	str	r3, [r7, #0]
 800f7d0:	2e00      	cmp	r6, #0
 800f7d2:	d0e3      	beq.n	800f79c <rcl_action_wait_set_add_action_client+0x84>
 800f7d4:	6823      	ldr	r3, [r4, #0]
 800f7d6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800f7da:	6033      	str	r3, [r6, #0]
 800f7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7de:	bf00      	nop

0800f7e0 <rcl_action_client_wait_set_get_entities_ready>:
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	f000 808d 	beq.w	800f900 <rcl_action_client_wait_set_get_entities_ready+0x120>
 800f7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	2900      	cmp	r1, #0
 800f7ee:	d077      	beq.n	800f8e0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	6808      	ldr	r0, [r1, #0]
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d073      	beq.n	800f8e0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800f7f8:	4616      	mov	r6, r2
 800f7fa:	461f      	mov	r7, r3
 800f7fc:	f7fd fecc 	bl	800d598 <rcl_client_is_valid>
 800f800:	2800      	cmp	r0, #0
 800f802:	d071      	beq.n	800f8e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f804:	6820      	ldr	r0, [r4, #0]
 800f806:	3004      	adds	r0, #4
 800f808:	f7fd fec6 	bl	800d598 <rcl_client_is_valid>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d06b      	beq.n	800f8e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f810:	6820      	ldr	r0, [r4, #0]
 800f812:	3008      	adds	r0, #8
 800f814:	f7fd fec0 	bl	800d598 <rcl_client_is_valid>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d065      	beq.n	800f8e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f81c:	6820      	ldr	r0, [r4, #0]
 800f81e:	300c      	adds	r0, #12
 800f820:	f7fe fe56 	bl	800e4d0 <rcl_subscription_is_valid>
 800f824:	2800      	cmp	r0, #0
 800f826:	d05f      	beq.n	800f8e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f828:	6820      	ldr	r0, [r4, #0]
 800f82a:	3010      	adds	r0, #16
 800f82c:	f7fe fe50 	bl	800e4d0 <rcl_subscription_is_valid>
 800f830:	2800      	cmp	r0, #0
 800f832:	d059      	beq.n	800f8e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f834:	2e00      	cmp	r6, #0
 800f836:	d060      	beq.n	800f8fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f838:	2f00      	cmp	r7, #0
 800f83a:	d05e      	beq.n	800f8fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f83c:	9b06      	ldr	r3, [sp, #24]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d05b      	beq.n	800f8fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f842:	9b07      	ldr	r3, [sp, #28]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d058      	beq.n	800f8fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f848:	9b08      	ldr	r3, [sp, #32]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d055      	beq.n	800f8fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	686a      	ldr	r2, [r5, #4]
 800f852:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800f856:	428a      	cmp	r2, r1
 800f858:	d94c      	bls.n	800f8f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f85a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 800f85e:	4282      	cmp	r2, r0
 800f860:	d948      	bls.n	800f8f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f862:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 800f866:	69ea      	ldr	r2, [r5, #28]
 800f868:	42a2      	cmp	r2, r4
 800f86a:	d943      	bls.n	800f8f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f86c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 800f870:	4562      	cmp	r2, ip
 800f872:	d93f      	bls.n	800f8f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f874:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 800f878:	4572      	cmp	r2, lr
 800f87a:	d93b      	bls.n	800f8f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f87c:	69aa      	ldr	r2, [r5, #24]
 800f87e:	682d      	ldr	r5, [r5, #0]
 800f880:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800f884:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800f888:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800f88c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800f890:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800f894:	f103 0c0c 	add.w	ip, r3, #12
 800f898:	eba5 050c 	sub.w	r5, r5, ip
 800f89c:	fab5 f585 	clz	r5, r5
 800f8a0:	096d      	lsrs	r5, r5, #5
 800f8a2:	7035      	strb	r5, [r6, #0]
 800f8a4:	f103 0510 	add.w	r5, r3, #16
 800f8a8:	1b64      	subs	r4, r4, r5
 800f8aa:	fab4 f484 	clz	r4, r4
 800f8ae:	0964      	lsrs	r4, r4, #5
 800f8b0:	703c      	strb	r4, [r7, #0]
 800f8b2:	eba3 0008 	sub.w	r0, r3, r8
 800f8b6:	1d1c      	adds	r4, r3, #4
 800f8b8:	3308      	adds	r3, #8
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	fab0 f080 	clz	r0, r0
 800f8c0:	9a06      	ldr	r2, [sp, #24]
 800f8c2:	0940      	lsrs	r0, r0, #5
 800f8c4:	1b09      	subs	r1, r1, r4
 800f8c6:	7010      	strb	r0, [r2, #0]
 800f8c8:	fab1 f181 	clz	r1, r1
 800f8cc:	9a07      	ldr	r2, [sp, #28]
 800f8ce:	0949      	lsrs	r1, r1, #5
 800f8d0:	7011      	strb	r1, [r2, #0]
 800f8d2:	fab3 f383 	clz	r3, r3
 800f8d6:	9a08      	ldr	r2, [sp, #32]
 800f8d8:	095b      	lsrs	r3, r3, #5
 800f8da:	2000      	movs	r0, #0
 800f8dc:	7013      	strb	r3, [r2, #0]
 800f8de:	e001      	b.n	800f8e4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 800f8e0:	f640 0036 	movw	r0, #2102	; 0x836
 800f8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e8:	f7f8 ffe6 	bl	80088b8 <rcutils_reset_error>
 800f8ec:	f640 0036 	movw	r0, #2102	; 0x836
 800f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f4:	2001      	movs	r0, #1
 800f8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8fa:	200b      	movs	r0, #11
 800f8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f900:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop

0800f908 <rcl_action_take_goal_request>:
 800f908:	2800      	cmp	r0, #0
 800f90a:	d039      	beq.n	800f980 <rcl_action_take_goal_request+0x78>
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	4604      	mov	r4, r0
 800f910:	6800      	ldr	r0, [r0, #0]
 800f912:	b380      	cbz	r0, 800f976 <rcl_action_take_goal_request+0x6e>
 800f914:	460d      	mov	r5, r1
 800f916:	4616      	mov	r6, r2
 800f918:	f7fe fc96 	bl	800e248 <rcl_service_is_valid>
 800f91c:	b330      	cbz	r0, 800f96c <rcl_action_take_goal_request+0x64>
 800f91e:	6820      	ldr	r0, [r4, #0]
 800f920:	3004      	adds	r0, #4
 800f922:	f7fe fc91 	bl	800e248 <rcl_service_is_valid>
 800f926:	b308      	cbz	r0, 800f96c <rcl_action_take_goal_request+0x64>
 800f928:	6820      	ldr	r0, [r4, #0]
 800f92a:	3008      	adds	r0, #8
 800f92c:	f7fe fc8c 	bl	800e248 <rcl_service_is_valid>
 800f930:	b1e0      	cbz	r0, 800f96c <rcl_action_take_goal_request+0x64>
 800f932:	6820      	ldr	r0, [r4, #0]
 800f934:	300c      	adds	r0, #12
 800f936:	f7f8 f82f 	bl	8007998 <rcl_publisher_is_valid>
 800f93a:	b1b8      	cbz	r0, 800f96c <rcl_action_take_goal_request+0x64>
 800f93c:	6820      	ldr	r0, [r4, #0]
 800f93e:	3010      	adds	r0, #16
 800f940:	f7f8 f82a 	bl	8007998 <rcl_publisher_is_valid>
 800f944:	b190      	cbz	r0, 800f96c <rcl_action_take_goal_request+0x64>
 800f946:	b1cd      	cbz	r5, 800f97c <rcl_action_take_goal_request+0x74>
 800f948:	b1c6      	cbz	r6, 800f97c <rcl_action_take_goal_request+0x74>
 800f94a:	6820      	ldr	r0, [r4, #0]
 800f94c:	4632      	mov	r2, r6
 800f94e:	4629      	mov	r1, r5
 800f950:	f7fe fc22 	bl	800e198 <rcl_take_request>
 800f954:	b148      	cbz	r0, 800f96a <rcl_action_take_goal_request+0x62>
 800f956:	280a      	cmp	r0, #10
 800f958:	d007      	beq.n	800f96a <rcl_action_take_goal_request+0x62>
 800f95a:	f240 2259 	movw	r2, #601	; 0x259
 800f95e:	f640 0399 	movw	r3, #2201	; 0x899
 800f962:	4290      	cmp	r0, r2
 800f964:	bf0c      	ite	eq
 800f966:	4618      	moveq	r0, r3
 800f968:	2001      	movne	r0, #1
 800f96a:	bd70      	pop	{r4, r5, r6, pc}
 800f96c:	f7f8 ffa4 	bl	80088b8 <rcutils_reset_error>
 800f970:	f640 0098 	movw	r0, #2200	; 0x898
 800f974:	bd70      	pop	{r4, r5, r6, pc}
 800f976:	f640 0098 	movw	r0, #2200	; 0x898
 800f97a:	bd70      	pop	{r4, r5, r6, pc}
 800f97c:	200b      	movs	r0, #11
 800f97e:	bd70      	pop	{r4, r5, r6, pc}
 800f980:	f640 0098 	movw	r0, #2200	; 0x898
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop

0800f988 <rcl_action_send_goal_response>:
 800f988:	b388      	cbz	r0, 800f9ee <rcl_action_send_goal_response+0x66>
 800f98a:	b570      	push	{r4, r5, r6, lr}
 800f98c:	4604      	mov	r4, r0
 800f98e:	6800      	ldr	r0, [r0, #0]
 800f990:	b340      	cbz	r0, 800f9e4 <rcl_action_send_goal_response+0x5c>
 800f992:	460d      	mov	r5, r1
 800f994:	4616      	mov	r6, r2
 800f996:	f7fe fc57 	bl	800e248 <rcl_service_is_valid>
 800f99a:	b1f0      	cbz	r0, 800f9da <rcl_action_send_goal_response+0x52>
 800f99c:	6820      	ldr	r0, [r4, #0]
 800f99e:	3004      	adds	r0, #4
 800f9a0:	f7fe fc52 	bl	800e248 <rcl_service_is_valid>
 800f9a4:	b1c8      	cbz	r0, 800f9da <rcl_action_send_goal_response+0x52>
 800f9a6:	6820      	ldr	r0, [r4, #0]
 800f9a8:	3008      	adds	r0, #8
 800f9aa:	f7fe fc4d 	bl	800e248 <rcl_service_is_valid>
 800f9ae:	b1a0      	cbz	r0, 800f9da <rcl_action_send_goal_response+0x52>
 800f9b0:	6820      	ldr	r0, [r4, #0]
 800f9b2:	300c      	adds	r0, #12
 800f9b4:	f7f7 fff0 	bl	8007998 <rcl_publisher_is_valid>
 800f9b8:	b178      	cbz	r0, 800f9da <rcl_action_send_goal_response+0x52>
 800f9ba:	6820      	ldr	r0, [r4, #0]
 800f9bc:	3010      	adds	r0, #16
 800f9be:	f7f7 ffeb 	bl	8007998 <rcl_publisher_is_valid>
 800f9c2:	b150      	cbz	r0, 800f9da <rcl_action_send_goal_response+0x52>
 800f9c4:	b18d      	cbz	r5, 800f9ea <rcl_action_send_goal_response+0x62>
 800f9c6:	b186      	cbz	r6, 800f9ea <rcl_action_send_goal_response+0x62>
 800f9c8:	6820      	ldr	r0, [r4, #0]
 800f9ca:	4632      	mov	r2, r6
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	f7fe fc23 	bl	800e218 <rcl_send_response>
 800f9d2:	3800      	subs	r0, #0
 800f9d4:	bf18      	it	ne
 800f9d6:	2001      	movne	r0, #1
 800f9d8:	bd70      	pop	{r4, r5, r6, pc}
 800f9da:	f7f8 ff6d 	bl	80088b8 <rcutils_reset_error>
 800f9de:	f640 0098 	movw	r0, #2200	; 0x898
 800f9e2:	bd70      	pop	{r4, r5, r6, pc}
 800f9e4:	f640 0098 	movw	r0, #2200	; 0x898
 800f9e8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ea:	200b      	movs	r0, #11
 800f9ec:	bd70      	pop	{r4, r5, r6, pc}
 800f9ee:	f640 0098 	movw	r0, #2200	; 0x898
 800f9f2:	4770      	bx	lr

0800f9f4 <rcl_action_take_result_request>:
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d03a      	beq.n	800fa6e <rcl_action_take_result_request+0x7a>
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	6800      	ldr	r0, [r0, #0]
 800f9fe:	b388      	cbz	r0, 800fa64 <rcl_action_take_result_request+0x70>
 800fa00:	460d      	mov	r5, r1
 800fa02:	4616      	mov	r6, r2
 800fa04:	f7fe fc20 	bl	800e248 <rcl_service_is_valid>
 800fa08:	b338      	cbz	r0, 800fa5a <rcl_action_take_result_request+0x66>
 800fa0a:	6820      	ldr	r0, [r4, #0]
 800fa0c:	3004      	adds	r0, #4
 800fa0e:	f7fe fc1b 	bl	800e248 <rcl_service_is_valid>
 800fa12:	b310      	cbz	r0, 800fa5a <rcl_action_take_result_request+0x66>
 800fa14:	6820      	ldr	r0, [r4, #0]
 800fa16:	3008      	adds	r0, #8
 800fa18:	f7fe fc16 	bl	800e248 <rcl_service_is_valid>
 800fa1c:	b1e8      	cbz	r0, 800fa5a <rcl_action_take_result_request+0x66>
 800fa1e:	6820      	ldr	r0, [r4, #0]
 800fa20:	300c      	adds	r0, #12
 800fa22:	f7f7 ffb9 	bl	8007998 <rcl_publisher_is_valid>
 800fa26:	b1c0      	cbz	r0, 800fa5a <rcl_action_take_result_request+0x66>
 800fa28:	6820      	ldr	r0, [r4, #0]
 800fa2a:	3010      	adds	r0, #16
 800fa2c:	f7f7 ffb4 	bl	8007998 <rcl_publisher_is_valid>
 800fa30:	b198      	cbz	r0, 800fa5a <rcl_action_take_result_request+0x66>
 800fa32:	b1d5      	cbz	r5, 800fa6a <rcl_action_take_result_request+0x76>
 800fa34:	b1ce      	cbz	r6, 800fa6a <rcl_action_take_result_request+0x76>
 800fa36:	6820      	ldr	r0, [r4, #0]
 800fa38:	4632      	mov	r2, r6
 800fa3a:	4629      	mov	r1, r5
 800fa3c:	3008      	adds	r0, #8
 800fa3e:	f7fe fbab 	bl	800e198 <rcl_take_request>
 800fa42:	b148      	cbz	r0, 800fa58 <rcl_action_take_result_request+0x64>
 800fa44:	280a      	cmp	r0, #10
 800fa46:	d007      	beq.n	800fa58 <rcl_action_take_result_request+0x64>
 800fa48:	f240 2259 	movw	r2, #601	; 0x259
 800fa4c:	f640 0399 	movw	r3, #2201	; 0x899
 800fa50:	4290      	cmp	r0, r2
 800fa52:	bf0c      	ite	eq
 800fa54:	4618      	moveq	r0, r3
 800fa56:	2001      	movne	r0, #1
 800fa58:	bd70      	pop	{r4, r5, r6, pc}
 800fa5a:	f7f8 ff2d 	bl	80088b8 <rcutils_reset_error>
 800fa5e:	f640 0098 	movw	r0, #2200	; 0x898
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	f640 0098 	movw	r0, #2200	; 0x898
 800fa68:	bd70      	pop	{r4, r5, r6, pc}
 800fa6a:	200b      	movs	r0, #11
 800fa6c:	bd70      	pop	{r4, r5, r6, pc}
 800fa6e:	f640 0098 	movw	r0, #2200	; 0x898
 800fa72:	4770      	bx	lr

0800fa74 <rcl_action_take_cancel_request>:
 800fa74:	2800      	cmp	r0, #0
 800fa76:	d03a      	beq.n	800faee <rcl_action_take_cancel_request+0x7a>
 800fa78:	b570      	push	{r4, r5, r6, lr}
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	6800      	ldr	r0, [r0, #0]
 800fa7e:	b388      	cbz	r0, 800fae4 <rcl_action_take_cancel_request+0x70>
 800fa80:	460d      	mov	r5, r1
 800fa82:	4616      	mov	r6, r2
 800fa84:	f7fe fbe0 	bl	800e248 <rcl_service_is_valid>
 800fa88:	b338      	cbz	r0, 800fada <rcl_action_take_cancel_request+0x66>
 800fa8a:	6820      	ldr	r0, [r4, #0]
 800fa8c:	3004      	adds	r0, #4
 800fa8e:	f7fe fbdb 	bl	800e248 <rcl_service_is_valid>
 800fa92:	b310      	cbz	r0, 800fada <rcl_action_take_cancel_request+0x66>
 800fa94:	6820      	ldr	r0, [r4, #0]
 800fa96:	3008      	adds	r0, #8
 800fa98:	f7fe fbd6 	bl	800e248 <rcl_service_is_valid>
 800fa9c:	b1e8      	cbz	r0, 800fada <rcl_action_take_cancel_request+0x66>
 800fa9e:	6820      	ldr	r0, [r4, #0]
 800faa0:	300c      	adds	r0, #12
 800faa2:	f7f7 ff79 	bl	8007998 <rcl_publisher_is_valid>
 800faa6:	b1c0      	cbz	r0, 800fada <rcl_action_take_cancel_request+0x66>
 800faa8:	6820      	ldr	r0, [r4, #0]
 800faaa:	3010      	adds	r0, #16
 800faac:	f7f7 ff74 	bl	8007998 <rcl_publisher_is_valid>
 800fab0:	b198      	cbz	r0, 800fada <rcl_action_take_cancel_request+0x66>
 800fab2:	b1d5      	cbz	r5, 800faea <rcl_action_take_cancel_request+0x76>
 800fab4:	b1ce      	cbz	r6, 800faea <rcl_action_take_cancel_request+0x76>
 800fab6:	6820      	ldr	r0, [r4, #0]
 800fab8:	4632      	mov	r2, r6
 800faba:	4629      	mov	r1, r5
 800fabc:	3004      	adds	r0, #4
 800fabe:	f7fe fb6b 	bl	800e198 <rcl_take_request>
 800fac2:	b148      	cbz	r0, 800fad8 <rcl_action_take_cancel_request+0x64>
 800fac4:	280a      	cmp	r0, #10
 800fac6:	d007      	beq.n	800fad8 <rcl_action_take_cancel_request+0x64>
 800fac8:	f240 2259 	movw	r2, #601	; 0x259
 800facc:	f640 0399 	movw	r3, #2201	; 0x899
 800fad0:	4290      	cmp	r0, r2
 800fad2:	bf0c      	ite	eq
 800fad4:	4618      	moveq	r0, r3
 800fad6:	2001      	movne	r0, #1
 800fad8:	bd70      	pop	{r4, r5, r6, pc}
 800fada:	f7f8 feed 	bl	80088b8 <rcutils_reset_error>
 800fade:	f640 0098 	movw	r0, #2200	; 0x898
 800fae2:	bd70      	pop	{r4, r5, r6, pc}
 800fae4:	f640 0098 	movw	r0, #2200	; 0x898
 800fae8:	bd70      	pop	{r4, r5, r6, pc}
 800faea:	200b      	movs	r0, #11
 800faec:	bd70      	pop	{r4, r5, r6, pc}
 800faee:	f640 0098 	movw	r0, #2200	; 0x898
 800faf2:	4770      	bx	lr

0800faf4 <rcl_action_send_cancel_response>:
 800faf4:	b390      	cbz	r0, 800fb5c <rcl_action_send_cancel_response+0x68>
 800faf6:	b570      	push	{r4, r5, r6, lr}
 800faf8:	4604      	mov	r4, r0
 800fafa:	6800      	ldr	r0, [r0, #0]
 800fafc:	b348      	cbz	r0, 800fb52 <rcl_action_send_cancel_response+0x5e>
 800fafe:	460d      	mov	r5, r1
 800fb00:	4616      	mov	r6, r2
 800fb02:	f7fe fba1 	bl	800e248 <rcl_service_is_valid>
 800fb06:	b1f8      	cbz	r0, 800fb48 <rcl_action_send_cancel_response+0x54>
 800fb08:	6820      	ldr	r0, [r4, #0]
 800fb0a:	3004      	adds	r0, #4
 800fb0c:	f7fe fb9c 	bl	800e248 <rcl_service_is_valid>
 800fb10:	b1d0      	cbz	r0, 800fb48 <rcl_action_send_cancel_response+0x54>
 800fb12:	6820      	ldr	r0, [r4, #0]
 800fb14:	3008      	adds	r0, #8
 800fb16:	f7fe fb97 	bl	800e248 <rcl_service_is_valid>
 800fb1a:	b1a8      	cbz	r0, 800fb48 <rcl_action_send_cancel_response+0x54>
 800fb1c:	6820      	ldr	r0, [r4, #0]
 800fb1e:	300c      	adds	r0, #12
 800fb20:	f7f7 ff3a 	bl	8007998 <rcl_publisher_is_valid>
 800fb24:	b180      	cbz	r0, 800fb48 <rcl_action_send_cancel_response+0x54>
 800fb26:	6820      	ldr	r0, [r4, #0]
 800fb28:	3010      	adds	r0, #16
 800fb2a:	f7f7 ff35 	bl	8007998 <rcl_publisher_is_valid>
 800fb2e:	b158      	cbz	r0, 800fb48 <rcl_action_send_cancel_response+0x54>
 800fb30:	b195      	cbz	r5, 800fb58 <rcl_action_send_cancel_response+0x64>
 800fb32:	b18e      	cbz	r6, 800fb58 <rcl_action_send_cancel_response+0x64>
 800fb34:	6820      	ldr	r0, [r4, #0]
 800fb36:	4632      	mov	r2, r6
 800fb38:	4629      	mov	r1, r5
 800fb3a:	3004      	adds	r0, #4
 800fb3c:	f7fe fb6c 	bl	800e218 <rcl_send_response>
 800fb40:	3800      	subs	r0, #0
 800fb42:	bf18      	it	ne
 800fb44:	2001      	movne	r0, #1
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	f7f8 feb6 	bl	80088b8 <rcutils_reset_error>
 800fb4c:	f640 0098 	movw	r0, #2200	; 0x898
 800fb50:	bd70      	pop	{r4, r5, r6, pc}
 800fb52:	f640 0098 	movw	r0, #2200	; 0x898
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
 800fb58:	200b      	movs	r0, #11
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	f640 0098 	movw	r0, #2200	; 0x898
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop

0800fb64 <rcl_action_wait_set_add_action_server>:
 800fb64:	2800      	cmp	r0, #0
 800fb66:	d04d      	beq.n	800fc04 <rcl_action_wait_set_add_action_server+0xa0>
 800fb68:	b570      	push	{r4, r5, r6, lr}
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	b159      	cbz	r1, 800fb86 <rcl_action_wait_set_add_action_server+0x22>
 800fb6e:	4605      	mov	r5, r0
 800fb70:	6808      	ldr	r0, [r1, #0]
 800fb72:	b140      	cbz	r0, 800fb86 <rcl_action_wait_set_add_action_server+0x22>
 800fb74:	4616      	mov	r6, r2
 800fb76:	f7fe fb67 	bl	800e248 <rcl_service_is_valid>
 800fb7a:	b120      	cbz	r0, 800fb86 <rcl_action_wait_set_add_action_server+0x22>
 800fb7c:	6820      	ldr	r0, [r4, #0]
 800fb7e:	3004      	adds	r0, #4
 800fb80:	f7fe fb62 	bl	800e248 <rcl_service_is_valid>
 800fb84:	b910      	cbnz	r0, 800fb8c <rcl_action_wait_set_add_action_server+0x28>
 800fb86:	f640 0098 	movw	r0, #2200	; 0x898
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
 800fb8c:	6820      	ldr	r0, [r4, #0]
 800fb8e:	3008      	adds	r0, #8
 800fb90:	f7fe fb5a 	bl	800e248 <rcl_service_is_valid>
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d0f6      	beq.n	800fb86 <rcl_action_wait_set_add_action_server+0x22>
 800fb98:	6820      	ldr	r0, [r4, #0]
 800fb9a:	300c      	adds	r0, #12
 800fb9c:	f7f7 ff14 	bl	80079c8 <rcl_publisher_is_valid_except_context>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0f0      	beq.n	800fb86 <rcl_action_wait_set_add_action_server+0x22>
 800fba4:	6820      	ldr	r0, [r4, #0]
 800fba6:	3010      	adds	r0, #16
 800fba8:	f7f7 ff0e 	bl	80079c8 <rcl_publisher_is_valid_except_context>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d0ea      	beq.n	800fb86 <rcl_action_wait_set_add_action_server+0x22>
 800fbb0:	6821      	ldr	r1, [r4, #0]
 800fbb2:	4628      	mov	r0, r5
 800fbb4:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 800fbb8:	f7ff fad0 	bl	800f15c <rcl_wait_set_add_service>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	d1e4      	bne.n	800fb8a <rcl_action_wait_set_add_action_server+0x26>
 800fbc0:	6821      	ldr	r1, [r4, #0]
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 800fbc8:	3104      	adds	r1, #4
 800fbca:	f7ff fac7 	bl	800f15c <rcl_wait_set_add_service>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d1db      	bne.n	800fb8a <rcl_action_wait_set_add_action_server+0x26>
 800fbd2:	6821      	ldr	r1, [r4, #0]
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 800fbda:	3108      	adds	r1, #8
 800fbdc:	f7ff fabe 	bl	800f15c <rcl_wait_set_add_service>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	d1d2      	bne.n	800fb8a <rcl_action_wait_set_add_action_server+0x26>
 800fbe4:	6821      	ldr	r1, [r4, #0]
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 800fbec:	3114      	adds	r1, #20
 800fbee:	f7ff fa59 	bl	800f0a4 <rcl_wait_set_add_timer>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d1c9      	bne.n	800fb8a <rcl_action_wait_set_add_action_server+0x26>
 800fbf6:	2e00      	cmp	r6, #0
 800fbf8:	d0c7      	beq.n	800fb8a <rcl_action_wait_set_add_action_server+0x26>
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800fc00:	6033      	str	r3, [r6, #0]
 800fc02:	bd70      	pop	{r4, r5, r6, pc}
 800fc04:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop

0800fc0c <rcl_action_server_wait_set_get_entities_ready>:
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d05a      	beq.n	800fcc6 <rcl_action_server_wait_set_get_entities_ready+0xba>
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	460c      	mov	r4, r1
 800fc14:	b161      	cbz	r1, 800fc30 <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fc16:	4605      	mov	r5, r0
 800fc18:	6808      	ldr	r0, [r1, #0]
 800fc1a:	b148      	cbz	r0, 800fc30 <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fc1c:	4616      	mov	r6, r2
 800fc1e:	461f      	mov	r7, r3
 800fc20:	f7fe fb12 	bl	800e248 <rcl_service_is_valid>
 800fc24:	b120      	cbz	r0, 800fc30 <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fc26:	6820      	ldr	r0, [r4, #0]
 800fc28:	3004      	adds	r0, #4
 800fc2a:	f7fe fb0d 	bl	800e248 <rcl_service_is_valid>
 800fc2e:	b910      	cbnz	r0, 800fc36 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 800fc30:	f640 0098 	movw	r0, #2200	; 0x898
 800fc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc36:	6820      	ldr	r0, [r4, #0]
 800fc38:	3008      	adds	r0, #8
 800fc3a:	f7fe fb05 	bl	800e248 <rcl_service_is_valid>
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	d0f6      	beq.n	800fc30 <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fc42:	6820      	ldr	r0, [r4, #0]
 800fc44:	300c      	adds	r0, #12
 800fc46:	f7f7 febf 	bl	80079c8 <rcl_publisher_is_valid_except_context>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d0f0      	beq.n	800fc30 <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fc4e:	6820      	ldr	r0, [r4, #0]
 800fc50:	3010      	adds	r0, #16
 800fc52:	f7f7 feb9 	bl	80079c8 <rcl_publisher_is_valid_except_context>
 800fc56:	2800      	cmp	r0, #0
 800fc58:	d0ea      	beq.n	800fc30 <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fc5a:	b3be      	cbz	r6, 800fccc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fc5c:	b3b7      	cbz	r7, 800fccc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fc5e:	9b06      	ldr	r3, [sp, #24]
 800fc60:	b3a3      	cbz	r3, 800fccc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fc62:	9b07      	ldr	r3, [sp, #28]
 800fc64:	b393      	cbz	r3, 800fccc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fc66:	6821      	ldr	r1, [r4, #0]
 800fc68:	692a      	ldr	r2, [r5, #16]
 800fc6a:	6a2c      	ldr	r4, [r5, #32]
 800fc6c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 800fc70:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 800fc74:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800fc78:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 800fc7c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 800fc80:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800fc84:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800fc88:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800fc8c:	1a64      	subs	r4, r4, r1
 800fc8e:	fab4 f484 	clz	r4, r4
 800fc92:	0964      	lsrs	r4, r4, #5
 800fc94:	7034      	strb	r4, [r6, #0]
 800fc96:	1d0c      	adds	r4, r1, #4
 800fc98:	1b1b      	subs	r3, r3, r4
 800fc9a:	fab3 f383 	clz	r3, r3
 800fc9e:	095b      	lsrs	r3, r3, #5
 800fca0:	f101 0408 	add.w	r4, r1, #8
 800fca4:	703b      	strb	r3, [r7, #0]
 800fca6:	f101 0314 	add.w	r3, r1, #20
 800fcaa:	1b01      	subs	r1, r0, r4
 800fcac:	1ad3      	subs	r3, r2, r3
 800fcae:	fab1 f181 	clz	r1, r1
 800fcb2:	9a06      	ldr	r2, [sp, #24]
 800fcb4:	0949      	lsrs	r1, r1, #5
 800fcb6:	7011      	strb	r1, [r2, #0]
 800fcb8:	fab3 f383 	clz	r3, r3
 800fcbc:	9a07      	ldr	r2, [sp, #28]
 800fcbe:	095b      	lsrs	r3, r3, #5
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	7013      	strb	r3, [r2, #0]
 800fcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcc6:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fcca:	4770      	bx	lr
 800fccc:	200b      	movs	r0, #11
 800fcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fcd0 <_execute_event_handler>:
 800fcd0:	2002      	movs	r0, #2
 800fcd2:	4770      	bx	lr

0800fcd4 <_cancel_goal_event_handler>:
 800fcd4:	2003      	movs	r0, #3
 800fcd6:	4770      	bx	lr

0800fcd8 <_succeed_event_handler>:
 800fcd8:	2004      	movs	r0, #4
 800fcda:	4770      	bx	lr

0800fcdc <_abort_event_handler>:
 800fcdc:	2006      	movs	r0, #6
 800fcde:	4770      	bx	lr

0800fce0 <_canceled_event_handler>:
 800fce0:	2005      	movs	r0, #5
 800fce2:	4770      	bx	lr

0800fce4 <rcl_action_transition_goal_state>:
 800fce4:	b2c2      	uxtb	r2, r0
 800fce6:	2a06      	cmp	r2, #6
 800fce8:	d80c      	bhi.n	800fd04 <rcl_action_transition_goal_state+0x20>
 800fcea:	2904      	cmp	r1, #4
 800fcec:	d80a      	bhi.n	800fd04 <rcl_action_transition_goal_state+0x20>
 800fcee:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800fcf2:	b410      	push	{r4}
 800fcf4:	1853      	adds	r3, r2, r1
 800fcf6:	4c06      	ldr	r4, [pc, #24]	; (800fd10 <rcl_action_transition_goal_state+0x2c>)
 800fcf8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800fcfc:	b123      	cbz	r3, 800fd08 <rcl_action_transition_goal_state+0x24>
 800fcfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd02:	4718      	bx	r3
 800fd04:	2000      	movs	r0, #0
 800fd06:	4770      	bx	lr
 800fd08:	2000      	movs	r0, #0
 800fd0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	08015ef4 	.word	0x08015ef4

0800fd14 <rcl_action_get_zero_initialized_cancel_response>:
 800fd14:	b510      	push	{r4, lr}
 800fd16:	4c07      	ldr	r4, [pc, #28]	; (800fd34 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800fd18:	4686      	mov	lr, r0
 800fd1a:	4684      	mov	ip, r0
 800fd1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd28:	6823      	ldr	r3, [r4, #0]
 800fd2a:	f8cc 3000 	str.w	r3, [ip]
 800fd2e:	4670      	mov	r0, lr
 800fd30:	bd10      	pop	{r4, pc}
 800fd32:	bf00      	nop
 800fd34:	08015f80 	.word	0x08015f80

0800fd38 <rclc_action_send_result_request>:
 800fd38:	b1d0      	cbz	r0, 800fd70 <rclc_action_send_result_request+0x38>
 800fd3a:	b500      	push	{lr}
 800fd3c:	4684      	mov	ip, r0
 800fd3e:	b087      	sub	sp, #28
 800fd40:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800fd44:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800fd48:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800fd4c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800fd50:	f10d 0e08 	add.w	lr, sp, #8
 800fd54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fd58:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800fd5c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 800fd60:	a902      	add	r1, sp, #8
 800fd62:	3010      	adds	r0, #16
 800fd64:	f7ff fbdc 	bl	800f520 <rcl_action_send_result_request>
 800fd68:	b920      	cbnz	r0, 800fd74 <rclc_action_send_result_request+0x3c>
 800fd6a:	b007      	add	sp, #28
 800fd6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd70:	200b      	movs	r0, #11
 800fd72:	4770      	bx	lr
 800fd74:	9001      	str	r0, [sp, #4]
 800fd76:	f7f8 fd9f 	bl	80088b8 <rcutils_reset_error>
 800fd7a:	9801      	ldr	r0, [sp, #4]
 800fd7c:	b007      	add	sp, #28
 800fd7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd82:	bf00      	nop

0800fd84 <rclc_action_take_goal_handle>:
 800fd84:	b160      	cbz	r0, 800fda0 <rclc_action_take_goal_handle+0x1c>
 800fd86:	6883      	ldr	r3, [r0, #8]
 800fd88:	b143      	cbz	r3, 800fd9c <rclc_action_take_goal_handle+0x18>
 800fd8a:	6819      	ldr	r1, [r3, #0]
 800fd8c:	6081      	str	r1, [r0, #8]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	721a      	strb	r2, [r3, #8]
 800fd92:	68c1      	ldr	r1, [r0, #12]
 800fd94:	6019      	str	r1, [r3, #0]
 800fd96:	621a      	str	r2, [r3, #32]
 800fd98:	849a      	strh	r2, [r3, #36]	; 0x24
 800fd9a:	60c3      	str	r3, [r0, #12]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	4770      	bx	lr
 800fda0:	4603      	mov	r3, r0
 800fda2:	e7fb      	b.n	800fd9c <rclc_action_take_goal_handle+0x18>

0800fda4 <rclc_action_remove_used_goal_handle>:
 800fda4:	b180      	cbz	r0, 800fdc8 <rclc_action_remove_used_goal_handle+0x24>
 800fda6:	b179      	cbz	r1, 800fdc8 <rclc_action_remove_used_goal_handle+0x24>
 800fda8:	68c3      	ldr	r3, [r0, #12]
 800fdaa:	4299      	cmp	r1, r3
 800fdac:	d00d      	beq.n	800fdca <rclc_action_remove_used_goal_handle+0x26>
 800fdae:	b12b      	cbz	r3, 800fdbc <rclc_action_remove_used_goal_handle+0x18>
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	4291      	cmp	r1, r2
 800fdb4:	d003      	beq.n	800fdbe <rclc_action_remove_used_goal_handle+0x1a>
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1f9      	bne.n	800fdb0 <rclc_action_remove_used_goal_handle+0xc>
 800fdbc:	4770      	bx	lr
 800fdbe:	680a      	ldr	r2, [r1, #0]
 800fdc0:	601a      	str	r2, [r3, #0]
 800fdc2:	6883      	ldr	r3, [r0, #8]
 800fdc4:	600b      	str	r3, [r1, #0]
 800fdc6:	6081      	str	r1, [r0, #8]
 800fdc8:	4770      	bx	lr
 800fdca:	680b      	ldr	r3, [r1, #0]
 800fdcc:	60c3      	str	r3, [r0, #12]
 800fdce:	e7f8      	b.n	800fdc2 <rclc_action_remove_used_goal_handle+0x1e>

0800fdd0 <rclc_action_find_goal_handle_by_uuid>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	b180      	cbz	r0, 800fdf6 <rclc_action_find_goal_handle_by_uuid+0x26>
 800fdd4:	460d      	mov	r5, r1
 800fdd6:	b181      	cbz	r1, 800fdfa <rclc_action_find_goal_handle_by_uuid+0x2a>
 800fdd8:	68c4      	ldr	r4, [r0, #12]
 800fdda:	b914      	cbnz	r4, 800fde2 <rclc_action_find_goal_handle_by_uuid+0x12>
 800fddc:	e009      	b.n	800fdf2 <rclc_action_find_goal_handle_by_uuid+0x22>
 800fdde:	6824      	ldr	r4, [r4, #0]
 800fde0:	b13c      	cbz	r4, 800fdf2 <rclc_action_find_goal_handle_by_uuid+0x22>
 800fde2:	f104 0009 	add.w	r0, r4, #9
 800fde6:	2210      	movs	r2, #16
 800fde8:	4629      	mov	r1, r5
 800fdea:	f004 fd5b 	bl	80148a4 <memcmp>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d1f5      	bne.n	800fdde <rclc_action_find_goal_handle_by_uuid+0xe>
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	bd38      	pop	{r3, r4, r5, pc}
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	e7fb      	b.n	800fdf2 <rclc_action_find_goal_handle_by_uuid+0x22>
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	e7f9      	b.n	800fdf2 <rclc_action_find_goal_handle_by_uuid+0x22>
 800fdfe:	bf00      	nop

0800fe00 <rclc_action_find_first_handle_by_status>:
 800fe00:	b140      	cbz	r0, 800fe14 <rclc_action_find_first_handle_by_status+0x14>
 800fe02:	68c0      	ldr	r0, [r0, #12]
 800fe04:	b910      	cbnz	r0, 800fe0c <rclc_action_find_first_handle_by_status+0xc>
 800fe06:	e005      	b.n	800fe14 <rclc_action_find_first_handle_by_status+0x14>
 800fe08:	6800      	ldr	r0, [r0, #0]
 800fe0a:	b118      	cbz	r0, 800fe14 <rclc_action_find_first_handle_by_status+0x14>
 800fe0c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800fe10:	428b      	cmp	r3, r1
 800fe12:	d1f9      	bne.n	800fe08 <rclc_action_find_first_handle_by_status+0x8>
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop

0800fe18 <rclc_action_find_first_terminated_handle>:
 800fe18:	b140      	cbz	r0, 800fe2c <rclc_action_find_first_terminated_handle+0x14>
 800fe1a:	68c0      	ldr	r0, [r0, #12]
 800fe1c:	b910      	cbnz	r0, 800fe24 <rclc_action_find_first_terminated_handle+0xc>
 800fe1e:	e005      	b.n	800fe2c <rclc_action_find_first_terminated_handle+0x14>
 800fe20:	6800      	ldr	r0, [r0, #0]
 800fe22:	b118      	cbz	r0, 800fe2c <rclc_action_find_first_terminated_handle+0x14>
 800fe24:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800fe28:	2b03      	cmp	r3, #3
 800fe2a:	ddf9      	ble.n	800fe20 <rclc_action_find_first_terminated_handle+0x8>
 800fe2c:	4770      	bx	lr
 800fe2e:	bf00      	nop

0800fe30 <rclc_action_find_handle_by_goal_request_sequence_number>:
 800fe30:	b170      	cbz	r0, 800fe50 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800fe32:	68c0      	ldr	r0, [r0, #12]
 800fe34:	b160      	cbz	r0, 800fe50 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800fe36:	b410      	push	{r4}
 800fe38:	e001      	b.n	800fe3e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800fe3a:	6800      	ldr	r0, [r0, #0]
 800fe3c:	b128      	cbz	r0, 800fe4a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800fe3e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 800fe42:	4299      	cmp	r1, r3
 800fe44:	bf08      	it	eq
 800fe46:	4294      	cmpeq	r4, r2
 800fe48:	d1f7      	bne.n	800fe3a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800fe4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe4e:	4770      	bx	lr
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop

0800fe54 <rclc_action_find_handle_by_result_request_sequence_number>:
 800fe54:	b170      	cbz	r0, 800fe74 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800fe56:	68c0      	ldr	r0, [r0, #12]
 800fe58:	b160      	cbz	r0, 800fe74 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800fe5a:	b410      	push	{r4}
 800fe5c:	e001      	b.n	800fe62 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800fe5e:	6800      	ldr	r0, [r0, #0]
 800fe60:	b128      	cbz	r0, 800fe6e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800fe62:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 800fe66:	4299      	cmp	r1, r3
 800fe68:	bf08      	it	eq
 800fe6a:	4294      	cmpeq	r4, r2
 800fe6c:	d1f7      	bne.n	800fe5e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800fe6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe72:	4770      	bx	lr
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop

0800fe78 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800fe78:	b170      	cbz	r0, 800fe98 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800fe7a:	68c0      	ldr	r0, [r0, #12]
 800fe7c:	b160      	cbz	r0, 800fe98 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800fe7e:	b410      	push	{r4}
 800fe80:	e001      	b.n	800fe86 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800fe82:	6800      	ldr	r0, [r0, #0]
 800fe84:	b128      	cbz	r0, 800fe92 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800fe86:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 800fe8a:	4299      	cmp	r1, r3
 800fe8c:	bf08      	it	eq
 800fe8e:	4294      	cmpeq	r4, r2
 800fe90:	d1f7      	bne.n	800fe82 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800fe92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop

0800fe9c <rclc_action_find_first_handle_with_goal_response>:
 800fe9c:	b140      	cbz	r0, 800feb0 <rclc_action_find_first_handle_with_goal_response+0x14>
 800fe9e:	68c0      	ldr	r0, [r0, #12]
 800fea0:	b910      	cbnz	r0, 800fea8 <rclc_action_find_first_handle_with_goal_response+0xc>
 800fea2:	e005      	b.n	800feb0 <rclc_action_find_first_handle_with_goal_response+0x14>
 800fea4:	6800      	ldr	r0, [r0, #0]
 800fea6:	b118      	cbz	r0, 800feb0 <rclc_action_find_first_handle_with_goal_response+0x14>
 800fea8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d0f9      	beq.n	800fea4 <rclc_action_find_first_handle_with_goal_response+0x8>
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop

0800feb4 <rclc_action_find_first_handle_with_result_response>:
 800feb4:	b140      	cbz	r0, 800fec8 <rclc_action_find_first_handle_with_result_response+0x14>
 800feb6:	68c0      	ldr	r0, [r0, #12]
 800feb8:	b910      	cbnz	r0, 800fec0 <rclc_action_find_first_handle_with_result_response+0xc>
 800feba:	e005      	b.n	800fec8 <rclc_action_find_first_handle_with_result_response+0x14>
 800febc:	6800      	ldr	r0, [r0, #0]
 800febe:	b118      	cbz	r0, 800fec8 <rclc_action_find_first_handle_with_result_response+0x14>
 800fec0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d0f9      	beq.n	800febc <rclc_action_find_first_handle_with_result_response+0x8>
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop

0800fecc <rclc_action_server_response_goal_request>:
 800fecc:	b198      	cbz	r0, 800fef6 <rclc_action_server_response_goal_request+0x2a>
 800fece:	b510      	push	{r4, lr}
 800fed0:	6844      	ldr	r4, [r0, #4]
 800fed2:	b086      	sub	sp, #24
 800fed4:	2200      	movs	r2, #0
 800fed6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800feda:	460b      	mov	r3, r1
 800fedc:	9205      	str	r2, [sp, #20]
 800fede:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800fee2:	aa03      	add	r2, sp, #12
 800fee4:	f104 0010 	add.w	r0, r4, #16
 800fee8:	f88d 300c 	strb.w	r3, [sp, #12]
 800feec:	f7ff fd4c 	bl	800f988 <rcl_action_send_goal_response>
 800fef0:	b918      	cbnz	r0, 800fefa <rclc_action_server_response_goal_request+0x2e>
 800fef2:	b006      	add	sp, #24
 800fef4:	bd10      	pop	{r4, pc}
 800fef6:	200b      	movs	r0, #11
 800fef8:	4770      	bx	lr
 800fefa:	9001      	str	r0, [sp, #4]
 800fefc:	f7f8 fcdc 	bl	80088b8 <rcutils_reset_error>
 800ff00:	9801      	ldr	r0, [sp, #4]
 800ff02:	b006      	add	sp, #24
 800ff04:	bd10      	pop	{r4, pc}
 800ff06:	bf00      	nop

0800ff08 <rclc_action_server_goal_cancel_accept>:
 800ff08:	b310      	cbz	r0, 800ff50 <rclc_action_server_goal_cancel_accept+0x48>
 800ff0a:	b510      	push	{r4, lr}
 800ff0c:	b090      	sub	sp, #64	; 0x40
 800ff0e:	4604      	mov	r4, r0
 800ff10:	a806      	add	r0, sp, #24
 800ff12:	f7ff feff 	bl	800fd14 <rcl_action_get_zero_initialized_cancel_response>
 800ff16:	2300      	movs	r3, #0
 800ff18:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800ff1c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800ff20:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800ff24:	f88d 3018 	strb.w	r3, [sp, #24]
 800ff28:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800ff2c:	f8cd d01c 	str.w	sp, [sp, #28]
 800ff30:	46ec      	mov	ip, sp
 800ff32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff36:	ed9f 7b08 	vldr	d7, [pc, #32]	; 800ff58 <rclc_action_server_goal_cancel_accept+0x50>
 800ff3a:	6860      	ldr	r0, [r4, #4]
 800ff3c:	aa06      	add	r2, sp, #24
 800ff3e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800ff42:	3010      	adds	r0, #16
 800ff44:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ff48:	f7ff fdd4 	bl	800faf4 <rcl_action_send_cancel_response>
 800ff4c:	b010      	add	sp, #64	; 0x40
 800ff4e:	bd10      	pop	{r4, pc}
 800ff50:	200b      	movs	r0, #11
 800ff52:	4770      	bx	lr
 800ff54:	f3af 8000 	nop.w
 800ff58:	00000001 	.word	0x00000001
 800ff5c:	00000001 	.word	0x00000001

0800ff60 <rclc_action_server_goal_cancel_reject>:
 800ff60:	b082      	sub	sp, #8
 800ff62:	b530      	push	{r4, r5, lr}
 800ff64:	b08b      	sub	sp, #44	; 0x2c
 800ff66:	ac0e      	add	r4, sp, #56	; 0x38
 800ff68:	e884 000c 	stmia.w	r4, {r2, r3}
 800ff6c:	b188      	cbz	r0, 800ff92 <rclc_action_server_goal_cancel_reject+0x32>
 800ff6e:	4604      	mov	r4, r0
 800ff70:	a801      	add	r0, sp, #4
 800ff72:	460d      	mov	r5, r1
 800ff74:	f7ff fece 	bl	800fd14 <rcl_action_get_zero_initialized_cancel_response>
 800ff78:	aa01      	add	r2, sp, #4
 800ff7a:	a90e      	add	r1, sp, #56	; 0x38
 800ff7c:	f104 0010 	add.w	r0, r4, #16
 800ff80:	f88d 5004 	strb.w	r5, [sp, #4]
 800ff84:	f7ff fdb6 	bl	800faf4 <rcl_action_send_cancel_response>
 800ff88:	b00b      	add	sp, #44	; 0x2c
 800ff8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff8e:	b002      	add	sp, #8
 800ff90:	4770      	bx	lr
 800ff92:	200b      	movs	r0, #11
 800ff94:	b00b      	add	sp, #44	; 0x2c
 800ff96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff9a:	b002      	add	sp, #8
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop

0800ffa0 <__atomic_load_8>:
 800ffa0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ffa4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800ffa8:	4a15      	ldr	r2, [pc, #84]	; (8010000 <__atomic_load_8+0x60>)
 800ffaa:	4b16      	ldr	r3, [pc, #88]	; (8010004 <__atomic_load_8+0x64>)
 800ffac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ffb0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ffb4:	fb02 f101 	mul.w	r1, r2, r1
 800ffb8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ffbc:	fba3 2301 	umull	r2, r3, r3, r1
 800ffc0:	091b      	lsrs	r3, r3, #4
 800ffc2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ffc6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800ffca:	b4d0      	push	{r4, r6, r7}
 800ffcc:	4c0e      	ldr	r4, [pc, #56]	; (8010008 <__atomic_load_8+0x68>)
 800ffce:	1ac9      	subs	r1, r1, r3
 800ffd0:	1862      	adds	r2, r4, r1
 800ffd2:	f04f 0c01 	mov.w	ip, #1
 800ffd6:	e8d2 3f4f 	ldrexb	r3, [r2]
 800ffda:	e8c2 cf46 	strexb	r6, ip, [r2]
 800ffde:	2e00      	cmp	r6, #0
 800ffe0:	d1f9      	bne.n	800ffd6 <__atomic_load_8+0x36>
 800ffe2:	f3bf 8f5b 	dmb	ish
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1f4      	bne.n	800ffd6 <__atomic_load_8+0x36>
 800ffec:	e9d0 6700 	ldrd	r6, r7, [r0]
 800fff0:	f3bf 8f5b 	dmb	ish
 800fff4:	5463      	strb	r3, [r4, r1]
 800fff6:	4630      	mov	r0, r6
 800fff8:	4639      	mov	r1, r7
 800fffa:	bcd0      	pop	{r4, r6, r7}
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	27d4eb2d 	.word	0x27d4eb2d
 8010004:	b21642c9 	.word	0xb21642c9
 8010008:	20012918 	.word	0x20012918

0801000c <__atomic_store_8>:
 801000c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010010:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801001a:	4c14      	ldr	r4, [pc, #80]	; (801006c <__atomic_store_8+0x60>)
 801001c:	4d14      	ldr	r5, [pc, #80]	; (8010070 <__atomic_store_8+0x64>)
 801001e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010022:	fb04 f101 	mul.w	r1, r4, r1
 8010026:	4c13      	ldr	r4, [pc, #76]	; (8010074 <__atomic_store_8+0x68>)
 8010028:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801002c:	fba4 4e01 	umull	r4, lr, r4, r1
 8010030:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8010034:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8010038:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801003c:	eba1 0e0e 	sub.w	lr, r1, lr
 8010040:	eb05 0c0e 	add.w	ip, r5, lr
 8010044:	f04f 0401 	mov.w	r4, #1
 8010048:	e8dc 1f4f 	ldrexb	r1, [ip]
 801004c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8010050:	2e00      	cmp	r6, #0
 8010052:	d1f9      	bne.n	8010048 <__atomic_store_8+0x3c>
 8010054:	f3bf 8f5b 	dmb	ish
 8010058:	b2c9      	uxtb	r1, r1
 801005a:	2900      	cmp	r1, #0
 801005c:	d1f4      	bne.n	8010048 <__atomic_store_8+0x3c>
 801005e:	e9c0 2300 	strd	r2, r3, [r0]
 8010062:	f3bf 8f5b 	dmb	ish
 8010066:	f805 100e 	strb.w	r1, [r5, lr]
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	27d4eb2d 	.word	0x27d4eb2d
 8010070:	20012918 	.word	0x20012918
 8010074:	b21642c9 	.word	0xb21642c9

08010078 <__atomic_exchange_8>:
 8010078:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801007c:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8010080:	4916      	ldr	r1, [pc, #88]	; (80100dc <__atomic_exchange_8+0x64>)
 8010082:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8010086:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801008a:	fb01 fc0c 	mul.w	ip, r1, ip
 801008e:	4914      	ldr	r1, [pc, #80]	; (80100e0 <__atomic_exchange_8+0x68>)
 8010090:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8010094:	b570      	push	{r4, r5, r6, lr}
 8010096:	4605      	mov	r5, r0
 8010098:	fba1 010c 	umull	r0, r1, r1, ip
 801009c:	0909      	lsrs	r1, r1, #4
 801009e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80100a2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80100a6:	4e0f      	ldr	r6, [pc, #60]	; (80100e4 <__atomic_exchange_8+0x6c>)
 80100a8:	ebac 0c01 	sub.w	ip, ip, r1
 80100ac:	eb06 010c 	add.w	r1, r6, ip
 80100b0:	f04f 0e01 	mov.w	lr, #1
 80100b4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80100b8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80100bc:	2800      	cmp	r0, #0
 80100be:	d1f9      	bne.n	80100b4 <__atomic_exchange_8+0x3c>
 80100c0:	f3bf 8f5b 	dmb	ish
 80100c4:	b2e4      	uxtb	r4, r4
 80100c6:	2c00      	cmp	r4, #0
 80100c8:	d1f4      	bne.n	80100b4 <__atomic_exchange_8+0x3c>
 80100ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80100ce:	e9c5 2300 	strd	r2, r3, [r5]
 80100d2:	f3bf 8f5b 	dmb	ish
 80100d6:	f806 400c 	strb.w	r4, [r6, ip]
 80100da:	bd70      	pop	{r4, r5, r6, pc}
 80100dc:	27d4eb2d 	.word	0x27d4eb2d
 80100e0:	b21642c9 	.word	0xb21642c9
 80100e4:	20012918 	.word	0x20012918

080100e8 <rcutils_get_env>:
 80100e8:	b168      	cbz	r0, 8010106 <rcutils_get_env+0x1e>
 80100ea:	b510      	push	{r4, lr}
 80100ec:	460c      	mov	r4, r1
 80100ee:	b129      	cbz	r1, 80100fc <rcutils_get_env+0x14>
 80100f0:	f004 f830 	bl	8014154 <getenv>
 80100f4:	b120      	cbz	r0, 8010100 <rcutils_get_env+0x18>
 80100f6:	6020      	str	r0, [r4, #0]
 80100f8:	2000      	movs	r0, #0
 80100fa:	bd10      	pop	{r4, pc}
 80100fc:	4803      	ldr	r0, [pc, #12]	; (801010c <rcutils_get_env+0x24>)
 80100fe:	bd10      	pop	{r4, pc}
 8010100:	4b03      	ldr	r3, [pc, #12]	; (8010110 <rcutils_get_env+0x28>)
 8010102:	6023      	str	r3, [r4, #0]
 8010104:	bd10      	pop	{r4, pc}
 8010106:	4803      	ldr	r0, [pc, #12]	; (8010114 <rcutils_get_env+0x2c>)
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	08015fc0 	.word	0x08015fc0
 8010110:	080160e4 	.word	0x080160e4
 8010114:	08015fa4 	.word	0x08015fa4

08010118 <rcutils_is_directory>:
 8010118:	2000      	movs	r0, #0
 801011a:	4770      	bx	lr

0801011c <rcutils_join_path>:
 801011c:	b082      	sub	sp, #8
 801011e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010122:	2000      	movs	r0, #0
 8010124:	b002      	add	sp, #8
 8010126:	4770      	bx	lr

08010128 <rcutils_to_native_path>:
 8010128:	b084      	sub	sp, #16
 801012a:	a801      	add	r0, sp, #4
 801012c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010130:	b004      	add	sp, #16
 8010132:	2000      	movs	r0, #0
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop

08010138 <rcutils_format_string_limit>:
 8010138:	b40f      	push	{r0, r1, r2, r3}
 801013a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801013c:	b083      	sub	sp, #12
 801013e:	ac08      	add	r4, sp, #32
 8010140:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010146:	b34e      	cbz	r6, 801019c <rcutils_format_string_limit+0x64>
 8010148:	a808      	add	r0, sp, #32
 801014a:	f7f8 fb91 	bl	8008870 <rcutils_allocator_is_valid>
 801014e:	b328      	cbz	r0, 801019c <rcutils_format_string_limit+0x64>
 8010150:	2100      	movs	r1, #0
 8010152:	ab0f      	add	r3, sp, #60	; 0x3c
 8010154:	4632      	mov	r2, r6
 8010156:	4608      	mov	r0, r1
 8010158:	e9cd 3300 	strd	r3, r3, [sp]
 801015c:	f000 f8f4 	bl	8010348 <rcutils_vsnprintf>
 8010160:	1c43      	adds	r3, r0, #1
 8010162:	4605      	mov	r5, r0
 8010164:	d01a      	beq.n	801019c <rcutils_format_string_limit+0x64>
 8010166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010168:	990c      	ldr	r1, [sp, #48]	; 0x30
 801016a:	1c47      	adds	r7, r0, #1
 801016c:	429f      	cmp	r7, r3
 801016e:	bf84      	itt	hi
 8010170:	461f      	movhi	r7, r3
 8010172:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8010176:	4638      	mov	r0, r7
 8010178:	9b08      	ldr	r3, [sp, #32]
 801017a:	4798      	blx	r3
 801017c:	4604      	mov	r4, r0
 801017e:	b168      	cbz	r0, 801019c <rcutils_format_string_limit+0x64>
 8010180:	9b01      	ldr	r3, [sp, #4]
 8010182:	4632      	mov	r2, r6
 8010184:	4639      	mov	r1, r7
 8010186:	f000 f8df 	bl	8010348 <rcutils_vsnprintf>
 801018a:	2800      	cmp	r0, #0
 801018c:	db02      	blt.n	8010194 <rcutils_format_string_limit+0x5c>
 801018e:	2300      	movs	r3, #0
 8010190:	5563      	strb	r3, [r4, r5]
 8010192:	e004      	b.n	801019e <rcutils_format_string_limit+0x66>
 8010194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010196:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010198:	4620      	mov	r0, r4
 801019a:	4798      	blx	r3
 801019c:	2400      	movs	r4, #0
 801019e:	4620      	mov	r0, r4
 80101a0:	b003      	add	sp, #12
 80101a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80101a6:	b004      	add	sp, #16
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop

080101ac <rcutils_repl_str>:
 80101ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b0:	ed2d 8b02 	vpush	{d8}
 80101b4:	b087      	sub	sp, #28
 80101b6:	4680      	mov	r8, r0
 80101b8:	4608      	mov	r0, r1
 80101ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80101be:	ee08 2a10 	vmov	s16, r2
 80101c2:	468a      	mov	sl, r1
 80101c4:	4699      	mov	r9, r3
 80101c6:	f7f0 f815 	bl	80001f4 <strlen>
 80101ca:	2600      	movs	r6, #0
 80101cc:	4647      	mov	r7, r8
 80101ce:	9002      	str	r0, [sp, #8]
 80101d0:	46b3      	mov	fp, r6
 80101d2:	2510      	movs	r5, #16
 80101d4:	46b0      	mov	r8, r6
 80101d6:	e01d      	b.n	8010214 <rcutils_repl_str+0x68>
 80101d8:	f10b 0b01 	add.w	fp, fp, #1
 80101dc:	455e      	cmp	r6, fp
 80101de:	d211      	bcs.n	8010204 <rcutils_repl_str+0x58>
 80101e0:	442e      	add	r6, r5
 80101e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80101e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80101ea:	00b1      	lsls	r1, r6, #2
 80101ec:	4798      	blx	r3
 80101ee:	2800      	cmp	r0, #0
 80101f0:	f000 8088 	beq.w	8010304 <rcutils_repl_str+0x158>
 80101f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101f8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80101fc:	4680      	mov	r8, r0
 80101fe:	bf28      	it	cs
 8010200:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8010204:	9a01      	ldr	r2, [sp, #4]
 8010206:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801020a:	1aa2      	subs	r2, r4, r2
 801020c:	f843 2c04 	str.w	r2, [r3, #-4]
 8010210:	9b02      	ldr	r3, [sp, #8]
 8010212:	18e7      	adds	r7, r4, r3
 8010214:	4651      	mov	r1, sl
 8010216:	4638      	mov	r0, r7
 8010218:	f004 fb95 	bl	8014946 <strstr>
 801021c:	4604      	mov	r4, r0
 801021e:	4640      	mov	r0, r8
 8010220:	2c00      	cmp	r4, #0
 8010222:	d1d9      	bne.n	80101d8 <rcutils_repl_str+0x2c>
 8010224:	46b8      	mov	r8, r7
 8010226:	4607      	mov	r7, r0
 8010228:	4640      	mov	r0, r8
 801022a:	f7ef ffe3 	bl	80001f4 <strlen>
 801022e:	9b01      	ldr	r3, [sp, #4]
 8010230:	eba8 0303 	sub.w	r3, r8, r3
 8010234:	181c      	adds	r4, r3, r0
 8010236:	9404      	str	r4, [sp, #16]
 8010238:	f1bb 0f00 	cmp.w	fp, #0
 801023c:	d04a      	beq.n	80102d4 <rcutils_repl_str+0x128>
 801023e:	ee18 0a10 	vmov	r0, s16
 8010242:	f7ef ffd7 	bl	80001f4 <strlen>
 8010246:	9b02      	ldr	r3, [sp, #8]
 8010248:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801024c:	1ac3      	subs	r3, r0, r3
 801024e:	fb0b 4303 	mla	r3, fp, r3, r4
 8010252:	461a      	mov	r2, r3
 8010254:	9305      	str	r3, [sp, #20]
 8010256:	4606      	mov	r6, r0
 8010258:	f8d9 3000 	ldr.w	r3, [r9]
 801025c:	1c50      	adds	r0, r2, #1
 801025e:	4798      	blx	r3
 8010260:	9003      	str	r0, [sp, #12]
 8010262:	2800      	cmp	r0, #0
 8010264:	d04f      	beq.n	8010306 <rcutils_repl_str+0x15a>
 8010266:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801026a:	683a      	ldr	r2, [r7, #0]
 801026c:	4641      	mov	r1, r8
 801026e:	f004 fc0c 	bl	8014a8a <memcpy>
 8010272:	683d      	ldr	r5, [r7, #0]
 8010274:	9b03      	ldr	r3, [sp, #12]
 8010276:	9701      	str	r7, [sp, #4]
 8010278:	46ba      	mov	sl, r7
 801027a:	441d      	add	r5, r3
 801027c:	9f02      	ldr	r7, [sp, #8]
 801027e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010282:	2401      	movs	r4, #1
 8010284:	46d1      	mov	r9, sl
 8010286:	ee18 aa10 	vmov	sl, s16
 801028a:	e00a      	b.n	80102a2 <rcutils_repl_str+0xf6>
 801028c:	f8d9 5000 	ldr.w	r5, [r9]
 8010290:	1aaa      	subs	r2, r5, r2
 8010292:	1885      	adds	r5, r0, r2
 8010294:	f004 fbf9 	bl	8014a8a <memcpy>
 8010298:	45a3      	cmp	fp, r4
 801029a:	f104 0201 	add.w	r2, r4, #1
 801029e:	d935      	bls.n	801030c <rcutils_repl_str+0x160>
 80102a0:	4614      	mov	r4, r2
 80102a2:	4632      	mov	r2, r6
 80102a4:	4651      	mov	r1, sl
 80102a6:	4628      	mov	r0, r5
 80102a8:	f004 fbef 	bl	8014a8a <memcpy>
 80102ac:	f859 2b04 	ldr.w	r2, [r9], #4
 80102b0:	45a3      	cmp	fp, r4
 80102b2:	443a      	add	r2, r7
 80102b4:	eb05 0006 	add.w	r0, r5, r6
 80102b8:	eb08 0102 	add.w	r1, r8, r2
 80102bc:	d1e6      	bne.n	801028c <rcutils_repl_str+0xe0>
 80102be:	9b04      	ldr	r3, [sp, #16]
 80102c0:	1a9a      	subs	r2, r3, r2
 80102c2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80102c6:	f004 fbe0 	bl	8014a8a <memcpy>
 80102ca:	9a03      	ldr	r2, [sp, #12]
 80102cc:	9905      	ldr	r1, [sp, #20]
 80102ce:	2300      	movs	r3, #0
 80102d0:	5453      	strb	r3, [r2, r1]
 80102d2:	e00b      	b.n	80102ec <rcutils_repl_str+0x140>
 80102d4:	4620      	mov	r0, r4
 80102d6:	f8d9 3000 	ldr.w	r3, [r9]
 80102da:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80102de:	3001      	adds	r0, #1
 80102e0:	4798      	blx	r3
 80102e2:	9003      	str	r0, [sp, #12]
 80102e4:	b110      	cbz	r0, 80102ec <rcutils_repl_str+0x140>
 80102e6:	9901      	ldr	r1, [sp, #4]
 80102e8:	f004 fbc7 	bl	8014a7a <strcpy>
 80102ec:	4638      	mov	r0, r7
 80102ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80102f2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80102f6:	4798      	blx	r3
 80102f8:	9803      	ldr	r0, [sp, #12]
 80102fa:	b007      	add	sp, #28
 80102fc:	ecbd 8b02 	vpop	{d8}
 8010300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010304:	4647      	mov	r7, r8
 8010306:	2300      	movs	r3, #0
 8010308:	9303      	str	r3, [sp, #12]
 801030a:	e7ef      	b.n	80102ec <rcutils_repl_str+0x140>
 801030c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010310:	e7db      	b.n	80102ca <rcutils_repl_str+0x11e>
 8010312:	bf00      	nop

08010314 <rcutils_snprintf>:
 8010314:	b40c      	push	{r2, r3}
 8010316:	b530      	push	{r4, r5, lr}
 8010318:	b083      	sub	sp, #12
 801031a:	ab06      	add	r3, sp, #24
 801031c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010320:	9301      	str	r3, [sp, #4]
 8010322:	b152      	cbz	r2, 801033a <rcutils_snprintf+0x26>
 8010324:	b138      	cbz	r0, 8010336 <rcutils_snprintf+0x22>
 8010326:	b141      	cbz	r1, 801033a <rcutils_snprintf+0x26>
 8010328:	f004 faae 	bl	8014888 <vsniprintf>
 801032c:	b003      	add	sp, #12
 801032e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010332:	b002      	add	sp, #8
 8010334:	4770      	bx	lr
 8010336:	2900      	cmp	r1, #0
 8010338:	d0f6      	beq.n	8010328 <rcutils_snprintf+0x14>
 801033a:	f004 fb71 	bl	8014a20 <__errno>
 801033e:	2316      	movs	r3, #22
 8010340:	6003      	str	r3, [r0, #0]
 8010342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010346:	e7f1      	b.n	801032c <rcutils_snprintf+0x18>

08010348 <rcutils_vsnprintf>:
 8010348:	b570      	push	{r4, r5, r6, lr}
 801034a:	b13a      	cbz	r2, 801035c <rcutils_vsnprintf+0x14>
 801034c:	b120      	cbz	r0, 8010358 <rcutils_vsnprintf+0x10>
 801034e:	b129      	cbz	r1, 801035c <rcutils_vsnprintf+0x14>
 8010350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010354:	f004 ba98 	b.w	8014888 <vsniprintf>
 8010358:	2900      	cmp	r1, #0
 801035a:	d0f9      	beq.n	8010350 <rcutils_vsnprintf+0x8>
 801035c:	f004 fb60 	bl	8014a20 <__errno>
 8010360:	2316      	movs	r3, #22
 8010362:	6003      	str	r3, [r0, #0]
 8010364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010368:	bd70      	pop	{r4, r5, r6, pc}
 801036a:	bf00      	nop

0801036c <rcutils_strdup>:
 801036c:	b084      	sub	sp, #16
 801036e:	b570      	push	{r4, r5, r6, lr}
 8010370:	b082      	sub	sp, #8
 8010372:	ac07      	add	r4, sp, #28
 8010374:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010378:	4605      	mov	r5, r0
 801037a:	b1b0      	cbz	r0, 80103aa <rcutils_strdup+0x3e>
 801037c:	f7ef ff3a 	bl	80001f4 <strlen>
 8010380:	1c42      	adds	r2, r0, #1
 8010382:	9b07      	ldr	r3, [sp, #28]
 8010384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010386:	9201      	str	r2, [sp, #4]
 8010388:	4606      	mov	r6, r0
 801038a:	4610      	mov	r0, r2
 801038c:	4798      	blx	r3
 801038e:	4604      	mov	r4, r0
 8010390:	b128      	cbz	r0, 801039e <rcutils_strdup+0x32>
 8010392:	9a01      	ldr	r2, [sp, #4]
 8010394:	4629      	mov	r1, r5
 8010396:	f004 fb78 	bl	8014a8a <memcpy>
 801039a:	2300      	movs	r3, #0
 801039c:	55a3      	strb	r3, [r4, r6]
 801039e:	4620      	mov	r0, r4
 80103a0:	b002      	add	sp, #8
 80103a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103a6:	b004      	add	sp, #16
 80103a8:	4770      	bx	lr
 80103aa:	4604      	mov	r4, r0
 80103ac:	e7f7      	b.n	801039e <rcutils_strdup+0x32>
 80103ae:	bf00      	nop

080103b0 <rcutils_strndup>:
 80103b0:	b082      	sub	sp, #8
 80103b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b4:	ac06      	add	r4, sp, #24
 80103b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80103ba:	4605      	mov	r5, r0
 80103bc:	b188      	cbz	r0, 80103e2 <rcutils_strndup+0x32>
 80103be:	1c4f      	adds	r7, r1, #1
 80103c0:	460e      	mov	r6, r1
 80103c2:	4638      	mov	r0, r7
 80103c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80103c6:	4790      	blx	r2
 80103c8:	4604      	mov	r4, r0
 80103ca:	b128      	cbz	r0, 80103d8 <rcutils_strndup+0x28>
 80103cc:	463a      	mov	r2, r7
 80103ce:	4629      	mov	r1, r5
 80103d0:	f004 fb5b 	bl	8014a8a <memcpy>
 80103d4:	2300      	movs	r3, #0
 80103d6:	55a3      	strb	r3, [r4, r6]
 80103d8:	4620      	mov	r0, r4
 80103da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80103de:	b002      	add	sp, #8
 80103e0:	4770      	bx	lr
 80103e2:	4604      	mov	r4, r0
 80103e4:	e7f8      	b.n	80103d8 <rcutils_strndup+0x28>
 80103e6:	bf00      	nop

080103e8 <rcutils_get_zero_initialized_string_map>:
 80103e8:	4b01      	ldr	r3, [pc, #4]	; (80103f0 <rcutils_get_zero_initialized_string_map+0x8>)
 80103ea:	2000      	movs	r0, #0
 80103ec:	6018      	str	r0, [r3, #0]
 80103ee:	4770      	bx	lr
 80103f0:	20012930 	.word	0x20012930

080103f4 <rcutils_string_map_reserve>:
 80103f4:	2800      	cmp	r0, #0
 80103f6:	d05f      	beq.n	80104b8 <rcutils_string_map_reserve+0xc4>
 80103f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103fc:	460c      	mov	r4, r1
 80103fe:	6801      	ldr	r1, [r0, #0]
 8010400:	b082      	sub	sp, #8
 8010402:	4605      	mov	r5, r0
 8010404:	b129      	cbz	r1, 8010412 <rcutils_string_map_reserve+0x1e>
 8010406:	68cb      	ldr	r3, [r1, #12]
 8010408:	42a3      	cmp	r3, r4
 801040a:	d906      	bls.n	801041a <rcutils_string_map_reserve+0x26>
 801040c:	461c      	mov	r4, r3
 801040e:	2900      	cmp	r1, #0
 8010410:	d1f9      	bne.n	8010406 <rcutils_string_map_reserve+0x12>
 8010412:	201f      	movs	r0, #31
 8010414:	b002      	add	sp, #8
 8010416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801041a:	688b      	ldr	r3, [r1, #8]
 801041c:	42a3      	cmp	r3, r4
 801041e:	d047      	beq.n	80104b0 <rcutils_string_map_reserve+0xbc>
 8010420:	6a0e      	ldr	r6, [r1, #32]
 8010422:	2c00      	cmp	r4, #0
 8010424:	d034      	beq.n	8010490 <rcutils_string_map_reserve+0x9c>
 8010426:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801042a:	d243      	bcs.n	80104b4 <rcutils_string_map_reserve+0xc0>
 801042c:	00a7      	lsls	r7, r4, #2
 801042e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8010432:	6808      	ldr	r0, [r1, #0]
 8010434:	4632      	mov	r2, r6
 8010436:	4639      	mov	r1, r7
 8010438:	47c0      	blx	r8
 801043a:	2800      	cmp	r0, #0
 801043c:	d03a      	beq.n	80104b4 <rcutils_string_map_reserve+0xc0>
 801043e:	682b      	ldr	r3, [r5, #0]
 8010440:	4632      	mov	r2, r6
 8010442:	6018      	str	r0, [r3, #0]
 8010444:	4639      	mov	r1, r7
 8010446:	6858      	ldr	r0, [r3, #4]
 8010448:	47c0      	blx	r8
 801044a:	2800      	cmp	r0, #0
 801044c:	d032      	beq.n	80104b4 <rcutils_string_map_reserve+0xc0>
 801044e:	682d      	ldr	r5, [r5, #0]
 8010450:	68ab      	ldr	r3, [r5, #8]
 8010452:	6068      	str	r0, [r5, #4]
 8010454:	42a3      	cmp	r3, r4
 8010456:	d226      	bcs.n	80104a6 <rcutils_string_map_reserve+0xb2>
 8010458:	682a      	ldr	r2, [r5, #0]
 801045a:	eb00 0c07 	add.w	ip, r0, r7
 801045e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8010462:	45e6      	cmp	lr, ip
 8010464:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8010468:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801046c:	d203      	bcs.n	8010476 <rcutils_string_map_reserve+0x82>
 801046e:	eb02 0c07 	add.w	ip, r2, r7
 8010472:	4566      	cmp	r6, ip
 8010474:	d322      	bcc.n	80104bc <rcutils_string_map_reserve+0xc8>
 8010476:	1ae3      	subs	r3, r4, r3
 8010478:	009a      	lsls	r2, r3, #2
 801047a:	4670      	mov	r0, lr
 801047c:	2100      	movs	r1, #0
 801047e:	9201      	str	r2, [sp, #4]
 8010480:	f004 fa3a 	bl	80148f8 <memset>
 8010484:	9a01      	ldr	r2, [sp, #4]
 8010486:	2100      	movs	r1, #0
 8010488:	4630      	mov	r0, r6
 801048a:	f004 fa35 	bl	80148f8 <memset>
 801048e:	e00a      	b.n	80104a6 <rcutils_string_map_reserve+0xb2>
 8010490:	694f      	ldr	r7, [r1, #20]
 8010492:	6808      	ldr	r0, [r1, #0]
 8010494:	4631      	mov	r1, r6
 8010496:	47b8      	blx	r7
 8010498:	682b      	ldr	r3, [r5, #0]
 801049a:	4631      	mov	r1, r6
 801049c:	6858      	ldr	r0, [r3, #4]
 801049e:	601c      	str	r4, [r3, #0]
 80104a0:	47b8      	blx	r7
 80104a2:	682d      	ldr	r5, [r5, #0]
 80104a4:	606c      	str	r4, [r5, #4]
 80104a6:	2000      	movs	r0, #0
 80104a8:	60ac      	str	r4, [r5, #8]
 80104aa:	b002      	add	sp, #8
 80104ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b0:	2000      	movs	r0, #0
 80104b2:	e7af      	b.n	8010414 <rcutils_string_map_reserve+0x20>
 80104b4:	200a      	movs	r0, #10
 80104b6:	e7ad      	b.n	8010414 <rcutils_string_map_reserve+0x20>
 80104b8:	200b      	movs	r0, #11
 80104ba:	4770      	bx	lr
 80104bc:	1f0b      	subs	r3, r1, #4
 80104be:	4418      	add	r0, r3
 80104c0:	4413      	add	r3, r2
 80104c2:	3a04      	subs	r2, #4
 80104c4:	4417      	add	r7, r2
 80104c6:	2200      	movs	r2, #0
 80104c8:	f843 2f04 	str.w	r2, [r3, #4]!
 80104cc:	42bb      	cmp	r3, r7
 80104ce:	f840 2f04 	str.w	r2, [r0, #4]!
 80104d2:	d1f9      	bne.n	80104c8 <rcutils_string_map_reserve+0xd4>
 80104d4:	e7e7      	b.n	80104a6 <rcutils_string_map_reserve+0xb2>
 80104d6:	bf00      	nop

080104d8 <rcutils_string_map_init>:
 80104d8:	b082      	sub	sp, #8
 80104da:	b570      	push	{r4, r5, r6, lr}
 80104dc:	ac04      	add	r4, sp, #16
 80104de:	e884 000c 	stmia.w	r4, {r2, r3}
 80104e2:	b380      	cbz	r0, 8010546 <rcutils_string_map_init+0x6e>
 80104e4:	6806      	ldr	r6, [r0, #0]
 80104e6:	4604      	mov	r4, r0
 80104e8:	b12e      	cbz	r6, 80104f6 <rcutils_string_map_init+0x1e>
 80104ea:	251e      	movs	r5, #30
 80104ec:	4628      	mov	r0, r5
 80104ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104f2:	b002      	add	sp, #8
 80104f4:	4770      	bx	lr
 80104f6:	a804      	add	r0, sp, #16
 80104f8:	460d      	mov	r5, r1
 80104fa:	f7f8 f9b9 	bl	8008870 <rcutils_allocator_is_valid>
 80104fe:	b310      	cbz	r0, 8010546 <rcutils_string_map_init+0x6e>
 8010500:	9b04      	ldr	r3, [sp, #16]
 8010502:	9908      	ldr	r1, [sp, #32]
 8010504:	2024      	movs	r0, #36	; 0x24
 8010506:	4798      	blx	r3
 8010508:	6020      	str	r0, [r4, #0]
 801050a:	b310      	cbz	r0, 8010552 <rcutils_string_map_init+0x7a>
 801050c:	f10d 0e10 	add.w	lr, sp, #16
 8010510:	e9c0 6600 	strd	r6, r6, [r0]
 8010514:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8010518:	f100 0c10 	add.w	ip, r0, #16
 801051c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010524:	f8de 3000 	ldr.w	r3, [lr]
 8010528:	f8cc 3000 	str.w	r3, [ip]
 801052c:	4629      	mov	r1, r5
 801052e:	4620      	mov	r0, r4
 8010530:	f7ff ff60 	bl	80103f4 <rcutils_string_map_reserve>
 8010534:	4605      	mov	r5, r0
 8010536:	2800      	cmp	r0, #0
 8010538:	d0d8      	beq.n	80104ec <rcutils_string_map_init+0x14>
 801053a:	9b05      	ldr	r3, [sp, #20]
 801053c:	9908      	ldr	r1, [sp, #32]
 801053e:	6820      	ldr	r0, [r4, #0]
 8010540:	4798      	blx	r3
 8010542:	6026      	str	r6, [r4, #0]
 8010544:	e7d2      	b.n	80104ec <rcutils_string_map_init+0x14>
 8010546:	250b      	movs	r5, #11
 8010548:	4628      	mov	r0, r5
 801054a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801054e:	b002      	add	sp, #8
 8010550:	4770      	bx	lr
 8010552:	250a      	movs	r5, #10
 8010554:	e7ca      	b.n	80104ec <rcutils_string_map_init+0x14>
 8010556:	bf00      	nop

08010558 <rcutils_string_map_fini>:
 8010558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055c:	b082      	sub	sp, #8
 801055e:	2800      	cmp	r0, #0
 8010560:	d03a      	beq.n	80105d8 <rcutils_string_map_fini+0x80>
 8010562:	6804      	ldr	r4, [r0, #0]
 8010564:	4606      	mov	r6, r0
 8010566:	2c00      	cmp	r4, #0
 8010568:	d032      	beq.n	80105d0 <rcutils_string_map_fini+0x78>
 801056a:	68a3      	ldr	r3, [r4, #8]
 801056c:	b32b      	cbz	r3, 80105ba <rcutils_string_map_fini+0x62>
 801056e:	2500      	movs	r5, #0
 8010570:	6822      	ldr	r2, [r4, #0]
 8010572:	462f      	mov	r7, r5
 8010574:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8010578:	b1e0      	cbz	r0, 80105b4 <rcutils_string_map_fini+0x5c>
 801057a:	6a21      	ldr	r1, [r4, #32]
 801057c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8010580:	9101      	str	r1, [sp, #4]
 8010582:	47c0      	blx	r8
 8010584:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010588:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801058c:	9901      	ldr	r1, [sp, #4]
 801058e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010592:	47c0      	blx	r8
 8010594:	68e3      	ldr	r3, [r4, #12]
 8010596:	6862      	ldr	r2, [r4, #4]
 8010598:	3b01      	subs	r3, #1
 801059a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801059e:	60e3      	str	r3, [r4, #12]
 80105a0:	6834      	ldr	r4, [r6, #0]
 80105a2:	68a3      	ldr	r3, [r4, #8]
 80105a4:	3501      	adds	r5, #1
 80105a6:	429d      	cmp	r5, r3
 80105a8:	d207      	bcs.n	80105ba <rcutils_string_map_fini+0x62>
 80105aa:	6822      	ldr	r2, [r4, #0]
 80105ac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d1e2      	bne.n	801057a <rcutils_string_map_fini+0x22>
 80105b4:	3501      	adds	r5, #1
 80105b6:	429d      	cmp	r5, r3
 80105b8:	d3dc      	bcc.n	8010574 <rcutils_string_map_fini+0x1c>
 80105ba:	2100      	movs	r1, #0
 80105bc:	4630      	mov	r0, r6
 80105be:	f7ff ff19 	bl	80103f4 <rcutils_string_map_reserve>
 80105c2:	4604      	mov	r4, r0
 80105c4:	b920      	cbnz	r0, 80105d0 <rcutils_string_map_fini+0x78>
 80105c6:	6830      	ldr	r0, [r6, #0]
 80105c8:	6943      	ldr	r3, [r0, #20]
 80105ca:	6a01      	ldr	r1, [r0, #32]
 80105cc:	4798      	blx	r3
 80105ce:	6034      	str	r4, [r6, #0]
 80105d0:	4620      	mov	r0, r4
 80105d2:	b002      	add	sp, #8
 80105d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d8:	240b      	movs	r4, #11
 80105da:	4620      	mov	r0, r4
 80105dc:	b002      	add	sp, #8
 80105de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e2:	bf00      	nop

080105e4 <rcutils_string_map_getn>:
 80105e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e8:	b300      	cbz	r0, 801062c <rcutils_string_map_getn+0x48>
 80105ea:	6807      	ldr	r7, [r0, #0]
 80105ec:	b1ff      	cbz	r7, 801062e <rcutils_string_map_getn+0x4a>
 80105ee:	4688      	mov	r8, r1
 80105f0:	b1e1      	cbz	r1, 801062c <rcutils_string_map_getn+0x48>
 80105f2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80105f6:	683e      	ldr	r6, [r7, #0]
 80105f8:	f1ba 0f00 	cmp.w	sl, #0
 80105fc:	d016      	beq.n	801062c <rcutils_string_map_getn+0x48>
 80105fe:	4691      	mov	r9, r2
 8010600:	3e04      	subs	r6, #4
 8010602:	2400      	movs	r4, #0
 8010604:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8010608:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801060c:	4628      	mov	r0, r5
 801060e:	3401      	adds	r4, #1
 8010610:	b155      	cbz	r5, 8010628 <rcutils_string_map_getn+0x44>
 8010612:	f7ef fdef 	bl	80001f4 <strlen>
 8010616:	4548      	cmp	r0, r9
 8010618:	4602      	mov	r2, r0
 801061a:	4629      	mov	r1, r5
 801061c:	bf38      	it	cc
 801061e:	464a      	movcc	r2, r9
 8010620:	4640      	mov	r0, r8
 8010622:	f004 f97e 	bl	8014922 <strncmp>
 8010626:	b128      	cbz	r0, 8010634 <rcutils_string_map_getn+0x50>
 8010628:	45a2      	cmp	sl, r4
 801062a:	d1eb      	bne.n	8010604 <rcutils_string_map_getn+0x20>
 801062c:	2700      	movs	r7, #0
 801062e:	4638      	mov	r0, r7
 8010630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f853 700b 	ldr.w	r7, [r3, fp]
 801063a:	4638      	mov	r0, r7
 801063c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010640 <rmw_get_zero_initialized_context>:
 8010640:	b510      	push	{r4, lr}
 8010642:	4604      	mov	r4, r0
 8010644:	3010      	adds	r0, #16
 8010646:	f000 f80b 	bl	8010660 <rmw_get_zero_initialized_init_options>
 801064a:	2300      	movs	r3, #0
 801064c:	2000      	movs	r0, #0
 801064e:	2100      	movs	r1, #0
 8010650:	e9c4 0100 	strd	r0, r1, [r4]
 8010654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010658:	60a3      	str	r3, [r4, #8]
 801065a:	4620      	mov	r0, r4
 801065c:	bd10      	pop	{r4, pc}
 801065e:	bf00      	nop

08010660 <rmw_get_zero_initialized_init_options>:
 8010660:	b510      	push	{r4, lr}
 8010662:	2238      	movs	r2, #56	; 0x38
 8010664:	4604      	mov	r4, r0
 8010666:	2100      	movs	r1, #0
 8010668:	f004 f946 	bl	80148f8 <memset>
 801066c:	f104 0010 	add.w	r0, r4, #16
 8010670:	f000 f806 	bl	8010680 <rmw_get_default_security_options>
 8010674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010678:	60e3      	str	r3, [r4, #12]
 801067a:	4620      	mov	r0, r4
 801067c:	bd10      	pop	{r4, pc}
 801067e:	bf00      	nop

08010680 <rmw_get_default_security_options>:
 8010680:	2200      	movs	r2, #0
 8010682:	7002      	strb	r2, [r0, #0]
 8010684:	6042      	str	r2, [r0, #4]
 8010686:	4770      	bx	lr

08010688 <rmw_subscription_content_filter_options_fini>:
 8010688:	b1b0      	cbz	r0, 80106b8 <rmw_subscription_content_filter_options_fini+0x30>
 801068a:	b538      	push	{r3, r4, r5, lr}
 801068c:	4604      	mov	r4, r0
 801068e:	4608      	mov	r0, r1
 8010690:	460d      	mov	r5, r1
 8010692:	f7f8 f8ed 	bl	8008870 <rcutils_allocator_is_valid>
 8010696:	b168      	cbz	r0, 80106b4 <rmw_subscription_content_filter_options_fini+0x2c>
 8010698:	6820      	ldr	r0, [r4, #0]
 801069a:	b120      	cbz	r0, 80106a6 <rmw_subscription_content_filter_options_fini+0x1e>
 801069c:	686b      	ldr	r3, [r5, #4]
 801069e:	6929      	ldr	r1, [r5, #16]
 80106a0:	4798      	blx	r3
 80106a2:	2300      	movs	r3, #0
 80106a4:	6023      	str	r3, [r4, #0]
 80106a6:	1d20      	adds	r0, r4, #4
 80106a8:	f003 fbfe 	bl	8013ea8 <rcutils_string_array_fini>
 80106ac:	3800      	subs	r0, #0
 80106ae:	bf18      	it	ne
 80106b0:	2001      	movne	r0, #1
 80106b2:	bd38      	pop	{r3, r4, r5, pc}
 80106b4:	200b      	movs	r0, #11
 80106b6:	bd38      	pop	{r3, r4, r5, pc}
 80106b8:	200b      	movs	r0, #11
 80106ba:	4770      	bx	lr

080106bc <rmw_get_default_subscription_options>:
 80106bc:	2200      	movs	r2, #0
 80106be:	e9c0 2200 	strd	r2, r2, [r0]
 80106c2:	6082      	str	r2, [r0, #8]
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop

080106c8 <rmw_time_equal>:
 80106c8:	b4f0      	push	{r4, r5, r6, r7}
 80106ca:	b084      	sub	sp, #16
 80106cc:	ac04      	add	r4, sp, #16
 80106ce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80106d2:	4603      	mov	r3, r0
 80106d4:	4924      	ldr	r1, [pc, #144]	; (8010768 <rmw_time_equal+0xa0>)
 80106d6:	9e03      	ldr	r6, [sp, #12]
 80106d8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80106dc:	2202      	movs	r2, #2
 80106de:	4299      	cmp	r1, r3
 80106e0:	41aa      	sbcs	r2, r5
 80106e2:	d330      	bcc.n	8010746 <rmw_time_equal+0x7e>
 80106e4:	4c21      	ldr	r4, [pc, #132]	; (801076c <rmw_time_equal+0xa4>)
 80106e6:	fba3 3204 	umull	r3, r2, r3, r4
 80106ea:	fb04 2205 	mla	r2, r4, r5, r2
 80106ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106f2:	43dd      	mvns	r5, r3
 80106f4:	1a8c      	subs	r4, r1, r2
 80106f6:	4285      	cmp	r5, r0
 80106f8:	41b4      	sbcs	r4, r6
 80106fa:	d332      	bcc.n	8010762 <rmw_time_equal+0x9a>
 80106fc:	eb10 0c03 	adds.w	ip, r0, r3
 8010700:	eb42 0106 	adc.w	r1, r2, r6
 8010704:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8010708:	4817      	ldr	r0, [pc, #92]	; (8010768 <rmw_time_equal+0xa0>)
 801070a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801070c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801070e:	2202      	movs	r2, #2
 8010710:	4298      	cmp	r0, r3
 8010712:	41b2      	sbcs	r2, r6
 8010714:	d31c      	bcc.n	8010750 <rmw_time_equal+0x88>
 8010716:	4c15      	ldr	r4, [pc, #84]	; (801076c <rmw_time_equal+0xa4>)
 8010718:	fba3 3204 	umull	r3, r2, r3, r4
 801071c:	fb04 2206 	mla	r2, r4, r6, r2
 8010720:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010724:	43de      	mvns	r6, r3
 8010726:	1a84      	subs	r4, r0, r2
 8010728:	42ae      	cmp	r6, r5
 801072a:	41bc      	sbcs	r4, r7
 801072c:	d315      	bcc.n	801075a <rmw_time_equal+0x92>
 801072e:	195b      	adds	r3, r3, r5
 8010730:	eb42 0207 	adc.w	r2, r2, r7
 8010734:	428a      	cmp	r2, r1
 8010736:	bf08      	it	eq
 8010738:	4563      	cmpeq	r3, ip
 801073a:	bf0c      	ite	eq
 801073c:	2001      	moveq	r0, #1
 801073e:	2000      	movne	r0, #0
 8010740:	b004      	add	sp, #16
 8010742:	bcf0      	pop	{r4, r5, r6, r7}
 8010744:	4770      	bx	lr
 8010746:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801074a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801074e:	e7d9      	b.n	8010704 <rmw_time_equal+0x3c>
 8010750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010754:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010758:	e7ec      	b.n	8010734 <rmw_time_equal+0x6c>
 801075a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801075e:	4602      	mov	r2, r0
 8010760:	e7e8      	b.n	8010734 <rmw_time_equal+0x6c>
 8010762:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010766:	e7cd      	b.n	8010704 <rmw_time_equal+0x3c>
 8010768:	25c17d04 	.word	0x25c17d04
 801076c:	3b9aca00 	.word	0x3b9aca00

08010770 <rmw_time_total_nsec>:
 8010770:	b470      	push	{r4, r5, r6}
 8010772:	b085      	sub	sp, #20
 8010774:	ac04      	add	r4, sp, #16
 8010776:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801077a:	4603      	mov	r3, r0
 801077c:	4912      	ldr	r1, [pc, #72]	; (80107c8 <rmw_time_total_nsec+0x58>)
 801077e:	9e03      	ldr	r6, [sp, #12]
 8010780:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8010784:	2202      	movs	r2, #2
 8010786:	4299      	cmp	r1, r3
 8010788:	41aa      	sbcs	r2, r5
 801078a:	d311      	bcc.n	80107b0 <rmw_time_total_nsec+0x40>
 801078c:	4c0f      	ldr	r4, [pc, #60]	; (80107cc <rmw_time_total_nsec+0x5c>)
 801078e:	fba3 3204 	umull	r3, r2, r3, r4
 8010792:	fb04 2205 	mla	r2, r4, r5, r2
 8010796:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801079a:	43dd      	mvns	r5, r3
 801079c:	1a8c      	subs	r4, r1, r2
 801079e:	4285      	cmp	r5, r0
 80107a0:	41b4      	sbcs	r4, r6
 80107a2:	d30c      	bcc.n	80107be <rmw_time_total_nsec+0x4e>
 80107a4:	1818      	adds	r0, r3, r0
 80107a6:	eb42 0106 	adc.w	r1, r2, r6
 80107aa:	b005      	add	sp, #20
 80107ac:	bc70      	pop	{r4, r5, r6}
 80107ae:	4770      	bx	lr
 80107b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80107b8:	b005      	add	sp, #20
 80107ba:	bc70      	pop	{r4, r5, r6}
 80107bc:	4770      	bx	lr
 80107be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107c2:	b005      	add	sp, #20
 80107c4:	bc70      	pop	{r4, r5, r6}
 80107c6:	4770      	bx	lr
 80107c8:	25c17d04 	.word	0x25c17d04
 80107cc:	3b9aca00 	.word	0x3b9aca00

080107d0 <rmw_get_zero_initialized_message_info>:
 80107d0:	b510      	push	{r4, lr}
 80107d2:	2240      	movs	r2, #64	; 0x40
 80107d4:	4604      	mov	r4, r0
 80107d6:	2100      	movs	r1, #0
 80107d8:	f004 f88e 	bl	80148f8 <memset>
 80107dc:	4620      	mov	r0, r4
 80107de:	bd10      	pop	{r4, pc}

080107e0 <rmw_validate_full_topic_name>:
 80107e0:	2800      	cmp	r0, #0
 80107e2:	d057      	beq.n	8010894 <rmw_validate_full_topic_name+0xb4>
 80107e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107e8:	460d      	mov	r5, r1
 80107ea:	2900      	cmp	r1, #0
 80107ec:	d054      	beq.n	8010898 <rmw_validate_full_topic_name+0xb8>
 80107ee:	4616      	mov	r6, r2
 80107f0:	4604      	mov	r4, r0
 80107f2:	f7ef fcff 	bl	80001f4 <strlen>
 80107f6:	b148      	cbz	r0, 801080c <rmw_validate_full_topic_name+0x2c>
 80107f8:	7823      	ldrb	r3, [r4, #0]
 80107fa:	2b2f      	cmp	r3, #47	; 0x2f
 80107fc:	d00d      	beq.n	801081a <rmw_validate_full_topic_name+0x3a>
 80107fe:	2302      	movs	r3, #2
 8010800:	602b      	str	r3, [r5, #0]
 8010802:	b13e      	cbz	r6, 8010814 <rmw_validate_full_topic_name+0x34>
 8010804:	2000      	movs	r0, #0
 8010806:	6030      	str	r0, [r6, #0]
 8010808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080c:	2301      	movs	r3, #1
 801080e:	602b      	str	r3, [r5, #0]
 8010810:	2e00      	cmp	r6, #0
 8010812:	d1f7      	bne.n	8010804 <rmw_validate_full_topic_name+0x24>
 8010814:	2000      	movs	r0, #0
 8010816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081a:	1e43      	subs	r3, r0, #1
 801081c:	5ce2      	ldrb	r2, [r4, r3]
 801081e:	2a2f      	cmp	r2, #47	; 0x2f
 8010820:	d03c      	beq.n	801089c <rmw_validate_full_topic_name+0xbc>
 8010822:	1e63      	subs	r3, r4, #1
 8010824:	eb03 0800 	add.w	r8, r3, r0
 8010828:	f1c4 0e01 	rsb	lr, r4, #1
 801082c:	eb0e 0703 	add.w	r7, lr, r3
 8010830:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010834:	f021 0220 	bic.w	r2, r1, #32
 8010838:	3a41      	subs	r2, #65	; 0x41
 801083a:	2a19      	cmp	r2, #25
 801083c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8010840:	d90b      	bls.n	801085a <rmw_validate_full_topic_name+0x7a>
 8010842:	295f      	cmp	r1, #95	; 0x5f
 8010844:	d009      	beq.n	801085a <rmw_validate_full_topic_name+0x7a>
 8010846:	f1bc 0f0a 	cmp.w	ip, #10
 801084a:	d906      	bls.n	801085a <rmw_validate_full_topic_name+0x7a>
 801084c:	2304      	movs	r3, #4
 801084e:	602b      	str	r3, [r5, #0]
 8010850:	2e00      	cmp	r6, #0
 8010852:	d0df      	beq.n	8010814 <rmw_validate_full_topic_name+0x34>
 8010854:	6037      	str	r7, [r6, #0]
 8010856:	2000      	movs	r0, #0
 8010858:	e7d6      	b.n	8010808 <rmw_validate_full_topic_name+0x28>
 801085a:	4543      	cmp	r3, r8
 801085c:	d1e6      	bne.n	801082c <rmw_validate_full_topic_name+0x4c>
 801085e:	4f1a      	ldr	r7, [pc, #104]	; (80108c8 <rmw_validate_full_topic_name+0xe8>)
 8010860:	2301      	movs	r3, #1
 8010862:	e004      	b.n	801086e <rmw_validate_full_topic_name+0x8e>
 8010864:	4298      	cmp	r0, r3
 8010866:	f104 0401 	add.w	r4, r4, #1
 801086a:	d91c      	bls.n	80108a6 <rmw_validate_full_topic_name+0xc6>
 801086c:	4613      	mov	r3, r2
 801086e:	4298      	cmp	r0, r3
 8010870:	f103 0201 	add.w	r2, r3, #1
 8010874:	d0f6      	beq.n	8010864 <rmw_validate_full_topic_name+0x84>
 8010876:	7821      	ldrb	r1, [r4, #0]
 8010878:	292f      	cmp	r1, #47	; 0x2f
 801087a:	d1f3      	bne.n	8010864 <rmw_validate_full_topic_name+0x84>
 801087c:	7861      	ldrb	r1, [r4, #1]
 801087e:	292f      	cmp	r1, #47	; 0x2f
 8010880:	d01c      	beq.n	80108bc <rmw_validate_full_topic_name+0xdc>
 8010882:	5dc9      	ldrb	r1, [r1, r7]
 8010884:	0749      	lsls	r1, r1, #29
 8010886:	d5ed      	bpl.n	8010864 <rmw_validate_full_topic_name+0x84>
 8010888:	2206      	movs	r2, #6
 801088a:	602a      	str	r2, [r5, #0]
 801088c:	2e00      	cmp	r6, #0
 801088e:	d0c1      	beq.n	8010814 <rmw_validate_full_topic_name+0x34>
 8010890:	6033      	str	r3, [r6, #0]
 8010892:	e7bf      	b.n	8010814 <rmw_validate_full_topic_name+0x34>
 8010894:	200b      	movs	r0, #11
 8010896:	4770      	bx	lr
 8010898:	200b      	movs	r0, #11
 801089a:	e7b5      	b.n	8010808 <rmw_validate_full_topic_name+0x28>
 801089c:	2203      	movs	r2, #3
 801089e:	602a      	str	r2, [r5, #0]
 80108a0:	2e00      	cmp	r6, #0
 80108a2:	d1f5      	bne.n	8010890 <rmw_validate_full_topic_name+0xb0>
 80108a4:	e7b6      	b.n	8010814 <rmw_validate_full_topic_name+0x34>
 80108a6:	28f7      	cmp	r0, #247	; 0xf7
 80108a8:	d802      	bhi.n	80108b0 <rmw_validate_full_topic_name+0xd0>
 80108aa:	2000      	movs	r0, #0
 80108ac:	6028      	str	r0, [r5, #0]
 80108ae:	e7ab      	b.n	8010808 <rmw_validate_full_topic_name+0x28>
 80108b0:	2307      	movs	r3, #7
 80108b2:	602b      	str	r3, [r5, #0]
 80108b4:	2e00      	cmp	r6, #0
 80108b6:	d0ad      	beq.n	8010814 <rmw_validate_full_topic_name+0x34>
 80108b8:	23f6      	movs	r3, #246	; 0xf6
 80108ba:	e7e9      	b.n	8010890 <rmw_validate_full_topic_name+0xb0>
 80108bc:	2205      	movs	r2, #5
 80108be:	602a      	str	r2, [r5, #0]
 80108c0:	2e00      	cmp	r6, #0
 80108c2:	d1e5      	bne.n	8010890 <rmw_validate_full_topic_name+0xb0>
 80108c4:	e7a6      	b.n	8010814 <rmw_validate_full_topic_name+0x34>
 80108c6:	bf00      	nop
 80108c8:	080165d4 	.word	0x080165d4

080108cc <rmw_validate_namespace_with_size>:
 80108cc:	b340      	cbz	r0, 8010920 <rmw_validate_namespace_with_size+0x54>
 80108ce:	b570      	push	{r4, r5, r6, lr}
 80108d0:	4614      	mov	r4, r2
 80108d2:	b0c2      	sub	sp, #264	; 0x108
 80108d4:	b332      	cbz	r2, 8010924 <rmw_validate_namespace_with_size+0x58>
 80108d6:	2901      	cmp	r1, #1
 80108d8:	460d      	mov	r5, r1
 80108da:	461e      	mov	r6, r3
 80108dc:	d102      	bne.n	80108e4 <rmw_validate_namespace_with_size+0x18>
 80108de:	7803      	ldrb	r3, [r0, #0]
 80108e0:	2b2f      	cmp	r3, #47	; 0x2f
 80108e2:	d012      	beq.n	801090a <rmw_validate_namespace_with_size+0x3e>
 80108e4:	aa01      	add	r2, sp, #4
 80108e6:	4669      	mov	r1, sp
 80108e8:	f7ff ff7a 	bl	80107e0 <rmw_validate_full_topic_name>
 80108ec:	b978      	cbnz	r0, 801090e <rmw_validate_namespace_with_size+0x42>
 80108ee:	9b00      	ldr	r3, [sp, #0]
 80108f0:	b14b      	cbz	r3, 8010906 <rmw_validate_namespace_with_size+0x3a>
 80108f2:	2b07      	cmp	r3, #7
 80108f4:	d007      	beq.n	8010906 <rmw_validate_namespace_with_size+0x3a>
 80108f6:	1e5a      	subs	r2, r3, #1
 80108f8:	2a05      	cmp	r2, #5
 80108fa:	d82b      	bhi.n	8010954 <rmw_validate_namespace_with_size+0x88>
 80108fc:	e8df f002 	tbb	[pc, r2]
 8010900:	1e212427 	.word	0x1e212427
 8010904:	141b      	.short	0x141b
 8010906:	2df5      	cmp	r5, #245	; 0xf5
 8010908:	d803      	bhi.n	8010912 <rmw_validate_namespace_with_size+0x46>
 801090a:	2000      	movs	r0, #0
 801090c:	6020      	str	r0, [r4, #0]
 801090e:	b042      	add	sp, #264	; 0x108
 8010910:	bd70      	pop	{r4, r5, r6, pc}
 8010912:	2307      	movs	r3, #7
 8010914:	6023      	str	r3, [r4, #0]
 8010916:	2e00      	cmp	r6, #0
 8010918:	d0f9      	beq.n	801090e <rmw_validate_namespace_with_size+0x42>
 801091a:	23f4      	movs	r3, #244	; 0xf4
 801091c:	6033      	str	r3, [r6, #0]
 801091e:	e7f6      	b.n	801090e <rmw_validate_namespace_with_size+0x42>
 8010920:	200b      	movs	r0, #11
 8010922:	4770      	bx	lr
 8010924:	200b      	movs	r0, #11
 8010926:	e7f2      	b.n	801090e <rmw_validate_namespace_with_size+0x42>
 8010928:	2306      	movs	r3, #6
 801092a:	6023      	str	r3, [r4, #0]
 801092c:	2e00      	cmp	r6, #0
 801092e:	d0ee      	beq.n	801090e <rmw_validate_namespace_with_size+0x42>
 8010930:	9b01      	ldr	r3, [sp, #4]
 8010932:	6033      	str	r3, [r6, #0]
 8010934:	e7eb      	b.n	801090e <rmw_validate_namespace_with_size+0x42>
 8010936:	2305      	movs	r3, #5
 8010938:	6023      	str	r3, [r4, #0]
 801093a:	e7f7      	b.n	801092c <rmw_validate_namespace_with_size+0x60>
 801093c:	2304      	movs	r3, #4
 801093e:	6023      	str	r3, [r4, #0]
 8010940:	e7f4      	b.n	801092c <rmw_validate_namespace_with_size+0x60>
 8010942:	2303      	movs	r3, #3
 8010944:	6023      	str	r3, [r4, #0]
 8010946:	e7f1      	b.n	801092c <rmw_validate_namespace_with_size+0x60>
 8010948:	2302      	movs	r3, #2
 801094a:	6023      	str	r3, [r4, #0]
 801094c:	e7ee      	b.n	801092c <rmw_validate_namespace_with_size+0x60>
 801094e:	2301      	movs	r3, #1
 8010950:	6023      	str	r3, [r4, #0]
 8010952:	e7eb      	b.n	801092c <rmw_validate_namespace_with_size+0x60>
 8010954:	4a03      	ldr	r2, [pc, #12]	; (8010964 <rmw_validate_namespace_with_size+0x98>)
 8010956:	f44f 7180 	mov.w	r1, #256	; 0x100
 801095a:	a802      	add	r0, sp, #8
 801095c:	f7ff fcda 	bl	8010314 <rcutils_snprintf>
 8010960:	2001      	movs	r0, #1
 8010962:	e7d4      	b.n	801090e <rmw_validate_namespace_with_size+0x42>
 8010964:	08015fdc 	.word	0x08015fdc

08010968 <rmw_validate_namespace>:
 8010968:	b168      	cbz	r0, 8010986 <rmw_validate_namespace+0x1e>
 801096a:	b570      	push	{r4, r5, r6, lr}
 801096c:	460d      	mov	r5, r1
 801096e:	4616      	mov	r6, r2
 8010970:	4604      	mov	r4, r0
 8010972:	f7ef fc3f 	bl	80001f4 <strlen>
 8010976:	4633      	mov	r3, r6
 8010978:	4601      	mov	r1, r0
 801097a:	462a      	mov	r2, r5
 801097c:	4620      	mov	r0, r4
 801097e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010982:	f7ff bfa3 	b.w	80108cc <rmw_validate_namespace_with_size>
 8010986:	200b      	movs	r0, #11
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop

0801098c <rmw_namespace_validation_result_string>:
 801098c:	2807      	cmp	r0, #7
 801098e:	bf9a      	itte	ls
 8010990:	4b02      	ldrls	r3, [pc, #8]	; (801099c <rmw_namespace_validation_result_string+0x10>)
 8010992:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010996:	4802      	ldrhi	r0, [pc, #8]	; (80109a0 <rmw_namespace_validation_result_string+0x14>)
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	080161d4 	.word	0x080161d4
 80109a0:	0801602c 	.word	0x0801602c

080109a4 <rmw_validate_node_name>:
 80109a4:	2800      	cmp	r0, #0
 80109a6:	d03b      	beq.n	8010a20 <rmw_validate_node_name+0x7c>
 80109a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ac:	460d      	mov	r5, r1
 80109ae:	2900      	cmp	r1, #0
 80109b0:	d038      	beq.n	8010a24 <rmw_validate_node_name+0x80>
 80109b2:	4616      	mov	r6, r2
 80109b4:	4604      	mov	r4, r0
 80109b6:	f7ef fc1d 	bl	80001f4 <strlen>
 80109ba:	b1e0      	cbz	r0, 80109f6 <rmw_validate_node_name+0x52>
 80109bc:	1e63      	subs	r3, r4, #1
 80109be:	eb03 0800 	add.w	r8, r3, r0
 80109c2:	f1c4 0101 	rsb	r1, r4, #1
 80109c6:	18cf      	adds	r7, r1, r3
 80109c8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80109cc:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80109d0:	f02e 0c20 	bic.w	ip, lr, #32
 80109d4:	2a09      	cmp	r2, #9
 80109d6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80109da:	d914      	bls.n	8010a06 <rmw_validate_node_name+0x62>
 80109dc:	f1bc 0f19 	cmp.w	ip, #25
 80109e0:	d911      	bls.n	8010a06 <rmw_validate_node_name+0x62>
 80109e2:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80109e6:	d00e      	beq.n	8010a06 <rmw_validate_node_name+0x62>
 80109e8:	2302      	movs	r3, #2
 80109ea:	602b      	str	r3, [r5, #0]
 80109ec:	b106      	cbz	r6, 80109f0 <rmw_validate_node_name+0x4c>
 80109ee:	6037      	str	r7, [r6, #0]
 80109f0:	2000      	movs	r0, #0
 80109f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f6:	2301      	movs	r3, #1
 80109f8:	602b      	str	r3, [r5, #0]
 80109fa:	2e00      	cmp	r6, #0
 80109fc:	d0f8      	beq.n	80109f0 <rmw_validate_node_name+0x4c>
 80109fe:	2000      	movs	r0, #0
 8010a00:	6030      	str	r0, [r6, #0]
 8010a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a06:	4543      	cmp	r3, r8
 8010a08:	d1dd      	bne.n	80109c6 <rmw_validate_node_name+0x22>
 8010a0a:	7822      	ldrb	r2, [r4, #0]
 8010a0c:	4b0d      	ldr	r3, [pc, #52]	; (8010a44 <rmw_validate_node_name+0xa0>)
 8010a0e:	5cd3      	ldrb	r3, [r2, r3]
 8010a10:	f013 0304 	ands.w	r3, r3, #4
 8010a14:	d110      	bne.n	8010a38 <rmw_validate_node_name+0x94>
 8010a16:	28ff      	cmp	r0, #255	; 0xff
 8010a18:	d806      	bhi.n	8010a28 <rmw_validate_node_name+0x84>
 8010a1a:	602b      	str	r3, [r5, #0]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	e7e8      	b.n	80109f2 <rmw_validate_node_name+0x4e>
 8010a20:	200b      	movs	r0, #11
 8010a22:	4770      	bx	lr
 8010a24:	200b      	movs	r0, #11
 8010a26:	e7e4      	b.n	80109f2 <rmw_validate_node_name+0x4e>
 8010a28:	2204      	movs	r2, #4
 8010a2a:	602a      	str	r2, [r5, #0]
 8010a2c:	2e00      	cmp	r6, #0
 8010a2e:	d0df      	beq.n	80109f0 <rmw_validate_node_name+0x4c>
 8010a30:	22fe      	movs	r2, #254	; 0xfe
 8010a32:	6032      	str	r2, [r6, #0]
 8010a34:	4618      	mov	r0, r3
 8010a36:	e7dc      	b.n	80109f2 <rmw_validate_node_name+0x4e>
 8010a38:	2303      	movs	r3, #3
 8010a3a:	602b      	str	r3, [r5, #0]
 8010a3c:	2e00      	cmp	r6, #0
 8010a3e:	d1de      	bne.n	80109fe <rmw_validate_node_name+0x5a>
 8010a40:	e7d6      	b.n	80109f0 <rmw_validate_node_name+0x4c>
 8010a42:	bf00      	nop
 8010a44:	080165d4 	.word	0x080165d4

08010a48 <rmw_node_name_validation_result_string>:
 8010a48:	2804      	cmp	r0, #4
 8010a4a:	bf9a      	itte	ls
 8010a4c:	4b02      	ldrls	r3, [pc, #8]	; (8010a58 <rmw_node_name_validation_result_string+0x10>)
 8010a4e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010a52:	4802      	ldrhi	r0, [pc, #8]	; (8010a5c <rmw_node_name_validation_result_string+0x14>)
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	080162e0 	.word	0x080162e0
 8010a5c:	080161f4 	.word	0x080161f4

08010a60 <get_memory>:
 8010a60:	4603      	mov	r3, r0
 8010a62:	6840      	ldr	r0, [r0, #4]
 8010a64:	b158      	cbz	r0, 8010a7e <get_memory+0x1e>
 8010a66:	6842      	ldr	r2, [r0, #4]
 8010a68:	605a      	str	r2, [r3, #4]
 8010a6a:	b10a      	cbz	r2, 8010a70 <get_memory+0x10>
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	6011      	str	r1, [r2, #0]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	6042      	str	r2, [r0, #4]
 8010a74:	b102      	cbz	r2, 8010a78 <get_memory+0x18>
 8010a76:	6010      	str	r0, [r2, #0]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	6002      	str	r2, [r0, #0]
 8010a7c:	6018      	str	r0, [r3, #0]
 8010a7e:	4770      	bx	lr

08010a80 <put_memory>:
 8010a80:	680b      	ldr	r3, [r1, #0]
 8010a82:	b10b      	cbz	r3, 8010a88 <put_memory+0x8>
 8010a84:	684a      	ldr	r2, [r1, #4]
 8010a86:	605a      	str	r2, [r3, #4]
 8010a88:	684a      	ldr	r2, [r1, #4]
 8010a8a:	b102      	cbz	r2, 8010a8e <put_memory+0xe>
 8010a8c:	6013      	str	r3, [r2, #0]
 8010a8e:	6803      	ldr	r3, [r0, #0]
 8010a90:	428b      	cmp	r3, r1
 8010a92:	6843      	ldr	r3, [r0, #4]
 8010a94:	bf08      	it	eq
 8010a96:	6002      	streq	r2, [r0, #0]
 8010a98:	604b      	str	r3, [r1, #4]
 8010a9a:	b103      	cbz	r3, 8010a9e <put_memory+0x1e>
 8010a9c:	6019      	str	r1, [r3, #0]
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	600b      	str	r3, [r1, #0]
 8010aa2:	6041      	str	r1, [r0, #4]
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop

08010aa8 <rmw_destroy_client>:
 8010aa8:	b570      	push	{r4, r5, r6, lr}
 8010aaa:	b128      	cbz	r0, 8010ab8 <rmw_destroy_client+0x10>
 8010aac:	4604      	mov	r4, r0
 8010aae:	6800      	ldr	r0, [r0, #0]
 8010ab0:	460d      	mov	r5, r1
 8010ab2:	f7f8 fc83 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 8010ab6:	b910      	cbnz	r0, 8010abe <rmw_destroy_client+0x16>
 8010ab8:	2401      	movs	r4, #1
 8010aba:	4620      	mov	r0, r4
 8010abc:	bd70      	pop	{r4, r5, r6, pc}
 8010abe:	6863      	ldr	r3, [r4, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d0f9      	beq.n	8010ab8 <rmw_destroy_client+0x10>
 8010ac4:	2d00      	cmp	r5, #0
 8010ac6:	d0f7      	beq.n	8010ab8 <rmw_destroy_client+0x10>
 8010ac8:	6828      	ldr	r0, [r5, #0]
 8010aca:	f7f8 fc77 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d0f2      	beq.n	8010ab8 <rmw_destroy_client+0x10>
 8010ad2:	686e      	ldr	r6, [r5, #4]
 8010ad4:	2e00      	cmp	r6, #0
 8010ad6:	d0ef      	beq.n	8010ab8 <rmw_destroy_client+0x10>
 8010ad8:	6864      	ldr	r4, [r4, #4]
 8010ada:	6932      	ldr	r2, [r6, #16]
 8010adc:	6920      	ldr	r0, [r4, #16]
 8010ade:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010ae2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010ae6:	6819      	ldr	r1, [r3, #0]
 8010ae8:	f002 f91a 	bl	8012d20 <uxr_buffer_cancel_data>
 8010aec:	4602      	mov	r2, r0
 8010aee:	6920      	ldr	r0, [r4, #16]
 8010af0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010af4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010af8:	f7f8 fbe0 	bl	80092bc <run_xrce_session>
 8010afc:	6920      	ldr	r0, [r4, #16]
 8010afe:	6932      	ldr	r2, [r6, #16]
 8010b00:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010b04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010b08:	6819      	ldr	r1, [r3, #0]
 8010b0a:	f7f9 fe3b 	bl	800a784 <uxr_buffer_delete_entity>
 8010b0e:	4602      	mov	r2, r0
 8010b10:	6920      	ldr	r0, [r4, #16]
 8010b12:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010b16:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010b1a:	f7f8 fbcf 	bl	80092bc <run_xrce_session>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	4628      	mov	r0, r5
 8010b22:	bf14      	ite	ne
 8010b24:	2400      	movne	r4, #0
 8010b26:	2402      	moveq	r4, #2
 8010b28:	f7f8 fab0 	bl	800908c <rmw_uxrce_fini_client_memory>
 8010b2c:	e7c5      	b.n	8010aba <rmw_destroy_client+0x12>
 8010b2e:	bf00      	nop

08010b30 <rmw_get_implementation_identifier>:
 8010b30:	4b01      	ldr	r3, [pc, #4]	; (8010b38 <rmw_get_implementation_identifier+0x8>)
 8010b32:	6818      	ldr	r0, [r3, #0]
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	0801630c 	.word	0x0801630c

08010b3c <rmw_init_options_init>:
 8010b3c:	b084      	sub	sp, #16
 8010b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b40:	b083      	sub	sp, #12
 8010b42:	ad09      	add	r5, sp, #36	; 0x24
 8010b44:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010b48:	b130      	cbz	r0, 8010b58 <rmw_init_options_init+0x1c>
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f7f7 fe8f 	bl	8008870 <rcutils_allocator_is_valid>
 8010b52:	b108      	cbz	r0, 8010b58 <rmw_init_options_init+0x1c>
 8010b54:	68a6      	ldr	r6, [r4, #8]
 8010b56:	b12e      	cbz	r6, 8010b64 <rmw_init_options_init+0x28>
 8010b58:	200b      	movs	r0, #11
 8010b5a:	b003      	add	sp, #12
 8010b5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b60:	b004      	add	sp, #16
 8010b62:	4770      	bx	lr
 8010b64:	2200      	movs	r2, #0
 8010b66:	2300      	movs	r3, #0
 8010b68:	e9c4 2300 	strd	r2, r3, [r4]
 8010b6c:	4b22      	ldr	r3, [pc, #136]	; (8010bf8 <rmw_init_options_init+0xbc>)
 8010b6e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8010c08 <rmw_init_options_init+0xcc>
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	60a3      	str	r3, [r4, #8]
 8010b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b78:	f104 0c20 	add.w	ip, r4, #32
 8010b7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b80:	466f      	mov	r7, sp
 8010b82:	682b      	ldr	r3, [r5, #0]
 8010b84:	f8cc 3000 	str.w	r3, [ip]
 8010b88:	4638      	mov	r0, r7
 8010b8a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8010b8e:	60e6      	str	r6, [r4, #12]
 8010b90:	f7ff fd76 	bl	8010680 <rmw_get_default_security_options>
 8010b94:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010b98:	f104 0310 	add.w	r3, r4, #16
 8010b9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010ba0:	2203      	movs	r2, #3
 8010ba2:	4816      	ldr	r0, [pc, #88]	; (8010bfc <rmw_init_options_init+0xc0>)
 8010ba4:	4916      	ldr	r1, [pc, #88]	; (8010c00 <rmw_init_options_init+0xc4>)
 8010ba6:	7626      	strb	r6, [r4, #24]
 8010ba8:	f7f8 f9b0 	bl	8008f0c <rmw_uxrce_init_init_options_impl_memory>
 8010bac:	4813      	ldr	r0, [pc, #76]	; (8010bfc <rmw_init_options_init+0xc0>)
 8010bae:	f7ff ff57 	bl	8010a60 <get_memory>
 8010bb2:	b1f0      	cbz	r0, 8010bf2 <rmw_init_options_init+0xb6>
 8010bb4:	4a13      	ldr	r2, [pc, #76]	; (8010c04 <rmw_init_options_init+0xc8>)
 8010bb6:	6883      	ldr	r3, [r0, #8]
 8010bb8:	6851      	ldr	r1, [r2, #4]
 8010bba:	7810      	ldrb	r0, [r2, #0]
 8010bbc:	6363      	str	r3, [r4, #52]	; 0x34
 8010bbe:	7418      	strb	r0, [r3, #16]
 8010bc0:	6159      	str	r1, [r3, #20]
 8010bc2:	68d1      	ldr	r1, [r2, #12]
 8010bc4:	61d9      	str	r1, [r3, #28]
 8010bc6:	6911      	ldr	r1, [r2, #16]
 8010bc8:	6219      	str	r1, [r3, #32]
 8010bca:	6951      	ldr	r1, [r2, #20]
 8010bcc:	6892      	ldr	r2, [r2, #8]
 8010bce:	619a      	str	r2, [r3, #24]
 8010bd0:	6259      	str	r1, [r3, #36]	; 0x24
 8010bd2:	f7fb fa35 	bl	800c040 <uxr_nanos>
 8010bd6:	f003 fbc1 	bl	801435c <srand>
 8010bda:	f003 fbed 	bl	80143b8 <rand>
 8010bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010be0:	6298      	str	r0, [r3, #40]	; 0x28
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d0f9      	beq.n	8010bda <rmw_init_options_init+0x9e>
 8010be6:	2000      	movs	r0, #0
 8010be8:	b003      	add	sp, #12
 8010bea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010bee:	b004      	add	sp, #16
 8010bf0:	4770      	bx	lr
 8010bf2:	2001      	movs	r0, #1
 8010bf4:	e7b1      	b.n	8010b5a <rmw_init_options_init+0x1e>
 8010bf6:	bf00      	nop
 8010bf8:	0801630c 	.word	0x0801630c
 8010bfc:	20012814 	.word	0x20012814
 8010c00:	2000e0b0 	.word	0x2000e0b0
 8010c04:	2000df3c 	.word	0x2000df3c
 8010c08:	08015d74 	.word	0x08015d74

08010c0c <rmw_init_options_copy>:
 8010c0c:	b570      	push	{r4, r5, r6, lr}
 8010c0e:	b158      	cbz	r0, 8010c28 <rmw_init_options_copy+0x1c>
 8010c10:	460d      	mov	r5, r1
 8010c12:	b149      	cbz	r1, 8010c28 <rmw_init_options_copy+0x1c>
 8010c14:	4604      	mov	r4, r0
 8010c16:	6880      	ldr	r0, [r0, #8]
 8010c18:	b120      	cbz	r0, 8010c24 <rmw_init_options_copy+0x18>
 8010c1a:	4b1e      	ldr	r3, [pc, #120]	; (8010c94 <rmw_init_options_copy+0x88>)
 8010c1c:	6819      	ldr	r1, [r3, #0]
 8010c1e:	f7ef fadf 	bl	80001e0 <strcmp>
 8010c22:	bb90      	cbnz	r0, 8010c8a <rmw_init_options_copy+0x7e>
 8010c24:	68ab      	ldr	r3, [r5, #8]
 8010c26:	b113      	cbz	r3, 8010c2e <rmw_init_options_copy+0x22>
 8010c28:	250b      	movs	r5, #11
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	4623      	mov	r3, r4
 8010c30:	462a      	mov	r2, r5
 8010c32:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010c36:	f8d3 c000 	ldr.w	ip, [r3]
 8010c3a:	6858      	ldr	r0, [r3, #4]
 8010c3c:	6899      	ldr	r1, [r3, #8]
 8010c3e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010c42:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010c46:	3310      	adds	r3, #16
 8010c48:	42b3      	cmp	r3, r6
 8010c4a:	f8c2 c000 	str.w	ip, [r2]
 8010c4e:	6050      	str	r0, [r2, #4]
 8010c50:	6091      	str	r1, [r2, #8]
 8010c52:	f102 0210 	add.w	r2, r2, #16
 8010c56:	d1ee      	bne.n	8010c36 <rmw_init_options_copy+0x2a>
 8010c58:	6819      	ldr	r1, [r3, #0]
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	480e      	ldr	r0, [pc, #56]	; (8010c98 <rmw_init_options_copy+0x8c>)
 8010c5e:	6053      	str	r3, [r2, #4]
 8010c60:	6011      	str	r1, [r2, #0]
 8010c62:	f7ff fefd 	bl	8010a60 <get_memory>
 8010c66:	b198      	cbz	r0, 8010c90 <rmw_init_options_copy+0x84>
 8010c68:	6883      	ldr	r3, [r0, #8]
 8010c6a:	636b      	str	r3, [r5, #52]	; 0x34
 8010c6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010c6e:	f102 0c10 	add.w	ip, r2, #16
 8010c72:	f103 0410 	add.w	r4, r3, #16
 8010c76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c7c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010c80:	2500      	movs	r5, #0
 8010c82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010c86:	4628      	mov	r0, r5
 8010c88:	bd70      	pop	{r4, r5, r6, pc}
 8010c8a:	250c      	movs	r5, #12
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}
 8010c90:	2501      	movs	r5, #1
 8010c92:	e7ca      	b.n	8010c2a <rmw_init_options_copy+0x1e>
 8010c94:	0801630c 	.word	0x0801630c
 8010c98:	20012814 	.word	0x20012814

08010c9c <rmw_init_options_fini>:
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d03d      	beq.n	8010d1c <rmw_init_options_fini+0x80>
 8010ca0:	b510      	push	{r4, lr}
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	b08e      	sub	sp, #56	; 0x38
 8010ca6:	3020      	adds	r0, #32
 8010ca8:	f7f7 fde2 	bl	8008870 <rcutils_allocator_is_valid>
 8010cac:	b360      	cbz	r0, 8010d08 <rmw_init_options_fini+0x6c>
 8010cae:	68a0      	ldr	r0, [r4, #8]
 8010cb0:	b120      	cbz	r0, 8010cbc <rmw_init_options_fini+0x20>
 8010cb2:	4b1c      	ldr	r3, [pc, #112]	; (8010d24 <rmw_init_options_fini+0x88>)
 8010cb4:	6819      	ldr	r1, [r3, #0]
 8010cb6:	f7ef fa93 	bl	80001e0 <strcmp>
 8010cba:	bb68      	cbnz	r0, 8010d18 <rmw_init_options_fini+0x7c>
 8010cbc:	4b1a      	ldr	r3, [pc, #104]	; (8010d28 <rmw_init_options_fini+0x8c>)
 8010cbe:	6819      	ldr	r1, [r3, #0]
 8010cc0:	b331      	cbz	r1, 8010d10 <rmw_init_options_fini+0x74>
 8010cc2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010cc4:	e001      	b.n	8010cca <rmw_init_options_fini+0x2e>
 8010cc6:	6849      	ldr	r1, [r1, #4]
 8010cc8:	b311      	cbz	r1, 8010d10 <rmw_init_options_fini+0x74>
 8010cca:	688b      	ldr	r3, [r1, #8]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d1fa      	bne.n	8010cc6 <rmw_init_options_fini+0x2a>
 8010cd0:	4815      	ldr	r0, [pc, #84]	; (8010d28 <rmw_init_options_fini+0x8c>)
 8010cd2:	f7ff fed5 	bl	8010a80 <put_memory>
 8010cd6:	4668      	mov	r0, sp
 8010cd8:	f7ff fcc2 	bl	8010660 <rmw_get_zero_initialized_init_options>
 8010cdc:	46ee      	mov	lr, sp
 8010cde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ce2:	46a4      	mov	ip, r4
 8010ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ce8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cf8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010cfc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d00:	2300      	movs	r3, #0
 8010d02:	4618      	mov	r0, r3
 8010d04:	b00e      	add	sp, #56	; 0x38
 8010d06:	bd10      	pop	{r4, pc}
 8010d08:	230b      	movs	r3, #11
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	b00e      	add	sp, #56	; 0x38
 8010d0e:	bd10      	pop	{r4, pc}
 8010d10:	2301      	movs	r3, #1
 8010d12:	4618      	mov	r0, r3
 8010d14:	b00e      	add	sp, #56	; 0x38
 8010d16:	bd10      	pop	{r4, pc}
 8010d18:	230c      	movs	r3, #12
 8010d1a:	e7f2      	b.n	8010d02 <rmw_init_options_fini+0x66>
 8010d1c:	230b      	movs	r3, #11
 8010d1e:	4618      	mov	r0, r3
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	0801630c 	.word	0x0801630c
 8010d28:	20012814 	.word	0x20012814

08010d2c <rmw_init>:
 8010d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d30:	b083      	sub	sp, #12
 8010d32:	2800      	cmp	r0, #0
 8010d34:	f000 80d3 	beq.w	8010ede <rmw_init+0x1b2>
 8010d38:	460e      	mov	r6, r1
 8010d3a:	2900      	cmp	r1, #0
 8010d3c:	f000 80cf 	beq.w	8010ede <rmw_init+0x1b2>
 8010d40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d42:	4605      	mov	r5, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 80ca 	beq.w	8010ede <rmw_init+0x1b2>
 8010d4a:	4b78      	ldr	r3, [pc, #480]	; (8010f2c <rmw_init+0x200>)
 8010d4c:	6880      	ldr	r0, [r0, #8]
 8010d4e:	681f      	ldr	r7, [r3, #0]
 8010d50:	b128      	cbz	r0, 8010d5e <rmw_init+0x32>
 8010d52:	4639      	mov	r1, r7
 8010d54:	f7ef fa44 	bl	80001e0 <strcmp>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	f040 80ca 	bne.w	8010ef2 <rmw_init+0x1c6>
 8010d5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010d62:	4c73      	ldr	r4, [pc, #460]	; (8010f30 <rmw_init+0x204>)
 8010d64:	4973      	ldr	r1, [pc, #460]	; (8010f34 <rmw_init+0x208>)
 8010d66:	4874      	ldr	r0, [pc, #464]	; (8010f38 <rmw_init+0x20c>)
 8010d68:	60b7      	str	r7, [r6, #8]
 8010d6a:	e9c6 2300 	strd	r2, r3, [r6]
 8010d6e:	68eb      	ldr	r3, [r5, #12]
 8010d70:	64b3      	str	r3, [r6, #72]	; 0x48
 8010d72:	2201      	movs	r2, #1
 8010d74:	f7f8 f86a 	bl	8008e4c <rmw_uxrce_init_session_memory>
 8010d78:	4620      	mov	r0, r4
 8010d7a:	4970      	ldr	r1, [pc, #448]	; (8010f3c <rmw_init+0x210>)
 8010d7c:	2204      	movs	r2, #4
 8010d7e:	f7f8 f8a5 	bl	8008ecc <rmw_uxrce_init_static_input_buffer_memory>
 8010d82:	f04f 0800 	mov.w	r8, #0
 8010d86:	486c      	ldr	r0, [pc, #432]	; (8010f38 <rmw_init+0x20c>)
 8010d88:	f884 800d 	strb.w	r8, [r4, #13]
 8010d8c:	f7ff fe68 	bl	8010a60 <get_memory>
 8010d90:	2800      	cmp	r0, #0
 8010d92:	f000 80a9 	beq.w	8010ee8 <rmw_init+0x1bc>
 8010d96:	6884      	ldr	r4, [r0, #8]
 8010d98:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8010d9a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8010d9c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010da0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010da4:	9101      	str	r1, [sp, #4]
 8010da6:	6a00      	ldr	r0, [r0, #32]
 8010da8:	9000      	str	r0, [sp, #0]
 8010daa:	f104 0910 	add.w	r9, r4, #16
 8010dae:	4661      	mov	r1, ip
 8010db0:	4648      	mov	r0, r9
 8010db2:	f001 f9ed 	bl	8012190 <uxr_set_custom_transport_callbacks>
 8010db6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8010dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010dbe:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8010dc2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8010dc6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8010dca:	495d      	ldr	r1, [pc, #372]	; (8010f40 <rmw_init+0x214>)
 8010dcc:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8010dd0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8010dd4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8010dd8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8010ddc:	4859      	ldr	r0, [pc, #356]	; (8010f44 <rmw_init+0x218>)
 8010dde:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8010de2:	2201      	movs	r2, #1
 8010de4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8010de6:	f7f8 f811 	bl	8008e0c <rmw_uxrce_init_node_memory>
 8010dea:	4957      	ldr	r1, [pc, #348]	; (8010f48 <rmw_init+0x21c>)
 8010dec:	4857      	ldr	r0, [pc, #348]	; (8010f4c <rmw_init+0x220>)
 8010dee:	2205      	movs	r2, #5
 8010df0:	f7f7 ffec 	bl	8008dcc <rmw_uxrce_init_subscription_memory>
 8010df4:	4956      	ldr	r1, [pc, #344]	; (8010f50 <rmw_init+0x224>)
 8010df6:	4857      	ldr	r0, [pc, #348]	; (8010f54 <rmw_init+0x228>)
 8010df8:	220a      	movs	r2, #10
 8010dfa:	f7f7 ffc7 	bl	8008d8c <rmw_uxrce_init_publisher_memory>
 8010dfe:	4956      	ldr	r1, [pc, #344]	; (8010f58 <rmw_init+0x22c>)
 8010e00:	4856      	ldr	r0, [pc, #344]	; (8010f5c <rmw_init+0x230>)
 8010e02:	2201      	movs	r2, #1
 8010e04:	f7f7 ff82 	bl	8008d0c <rmw_uxrce_init_service_memory>
 8010e08:	4955      	ldr	r1, [pc, #340]	; (8010f60 <rmw_init+0x234>)
 8010e0a:	4856      	ldr	r0, [pc, #344]	; (8010f64 <rmw_init+0x238>)
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	f7f7 ff9d 	bl	8008d4c <rmw_uxrce_init_client_memory>
 8010e12:	4955      	ldr	r1, [pc, #340]	; (8010f68 <rmw_init+0x23c>)
 8010e14:	4855      	ldr	r0, [pc, #340]	; (8010f6c <rmw_init+0x240>)
 8010e16:	220f      	movs	r2, #15
 8010e18:	f7f8 f838 	bl	8008e8c <rmw_uxrce_init_topic_memory>
 8010e1c:	4954      	ldr	r1, [pc, #336]	; (8010f70 <rmw_init+0x244>)
 8010e1e:	4855      	ldr	r0, [pc, #340]	; (8010f74 <rmw_init+0x248>)
 8010e20:	2203      	movs	r2, #3
 8010e22:	f7f8 f873 	bl	8008f0c <rmw_uxrce_init_init_options_impl_memory>
 8010e26:	4954      	ldr	r1, [pc, #336]	; (8010f78 <rmw_init+0x24c>)
 8010e28:	4854      	ldr	r0, [pc, #336]	; (8010f7c <rmw_init+0x250>)
 8010e2a:	2204      	movs	r2, #4
 8010e2c:	f7f8 f88e 	bl	8008f4c <rmw_uxrce_init_wait_set_memory>
 8010e30:	4953      	ldr	r1, [pc, #332]	; (8010f80 <rmw_init+0x254>)
 8010e32:	4854      	ldr	r0, [pc, #336]	; (8010f84 <rmw_init+0x258>)
 8010e34:	2204      	movs	r2, #4
 8010e36:	f7f8 f8a9 	bl	8008f8c <rmw_uxrce_init_guard_condition_memory>
 8010e3a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8010e3c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8010e3e:	4642      	mov	r2, r8
 8010e40:	f000 fd9e 	bl	8011980 <rmw_uxrce_transport_init>
 8010e44:	4607      	mov	r7, r0
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d158      	bne.n	8010efc <rmw_init+0x1d0>
 8010e4a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010e4c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8010e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e52:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8010e56:	4628      	mov	r0, r5
 8010e58:	f7f9 ff56 	bl	800ad08 <uxr_init_session>
 8010e5c:	494a      	ldr	r1, [pc, #296]	; (8010f88 <rmw_init+0x25c>)
 8010e5e:	4622      	mov	r2, r4
 8010e60:	4628      	mov	r0, r5
 8010e62:	f7f9 ff75 	bl	800ad50 <uxr_set_topic_callback>
 8010e66:	4949      	ldr	r1, [pc, #292]	; (8010f8c <rmw_init+0x260>)
 8010e68:	463a      	mov	r2, r7
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f7f9 ff6c 	bl	800ad48 <uxr_set_status_callback>
 8010e70:	4947      	ldr	r1, [pc, #284]	; (8010f90 <rmw_init+0x264>)
 8010e72:	463a      	mov	r2, r7
 8010e74:	4628      	mov	r0, r5
 8010e76:	f7f9 ff6f 	bl	800ad58 <uxr_set_request_callback>
 8010e7a:	4946      	ldr	r1, [pc, #280]	; (8010f94 <rmw_init+0x268>)
 8010e7c:	463a      	mov	r2, r7
 8010e7e:	4628      	mov	r0, r5
 8010e80:	f7f9 ff6e 	bl	800ad60 <uxr_set_reply_callback>
 8010e84:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010e88:	2304      	movs	r3, #4
 8010e8a:	0092      	lsls	r2, r2, #2
 8010e8c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8010e90:	4628      	mov	r0, r5
 8010e92:	f7f9 ffa3 	bl	800addc <uxr_create_input_reliable_stream>
 8010e96:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010e9a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8010e9e:	0092      	lsls	r2, r2, #2
 8010ea0:	2304      	movs	r3, #4
 8010ea2:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	f7f9 ff70 	bl	800ad8c <uxr_create_output_reliable_stream>
 8010eac:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	f7f9 ff8d 	bl	800add0 <uxr_create_input_best_effort_stream>
 8010eb6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8010eba:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8010ebe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010ec2:	3114      	adds	r1, #20
 8010ec4:	4628      	mov	r0, r5
 8010ec6:	f7f9 ff4f 	bl	800ad68 <uxr_create_output_best_effort_stream>
 8010eca:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f7fa fcda 	bl	800b888 <uxr_create_session>
 8010ed4:	b1f8      	cbz	r0, 8010f16 <rmw_init+0x1ea>
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	b003      	add	sp, #12
 8010eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ede:	270b      	movs	r7, #11
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	b003      	add	sp, #12
 8010ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ee8:	2701      	movs	r7, #1
 8010eea:	4638      	mov	r0, r7
 8010eec:	b003      	add	sp, #12
 8010eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ef2:	270c      	movs	r7, #12
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	b003      	add	sp, #12
 8010ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010efc:	4648      	mov	r0, r9
 8010efe:	f001 f989 	bl	8012214 <uxr_close_custom_transport>
 8010f02:	480d      	ldr	r0, [pc, #52]	; (8010f38 <rmw_init+0x20c>)
 8010f04:	4621      	mov	r1, r4
 8010f06:	f7ff fdbb 	bl	8010a80 <put_memory>
 8010f0a:	4638      	mov	r0, r7
 8010f0c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8010f10:	b003      	add	sp, #12
 8010f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f16:	4648      	mov	r0, r9
 8010f18:	f001 f97c 	bl	8012214 <uxr_close_custom_transport>
 8010f1c:	4806      	ldr	r0, [pc, #24]	; (8010f38 <rmw_init+0x20c>)
 8010f1e:	4621      	mov	r1, r4
 8010f20:	f7ff fdae 	bl	8010a80 <put_memory>
 8010f24:	64f7      	str	r7, [r6, #76]	; 0x4c
 8010f26:	2701      	movs	r7, #1
 8010f28:	e7d5      	b.n	8010ed6 <rmw_init+0x1aa>
 8010f2a:	bf00      	nop
 8010f2c:	0801630c 	.word	0x0801630c
 8010f30:	20012864 	.word	0x20012864
 8010f34:	2000eb10 	.word	0x2000eb10
 8010f38:	20012854 	.word	0x20012854
 8010f3c:	200100b8 	.word	0x200100b8
 8010f40:	2000e134 	.word	0x2000e134
 8010f44:	20012824 	.word	0x20012824
 8010f48:	200121b8 	.word	0x200121b8
 8010f4c:	20012874 	.word	0x20012874
 8010f50:	2000e1d8 	.word	0x2000e1d8
 8010f54:	20012834 	.word	0x20012834
 8010f58:	2000ea48 	.word	0x2000ea48
 8010f5c:	20012844 	.word	0x20012844
 8010f60:	2000df68 	.word	0x2000df68
 8010f64:	2000df58 	.word	0x2000df58
 8010f68:	200125f0 	.word	0x200125f0
 8010f6c:	20012884 	.word	0x20012884
 8010f70:	2000e0b0 	.word	0x2000e0b0
 8010f74:	20012814 	.word	0x20012814
 8010f78:	20012794 	.word	0x20012794
 8010f7c:	20012894 	.word	0x20012894
 8010f80:	2000e030 	.word	0x2000e030
 8010f84:	20012804 	.word	0x20012804
 8010f88:	08013f01 	.word	0x08013f01
 8010f8c:	08013ef9 	.word	0x08013ef9
 8010f90:	08013f99 	.word	0x08013f99
 8010f94:	08014035 	.word	0x08014035

08010f98 <rmw_context_fini>:
 8010f98:	4b17      	ldr	r3, [pc, #92]	; (8010ff8 <rmw_context_fini+0x60>)
 8010f9a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	681c      	ldr	r4, [r3, #0]
 8010fa0:	4605      	mov	r5, r0
 8010fa2:	b334      	cbz	r4, 8010ff2 <rmw_context_fini+0x5a>
 8010fa4:	2600      	movs	r6, #0
 8010fa6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010faa:	6902      	ldr	r2, [r0, #16]
 8010fac:	428a      	cmp	r2, r1
 8010fae:	d018      	beq.n	8010fe2 <rmw_context_fini+0x4a>
 8010fb0:	2c00      	cmp	r4, #0
 8010fb2:	d1f8      	bne.n	8010fa6 <rmw_context_fini+0xe>
 8010fb4:	b189      	cbz	r1, 8010fda <rmw_context_fini+0x42>
 8010fb6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8010fba:	789b      	ldrb	r3, [r3, #2]
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8010fc2:	bf14      	ite	ne
 8010fc4:	210a      	movne	r1, #10
 8010fc6:	2100      	moveq	r1, #0
 8010fc8:	f7fa fc36 	bl	800b838 <uxr_delete_session_retries>
 8010fcc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8010fce:	f7f7 fffd 	bl	8008fcc <rmw_uxrce_fini_session_memory>
 8010fd2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8010fd4:	3010      	adds	r0, #16
 8010fd6:	f001 f91d 	bl	8012214 <uxr_close_custom_transport>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	64eb      	str	r3, [r5, #76]	; 0x4c
 8010fde:	4630      	mov	r0, r6
 8010fe0:	bd70      	pop	{r4, r5, r6, pc}
 8010fe2:	3018      	adds	r0, #24
 8010fe4:	f000 f90e 	bl	8011204 <rmw_destroy_node>
 8010fe8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8010fea:	4606      	mov	r6, r0
 8010fec:	2c00      	cmp	r4, #0
 8010fee:	d1da      	bne.n	8010fa6 <rmw_context_fini+0xe>
 8010ff0:	e7e0      	b.n	8010fb4 <rmw_context_fini+0x1c>
 8010ff2:	4626      	mov	r6, r4
 8010ff4:	e7de      	b.n	8010fb4 <rmw_context_fini+0x1c>
 8010ff6:	bf00      	nop
 8010ff8:	20012824 	.word	0x20012824

08010ffc <create_topic>:
 8010ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011000:	4605      	mov	r5, r0
 8011002:	b084      	sub	sp, #16
 8011004:	4822      	ldr	r0, [pc, #136]	; (8011090 <create_topic+0x94>)
 8011006:	460f      	mov	r7, r1
 8011008:	4616      	mov	r6, r2
 801100a:	f7ff fd29 	bl	8010a60 <get_memory>
 801100e:	4604      	mov	r4, r0
 8011010:	2800      	cmp	r0, #0
 8011012:	d039      	beq.n	8011088 <create_topic+0x8c>
 8011014:	692b      	ldr	r3, [r5, #16]
 8011016:	6884      	ldr	r4, [r0, #8]
 8011018:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8011098 <create_topic+0x9c>
 801101c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011020:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011024:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8011028:	1c42      	adds	r2, r0, #1
 801102a:	2102      	movs	r1, #2
 801102c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8011030:	f7f9 fdaa 	bl	800ab88 <uxr_object_id>
 8011034:	223c      	movs	r2, #60	; 0x3c
 8011036:	6120      	str	r0, [r4, #16]
 8011038:	4641      	mov	r1, r8
 801103a:	4638      	mov	r0, r7
 801103c:	f7f8 f9a4 	bl	8009388 <generate_topic_name>
 8011040:	b1f0      	cbz	r0, 8011080 <create_topic+0x84>
 8011042:	4f14      	ldr	r7, [pc, #80]	; (8011094 <create_topic+0x98>)
 8011044:	4630      	mov	r0, r6
 8011046:	2264      	movs	r2, #100	; 0x64
 8011048:	4639      	mov	r1, r7
 801104a:	f7f8 f96d 	bl	8009328 <generate_type_name>
 801104e:	b1b8      	cbz	r0, 8011080 <create_topic+0x84>
 8011050:	6928      	ldr	r0, [r5, #16]
 8011052:	2306      	movs	r3, #6
 8011054:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8011058:	f8cd 8000 	str.w	r8, [sp]
 801105c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011060:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011064:	6811      	ldr	r1, [r2, #0]
 8011066:	696b      	ldr	r3, [r5, #20]
 8011068:	6922      	ldr	r2, [r4, #16]
 801106a:	f7f9 fc09 	bl	800a880 <uxr_buffer_create_topic_bin>
 801106e:	4602      	mov	r2, r0
 8011070:	6928      	ldr	r0, [r5, #16]
 8011072:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011076:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801107a:	f7f8 f91f 	bl	80092bc <run_xrce_session>
 801107e:	b918      	cbnz	r0, 8011088 <create_topic+0x8c>
 8011080:	4620      	mov	r0, r4
 8011082:	f7f8 f819 	bl	80090b8 <rmw_uxrce_fini_topic_memory>
 8011086:	2400      	movs	r4, #0
 8011088:	4620      	mov	r0, r4
 801108a:	b004      	add	sp, #16
 801108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011090:	20012884 	.word	0x20012884
 8011094:	20012970 	.word	0x20012970
 8011098:	20012934 	.word	0x20012934

0801109c <destroy_topic>:
 801109c:	b538      	push	{r3, r4, r5, lr}
 801109e:	6985      	ldr	r5, [r0, #24]
 80110a0:	b1d5      	cbz	r5, 80110d8 <destroy_topic+0x3c>
 80110a2:	4604      	mov	r4, r0
 80110a4:	6928      	ldr	r0, [r5, #16]
 80110a6:	6922      	ldr	r2, [r4, #16]
 80110a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80110ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80110b0:	6819      	ldr	r1, [r3, #0]
 80110b2:	f7f9 fb67 	bl	800a784 <uxr_buffer_delete_entity>
 80110b6:	4602      	mov	r2, r0
 80110b8:	6928      	ldr	r0, [r5, #16]
 80110ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80110be:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80110c2:	f7f8 f8fb 	bl	80092bc <run_xrce_session>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	4620      	mov	r0, r4
 80110ca:	bf14      	ite	ne
 80110cc:	2400      	movne	r4, #0
 80110ce:	2402      	moveq	r4, #2
 80110d0:	f7f7 fff2 	bl	80090b8 <rmw_uxrce_fini_topic_memory>
 80110d4:	4620      	mov	r0, r4
 80110d6:	bd38      	pop	{r3, r4, r5, pc}
 80110d8:	2401      	movs	r4, #1
 80110da:	4620      	mov	r0, r4
 80110dc:	bd38      	pop	{r3, r4, r5, pc}
 80110de:	bf00      	nop

080110e0 <create_node>:
 80110e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110e4:	b083      	sub	sp, #12
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d05f      	beq.n	80111aa <create_node+0xca>
 80110ea:	4606      	mov	r6, r0
 80110ec:	4835      	ldr	r0, [pc, #212]	; (80111c4 <create_node+0xe4>)
 80110ee:	460f      	mov	r7, r1
 80110f0:	4690      	mov	r8, r2
 80110f2:	461d      	mov	r5, r3
 80110f4:	f7ff fcb4 	bl	8010a60 <get_memory>
 80110f8:	2800      	cmp	r0, #0
 80110fa:	d056      	beq.n	80111aa <create_node+0xca>
 80110fc:	6884      	ldr	r4, [r0, #8]
 80110fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011100:	6123      	str	r3, [r4, #16]
 8011102:	f7ff fd15 	bl	8010b30 <rmw_get_implementation_identifier>
 8011106:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 801110a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801110e:	f8c4 9020 	str.w	r9, [r4, #32]
 8011112:	4630      	mov	r0, r6
 8011114:	f7ef f86e 	bl	80001f4 <strlen>
 8011118:	1c42      	adds	r2, r0, #1
 801111a:	2a3c      	cmp	r2, #60	; 0x3c
 801111c:	f104 0518 	add.w	r5, r4, #24
 8011120:	d840      	bhi.n	80111a4 <create_node+0xc4>
 8011122:	4648      	mov	r0, r9
 8011124:	4631      	mov	r1, r6
 8011126:	f104 0968 	add.w	r9, r4, #104	; 0x68
 801112a:	f003 fcae 	bl	8014a8a <memcpy>
 801112e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8011132:	4638      	mov	r0, r7
 8011134:	f7ef f85e 	bl	80001f4 <strlen>
 8011138:	1c42      	adds	r2, r0, #1
 801113a:	2a3c      	cmp	r2, #60	; 0x3c
 801113c:	d832      	bhi.n	80111a4 <create_node+0xc4>
 801113e:	4639      	mov	r1, r7
 8011140:	4648      	mov	r0, r9
 8011142:	f003 fca2 	bl	8014a8a <memcpy>
 8011146:	6923      	ldr	r3, [r4, #16]
 8011148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801114c:	2101      	movs	r1, #1
 801114e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8011152:	1842      	adds	r2, r0, r1
 8011154:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8011158:	f7f9 fd16 	bl	800ab88 <uxr_object_id>
 801115c:	6160      	str	r0, [r4, #20]
 801115e:	783b      	ldrb	r3, [r7, #0]
 8011160:	2b2f      	cmp	r3, #47	; 0x2f
 8011162:	d127      	bne.n	80111b4 <create_node+0xd4>
 8011164:	787b      	ldrb	r3, [r7, #1]
 8011166:	bb2b      	cbnz	r3, 80111b4 <create_node+0xd4>
 8011168:	4a17      	ldr	r2, [pc, #92]	; (80111c8 <create_node+0xe8>)
 801116a:	4818      	ldr	r0, [pc, #96]	; (80111cc <create_node+0xec>)
 801116c:	4633      	mov	r3, r6
 801116e:	213c      	movs	r1, #60	; 0x3c
 8011170:	f003 fae8 	bl	8014744 <sniprintf>
 8011174:	6920      	ldr	r0, [r4, #16]
 8011176:	4915      	ldr	r1, [pc, #84]	; (80111cc <create_node+0xec>)
 8011178:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801117c:	9100      	str	r1, [sp, #0]
 801117e:	2106      	movs	r1, #6
 8011180:	9101      	str	r1, [sp, #4]
 8011182:	6811      	ldr	r1, [r2, #0]
 8011184:	6962      	ldr	r2, [r4, #20]
 8011186:	fa1f f388 	uxth.w	r3, r8
 801118a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801118e:	f7f9 fb45 	bl	800a81c <uxr_buffer_create_participant_bin>
 8011192:	4602      	mov	r2, r0
 8011194:	6920      	ldr	r0, [r4, #16]
 8011196:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801119a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801119e:	f7f8 f88d 	bl	80092bc <run_xrce_session>
 80111a2:	b918      	cbnz	r0, 80111ac <create_node+0xcc>
 80111a4:	4628      	mov	r0, r5
 80111a6:	f7f7 ff17 	bl	8008fd8 <rmw_uxrce_fini_node_memory>
 80111aa:	2500      	movs	r5, #0
 80111ac:	4628      	mov	r0, r5
 80111ae:	b003      	add	sp, #12
 80111b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111b4:	4a06      	ldr	r2, [pc, #24]	; (80111d0 <create_node+0xf0>)
 80111b6:	9600      	str	r6, [sp, #0]
 80111b8:	463b      	mov	r3, r7
 80111ba:	213c      	movs	r1, #60	; 0x3c
 80111bc:	4803      	ldr	r0, [pc, #12]	; (80111cc <create_node+0xec>)
 80111be:	f003 fac1 	bl	8014744 <sniprintf>
 80111c2:	e7d7      	b.n	8011174 <create_node+0x94>
 80111c4:	20012824 	.word	0x20012824
 80111c8:	08015bec 	.word	0x08015bec
 80111cc:	200129d4 	.word	0x200129d4
 80111d0:	08015d7c 	.word	0x08015d7c

080111d4 <rmw_create_node>:
 80111d4:	b199      	cbz	r1, 80111fe <rmw_create_node+0x2a>
 80111d6:	780b      	ldrb	r3, [r1, #0]
 80111d8:	468c      	mov	ip, r1
 80111da:	b183      	cbz	r3, 80111fe <rmw_create_node+0x2a>
 80111dc:	b410      	push	{r4}
 80111de:	4614      	mov	r4, r2
 80111e0:	b14a      	cbz	r2, 80111f6 <rmw_create_node+0x22>
 80111e2:	7813      	ldrb	r3, [r2, #0]
 80111e4:	b13b      	cbz	r3, 80111f6 <rmw_create_node+0x22>
 80111e6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80111e8:	4603      	mov	r3, r0
 80111ea:	4621      	mov	r1, r4
 80111ec:	4660      	mov	r0, ip
 80111ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111f2:	f7ff bf75 	b.w	80110e0 <create_node>
 80111f6:	2000      	movs	r0, #0
 80111f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	2000      	movs	r0, #0
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop

08011204 <rmw_destroy_node>:
 8011204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011206:	b328      	cbz	r0, 8011254 <rmw_destroy_node+0x50>
 8011208:	4607      	mov	r7, r0
 801120a:	6800      	ldr	r0, [r0, #0]
 801120c:	b120      	cbz	r0, 8011218 <rmw_destroy_node+0x14>
 801120e:	4b36      	ldr	r3, [pc, #216]	; (80112e8 <rmw_destroy_node+0xe4>)
 8011210:	6819      	ldr	r1, [r3, #0]
 8011212:	f7ee ffe5 	bl	80001e0 <strcmp>
 8011216:	b9e8      	cbnz	r0, 8011254 <rmw_destroy_node+0x50>
 8011218:	687d      	ldr	r5, [r7, #4]
 801121a:	b1dd      	cbz	r5, 8011254 <rmw_destroy_node+0x50>
 801121c:	4b33      	ldr	r3, [pc, #204]	; (80112ec <rmw_destroy_node+0xe8>)
 801121e:	681c      	ldr	r4, [r3, #0]
 8011220:	2c00      	cmp	r4, #0
 8011222:	d05f      	beq.n	80112e4 <rmw_destroy_node+0xe0>
 8011224:	2600      	movs	r6, #0
 8011226:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801122a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801122e:	429d      	cmp	r5, r3
 8011230:	d013      	beq.n	801125a <rmw_destroy_node+0x56>
 8011232:	2c00      	cmp	r4, #0
 8011234:	d1f7      	bne.n	8011226 <rmw_destroy_node+0x22>
 8011236:	4b2e      	ldr	r3, [pc, #184]	; (80112f0 <rmw_destroy_node+0xec>)
 8011238:	681c      	ldr	r4, [r3, #0]
 801123a:	b1c4      	cbz	r4, 801126e <rmw_destroy_node+0x6a>
 801123c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011240:	6a0b      	ldr	r3, [r1, #32]
 8011242:	429d      	cmp	r5, r3
 8011244:	d1f9      	bne.n	801123a <rmw_destroy_node+0x36>
 8011246:	317c      	adds	r1, #124	; 0x7c
 8011248:	4638      	mov	r0, r7
 801124a:	f000 fae5 	bl	8011818 <rmw_destroy_subscription>
 801124e:	2801      	cmp	r0, #1
 8011250:	4606      	mov	r6, r0
 8011252:	d1f2      	bne.n	801123a <rmw_destroy_node+0x36>
 8011254:	2601      	movs	r6, #1
 8011256:	4630      	mov	r0, r6
 8011258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801125a:	3184      	adds	r1, #132	; 0x84
 801125c:	4638      	mov	r0, r7
 801125e:	f7f7 fd03 	bl	8008c68 <rmw_destroy_publisher>
 8011262:	2801      	cmp	r0, #1
 8011264:	4606      	mov	r6, r0
 8011266:	d0f5      	beq.n	8011254 <rmw_destroy_node+0x50>
 8011268:	2c00      	cmp	r4, #0
 801126a:	d1dc      	bne.n	8011226 <rmw_destroy_node+0x22>
 801126c:	e7e3      	b.n	8011236 <rmw_destroy_node+0x32>
 801126e:	4b21      	ldr	r3, [pc, #132]	; (80112f4 <rmw_destroy_node+0xf0>)
 8011270:	681c      	ldr	r4, [r3, #0]
 8011272:	b16c      	cbz	r4, 8011290 <rmw_destroy_node+0x8c>
 8011274:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011278:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801127a:	429d      	cmp	r5, r3
 801127c:	d1f9      	bne.n	8011272 <rmw_destroy_node+0x6e>
 801127e:	317c      	adds	r1, #124	; 0x7c
 8011280:	4638      	mov	r0, r7
 8011282:	f000 f993 	bl	80115ac <rmw_destroy_service>
 8011286:	2801      	cmp	r0, #1
 8011288:	4606      	mov	r6, r0
 801128a:	d0e3      	beq.n	8011254 <rmw_destroy_node+0x50>
 801128c:	2c00      	cmp	r4, #0
 801128e:	d1f1      	bne.n	8011274 <rmw_destroy_node+0x70>
 8011290:	4b19      	ldr	r3, [pc, #100]	; (80112f8 <rmw_destroy_node+0xf4>)
 8011292:	681c      	ldr	r4, [r3, #0]
 8011294:	b16c      	cbz	r4, 80112b2 <rmw_destroy_node+0xae>
 8011296:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801129a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801129c:	429d      	cmp	r5, r3
 801129e:	d1f9      	bne.n	8011294 <rmw_destroy_node+0x90>
 80112a0:	317c      	adds	r1, #124	; 0x7c
 80112a2:	4638      	mov	r0, r7
 80112a4:	f7ff fc00 	bl	8010aa8 <rmw_destroy_client>
 80112a8:	2801      	cmp	r0, #1
 80112aa:	4606      	mov	r6, r0
 80112ac:	d0d2      	beq.n	8011254 <rmw_destroy_node+0x50>
 80112ae:	2c00      	cmp	r4, #0
 80112b0:	d1f1      	bne.n	8011296 <rmw_destroy_node+0x92>
 80112b2:	6928      	ldr	r0, [r5, #16]
 80112b4:	696a      	ldr	r2, [r5, #20]
 80112b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80112ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80112be:	6819      	ldr	r1, [r3, #0]
 80112c0:	f7f9 fa60 	bl	800a784 <uxr_buffer_delete_entity>
 80112c4:	4602      	mov	r2, r0
 80112c6:	6928      	ldr	r0, [r5, #16]
 80112c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80112cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80112d0:	f7f7 fff4 	bl	80092bc <run_xrce_session>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	bf08      	it	eq
 80112d8:	2602      	moveq	r6, #2
 80112da:	4638      	mov	r0, r7
 80112dc:	f7f7 fe7c 	bl	8008fd8 <rmw_uxrce_fini_node_memory>
 80112e0:	4630      	mov	r0, r6
 80112e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112e4:	4626      	mov	r6, r4
 80112e6:	e7a6      	b.n	8011236 <rmw_destroy_node+0x32>
 80112e8:	0801630c 	.word	0x0801630c
 80112ec:	20012834 	.word	0x20012834
 80112f0:	20012874 	.word	0x20012874
 80112f4:	20012844 	.word	0x20012844
 80112f8:	2000df58 	.word	0x2000df58

080112fc <rmw_node_get_graph_guard_condition>:
 80112fc:	6843      	ldr	r3, [r0, #4]
 80112fe:	6918      	ldr	r0, [r3, #16]
 8011300:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop

08011308 <rmw_send_request>:
 8011308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801130c:	4604      	mov	r4, r0
 801130e:	6800      	ldr	r0, [r0, #0]
 8011310:	b08b      	sub	sp, #44	; 0x2c
 8011312:	460e      	mov	r6, r1
 8011314:	4615      	mov	r5, r2
 8011316:	b128      	cbz	r0, 8011324 <rmw_send_request+0x1c>
 8011318:	4b21      	ldr	r3, [pc, #132]	; (80113a0 <rmw_send_request+0x98>)
 801131a:	6819      	ldr	r1, [r3, #0]
 801131c:	f7ee ff60 	bl	80001e0 <strcmp>
 8011320:	2800      	cmp	r0, #0
 8011322:	d139      	bne.n	8011398 <rmw_send_request+0x90>
 8011324:	6864      	ldr	r4, [r4, #4]
 8011326:	6963      	ldr	r3, [r4, #20]
 8011328:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	4798      	blx	r3
 8011330:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8011334:	4630      	mov	r0, r6
 8011336:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801133a:	4798      	blx	r3
 801133c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011340:	9000      	str	r0, [sp, #0]
 8011342:	6922      	ldr	r2, [r4, #16]
 8011344:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8011346:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801134a:	ab02      	add	r3, sp, #8
 801134c:	f7fa ff18 	bl	800c180 <uxr_prepare_output_stream>
 8011350:	2700      	movs	r7, #0
 8011352:	6028      	str	r0, [r5, #0]
 8011354:	606f      	str	r7, [r5, #4]
 8011356:	b198      	cbz	r0, 8011380 <rmw_send_request+0x78>
 8011358:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801135c:	a902      	add	r1, sp, #8
 801135e:	4630      	mov	r0, r6
 8011360:	4798      	blx	r3
 8011362:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8011366:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801136a:	2b01      	cmp	r3, #1
 801136c:	d00c      	beq.n	8011388 <rmw_send_request+0x80>
 801136e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8011370:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011374:	f7fa f918 	bl	800b5a8 <uxr_run_session_until_confirm_delivery>
 8011378:	4638      	mov	r0, r7
 801137a:	b00b      	add	sp, #44	; 0x2c
 801137c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011380:	2001      	movs	r0, #1
 8011382:	b00b      	add	sp, #44	; 0x2c
 8011384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011388:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801138c:	f7f9 fd4c 	bl	800ae28 <uxr_flash_output_streams>
 8011390:	4638      	mov	r0, r7
 8011392:	b00b      	add	sp, #44	; 0x2c
 8011394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011398:	200c      	movs	r0, #12
 801139a:	b00b      	add	sp, #44	; 0x2c
 801139c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113a0:	0801630c 	.word	0x0801630c

080113a4 <rmw_take_request>:
 80113a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113a8:	4605      	mov	r5, r0
 80113aa:	6800      	ldr	r0, [r0, #0]
 80113ac:	b089      	sub	sp, #36	; 0x24
 80113ae:	460c      	mov	r4, r1
 80113b0:	4690      	mov	r8, r2
 80113b2:	461e      	mov	r6, r3
 80113b4:	b128      	cbz	r0, 80113c2 <rmw_take_request+0x1e>
 80113b6:	4b28      	ldr	r3, [pc, #160]	; (8011458 <rmw_take_request+0xb4>)
 80113b8:	6819      	ldr	r1, [r3, #0]
 80113ba:	f7ee ff11 	bl	80001e0 <strcmp>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d146      	bne.n	8011450 <rmw_take_request+0xac>
 80113c2:	b10e      	cbz	r6, 80113c8 <rmw_take_request+0x24>
 80113c4:	2300      	movs	r3, #0
 80113c6:	7033      	strb	r3, [r6, #0]
 80113c8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80113cc:	f7f7 fef8 	bl	80091c0 <rmw_uxrce_clean_expired_static_input_buffer>
 80113d0:	4648      	mov	r0, r9
 80113d2:	f7f7 fecd 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 80113d6:	4607      	mov	r7, r0
 80113d8:	b3b0      	cbz	r0, 8011448 <rmw_take_request+0xa4>
 80113da:	6885      	ldr	r5, [r0, #8]
 80113dc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 80113e0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 80113e4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80113e8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80113ec:	7423      	strb	r3, [r4, #16]
 80113ee:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80113f2:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80113f6:	74e2      	strb	r2, [r4, #19]
 80113f8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80113fc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8011400:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8011404:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8011408:	61e1      	str	r1, [r4, #28]
 801140a:	6162      	str	r2, [r4, #20]
 801140c:	61a3      	str	r3, [r4, #24]
 801140e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	4798      	blx	r3
 8011416:	6844      	ldr	r4, [r0, #4]
 8011418:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801141c:	f105 0110 	add.w	r1, r5, #16
 8011420:	4668      	mov	r0, sp
 8011422:	f7f9 f93f 	bl	800a6a4 <ucdr_init_buffer>
 8011426:	68e3      	ldr	r3, [r4, #12]
 8011428:	4641      	mov	r1, r8
 801142a:	4668      	mov	r0, sp
 801142c:	4798      	blx	r3
 801142e:	4639      	mov	r1, r7
 8011430:	4604      	mov	r4, r0
 8011432:	480a      	ldr	r0, [pc, #40]	; (801145c <rmw_take_request+0xb8>)
 8011434:	f7ff fb24 	bl	8010a80 <put_memory>
 8011438:	b106      	cbz	r6, 801143c <rmw_take_request+0x98>
 801143a:	7034      	strb	r4, [r6, #0]
 801143c:	f084 0001 	eor.w	r0, r4, #1
 8011440:	b2c0      	uxtb	r0, r0
 8011442:	b009      	add	sp, #36	; 0x24
 8011444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011448:	2001      	movs	r0, #1
 801144a:	b009      	add	sp, #36	; 0x24
 801144c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011450:	200c      	movs	r0, #12
 8011452:	b009      	add	sp, #36	; 0x24
 8011454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011458:	0801630c 	.word	0x0801630c
 801145c:	20012864 	.word	0x20012864

08011460 <rmw_send_response>:
 8011460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011462:	4605      	mov	r5, r0
 8011464:	6800      	ldr	r0, [r0, #0]
 8011466:	b091      	sub	sp, #68	; 0x44
 8011468:	460c      	mov	r4, r1
 801146a:	4616      	mov	r6, r2
 801146c:	b128      	cbz	r0, 801147a <rmw_send_response+0x1a>
 801146e:	4b29      	ldr	r3, [pc, #164]	; (8011514 <rmw_send_response+0xb4>)
 8011470:	6819      	ldr	r1, [r3, #0]
 8011472:	f7ee feb5 	bl	80001e0 <strcmp>
 8011476:	2800      	cmp	r0, #0
 8011478:	d141      	bne.n	80114fe <rmw_send_response+0x9e>
 801147a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801147e:	9306      	str	r3, [sp, #24]
 8011480:	4623      	mov	r3, r4
 8011482:	9207      	str	r2, [sp, #28]
 8011484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011488:	686d      	ldr	r5, [r5, #4]
 801148a:	789b      	ldrb	r3, [r3, #2]
 801148c:	68a1      	ldr	r1, [r4, #8]
 801148e:	f88d 2017 	strb.w	r2, [sp, #23]
 8011492:	f88d 3016 	strb.w	r3, [sp, #22]
 8011496:	68e2      	ldr	r2, [r4, #12]
 8011498:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801149c:	6860      	ldr	r0, [r4, #4]
 801149e:	f8ad 3014 	strh.w	r3, [sp, #20]
 80114a2:	ab02      	add	r3, sp, #8
 80114a4:	c307      	stmia	r3!, {r0, r1, r2}
 80114a6:	696b      	ldr	r3, [r5, #20]
 80114a8:	6faf      	ldr	r7, [r5, #120]	; 0x78
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	4798      	blx	r3
 80114ae:	6844      	ldr	r4, [r0, #4]
 80114b0:	4630      	mov	r0, r6
 80114b2:	6923      	ldr	r3, [r4, #16]
 80114b4:	4798      	blx	r3
 80114b6:	f100 0318 	add.w	r3, r0, #24
 80114ba:	6938      	ldr	r0, [r7, #16]
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	692a      	ldr	r2, [r5, #16]
 80114c0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80114c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80114c6:	ab08      	add	r3, sp, #32
 80114c8:	f7fa fe5a 	bl	800c180 <uxr_prepare_output_stream>
 80114cc:	b910      	cbnz	r0, 80114d4 <rmw_send_response+0x74>
 80114ce:	2001      	movs	r0, #1
 80114d0:	b011      	add	sp, #68	; 0x44
 80114d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114d4:	a902      	add	r1, sp, #8
 80114d6:	a808      	add	r0, sp, #32
 80114d8:	f7fb ff8a 	bl	800d3f0 <uxr_serialize_SampleIdentity>
 80114dc:	68a3      	ldr	r3, [r4, #8]
 80114de:	a908      	add	r1, sp, #32
 80114e0:	4630      	mov	r0, r6
 80114e2:	4798      	blx	r3
 80114e4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80114e8:	6938      	ldr	r0, [r7, #16]
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d00a      	beq.n	8011504 <rmw_send_response+0xa4>
 80114ee:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80114f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80114f4:	f7fa f858 	bl	800b5a8 <uxr_run_session_until_confirm_delivery>
 80114f8:	2000      	movs	r0, #0
 80114fa:	b011      	add	sp, #68	; 0x44
 80114fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114fe:	200c      	movs	r0, #12
 8011500:	b011      	add	sp, #68	; 0x44
 8011502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011504:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011508:	f7f9 fc8e 	bl	800ae28 <uxr_flash_output_streams>
 801150c:	2000      	movs	r0, #0
 801150e:	b011      	add	sp, #68	; 0x44
 8011510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011512:	bf00      	nop
 8011514:	0801630c 	.word	0x0801630c

08011518 <rmw_take_response>:
 8011518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151c:	4604      	mov	r4, r0
 801151e:	6800      	ldr	r0, [r0, #0]
 8011520:	b088      	sub	sp, #32
 8011522:	4688      	mov	r8, r1
 8011524:	4617      	mov	r7, r2
 8011526:	461d      	mov	r5, r3
 8011528:	b120      	cbz	r0, 8011534 <rmw_take_response+0x1c>
 801152a:	4b1e      	ldr	r3, [pc, #120]	; (80115a4 <rmw_take_response+0x8c>)
 801152c:	6819      	ldr	r1, [r3, #0]
 801152e:	f7ee fe57 	bl	80001e0 <strcmp>
 8011532:	bb78      	cbnz	r0, 8011594 <rmw_take_response+0x7c>
 8011534:	b10d      	cbz	r5, 801153a <rmw_take_response+0x22>
 8011536:	2300      	movs	r3, #0
 8011538:	702b      	strb	r3, [r5, #0]
 801153a:	6864      	ldr	r4, [r4, #4]
 801153c:	f7f7 fe40 	bl	80091c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8011540:	4620      	mov	r0, r4
 8011542:	f7f7 fe15 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011546:	4606      	mov	r6, r0
 8011548:	b340      	cbz	r0, 801159c <rmw_take_response+0x84>
 801154a:	6963      	ldr	r3, [r4, #20]
 801154c:	6884      	ldr	r4, [r0, #8]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8011554:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8011558:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801155c:	4798      	blx	r3
 801155e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011562:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8011566:	f104 0110 	add.w	r1, r4, #16
 801156a:	4668      	mov	r0, sp
 801156c:	f7f9 f89a 	bl	800a6a4 <ucdr_init_buffer>
 8011570:	4639      	mov	r1, r7
 8011572:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011576:	4668      	mov	r0, sp
 8011578:	4798      	blx	r3
 801157a:	4631      	mov	r1, r6
 801157c:	4604      	mov	r4, r0
 801157e:	480a      	ldr	r0, [pc, #40]	; (80115a8 <rmw_take_response+0x90>)
 8011580:	f7ff fa7e 	bl	8010a80 <put_memory>
 8011584:	b105      	cbz	r5, 8011588 <rmw_take_response+0x70>
 8011586:	702c      	strb	r4, [r5, #0]
 8011588:	f084 0001 	eor.w	r0, r4, #1
 801158c:	b2c0      	uxtb	r0, r0
 801158e:	b008      	add	sp, #32
 8011590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011594:	200c      	movs	r0, #12
 8011596:	b008      	add	sp, #32
 8011598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801159c:	2001      	movs	r0, #1
 801159e:	b008      	add	sp, #32
 80115a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a4:	0801630c 	.word	0x0801630c
 80115a8:	20012864 	.word	0x20012864

080115ac <rmw_destroy_service>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	b128      	cbz	r0, 80115bc <rmw_destroy_service+0x10>
 80115b0:	4604      	mov	r4, r0
 80115b2:	6800      	ldr	r0, [r0, #0]
 80115b4:	460d      	mov	r5, r1
 80115b6:	f7f7 ff01 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 80115ba:	b910      	cbnz	r0, 80115c2 <rmw_destroy_service+0x16>
 80115bc:	2401      	movs	r4, #1
 80115be:	4620      	mov	r0, r4
 80115c0:	bd70      	pop	{r4, r5, r6, pc}
 80115c2:	6863      	ldr	r3, [r4, #4]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d0f9      	beq.n	80115bc <rmw_destroy_service+0x10>
 80115c8:	2d00      	cmp	r5, #0
 80115ca:	d0f7      	beq.n	80115bc <rmw_destroy_service+0x10>
 80115cc:	6828      	ldr	r0, [r5, #0]
 80115ce:	f7f7 fef5 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 80115d2:	2800      	cmp	r0, #0
 80115d4:	d0f2      	beq.n	80115bc <rmw_destroy_service+0x10>
 80115d6:	686e      	ldr	r6, [r5, #4]
 80115d8:	2e00      	cmp	r6, #0
 80115da:	d0ef      	beq.n	80115bc <rmw_destroy_service+0x10>
 80115dc:	6864      	ldr	r4, [r4, #4]
 80115de:	6932      	ldr	r2, [r6, #16]
 80115e0:	6920      	ldr	r0, [r4, #16]
 80115e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80115e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80115ea:	6819      	ldr	r1, [r3, #0]
 80115ec:	f001 fb98 	bl	8012d20 <uxr_buffer_cancel_data>
 80115f0:	4602      	mov	r2, r0
 80115f2:	6920      	ldr	r0, [r4, #16]
 80115f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80115f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80115fc:	f7f7 fe5e 	bl	80092bc <run_xrce_session>
 8011600:	6920      	ldr	r0, [r4, #16]
 8011602:	6932      	ldr	r2, [r6, #16]
 8011604:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011608:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801160c:	6819      	ldr	r1, [r3, #0]
 801160e:	f7f9 f8b9 	bl	800a784 <uxr_buffer_delete_entity>
 8011612:	4602      	mov	r2, r0
 8011614:	6920      	ldr	r0, [r4, #16]
 8011616:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801161a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801161e:	f7f7 fe4d 	bl	80092bc <run_xrce_session>
 8011622:	2800      	cmp	r0, #0
 8011624:	4628      	mov	r0, r5
 8011626:	bf14      	ite	ne
 8011628:	2400      	movne	r4, #0
 801162a:	2402      	moveq	r4, #2
 801162c:	f7f7 fd18 	bl	8009060 <rmw_uxrce_fini_service_memory>
 8011630:	e7c5      	b.n	80115be <rmw_destroy_service+0x12>
 8011632:	bf00      	nop

08011634 <rmw_create_subscription>:
 8011634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011638:	b08d      	sub	sp, #52	; 0x34
 801163a:	2800      	cmp	r0, #0
 801163c:	f000 80d1 	beq.w	80117e2 <rmw_create_subscription+0x1ae>
 8011640:	460e      	mov	r6, r1
 8011642:	2900      	cmp	r1, #0
 8011644:	f000 80cd 	beq.w	80117e2 <rmw_create_subscription+0x1ae>
 8011648:	4604      	mov	r4, r0
 801164a:	6800      	ldr	r0, [r0, #0]
 801164c:	4615      	mov	r5, r2
 801164e:	4698      	mov	r8, r3
 8011650:	f7f7 feb4 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 8011654:	2800      	cmp	r0, #0
 8011656:	f000 80c4 	beq.w	80117e2 <rmw_create_subscription+0x1ae>
 801165a:	2d00      	cmp	r5, #0
 801165c:	f000 80c1 	beq.w	80117e2 <rmw_create_subscription+0x1ae>
 8011660:	782b      	ldrb	r3, [r5, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 80bd 	beq.w	80117e2 <rmw_create_subscription+0x1ae>
 8011668:	f1b8 0f00 	cmp.w	r8, #0
 801166c:	f000 80b9 	beq.w	80117e2 <rmw_create_subscription+0x1ae>
 8011670:	485e      	ldr	r0, [pc, #376]	; (80117ec <rmw_create_subscription+0x1b8>)
 8011672:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011676:	f7ff f9f3 	bl	8010a60 <get_memory>
 801167a:	4604      	mov	r4, r0
 801167c:	2800      	cmp	r0, #0
 801167e:	f000 80b1 	beq.w	80117e4 <rmw_create_subscription+0x1b0>
 8011682:	6887      	ldr	r7, [r0, #8]
 8011684:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8011688:	f7ff fa52 	bl	8010b30 <rmw_get_implementation_identifier>
 801168c:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8011690:	67f8      	str	r0, [r7, #124]	; 0x7c
 8011692:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8011696:	4628      	mov	r0, r5
 8011698:	f7ee fdac 	bl	80001f4 <strlen>
 801169c:	3001      	adds	r0, #1
 801169e:	283c      	cmp	r0, #60	; 0x3c
 80116a0:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80116a4:	f200 8096 	bhi.w	80117d4 <rmw_create_subscription+0x1a0>
 80116a8:	4a51      	ldr	r2, [pc, #324]	; (80117f0 <rmw_create_subscription+0x1bc>)
 80116aa:	462b      	mov	r3, r5
 80116ac:	213c      	movs	r1, #60	; 0x3c
 80116ae:	4650      	mov	r0, sl
 80116b0:	f003 f848 	bl	8014744 <sniprintf>
 80116b4:	4641      	mov	r1, r8
 80116b6:	f8c7 9020 	str.w	r9, [r7, #32]
 80116ba:	2250      	movs	r2, #80	; 0x50
 80116bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80116c0:	f003 f9e3 	bl	8014a8a <memcpy>
 80116c4:	494b      	ldr	r1, [pc, #300]	; (80117f4 <rmw_create_subscription+0x1c0>)
 80116c6:	4630      	mov	r0, r6
 80116c8:	f7f7 fe86 	bl	80093d8 <get_message_typesupport_handle>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	f000 8081 	beq.w	80117d4 <rmw_create_subscription+0x1a0>
 80116d2:	6842      	ldr	r2, [r0, #4]
 80116d4:	61ba      	str	r2, [r7, #24]
 80116d6:	2a00      	cmp	r2, #0
 80116d8:	d07c      	beq.n	80117d4 <rmw_create_subscription+0x1a0>
 80116da:	4629      	mov	r1, r5
 80116dc:	4643      	mov	r3, r8
 80116de:	4648      	mov	r0, r9
 80116e0:	f7ff fc8c 	bl	8010ffc <create_topic>
 80116e4:	61f8      	str	r0, [r7, #28]
 80116e6:	2800      	cmp	r0, #0
 80116e8:	d078      	beq.n	80117dc <rmw_create_subscription+0x1a8>
 80116ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80116ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116f2:	2104      	movs	r1, #4
 80116f4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80116f8:	1c42      	adds	r2, r0, #1
 80116fa:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80116fe:	f7f9 fa43 	bl	800ab88 <uxr_object_id>
 8011702:	6138      	str	r0, [r7, #16]
 8011704:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011708:	2506      	movs	r5, #6
 801170a:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801170e:	9500      	str	r5, [sp, #0]
 8011710:	6819      	ldr	r1, [r3, #0]
 8011712:	693a      	ldr	r2, [r7, #16]
 8011714:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011718:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801171c:	f7f9 f916 	bl	800a94c <uxr_buffer_create_subscriber_bin>
 8011720:	4602      	mov	r2, r0
 8011722:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011726:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801172a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801172e:	f7f7 fdc5 	bl	80092bc <run_xrce_session>
 8011732:	2800      	cmp	r0, #0
 8011734:	d04e      	beq.n	80117d4 <rmw_create_subscription+0x1a0>
 8011736:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801173a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801173e:	4629      	mov	r1, r5
 8011740:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8011744:	1c42      	adds	r2, r0, #1
 8011746:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801174a:	f7f9 fa1d 	bl	800ab88 <uxr_object_id>
 801174e:	ae08      	add	r6, sp, #32
 8011750:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	6178      	str	r0, [r7, #20]
 8011758:	4641      	mov	r1, r8
 801175a:	4630      	mov	r0, r6
 801175c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8011760:	9305      	str	r3, [sp, #20]
 8011762:	f7f7 fdc7 	bl	80092f4 <convert_qos_profile>
 8011766:	9503      	str	r5, [sp, #12]
 8011768:	e896 0003 	ldmia.w	r6, {r0, r1}
 801176c:	9b05      	ldr	r3, [sp, #20]
 801176e:	9001      	str	r0, [sp, #4]
 8011770:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801177c:	f8db 1000 	ldr.w	r1, [fp]
 8011780:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8011784:	f7f9 f988 	bl	800aa98 <uxr_buffer_create_datareader_bin>
 8011788:	4602      	mov	r2, r0
 801178a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801178e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011792:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011796:	f7f7 fd91 	bl	80092bc <run_xrce_session>
 801179a:	b1d8      	cbz	r0, 80117d4 <rmw_create_subscription+0x1a0>
 801179c:	f898 3008 	ldrb.w	r3, [r8, #8]
 80117a0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80117a4:	2b02      	cmp	r3, #2
 80117a6:	bf0c      	ite	eq
 80117a8:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80117ac:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80117b0:	9307      	str	r3, [sp, #28]
 80117b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80117b6:	2200      	movs	r2, #0
 80117b8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80117bc:	ab0a      	add	r3, sp, #40	; 0x28
 80117be:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80117c2:	9300      	str	r3, [sp, #0]
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	9b07      	ldr	r3, [sp, #28]
 80117c8:	6809      	ldr	r1, [r1, #0]
 80117ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80117ce:	f001 fa6d 	bl	8012cac <uxr_buffer_request_data>
 80117d2:	e007      	b.n	80117e4 <rmw_create_subscription+0x1b0>
 80117d4:	69f8      	ldr	r0, [r7, #28]
 80117d6:	b108      	cbz	r0, 80117dc <rmw_create_subscription+0x1a8>
 80117d8:	f7f7 fc6e 	bl	80090b8 <rmw_uxrce_fini_topic_memory>
 80117dc:	4620      	mov	r0, r4
 80117de:	f7f7 fc29 	bl	8009034 <rmw_uxrce_fini_subscription_memory>
 80117e2:	2400      	movs	r4, #0
 80117e4:	4620      	mov	r0, r4
 80117e6:	b00d      	add	sp, #52	; 0x34
 80117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ec:	20012874 	.word	0x20012874
 80117f0:	08015bec 	.word	0x08015bec
 80117f4:	08015bb8 	.word	0x08015bb8

080117f8 <rmw_subscription_get_actual_qos>:
 80117f8:	b150      	cbz	r0, 8011810 <rmw_subscription_get_actual_qos+0x18>
 80117fa:	b508      	push	{r3, lr}
 80117fc:	460b      	mov	r3, r1
 80117fe:	b149      	cbz	r1, 8011814 <rmw_subscription_get_actual_qos+0x1c>
 8011800:	6841      	ldr	r1, [r0, #4]
 8011802:	2250      	movs	r2, #80	; 0x50
 8011804:	3128      	adds	r1, #40	; 0x28
 8011806:	4618      	mov	r0, r3
 8011808:	f003 f93f 	bl	8014a8a <memcpy>
 801180c:	2000      	movs	r0, #0
 801180e:	bd08      	pop	{r3, pc}
 8011810:	200b      	movs	r0, #11
 8011812:	4770      	bx	lr
 8011814:	200b      	movs	r0, #11
 8011816:	bd08      	pop	{r3, pc}

08011818 <rmw_destroy_subscription>:
 8011818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181a:	b128      	cbz	r0, 8011828 <rmw_destroy_subscription+0x10>
 801181c:	4604      	mov	r4, r0
 801181e:	6800      	ldr	r0, [r0, #0]
 8011820:	460d      	mov	r5, r1
 8011822:	f7f7 fdcb 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 8011826:	b910      	cbnz	r0, 801182e <rmw_destroy_subscription+0x16>
 8011828:	2401      	movs	r4, #1
 801182a:	4620      	mov	r0, r4
 801182c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801182e:	6863      	ldr	r3, [r4, #4]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d0f9      	beq.n	8011828 <rmw_destroy_subscription+0x10>
 8011834:	2d00      	cmp	r5, #0
 8011836:	d0f7      	beq.n	8011828 <rmw_destroy_subscription+0x10>
 8011838:	6828      	ldr	r0, [r5, #0]
 801183a:	f7f7 fdbf 	bl	80093bc <is_uxrce_rmw_identifier_valid>
 801183e:	2800      	cmp	r0, #0
 8011840:	d0f2      	beq.n	8011828 <rmw_destroy_subscription+0x10>
 8011842:	686c      	ldr	r4, [r5, #4]
 8011844:	2c00      	cmp	r4, #0
 8011846:	d0ef      	beq.n	8011828 <rmw_destroy_subscription+0x10>
 8011848:	6a26      	ldr	r6, [r4, #32]
 801184a:	6962      	ldr	r2, [r4, #20]
 801184c:	6930      	ldr	r0, [r6, #16]
 801184e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011852:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011856:	6819      	ldr	r1, [r3, #0]
 8011858:	f001 fa62 	bl	8012d20 <uxr_buffer_cancel_data>
 801185c:	4602      	mov	r2, r0
 801185e:	6930      	ldr	r0, [r6, #16]
 8011860:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011864:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011868:	f7f7 fd28 	bl	80092bc <run_xrce_session>
 801186c:	69e0      	ldr	r0, [r4, #28]
 801186e:	f7ff fc15 	bl	801109c <destroy_topic>
 8011872:	6a23      	ldr	r3, [r4, #32]
 8011874:	6962      	ldr	r2, [r4, #20]
 8011876:	6918      	ldr	r0, [r3, #16]
 8011878:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801187c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011880:	6819      	ldr	r1, [r3, #0]
 8011882:	f7f8 ff7f 	bl	800a784 <uxr_buffer_delete_entity>
 8011886:	6a23      	ldr	r3, [r4, #32]
 8011888:	6922      	ldr	r2, [r4, #16]
 801188a:	691b      	ldr	r3, [r3, #16]
 801188c:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8011890:	4604      	mov	r4, r0
 8011892:	6809      	ldr	r1, [r1, #0]
 8011894:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8011898:	f7f8 ff74 	bl	800a784 <uxr_buffer_delete_entity>
 801189c:	6937      	ldr	r7, [r6, #16]
 801189e:	4622      	mov	r2, r4
 80118a0:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80118a4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80118a8:	4604      	mov	r4, r0
 80118aa:	4638      	mov	r0, r7
 80118ac:	f7f7 fd06 	bl	80092bc <run_xrce_session>
 80118b0:	6936      	ldr	r6, [r6, #16]
 80118b2:	4622      	mov	r2, r4
 80118b4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80118b8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80118bc:	4604      	mov	r4, r0
 80118be:	4630      	mov	r0, r6
 80118c0:	f7f7 fcfc 	bl	80092bc <run_xrce_session>
 80118c4:	b12c      	cbz	r4, 80118d2 <rmw_destroy_subscription+0xba>
 80118c6:	b120      	cbz	r0, 80118d2 <rmw_destroy_subscription+0xba>
 80118c8:	2400      	movs	r4, #0
 80118ca:	4628      	mov	r0, r5
 80118cc:	f7f7 fbb2 	bl	8009034 <rmw_uxrce_fini_subscription_memory>
 80118d0:	e7ab      	b.n	801182a <rmw_destroy_subscription+0x12>
 80118d2:	2402      	movs	r4, #2
 80118d4:	e7f9      	b.n	80118ca <rmw_destroy_subscription+0xb2>
 80118d6:	bf00      	nop

080118d8 <rmw_take_with_info>:
 80118d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118da:	4604      	mov	r4, r0
 80118dc:	6800      	ldr	r0, [r0, #0]
 80118de:	b089      	sub	sp, #36	; 0x24
 80118e0:	460f      	mov	r7, r1
 80118e2:	4615      	mov	r5, r2
 80118e4:	b128      	cbz	r0, 80118f2 <rmw_take_with_info+0x1a>
 80118e6:	4b24      	ldr	r3, [pc, #144]	; (8011978 <rmw_take_with_info+0xa0>)
 80118e8:	6819      	ldr	r1, [r3, #0]
 80118ea:	f7ee fc79 	bl	80001e0 <strcmp>
 80118ee:	2800      	cmp	r0, #0
 80118f0:	d13e      	bne.n	8011970 <rmw_take_with_info+0x98>
 80118f2:	b305      	cbz	r5, 8011936 <rmw_take_with_info+0x5e>
 80118f4:	6864      	ldr	r4, [r4, #4]
 80118f6:	2300      	movs	r3, #0
 80118f8:	702b      	strb	r3, [r5, #0]
 80118fa:	f7f7 fc61 	bl	80091c0 <rmw_uxrce_clean_expired_static_input_buffer>
 80118fe:	4620      	mov	r0, r4
 8011900:	f7f7 fc36 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011904:	4606      	mov	r6, r0
 8011906:	b1f0      	cbz	r0, 8011946 <rmw_take_with_info+0x6e>
 8011908:	6881      	ldr	r1, [r0, #8]
 801190a:	4668      	mov	r0, sp
 801190c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8011910:	3110      	adds	r1, #16
 8011912:	f7f8 fec7 	bl	800a6a4 <ucdr_init_buffer>
 8011916:	69a3      	ldr	r3, [r4, #24]
 8011918:	4639      	mov	r1, r7
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	4668      	mov	r0, sp
 801191e:	4798      	blx	r3
 8011920:	4631      	mov	r1, r6
 8011922:	4604      	mov	r4, r0
 8011924:	4815      	ldr	r0, [pc, #84]	; (801197c <rmw_take_with_info+0xa4>)
 8011926:	f7ff f8ab 	bl	8010a80 <put_memory>
 801192a:	702c      	strb	r4, [r5, #0]
 801192c:	f084 0001 	eor.w	r0, r4, #1
 8011930:	b2c0      	uxtb	r0, r0
 8011932:	b009      	add	sp, #36	; 0x24
 8011934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011936:	6864      	ldr	r4, [r4, #4]
 8011938:	f7f7 fc42 	bl	80091c0 <rmw_uxrce_clean_expired_static_input_buffer>
 801193c:	4620      	mov	r0, r4
 801193e:	f7f7 fc17 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011942:	4605      	mov	r5, r0
 8011944:	b910      	cbnz	r0, 801194c <rmw_take_with_info+0x74>
 8011946:	2001      	movs	r0, #1
 8011948:	b009      	add	sp, #36	; 0x24
 801194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801194c:	68a9      	ldr	r1, [r5, #8]
 801194e:	4668      	mov	r0, sp
 8011950:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8011954:	3110      	adds	r1, #16
 8011956:	f7f8 fea5 	bl	800a6a4 <ucdr_init_buffer>
 801195a:	69a3      	ldr	r3, [r4, #24]
 801195c:	4639      	mov	r1, r7
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	4668      	mov	r0, sp
 8011962:	4798      	blx	r3
 8011964:	4629      	mov	r1, r5
 8011966:	4604      	mov	r4, r0
 8011968:	4804      	ldr	r0, [pc, #16]	; (801197c <rmw_take_with_info+0xa4>)
 801196a:	f7ff f889 	bl	8010a80 <put_memory>
 801196e:	e7dd      	b.n	801192c <rmw_take_with_info+0x54>
 8011970:	200c      	movs	r0, #12
 8011972:	b009      	add	sp, #36	; 0x24
 8011974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011976:	bf00      	nop
 8011978:	0801630c 	.word	0x0801630c
 801197c:	20012864 	.word	0x20012864

08011980 <rmw_uxrce_transport_init>:
 8011980:	b508      	push	{r3, lr}
 8011982:	b108      	cbz	r0, 8011988 <rmw_uxrce_transport_init+0x8>
 8011984:	f100 0210 	add.w	r2, r0, #16
 8011988:	b139      	cbz	r1, 801199a <rmw_uxrce_transport_init+0x1a>
 801198a:	6949      	ldr	r1, [r1, #20]
 801198c:	4610      	mov	r0, r2
 801198e:	f000 fc0d 	bl	80121ac <uxr_init_custom_transport>
 8011992:	f080 0001 	eor.w	r0, r0, #1
 8011996:	b2c0      	uxtb	r0, r0
 8011998:	bd08      	pop	{r3, pc}
 801199a:	4b04      	ldr	r3, [pc, #16]	; (80119ac <rmw_uxrce_transport_init+0x2c>)
 801199c:	4610      	mov	r0, r2
 801199e:	6859      	ldr	r1, [r3, #4]
 80119a0:	f000 fc04 	bl	80121ac <uxr_init_custom_transport>
 80119a4:	f080 0001 	eor.w	r0, r0, #1
 80119a8:	b2c0      	uxtb	r0, r0
 80119aa:	bd08      	pop	{r3, pc}
 80119ac:	2000df3c 	.word	0x2000df3c

080119b0 <rmw_wait>:
 80119b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119b4:	b089      	sub	sp, #36	; 0x24
 80119b6:	4605      	mov	r5, r0
 80119b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80119ba:	460e      	mov	r6, r1
 80119bc:	4698      	mov	r8, r3
 80119be:	4691      	mov	r9, r2
 80119c0:	2a00      	cmp	r2, #0
 80119c2:	f000 810a 	beq.w	8011bda <rmw_wait+0x22a>
 80119c6:	b16c      	cbz	r4, 80119e4 <rmw_wait+0x34>
 80119c8:	4bae      	ldr	r3, [pc, #696]	; (8011c84 <rmw_wait+0x2d4>)
 80119ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119cc:	af04      	add	r7, sp, #16
 80119ce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80119d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80119d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80119da:	f7fe fe75 	bl	80106c8 <rmw_time_equal>
 80119de:	2800      	cmp	r0, #0
 80119e0:	f000 8127 	beq.w	8011c32 <rmw_wait+0x282>
 80119e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80119e8:	f7f7 fbea 	bl	80091c0 <rmw_uxrce_clean_expired_static_input_buffer>
 80119ec:	4ba6      	ldr	r3, [pc, #664]	; (8011c88 <rmw_wait+0x2d8>)
 80119ee:	681c      	ldr	r4, [r3, #0]
 80119f0:	b14c      	cbz	r4, 8011a06 <rmw_wait+0x56>
 80119f2:	4623      	mov	r3, r4
 80119f4:	2100      	movs	r1, #0
 80119f6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80119fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80119fe:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d1f7      	bne.n	80119f6 <rmw_wait+0x46>
 8011a06:	f1b9 0f00 	cmp.w	r9, #0
 8011a0a:	d011      	beq.n	8011a30 <rmw_wait+0x80>
 8011a0c:	f8d9 1000 	ldr.w	r1, [r9]
 8011a10:	b171      	cbz	r1, 8011a30 <rmw_wait+0x80>
 8011a12:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8011a16:	2300      	movs	r3, #0
 8011a18:	2001      	movs	r0, #1
 8011a1a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011a1e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8011a20:	6912      	ldr	r2, [r2, #16]
 8011a22:	3301      	adds	r3, #1
 8011a24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011a28:	4299      	cmp	r1, r3
 8011a2a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8011a2e:	d1f4      	bne.n	8011a1a <rmw_wait+0x6a>
 8011a30:	f1b8 0f00 	cmp.w	r8, #0
 8011a34:	d011      	beq.n	8011a5a <rmw_wait+0xaa>
 8011a36:	f8d8 1000 	ldr.w	r1, [r8]
 8011a3a:	b171      	cbz	r1, 8011a5a <rmw_wait+0xaa>
 8011a3c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8011a40:	2300      	movs	r3, #0
 8011a42:	2001      	movs	r0, #1
 8011a44:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011a48:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8011a4a:	6912      	ldr	r2, [r2, #16]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011a52:	4299      	cmp	r1, r3
 8011a54:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8011a58:	d1f4      	bne.n	8011a44 <rmw_wait+0x94>
 8011a5a:	b185      	cbz	r5, 8011a7e <rmw_wait+0xce>
 8011a5c:	6829      	ldr	r1, [r5, #0]
 8011a5e:	b171      	cbz	r1, 8011a7e <rmw_wait+0xce>
 8011a60:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8011a64:	2300      	movs	r3, #0
 8011a66:	2001      	movs	r0, #1
 8011a68:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011a6c:	6a12      	ldr	r2, [r2, #32]
 8011a6e:	6912      	ldr	r2, [r2, #16]
 8011a70:	3301      	adds	r3, #1
 8011a72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011a76:	4299      	cmp	r1, r3
 8011a78:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8011a7c:	d1f4      	bne.n	8011a68 <rmw_wait+0xb8>
 8011a7e:	b34c      	cbz	r4, 8011ad4 <rmw_wait+0x124>
 8011a80:	4622      	mov	r2, r4
 8011a82:	2300      	movs	r3, #0
 8011a84:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8011a88:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8011a8c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8011a90:	440b      	add	r3, r1
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2a00      	cmp	r2, #0
 8011a96:	d1f5      	bne.n	8011a84 <rmw_wait+0xd4>
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f000 8084 	beq.w	8011ba6 <rmw_wait+0x1f6>
 8011a9e:	1c7a      	adds	r2, r7, #1
 8011aa0:	d00d      	beq.n	8011abe <rmw_wait+0x10e>
 8011aa2:	ee07 7a90 	vmov	s15, r7
 8011aa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011aaa:	ee07 3a90 	vmov	s15, r3
 8011aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ab6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8011aba:	ee17 7a90 	vmov	r7, s15
 8011abe:	68a0      	ldr	r0, [r4, #8]
 8011ac0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8011ac4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f040 8090 	bne.w	8011bee <rmw_wait+0x23e>
 8011ace:	6864      	ldr	r4, [r4, #4]
 8011ad0:	2c00      	cmp	r4, #0
 8011ad2:	d1f4      	bne.n	8011abe <rmw_wait+0x10e>
 8011ad4:	f1b9 0f00 	cmp.w	r9, #0
 8011ad8:	f000 80bc 	beq.w	8011c54 <rmw_wait+0x2a4>
 8011adc:	f8d9 7000 	ldr.w	r7, [r9]
 8011ae0:	2f00      	cmp	r7, #0
 8011ae2:	f000 808e 	beq.w	8011c02 <rmw_wait+0x252>
 8011ae6:	2400      	movs	r4, #0
 8011ae8:	4627      	mov	r7, r4
 8011aea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011aee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011af2:	f7f7 fb3d 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d05f      	beq.n	8011bba <rmw_wait+0x20a>
 8011afa:	f8d9 3000 	ldr.w	r3, [r9]
 8011afe:	3401      	adds	r4, #1
 8011b00:	42a3      	cmp	r3, r4
 8011b02:	f04f 0701 	mov.w	r7, #1
 8011b06:	d8f0      	bhi.n	8011aea <rmw_wait+0x13a>
 8011b08:	f1b8 0f00 	cmp.w	r8, #0
 8011b0c:	d012      	beq.n	8011b34 <rmw_wait+0x184>
 8011b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8011b12:	b17b      	cbz	r3, 8011b34 <rmw_wait+0x184>
 8011b14:	2400      	movs	r4, #0
 8011b16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011b1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011b1e:	f7f7 fb27 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d051      	beq.n	8011bca <rmw_wait+0x21a>
 8011b26:	f8d8 3000 	ldr.w	r3, [r8]
 8011b2a:	3401      	adds	r4, #1
 8011b2c:	42a3      	cmp	r3, r4
 8011b2e:	f04f 0701 	mov.w	r7, #1
 8011b32:	d8f0      	bhi.n	8011b16 <rmw_wait+0x166>
 8011b34:	b1dd      	cbz	r5, 8011b6e <rmw_wait+0x1be>
 8011b36:	682b      	ldr	r3, [r5, #0]
 8011b38:	b1cb      	cbz	r3, 8011b6e <rmw_wait+0x1be>
 8011b3a:	2400      	movs	r4, #0
 8011b3c:	686b      	ldr	r3, [r5, #4]
 8011b3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011b42:	f7f7 fb15 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011b46:	b158      	cbz	r0, 8011b60 <rmw_wait+0x1b0>
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	3401      	adds	r4, #1
 8011b4c:	42a3      	cmp	r3, r4
 8011b4e:	d969      	bls.n	8011c24 <rmw_wait+0x274>
 8011b50:	686b      	ldr	r3, [r5, #4]
 8011b52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011b56:	2701      	movs	r7, #1
 8011b58:	f7f7 fb0a 	bl	8009170 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	d1f3      	bne.n	8011b48 <rmw_wait+0x198>
 8011b60:	e9d5 3200 	ldrd	r3, r2, [r5]
 8011b64:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011b68:	3401      	adds	r4, #1
 8011b6a:	42a3      	cmp	r3, r4
 8011b6c:	d8e6      	bhi.n	8011b3c <rmw_wait+0x18c>
 8011b6e:	b1a6      	cbz	r6, 8011b9a <rmw_wait+0x1ea>
 8011b70:	6834      	ldr	r4, [r6, #0]
 8011b72:	b194      	cbz	r4, 8011b9a <rmw_wait+0x1ea>
 8011b74:	2300      	movs	r3, #0
 8011b76:	461d      	mov	r5, r3
 8011b78:	e004      	b.n	8011b84 <rmw_wait+0x1d4>
 8011b7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8011b7e:	3301      	adds	r3, #1
 8011b80:	42a3      	cmp	r3, r4
 8011b82:	d00a      	beq.n	8011b9a <rmw_wait+0x1ea>
 8011b84:	6870      	ldr	r0, [r6, #4]
 8011b86:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8011b8a:	7c0a      	ldrb	r2, [r1, #16]
 8011b8c:	2a00      	cmp	r2, #0
 8011b8e:	d0f4      	beq.n	8011b7a <rmw_wait+0x1ca>
 8011b90:	3301      	adds	r3, #1
 8011b92:	42a3      	cmp	r3, r4
 8011b94:	740d      	strb	r5, [r1, #16]
 8011b96:	4617      	mov	r7, r2
 8011b98:	d1f4      	bne.n	8011b84 <rmw_wait+0x1d4>
 8011b9a:	2f00      	cmp	r7, #0
 8011b9c:	d03e      	beq.n	8011c1c <rmw_wait+0x26c>
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	b009      	add	sp, #36	; 0x24
 8011ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ba6:	68a0      	ldr	r0, [r4, #8]
 8011ba8:	2100      	movs	r1, #0
 8011baa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011bae:	f7f9 fcc1 	bl	800b534 <uxr_run_session_timeout>
 8011bb2:	6864      	ldr	r4, [r4, #4]
 8011bb4:	2c00      	cmp	r4, #0
 8011bb6:	d1f6      	bne.n	8011ba6 <rmw_wait+0x1f6>
 8011bb8:	e78c      	b.n	8011ad4 <rmw_wait+0x124>
 8011bba:	e9d9 3200 	ldrd	r3, r2, [r9]
 8011bbe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011bc2:	3401      	adds	r4, #1
 8011bc4:	42a3      	cmp	r3, r4
 8011bc6:	d890      	bhi.n	8011aea <rmw_wait+0x13a>
 8011bc8:	e79e      	b.n	8011b08 <rmw_wait+0x158>
 8011bca:	e9d8 3200 	ldrd	r3, r2, [r8]
 8011bce:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011bd2:	3401      	adds	r4, #1
 8011bd4:	429c      	cmp	r4, r3
 8011bd6:	d39e      	bcc.n	8011b16 <rmw_wait+0x166>
 8011bd8:	e7ac      	b.n	8011b34 <rmw_wait+0x184>
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f47f aef3 	bne.w	80119c6 <rmw_wait+0x16>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f47f aef0 	bne.w	80119c6 <rmw_wait+0x16>
 8011be6:	2900      	cmp	r1, #0
 8011be8:	f47f aeed 	bne.w	80119c6 <rmw_wait+0x16>
 8011bec:	e7d7      	b.n	8011b9e <rmw_wait+0x1ee>
 8011bee:	4639      	mov	r1, r7
 8011bf0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011bf4:	f7f9 fcb8 	bl	800b568 <uxr_run_session_until_data>
 8011bf8:	6864      	ldr	r4, [r4, #4]
 8011bfa:	2c00      	cmp	r4, #0
 8011bfc:	f47f af5f 	bne.w	8011abe <rmw_wait+0x10e>
 8011c00:	e768      	b.n	8011ad4 <rmw_wait+0x124>
 8011c02:	f1b8 0f00 	cmp.w	r8, #0
 8011c06:	d032      	beq.n	8011c6e <rmw_wait+0x2be>
 8011c08:	f8d8 3000 	ldr.w	r3, [r8]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d181      	bne.n	8011b14 <rmw_wait+0x164>
 8011c10:	461f      	mov	r7, r3
 8011c12:	2d00      	cmp	r5, #0
 8011c14:	d18f      	bne.n	8011b36 <rmw_wait+0x186>
 8011c16:	462f      	mov	r7, r5
 8011c18:	2e00      	cmp	r6, #0
 8011c1a:	d1a9      	bne.n	8011b70 <rmw_wait+0x1c0>
 8011c1c:	2002      	movs	r0, #2
 8011c1e:	b009      	add	sp, #36	; 0x24
 8011c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c24:	2e00      	cmp	r6, #0
 8011c26:	d0ba      	beq.n	8011b9e <rmw_wait+0x1ee>
 8011c28:	6834      	ldr	r4, [r6, #0]
 8011c2a:	2701      	movs	r7, #1
 8011c2c:	2c00      	cmp	r4, #0
 8011c2e:	d1a1      	bne.n	8011b74 <rmw_wait+0x1c4>
 8011c30:	e7b5      	b.n	8011b9e <rmw_wait+0x1ee>
 8011c32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011c36:	f7fe fd9b 	bl	8010770 <rmw_time_total_nsec>
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	4a13      	ldr	r2, [pc, #76]	; (8011c8c <rmw_wait+0x2dc>)
 8011c3e:	f7ee fb87 	bl	8000350 <__aeabi_uldivmod>
 8011c42:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8011c46:	f171 0300 	sbcs.w	r3, r1, #0
 8011c4a:	4607      	mov	r7, r0
 8011c4c:	bfa8      	it	ge
 8011c4e:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8011c52:	e6c9      	b.n	80119e8 <rmw_wait+0x38>
 8011c54:	f1b8 0f00 	cmp.w	r8, #0
 8011c58:	d009      	beq.n	8011c6e <rmw_wait+0x2be>
 8011c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8011c5e:	464f      	mov	r7, r9
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f47f af57 	bne.w	8011b14 <rmw_wait+0x164>
 8011c66:	2d00      	cmp	r5, #0
 8011c68:	f47f af65 	bne.w	8011b36 <rmw_wait+0x186>
 8011c6c:	e7d3      	b.n	8011c16 <rmw_wait+0x266>
 8011c6e:	b17d      	cbz	r5, 8011c90 <rmw_wait+0x2e0>
 8011c70:	682b      	ldr	r3, [r5, #0]
 8011c72:	4647      	mov	r7, r8
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	f47f af60 	bne.w	8011b3a <rmw_wait+0x18a>
 8011c7a:	2e00      	cmp	r6, #0
 8011c7c:	f47f af78 	bne.w	8011b70 <rmw_wait+0x1c0>
 8011c80:	e7cc      	b.n	8011c1c <rmw_wait+0x26c>
 8011c82:	bf00      	nop
 8011c84:	080159d0 	.word	0x080159d0
 8011c88:	20012854 	.word	0x20012854
 8011c8c:	000f4240 	.word	0x000f4240
 8011c90:	2e00      	cmp	r6, #0
 8011c92:	d0c3      	beq.n	8011c1c <rmw_wait+0x26c>
 8011c94:	6834      	ldr	r4, [r6, #0]
 8011c96:	462f      	mov	r7, r5
 8011c98:	2c00      	cmp	r4, #0
 8011c9a:	f47f af6b 	bne.w	8011b74 <rmw_wait+0x1c4>
 8011c9e:	e7bd      	b.n	8011c1c <rmw_wait+0x26c>

08011ca0 <rmw_create_wait_set>:
 8011ca0:	b508      	push	{r3, lr}
 8011ca2:	4803      	ldr	r0, [pc, #12]	; (8011cb0 <rmw_create_wait_set+0x10>)
 8011ca4:	f7fe fedc 	bl	8010a60 <get_memory>
 8011ca8:	b108      	cbz	r0, 8011cae <rmw_create_wait_set+0xe>
 8011caa:	6880      	ldr	r0, [r0, #8]
 8011cac:	3010      	adds	r0, #16
 8011cae:	bd08      	pop	{r3, pc}
 8011cb0:	20012894 	.word	0x20012894

08011cb4 <rmw_destroy_wait_set>:
 8011cb4:	b508      	push	{r3, lr}
 8011cb6:	4b08      	ldr	r3, [pc, #32]	; (8011cd8 <rmw_destroy_wait_set+0x24>)
 8011cb8:	6819      	ldr	r1, [r3, #0]
 8011cba:	b911      	cbnz	r1, 8011cc2 <rmw_destroy_wait_set+0xe>
 8011cbc:	e00a      	b.n	8011cd4 <rmw_destroy_wait_set+0x20>
 8011cbe:	6849      	ldr	r1, [r1, #4]
 8011cc0:	b141      	cbz	r1, 8011cd4 <rmw_destroy_wait_set+0x20>
 8011cc2:	688b      	ldr	r3, [r1, #8]
 8011cc4:	3310      	adds	r3, #16
 8011cc6:	4298      	cmp	r0, r3
 8011cc8:	d1f9      	bne.n	8011cbe <rmw_destroy_wait_set+0xa>
 8011cca:	4803      	ldr	r0, [pc, #12]	; (8011cd8 <rmw_destroy_wait_set+0x24>)
 8011ccc:	f7fe fed8 	bl	8010a80 <put_memory>
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	bd08      	pop	{r3, pc}
 8011cd4:	2001      	movs	r0, #1
 8011cd6:	bd08      	pop	{r3, pc}
 8011cd8:	20012894 	.word	0x20012894

08011cdc <rmw_uros_epoch_nanos>:
 8011cdc:	4b05      	ldr	r3, [pc, #20]	; (8011cf4 <rmw_uros_epoch_nanos+0x18>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	b123      	cbz	r3, 8011cec <rmw_uros_epoch_nanos+0x10>
 8011ce2:	6898      	ldr	r0, [r3, #8]
 8011ce4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011ce8:	f7f9 b894 	b.w	800ae14 <uxr_epoch_nanos>
 8011cec:	2000      	movs	r0, #0
 8011cee:	2100      	movs	r1, #0
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	20012854 	.word	0x20012854

08011cf8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8011cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cfc:	6805      	ldr	r5, [r0, #0]
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4628      	mov	r0, r5
 8011d02:	460e      	mov	r6, r1
 8011d04:	f7ee fa6c 	bl	80001e0 <strcmp>
 8011d08:	b1c8      	cbz	r0, 8011d3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011d0a:	4b11      	ldr	r3, [pc, #68]	; (8011d50 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	429d      	cmp	r5, r3
 8011d10:	d112      	bne.n	8011d38 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011d12:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011d16:	f8d8 4000 	ldr.w	r4, [r8]
 8011d1a:	b16c      	cbz	r4, 8011d38 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011d1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011d20:	2700      	movs	r7, #0
 8011d22:	3d04      	subs	r5, #4
 8011d24:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011d28:	4631      	mov	r1, r6
 8011d2a:	f7ee fa59 	bl	80001e0 <strcmp>
 8011d2e:	00bb      	lsls	r3, r7, #2
 8011d30:	b140      	cbz	r0, 8011d44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8011d32:	3701      	adds	r7, #1
 8011d34:	42bc      	cmp	r4, r7
 8011d36:	d1f5      	bne.n	8011d24 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011d38:	2000      	movs	r0, #0
 8011d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d3e:	4620      	mov	r0, r4
 8011d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4c:	58d3      	ldr	r3, [r2, r3]
 8011d4e:	4718      	bx	r3
 8011d50:	200000ac 	.word	0x200000ac

08011d54 <std_msgs__msg__Float32__init>:
 8011d54:	3800      	subs	r0, #0
 8011d56:	bf18      	it	ne
 8011d58:	2001      	movne	r0, #1
 8011d5a:	4770      	bx	lr

08011d5c <std_msgs__msg__Float32__fini>:
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop

08011d60 <ucdr_serialize_endian_array_char>:
 8011d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d64:	4619      	mov	r1, r3
 8011d66:	461f      	mov	r7, r3
 8011d68:	4605      	mov	r5, r0
 8011d6a:	4690      	mov	r8, r2
 8011d6c:	f7f8 fc46 	bl	800a5fc <ucdr_check_buffer_available_for>
 8011d70:	b9e0      	cbnz	r0, 8011dac <ucdr_serialize_endian_array_char+0x4c>
 8011d72:	463e      	mov	r6, r7
 8011d74:	e009      	b.n	8011d8a <ucdr_serialize_endian_array_char+0x2a>
 8011d76:	68a8      	ldr	r0, [r5, #8]
 8011d78:	f002 fe87 	bl	8014a8a <memcpy>
 8011d7c:	68ab      	ldr	r3, [r5, #8]
 8011d7e:	6928      	ldr	r0, [r5, #16]
 8011d80:	4423      	add	r3, r4
 8011d82:	4420      	add	r0, r4
 8011d84:	1b36      	subs	r6, r6, r4
 8011d86:	60ab      	str	r3, [r5, #8]
 8011d88:	6128      	str	r0, [r5, #16]
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	4628      	mov	r0, r5
 8011d90:	f7f8 fcbc 	bl	800a70c <ucdr_check_final_buffer_behavior_array>
 8011d94:	1bb9      	subs	r1, r7, r6
 8011d96:	4441      	add	r1, r8
 8011d98:	4604      	mov	r4, r0
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d1ea      	bne.n	8011d76 <ucdr_serialize_endian_array_char+0x16>
 8011da0:	2301      	movs	r3, #1
 8011da2:	7da8      	ldrb	r0, [r5, #22]
 8011da4:	756b      	strb	r3, [r5, #21]
 8011da6:	4058      	eors	r0, r3
 8011da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dac:	463a      	mov	r2, r7
 8011dae:	68a8      	ldr	r0, [r5, #8]
 8011db0:	4641      	mov	r1, r8
 8011db2:	f002 fe6a 	bl	8014a8a <memcpy>
 8011db6:	68aa      	ldr	r2, [r5, #8]
 8011db8:	692b      	ldr	r3, [r5, #16]
 8011dba:	443a      	add	r2, r7
 8011dbc:	443b      	add	r3, r7
 8011dbe:	60aa      	str	r2, [r5, #8]
 8011dc0:	612b      	str	r3, [r5, #16]
 8011dc2:	e7ed      	b.n	8011da0 <ucdr_serialize_endian_array_char+0x40>

08011dc4 <ucdr_deserialize_endian_array_char>:
 8011dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc8:	4619      	mov	r1, r3
 8011dca:	461f      	mov	r7, r3
 8011dcc:	4605      	mov	r5, r0
 8011dce:	4690      	mov	r8, r2
 8011dd0:	f7f8 fc14 	bl	800a5fc <ucdr_check_buffer_available_for>
 8011dd4:	b9e0      	cbnz	r0, 8011e10 <ucdr_deserialize_endian_array_char+0x4c>
 8011dd6:	463e      	mov	r6, r7
 8011dd8:	e009      	b.n	8011dee <ucdr_deserialize_endian_array_char+0x2a>
 8011dda:	68a9      	ldr	r1, [r5, #8]
 8011ddc:	f002 fe55 	bl	8014a8a <memcpy>
 8011de0:	68ab      	ldr	r3, [r5, #8]
 8011de2:	6928      	ldr	r0, [r5, #16]
 8011de4:	4423      	add	r3, r4
 8011de6:	4420      	add	r0, r4
 8011de8:	1b36      	subs	r6, r6, r4
 8011dea:	60ab      	str	r3, [r5, #8]
 8011dec:	6128      	str	r0, [r5, #16]
 8011dee:	2201      	movs	r2, #1
 8011df0:	4631      	mov	r1, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	f7f8 fc8a 	bl	800a70c <ucdr_check_final_buffer_behavior_array>
 8011df8:	4604      	mov	r4, r0
 8011dfa:	1bb8      	subs	r0, r7, r6
 8011dfc:	4440      	add	r0, r8
 8011dfe:	4622      	mov	r2, r4
 8011e00:	2c00      	cmp	r4, #0
 8011e02:	d1ea      	bne.n	8011dda <ucdr_deserialize_endian_array_char+0x16>
 8011e04:	2301      	movs	r3, #1
 8011e06:	7da8      	ldrb	r0, [r5, #22]
 8011e08:	756b      	strb	r3, [r5, #21]
 8011e0a:	4058      	eors	r0, r3
 8011e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e10:	463a      	mov	r2, r7
 8011e12:	68a9      	ldr	r1, [r5, #8]
 8011e14:	4640      	mov	r0, r8
 8011e16:	f002 fe38 	bl	8014a8a <memcpy>
 8011e1a:	68aa      	ldr	r2, [r5, #8]
 8011e1c:	692b      	ldr	r3, [r5, #16]
 8011e1e:	443a      	add	r2, r7
 8011e20:	443b      	add	r3, r7
 8011e22:	60aa      	str	r2, [r5, #8]
 8011e24:	612b      	str	r3, [r5, #16]
 8011e26:	e7ed      	b.n	8011e04 <ucdr_deserialize_endian_array_char+0x40>

08011e28 <ucdr_serialize_array_uint8_t>:
 8011e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2c:	4688      	mov	r8, r1
 8011e2e:	4611      	mov	r1, r2
 8011e30:	4617      	mov	r7, r2
 8011e32:	4605      	mov	r5, r0
 8011e34:	f7f8 fbe2 	bl	800a5fc <ucdr_check_buffer_available_for>
 8011e38:	b9e0      	cbnz	r0, 8011e74 <ucdr_serialize_array_uint8_t+0x4c>
 8011e3a:	463e      	mov	r6, r7
 8011e3c:	e009      	b.n	8011e52 <ucdr_serialize_array_uint8_t+0x2a>
 8011e3e:	68a8      	ldr	r0, [r5, #8]
 8011e40:	f002 fe23 	bl	8014a8a <memcpy>
 8011e44:	68aa      	ldr	r2, [r5, #8]
 8011e46:	692b      	ldr	r3, [r5, #16]
 8011e48:	4422      	add	r2, r4
 8011e4a:	4423      	add	r3, r4
 8011e4c:	1b36      	subs	r6, r6, r4
 8011e4e:	60aa      	str	r2, [r5, #8]
 8011e50:	612b      	str	r3, [r5, #16]
 8011e52:	4631      	mov	r1, r6
 8011e54:	2201      	movs	r2, #1
 8011e56:	4628      	mov	r0, r5
 8011e58:	f7f8 fc58 	bl	800a70c <ucdr_check_final_buffer_behavior_array>
 8011e5c:	1bb9      	subs	r1, r7, r6
 8011e5e:	4441      	add	r1, r8
 8011e60:	4604      	mov	r4, r0
 8011e62:	4602      	mov	r2, r0
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d1ea      	bne.n	8011e3e <ucdr_serialize_array_uint8_t+0x16>
 8011e68:	2301      	movs	r3, #1
 8011e6a:	7da8      	ldrb	r0, [r5, #22]
 8011e6c:	756b      	strb	r3, [r5, #21]
 8011e6e:	4058      	eors	r0, r3
 8011e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e74:	463a      	mov	r2, r7
 8011e76:	68a8      	ldr	r0, [r5, #8]
 8011e78:	4641      	mov	r1, r8
 8011e7a:	f002 fe06 	bl	8014a8a <memcpy>
 8011e7e:	68aa      	ldr	r2, [r5, #8]
 8011e80:	692b      	ldr	r3, [r5, #16]
 8011e82:	443a      	add	r2, r7
 8011e84:	443b      	add	r3, r7
 8011e86:	60aa      	str	r2, [r5, #8]
 8011e88:	612b      	str	r3, [r5, #16]
 8011e8a:	e7ed      	b.n	8011e68 <ucdr_serialize_array_uint8_t+0x40>

08011e8c <ucdr_serialize_endian_array_uint8_t>:
 8011e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e90:	4619      	mov	r1, r3
 8011e92:	461f      	mov	r7, r3
 8011e94:	4605      	mov	r5, r0
 8011e96:	4690      	mov	r8, r2
 8011e98:	f7f8 fbb0 	bl	800a5fc <ucdr_check_buffer_available_for>
 8011e9c:	b9e0      	cbnz	r0, 8011ed8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011e9e:	463e      	mov	r6, r7
 8011ea0:	e009      	b.n	8011eb6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011ea2:	68a8      	ldr	r0, [r5, #8]
 8011ea4:	f002 fdf1 	bl	8014a8a <memcpy>
 8011ea8:	68ab      	ldr	r3, [r5, #8]
 8011eaa:	6928      	ldr	r0, [r5, #16]
 8011eac:	4423      	add	r3, r4
 8011eae:	4420      	add	r0, r4
 8011eb0:	1b36      	subs	r6, r6, r4
 8011eb2:	60ab      	str	r3, [r5, #8]
 8011eb4:	6128      	str	r0, [r5, #16]
 8011eb6:	4631      	mov	r1, r6
 8011eb8:	2201      	movs	r2, #1
 8011eba:	4628      	mov	r0, r5
 8011ebc:	f7f8 fc26 	bl	800a70c <ucdr_check_final_buffer_behavior_array>
 8011ec0:	1bb9      	subs	r1, r7, r6
 8011ec2:	4441      	add	r1, r8
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d1ea      	bne.n	8011ea2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8011ecc:	2301      	movs	r3, #1
 8011ece:	7da8      	ldrb	r0, [r5, #22]
 8011ed0:	756b      	strb	r3, [r5, #21]
 8011ed2:	4058      	eors	r0, r3
 8011ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed8:	463a      	mov	r2, r7
 8011eda:	68a8      	ldr	r0, [r5, #8]
 8011edc:	4641      	mov	r1, r8
 8011ede:	f002 fdd4 	bl	8014a8a <memcpy>
 8011ee2:	68aa      	ldr	r2, [r5, #8]
 8011ee4:	692b      	ldr	r3, [r5, #16]
 8011ee6:	443a      	add	r2, r7
 8011ee8:	443b      	add	r3, r7
 8011eea:	60aa      	str	r2, [r5, #8]
 8011eec:	612b      	str	r3, [r5, #16]
 8011eee:	e7ed      	b.n	8011ecc <ucdr_serialize_endian_array_uint8_t+0x40>

08011ef0 <ucdr_deserialize_array_uint8_t>:
 8011ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef4:	4688      	mov	r8, r1
 8011ef6:	4611      	mov	r1, r2
 8011ef8:	4617      	mov	r7, r2
 8011efa:	4605      	mov	r5, r0
 8011efc:	f7f8 fb7e 	bl	800a5fc <ucdr_check_buffer_available_for>
 8011f00:	b9e0      	cbnz	r0, 8011f3c <ucdr_deserialize_array_uint8_t+0x4c>
 8011f02:	463e      	mov	r6, r7
 8011f04:	e009      	b.n	8011f1a <ucdr_deserialize_array_uint8_t+0x2a>
 8011f06:	68a9      	ldr	r1, [r5, #8]
 8011f08:	f002 fdbf 	bl	8014a8a <memcpy>
 8011f0c:	68aa      	ldr	r2, [r5, #8]
 8011f0e:	692b      	ldr	r3, [r5, #16]
 8011f10:	4422      	add	r2, r4
 8011f12:	4423      	add	r3, r4
 8011f14:	1b36      	subs	r6, r6, r4
 8011f16:	60aa      	str	r2, [r5, #8]
 8011f18:	612b      	str	r3, [r5, #16]
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	4631      	mov	r1, r6
 8011f1e:	4628      	mov	r0, r5
 8011f20:	f7f8 fbf4 	bl	800a70c <ucdr_check_final_buffer_behavior_array>
 8011f24:	4604      	mov	r4, r0
 8011f26:	1bb8      	subs	r0, r7, r6
 8011f28:	4440      	add	r0, r8
 8011f2a:	4622      	mov	r2, r4
 8011f2c:	2c00      	cmp	r4, #0
 8011f2e:	d1ea      	bne.n	8011f06 <ucdr_deserialize_array_uint8_t+0x16>
 8011f30:	2301      	movs	r3, #1
 8011f32:	7da8      	ldrb	r0, [r5, #22]
 8011f34:	756b      	strb	r3, [r5, #21]
 8011f36:	4058      	eors	r0, r3
 8011f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f3c:	463a      	mov	r2, r7
 8011f3e:	68a9      	ldr	r1, [r5, #8]
 8011f40:	4640      	mov	r0, r8
 8011f42:	f002 fda2 	bl	8014a8a <memcpy>
 8011f46:	68aa      	ldr	r2, [r5, #8]
 8011f48:	692b      	ldr	r3, [r5, #16]
 8011f4a:	443a      	add	r2, r7
 8011f4c:	443b      	add	r3, r7
 8011f4e:	60aa      	str	r2, [r5, #8]
 8011f50:	612b      	str	r3, [r5, #16]
 8011f52:	e7ed      	b.n	8011f30 <ucdr_deserialize_array_uint8_t+0x40>

08011f54 <ucdr_deserialize_endian_array_uint8_t>:
 8011f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f58:	4619      	mov	r1, r3
 8011f5a:	461f      	mov	r7, r3
 8011f5c:	4605      	mov	r5, r0
 8011f5e:	4690      	mov	r8, r2
 8011f60:	f7f8 fb4c 	bl	800a5fc <ucdr_check_buffer_available_for>
 8011f64:	b9e0      	cbnz	r0, 8011fa0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011f66:	463e      	mov	r6, r7
 8011f68:	e009      	b.n	8011f7e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8011f6a:	68a9      	ldr	r1, [r5, #8]
 8011f6c:	f002 fd8d 	bl	8014a8a <memcpy>
 8011f70:	68ab      	ldr	r3, [r5, #8]
 8011f72:	6928      	ldr	r0, [r5, #16]
 8011f74:	4423      	add	r3, r4
 8011f76:	4420      	add	r0, r4
 8011f78:	1b36      	subs	r6, r6, r4
 8011f7a:	60ab      	str	r3, [r5, #8]
 8011f7c:	6128      	str	r0, [r5, #16]
 8011f7e:	2201      	movs	r2, #1
 8011f80:	4631      	mov	r1, r6
 8011f82:	4628      	mov	r0, r5
 8011f84:	f7f8 fbc2 	bl	800a70c <ucdr_check_final_buffer_behavior_array>
 8011f88:	4604      	mov	r4, r0
 8011f8a:	1bb8      	subs	r0, r7, r6
 8011f8c:	4440      	add	r0, r8
 8011f8e:	4622      	mov	r2, r4
 8011f90:	2c00      	cmp	r4, #0
 8011f92:	d1ea      	bne.n	8011f6a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011f94:	2301      	movs	r3, #1
 8011f96:	7da8      	ldrb	r0, [r5, #22]
 8011f98:	756b      	strb	r3, [r5, #21]
 8011f9a:	4058      	eors	r0, r3
 8011f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fa0:	463a      	mov	r2, r7
 8011fa2:	68a9      	ldr	r1, [r5, #8]
 8011fa4:	4640      	mov	r0, r8
 8011fa6:	f002 fd70 	bl	8014a8a <memcpy>
 8011faa:	68aa      	ldr	r2, [r5, #8]
 8011fac:	692b      	ldr	r3, [r5, #16]
 8011fae:	443a      	add	r2, r7
 8011fb0:	443b      	add	r3, r7
 8011fb2:	60aa      	str	r2, [r5, #8]
 8011fb4:	612b      	str	r3, [r5, #16]
 8011fb6:	e7ed      	b.n	8011f94 <ucdr_deserialize_endian_array_uint8_t+0x40>

08011fb8 <ucdr_serialize_sequence_char>:
 8011fb8:	b570      	push	{r4, r5, r6, lr}
 8011fba:	4615      	mov	r5, r2
 8011fbc:	460e      	mov	r6, r1
 8011fbe:	7d01      	ldrb	r1, [r0, #20]
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	f7f7 fd49 	bl	8009a58 <ucdr_serialize_endian_uint32_t>
 8011fc6:	b90d      	cbnz	r5, 8011fcc <ucdr_serialize_sequence_char+0x14>
 8011fc8:	2001      	movs	r0, #1
 8011fca:	bd70      	pop	{r4, r5, r6, pc}
 8011fcc:	7d21      	ldrb	r1, [r4, #20]
 8011fce:	462b      	mov	r3, r5
 8011fd0:	4632      	mov	r2, r6
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fd8:	f7ff bec2 	b.w	8011d60 <ucdr_serialize_endian_array_char>

08011fdc <ucdr_deserialize_sequence_char>:
 8011fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe0:	461d      	mov	r5, r3
 8011fe2:	4616      	mov	r6, r2
 8011fe4:	460f      	mov	r7, r1
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	7d01      	ldrb	r1, [r0, #20]
 8011fea:	4604      	mov	r4, r0
 8011fec:	f7f7 fe5c 	bl	8009ca8 <ucdr_deserialize_endian_uint32_t>
 8011ff0:	682b      	ldr	r3, [r5, #0]
 8011ff2:	429e      	cmp	r6, r3
 8011ff4:	bf3c      	itt	cc
 8011ff6:	2201      	movcc	r2, #1
 8011ff8:	75a2      	strbcc	r2, [r4, #22]
 8011ffa:	b913      	cbnz	r3, 8012002 <ucdr_deserialize_sequence_char+0x26>
 8011ffc:	2001      	movs	r0, #1
 8011ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012002:	7d21      	ldrb	r1, [r4, #20]
 8012004:	463a      	mov	r2, r7
 8012006:	4620      	mov	r0, r4
 8012008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801200c:	f7ff beda 	b.w	8011dc4 <ucdr_deserialize_endian_array_char>

08012010 <ucdr_serialize_sequence_uint8_t>:
 8012010:	b570      	push	{r4, r5, r6, lr}
 8012012:	4615      	mov	r5, r2
 8012014:	460e      	mov	r6, r1
 8012016:	7d01      	ldrb	r1, [r0, #20]
 8012018:	4604      	mov	r4, r0
 801201a:	f7f7 fd1d 	bl	8009a58 <ucdr_serialize_endian_uint32_t>
 801201e:	b90d      	cbnz	r5, 8012024 <ucdr_serialize_sequence_uint8_t+0x14>
 8012020:	2001      	movs	r0, #1
 8012022:	bd70      	pop	{r4, r5, r6, pc}
 8012024:	7d21      	ldrb	r1, [r4, #20]
 8012026:	462b      	mov	r3, r5
 8012028:	4632      	mov	r2, r6
 801202a:	4620      	mov	r0, r4
 801202c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012030:	f7ff bf2c 	b.w	8011e8c <ucdr_serialize_endian_array_uint8_t>

08012034 <ucdr_deserialize_sequence_uint8_t>:
 8012034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012038:	461d      	mov	r5, r3
 801203a:	4616      	mov	r6, r2
 801203c:	460f      	mov	r7, r1
 801203e:	461a      	mov	r2, r3
 8012040:	7d01      	ldrb	r1, [r0, #20]
 8012042:	4604      	mov	r4, r0
 8012044:	f7f7 fe30 	bl	8009ca8 <ucdr_deserialize_endian_uint32_t>
 8012048:	682b      	ldr	r3, [r5, #0]
 801204a:	429e      	cmp	r6, r3
 801204c:	bf3c      	itt	cc
 801204e:	2201      	movcc	r2, #1
 8012050:	75a2      	strbcc	r2, [r4, #22]
 8012052:	b913      	cbnz	r3, 801205a <ucdr_deserialize_sequence_uint8_t+0x26>
 8012054:	2001      	movs	r0, #1
 8012056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801205a:	7d21      	ldrb	r1, [r4, #20]
 801205c:	463a      	mov	r2, r7
 801205e:	4620      	mov	r0, r4
 8012060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012064:	f7ff bf76 	b.w	8011f54 <ucdr_deserialize_endian_array_uint8_t>

08012068 <ucdr_serialize_string>:
 8012068:	b510      	push	{r4, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	4604      	mov	r4, r0
 801206e:	4608      	mov	r0, r1
 8012070:	9101      	str	r1, [sp, #4]
 8012072:	f7ee f8bf 	bl	80001f4 <strlen>
 8012076:	9901      	ldr	r1, [sp, #4]
 8012078:	1c42      	adds	r2, r0, #1
 801207a:	4620      	mov	r0, r4
 801207c:	b002      	add	sp, #8
 801207e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012082:	f7ff bf99 	b.w	8011fb8 <ucdr_serialize_sequence_char>
 8012086:	bf00      	nop

08012088 <ucdr_deserialize_string>:
 8012088:	b500      	push	{lr}
 801208a:	b083      	sub	sp, #12
 801208c:	ab01      	add	r3, sp, #4
 801208e:	f7ff ffa5 	bl	8011fdc <ucdr_deserialize_sequence_char>
 8012092:	b003      	add	sp, #12
 8012094:	f85d fb04 	ldr.w	pc, [sp], #4

08012098 <get_custom_error>:
 8012098:	4b01      	ldr	r3, [pc, #4]	; (80120a0 <get_custom_error+0x8>)
 801209a:	7818      	ldrb	r0, [r3, #0]
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	20012a10 	.word	0x20012a10

080120a4 <recv_custom_msg>:
 80120a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a8:	4693      	mov	fp, r2
 80120aa:	b089      	sub	sp, #36	; 0x24
 80120ac:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80120b0:	9305      	str	r3, [sp, #20]
 80120b2:	468a      	mov	sl, r1
 80120b4:	2100      	movs	r1, #0
 80120b6:	4604      	mov	r4, r0
 80120b8:	f88d 101e 	strb.w	r1, [sp, #30]
 80120bc:	b322      	cbz	r2, 8012108 <recv_custom_msg+0x64>
 80120be:	f200 2902 	addw	r9, r0, #514	; 0x202
 80120c2:	f10d 081f 	add.w	r8, sp, #31
 80120c6:	af05      	add	r7, sp, #20
 80120c8:	f10d 061e 	add.w	r6, sp, #30
 80120cc:	f44f 7500 	mov.w	r5, #512	; 0x200
 80120d0:	e002      	b.n	80120d8 <recv_custom_msg+0x34>
 80120d2:	9b05      	ldr	r3, [sp, #20]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	dd0f      	ble.n	80120f8 <recv_custom_msg+0x54>
 80120d8:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80120dc:	4623      	mov	r3, r4
 80120de:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80120e2:	e9cd 5600 	strd	r5, r6, [sp]
 80120e6:	4622      	mov	r2, r4
 80120e8:	4648      	mov	r0, r9
 80120ea:	f001 f92d 	bl	8013348 <uxr_read_framed_msg>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d0ef      	beq.n	80120d2 <recv_custom_msg+0x2e>
 80120f2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80120f6:	b1b3      	cbz	r3, 8012126 <recv_custom_msg+0x82>
 80120f8:	4b0f      	ldr	r3, [pc, #60]	; (8012138 <recv_custom_msg+0x94>)
 80120fa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80120fe:	701a      	strb	r2, [r3, #0]
 8012100:	2000      	movs	r0, #0
 8012102:	b009      	add	sp, #36	; 0x24
 8012104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012108:	f10d 021f 	add.w	r2, sp, #31
 801210c:	9200      	str	r2, [sp, #0]
 801210e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8012112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012116:	4601      	mov	r1, r0
 8012118:	47a8      	blx	r5
 801211a:	2800      	cmp	r0, #0
 801211c:	d0ec      	beq.n	80120f8 <recv_custom_msg+0x54>
 801211e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1e8      	bne.n	80120f8 <recv_custom_msg+0x54>
 8012126:	f8cb 0000 	str.w	r0, [fp]
 801212a:	2001      	movs	r0, #1
 801212c:	f8ca 4000 	str.w	r4, [sl]
 8012130:	b009      	add	sp, #36	; 0x24
 8012132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012136:	bf00      	nop
 8012138:	20012a10 	.word	0x20012a10

0801213c <send_custom_msg>:
 801213c:	b530      	push	{r4, r5, lr}
 801213e:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8012142:	b087      	sub	sp, #28
 8012144:	4615      	mov	r5, r2
 8012146:	b974      	cbnz	r4, 8012166 <send_custom_msg+0x2a>
 8012148:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 801214c:	f10d 0317 	add.w	r3, sp, #23
 8012150:	47a0      	blx	r4
 8012152:	b108      	cbz	r0, 8012158 <send_custom_msg+0x1c>
 8012154:	42a8      	cmp	r0, r5
 8012156:	d015      	beq.n	8012184 <send_custom_msg+0x48>
 8012158:	4b0c      	ldr	r3, [pc, #48]	; (801218c <send_custom_msg+0x50>)
 801215a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801215e:	701a      	strb	r2, [r3, #0]
 8012160:	2000      	movs	r0, #0
 8012162:	b007      	add	sp, #28
 8012164:	bd30      	pop	{r4, r5, pc}
 8012166:	460b      	mov	r3, r1
 8012168:	2200      	movs	r2, #0
 801216a:	f10d 0117 	add.w	r1, sp, #23
 801216e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012172:	4602      	mov	r2, r0
 8012174:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8012178:	9500      	str	r5, [sp, #0]
 801217a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801217e:	f000 feeb 	bl	8012f58 <uxr_write_framed_msg>
 8012182:	e7e6      	b.n	8012152 <send_custom_msg+0x16>
 8012184:	2001      	movs	r0, #1
 8012186:	b007      	add	sp, #28
 8012188:	bd30      	pop	{r4, r5, pc}
 801218a:	bf00      	nop
 801218c:	20012a10 	.word	0x20012a10

08012190 <uxr_set_custom_transport_callbacks>:
 8012190:	b410      	push	{r4}
 8012192:	9c01      	ldr	r4, [sp, #4]
 8012194:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8012198:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801219c:	9b02      	ldr	r3, [sp, #8]
 801219e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80121a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121a6:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 80121aa:	4770      	bx	lr

080121ac <uxr_init_custom_transport>:
 80121ac:	b538      	push	{r3, r4, r5, lr}
 80121ae:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80121b2:	b303      	cbz	r3, 80121f6 <uxr_init_custom_transport+0x4a>
 80121b4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80121b8:	4604      	mov	r4, r0
 80121ba:	b1e2      	cbz	r2, 80121f6 <uxr_init_custom_transport+0x4a>
 80121bc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80121c0:	b1ca      	cbz	r2, 80121f6 <uxr_init_custom_transport+0x4a>
 80121c2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80121c6:	b1b2      	cbz	r2, 80121f6 <uxr_init_custom_transport+0x4a>
 80121c8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80121cc:	4798      	blx	r3
 80121ce:	4605      	mov	r5, r0
 80121d0:	b188      	cbz	r0, 80121f6 <uxr_init_custom_transport+0x4a>
 80121d2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80121d6:	b98b      	cbnz	r3, 80121fc <uxr_init_custom_transport+0x50>
 80121d8:	490b      	ldr	r1, [pc, #44]	; (8012208 <uxr_init_custom_transport+0x5c>)
 80121da:	4b0c      	ldr	r3, [pc, #48]	; (801220c <uxr_init_custom_transport+0x60>)
 80121dc:	4a0c      	ldr	r2, [pc, #48]	; (8012210 <uxr_init_custom_transport+0x64>)
 80121de:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80121e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121e6:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80121ea:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80121ee:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80121f2:	4628      	mov	r0, r5
 80121f4:	bd38      	pop	{r3, r4, r5, pc}
 80121f6:	2500      	movs	r5, #0
 80121f8:	4628      	mov	r0, r5
 80121fa:	bd38      	pop	{r3, r4, r5, pc}
 80121fc:	2100      	movs	r1, #0
 80121fe:	f204 2002 	addw	r0, r4, #514	; 0x202
 8012202:	f000 fea3 	bl	8012f4c <uxr_init_framing_io>
 8012206:	e7e7      	b.n	80121d8 <uxr_init_custom_transport+0x2c>
 8012208:	0801213d 	.word	0x0801213d
 801220c:	080120a5 	.word	0x080120a5
 8012210:	08012099 	.word	0x08012099

08012214 <uxr_close_custom_transport>:
 8012214:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8012218:	4718      	bx	r3
 801221a:	bf00      	nop

0801221c <uxr_init_input_best_effort_stream>:
 801221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012220:	8003      	strh	r3, [r0, #0]
 8012222:	4770      	bx	lr

08012224 <uxr_reset_input_best_effort_stream>:
 8012224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012228:	8003      	strh	r3, [r0, #0]
 801222a:	4770      	bx	lr

0801222c <uxr_receive_best_effort_message>:
 801222c:	b538      	push	{r3, r4, r5, lr}
 801222e:	4604      	mov	r4, r0
 8012230:	8800      	ldrh	r0, [r0, #0]
 8012232:	460d      	mov	r5, r1
 8012234:	f000 fe72 	bl	8012f1c <uxr_seq_num_cmp>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8012240:	bfb8      	it	lt
 8012242:	8025      	strhlt	r5, [r4, #0]
 8012244:	bd38      	pop	{r3, r4, r5, pc}
 8012246:	bf00      	nop

08012248 <on_full_input_buffer>:
 8012248:	b570      	push	{r4, r5, r6, lr}
 801224a:	4605      	mov	r5, r0
 801224c:	460c      	mov	r4, r1
 801224e:	682b      	ldr	r3, [r5, #0]
 8012250:	6809      	ldr	r1, [r1, #0]
 8012252:	8920      	ldrh	r0, [r4, #8]
 8012254:	6862      	ldr	r2, [r4, #4]
 8012256:	fbb2 f2f0 	udiv	r2, r2, r0
 801225a:	eba3 0c01 	sub.w	ip, r3, r1
 801225e:	fbbc fcf2 	udiv	ip, ip, r2
 8012262:	f10c 0c01 	add.w	ip, ip, #1
 8012266:	fa1f f38c 	uxth.w	r3, ip
 801226a:	fbb3 f6f0 	udiv	r6, r3, r0
 801226e:	fb00 3316 	mls	r3, r0, r6, r3
 8012272:	b29b      	uxth	r3, r3
 8012274:	fb02 f303 	mul.w	r3, r2, r3
 8012278:	1d18      	adds	r0, r3, #4
 801227a:	4408      	add	r0, r1
 801227c:	7d26      	ldrb	r6, [r4, #20]
 801227e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012282:	b116      	cbz	r6, 801228a <on_full_input_buffer+0x42>
 8012284:	2600      	movs	r6, #0
 8012286:	f840 6c04 	str.w	r6, [r0, #-4]
 801228a:	2a03      	cmp	r2, #3
 801228c:	d801      	bhi.n	8012292 <on_full_input_buffer+0x4a>
 801228e:	2001      	movs	r0, #1
 8012290:	bd70      	pop	{r4, r5, r6, pc}
 8012292:	3308      	adds	r3, #8
 8012294:	4419      	add	r1, r3
 8012296:	4628      	mov	r0, r5
 8012298:	692b      	ldr	r3, [r5, #16]
 801229a:	3a04      	subs	r2, #4
 801229c:	f7f8 f9fa 	bl	800a694 <ucdr_init_buffer_origin>
 80122a0:	4628      	mov	r0, r5
 80122a2:	4903      	ldr	r1, [pc, #12]	; (80122b0 <on_full_input_buffer+0x68>)
 80122a4:	4622      	mov	r2, r4
 80122a6:	f7f8 f9d1 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 80122aa:	2000      	movs	r0, #0
 80122ac:	bd70      	pop	{r4, r5, r6, pc}
 80122ae:	bf00      	nop
 80122b0:	08012249 	.word	0x08012249

080122b4 <uxr_init_input_reliable_stream>:
 80122b4:	b500      	push	{lr}
 80122b6:	e9c0 1200 	strd	r1, r2, [r0]
 80122ba:	f04f 0e00 	mov.w	lr, #0
 80122be:	9a01      	ldr	r2, [sp, #4]
 80122c0:	8103      	strh	r3, [r0, #8]
 80122c2:	6102      	str	r2, [r0, #16]
 80122c4:	f880 e014 	strb.w	lr, [r0, #20]
 80122c8:	b1d3      	cbz	r3, 8012300 <uxr_init_input_reliable_stream+0x4c>
 80122ca:	f8c1 e000 	str.w	lr, [r1]
 80122ce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80122d2:	f1bc 0f01 	cmp.w	ip, #1
 80122d6:	d913      	bls.n	8012300 <uxr_init_input_reliable_stream+0x4c>
 80122d8:	2301      	movs	r3, #1
 80122da:	fbb3 f1fc 	udiv	r1, r3, ip
 80122de:	fb0c 3111 	mls	r1, ip, r1, r3
 80122e2:	b289      	uxth	r1, r1
 80122e4:	6842      	ldr	r2, [r0, #4]
 80122e6:	fbb2 f2fc 	udiv	r2, r2, ip
 80122ea:	fb01 f202 	mul.w	r2, r1, r2
 80122ee:	6801      	ldr	r1, [r0, #0]
 80122f0:	f841 e002 	str.w	lr, [r1, r2]
 80122f4:	3301      	adds	r3, #1
 80122f6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	459c      	cmp	ip, r3
 80122fe:	d8ec      	bhi.n	80122da <uxr_init_input_reliable_stream+0x26>
 8012300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012304:	60c3      	str	r3, [r0, #12]
 8012306:	f85d fb04 	ldr.w	pc, [sp], #4
 801230a:	bf00      	nop

0801230c <uxr_reset_input_reliable_stream>:
 801230c:	8901      	ldrh	r1, [r0, #8]
 801230e:	b1e9      	cbz	r1, 801234c <uxr_reset_input_reliable_stream+0x40>
 8012310:	f04f 0c00 	mov.w	ip, #0
 8012314:	b500      	push	{lr}
 8012316:	4663      	mov	r3, ip
 8012318:	46e6      	mov	lr, ip
 801231a:	fbb3 f2f1 	udiv	r2, r3, r1
 801231e:	fb01 3312 	mls	r3, r1, r2, r3
 8012322:	b29b      	uxth	r3, r3
 8012324:	6842      	ldr	r2, [r0, #4]
 8012326:	fbb2 f2f1 	udiv	r2, r2, r1
 801232a:	fb02 f303 	mul.w	r3, r2, r3
 801232e:	6802      	ldr	r2, [r0, #0]
 8012330:	f842 e003 	str.w	lr, [r2, r3]
 8012334:	f10c 0c01 	add.w	ip, ip, #1
 8012338:	8901      	ldrh	r1, [r0, #8]
 801233a:	fa1f f38c 	uxth.w	r3, ip
 801233e:	4299      	cmp	r1, r3
 8012340:	d8eb      	bhi.n	801231a <uxr_reset_input_reliable_stream+0xe>
 8012342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012346:	60c3      	str	r3, [r0, #12]
 8012348:	f85d fb04 	ldr.w	pc, [sp], #4
 801234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012350:	60c3      	str	r3, [r0, #12]
 8012352:	4770      	bx	lr

08012354 <uxr_receive_reliable_message>:
 8012354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012358:	4604      	mov	r4, r0
 801235a:	460d      	mov	r5, r1
 801235c:	8901      	ldrh	r1, [r0, #8]
 801235e:	8980      	ldrh	r0, [r0, #12]
 8012360:	4690      	mov	r8, r2
 8012362:	461f      	mov	r7, r3
 8012364:	f000 fdd2 	bl	8012f0c <uxr_seq_num_add>
 8012368:	4629      	mov	r1, r5
 801236a:	4606      	mov	r6, r0
 801236c:	89a0      	ldrh	r0, [r4, #12]
 801236e:	f000 fdd5 	bl	8012f1c <uxr_seq_num_cmp>
 8012372:	2800      	cmp	r0, #0
 8012374:	db0a      	blt.n	801238c <uxr_receive_reliable_message+0x38>
 8012376:	2600      	movs	r6, #0
 8012378:	89e0      	ldrh	r0, [r4, #14]
 801237a:	4629      	mov	r1, r5
 801237c:	f000 fdce 	bl	8012f1c <uxr_seq_num_cmp>
 8012380:	2800      	cmp	r0, #0
 8012382:	da00      	bge.n	8012386 <uxr_receive_reliable_message+0x32>
 8012384:	81e5      	strh	r5, [r4, #14]
 8012386:	4630      	mov	r0, r6
 8012388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801238c:	4630      	mov	r0, r6
 801238e:	4629      	mov	r1, r5
 8012390:	f000 fdc4 	bl	8012f1c <uxr_seq_num_cmp>
 8012394:	2800      	cmp	r0, #0
 8012396:	dbee      	blt.n	8012376 <uxr_receive_reliable_message+0x22>
 8012398:	6923      	ldr	r3, [r4, #16]
 801239a:	4640      	mov	r0, r8
 801239c:	4798      	blx	r3
 801239e:	2101      	movs	r1, #1
 80123a0:	4681      	mov	r9, r0
 80123a2:	89a0      	ldrh	r0, [r4, #12]
 80123a4:	f000 fdb2 	bl	8012f0c <uxr_seq_num_add>
 80123a8:	f1b9 0f00 	cmp.w	r9, #0
 80123ac:	d101      	bne.n	80123b2 <uxr_receive_reliable_message+0x5e>
 80123ae:	4285      	cmp	r5, r0
 80123b0:	d047      	beq.n	8012442 <uxr_receive_reliable_message+0xee>
 80123b2:	8922      	ldrh	r2, [r4, #8]
 80123b4:	fbb5 f0f2 	udiv	r0, r5, r2
 80123b8:	fb02 5010 	mls	r0, r2, r0, r5
 80123bc:	b280      	uxth	r0, r0
 80123be:	6863      	ldr	r3, [r4, #4]
 80123c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80123c4:	fb00 f303 	mul.w	r3, r0, r3
 80123c8:	6820      	ldr	r0, [r4, #0]
 80123ca:	3304      	adds	r3, #4
 80123cc:	4418      	add	r0, r3
 80123ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d1cf      	bne.n	8012376 <uxr_receive_reliable_message+0x22>
 80123d6:	4641      	mov	r1, r8
 80123d8:	463a      	mov	r2, r7
 80123da:	f002 fb56 	bl	8014a8a <memcpy>
 80123de:	8921      	ldrh	r1, [r4, #8]
 80123e0:	fbb5 f2f1 	udiv	r2, r5, r1
 80123e4:	fb01 5212 	mls	r2, r1, r2, r5
 80123e8:	b292      	uxth	r2, r2
 80123ea:	6863      	ldr	r3, [r4, #4]
 80123ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80123f0:	fb02 f303 	mul.w	r3, r2, r3
 80123f4:	6822      	ldr	r2, [r4, #0]
 80123f6:	50d7      	str	r7, [r2, r3]
 80123f8:	9a08      	ldr	r2, [sp, #32]
 80123fa:	2301      	movs	r3, #1
 80123fc:	7013      	strb	r3, [r2, #0]
 80123fe:	f1b9 0f00 	cmp.w	r9, #0
 8012402:	d0b8      	beq.n	8012376 <uxr_receive_reliable_message+0x22>
 8012404:	89a6      	ldrh	r6, [r4, #12]
 8012406:	4630      	mov	r0, r6
 8012408:	2101      	movs	r1, #1
 801240a:	f000 fd7f 	bl	8012f0c <uxr_seq_num_add>
 801240e:	8922      	ldrh	r2, [r4, #8]
 8012410:	6863      	ldr	r3, [r4, #4]
 8012412:	fbb3 f3f2 	udiv	r3, r3, r2
 8012416:	4606      	mov	r6, r0
 8012418:	fbb0 f0f2 	udiv	r0, r0, r2
 801241c:	fb02 6010 	mls	r0, r2, r0, r6
 8012420:	b280      	uxth	r0, r0
 8012422:	fb00 f303 	mul.w	r3, r0, r3
 8012426:	6820      	ldr	r0, [r4, #0]
 8012428:	3304      	adds	r3, #4
 801242a:	4418      	add	r0, r3
 801242c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d0a0      	beq.n	8012376 <uxr_receive_reliable_message+0x22>
 8012434:	6923      	ldr	r3, [r4, #16]
 8012436:	4798      	blx	r3
 8012438:	2802      	cmp	r0, #2
 801243a:	d008      	beq.n	801244e <uxr_receive_reliable_message+0xfa>
 801243c:	2801      	cmp	r0, #1
 801243e:	d0e2      	beq.n	8012406 <uxr_receive_reliable_message+0xb2>
 8012440:	e799      	b.n	8012376 <uxr_receive_reliable_message+0x22>
 8012442:	9b08      	ldr	r3, [sp, #32]
 8012444:	81a5      	strh	r5, [r4, #12]
 8012446:	2601      	movs	r6, #1
 8012448:	f883 9000 	strb.w	r9, [r3]
 801244c:	e794      	b.n	8012378 <uxr_receive_reliable_message+0x24>
 801244e:	2601      	movs	r6, #1
 8012450:	e792      	b.n	8012378 <uxr_receive_reliable_message+0x24>
 8012452:	bf00      	nop

08012454 <uxr_next_input_reliable_buffer_available>:
 8012454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012458:	4604      	mov	r4, r0
 801245a:	460f      	mov	r7, r1
 801245c:	8980      	ldrh	r0, [r0, #12]
 801245e:	2101      	movs	r1, #1
 8012460:	4690      	mov	r8, r2
 8012462:	f000 fd53 	bl	8012f0c <uxr_seq_num_add>
 8012466:	8922      	ldrh	r2, [r4, #8]
 8012468:	fbb0 f6f2 	udiv	r6, r0, r2
 801246c:	fb02 0616 	mls	r6, r2, r6, r0
 8012470:	b2b6      	uxth	r6, r6
 8012472:	6863      	ldr	r3, [r4, #4]
 8012474:	fbb3 f3f2 	udiv	r3, r3, r2
 8012478:	fb06 f303 	mul.w	r3, r6, r3
 801247c:	6826      	ldr	r6, [r4, #0]
 801247e:	3304      	adds	r3, #4
 8012480:	441e      	add	r6, r3
 8012482:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8012486:	f1b9 0f00 	cmp.w	r9, #0
 801248a:	d023      	beq.n	80124d4 <uxr_next_input_reliable_buffer_available+0x80>
 801248c:	6923      	ldr	r3, [r4, #16]
 801248e:	4605      	mov	r5, r0
 8012490:	4630      	mov	r0, r6
 8012492:	4798      	blx	r3
 8012494:	4682      	mov	sl, r0
 8012496:	b300      	cbz	r0, 80124da <uxr_next_input_reliable_buffer_available+0x86>
 8012498:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801249c:	2101      	movs	r1, #1
 801249e:	4650      	mov	r0, sl
 80124a0:	f000 fd34 	bl	8012f0c <uxr_seq_num_add>
 80124a4:	8921      	ldrh	r1, [r4, #8]
 80124a6:	fbb0 f2f1 	udiv	r2, r0, r1
 80124aa:	4682      	mov	sl, r0
 80124ac:	fb01 0212 	mls	r2, r1, r2, r0
 80124b0:	e9d4 0300 	ldrd	r0, r3, [r4]
 80124b4:	b292      	uxth	r2, r2
 80124b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80124ba:	fb02 f303 	mul.w	r3, r2, r3
 80124be:	3304      	adds	r3, #4
 80124c0:	4418      	add	r0, r3
 80124c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80124c6:	b12b      	cbz	r3, 80124d4 <uxr_next_input_reliable_buffer_available+0x80>
 80124c8:	6923      	ldr	r3, [r4, #16]
 80124ca:	4798      	blx	r3
 80124cc:	2802      	cmp	r0, #2
 80124ce:	d01b      	beq.n	8012508 <uxr_next_input_reliable_buffer_available+0xb4>
 80124d0:	2801      	cmp	r0, #1
 80124d2:	d0e3      	beq.n	801249c <uxr_next_input_reliable_buffer_available+0x48>
 80124d4:	2000      	movs	r0, #0
 80124d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124da:	464a      	mov	r2, r9
 80124dc:	4631      	mov	r1, r6
 80124de:	4638      	mov	r0, r7
 80124e0:	f7f8 f8e0 	bl	800a6a4 <ucdr_init_buffer>
 80124e4:	8921      	ldrh	r1, [r4, #8]
 80124e6:	fbb5 f2f1 	udiv	r2, r5, r1
 80124ea:	fb01 5212 	mls	r2, r1, r2, r5
 80124ee:	b292      	uxth	r2, r2
 80124f0:	6863      	ldr	r3, [r4, #4]
 80124f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80124f6:	fb02 f303 	mul.w	r3, r2, r3
 80124fa:	6822      	ldr	r2, [r4, #0]
 80124fc:	f842 a003 	str.w	sl, [r2, r3]
 8012500:	2001      	movs	r0, #1
 8012502:	81a5      	strh	r5, [r4, #12]
 8012504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012508:	8920      	ldrh	r0, [r4, #8]
 801250a:	fbb5 f3f0 	udiv	r3, r5, r0
 801250e:	fb00 5513 	mls	r5, r0, r3, r5
 8012512:	b2ad      	uxth	r5, r5
 8012514:	6863      	ldr	r3, [r4, #4]
 8012516:	fbb3 f3f0 	udiv	r3, r3, r0
 801251a:	fb03 f505 	mul.w	r5, r3, r5
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	2000      	movs	r0, #0
 8012522:	5158      	str	r0, [r3, r5]
 8012524:	eb06 0108 	add.w	r1, r6, r8
 8012528:	eba9 0208 	sub.w	r2, r9, r8
 801252c:	4638      	mov	r0, r7
 801252e:	f7f8 f8b9 	bl	800a6a4 <ucdr_init_buffer>
 8012532:	4638      	mov	r0, r7
 8012534:	4903      	ldr	r1, [pc, #12]	; (8012544 <uxr_next_input_reliable_buffer_available+0xf0>)
 8012536:	4622      	mov	r2, r4
 8012538:	f7f8 f888 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 801253c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8012540:	2001      	movs	r0, #1
 8012542:	e7c8      	b.n	80124d6 <uxr_next_input_reliable_buffer_available+0x82>
 8012544:	08012249 	.word	0x08012249

08012548 <uxr_process_heartbeat>:
 8012548:	b538      	push	{r3, r4, r5, lr}
 801254a:	4611      	mov	r1, r2
 801254c:	4604      	mov	r4, r0
 801254e:	89c0      	ldrh	r0, [r0, #14]
 8012550:	4615      	mov	r5, r2
 8012552:	f000 fce3 	bl	8012f1c <uxr_seq_num_cmp>
 8012556:	2800      	cmp	r0, #0
 8012558:	bfb8      	it	lt
 801255a:	81e5      	strhlt	r5, [r4, #14]
 801255c:	bd38      	pop	{r3, r4, r5, pc}
 801255e:	bf00      	nop

08012560 <uxr_compute_acknack>:
 8012560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012564:	8903      	ldrh	r3, [r0, #8]
 8012566:	8985      	ldrh	r5, [r0, #12]
 8012568:	4604      	mov	r4, r0
 801256a:	460e      	mov	r6, r1
 801256c:	b1d3      	cbz	r3, 80125a4 <uxr_compute_acknack+0x44>
 801256e:	4628      	mov	r0, r5
 8012570:	2701      	movs	r7, #1
 8012572:	e003      	b.n	801257c <uxr_compute_acknack+0x1c>
 8012574:	4567      	cmp	r7, ip
 8012576:	d215      	bcs.n	80125a4 <uxr_compute_acknack+0x44>
 8012578:	89a0      	ldrh	r0, [r4, #12]
 801257a:	3701      	adds	r7, #1
 801257c:	b2b9      	uxth	r1, r7
 801257e:	f000 fcc5 	bl	8012f0c <uxr_seq_num_add>
 8012582:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012586:	fbb0 f3fc 	udiv	r3, r0, ip
 801258a:	fb0c 0313 	mls	r3, ip, r3, r0
 801258e:	b29a      	uxth	r2, r3
 8012590:	e9d4 1300 	ldrd	r1, r3, [r4]
 8012594:	fbb3 f3fc 	udiv	r3, r3, ip
 8012598:	fb02 f303 	mul.w	r3, r2, r3
 801259c:	58cb      	ldr	r3, [r1, r3]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1e8      	bne.n	8012574 <uxr_compute_acknack+0x14>
 80125a2:	4605      	mov	r5, r0
 80125a4:	8035      	strh	r5, [r6, #0]
 80125a6:	2101      	movs	r1, #1
 80125a8:	4628      	mov	r0, r5
 80125aa:	89e7      	ldrh	r7, [r4, #14]
 80125ac:	f000 fcb2 	bl	8012f14 <uxr_seq_num_sub>
 80125b0:	4601      	mov	r1, r0
 80125b2:	4638      	mov	r0, r7
 80125b4:	f000 fcae 	bl	8012f14 <uxr_seq_num_sub>
 80125b8:	4605      	mov	r5, r0
 80125ba:	b318      	cbz	r0, 8012604 <uxr_compute_acknack+0xa4>
 80125bc:	f04f 0900 	mov.w	r9, #0
 80125c0:	464f      	mov	r7, r9
 80125c2:	f04f 0801 	mov.w	r8, #1
 80125c6:	fa1f f189 	uxth.w	r1, r9
 80125ca:	8830      	ldrh	r0, [r6, #0]
 80125cc:	f000 fc9e 	bl	8012f0c <uxr_seq_num_add>
 80125d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80125d4:	fbb0 f3fc 	udiv	r3, r0, ip
 80125d8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80125dc:	fb03 001c 	mls	r0, r3, ip, r0
 80125e0:	b283      	uxth	r3, r0
 80125e2:	fbb2 f2fc 	udiv	r2, r2, ip
 80125e6:	fb02 f303 	mul.w	r3, r2, r3
 80125ea:	fa08 f209 	lsl.w	r2, r8, r9
 80125ee:	58cb      	ldr	r3, [r1, r3]
 80125f0:	f109 0901 	add.w	r9, r9, #1
 80125f4:	b90b      	cbnz	r3, 80125fa <uxr_compute_acknack+0x9a>
 80125f6:	4317      	orrs	r7, r2
 80125f8:	b2bf      	uxth	r7, r7
 80125fa:	454d      	cmp	r5, r9
 80125fc:	d1e3      	bne.n	80125c6 <uxr_compute_acknack+0x66>
 80125fe:	4638      	mov	r0, r7
 8012600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012604:	4607      	mov	r7, r0
 8012606:	4638      	mov	r0, r7
 8012608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801260c <uxr_init_output_best_effort_stream>:
 801260c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8012610:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8012614:	6001      	str	r1, [r0, #0]
 8012616:	7303      	strb	r3, [r0, #12]
 8012618:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop

08012620 <uxr_reset_output_best_effort_stream>:
 8012620:	7b02      	ldrb	r2, [r0, #12]
 8012622:	6042      	str	r2, [r0, #4]
 8012624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012628:	81c3      	strh	r3, [r0, #14]
 801262a:	4770      	bx	lr

0801262c <uxr_prepare_best_effort_buffer_to_write>:
 801262c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801262e:	4604      	mov	r4, r0
 8012630:	b083      	sub	sp, #12
 8012632:	6840      	ldr	r0, [r0, #4]
 8012634:	460d      	mov	r5, r1
 8012636:	4616      	mov	r6, r2
 8012638:	f7f9 fce2 	bl	800c000 <uxr_submessage_padding>
 801263c:	6863      	ldr	r3, [r4, #4]
 801263e:	4418      	add	r0, r3
 8012640:	68a3      	ldr	r3, [r4, #8]
 8012642:	1942      	adds	r2, r0, r5
 8012644:	4293      	cmp	r3, r2
 8012646:	bf2c      	ite	cs
 8012648:	2701      	movcs	r7, #1
 801264a:	2700      	movcc	r7, #0
 801264c:	d202      	bcs.n	8012654 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801264e:	4638      	mov	r0, r7
 8012650:	b003      	add	sp, #12
 8012652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012654:	9000      	str	r0, [sp, #0]
 8012656:	6821      	ldr	r1, [r4, #0]
 8012658:	4630      	mov	r0, r6
 801265a:	2300      	movs	r3, #0
 801265c:	f7f8 f810 	bl	800a680 <ucdr_init_buffer_origin_offset>
 8012660:	6861      	ldr	r1, [r4, #4]
 8012662:	4638      	mov	r0, r7
 8012664:	4429      	add	r1, r5
 8012666:	6061      	str	r1, [r4, #4]
 8012668:	b003      	add	sp, #12
 801266a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801266c <uxr_prepare_best_effort_buffer_to_send>:
 801266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012670:	4604      	mov	r4, r0
 8012672:	461d      	mov	r5, r3
 8012674:	6840      	ldr	r0, [r0, #4]
 8012676:	7b23      	ldrb	r3, [r4, #12]
 8012678:	4298      	cmp	r0, r3
 801267a:	bf8c      	ite	hi
 801267c:	2601      	movhi	r6, #1
 801267e:	2600      	movls	r6, #0
 8012680:	d802      	bhi.n	8012688 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8012682:	4630      	mov	r0, r6
 8012684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012688:	4688      	mov	r8, r1
 801268a:	89e0      	ldrh	r0, [r4, #14]
 801268c:	2101      	movs	r1, #1
 801268e:	4617      	mov	r7, r2
 8012690:	f000 fc3c 	bl	8012f0c <uxr_seq_num_add>
 8012694:	6823      	ldr	r3, [r4, #0]
 8012696:	81e0      	strh	r0, [r4, #14]
 8012698:	8028      	strh	r0, [r5, #0]
 801269a:	f8c8 3000 	str.w	r3, [r8]
 801269e:	6863      	ldr	r3, [r4, #4]
 80126a0:	603b      	str	r3, [r7, #0]
 80126a2:	7b23      	ldrb	r3, [r4, #12]
 80126a4:	6063      	str	r3, [r4, #4]
 80126a6:	4630      	mov	r0, r6
 80126a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126ac <on_full_output_buffer>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	6802      	ldr	r2, [r0, #0]
 80126b0:	460c      	mov	r4, r1
 80126b2:	6809      	ldr	r1, [r1, #0]
 80126b4:	8923      	ldrh	r3, [r4, #8]
 80126b6:	eba2 0c01 	sub.w	ip, r2, r1
 80126ba:	6862      	ldr	r2, [r4, #4]
 80126bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80126c0:	fbbc fcf2 	udiv	ip, ip, r2
 80126c4:	f10c 0c01 	add.w	ip, ip, #1
 80126c8:	fa1f fc8c 	uxth.w	ip, ip
 80126cc:	fbbc fef3 	udiv	lr, ip, r3
 80126d0:	fb03 c31e 	mls	r3, r3, lr, ip
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	fb02 f303 	mul.w	r3, r2, r3
 80126da:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80126de:	58ca      	ldr	r2, [r1, r3]
 80126e0:	4463      	add	r3, ip
 80126e2:	eba2 020c 	sub.w	r2, r2, ip
 80126e6:	3308      	adds	r3, #8
 80126e8:	4605      	mov	r5, r0
 80126ea:	4419      	add	r1, r3
 80126ec:	3a04      	subs	r2, #4
 80126ee:	6903      	ldr	r3, [r0, #16]
 80126f0:	f7f7 ffd0 	bl	800a694 <ucdr_init_buffer_origin>
 80126f4:	4628      	mov	r0, r5
 80126f6:	4903      	ldr	r1, [pc, #12]	; (8012704 <on_full_output_buffer+0x58>)
 80126f8:	4622      	mov	r2, r4
 80126fa:	f7f7 ffa7 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 80126fe:	2000      	movs	r0, #0
 8012700:	bd38      	pop	{r3, r4, r5, pc}
 8012702:	bf00      	nop
 8012704:	080126ad 	.word	0x080126ad

08012708 <uxr_init_output_reliable_stream>:
 8012708:	b410      	push	{r4}
 801270a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801270e:	8103      	strh	r3, [r0, #8]
 8012710:	e9c0 1200 	strd	r1, r2, [r0]
 8012714:	f880 c00c 	strb.w	ip, [r0, #12]
 8012718:	b1d3      	cbz	r3, 8012750 <uxr_init_output_reliable_stream+0x48>
 801271a:	f8c1 c000 	str.w	ip, [r1]
 801271e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012722:	f1bc 0f01 	cmp.w	ip, #1
 8012726:	d913      	bls.n	8012750 <uxr_init_output_reliable_stream+0x48>
 8012728:	2301      	movs	r3, #1
 801272a:	fbb3 f1fc 	udiv	r1, r3, ip
 801272e:	fb0c 3111 	mls	r1, ip, r1, r3
 8012732:	b289      	uxth	r1, r1
 8012734:	6842      	ldr	r2, [r0, #4]
 8012736:	6804      	ldr	r4, [r0, #0]
 8012738:	fbb2 f2fc 	udiv	r2, r2, ip
 801273c:	fb01 f202 	mul.w	r2, r1, r2
 8012740:	7b01      	ldrb	r1, [r0, #12]
 8012742:	50a1      	str	r1, [r4, r2]
 8012744:	3301      	adds	r3, #1
 8012746:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801274a:	b29b      	uxth	r3, r3
 801274c:	459c      	cmp	ip, r3
 801274e:	d8ec      	bhi.n	801272a <uxr_init_output_reliable_stream+0x22>
 8012750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012754:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012758:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801275c:	4905      	ldr	r1, [pc, #20]	; (8012774 <uxr_init_output_reliable_stream+0x6c>)
 801275e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012762:	f8c0 100e 	str.w	r1, [r0, #14]
 8012766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801276a:	2300      	movs	r3, #0
 801276c:	8242      	strh	r2, [r0, #18]
 801276e:	8403      	strh	r3, [r0, #32]
 8012770:	4770      	bx	lr
 8012772:	bf00      	nop
 8012774:	ffff0000 	.word	0xffff0000

08012778 <uxr_reset_output_reliable_stream>:
 8012778:	8901      	ldrh	r1, [r0, #8]
 801277a:	b1b1      	cbz	r1, 80127aa <uxr_reset_output_reliable_stream+0x32>
 801277c:	f04f 0c00 	mov.w	ip, #0
 8012780:	4663      	mov	r3, ip
 8012782:	fbb3 f2f1 	udiv	r2, r3, r1
 8012786:	fb01 3312 	mls	r3, r1, r2, r3
 801278a:	b29b      	uxth	r3, r3
 801278c:	6842      	ldr	r2, [r0, #4]
 801278e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012792:	6801      	ldr	r1, [r0, #0]
 8012794:	fb02 f303 	mul.w	r3, r2, r3
 8012798:	7b02      	ldrb	r2, [r0, #12]
 801279a:	50ca      	str	r2, [r1, r3]
 801279c:	f10c 0c01 	add.w	ip, ip, #1
 80127a0:	8901      	ldrh	r1, [r0, #8]
 80127a2:	fa1f f38c 	uxth.w	r3, ip
 80127a6:	4299      	cmp	r1, r3
 80127a8:	d8eb      	bhi.n	8012782 <uxr_reset_output_reliable_stream+0xa>
 80127aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80127b2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80127b6:	4904      	ldr	r1, [pc, #16]	; (80127c8 <uxr_reset_output_reliable_stream+0x50>)
 80127b8:	f8c0 100e 	str.w	r1, [r0, #14]
 80127bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127c0:	2300      	movs	r3, #0
 80127c2:	8242      	strh	r2, [r0, #18]
 80127c4:	8403      	strh	r3, [r0, #32]
 80127c6:	4770      	bx	lr
 80127c8:	ffff0000 	.word	0xffff0000

080127cc <uxr_prepare_reliable_buffer_to_write>:
 80127cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d0:	4604      	mov	r4, r0
 80127d2:	b091      	sub	sp, #68	; 0x44
 80127d4:	8900      	ldrh	r0, [r0, #8]
 80127d6:	89e6      	ldrh	r6, [r4, #14]
 80127d8:	6823      	ldr	r3, [r4, #0]
 80127da:	9204      	str	r2, [sp, #16]
 80127dc:	fbb6 f2f0 	udiv	r2, r6, r0
 80127e0:	fb00 6212 	mls	r2, r0, r2, r6
 80127e4:	b292      	uxth	r2, r2
 80127e6:	6865      	ldr	r5, [r4, #4]
 80127e8:	fbb5 f5f0 	udiv	r5, r5, r0
 80127ec:	fb05 3202 	mla	r2, r5, r2, r3
 80127f0:	3204      	adds	r2, #4
 80127f2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80127f6:	f894 900c 	ldrb.w	r9, [r4, #12]
 80127fa:	9203      	str	r2, [sp, #12]
 80127fc:	468b      	mov	fp, r1
 80127fe:	1f2f      	subs	r7, r5, #4
 8012800:	2800      	cmp	r0, #0
 8012802:	f000 814c 	beq.w	8012a9e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8012806:	f04f 0c00 	mov.w	ip, #0
 801280a:	46e2      	mov	sl, ip
 801280c:	4661      	mov	r1, ip
 801280e:	fbb1 f2f0 	udiv	r2, r1, r0
 8012812:	fb00 1212 	mls	r2, r0, r2, r1
 8012816:	b292      	uxth	r2, r2
 8012818:	fb05 f202 	mul.w	r2, r5, r2
 801281c:	f10c 0c01 	add.w	ip, ip, #1
 8012820:	589a      	ldr	r2, [r3, r2]
 8012822:	454a      	cmp	r2, r9
 8012824:	bf08      	it	eq
 8012826:	f10a 0a01 	addeq.w	sl, sl, #1
 801282a:	fa1f f18c 	uxth.w	r1, ip
 801282e:	bf08      	it	eq
 8012830:	fa1f fa8a 	uxtheq.w	sl, sl
 8012834:	4281      	cmp	r1, r0
 8012836:	d3ea      	bcc.n	801280e <uxr_prepare_reliable_buffer_to_write+0x42>
 8012838:	4640      	mov	r0, r8
 801283a:	2104      	movs	r1, #4
 801283c:	f8cd a014 	str.w	sl, [sp, #20]
 8012840:	f7f7 ff34 	bl	800a6ac <ucdr_alignment>
 8012844:	4480      	add	r8, r0
 8012846:	eb08 020b 	add.w	r2, r8, fp
 801284a:	42ba      	cmp	r2, r7
 801284c:	f240 80cd 	bls.w	80129ea <uxr_prepare_reliable_buffer_to_write+0x21e>
 8012850:	7b22      	ldrb	r2, [r4, #12]
 8012852:	445a      	add	r2, fp
 8012854:	42ba      	cmp	r2, r7
 8012856:	f240 80b5 	bls.w	80129c4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801285a:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 801285e:	33fc      	adds	r3, #252	; 0xfc
 8012860:	b2ba      	uxth	r2, r7
 8012862:	4413      	add	r3, r2
 8012864:	b29b      	uxth	r3, r3
 8012866:	fb0a f903 	mul.w	r9, sl, r3
 801286a:	45d9      	cmp	r9, fp
 801286c:	9305      	str	r3, [sp, #20]
 801286e:	9306      	str	r3, [sp, #24]
 8012870:	f0c0 80b7 	bcc.w	80129e2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8012874:	f108 0304 	add.w	r3, r8, #4
 8012878:	42bb      	cmp	r3, r7
 801287a:	f080 80db 	bcs.w	8012a34 <uxr_prepare_reliable_buffer_to_write+0x268>
 801287e:	f1a2 0904 	sub.w	r9, r2, #4
 8012882:	eba9 0908 	sub.w	r9, r9, r8
 8012886:	9b05      	ldr	r3, [sp, #20]
 8012888:	fa1f f989 	uxth.w	r9, r9
 801288c:	ebab 0b09 	sub.w	fp, fp, r9
 8012890:	fbbb f2f3 	udiv	r2, fp, r3
 8012894:	fb03 b312 	mls	r3, r3, r2, fp
 8012898:	2b00      	cmp	r3, #0
 801289a:	f000 80c8 	beq.w	8012a2e <uxr_prepare_reliable_buffer_to_write+0x262>
 801289e:	3201      	adds	r2, #1
 80128a0:	b292      	uxth	r2, r2
 80128a2:	9306      	str	r3, [sp, #24]
 80128a4:	4552      	cmp	r2, sl
 80128a6:	f200 809c 	bhi.w	80129e2 <uxr_prepare_reliable_buffer_to_write+0x216>
 80128aa:	f10d 0b20 	add.w	fp, sp, #32
 80128ae:	2a00      	cmp	r2, #0
 80128b0:	d042      	beq.n	8012938 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80128b2:	f8cd 801c 	str.w	r8, [sp, #28]
 80128b6:	f04f 0a00 	mov.w	sl, #0
 80128ba:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80128be:	9505      	str	r5, [sp, #20]
 80128c0:	f10d 0b20 	add.w	fp, sp, #32
 80128c4:	4615      	mov	r5, r2
 80128c6:	e000      	b.n	80128ca <uxr_prepare_reliable_buffer_to_write+0xfe>
 80128c8:	46c1      	mov	r9, r8
 80128ca:	8920      	ldrh	r0, [r4, #8]
 80128cc:	fbb6 f2f0 	udiv	r2, r6, r0
 80128d0:	fb00 6112 	mls	r1, r0, r2, r6
 80128d4:	b28a      	uxth	r2, r1
 80128d6:	6863      	ldr	r3, [r4, #4]
 80128d8:	fbb3 f1f0 	udiv	r1, r3, r0
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	fb02 f101 	mul.w	r1, r2, r1
 80128e2:	3104      	adds	r1, #4
 80128e4:	4419      	add	r1, r3
 80128e6:	4658      	mov	r0, fp
 80128e8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80128ec:	9200      	str	r2, [sp, #0]
 80128ee:	2300      	movs	r3, #0
 80128f0:	463a      	mov	r2, r7
 80128f2:	f7f7 fec5 	bl	800a680 <ucdr_init_buffer_origin_offset>
 80128f6:	464a      	mov	r2, r9
 80128f8:	2300      	movs	r3, #0
 80128fa:	210d      	movs	r1, #13
 80128fc:	4658      	mov	r0, fp
 80128fe:	f7f9 fb3f 	bl	800bf80 <uxr_buffer_submessage_header>
 8012902:	8921      	ldrh	r1, [r4, #8]
 8012904:	fbb6 f2f1 	udiv	r2, r6, r1
 8012908:	fb01 6212 	mls	r2, r1, r2, r6
 801290c:	b292      	uxth	r2, r2
 801290e:	6863      	ldr	r3, [r4, #4]
 8012910:	fbb3 f3f1 	udiv	r3, r3, r1
 8012914:	fb02 f303 	mul.w	r3, r2, r3
 8012918:	6822      	ldr	r2, [r4, #0]
 801291a:	4630      	mov	r0, r6
 801291c:	50d7      	str	r7, [r2, r3]
 801291e:	2101      	movs	r1, #1
 8012920:	f000 faf4 	bl	8012f0c <uxr_seq_num_add>
 8012924:	f10a 0a01 	add.w	sl, sl, #1
 8012928:	fa1f f38a 	uxth.w	r3, sl
 801292c:	429d      	cmp	r5, r3
 801292e:	4606      	mov	r6, r0
 8012930:	d8ca      	bhi.n	80128c8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8012932:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012936:	9d05      	ldr	r5, [sp, #20]
 8012938:	8920      	ldrh	r0, [r4, #8]
 801293a:	fbb6 f3f0 	udiv	r3, r6, r0
 801293e:	fb00 6313 	mls	r3, r0, r3, r6
 8012942:	b299      	uxth	r1, r3
 8012944:	6863      	ldr	r3, [r4, #4]
 8012946:	fbb3 f3f0 	udiv	r3, r3, r0
 801294a:	fb01 f303 	mul.w	r3, r1, r3
 801294e:	6821      	ldr	r1, [r4, #0]
 8012950:	3304      	adds	r3, #4
 8012952:	4419      	add	r1, r3
 8012954:	463a      	mov	r2, r7
 8012956:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801295a:	9000      	str	r0, [sp, #0]
 801295c:	2300      	movs	r3, #0
 801295e:	4658      	mov	r0, fp
 8012960:	f7f7 fe8e 	bl	800a680 <ucdr_init_buffer_origin_offset>
 8012964:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8012968:	4658      	mov	r0, fp
 801296a:	fa1f f289 	uxth.w	r2, r9
 801296e:	2302      	movs	r3, #2
 8012970:	210d      	movs	r1, #13
 8012972:	f7f9 fb05 	bl	800bf80 <uxr_buffer_submessage_header>
 8012976:	9b03      	ldr	r3, [sp, #12]
 8012978:	8927      	ldrh	r7, [r4, #8]
 801297a:	7b20      	ldrb	r0, [r4, #12]
 801297c:	f108 0104 	add.w	r1, r8, #4
 8012980:	440b      	add	r3, r1
 8012982:	4619      	mov	r1, r3
 8012984:	fbb6 f3f7 	udiv	r3, r6, r7
 8012988:	fb07 6313 	mls	r3, r7, r3, r6
 801298c:	f1a5 0208 	sub.w	r2, r5, #8
 8012990:	b29d      	uxth	r5, r3
 8012992:	3004      	adds	r0, #4
 8012994:	6863      	ldr	r3, [r4, #4]
 8012996:	fbb3 f3f7 	udiv	r3, r3, r7
 801299a:	fb05 f303 	mul.w	r3, r5, r3
 801299e:	6825      	ldr	r5, [r4, #0]
 80129a0:	4448      	add	r0, r9
 80129a2:	50e8      	str	r0, [r5, r3]
 80129a4:	9d04      	ldr	r5, [sp, #16]
 80129a6:	eba2 0208 	sub.w	r2, r2, r8
 80129aa:	4628      	mov	r0, r5
 80129ac:	f7f7 fe7a 	bl	800a6a4 <ucdr_init_buffer>
 80129b0:	4628      	mov	r0, r5
 80129b2:	493c      	ldr	r1, [pc, #240]	; (8012aa4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80129b4:	4622      	mov	r2, r4
 80129b6:	f7f7 fe49 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 80129ba:	2001      	movs	r0, #1
 80129bc:	81e6      	strh	r6, [r4, #14]
 80129be:	b011      	add	sp, #68	; 0x44
 80129c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c4:	2101      	movs	r1, #1
 80129c6:	89e0      	ldrh	r0, [r4, #14]
 80129c8:	f000 faa0 	bl	8012f0c <uxr_seq_num_add>
 80129cc:	8921      	ldrh	r1, [r4, #8]
 80129ce:	4605      	mov	r5, r0
 80129d0:	8a60      	ldrh	r0, [r4, #18]
 80129d2:	f000 fa9b 	bl	8012f0c <uxr_seq_num_add>
 80129d6:	4601      	mov	r1, r0
 80129d8:	4628      	mov	r0, r5
 80129da:	f000 fa9f 	bl	8012f1c <uxr_seq_num_cmp>
 80129de:	2800      	cmp	r0, #0
 80129e0:	dd42      	ble.n	8012a68 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80129e2:	2000      	movs	r0, #0
 80129e4:	b011      	add	sp, #68	; 0x44
 80129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ea:	8921      	ldrh	r1, [r4, #8]
 80129ec:	8a60      	ldrh	r0, [r4, #18]
 80129ee:	9205      	str	r2, [sp, #20]
 80129f0:	f000 fa8c 	bl	8012f0c <uxr_seq_num_add>
 80129f4:	4601      	mov	r1, r0
 80129f6:	4630      	mov	r0, r6
 80129f8:	f000 fa90 	bl	8012f1c <uxr_seq_num_cmp>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	9a05      	ldr	r2, [sp, #20]
 8012a00:	dcef      	bgt.n	80129e2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8012a02:	8927      	ldrh	r7, [r4, #8]
 8012a04:	fbb6 f3f7 	udiv	r3, r6, r7
 8012a08:	fb07 6313 	mls	r3, r7, r3, r6
 8012a0c:	b29d      	uxth	r5, r3
 8012a0e:	6863      	ldr	r3, [r4, #4]
 8012a10:	6824      	ldr	r4, [r4, #0]
 8012a12:	fbb3 f3f7 	udiv	r3, r3, r7
 8012a16:	fb05 f303 	mul.w	r3, r5, r3
 8012a1a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8012a1e:	50e2      	str	r2, [r4, r3]
 8012a20:	2300      	movs	r3, #0
 8012a22:	f8cd 8000 	str.w	r8, [sp]
 8012a26:	f7f7 fe2b 	bl	800a680 <ucdr_init_buffer_origin_offset>
 8012a2a:	2001      	movs	r0, #1
 8012a2c:	e7da      	b.n	80129e4 <uxr_prepare_reliable_buffer_to_write+0x218>
 8012a2e:	b293      	uxth	r3, r2
 8012a30:	461a      	mov	r2, r3
 8012a32:	e737      	b.n	80128a4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8012a34:	4630      	mov	r0, r6
 8012a36:	2101      	movs	r1, #1
 8012a38:	9207      	str	r2, [sp, #28]
 8012a3a:	f000 fa67 	bl	8012f0c <uxr_seq_num_add>
 8012a3e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012a42:	fbb0 f1fc 	udiv	r1, r0, ip
 8012a46:	fb0c 0111 	mls	r1, ip, r1, r0
 8012a4a:	4606      	mov	r6, r0
 8012a4c:	b288      	uxth	r0, r1
 8012a4e:	6863      	ldr	r3, [r4, #4]
 8012a50:	fbb3 f1fc 	udiv	r1, r3, ip
 8012a54:	6823      	ldr	r3, [r4, #0]
 8012a56:	9a07      	ldr	r2, [sp, #28]
 8012a58:	fb00 f101 	mul.w	r1, r0, r1
 8012a5c:	3104      	adds	r1, #4
 8012a5e:	440b      	add	r3, r1
 8012a60:	9303      	str	r3, [sp, #12]
 8012a62:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8012a66:	e70a      	b.n	801287e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8012a68:	8921      	ldrh	r1, [r4, #8]
 8012a6a:	fbb5 f3f1 	udiv	r3, r5, r1
 8012a6e:	fb01 5313 	mls	r3, r1, r3, r5
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	6863      	ldr	r3, [r4, #4]
 8012a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a7a:	6821      	ldr	r1, [r4, #0]
 8012a7c:	9804      	ldr	r0, [sp, #16]
 8012a7e:	fb02 f303 	mul.w	r3, r2, r3
 8012a82:	3304      	adds	r3, #4
 8012a84:	7b22      	ldrb	r2, [r4, #12]
 8012a86:	4419      	add	r1, r3
 8012a88:	445a      	add	r2, fp
 8012a8a:	f841 2c04 	str.w	r2, [r1, #-4]
 8012a8e:	7b23      	ldrb	r3, [r4, #12]
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	2300      	movs	r3, #0
 8012a94:	f7f7 fdf4 	bl	800a680 <ucdr_init_buffer_origin_offset>
 8012a98:	81e5      	strh	r5, [r4, #14]
 8012a9a:	2001      	movs	r0, #1
 8012a9c:	e7a2      	b.n	80129e4 <uxr_prepare_reliable_buffer_to_write+0x218>
 8012a9e:	4682      	mov	sl, r0
 8012aa0:	e6ca      	b.n	8012838 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8012aa2:	bf00      	nop
 8012aa4:	080126ad 	.word	0x080126ad

08012aa8 <uxr_prepare_next_reliable_buffer_to_send>:
 8012aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aaa:	4604      	mov	r4, r0
 8012aac:	460f      	mov	r7, r1
 8012aae:	8a00      	ldrh	r0, [r0, #16]
 8012ab0:	2101      	movs	r1, #1
 8012ab2:	4616      	mov	r6, r2
 8012ab4:	461d      	mov	r5, r3
 8012ab6:	f000 fa29 	bl	8012f0c <uxr_seq_num_add>
 8012aba:	8028      	strh	r0, [r5, #0]
 8012abc:	8922      	ldrh	r2, [r4, #8]
 8012abe:	fbb0 f3f2 	udiv	r3, r0, r2
 8012ac2:	fb02 0c13 	mls	ip, r2, r3, r0
 8012ac6:	fa1f fc8c 	uxth.w	ip, ip
 8012aca:	6863      	ldr	r3, [r4, #4]
 8012acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ad0:	fb0c fc03 	mul.w	ip, ip, r3
 8012ad4:	6823      	ldr	r3, [r4, #0]
 8012ad6:	89e1      	ldrh	r1, [r4, #14]
 8012ad8:	f10c 0c04 	add.w	ip, ip, #4
 8012adc:	4463      	add	r3, ip
 8012ade:	603b      	str	r3, [r7, #0]
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	449c      	add	ip, r3
 8012ae4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8012ae8:	6033      	str	r3, [r6, #0]
 8012aea:	f000 fa17 	bl	8012f1c <uxr_seq_num_cmp>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	dd01      	ble.n	8012af6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8012af2:	2000      	movs	r0, #0
 8012af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012af6:	7b23      	ldrb	r3, [r4, #12]
 8012af8:	6832      	ldr	r2, [r6, #0]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d9f9      	bls.n	8012af2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012afe:	8a61      	ldrh	r1, [r4, #18]
 8012b00:	8a20      	ldrh	r0, [r4, #16]
 8012b02:	f000 fa07 	bl	8012f14 <uxr_seq_num_sub>
 8012b06:	8923      	ldrh	r3, [r4, #8]
 8012b08:	4283      	cmp	r3, r0
 8012b0a:	d0f2      	beq.n	8012af2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012b0c:	8828      	ldrh	r0, [r5, #0]
 8012b0e:	89e3      	ldrh	r3, [r4, #14]
 8012b10:	8220      	strh	r0, [r4, #16]
 8012b12:	4298      	cmp	r0, r3
 8012b14:	d001      	beq.n	8012b1a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8012b16:	2001      	movs	r0, #1
 8012b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b1a:	2101      	movs	r1, #1
 8012b1c:	f000 f9f6 	bl	8012f0c <uxr_seq_num_add>
 8012b20:	81e0      	strh	r0, [r4, #14]
 8012b22:	2001      	movs	r0, #1
 8012b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b26:	bf00      	nop

08012b28 <uxr_update_output_stream_heartbeat_timestamp>:
 8012b28:	b570      	push	{r4, r5, r6, lr}
 8012b2a:	8a01      	ldrh	r1, [r0, #16]
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	8a40      	ldrh	r0, [r0, #18]
 8012b30:	4615      	mov	r5, r2
 8012b32:	461e      	mov	r6, r3
 8012b34:	f000 f9f2 	bl	8012f1c <uxr_seq_num_cmp>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	db07      	blt.n	8012b4c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8012b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b40:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012b44:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8012b48:	2000      	movs	r0, #0
 8012b4a:	bd70      	pop	{r4, r5, r6, pc}
 8012b4c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8012b50:	b940      	cbnz	r0, 8012b64 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8012b52:	2301      	movs	r3, #1
 8012b54:	f884 3020 	strb.w	r3, [r4, #32]
 8012b58:	3564      	adds	r5, #100	; 0x64
 8012b5a:	f146 0600 	adc.w	r6, r6, #0
 8012b5e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012b62:	bd70      	pop	{r4, r5, r6, pc}
 8012b64:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8012b68:	4295      	cmp	r5, r2
 8012b6a:	eb76 0303 	sbcs.w	r3, r6, r3
 8012b6e:	bfa5      	ittet	ge
 8012b70:	3001      	addge	r0, #1
 8012b72:	f884 0020 	strbge.w	r0, [r4, #32]
 8012b76:	2000      	movlt	r0, #0
 8012b78:	2001      	movge	r0, #1
 8012b7a:	e7ed      	b.n	8012b58 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08012b7c <uxr_begin_output_nack_buffer_it>:
 8012b7c:	8a40      	ldrh	r0, [r0, #18]
 8012b7e:	4770      	bx	lr

08012b80 <uxr_next_reliable_nack_buffer_to_send>:
 8012b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b84:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8012b88:	b082      	sub	sp, #8
 8012b8a:	f1b8 0f00 	cmp.w	r8, #0
 8012b8e:	d011      	beq.n	8012bb4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8012b90:	4604      	mov	r4, r0
 8012b92:	8818      	ldrh	r0, [r3, #0]
 8012b94:	460e      	mov	r6, r1
 8012b96:	4617      	mov	r7, r2
 8012b98:	461d      	mov	r5, r3
 8012b9a:	2101      	movs	r1, #1
 8012b9c:	f000 f9b6 	bl	8012f0c <uxr_seq_num_add>
 8012ba0:	8028      	strh	r0, [r5, #0]
 8012ba2:	8a21      	ldrh	r1, [r4, #16]
 8012ba4:	f000 f9ba 	bl	8012f1c <uxr_seq_num_cmp>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	dd07      	ble.n	8012bbc <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8012bac:	f04f 0800 	mov.w	r8, #0
 8012bb0:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8012bb4:	4640      	mov	r0, r8
 8012bb6:	b002      	add	sp, #8
 8012bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bbc:	8921      	ldrh	r1, [r4, #8]
 8012bbe:	8828      	ldrh	r0, [r5, #0]
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	fbb0 f2f1 	udiv	r2, r0, r1
 8012bc6:	fb01 0c12 	mls	ip, r1, r2, r0
 8012bca:	fa1f f28c 	uxth.w	r2, ip
 8012bce:	9301      	str	r3, [sp, #4]
 8012bd0:	6863      	ldr	r3, [r4, #4]
 8012bd2:	fbb3 fcf1 	udiv	ip, r3, r1
 8012bd6:	9b01      	ldr	r3, [sp, #4]
 8012bd8:	fb02 fc0c 	mul.w	ip, r2, ip
 8012bdc:	f10c 0c04 	add.w	ip, ip, #4
 8012be0:	4463      	add	r3, ip
 8012be2:	6033      	str	r3, [r6, #0]
 8012be4:	6823      	ldr	r3, [r4, #0]
 8012be6:	4463      	add	r3, ip
 8012be8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012bec:	603b      	str	r3, [r7, #0]
 8012bee:	7b22      	ldrb	r2, [r4, #12]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d0d2      	beq.n	8012b9a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	b002      	add	sp, #8
 8012bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012bfc <uxr_process_acknack>:
 8012bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bfe:	4604      	mov	r4, r0
 8012c00:	460e      	mov	r6, r1
 8012c02:	4610      	mov	r0, r2
 8012c04:	2101      	movs	r1, #1
 8012c06:	f000 f985 	bl	8012f14 <uxr_seq_num_sub>
 8012c0a:	8a61      	ldrh	r1, [r4, #18]
 8012c0c:	f000 f982 	bl	8012f14 <uxr_seq_num_sub>
 8012c10:	b1c0      	cbz	r0, 8012c44 <uxr_process_acknack+0x48>
 8012c12:	4605      	mov	r5, r0
 8012c14:	2700      	movs	r7, #0
 8012c16:	2101      	movs	r1, #1
 8012c18:	8a60      	ldrh	r0, [r4, #18]
 8012c1a:	f000 f977 	bl	8012f0c <uxr_seq_num_add>
 8012c1e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012c22:	fbb0 f1fc 	udiv	r1, r0, ip
 8012c26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012c2a:	fb0c 0111 	mls	r1, ip, r1, r0
 8012c2e:	b289      	uxth	r1, r1
 8012c30:	3701      	adds	r7, #1
 8012c32:	fbb3 f3fc 	udiv	r3, r3, ip
 8012c36:	fb01 f303 	mul.w	r3, r1, r3
 8012c3a:	42bd      	cmp	r5, r7
 8012c3c:	7b21      	ldrb	r1, [r4, #12]
 8012c3e:	8260      	strh	r0, [r4, #18]
 8012c40:	50d1      	str	r1, [r2, r3]
 8012c42:	d1e8      	bne.n	8012c16 <uxr_process_acknack+0x1a>
 8012c44:	3e00      	subs	r6, #0
 8012c46:	f04f 0300 	mov.w	r3, #0
 8012c4a:	bf18      	it	ne
 8012c4c:	2601      	movne	r6, #1
 8012c4e:	f884 3020 	strb.w	r3, [r4, #32]
 8012c52:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8012c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c58 <uxr_is_output_up_to_date>:
 8012c58:	8a01      	ldrh	r1, [r0, #16]
 8012c5a:	8a40      	ldrh	r0, [r0, #18]
 8012c5c:	b508      	push	{r3, lr}
 8012c5e:	f000 f95d 	bl	8012f1c <uxr_seq_num_cmp>
 8012c62:	fab0 f080 	clz	r0, r0
 8012c66:	0940      	lsrs	r0, r0, #5
 8012c68:	bd08      	pop	{r3, pc}
 8012c6a:	bf00      	nop

08012c6c <get_available_free_slots>:
 8012c6c:	8902      	ldrh	r2, [r0, #8]
 8012c6e:	b1da      	cbz	r2, 8012ca8 <get_available_free_slots+0x3c>
 8012c70:	b530      	push	{r4, r5, lr}
 8012c72:	2100      	movs	r1, #0
 8012c74:	6843      	ldr	r3, [r0, #4]
 8012c76:	6805      	ldr	r5, [r0, #0]
 8012c78:	7b04      	ldrb	r4, [r0, #12]
 8012c7a:	fbb3 fef2 	udiv	lr, r3, r2
 8012c7e:	4608      	mov	r0, r1
 8012c80:	460b      	mov	r3, r1
 8012c82:	fbb3 fcf2 	udiv	ip, r3, r2
 8012c86:	fb02 331c 	mls	r3, r2, ip, r3
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	fb0e f303 	mul.w	r3, lr, r3
 8012c90:	3101      	adds	r1, #1
 8012c92:	f855 c003 	ldr.w	ip, [r5, r3]
 8012c96:	4564      	cmp	r4, ip
 8012c98:	bf08      	it	eq
 8012c9a:	3001      	addeq	r0, #1
 8012c9c:	b28b      	uxth	r3, r1
 8012c9e:	bf08      	it	eq
 8012ca0:	b280      	uxtheq	r0, r0
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d3ed      	bcc.n	8012c82 <get_available_free_slots+0x16>
 8012ca6:	bd30      	pop	{r4, r5, pc}
 8012ca8:	4610      	mov	r0, r2
 8012caa:	4770      	bx	lr

08012cac <uxr_buffer_request_data>:
 8012cac:	b530      	push	{r4, r5, lr}
 8012cae:	b095      	sub	sp, #84	; 0x54
 8012cb0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012cb4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8012cb6:	9303      	str	r3, [sp, #12]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	2d00      	cmp	r5, #0
 8012cbc:	bf14      	ite	ne
 8012cbe:	2101      	movne	r1, #1
 8012cc0:	4611      	moveq	r1, r2
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	f88d 301c 	strb.w	r3, [sp, #28]
 8012cc8:	f88d 201d 	strb.w	r2, [sp, #29]
 8012ccc:	f88d 201e 	strb.w	r2, [sp, #30]
 8012cd0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012cd4:	d021      	beq.n	8012d1a <uxr_buffer_request_data+0x6e>
 8012cd6:	682a      	ldr	r2, [r5, #0]
 8012cd8:	686b      	ldr	r3, [r5, #4]
 8012cda:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 8012cde:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8012ce2:	2210      	movs	r2, #16
 8012ce4:	2308      	movs	r3, #8
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	e9cd 3100 	strd	r3, r1, [sp]
 8012cec:	4620      	mov	r0, r4
 8012cee:	9905      	ldr	r1, [sp, #20]
 8012cf0:	ab0c      	add	r3, sp, #48	; 0x30
 8012cf2:	f7f8 fea7 	bl	800ba44 <uxr_prepare_stream_to_write_submessage>
 8012cf6:	b918      	cbnz	r0, 8012d00 <uxr_buffer_request_data+0x54>
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	b015      	add	sp, #84	; 0x54
 8012cfe:	bd30      	pop	{r4, r5, pc}
 8012d00:	9904      	ldr	r1, [sp, #16]
 8012d02:	aa06      	add	r2, sp, #24
 8012d04:	4620      	mov	r0, r4
 8012d06:	f7f8 ffd3 	bl	800bcb0 <uxr_init_base_object_request>
 8012d0a:	a906      	add	r1, sp, #24
 8012d0c:	4604      	mov	r4, r0
 8012d0e:	a80c      	add	r0, sp, #48	; 0x30
 8012d10:	f7fa face 	bl	800d2b0 <uxr_serialize_READ_DATA_Payload>
 8012d14:	4620      	mov	r0, r4
 8012d16:	b015      	add	sp, #84	; 0x54
 8012d18:	bd30      	pop	{r4, r5, pc}
 8012d1a:	2208      	movs	r2, #8
 8012d1c:	e7e2      	b.n	8012ce4 <uxr_buffer_request_data+0x38>
 8012d1e:	bf00      	nop

08012d20 <uxr_buffer_cancel_data>:
 8012d20:	b510      	push	{r4, lr}
 8012d22:	b094      	sub	sp, #80	; 0x50
 8012d24:	2300      	movs	r3, #0
 8012d26:	9202      	str	r2, [sp, #8]
 8012d28:	9205      	str	r2, [sp, #20]
 8012d2a:	9301      	str	r3, [sp, #4]
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012d32:	f88d 301e 	strb.w	r3, [sp, #30]
 8012d36:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8012d3a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8012d3e:	2308      	movs	r3, #8
 8012d40:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8012d44:	9300      	str	r3, [sp, #0]
 8012d46:	2210      	movs	r2, #16
 8012d48:	ab0c      	add	r3, sp, #48	; 0x30
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	9103      	str	r1, [sp, #12]
 8012d4e:	f7f8 fe79 	bl	800ba44 <uxr_prepare_stream_to_write_submessage>
 8012d52:	b918      	cbnz	r0, 8012d5c <uxr_buffer_cancel_data+0x3c>
 8012d54:	4604      	mov	r4, r0
 8012d56:	4620      	mov	r0, r4
 8012d58:	b014      	add	sp, #80	; 0x50
 8012d5a:	bd10      	pop	{r4, pc}
 8012d5c:	9905      	ldr	r1, [sp, #20]
 8012d5e:	aa06      	add	r2, sp, #24
 8012d60:	4620      	mov	r0, r4
 8012d62:	f7f8 ffa5 	bl	800bcb0 <uxr_init_base_object_request>
 8012d66:	a906      	add	r1, sp, #24
 8012d68:	4604      	mov	r4, r0
 8012d6a:	a80c      	add	r0, sp, #48	; 0x30
 8012d6c:	f7fa faa0 	bl	800d2b0 <uxr_serialize_READ_DATA_Payload>
 8012d70:	4620      	mov	r0, r4
 8012d72:	b014      	add	sp, #80	; 0x50
 8012d74:	bd10      	pop	{r4, pc}
 8012d76:	bf00      	nop

08012d78 <read_submessage_format>:
 8012d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d7c:	b095      	sub	sp, #84	; 0x54
 8012d7e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8012d82:	b113      	cbz	r3, 8012d8a <read_submessage_format+0x12>
 8012d84:	b015      	add	sp, #84	; 0x54
 8012d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	4615      	mov	r5, r2
 8012d8e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8012d92:	4607      	mov	r7, r0
 8012d94:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012d96:	9004      	str	r0, [sp, #16]
 8012d98:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012d9a:	9005      	str	r0, [sp, #20]
 8012d9c:	1a52      	subs	r2, r2, r1
 8012d9e:	a80c      	add	r0, sp, #48	; 0x30
 8012da0:	4699      	mov	r9, r3
 8012da2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8012da6:	f7f7 fc7d 	bl	800a6a4 <ucdr_init_buffer>
 8012daa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012dae:	a80c      	add	r0, sp, #48	; 0x30
 8012db0:	f7f7 fc4c 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 8012db4:	69e2      	ldr	r2, [r4, #28]
 8012db6:	b19a      	cbz	r2, 8012de0 <read_submessage_format+0x68>
 8012db8:	f1b8 0f07 	cmp.w	r8, #7
 8012dbc:	f882 9014 	strb.w	r9, [r2, #20]
 8012dc0:	d040      	beq.n	8012e44 <read_submessage_format+0xcc>
 8012dc2:	f1b8 0f08 	cmp.w	r8, #8
 8012dc6:	d02e      	beq.n	8012e26 <read_submessage_format+0xae>
 8012dc8:	f1b8 0f06 	cmp.w	r8, #6
 8012dcc:	d011      	beq.n	8012df2 <read_submessage_format+0x7a>
 8012dce:	2301      	movs	r3, #1
 8012dd0:	7513      	strb	r3, [r2, #20]
 8012dd2:	4629      	mov	r1, r5
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f7f7 fcb5 	bl	800a744 <ucdr_advance_buffer>
 8012dda:	b015      	add	sp, #84	; 0x54
 8012ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012de0:	f1b8 0f07 	cmp.w	r8, #7
 8012de4:	d02e      	beq.n	8012e44 <read_submessage_format+0xcc>
 8012de6:	f1b8 0f08 	cmp.w	r8, #8
 8012dea:	d01c      	beq.n	8012e26 <read_submessage_format+0xae>
 8012dec:	f1b8 0f06 	cmp.w	r8, #6
 8012df0:	d1ef      	bne.n	8012dd2 <read_submessage_format+0x5a>
 8012df2:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8012df6:	f1b8 0f00 	cmp.w	r8, #0
 8012dfa:	d011      	beq.n	8012e20 <read_submessage_format+0xa8>
 8012dfc:	ab0c      	add	r3, sp, #48	; 0x30
 8012dfe:	e9cd 3500 	strd	r3, r5, [sp]
 8012e02:	2306      	movs	r3, #6
 8012e04:	f88d 3016 	strb.w	r3, [sp, #22]
 8012e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012e0c:	9302      	str	r3, [sp, #8]
 8012e0e:	4632      	mov	r2, r6
 8012e10:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012e14:	4638      	mov	r0, r7
 8012e16:	47c0      	blx	r8
 8012e18:	2301      	movs	r3, #1
 8012e1a:	69e2      	ldr	r2, [r4, #28]
 8012e1c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012e20:	2a00      	cmp	r2, #0
 8012e22:	d1d4      	bne.n	8012dce <read_submessage_format+0x56>
 8012e24:	e7d5      	b.n	8012dd2 <read_submessage_format+0x5a>
 8012e26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d0f8      	beq.n	8012e20 <read_submessage_format+0xa8>
 8012e2e:	a906      	add	r1, sp, #24
 8012e30:	a80c      	add	r0, sp, #48	; 0x30
 8012e32:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012e36:	f7fa fb01 	bl	800d43c <uxr_deserialize_SampleIdentity>
 8012e3a:	b9a0      	cbnz	r0, 8012e66 <read_submessage_format+0xee>
 8012e3c:	69e2      	ldr	r2, [r4, #28]
 8012e3e:	2a00      	cmp	r2, #0
 8012e40:	d1c5      	bne.n	8012dce <read_submessage_format+0x56>
 8012e42:	e7c6      	b.n	8012dd2 <read_submessage_format+0x5a>
 8012e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e48:	b13b      	cbz	r3, 8012e5a <read_submessage_format+0xe2>
 8012e4a:	a906      	add	r1, sp, #24
 8012e4c:	a80c      	add	r0, sp, #48	; 0x30
 8012e4e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012e52:	f7f9 ffc7 	bl	800cde4 <uxr_deserialize_BaseObjectRequest>
 8012e56:	bb60      	cbnz	r0, 8012eb2 <read_submessage_format+0x13a>
 8012e58:	69e2      	ldr	r2, [r4, #28]
 8012e5a:	68a3      	ldr	r3, [r4, #8]
 8012e5c:	442b      	add	r3, r5
 8012e5e:	60a3      	str	r3, [r4, #8]
 8012e60:	2a00      	cmp	r2, #0
 8012e62:	d1b4      	bne.n	8012dce <read_submessage_format+0x56>
 8012e64:	e7b5      	b.n	8012dd2 <read_submessage_format+0x5a>
 8012e66:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8012e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e6c:	1a52      	subs	r2, r2, r1
 8012e6e:	eba8 0803 	sub.w	r8, r8, r3
 8012e72:	a80c      	add	r0, sp, #48	; 0x30
 8012e74:	f7f7 fc16 	bl	800a6a4 <ucdr_init_buffer>
 8012e78:	44a8      	add	r8, r5
 8012e7a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012e7e:	a80c      	add	r0, sp, #48	; 0x30
 8012e80:	f7f7 fbe4 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 8012e84:	fa1f f888 	uxth.w	r8, r8
 8012e88:	ab0c      	add	r3, sp, #48	; 0x30
 8012e8a:	9300      	str	r3, [sp, #0]
 8012e8c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012e90:	2108      	movs	r1, #8
 8012e92:	f88d 1016 	strb.w	r1, [sp, #22]
 8012e96:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8012e9a:	9102      	str	r1, [sp, #8]
 8012e9c:	ab06      	add	r3, sp, #24
 8012e9e:	4632      	mov	r2, r6
 8012ea0:	9905      	ldr	r1, [sp, #20]
 8012ea2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	47b0      	blx	r6
 8012eaa:	2301      	movs	r3, #1
 8012eac:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012eb0:	e7c4      	b.n	8012e3c <read_submessage_format+0xc4>
 8012eb2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8012eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012eb8:	1a52      	subs	r2, r2, r1
 8012eba:	a80c      	add	r0, sp, #48	; 0x30
 8012ebc:	eba8 0803 	sub.w	r8, r8, r3
 8012ec0:	f7f7 fbf0 	bl	800a6a4 <ucdr_init_buffer>
 8012ec4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012ec8:	a80c      	add	r0, sp, #48	; 0x30
 8012eca:	f7f7 fbbf 	bl	800a64c <ucdr_set_on_full_buffer_callback>
 8012ece:	ab0c      	add	r3, sp, #48	; 0x30
 8012ed0:	9300      	str	r3, [sp, #0]
 8012ed2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012ed6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012eda:	44a8      	add	r8, r5
 8012edc:	fa1f f888 	uxth.w	r8, r8
 8012ee0:	f8cd 8004 	str.w	r8, [sp, #4]
 8012ee4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012ee8:	2107      	movs	r1, #7
 8012eea:	f88d 1016 	strb.w	r1, [sp, #22]
 8012eee:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8012ef2:	9102      	str	r1, [sp, #8]
 8012ef4:	4632      	mov	r2, r6
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8012efc:	9905      	ldr	r1, [sp, #20]
 8012efe:	4638      	mov	r0, r7
 8012f00:	47b0      	blx	r6
 8012f02:	2301      	movs	r3, #1
 8012f04:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012f08:	e7a6      	b.n	8012e58 <read_submessage_format+0xe0>
 8012f0a:	bf00      	nop

08012f0c <uxr_seq_num_add>:
 8012f0c:	4408      	add	r0, r1
 8012f0e:	b280      	uxth	r0, r0
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop

08012f14 <uxr_seq_num_sub>:
 8012f14:	1a40      	subs	r0, r0, r1
 8012f16:	b280      	uxth	r0, r0
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop

08012f1c <uxr_seq_num_cmp>:
 8012f1c:	4288      	cmp	r0, r1
 8012f1e:	d011      	beq.n	8012f44 <uxr_seq_num_cmp+0x28>
 8012f20:	d309      	bcc.n	8012f36 <uxr_seq_num_cmp+0x1a>
 8012f22:	4288      	cmp	r0, r1
 8012f24:	d910      	bls.n	8012f48 <uxr_seq_num_cmp+0x2c>
 8012f26:	1a40      	subs	r0, r0, r1
 8012f28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012f2c:	bfd4      	ite	le
 8012f2e:	2001      	movle	r0, #1
 8012f30:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8012f34:	4770      	bx	lr
 8012f36:	1a0b      	subs	r3, r1, r0
 8012f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f3c:	daf1      	bge.n	8012f22 <uxr_seq_num_cmp+0x6>
 8012f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f42:	4770      	bx	lr
 8012f44:	2000      	movs	r0, #0
 8012f46:	4770      	bx	lr
 8012f48:	2001      	movs	r0, #1
 8012f4a:	4770      	bx	lr

08012f4c <uxr_init_framing_io>:
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	7041      	strb	r1, [r0, #1]
 8012f50:	7003      	strb	r3, [r0, #0]
 8012f52:	8583      	strh	r3, [r0, #44]	; 0x2c
 8012f54:	4770      	bx	lr
 8012f56:	bf00      	nop

08012f58 <uxr_write_framed_msg>:
 8012f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f5c:	4617      	mov	r7, r2
 8012f5e:	7842      	ldrb	r2, [r0, #1]
 8012f60:	b083      	sub	sp, #12
 8012f62:	460e      	mov	r6, r1
 8012f64:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8012f68:	469a      	mov	sl, r3
 8012f6a:	2901      	cmp	r1, #1
 8012f6c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8012f70:	4604      	mov	r4, r0
 8012f72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8012f76:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8012f7a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8012f7e:	f240 8137 	bls.w	80131f0 <uxr_write_framed_msg+0x298>
 8012f82:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8012f86:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8012f8a:	2901      	cmp	r1, #1
 8012f8c:	f04f 0202 	mov.w	r2, #2
 8012f90:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012f94:	f240 808f 	bls.w	80130b6 <uxr_write_framed_msg+0x15e>
 8012f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f9a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8012f9e:	b2dd      	uxtb	r5, r3
 8012fa0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8012fa4:	2203      	movs	r2, #3
 8012fa6:	2901      	cmp	r1, #1
 8012fa8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012fac:	f240 809a 	bls.w	80130e4 <uxr_write_framed_msg+0x18c>
 8012fb0:	18a1      	adds	r1, r4, r2
 8012fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fb4:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8012fb8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012fbc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8012fc0:	3201      	adds	r2, #1
 8012fc2:	2801      	cmp	r0, #1
 8012fc4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012fc8:	f240 80a0 	bls.w	801310c <uxr_write_framed_msg+0x1b4>
 8012fcc:	18a0      	adds	r0, r4, r2
 8012fce:	3201      	adds	r2, #1
 8012fd0:	b2d2      	uxtb	r2, r2
 8012fd2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8012fd6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	f000 80a9 	beq.w	8013132 <uxr_write_framed_msg+0x1da>
 8012fe0:	f04f 0900 	mov.w	r9, #0
 8012fe4:	46c8      	mov	r8, r9
 8012fe6:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012fea:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012fee:	2901      	cmp	r1, #1
 8012ff0:	f240 80c3 	bls.w	801317a <uxr_write_framed_msg+0x222>
 8012ff4:	2a29      	cmp	r2, #41	; 0x29
 8012ff6:	f200 809f 	bhi.w	8013138 <uxr_write_framed_msg+0x1e0>
 8012ffa:	18a1      	adds	r1, r4, r2
 8012ffc:	3201      	adds	r2, #1
 8012ffe:	b2d2      	uxtb	r2, r2
 8013000:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8013004:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013008:	ea89 0303 	eor.w	r3, r9, r3
 801300c:	498c      	ldr	r1, [pc, #560]	; (8013240 <uxr_write_framed_msg+0x2e8>)
 801300e:	b2db      	uxtb	r3, r3
 8013010:	f108 0801 	add.w	r8, r8, #1
 8013014:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013018:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801301c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801301e:	4543      	cmp	r3, r8
 8013020:	d8e1      	bhi.n	8012fe6 <uxr_write_framed_msg+0x8e>
 8013022:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013026:	fa5f f889 	uxtb.w	r8, r9
 801302a:	9301      	str	r3, [sp, #4]
 801302c:	f04f 0900 	mov.w	r9, #0
 8013030:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8013034:	fa5f f18a 	uxtb.w	r1, sl
 8013038:	2901      	cmp	r1, #1
 801303a:	d921      	bls.n	8013080 <uxr_write_framed_msg+0x128>
 801303c:	2a29      	cmp	r2, #41	; 0x29
 801303e:	f240 80af 	bls.w	80131a0 <uxr_write_framed_msg+0x248>
 8013042:	2500      	movs	r5, #0
 8013044:	e000      	b.n	8013048 <uxr_write_framed_msg+0xf0>
 8013046:	b160      	cbz	r0, 8013062 <uxr_write_framed_msg+0x10a>
 8013048:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801304c:	1b52      	subs	r2, r2, r5
 801304e:	465b      	mov	r3, fp
 8013050:	4421      	add	r1, r4
 8013052:	4638      	mov	r0, r7
 8013054:	47b0      	blx	r6
 8013056:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801305a:	4405      	add	r5, r0
 801305c:	4295      	cmp	r5, r2
 801305e:	d3f2      	bcc.n	8013046 <uxr_write_framed_msg+0xee>
 8013060:	d003      	beq.n	801306a <uxr_write_framed_msg+0x112>
 8013062:	2000      	movs	r0, #0
 8013064:	b003      	add	sp, #12
 8013066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801306a:	fa5f f18a 	uxtb.w	r1, sl
 801306e:	f04f 0300 	mov.w	r3, #0
 8013072:	2901      	cmp	r1, #1
 8013074:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013078:	f04f 0200 	mov.w	r2, #0
 801307c:	f200 8090 	bhi.w	80131a0 <uxr_write_framed_msg+0x248>
 8013080:	1c51      	adds	r1, r2, #1
 8013082:	b2c9      	uxtb	r1, r1
 8013084:	2929      	cmp	r1, #41	; 0x29
 8013086:	d8dc      	bhi.n	8013042 <uxr_write_framed_msg+0xea>
 8013088:	18a5      	adds	r5, r4, r2
 801308a:	4421      	add	r1, r4
 801308c:	3202      	adds	r2, #2
 801308e:	f088 0820 	eor.w	r8, r8, #32
 8013092:	4648      	mov	r0, r9
 8013094:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8013098:	b2d2      	uxtb	r2, r2
 801309a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801309e:	f04f 0901 	mov.w	r9, #1
 80130a2:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80130a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80130aa:	2800      	cmp	r0, #0
 80130ac:	f040 8085 	bne.w	80131ba <uxr_write_framed_msg+0x262>
 80130b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80130b4:	e7bc      	b.n	8013030 <uxr_write_framed_msg+0xd8>
 80130b6:	4611      	mov	r1, r2
 80130b8:	f04f 0c03 	mov.w	ip, #3
 80130bc:	2204      	movs	r2, #4
 80130be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130c0:	4421      	add	r1, r4
 80130c2:	b2dd      	uxtb	r5, r3
 80130c4:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80130c8:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 80130cc:	44a4      	add	ip, r4
 80130ce:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80130d2:	f080 0020 	eor.w	r0, r0, #32
 80130d6:	2901      	cmp	r1, #1
 80130d8:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80130dc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80130e0:	f63f af66 	bhi.w	8012fb0 <uxr_write_framed_msg+0x58>
 80130e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130e6:	18a0      	adds	r0, r4, r2
 80130e8:	f085 0520 	eor.w	r5, r5, #32
 80130ec:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80130f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80130f4:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 80130f8:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80130fc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013100:	3202      	adds	r2, #2
 8013102:	2801      	cmp	r0, #1
 8013104:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013108:	f63f af60 	bhi.w	8012fcc <uxr_write_framed_msg+0x74>
 801310c:	1c50      	adds	r0, r2, #1
 801310e:	18a5      	adds	r5, r4, r2
 8013110:	fa54 f080 	uxtab	r0, r4, r0
 8013114:	3202      	adds	r2, #2
 8013116:	f081 0120 	eor.w	r1, r1, #32
 801311a:	b2d2      	uxtb	r2, r2
 801311c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013120:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8013124:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013128:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801312c:	2b00      	cmp	r3, #0
 801312e:	f47f af57 	bne.w	8012fe0 <uxr_write_framed_msg+0x88>
 8013132:	9301      	str	r3, [sp, #4]
 8013134:	4698      	mov	r8, r3
 8013136:	e779      	b.n	801302c <uxr_write_framed_msg+0xd4>
 8013138:	2500      	movs	r5, #0
 801313a:	e001      	b.n	8013140 <uxr_write_framed_msg+0x1e8>
 801313c:	2800      	cmp	r0, #0
 801313e:	d090      	beq.n	8013062 <uxr_write_framed_msg+0x10a>
 8013140:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013144:	1b52      	subs	r2, r2, r5
 8013146:	465b      	mov	r3, fp
 8013148:	4421      	add	r1, r4
 801314a:	4638      	mov	r0, r7
 801314c:	47b0      	blx	r6
 801314e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013152:	4405      	add	r5, r0
 8013154:	4295      	cmp	r5, r2
 8013156:	d3f1      	bcc.n	801313c <uxr_write_framed_msg+0x1e4>
 8013158:	d183      	bne.n	8013062 <uxr_write_framed_msg+0x10a>
 801315a:	f04f 0300 	mov.w	r3, #0
 801315e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013164:	4543      	cmp	r3, r8
 8013166:	d964      	bls.n	8013232 <uxr_write_framed_msg+0x2da>
 8013168:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801316c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013170:	2901      	cmp	r1, #1
 8013172:	f04f 0200 	mov.w	r2, #0
 8013176:	f63f af3d 	bhi.w	8012ff4 <uxr_write_framed_msg+0x9c>
 801317a:	1c51      	adds	r1, r2, #1
 801317c:	b2c9      	uxtb	r1, r1
 801317e:	2929      	cmp	r1, #41	; 0x29
 8013180:	d8da      	bhi.n	8013138 <uxr_write_framed_msg+0x1e0>
 8013182:	18a0      	adds	r0, r4, r2
 8013184:	4421      	add	r1, r4
 8013186:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801318a:	3202      	adds	r2, #2
 801318c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013190:	b2d2      	uxtb	r2, r2
 8013192:	f083 0020 	eor.w	r0, r3, #32
 8013196:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801319a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801319e:	e733      	b.n	8013008 <uxr_write_framed_msg+0xb0>
 80131a0:	18a1      	adds	r1, r4, r2
 80131a2:	3201      	adds	r2, #1
 80131a4:	4648      	mov	r0, r9
 80131a6:	b2d2      	uxtb	r2, r2
 80131a8:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80131ac:	f04f 0901 	mov.w	r9, #1
 80131b0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80131b4:	2800      	cmp	r0, #0
 80131b6:	f43f af7b 	beq.w	80130b0 <uxr_write_framed_msg+0x158>
 80131ba:	2500      	movs	r5, #0
 80131bc:	e002      	b.n	80131c4 <uxr_write_framed_msg+0x26c>
 80131be:	2800      	cmp	r0, #0
 80131c0:	f43f af4f 	beq.w	8013062 <uxr_write_framed_msg+0x10a>
 80131c4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80131c8:	1b52      	subs	r2, r2, r5
 80131ca:	465b      	mov	r3, fp
 80131cc:	4421      	add	r1, r4
 80131ce:	4638      	mov	r0, r7
 80131d0:	47b0      	blx	r6
 80131d2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80131d6:	4405      	add	r5, r0
 80131d8:	4295      	cmp	r5, r2
 80131da:	d3f0      	bcc.n	80131be <uxr_write_framed_msg+0x266>
 80131dc:	f47f af41 	bne.w	8013062 <uxr_write_framed_msg+0x10a>
 80131e0:	2300      	movs	r3, #0
 80131e2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80131e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131e8:	b298      	uxth	r0, r3
 80131ea:	b003      	add	sp, #12
 80131ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f0:	217d      	movs	r1, #125	; 0x7d
 80131f2:	f082 0220 	eor.w	r2, r2, #32
 80131f6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80131fa:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80131fe:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8013202:	2901      	cmp	r1, #1
 8013204:	f04f 0203 	mov.w	r2, #3
 8013208:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801320c:	d804      	bhi.n	8013218 <uxr_write_framed_msg+0x2c0>
 801320e:	4611      	mov	r1, r2
 8013210:	f04f 0c04 	mov.w	ip, #4
 8013214:	2205      	movs	r2, #5
 8013216:	e752      	b.n	80130be <uxr_write_framed_msg+0x166>
 8013218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801321a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801321e:	b2dd      	uxtb	r5, r3
 8013220:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013224:	2204      	movs	r2, #4
 8013226:	2901      	cmp	r1, #1
 8013228:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801322c:	f63f aec0 	bhi.w	8012fb0 <uxr_write_framed_msg+0x58>
 8013230:	e758      	b.n	80130e4 <uxr_write_framed_msg+0x18c>
 8013232:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013236:	fa5f f889 	uxtb.w	r8, r9
 801323a:	9301      	str	r3, [sp, #4]
 801323c:	2200      	movs	r2, #0
 801323e:	e6f5      	b.n	801302c <uxr_write_framed_msg+0xd4>
 8013240:	08016328 	.word	0x08016328

08013244 <uxr_framing_read_transport>:
 8013244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013248:	4604      	mov	r4, r0
 801324a:	b083      	sub	sp, #12
 801324c:	461f      	mov	r7, r3
 801324e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013252:	4689      	mov	r9, r1
 8013254:	4692      	mov	sl, r2
 8013256:	f7f8 fed9 	bl	800c00c <uxr_millis>
 801325a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801325e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013262:	42b3      	cmp	r3, r6
 8013264:	4680      	mov	r8, r0
 8013266:	d061      	beq.n	801332c <uxr_framing_read_transport+0xe8>
 8013268:	d81c      	bhi.n	80132a4 <uxr_framing_read_transport+0x60>
 801326a:	1e75      	subs	r5, r6, #1
 801326c:	1aed      	subs	r5, r5, r3
 801326e:	b2ed      	uxtb	r5, r5
 8013270:	2600      	movs	r6, #0
 8013272:	455d      	cmp	r5, fp
 8013274:	d81f      	bhi.n	80132b6 <uxr_framing_read_transport+0x72>
 8013276:	19ab      	adds	r3, r5, r6
 8013278:	455b      	cmp	r3, fp
 801327a:	bf84      	itt	hi
 801327c:	ebab 0605 	subhi.w	r6, fp, r5
 8013280:	b2f6      	uxtbhi	r6, r6
 8013282:	b9ed      	cbnz	r5, 80132c0 <uxr_framing_read_transport+0x7c>
 8013284:	f04f 0b00 	mov.w	fp, #0
 8013288:	f7f8 fec0 	bl	800c00c <uxr_millis>
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	eba0 0808 	sub.w	r8, r0, r8
 8013292:	eba3 0308 	sub.w	r3, r3, r8
 8013296:	4658      	mov	r0, fp
 8013298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801329c:	603b      	str	r3, [r7, #0]
 801329e:	b003      	add	sp, #12
 80132a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a4:	2e00      	cmp	r6, #0
 80132a6:	d049      	beq.n	801333c <uxr_framing_read_transport+0xf8>
 80132a8:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80132ac:	b2ed      	uxtb	r5, r5
 80132ae:	3e01      	subs	r6, #1
 80132b0:	455d      	cmp	r5, fp
 80132b2:	b2f6      	uxtb	r6, r6
 80132b4:	d9df      	bls.n	8013276 <uxr_framing_read_transport+0x32>
 80132b6:	fa5f f58b 	uxtb.w	r5, fp
 80132ba:	2600      	movs	r6, #0
 80132bc:	2d00      	cmp	r5, #0
 80132be:	d0e1      	beq.n	8013284 <uxr_framing_read_transport+0x40>
 80132c0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80132c4:	3102      	adds	r1, #2
 80132c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132c8:	9300      	str	r3, [sp, #0]
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	4421      	add	r1, r4
 80132ce:	462a      	mov	r2, r5
 80132d0:	4650      	mov	r0, sl
 80132d2:	47c8      	blx	r9
 80132d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80132d8:	4a1a      	ldr	r2, [pc, #104]	; (8013344 <uxr_framing_read_transport+0x100>)
 80132da:	4403      	add	r3, r0
 80132dc:	0859      	lsrs	r1, r3, #1
 80132de:	fba2 2101 	umull	r2, r1, r2, r1
 80132e2:	0889      	lsrs	r1, r1, #2
 80132e4:	222a      	movs	r2, #42	; 0x2a
 80132e6:	fb02 3111 	mls	r1, r2, r1, r3
 80132ea:	4683      	mov	fp, r0
 80132ec:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80132f0:	2800      	cmp	r0, #0
 80132f2:	d0c7      	beq.n	8013284 <uxr_framing_read_transport+0x40>
 80132f4:	42a8      	cmp	r0, r5
 80132f6:	d1c7      	bne.n	8013288 <uxr_framing_read_transport+0x44>
 80132f8:	2e00      	cmp	r6, #0
 80132fa:	d0c5      	beq.n	8013288 <uxr_framing_read_transport+0x44>
 80132fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	3102      	adds	r1, #2
 8013302:	4632      	mov	r2, r6
 8013304:	4421      	add	r1, r4
 8013306:	2300      	movs	r3, #0
 8013308:	4650      	mov	r0, sl
 801330a:	47c8      	blx	r9
 801330c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013310:	4a0c      	ldr	r2, [pc, #48]	; (8013344 <uxr_framing_read_transport+0x100>)
 8013312:	180b      	adds	r3, r1, r0
 8013314:	0859      	lsrs	r1, r3, #1
 8013316:	fba2 1201 	umull	r1, r2, r2, r1
 801331a:	0892      	lsrs	r2, r2, #2
 801331c:	212a      	movs	r1, #42	; 0x2a
 801331e:	fb01 3312 	mls	r3, r1, r2, r3
 8013322:	eb00 0b05 	add.w	fp, r0, r5
 8013326:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801332a:	e7ad      	b.n	8013288 <uxr_framing_read_transport+0x44>
 801332c:	2600      	movs	r6, #0
 801332e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8013332:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8013334:	d9bf      	bls.n	80132b6 <uxr_framing_read_transport+0x72>
 8013336:	2102      	movs	r1, #2
 8013338:	2529      	movs	r5, #41	; 0x29
 801333a:	e7c4      	b.n	80132c6 <uxr_framing_read_transport+0x82>
 801333c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8013340:	b2ed      	uxtb	r5, r5
 8013342:	e796      	b.n	8013272 <uxr_framing_read_transport+0x2e>
 8013344:	30c30c31 	.word	0x30c30c31

08013348 <uxr_read_framed_msg>:
 8013348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334c:	461e      	mov	r6, r3
 801334e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013352:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8013356:	429d      	cmp	r5, r3
 8013358:	b083      	sub	sp, #12
 801335a:	4604      	mov	r4, r0
 801335c:	4688      	mov	r8, r1
 801335e:	4691      	mov	r9, r2
 8013360:	f000 8188 	beq.w	8013674 <uxr_read_framed_msg+0x32c>
 8013364:	7823      	ldrb	r3, [r4, #0]
 8013366:	4dc1      	ldr	r5, [pc, #772]	; (801366c <uxr_read_framed_msg+0x324>)
 8013368:	4fc1      	ldr	r7, [pc, #772]	; (8013670 <uxr_read_framed_msg+0x328>)
 801336a:	2b07      	cmp	r3, #7
 801336c:	d8fd      	bhi.n	801336a <uxr_read_framed_msg+0x22>
 801336e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013372:	0115      	.short	0x0115
 8013374:	00d600f6 	.word	0x00d600f6
 8013378:	009000b9 	.word	0x009000b9
 801337c:	0030004d 	.word	0x0030004d
 8013380:	0008      	.short	0x0008
 8013382:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013386:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801338a:	4299      	cmp	r1, r3
 801338c:	f000 814a 	beq.w	8013624 <uxr_read_framed_msg+0x2dc>
 8013390:	18e2      	adds	r2, r4, r3
 8013392:	7892      	ldrb	r2, [r2, #2]
 8013394:	2a7d      	cmp	r2, #125	; 0x7d
 8013396:	f000 8199 	beq.w	80136cc <uxr_read_framed_msg+0x384>
 801339a:	3301      	adds	r3, #1
 801339c:	0858      	lsrs	r0, r3, #1
 801339e:	fba5 1000 	umull	r1, r0, r5, r0
 80133a2:	0880      	lsrs	r0, r0, #2
 80133a4:	212a      	movs	r1, #42	; 0x2a
 80133a6:	fb01 3310 	mls	r3, r1, r0, r3
 80133aa:	2a7e      	cmp	r2, #126	; 0x7e
 80133ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80133b0:	f000 8252 	beq.w	8013858 <uxr_read_framed_msg+0x510>
 80133b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80133b6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80133b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80133bc:	b29b      	uxth	r3, r3
 80133be:	2200      	movs	r2, #0
 80133c0:	4299      	cmp	r1, r3
 80133c2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80133c4:	7022      	strb	r2, [r4, #0]
 80133c6:	f000 8179 	beq.w	80136bc <uxr_read_framed_msg+0x374>
 80133ca:	2000      	movs	r0, #0
 80133cc:	b003      	add	sp, #12
 80133ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80133d6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80133da:	4299      	cmp	r1, r3
 80133dc:	f000 8131 	beq.w	8013642 <uxr_read_framed_msg+0x2fa>
 80133e0:	18e2      	adds	r2, r4, r3
 80133e2:	7890      	ldrb	r0, [r2, #2]
 80133e4:	287d      	cmp	r0, #125	; 0x7d
 80133e6:	f000 8190 	beq.w	801370a <uxr_read_framed_msg+0x3c2>
 80133ea:	3301      	adds	r3, #1
 80133ec:	085a      	lsrs	r2, r3, #1
 80133ee:	fba5 1202 	umull	r1, r2, r5, r2
 80133f2:	0892      	lsrs	r2, r2, #2
 80133f4:	212a      	movs	r1, #42	; 0x2a
 80133f6:	fb01 3312 	mls	r3, r1, r2, r3
 80133fa:	287e      	cmp	r0, #126	; 0x7e
 80133fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013400:	f000 821a 	beq.w	8013838 <uxr_read_framed_msg+0x4f0>
 8013404:	2307      	movs	r3, #7
 8013406:	86a0      	strh	r0, [r4, #52]	; 0x34
 8013408:	7023      	strb	r3, [r4, #0]
 801340a:	e7ae      	b.n	801336a <uxr_read_framed_msg+0x22>
 801340c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801340e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013412:	459e      	cmp	lr, r3
 8013414:	d938      	bls.n	8013488 <uxr_read_framed_msg+0x140>
 8013416:	ee07 8a90 	vmov	s15, r8
 801341a:	212a      	movs	r1, #42	; 0x2a
 801341c:	e020      	b.n	8013460 <uxr_read_framed_msg+0x118>
 801341e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8013422:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8013426:	f000 80d4 	beq.w	80135d2 <uxr_read_framed_msg+0x28a>
 801342a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801342e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013432:	f000 8219 	beq.w	8013868 <uxr_read_framed_msg+0x520>
 8013436:	f806 c003 	strb.w	ip, [r6, r3]
 801343a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 801343e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013440:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013444:	ea8a 000c 	eor.w	r0, sl, ip
 8013448:	b2c0      	uxtb	r0, r0
 801344a:	3301      	adds	r3, #1
 801344c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8013450:	b29b      	uxth	r3, r3
 8013452:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8013456:	4573      	cmp	r3, lr
 8013458:	8663      	strh	r3, [r4, #50]	; 0x32
 801345a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801345c:	f080 8120 	bcs.w	80136a0 <uxr_read_framed_msg+0x358>
 8013460:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8013464:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8013468:	f100 0c01 	add.w	ip, r0, #1
 801346c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013470:	fba5 8202 	umull	r8, r2, r5, r2
 8013474:	0892      	lsrs	r2, r2, #2
 8013476:	4582      	cmp	sl, r0
 8013478:	eb04 0b00 	add.w	fp, r4, r0
 801347c:	fb01 c212 	mls	r2, r1, r2, ip
 8013480:	d1cd      	bne.n	801341e <uxr_read_framed_msg+0xd6>
 8013482:	ee17 8a90 	vmov	r8, s15
 8013486:	459e      	cmp	lr, r3
 8013488:	f040 8111 	bne.w	80136ae <uxr_read_framed_msg+0x366>
 801348c:	2306      	movs	r3, #6
 801348e:	7023      	strb	r3, [r4, #0]
 8013490:	e76b      	b.n	801336a <uxr_read_framed_msg+0x22>
 8013492:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013496:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801349a:	4298      	cmp	r0, r3
 801349c:	f000 80c2 	beq.w	8013624 <uxr_read_framed_msg+0x2dc>
 80134a0:	18e2      	adds	r2, r4, r3
 80134a2:	7891      	ldrb	r1, [r2, #2]
 80134a4:	297d      	cmp	r1, #125	; 0x7d
 80134a6:	f000 814c 	beq.w	8013742 <uxr_read_framed_msg+0x3fa>
 80134aa:	3301      	adds	r3, #1
 80134ac:	085a      	lsrs	r2, r3, #1
 80134ae:	fba5 0202 	umull	r0, r2, r5, r2
 80134b2:	0892      	lsrs	r2, r2, #2
 80134b4:	202a      	movs	r0, #42	; 0x2a
 80134b6:	fb00 3312 	mls	r3, r0, r2, r3
 80134ba:	297e      	cmp	r1, #126	; 0x7e
 80134bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80134c0:	f000 81ca 	beq.w	8013858 <uxr_read_framed_msg+0x510>
 80134c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80134c6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80134ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	2000      	movs	r0, #0
 80134d0:	428b      	cmp	r3, r1
 80134d2:	8623      	strh	r3, [r4, #48]	; 0x30
 80134d4:	8660      	strh	r0, [r4, #50]	; 0x32
 80134d6:	86e0      	strh	r0, [r4, #54]	; 0x36
 80134d8:	f240 80df 	bls.w	801369a <uxr_read_framed_msg+0x352>
 80134dc:	7020      	strb	r0, [r4, #0]
 80134de:	b003      	add	sp, #12
 80134e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80134e8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80134ec:	4299      	cmp	r1, r3
 80134ee:	f000 80a8 	beq.w	8013642 <uxr_read_framed_msg+0x2fa>
 80134f2:	18e2      	adds	r2, r4, r3
 80134f4:	7890      	ldrb	r0, [r2, #2]
 80134f6:	287d      	cmp	r0, #125	; 0x7d
 80134f8:	f000 8164 	beq.w	80137c4 <uxr_read_framed_msg+0x47c>
 80134fc:	3301      	adds	r3, #1
 80134fe:	085a      	lsrs	r2, r3, #1
 8013500:	fba5 1202 	umull	r1, r2, r5, r2
 8013504:	0892      	lsrs	r2, r2, #2
 8013506:	212a      	movs	r1, #42	; 0x2a
 8013508:	fb01 3312 	mls	r3, r1, r2, r3
 801350c:	287e      	cmp	r0, #126	; 0x7e
 801350e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013512:	f000 8191 	beq.w	8013838 <uxr_read_framed_msg+0x4f0>
 8013516:	2304      	movs	r3, #4
 8013518:	8620      	strh	r0, [r4, #48]	; 0x30
 801351a:	7023      	strb	r3, [r4, #0]
 801351c:	e725      	b.n	801336a <uxr_read_framed_msg+0x22>
 801351e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013522:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013526:	4290      	cmp	r0, r2
 8013528:	f000 80b3 	beq.w	8013692 <uxr_read_framed_msg+0x34a>
 801352c:	18a3      	adds	r3, r4, r2
 801352e:	7899      	ldrb	r1, [r3, #2]
 8013530:	297d      	cmp	r1, #125	; 0x7d
 8013532:	f000 8164 	beq.w	80137fe <uxr_read_framed_msg+0x4b6>
 8013536:	3201      	adds	r2, #1
 8013538:	0850      	lsrs	r0, r2, #1
 801353a:	fba5 3000 	umull	r3, r0, r5, r0
 801353e:	0880      	lsrs	r0, r0, #2
 8013540:	232a      	movs	r3, #42	; 0x2a
 8013542:	fb03 2210 	mls	r2, r3, r0, r2
 8013546:	297e      	cmp	r1, #126	; 0x7e
 8013548:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801354c:	f000 8188 	beq.w	8013860 <uxr_read_framed_msg+0x518>
 8013550:	7863      	ldrb	r3, [r4, #1]
 8013552:	428b      	cmp	r3, r1
 8013554:	bf0c      	ite	eq
 8013556:	2303      	moveq	r3, #3
 8013558:	2300      	movne	r3, #0
 801355a:	7023      	strb	r3, [r4, #0]
 801355c:	e705      	b.n	801336a <uxr_read_framed_msg+0x22>
 801355e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013562:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013566:	2200      	movs	r2, #0
 8013568:	4299      	cmp	r1, r3
 801356a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801356e:	d06c      	beq.n	801364a <uxr_read_framed_msg+0x302>
 8013570:	18e2      	adds	r2, r4, r3
 8013572:	7890      	ldrb	r0, [r2, #2]
 8013574:	287d      	cmp	r0, #125	; 0x7d
 8013576:	f000 8101 	beq.w	801377c <uxr_read_framed_msg+0x434>
 801357a:	3301      	adds	r3, #1
 801357c:	085a      	lsrs	r2, r3, #1
 801357e:	fba5 1202 	umull	r1, r2, r5, r2
 8013582:	0892      	lsrs	r2, r2, #2
 8013584:	212a      	movs	r1, #42	; 0x2a
 8013586:	fb01 3312 	mls	r3, r1, r2, r3
 801358a:	287e      	cmp	r0, #126	; 0x7e
 801358c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8013590:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013594:	d059      	beq.n	801364a <uxr_read_framed_msg+0x302>
 8013596:	2302      	movs	r3, #2
 8013598:	7023      	strb	r3, [r4, #0]
 801359a:	e6e6      	b.n	801336a <uxr_read_framed_msg+0x22>
 801359c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80135a0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80135a4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80135a8:	1c51      	adds	r1, r2, #1
 80135aa:	084b      	lsrs	r3, r1, #1
 80135ac:	fba5 c303 	umull	ip, r3, r5, r3
 80135b0:	089b      	lsrs	r3, r3, #2
 80135b2:	fb0e 1313 	mls	r3, lr, r3, r1
 80135b6:	4592      	cmp	sl, r2
 80135b8:	eb04 0002 	add.w	r0, r4, r2
 80135bc:	b2da      	uxtb	r2, r3
 80135be:	f43f af04 	beq.w	80133ca <uxr_read_framed_msg+0x82>
 80135c2:	7883      	ldrb	r3, [r0, #2]
 80135c4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80135c8:	2b7e      	cmp	r3, #126	; 0x7e
 80135ca:	d1ed      	bne.n	80135a8 <uxr_read_framed_msg+0x260>
 80135cc:	2301      	movs	r3, #1
 80135ce:	7023      	strb	r3, [r4, #0]
 80135d0:	e6cb      	b.n	801336a <uxr_read_framed_msg+0x22>
 80135d2:	f100 0c01 	add.w	ip, r0, #1
 80135d6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80135da:	fba5 8202 	umull	r8, r2, r5, r2
 80135de:	0892      	lsrs	r2, r2, #2
 80135e0:	fb01 c212 	mls	r2, r1, r2, ip
 80135e4:	eb04 0c02 	add.w	ip, r4, r2
 80135e8:	b2d2      	uxtb	r2, r2
 80135ea:	4592      	cmp	sl, r2
 80135ec:	f100 0002 	add.w	r0, r0, #2
 80135f0:	f43f af47 	beq.w	8013482 <uxr_read_framed_msg+0x13a>
 80135f4:	0842      	lsrs	r2, r0, #1
 80135f6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80135fa:	fba5 8202 	umull	r8, r2, r5, r2
 80135fe:	0892      	lsrs	r2, r2, #2
 8013600:	fb01 0012 	mls	r0, r1, r2, r0
 8013604:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8013608:	f08a 0c20 	eor.w	ip, sl, #32
 801360c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8013610:	f47f af11 	bne.w	8013436 <uxr_read_framed_msg+0xee>
 8013614:	459e      	cmp	lr, r3
 8013616:	ee17 8a90 	vmov	r8, s15
 801361a:	f43f af37 	beq.w	801348c <uxr_read_framed_msg+0x144>
 801361e:	2301      	movs	r3, #1
 8013620:	7023      	strb	r3, [r4, #0]
 8013622:	e6a2      	b.n	801336a <uxr_read_framed_msg+0x22>
 8013624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013626:	9300      	str	r3, [sp, #0]
 8013628:	2301      	movs	r3, #1
 801362a:	9301      	str	r3, [sp, #4]
 801362c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801362e:	464a      	mov	r2, r9
 8013630:	4641      	mov	r1, r8
 8013632:	4620      	mov	r0, r4
 8013634:	f7ff fe06 	bl	8013244 <uxr_framing_read_transport>
 8013638:	2800      	cmp	r0, #0
 801363a:	f43f aec6 	beq.w	80133ca <uxr_read_framed_msg+0x82>
 801363e:	7823      	ldrb	r3, [r4, #0]
 8013640:	e693      	b.n	801336a <uxr_read_framed_msg+0x22>
 8013642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013644:	9300      	str	r3, [sp, #0]
 8013646:	2302      	movs	r3, #2
 8013648:	e7ef      	b.n	801362a <uxr_read_framed_msg+0x2e2>
 801364a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801364c:	9300      	str	r3, [sp, #0]
 801364e:	2304      	movs	r3, #4
 8013650:	9301      	str	r3, [sp, #4]
 8013652:	464a      	mov	r2, r9
 8013654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013656:	4641      	mov	r1, r8
 8013658:	4620      	mov	r0, r4
 801365a:	f7ff fdf3 	bl	8013244 <uxr_framing_read_transport>
 801365e:	2800      	cmp	r0, #0
 8013660:	d1ed      	bne.n	801363e <uxr_read_framed_msg+0x2f6>
 8013662:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013666:	2b7e      	cmp	r3, #126	; 0x7e
 8013668:	d0e9      	beq.n	801363e <uxr_read_framed_msg+0x2f6>
 801366a:	e6ae      	b.n	80133ca <uxr_read_framed_msg+0x82>
 801366c:	30c30c31 	.word	0x30c30c31
 8013670:	08016328 	.word	0x08016328
 8013674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	2305      	movs	r3, #5
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801367e:	f7ff fde1 	bl	8013244 <uxr_framing_read_transport>
 8013682:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013686:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801368a:	429a      	cmp	r2, r3
 801368c:	f43f ae9d 	beq.w	80133ca <uxr_read_framed_msg+0x82>
 8013690:	e668      	b.n	8013364 <uxr_read_framed_msg+0x1c>
 8013692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013694:	9300      	str	r3, [sp, #0]
 8013696:	2303      	movs	r3, #3
 8013698:	e7c7      	b.n	801362a <uxr_read_framed_msg+0x2e2>
 801369a:	2305      	movs	r3, #5
 801369c:	7023      	strb	r3, [r4, #0]
 801369e:	e664      	b.n	801336a <uxr_read_framed_msg+0x22>
 80136a0:	ee17 8a90 	vmov	r8, s15
 80136a4:	f43f aef2 	beq.w	801348c <uxr_read_framed_msg+0x144>
 80136a8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80136ac:	d08e      	beq.n	80135cc <uxr_read_framed_msg+0x284>
 80136ae:	ebae 0303 	sub.w	r3, lr, r3
 80136b2:	3302      	adds	r3, #2
 80136b4:	9301      	str	r3, [sp, #4]
 80136b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136b8:	9300      	str	r3, [sp, #0]
 80136ba:	e7b7      	b.n	801362c <uxr_read_framed_msg+0x2e4>
 80136bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136be:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80136c2:	7013      	strb	r3, [r2, #0]
 80136c4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80136c6:	b003      	add	sp, #12
 80136c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136cc:	f103 0c01 	add.w	ip, r3, #1
 80136d0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80136d4:	fba5 0202 	umull	r0, r2, r5, r2
 80136d8:	0892      	lsrs	r2, r2, #2
 80136da:	202a      	movs	r0, #42	; 0x2a
 80136dc:	fb00 c212 	mls	r2, r0, r2, ip
 80136e0:	fa5f fc82 	uxtb.w	ip, r2
 80136e4:	4561      	cmp	r1, ip
 80136e6:	d09d      	beq.n	8013624 <uxr_read_framed_msg+0x2dc>
 80136e8:	3302      	adds	r3, #2
 80136ea:	4422      	add	r2, r4
 80136ec:	0859      	lsrs	r1, r3, #1
 80136ee:	7892      	ldrb	r2, [r2, #2]
 80136f0:	fba5 c101 	umull	ip, r1, r5, r1
 80136f4:	0889      	lsrs	r1, r1, #2
 80136f6:	fb00 3311 	mls	r3, r0, r1, r3
 80136fa:	2a7e      	cmp	r2, #126	; 0x7e
 80136fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013700:	f000 80aa 	beq.w	8013858 <uxr_read_framed_msg+0x510>
 8013704:	f082 0220 	eor.w	r2, r2, #32
 8013708:	e654      	b.n	80133b4 <uxr_read_framed_msg+0x6c>
 801370a:	1c58      	adds	r0, r3, #1
 801370c:	0842      	lsrs	r2, r0, #1
 801370e:	fba5 c202 	umull	ip, r2, r5, r2
 8013712:	0892      	lsrs	r2, r2, #2
 8013714:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8013718:	fb0c 0212 	mls	r2, ip, r2, r0
 801371c:	b2d0      	uxtb	r0, r2
 801371e:	4281      	cmp	r1, r0
 8013720:	d08f      	beq.n	8013642 <uxr_read_framed_msg+0x2fa>
 8013722:	4422      	add	r2, r4
 8013724:	3302      	adds	r3, #2
 8013726:	7890      	ldrb	r0, [r2, #2]
 8013728:	085a      	lsrs	r2, r3, #1
 801372a:	fba5 1202 	umull	r1, r2, r5, r2
 801372e:	0892      	lsrs	r2, r2, #2
 8013730:	fb0c 3312 	mls	r3, ip, r2, r3
 8013734:	287e      	cmp	r0, #126	; 0x7e
 8013736:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801373a:	d07d      	beq.n	8013838 <uxr_read_framed_msg+0x4f0>
 801373c:	f080 0020 	eor.w	r0, r0, #32
 8013740:	e660      	b.n	8013404 <uxr_read_framed_msg+0xbc>
 8013742:	1c59      	adds	r1, r3, #1
 8013744:	084a      	lsrs	r2, r1, #1
 8013746:	fba5 c202 	umull	ip, r2, r5, r2
 801374a:	0892      	lsrs	r2, r2, #2
 801374c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8013750:	fb0c 1212 	mls	r2, ip, r2, r1
 8013754:	b2d1      	uxtb	r1, r2
 8013756:	4288      	cmp	r0, r1
 8013758:	f43f af64 	beq.w	8013624 <uxr_read_framed_msg+0x2dc>
 801375c:	4422      	add	r2, r4
 801375e:	3302      	adds	r3, #2
 8013760:	7891      	ldrb	r1, [r2, #2]
 8013762:	085a      	lsrs	r2, r3, #1
 8013764:	fba5 0202 	umull	r0, r2, r5, r2
 8013768:	0892      	lsrs	r2, r2, #2
 801376a:	fb0c 3312 	mls	r3, ip, r2, r3
 801376e:	297e      	cmp	r1, #126	; 0x7e
 8013770:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013774:	d070      	beq.n	8013858 <uxr_read_framed_msg+0x510>
 8013776:	f081 0120 	eor.w	r1, r1, #32
 801377a:	e6a3      	b.n	80134c4 <uxr_read_framed_msg+0x17c>
 801377c:	f103 0c01 	add.w	ip, r3, #1
 8013780:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013784:	fba5 0202 	umull	r0, r2, r5, r2
 8013788:	0892      	lsrs	r2, r2, #2
 801378a:	202a      	movs	r0, #42	; 0x2a
 801378c:	fb00 c212 	mls	r2, r0, r2, ip
 8013790:	fa5f fc82 	uxtb.w	ip, r2
 8013794:	4561      	cmp	r1, ip
 8013796:	f43f af58 	beq.w	801364a <uxr_read_framed_msg+0x302>
 801379a:	4422      	add	r2, r4
 801379c:	3302      	adds	r3, #2
 801379e:	7891      	ldrb	r1, [r2, #2]
 80137a0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80137a4:	085a      	lsrs	r2, r3, #1
 80137a6:	fba5 c202 	umull	ip, r2, r5, r2
 80137aa:	0892      	lsrs	r2, r2, #2
 80137ac:	fb00 3312 	mls	r3, r0, r2, r3
 80137b0:	297e      	cmp	r1, #126	; 0x7e
 80137b2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80137b6:	f43f af48 	beq.w	801364a <uxr_read_framed_msg+0x302>
 80137ba:	f081 0120 	eor.w	r1, r1, #32
 80137be:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80137c2:	e6e8      	b.n	8013596 <uxr_read_framed_msg+0x24e>
 80137c4:	1c58      	adds	r0, r3, #1
 80137c6:	0842      	lsrs	r2, r0, #1
 80137c8:	fba5 c202 	umull	ip, r2, r5, r2
 80137cc:	0892      	lsrs	r2, r2, #2
 80137ce:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80137d2:	fb0c 0212 	mls	r2, ip, r2, r0
 80137d6:	b2d0      	uxtb	r0, r2
 80137d8:	4281      	cmp	r1, r0
 80137da:	f43f af32 	beq.w	8013642 <uxr_read_framed_msg+0x2fa>
 80137de:	4422      	add	r2, r4
 80137e0:	3302      	adds	r3, #2
 80137e2:	7890      	ldrb	r0, [r2, #2]
 80137e4:	085a      	lsrs	r2, r3, #1
 80137e6:	fba5 1202 	umull	r1, r2, r5, r2
 80137ea:	0892      	lsrs	r2, r2, #2
 80137ec:	fb0c 3312 	mls	r3, ip, r2, r3
 80137f0:	287e      	cmp	r0, #126	; 0x7e
 80137f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80137f6:	d01f      	beq.n	8013838 <uxr_read_framed_msg+0x4f0>
 80137f8:	f080 0020 	eor.w	r0, r0, #32
 80137fc:	e68b      	b.n	8013516 <uxr_read_framed_msg+0x1ce>
 80137fe:	1c51      	adds	r1, r2, #1
 8013800:	084b      	lsrs	r3, r1, #1
 8013802:	fba5 c303 	umull	ip, r3, r5, r3
 8013806:	089b      	lsrs	r3, r3, #2
 8013808:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801380c:	fb0c 1313 	mls	r3, ip, r3, r1
 8013810:	b2d9      	uxtb	r1, r3
 8013812:	4288      	cmp	r0, r1
 8013814:	f43f af3d 	beq.w	8013692 <uxr_read_framed_msg+0x34a>
 8013818:	3202      	adds	r2, #2
 801381a:	4423      	add	r3, r4
 801381c:	0850      	lsrs	r0, r2, #1
 801381e:	789b      	ldrb	r3, [r3, #2]
 8013820:	fba5 1000 	umull	r1, r0, r5, r0
 8013824:	0880      	lsrs	r0, r0, #2
 8013826:	fb0c 2210 	mls	r2, ip, r0, r2
 801382a:	2b7e      	cmp	r3, #126	; 0x7e
 801382c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013830:	d016      	beq.n	8013860 <uxr_read_framed_msg+0x518>
 8013832:	f083 0120 	eor.w	r1, r3, #32
 8013836:	e68b      	b.n	8013550 <uxr_read_framed_msg+0x208>
 8013838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	2302      	movs	r3, #2
 801383e:	9301      	str	r3, [sp, #4]
 8013840:	464a      	mov	r2, r9
 8013842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013844:	4641      	mov	r1, r8
 8013846:	4620      	mov	r0, r4
 8013848:	f7ff fcfc 	bl	8013244 <uxr_framing_read_transport>
 801384c:	2800      	cmp	r0, #0
 801384e:	f47f aef6 	bne.w	801363e <uxr_read_framed_msg+0x2f6>
 8013852:	2301      	movs	r3, #1
 8013854:	7023      	strb	r3, [r4, #0]
 8013856:	e588      	b.n	801336a <uxr_read_framed_msg+0x22>
 8013858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	2301      	movs	r3, #1
 801385e:	e7ee      	b.n	801383e <uxr_read_framed_msg+0x4f6>
 8013860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013862:	9300      	str	r3, [sp, #0]
 8013864:	2303      	movs	r3, #3
 8013866:	e7ea      	b.n	801383e <uxr_read_framed_msg+0x4f6>
 8013868:	ee17 8a90 	vmov	r8, s15
 801386c:	e6ae      	b.n	80135cc <uxr_read_framed_msg+0x284>
 801386e:	bf00      	nop

08013870 <rcl_get_default_domain_id>:
 8013870:	b530      	push	{r4, r5, lr}
 8013872:	b083      	sub	sp, #12
 8013874:	2300      	movs	r3, #0
 8013876:	9300      	str	r3, [sp, #0]
 8013878:	b1d0      	cbz	r0, 80138b0 <rcl_get_default_domain_id+0x40>
 801387a:	4604      	mov	r4, r0
 801387c:	4669      	mov	r1, sp
 801387e:	4815      	ldr	r0, [pc, #84]	; (80138d4 <rcl_get_default_domain_id+0x64>)
 8013880:	f7fc fc32 	bl	80100e8 <rcutils_get_env>
 8013884:	4602      	mov	r2, r0
 8013886:	b110      	cbz	r0, 801388e <rcl_get_default_domain_id+0x1e>
 8013888:	2001      	movs	r0, #1
 801388a:	b003      	add	sp, #12
 801388c:	bd30      	pop	{r4, r5, pc}
 801388e:	9b00      	ldr	r3, [sp, #0]
 8013890:	b18b      	cbz	r3, 80138b6 <rcl_get_default_domain_id+0x46>
 8013892:	7818      	ldrb	r0, [r3, #0]
 8013894:	2800      	cmp	r0, #0
 8013896:	d0f8      	beq.n	801388a <rcl_get_default_domain_id+0x1a>
 8013898:	a901      	add	r1, sp, #4
 801389a:	4618      	mov	r0, r3
 801389c:	9201      	str	r2, [sp, #4]
 801389e:	f000 fe73 	bl	8014588 <strtoul>
 80138a2:	4605      	mov	r5, r0
 80138a4:	b150      	cbz	r0, 80138bc <rcl_get_default_domain_id+0x4c>
 80138a6:	1c43      	adds	r3, r0, #1
 80138a8:	d00d      	beq.n	80138c6 <rcl_get_default_domain_id+0x56>
 80138aa:	6025      	str	r5, [r4, #0]
 80138ac:	2000      	movs	r0, #0
 80138ae:	e7ec      	b.n	801388a <rcl_get_default_domain_id+0x1a>
 80138b0:	200b      	movs	r0, #11
 80138b2:	b003      	add	sp, #12
 80138b4:	bd30      	pop	{r4, r5, pc}
 80138b6:	4618      	mov	r0, r3
 80138b8:	b003      	add	sp, #12
 80138ba:	bd30      	pop	{r4, r5, pc}
 80138bc:	9b01      	ldr	r3, [sp, #4]
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d0f2      	beq.n	80138aa <rcl_get_default_domain_id+0x3a>
 80138c4:	e7e0      	b.n	8013888 <rcl_get_default_domain_id+0x18>
 80138c6:	f001 f8ab 	bl	8014a20 <__errno>
 80138ca:	6803      	ldr	r3, [r0, #0]
 80138cc:	2b22      	cmp	r3, #34	; 0x22
 80138ce:	d1ec      	bne.n	80138aa <rcl_get_default_domain_id+0x3a>
 80138d0:	e7da      	b.n	8013888 <rcl_get_default_domain_id+0x18>
 80138d2:	bf00      	nop
 80138d4:	08016528 	.word	0x08016528

080138d8 <rcl_expand_topic_name>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	b08b      	sub	sp, #44	; 0x2c
 80138de:	9306      	str	r3, [sp, #24]
 80138e0:	2800      	cmp	r0, #0
 80138e2:	f000 80ad 	beq.w	8013a40 <rcl_expand_topic_name+0x168>
 80138e6:	460e      	mov	r6, r1
 80138e8:	2900      	cmp	r1, #0
 80138ea:	f000 80a9 	beq.w	8013a40 <rcl_expand_topic_name+0x168>
 80138ee:	4617      	mov	r7, r2
 80138f0:	2a00      	cmp	r2, #0
 80138f2:	f000 80a5 	beq.w	8013a40 <rcl_expand_topic_name+0x168>
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 80a2 	beq.w	8013a40 <rcl_expand_topic_name+0x168>
 80138fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f000 809e 	beq.w	8013a40 <rcl_expand_topic_name+0x168>
 8013904:	2200      	movs	r2, #0
 8013906:	a909      	add	r1, sp, #36	; 0x24
 8013908:	4680      	mov	r8, r0
 801390a:	f000 f9fb 	bl	8013d04 <rcl_validate_topic_name>
 801390e:	4604      	mov	r4, r0
 8013910:	2800      	cmp	r0, #0
 8013912:	f040 8096 	bne.w	8013a42 <rcl_expand_topic_name+0x16a>
 8013916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013918:	2b00      	cmp	r3, #0
 801391a:	f040 809a 	bne.w	8013a52 <rcl_expand_topic_name+0x17a>
 801391e:	4602      	mov	r2, r0
 8013920:	a909      	add	r1, sp, #36	; 0x24
 8013922:	4630      	mov	r0, r6
 8013924:	f7fd f83e 	bl	80109a4 <rmw_validate_node_name>
 8013928:	2800      	cmp	r0, #0
 801392a:	f040 808e 	bne.w	8013a4a <rcl_expand_topic_name+0x172>
 801392e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013930:	2a00      	cmp	r2, #0
 8013932:	f040 8093 	bne.w	8013a5c <rcl_expand_topic_name+0x184>
 8013936:	a909      	add	r1, sp, #36	; 0x24
 8013938:	4638      	mov	r0, r7
 801393a:	f7fd f815 	bl	8010968 <rmw_validate_namespace>
 801393e:	2800      	cmp	r0, #0
 8013940:	f040 8083 	bne.w	8013a4a <rcl_expand_topic_name+0x172>
 8013944:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013946:	2c00      	cmp	r4, #0
 8013948:	f040 80ed 	bne.w	8013b26 <rcl_expand_topic_name+0x24e>
 801394c:	217b      	movs	r1, #123	; 0x7b
 801394e:	4640      	mov	r0, r8
 8013950:	f000 ffda 	bl	8014908 <strchr>
 8013954:	f898 3000 	ldrb.w	r3, [r8]
 8013958:	2b2f      	cmp	r3, #47	; 0x2f
 801395a:	4605      	mov	r5, r0
 801395c:	f000 809e 	beq.w	8013a9c <rcl_expand_topic_name+0x1c4>
 8013960:	2b7e      	cmp	r3, #126	; 0x7e
 8013962:	f040 80a2 	bne.w	8013aaa <rcl_expand_topic_name+0x1d2>
 8013966:	4638      	mov	r0, r7
 8013968:	f7ec fc44 	bl	80001f4 <strlen>
 801396c:	4a82      	ldr	r2, [pc, #520]	; (8013b78 <rcl_expand_topic_name+0x2a0>)
 801396e:	4b83      	ldr	r3, [pc, #524]	; (8013b7c <rcl_expand_topic_name+0x2a4>)
 8013970:	2801      	cmp	r0, #1
 8013972:	bf18      	it	ne
 8013974:	4613      	movne	r3, r2
 8013976:	9302      	str	r3, [sp, #8]
 8013978:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8013980:	f108 0301 	add.w	r3, r8, #1
 8013984:	9305      	str	r3, [sp, #20]
 8013986:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801398a:	9301      	str	r3, [sp, #4]
 801398c:	ab14      	add	r3, sp, #80	; 0x50
 801398e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013990:	f7fc fbd2 	bl	8010138 <rcutils_format_string_limit>
 8013994:	4682      	mov	sl, r0
 8013996:	2800      	cmp	r0, #0
 8013998:	f000 80c7 	beq.w	8013b2a <rcl_expand_topic_name+0x252>
 801399c:	2d00      	cmp	r5, #0
 801399e:	f000 80a2 	beq.w	8013ae6 <rcl_expand_topic_name+0x20e>
 80139a2:	217b      	movs	r1, #123	; 0x7b
 80139a4:	f000 ffb0 	bl	8014908 <strchr>
 80139a8:	46d1      	mov	r9, sl
 80139aa:	4605      	mov	r5, r0
 80139ac:	9407      	str	r4, [sp, #28]
 80139ae:	46d3      	mov	fp, sl
 80139b0:	464c      	mov	r4, r9
 80139b2:	2d00      	cmp	r5, #0
 80139b4:	f000 80be 	beq.w	8013b34 <rcl_expand_topic_name+0x25c>
 80139b8:	217d      	movs	r1, #125	; 0x7d
 80139ba:	4620      	mov	r0, r4
 80139bc:	f000 ffa4 	bl	8014908 <strchr>
 80139c0:	eba0 0905 	sub.w	r9, r0, r5
 80139c4:	f109 0a01 	add.w	sl, r9, #1
 80139c8:	486d      	ldr	r0, [pc, #436]	; (8013b80 <rcl_expand_topic_name+0x2a8>)
 80139ca:	4652      	mov	r2, sl
 80139cc:	4629      	mov	r1, r5
 80139ce:	f000 ffa8 	bl	8014922 <strncmp>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	d067      	beq.n	8013aa6 <rcl_expand_topic_name+0x1ce>
 80139d6:	486b      	ldr	r0, [pc, #428]	; (8013b84 <rcl_expand_topic_name+0x2ac>)
 80139d8:	4652      	mov	r2, sl
 80139da:	4629      	mov	r1, r5
 80139dc:	f000 ffa1 	bl	8014922 <strncmp>
 80139e0:	b130      	cbz	r0, 80139f0 <rcl_expand_topic_name+0x118>
 80139e2:	4869      	ldr	r0, [pc, #420]	; (8013b88 <rcl_expand_topic_name+0x2b0>)
 80139e4:	4652      	mov	r2, sl
 80139e6:	4629      	mov	r1, r5
 80139e8:	f000 ff9b 	bl	8014922 <strncmp>
 80139ec:	2800      	cmp	r0, #0
 80139ee:	d137      	bne.n	8013a60 <rcl_expand_topic_name+0x188>
 80139f0:	46b9      	mov	r9, r7
 80139f2:	ab16      	add	r3, sp, #88	; 0x58
 80139f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80139f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80139fc:	ab14      	add	r3, sp, #80	; 0x50
 80139fe:	4628      	mov	r0, r5
 8013a00:	cb0c      	ldmia	r3, {r2, r3}
 8013a02:	4651      	mov	r1, sl
 8013a04:	f7fc fcd4 	bl	80103b0 <rcutils_strndup>
 8013a08:	4605      	mov	r5, r0
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	f000 809c 	beq.w	8013b48 <rcl_expand_topic_name+0x270>
 8013a10:	464a      	mov	r2, r9
 8013a12:	4620      	mov	r0, r4
 8013a14:	ab14      	add	r3, sp, #80	; 0x50
 8013a16:	4629      	mov	r1, r5
 8013a18:	f7fc fbc8 	bl	80101ac <rcutils_repl_str>
 8013a1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a20:	4604      	mov	r4, r0
 8013a22:	4628      	mov	r0, r5
 8013a24:	4798      	blx	r3
 8013a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a28:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a2a:	4658      	mov	r0, fp
 8013a2c:	4798      	blx	r3
 8013a2e:	2c00      	cmp	r4, #0
 8013a30:	d07b      	beq.n	8013b2a <rcl_expand_topic_name+0x252>
 8013a32:	217b      	movs	r1, #123	; 0x7b
 8013a34:	4620      	mov	r0, r4
 8013a36:	f000 ff67 	bl	8014908 <strchr>
 8013a3a:	46a3      	mov	fp, r4
 8013a3c:	4605      	mov	r5, r0
 8013a3e:	e7b8      	b.n	80139b2 <rcl_expand_topic_name+0xda>
 8013a40:	240b      	movs	r4, #11
 8013a42:	4620      	mov	r0, r4
 8013a44:	b00b      	add	sp, #44	; 0x2c
 8013a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a4a:	f7f9 fdaf 	bl	800d5ac <rcl_convert_rmw_ret_to_rcl_ret>
 8013a4e:	4604      	mov	r4, r0
 8013a50:	e7f7      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013a52:	2467      	movs	r4, #103	; 0x67
 8013a54:	4620      	mov	r0, r4
 8013a56:	b00b      	add	sp, #44	; 0x2c
 8013a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a5c:	24c9      	movs	r4, #201	; 0xc9
 8013a5e:	e7f0      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013a60:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8013a64:	9806      	ldr	r0, [sp, #24]
 8013a66:	1c69      	adds	r1, r5, #1
 8013a68:	f7fc fdbc 	bl	80105e4 <rcutils_string_map_getn>
 8013a6c:	4681      	mov	r9, r0
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d1bf      	bne.n	80139f2 <rcl_expand_topic_name+0x11a>
 8013a72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013a74:	aa16      	add	r2, sp, #88	; 0x58
 8013a76:	6018      	str	r0, [r3, #0]
 8013a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8013a7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a7e:	ab14      	add	r3, sp, #80	; 0x50
 8013a80:	cb0c      	ldmia	r3, {r2, r3}
 8013a82:	4651      	mov	r1, sl
 8013a84:	4628      	mov	r0, r5
 8013a86:	f7fc fc93 	bl	80103b0 <rcutils_strndup>
 8013a8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a8e:	4798      	blx	r3
 8013a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a94:	4658      	mov	r0, fp
 8013a96:	2469      	movs	r4, #105	; 0x69
 8013a98:	4798      	blx	r3
 8013a9a:	e7d2      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d05b      	beq.n	8013b58 <rcl_expand_topic_name+0x280>
 8013aa0:	46c1      	mov	r9, r8
 8013aa2:	46a2      	mov	sl, r4
 8013aa4:	e782      	b.n	80139ac <rcl_expand_topic_name+0xd4>
 8013aa6:	46b1      	mov	r9, r6
 8013aa8:	e7a3      	b.n	80139f2 <rcl_expand_topic_name+0x11a>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d1f8      	bne.n	8013aa0 <rcl_expand_topic_name+0x1c8>
 8013aae:	4638      	mov	r0, r7
 8013ab0:	f7ec fba0 	bl	80001f4 <strlen>
 8013ab4:	4a35      	ldr	r2, [pc, #212]	; (8013b8c <rcl_expand_topic_name+0x2b4>)
 8013ab6:	4b36      	ldr	r3, [pc, #216]	; (8013b90 <rcl_expand_topic_name+0x2b8>)
 8013ab8:	f8cd 8010 	str.w	r8, [sp, #16]
 8013abc:	2801      	cmp	r0, #1
 8013abe:	bf18      	it	ne
 8013ac0:	4613      	movne	r3, r2
 8013ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013ac6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013aca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013acc:	9703      	str	r7, [sp, #12]
 8013ace:	9200      	str	r2, [sp, #0]
 8013ad0:	ab14      	add	r3, sp, #80	; 0x50
 8013ad2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013ad4:	f7fc fb30 	bl	8010138 <rcutils_format_string_limit>
 8013ad8:	4682      	mov	sl, r0
 8013ada:	4653      	mov	r3, sl
 8013adc:	b32b      	cbz	r3, 8013b2a <rcl_expand_topic_name+0x252>
 8013ade:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ae0:	f8c3 a000 	str.w	sl, [r3]
 8013ae4:	e7ad      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8013aea:	2b2f      	cmp	r3, #47	; 0x2f
 8013aec:	d0f7      	beq.n	8013ade <rcl_expand_topic_name+0x206>
 8013aee:	4638      	mov	r0, r7
 8013af0:	f7ec fb80 	bl	80001f4 <strlen>
 8013af4:	4a25      	ldr	r2, [pc, #148]	; (8013b8c <rcl_expand_topic_name+0x2b4>)
 8013af6:	4b26      	ldr	r3, [pc, #152]	; (8013b90 <rcl_expand_topic_name+0x2b8>)
 8013af8:	f8cd a010 	str.w	sl, [sp, #16]
 8013afc:	2801      	cmp	r0, #1
 8013afe:	bf18      	it	ne
 8013b00:	4613      	movne	r3, r2
 8013b02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013b06:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013b0c:	9703      	str	r7, [sp, #12]
 8013b0e:	9200      	str	r2, [sp, #0]
 8013b10:	ab14      	add	r3, sp, #80	; 0x50
 8013b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013b14:	f7fc fb10 	bl	8010138 <rcutils_format_string_limit>
 8013b18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013b1c:	4605      	mov	r5, r0
 8013b1e:	4650      	mov	r0, sl
 8013b20:	4798      	blx	r3
 8013b22:	46aa      	mov	sl, r5
 8013b24:	e7d9      	b.n	8013ada <rcl_expand_topic_name+0x202>
 8013b26:	24ca      	movs	r4, #202	; 0xca
 8013b28:	e78b      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013b2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	6013      	str	r3, [r2, #0]
 8013b30:	240a      	movs	r4, #10
 8013b32:	e786      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013b34:	465b      	mov	r3, fp
 8013b36:	9c07      	ldr	r4, [sp, #28]
 8013b38:	46da      	mov	sl, fp
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d1d3      	bne.n	8013ae6 <rcl_expand_topic_name+0x20e>
 8013b3e:	f898 3000 	ldrb.w	r3, [r8]
 8013b42:	2b2f      	cmp	r3, #47	; 0x2f
 8013b44:	d0cb      	beq.n	8013ade <rcl_expand_topic_name+0x206>
 8013b46:	e7b2      	b.n	8013aae <rcl_expand_topic_name+0x1d6>
 8013b48:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8013b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b4e:	6015      	str	r5, [r2, #0]
 8013b50:	4658      	mov	r0, fp
 8013b52:	4798      	blx	r3
 8013b54:	240a      	movs	r4, #10
 8013b56:	e774      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013b58:	ab17      	add	r3, sp, #92	; 0x5c
 8013b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013b5e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013b62:	ab14      	add	r3, sp, #80	; 0x50
 8013b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013b66:	4640      	mov	r0, r8
 8013b68:	f7fc fc00 	bl	801036c <rcutils_strdup>
 8013b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	6018      	str	r0, [r3, #0]
 8013b72:	bf08      	it	eq
 8013b74:	240a      	moveq	r4, #10
 8013b76:	e764      	b.n	8013a42 <rcl_expand_topic_name+0x16a>
 8013b78:	08016538 	.word	0x08016538
 8013b7c:	08015be8 	.word	0x08015be8
 8013b80:	08016540 	.word	0x08016540
 8013b84:	08016548 	.word	0x08016548
 8013b88:	08016550 	.word	0x08016550
 8013b8c:	08015d7c 	.word	0x08015d7c
 8013b90:	08015bf8 	.word	0x08015bf8

08013b94 <rcl_get_default_topic_name_substitutions>:
 8013b94:	2800      	cmp	r0, #0
 8013b96:	bf0c      	ite	eq
 8013b98:	200b      	moveq	r0, #11
 8013b9a:	2000      	movne	r0, #0
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop

08013ba0 <rcl_get_zero_initialized_guard_condition>:
 8013ba0:	4a03      	ldr	r2, [pc, #12]	; (8013bb0 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ba8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013bac:	4618      	mov	r0, r3
 8013bae:	4770      	bx	lr
 8013bb0:	0801655c 	.word	0x0801655c

08013bb4 <rcl_guard_condition_init_from_rmw>:
 8013bb4:	b082      	sub	sp, #8
 8013bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bba:	b086      	sub	sp, #24
 8013bbc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8013bc6:	460e      	mov	r6, r1
 8013bc8:	4617      	mov	r7, r2
 8013bca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013bce:	f10d 0e04 	add.w	lr, sp, #4
 8013bd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8013bda:	f8ce 3000 	str.w	r3, [lr]
 8013bde:	a801      	add	r0, sp, #4
 8013be0:	f7f4 fe46 	bl	8008870 <rcutils_allocator_is_valid>
 8013be4:	b350      	cbz	r0, 8013c3c <rcl_guard_condition_init_from_rmw+0x88>
 8013be6:	b34c      	cbz	r4, 8013c3c <rcl_guard_condition_init_from_rmw+0x88>
 8013be8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013bec:	f1b8 0f00 	cmp.w	r8, #0
 8013bf0:	d11e      	bne.n	8013c30 <rcl_guard_condition_init_from_rmw+0x7c>
 8013bf2:	b31f      	cbz	r7, 8013c3c <rcl_guard_condition_init_from_rmw+0x88>
 8013bf4:	4638      	mov	r0, r7
 8013bf6:	f7f9 fcf7 	bl	800d5e8 <rcl_context_is_valid>
 8013bfa:	b328      	cbz	r0, 8013c48 <rcl_guard_condition_init_from_rmw+0x94>
 8013bfc:	9b01      	ldr	r3, [sp, #4]
 8013bfe:	9905      	ldr	r1, [sp, #20]
 8013c00:	201c      	movs	r0, #28
 8013c02:	4798      	blx	r3
 8013c04:	4605      	mov	r5, r0
 8013c06:	6060      	str	r0, [r4, #4]
 8013c08:	b358      	cbz	r0, 8013c62 <rcl_guard_condition_init_from_rmw+0xae>
 8013c0a:	b1fe      	cbz	r6, 8013c4c <rcl_guard_condition_init_from_rmw+0x98>
 8013c0c:	6006      	str	r6, [r0, #0]
 8013c0e:	f880 8004 	strb.w	r8, [r0, #4]
 8013c12:	ac01      	add	r4, sp, #4
 8013c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c16:	f105 0c08 	add.w	ip, r5, #8
 8013c1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c1e:	6823      	ldr	r3, [r4, #0]
 8013c20:	f8cc 3000 	str.w	r3, [ip]
 8013c24:	2000      	movs	r0, #0
 8013c26:	b006      	add	sp, #24
 8013c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c2c:	b002      	add	sp, #8
 8013c2e:	4770      	bx	lr
 8013c30:	2064      	movs	r0, #100	; 0x64
 8013c32:	b006      	add	sp, #24
 8013c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c38:	b002      	add	sp, #8
 8013c3a:	4770      	bx	lr
 8013c3c:	200b      	movs	r0, #11
 8013c3e:	b006      	add	sp, #24
 8013c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c44:	b002      	add	sp, #8
 8013c46:	4770      	bx	lr
 8013c48:	2065      	movs	r0, #101	; 0x65
 8013c4a:	e7f2      	b.n	8013c32 <rcl_guard_condition_init_from_rmw+0x7e>
 8013c4c:	6838      	ldr	r0, [r7, #0]
 8013c4e:	3028      	adds	r0, #40	; 0x28
 8013c50:	f000 fa3a 	bl	80140c8 <rmw_create_guard_condition>
 8013c54:	6028      	str	r0, [r5, #0]
 8013c56:	6865      	ldr	r5, [r4, #4]
 8013c58:	682e      	ldr	r6, [r5, #0]
 8013c5a:	b126      	cbz	r6, 8013c66 <rcl_guard_condition_init_from_rmw+0xb2>
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	712b      	strb	r3, [r5, #4]
 8013c60:	e7d7      	b.n	8013c12 <rcl_guard_condition_init_from_rmw+0x5e>
 8013c62:	200a      	movs	r0, #10
 8013c64:	e7e5      	b.n	8013c32 <rcl_guard_condition_init_from_rmw+0x7e>
 8013c66:	4628      	mov	r0, r5
 8013c68:	9b02      	ldr	r3, [sp, #8]
 8013c6a:	9905      	ldr	r1, [sp, #20]
 8013c6c:	4798      	blx	r3
 8013c6e:	6066      	str	r6, [r4, #4]
 8013c70:	2001      	movs	r0, #1
 8013c72:	e7de      	b.n	8013c32 <rcl_guard_condition_init_from_rmw+0x7e>

08013c74 <rcl_guard_condition_fini>:
 8013c74:	b570      	push	{r4, r5, r6, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	b1f0      	cbz	r0, 8013cb8 <rcl_guard_condition_fini+0x44>
 8013c7a:	6843      	ldr	r3, [r0, #4]
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	b163      	cbz	r3, 8013c9a <rcl_guard_condition_fini+0x26>
 8013c80:	6818      	ldr	r0, [r3, #0]
 8013c82:	68de      	ldr	r6, [r3, #12]
 8013c84:	6999      	ldr	r1, [r3, #24]
 8013c86:	b160      	cbz	r0, 8013ca2 <rcl_guard_condition_fini+0x2e>
 8013c88:	791d      	ldrb	r5, [r3, #4]
 8013c8a:	b965      	cbnz	r5, 8013ca6 <rcl_guard_condition_fini+0x32>
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	47b0      	blx	r6
 8013c90:	2300      	movs	r3, #0
 8013c92:	4628      	mov	r0, r5
 8013c94:	6063      	str	r3, [r4, #4]
 8013c96:	b002      	add	sp, #8
 8013c98:	bd70      	pop	{r4, r5, r6, pc}
 8013c9a:	461d      	mov	r5, r3
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	b002      	add	sp, #8
 8013ca0:	bd70      	pop	{r4, r5, r6, pc}
 8013ca2:	4605      	mov	r5, r0
 8013ca4:	e7f2      	b.n	8013c8c <rcl_guard_condition_fini+0x18>
 8013ca6:	9101      	str	r1, [sp, #4]
 8013ca8:	f000 fa22 	bl	80140f0 <rmw_destroy_guard_condition>
 8013cac:	1e05      	subs	r5, r0, #0
 8013cae:	6863      	ldr	r3, [r4, #4]
 8013cb0:	9901      	ldr	r1, [sp, #4]
 8013cb2:	bf18      	it	ne
 8013cb4:	2501      	movne	r5, #1
 8013cb6:	e7e9      	b.n	8013c8c <rcl_guard_condition_fini+0x18>
 8013cb8:	250b      	movs	r5, #11
 8013cba:	4628      	mov	r0, r5
 8013cbc:	b002      	add	sp, #8
 8013cbe:	bd70      	pop	{r4, r5, r6, pc}

08013cc0 <rcl_guard_condition_get_default_options>:
 8013cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cc2:	b087      	sub	sp, #28
 8013cc4:	4606      	mov	r6, r0
 8013cc6:	4668      	mov	r0, sp
 8013cc8:	f7f4 fdc4 	bl	8008854 <rcutils_get_default_allocator>
 8013ccc:	4b09      	ldr	r3, [pc, #36]	; (8013cf4 <rcl_guard_condition_get_default_options+0x34>)
 8013cce:	46ee      	mov	lr, sp
 8013cd0:	469c      	mov	ip, r3
 8013cd2:	461d      	mov	r5, r3
 8013cd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013cd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cde:	4634      	mov	r4, r6
 8013ce0:	f8de 7000 	ldr.w	r7, [lr]
 8013ce4:	f8cc 7000 	str.w	r7, [ip]
 8013ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cea:	4630      	mov	r0, r6
 8013cec:	6027      	str	r7, [r4, #0]
 8013cee:	b007      	add	sp, #28
 8013cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20012a14 	.word	0x20012a14

08013cf8 <rcl_guard_condition_get_rmw_handle>:
 8013cf8:	b110      	cbz	r0, 8013d00 <rcl_guard_condition_get_rmw_handle+0x8>
 8013cfa:	6840      	ldr	r0, [r0, #4]
 8013cfc:	b100      	cbz	r0, 8013d00 <rcl_guard_condition_get_rmw_handle+0x8>
 8013cfe:	6800      	ldr	r0, [r0, #0]
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop

08013d04 <rcl_validate_topic_name>:
 8013d04:	2800      	cmp	r0, #0
 8013d06:	d07a      	beq.n	8013dfe <rcl_validate_topic_name+0xfa>
 8013d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d0c:	460e      	mov	r6, r1
 8013d0e:	2900      	cmp	r1, #0
 8013d10:	d07c      	beq.n	8013e0c <rcl_validate_topic_name+0x108>
 8013d12:	4617      	mov	r7, r2
 8013d14:	4605      	mov	r5, r0
 8013d16:	f7ec fa6d 	bl	80001f4 <strlen>
 8013d1a:	b1b0      	cbz	r0, 8013d4a <rcl_validate_topic_name+0x46>
 8013d1c:	f895 9000 	ldrb.w	r9, [r5]
 8013d20:	f8df c180 	ldr.w	ip, [pc, #384]	; 8013ea4 <rcl_validate_topic_name+0x1a0>
 8013d24:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013d28:	f013 0304 	ands.w	r3, r3, #4
 8013d2c:	d169      	bne.n	8013e02 <rcl_validate_topic_name+0xfe>
 8013d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013d32:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013d36:	2a2f      	cmp	r2, #47	; 0x2f
 8013d38:	d10e      	bne.n	8013d58 <rcl_validate_topic_name+0x54>
 8013d3a:	2202      	movs	r2, #2
 8013d3c:	6032      	str	r2, [r6, #0]
 8013d3e:	b36f      	cbz	r7, 8013d9c <rcl_validate_topic_name+0x98>
 8013d40:	f8c7 8000 	str.w	r8, [r7]
 8013d44:	4618      	mov	r0, r3
 8013d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	6033      	str	r3, [r6, #0]
 8013d4e:	b32f      	cbz	r7, 8013d9c <rcl_validate_topic_name+0x98>
 8013d50:	2000      	movs	r0, #0
 8013d52:	6038      	str	r0, [r7, #0]
 8013d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d58:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8013d5c:	461c      	mov	r4, r3
 8013d5e:	4619      	mov	r1, r3
 8013d60:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013d64:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013d68:	f1be 0f09 	cmp.w	lr, #9
 8013d6c:	d919      	bls.n	8013da2 <rcl_validate_topic_name+0x9e>
 8013d6e:	f022 0e20 	bic.w	lr, r2, #32
 8013d72:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8013d76:	f1be 0f19 	cmp.w	lr, #25
 8013d7a:	d912      	bls.n	8013da2 <rcl_validate_topic_name+0x9e>
 8013d7c:	2a5f      	cmp	r2, #95	; 0x5f
 8013d7e:	d019      	beq.n	8013db4 <rcl_validate_topic_name+0xb0>
 8013d80:	2a2f      	cmp	r2, #47	; 0x2f
 8013d82:	d051      	beq.n	8013e28 <rcl_validate_topic_name+0x124>
 8013d84:	2a7e      	cmp	r2, #126	; 0x7e
 8013d86:	d048      	beq.n	8013e1a <rcl_validate_topic_name+0x116>
 8013d88:	2a7b      	cmp	r2, #123	; 0x7b
 8013d8a:	d054      	beq.n	8013e36 <rcl_validate_topic_name+0x132>
 8013d8c:	2a7d      	cmp	r2, #125	; 0x7d
 8013d8e:	d161      	bne.n	8013e54 <rcl_validate_topic_name+0x150>
 8013d90:	2c00      	cmp	r4, #0
 8013d92:	d155      	bne.n	8013e40 <rcl_validate_topic_name+0x13c>
 8013d94:	2305      	movs	r3, #5
 8013d96:	6033      	str	r3, [r6, #0]
 8013d98:	b107      	cbz	r7, 8013d9c <rcl_validate_topic_name+0x98>
 8013d9a:	6039      	str	r1, [r7, #0]
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013da6:	0752      	lsls	r2, r2, #29
 8013da8:	d504      	bpl.n	8013db4 <rcl_validate_topic_name+0xb0>
 8013daa:	b11c      	cbz	r4, 8013db4 <rcl_validate_topic_name+0xb0>
 8013dac:	b111      	cbz	r1, 8013db4 <rcl_validate_topic_name+0xb0>
 8013dae:	1e4a      	subs	r2, r1, #1
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d02d      	beq.n	8013e10 <rcl_validate_topic_name+0x10c>
 8013db4:	3101      	adds	r1, #1
 8013db6:	4288      	cmp	r0, r1
 8013db8:	d1d2      	bne.n	8013d60 <rcl_validate_topic_name+0x5c>
 8013dba:	2c00      	cmp	r4, #0
 8013dbc:	d145      	bne.n	8013e4a <rcl_validate_topic_name+0x146>
 8013dbe:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8013dc2:	d04f      	beq.n	8013e64 <rcl_validate_topic_name+0x160>
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	e006      	b.n	8013dd8 <rcl_validate_topic_name+0xd4>
 8013dca:	428b      	cmp	r3, r1
 8013dcc:	f105 0501 	add.w	r5, r5, #1
 8013dd0:	f103 0201 	add.w	r2, r3, #1
 8013dd4:	d236      	bcs.n	8013e44 <rcl_validate_topic_name+0x140>
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	4580      	cmp	r8, r0
 8013dda:	f100 0001 	add.w	r0, r0, #1
 8013dde:	d0f4      	beq.n	8013dca <rcl_validate_topic_name+0xc6>
 8013de0:	782a      	ldrb	r2, [r5, #0]
 8013de2:	2a2f      	cmp	r2, #47	; 0x2f
 8013de4:	d1f1      	bne.n	8013dca <rcl_validate_topic_name+0xc6>
 8013de6:	786a      	ldrb	r2, [r5, #1]
 8013de8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013dec:	0754      	lsls	r4, r2, #29
 8013dee:	d5ec      	bpl.n	8013dca <rcl_validate_topic_name+0xc6>
 8013df0:	2204      	movs	r2, #4
 8013df2:	6032      	str	r2, [r6, #0]
 8013df4:	2f00      	cmp	r7, #0
 8013df6:	d0d1      	beq.n	8013d9c <rcl_validate_topic_name+0x98>
 8013df8:	603b      	str	r3, [r7, #0]
 8013dfa:	2000      	movs	r0, #0
 8013dfc:	e7aa      	b.n	8013d54 <rcl_validate_topic_name+0x50>
 8013dfe:	200b      	movs	r0, #11
 8013e00:	4770      	bx	lr
 8013e02:	2304      	movs	r3, #4
 8013e04:	6033      	str	r3, [r6, #0]
 8013e06:	2f00      	cmp	r7, #0
 8013e08:	d1a2      	bne.n	8013d50 <rcl_validate_topic_name+0x4c>
 8013e0a:	e7c7      	b.n	8013d9c <rcl_validate_topic_name+0x98>
 8013e0c:	200b      	movs	r0, #11
 8013e0e:	e7a1      	b.n	8013d54 <rcl_validate_topic_name+0x50>
 8013e10:	2309      	movs	r3, #9
 8013e12:	6033      	str	r3, [r6, #0]
 8013e14:	2f00      	cmp	r7, #0
 8013e16:	d1c0      	bne.n	8013d9a <rcl_validate_topic_name+0x96>
 8013e18:	e7c0      	b.n	8013d9c <rcl_validate_topic_name+0x98>
 8013e1a:	2900      	cmp	r1, #0
 8013e1c:	d0ca      	beq.n	8013db4 <rcl_validate_topic_name+0xb0>
 8013e1e:	2306      	movs	r3, #6
 8013e20:	6033      	str	r3, [r6, #0]
 8013e22:	2f00      	cmp	r7, #0
 8013e24:	d1b9      	bne.n	8013d9a <rcl_validate_topic_name+0x96>
 8013e26:	e7b9      	b.n	8013d9c <rcl_validate_topic_name+0x98>
 8013e28:	2c00      	cmp	r4, #0
 8013e2a:	d0c3      	beq.n	8013db4 <rcl_validate_topic_name+0xb0>
 8013e2c:	2308      	movs	r3, #8
 8013e2e:	6033      	str	r3, [r6, #0]
 8013e30:	2f00      	cmp	r7, #0
 8013e32:	d1b2      	bne.n	8013d9a <rcl_validate_topic_name+0x96>
 8013e34:	e7b2      	b.n	8013d9c <rcl_validate_topic_name+0x98>
 8013e36:	2c00      	cmp	r4, #0
 8013e38:	d1f8      	bne.n	8013e2c <rcl_validate_topic_name+0x128>
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	2401      	movs	r4, #1
 8013e3e:	e7b9      	b.n	8013db4 <rcl_validate_topic_name+0xb0>
 8013e40:	2400      	movs	r4, #0
 8013e42:	e7b7      	b.n	8013db4 <rcl_validate_topic_name+0xb0>
 8013e44:	2000      	movs	r0, #0
 8013e46:	6030      	str	r0, [r6, #0]
 8013e48:	e784      	b.n	8013d54 <rcl_validate_topic_name+0x50>
 8013e4a:	2205      	movs	r2, #5
 8013e4c:	6032      	str	r2, [r6, #0]
 8013e4e:	2f00      	cmp	r7, #0
 8013e50:	d1d2      	bne.n	8013df8 <rcl_validate_topic_name+0xf4>
 8013e52:	e7a3      	b.n	8013d9c <rcl_validate_topic_name+0x98>
 8013e54:	2c00      	cmp	r4, #0
 8013e56:	bf14      	ite	ne
 8013e58:	2308      	movne	r3, #8
 8013e5a:	2303      	moveq	r3, #3
 8013e5c:	6033      	str	r3, [r6, #0]
 8013e5e:	2f00      	cmp	r7, #0
 8013e60:	d19b      	bne.n	8013d9a <rcl_validate_topic_name+0x96>
 8013e62:	e79b      	b.n	8013d9c <rcl_validate_topic_name+0x98>
 8013e64:	2301      	movs	r3, #1
 8013e66:	e00a      	b.n	8013e7e <rcl_validate_topic_name+0x17a>
 8013e68:	2c01      	cmp	r4, #1
 8013e6a:	d013      	beq.n	8013e94 <rcl_validate_topic_name+0x190>
 8013e6c:	4299      	cmp	r1, r3
 8013e6e:	f104 0401 	add.w	r4, r4, #1
 8013e72:	f105 0501 	add.w	r5, r5, #1
 8013e76:	f103 0201 	add.w	r2, r3, #1
 8013e7a:	d9e3      	bls.n	8013e44 <rcl_validate_topic_name+0x140>
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	45a0      	cmp	r8, r4
 8013e80:	d0f4      	beq.n	8013e6c <rcl_validate_topic_name+0x168>
 8013e82:	782a      	ldrb	r2, [r5, #0]
 8013e84:	2a2f      	cmp	r2, #47	; 0x2f
 8013e86:	d1ef      	bne.n	8013e68 <rcl_validate_topic_name+0x164>
 8013e88:	786a      	ldrb	r2, [r5, #1]
 8013e8a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013e8e:	0752      	lsls	r2, r2, #29
 8013e90:	d5ec      	bpl.n	8013e6c <rcl_validate_topic_name+0x168>
 8013e92:	e7ad      	b.n	8013df0 <rcl_validate_topic_name+0xec>
 8013e94:	2307      	movs	r3, #7
 8013e96:	6033      	str	r3, [r6, #0]
 8013e98:	2f00      	cmp	r7, #0
 8013e9a:	f43f af7f 	beq.w	8013d9c <rcl_validate_topic_name+0x98>
 8013e9e:	603c      	str	r4, [r7, #0]
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	e757      	b.n	8013d54 <rcl_validate_topic_name+0x50>
 8013ea4:	080165d4 	.word	0x080165d4

08013ea8 <rcutils_string_array_fini>:
 8013ea8:	b320      	cbz	r0, 8013ef4 <rcutils_string_array_fini+0x4c>
 8013eaa:	b570      	push	{r4, r5, r6, lr}
 8013eac:	4604      	mov	r4, r0
 8013eae:	6840      	ldr	r0, [r0, #4]
 8013eb0:	b1d8      	cbz	r0, 8013eea <rcutils_string_array_fini+0x42>
 8013eb2:	f104 0008 	add.w	r0, r4, #8
 8013eb6:	f7f4 fcdb 	bl	8008870 <rcutils_allocator_is_valid>
 8013eba:	b1b8      	cbz	r0, 8013eec <rcutils_string_array_fini+0x44>
 8013ebc:	6823      	ldr	r3, [r4, #0]
 8013ebe:	b1bb      	cbz	r3, 8013ef0 <rcutils_string_array_fini+0x48>
 8013ec0:	2500      	movs	r5, #0
 8013ec2:	6860      	ldr	r0, [r4, #4]
 8013ec4:	462e      	mov	r6, r5
 8013ec6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8013eca:	68e3      	ldr	r3, [r4, #12]
 8013ecc:	69a1      	ldr	r1, [r4, #24]
 8013ece:	4798      	blx	r3
 8013ed0:	e9d4 3000 	ldrd	r3, r0, [r4]
 8013ed4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8013ed8:	3501      	adds	r5, #1
 8013eda:	429d      	cmp	r5, r3
 8013edc:	d3f3      	bcc.n	8013ec6 <rcutils_string_array_fini+0x1e>
 8013ede:	68e3      	ldr	r3, [r4, #12]
 8013ee0:	69a1      	ldr	r1, [r4, #24]
 8013ee2:	4798      	blx	r3
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	e9c4 0000 	strd	r0, r0, [r4]
 8013eea:	bd70      	pop	{r4, r5, r6, pc}
 8013eec:	200b      	movs	r0, #11
 8013eee:	bd70      	pop	{r4, r5, r6, pc}
 8013ef0:	6860      	ldr	r0, [r4, #4]
 8013ef2:	e7f4      	b.n	8013ede <rcutils_string_array_fini+0x36>
 8013ef4:	200b      	movs	r0, #11
 8013ef6:	4770      	bx	lr

08013ef8 <on_status>:
 8013ef8:	b082      	sub	sp, #8
 8013efa:	b002      	add	sp, #8
 8013efc:	4770      	bx	lr
 8013efe:	bf00      	nop

08013f00 <on_topic>:
 8013f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f04:	4a22      	ldr	r2, [pc, #136]	; (8013f90 <on_topic+0x90>)
 8013f06:	b094      	sub	sp, #80	; 0x50
 8013f08:	6812      	ldr	r2, [r2, #0]
 8013f0a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013f0c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8013f10:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8013f14:	b3c2      	cbz	r2, 8013f88 <on_topic+0x88>
 8013f16:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8013f1a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8013f1e:	e001      	b.n	8013f24 <on_topic+0x24>
 8013f20:	6852      	ldr	r2, [r2, #4]
 8013f22:	b38a      	cbz	r2, 8013f88 <on_topic+0x88>
 8013f24:	6894      	ldr	r4, [r2, #8]
 8013f26:	8aa3      	ldrh	r3, [r4, #20]
 8013f28:	428b      	cmp	r3, r1
 8013f2a:	d1f9      	bne.n	8013f20 <on_topic+0x20>
 8013f2c:	7da3      	ldrb	r3, [r4, #22]
 8013f2e:	4283      	cmp	r3, r0
 8013f30:	d1f6      	bne.n	8013f20 <on_topic+0x20>
 8013f32:	2248      	movs	r2, #72	; 0x48
 8013f34:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013f38:	4668      	mov	r0, sp
 8013f3a:	f000 fda6 	bl	8014a8a <memcpy>
 8013f3e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013f42:	cb0c      	ldmia	r3, {r2, r3}
 8013f44:	4620      	mov	r0, r4
 8013f46:	f7f5 f8c3 	bl	80090d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013f4a:	4607      	mov	r7, r0
 8013f4c:	b1e0      	cbz	r0, 8013f88 <on_topic+0x88>
 8013f4e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8013f52:	4632      	mov	r2, r6
 8013f54:	4628      	mov	r0, r5
 8013f56:	f108 0110 	add.w	r1, r8, #16
 8013f5a:	f7fd ffc9 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 8013f5e:	b930      	cbnz	r0, 8013f6e <on_topic+0x6e>
 8013f60:	480c      	ldr	r0, [pc, #48]	; (8013f94 <on_topic+0x94>)
 8013f62:	4639      	mov	r1, r7
 8013f64:	b014      	add	sp, #80	; 0x50
 8013f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6a:	f7fc bd89 	b.w	8010a80 <put_memory>
 8013f6e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8013f72:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8013f76:	f7fd feb1 	bl	8011cdc <rmw_uros_epoch_nanos>
 8013f7a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8013f7e:	2305      	movs	r3, #5
 8013f80:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013f84:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8013f88:	b014      	add	sp, #80	; 0x50
 8013f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f8e:	bf00      	nop
 8013f90:	20012874 	.word	0x20012874
 8013f94:	20012864 	.word	0x20012864

08013f98 <on_request>:
 8013f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f9c:	4823      	ldr	r0, [pc, #140]	; (801402c <on_request+0x94>)
 8013f9e:	b094      	sub	sp, #80	; 0x50
 8013fa0:	6800      	ldr	r0, [r0, #0]
 8013fa2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8013fa4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8013fa8:	9113      	str	r1, [sp, #76]	; 0x4c
 8013faa:	2800      	cmp	r0, #0
 8013fac:	d03b      	beq.n	8014026 <on_request+0x8e>
 8013fae:	461d      	mov	r5, r3
 8013fb0:	e001      	b.n	8013fb6 <on_request+0x1e>
 8013fb2:	6840      	ldr	r0, [r0, #4]
 8013fb4:	b3b8      	cbz	r0, 8014026 <on_request+0x8e>
 8013fb6:	6884      	ldr	r4, [r0, #8]
 8013fb8:	8b21      	ldrh	r1, [r4, #24]
 8013fba:	4291      	cmp	r1, r2
 8013fbc:	d1f9      	bne.n	8013fb2 <on_request+0x1a>
 8013fbe:	2248      	movs	r2, #72	; 0x48
 8013fc0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8013fc4:	4668      	mov	r0, sp
 8013fc6:	f000 fd60 	bl	8014a8a <memcpy>
 8013fca:	f104 0320 	add.w	r3, r4, #32
 8013fce:	cb0c      	ldmia	r3, {r2, r3}
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f7f5 f87d 	bl	80090d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013fd6:	4680      	mov	r8, r0
 8013fd8:	b328      	cbz	r0, 8014026 <on_request+0x8e>
 8013fda:	4638      	mov	r0, r7
 8013fdc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013fe0:	4632      	mov	r2, r6
 8013fe2:	f107 0110 	add.w	r1, r7, #16
 8013fe6:	f7fd ff83 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 8013fea:	b930      	cbnz	r0, 8013ffa <on_request+0x62>
 8013fec:	4810      	ldr	r0, [pc, #64]	; (8014030 <on_request+0x98>)
 8013fee:	4641      	mov	r1, r8
 8013ff0:	b014      	add	sp, #80	; 0x50
 8013ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff6:	f7fc bd43 	b.w	8010a80 <put_memory>
 8013ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ffc:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8014000:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8014004:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014008:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801400c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014010:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014014:	f7fd fe62 	bl	8011cdc <rmw_uros_epoch_nanos>
 8014018:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801401c:	2303      	movs	r3, #3
 801401e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014022:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8014026:	b014      	add	sp, #80	; 0x50
 8014028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801402c:	20012844 	.word	0x20012844
 8014030:	20012864 	.word	0x20012864

08014034 <on_reply>:
 8014034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014038:	4821      	ldr	r0, [pc, #132]	; (80140c0 <on_reply+0x8c>)
 801403a:	b094      	sub	sp, #80	; 0x50
 801403c:	6800      	ldr	r0, [r0, #0]
 801403e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014040:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014044:	9113      	str	r1, [sp, #76]	; 0x4c
 8014046:	b3b8      	cbz	r0, 80140b8 <on_reply+0x84>
 8014048:	461d      	mov	r5, r3
 801404a:	e001      	b.n	8014050 <on_reply+0x1c>
 801404c:	6840      	ldr	r0, [r0, #4]
 801404e:	b398      	cbz	r0, 80140b8 <on_reply+0x84>
 8014050:	6884      	ldr	r4, [r0, #8]
 8014052:	8b21      	ldrh	r1, [r4, #24]
 8014054:	4291      	cmp	r1, r2
 8014056:	d1f9      	bne.n	801404c <on_reply+0x18>
 8014058:	2248      	movs	r2, #72	; 0x48
 801405a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801405e:	4668      	mov	r0, sp
 8014060:	f000 fd13 	bl	8014a8a <memcpy>
 8014064:	f104 0320 	add.w	r3, r4, #32
 8014068:	cb0c      	ldmia	r3, {r2, r3}
 801406a:	4620      	mov	r0, r4
 801406c:	f7f5 f830 	bl	80090d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014070:	4680      	mov	r8, r0
 8014072:	b308      	cbz	r0, 80140b8 <on_reply+0x84>
 8014074:	4638      	mov	r0, r7
 8014076:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801407a:	4632      	mov	r2, r6
 801407c:	f107 0110 	add.w	r1, r7, #16
 8014080:	f7fd ff36 	bl	8011ef0 <ucdr_deserialize_array_uint8_t>
 8014084:	b930      	cbnz	r0, 8014094 <on_reply+0x60>
 8014086:	480f      	ldr	r0, [pc, #60]	; (80140c4 <on_reply+0x90>)
 8014088:	4641      	mov	r1, r8
 801408a:	b014      	add	sp, #80	; 0x50
 801408c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014090:	f7fc bcf6 	b.w	8010a80 <put_memory>
 8014094:	2200      	movs	r2, #0
 8014096:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801409a:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801409e:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80140a2:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 80140a6:	f7fd fe19 	bl	8011cdc <rmw_uros_epoch_nanos>
 80140aa:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80140ae:	2304      	movs	r3, #4
 80140b0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80140b4:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80140b8:	b014      	add	sp, #80	; 0x50
 80140ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140be:	bf00      	nop
 80140c0:	2000df58 	.word	0x2000df58
 80140c4:	20012864 	.word	0x20012864

080140c8 <rmw_create_guard_condition>:
 80140c8:	b538      	push	{r3, r4, r5, lr}
 80140ca:	4605      	mov	r5, r0
 80140cc:	4807      	ldr	r0, [pc, #28]	; (80140ec <rmw_create_guard_condition+0x24>)
 80140ce:	f7fc fcc7 	bl	8010a60 <get_memory>
 80140d2:	b148      	cbz	r0, 80140e8 <rmw_create_guard_condition+0x20>
 80140d4:	6884      	ldr	r4, [r0, #8]
 80140d6:	2300      	movs	r3, #0
 80140d8:	7423      	strb	r3, [r4, #16]
 80140da:	61e5      	str	r5, [r4, #28]
 80140dc:	f7fc fd28 	bl	8010b30 <rmw_get_implementation_identifier>
 80140e0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80140e4:	f104 0014 	add.w	r0, r4, #20
 80140e8:	bd38      	pop	{r3, r4, r5, pc}
 80140ea:	bf00      	nop
 80140ec:	20012804 	.word	0x20012804

080140f0 <rmw_destroy_guard_condition>:
 80140f0:	b508      	push	{r3, lr}
 80140f2:	4b08      	ldr	r3, [pc, #32]	; (8014114 <rmw_destroy_guard_condition+0x24>)
 80140f4:	6819      	ldr	r1, [r3, #0]
 80140f6:	b911      	cbnz	r1, 80140fe <rmw_destroy_guard_condition+0xe>
 80140f8:	e00a      	b.n	8014110 <rmw_destroy_guard_condition+0x20>
 80140fa:	6849      	ldr	r1, [r1, #4]
 80140fc:	b141      	cbz	r1, 8014110 <rmw_destroy_guard_condition+0x20>
 80140fe:	688b      	ldr	r3, [r1, #8]
 8014100:	3314      	adds	r3, #20
 8014102:	4298      	cmp	r0, r3
 8014104:	d1f9      	bne.n	80140fa <rmw_destroy_guard_condition+0xa>
 8014106:	4803      	ldr	r0, [pc, #12]	; (8014114 <rmw_destroy_guard_condition+0x24>)
 8014108:	f7fc fcba 	bl	8010a80 <put_memory>
 801410c:	2000      	movs	r0, #0
 801410e:	bd08      	pop	{r3, pc}
 8014110:	2001      	movs	r0, #1
 8014112:	bd08      	pop	{r3, pc}
 8014114:	20012804 	.word	0x20012804

08014118 <calloc>:
 8014118:	4b02      	ldr	r3, [pc, #8]	; (8014124 <calloc+0xc>)
 801411a:	460a      	mov	r2, r1
 801411c:	4601      	mov	r1, r0
 801411e:	6818      	ldr	r0, [r3, #0]
 8014120:	f000 b802 	b.w	8014128 <_calloc_r>
 8014124:	2000010c 	.word	0x2000010c

08014128 <_calloc_r>:
 8014128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801412a:	fba1 2402 	umull	r2, r4, r1, r2
 801412e:	b94c      	cbnz	r4, 8014144 <_calloc_r+0x1c>
 8014130:	4611      	mov	r1, r2
 8014132:	9201      	str	r2, [sp, #4]
 8014134:	f000 f886 	bl	8014244 <_malloc_r>
 8014138:	9a01      	ldr	r2, [sp, #4]
 801413a:	4605      	mov	r5, r0
 801413c:	b930      	cbnz	r0, 801414c <_calloc_r+0x24>
 801413e:	4628      	mov	r0, r5
 8014140:	b003      	add	sp, #12
 8014142:	bd30      	pop	{r4, r5, pc}
 8014144:	220c      	movs	r2, #12
 8014146:	6002      	str	r2, [r0, #0]
 8014148:	2500      	movs	r5, #0
 801414a:	e7f8      	b.n	801413e <_calloc_r+0x16>
 801414c:	4621      	mov	r1, r4
 801414e:	f000 fbd3 	bl	80148f8 <memset>
 8014152:	e7f4      	b.n	801413e <_calloc_r+0x16>

08014154 <getenv>:
 8014154:	b507      	push	{r0, r1, r2, lr}
 8014156:	4b04      	ldr	r3, [pc, #16]	; (8014168 <getenv+0x14>)
 8014158:	4601      	mov	r1, r0
 801415a:	aa01      	add	r2, sp, #4
 801415c:	6818      	ldr	r0, [r3, #0]
 801415e:	f000 f805 	bl	801416c <_findenv_r>
 8014162:	b003      	add	sp, #12
 8014164:	f85d fb04 	ldr.w	pc, [sp], #4
 8014168:	2000010c 	.word	0x2000010c

0801416c <_findenv_r>:
 801416c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014170:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80141e0 <_findenv_r+0x74>
 8014174:	4607      	mov	r7, r0
 8014176:	4689      	mov	r9, r1
 8014178:	4616      	mov	r6, r2
 801417a:	f000 fcb3 	bl	8014ae4 <__env_lock>
 801417e:	f8da 4000 	ldr.w	r4, [sl]
 8014182:	b134      	cbz	r4, 8014192 <_findenv_r+0x26>
 8014184:	464b      	mov	r3, r9
 8014186:	4698      	mov	r8, r3
 8014188:	f813 2b01 	ldrb.w	r2, [r3], #1
 801418c:	b13a      	cbz	r2, 801419e <_findenv_r+0x32>
 801418e:	2a3d      	cmp	r2, #61	; 0x3d
 8014190:	d1f9      	bne.n	8014186 <_findenv_r+0x1a>
 8014192:	4638      	mov	r0, r7
 8014194:	f000 fcac 	bl	8014af0 <__env_unlock>
 8014198:	2000      	movs	r0, #0
 801419a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801419e:	eba8 0809 	sub.w	r8, r8, r9
 80141a2:	46a3      	mov	fp, r4
 80141a4:	f854 0b04 	ldr.w	r0, [r4], #4
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d0f2      	beq.n	8014192 <_findenv_r+0x26>
 80141ac:	4642      	mov	r2, r8
 80141ae:	4649      	mov	r1, r9
 80141b0:	f000 fbb7 	bl	8014922 <strncmp>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d1f4      	bne.n	80141a2 <_findenv_r+0x36>
 80141b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80141bc:	eb03 0508 	add.w	r5, r3, r8
 80141c0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80141c4:	2b3d      	cmp	r3, #61	; 0x3d
 80141c6:	d1ec      	bne.n	80141a2 <_findenv_r+0x36>
 80141c8:	f8da 3000 	ldr.w	r3, [sl]
 80141cc:	ebab 0303 	sub.w	r3, fp, r3
 80141d0:	109b      	asrs	r3, r3, #2
 80141d2:	4638      	mov	r0, r7
 80141d4:	6033      	str	r3, [r6, #0]
 80141d6:	f000 fc8b 	bl	8014af0 <__env_unlock>
 80141da:	1c68      	adds	r0, r5, #1
 80141dc:	e7dd      	b.n	801419a <_findenv_r+0x2e>
 80141de:	bf00      	nop
 80141e0:	20000000 	.word	0x20000000

080141e4 <malloc>:
 80141e4:	4b02      	ldr	r3, [pc, #8]	; (80141f0 <malloc+0xc>)
 80141e6:	4601      	mov	r1, r0
 80141e8:	6818      	ldr	r0, [r3, #0]
 80141ea:	f000 b82b 	b.w	8014244 <_malloc_r>
 80141ee:	bf00      	nop
 80141f0:	2000010c 	.word	0x2000010c

080141f4 <free>:
 80141f4:	4b02      	ldr	r3, [pc, #8]	; (8014200 <free+0xc>)
 80141f6:	4601      	mov	r1, r0
 80141f8:	6818      	ldr	r0, [r3, #0]
 80141fa:	f000 bc7f 	b.w	8014afc <_free_r>
 80141fe:	bf00      	nop
 8014200:	2000010c 	.word	0x2000010c

08014204 <sbrk_aligned>:
 8014204:	b570      	push	{r4, r5, r6, lr}
 8014206:	4e0e      	ldr	r6, [pc, #56]	; (8014240 <sbrk_aligned+0x3c>)
 8014208:	460c      	mov	r4, r1
 801420a:	6831      	ldr	r1, [r6, #0]
 801420c:	4605      	mov	r5, r0
 801420e:	b911      	cbnz	r1, 8014216 <sbrk_aligned+0x12>
 8014210:	f000 fbe4 	bl	80149dc <_sbrk_r>
 8014214:	6030      	str	r0, [r6, #0]
 8014216:	4621      	mov	r1, r4
 8014218:	4628      	mov	r0, r5
 801421a:	f000 fbdf 	bl	80149dc <_sbrk_r>
 801421e:	1c43      	adds	r3, r0, #1
 8014220:	d00a      	beq.n	8014238 <sbrk_aligned+0x34>
 8014222:	1cc4      	adds	r4, r0, #3
 8014224:	f024 0403 	bic.w	r4, r4, #3
 8014228:	42a0      	cmp	r0, r4
 801422a:	d007      	beq.n	801423c <sbrk_aligned+0x38>
 801422c:	1a21      	subs	r1, r4, r0
 801422e:	4628      	mov	r0, r5
 8014230:	f000 fbd4 	bl	80149dc <_sbrk_r>
 8014234:	3001      	adds	r0, #1
 8014236:	d101      	bne.n	801423c <sbrk_aligned+0x38>
 8014238:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801423c:	4620      	mov	r0, r4
 801423e:	bd70      	pop	{r4, r5, r6, pc}
 8014240:	20012a2c 	.word	0x20012a2c

08014244 <_malloc_r>:
 8014244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014248:	1ccd      	adds	r5, r1, #3
 801424a:	f025 0503 	bic.w	r5, r5, #3
 801424e:	3508      	adds	r5, #8
 8014250:	2d0c      	cmp	r5, #12
 8014252:	bf38      	it	cc
 8014254:	250c      	movcc	r5, #12
 8014256:	2d00      	cmp	r5, #0
 8014258:	4607      	mov	r7, r0
 801425a:	db01      	blt.n	8014260 <_malloc_r+0x1c>
 801425c:	42a9      	cmp	r1, r5
 801425e:	d905      	bls.n	801426c <_malloc_r+0x28>
 8014260:	230c      	movs	r3, #12
 8014262:	603b      	str	r3, [r7, #0]
 8014264:	2600      	movs	r6, #0
 8014266:	4630      	mov	r0, r6
 8014268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801426c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014340 <_malloc_r+0xfc>
 8014270:	f000 f868 	bl	8014344 <__malloc_lock>
 8014274:	f8d8 3000 	ldr.w	r3, [r8]
 8014278:	461c      	mov	r4, r3
 801427a:	bb5c      	cbnz	r4, 80142d4 <_malloc_r+0x90>
 801427c:	4629      	mov	r1, r5
 801427e:	4638      	mov	r0, r7
 8014280:	f7ff ffc0 	bl	8014204 <sbrk_aligned>
 8014284:	1c43      	adds	r3, r0, #1
 8014286:	4604      	mov	r4, r0
 8014288:	d155      	bne.n	8014336 <_malloc_r+0xf2>
 801428a:	f8d8 4000 	ldr.w	r4, [r8]
 801428e:	4626      	mov	r6, r4
 8014290:	2e00      	cmp	r6, #0
 8014292:	d145      	bne.n	8014320 <_malloc_r+0xdc>
 8014294:	2c00      	cmp	r4, #0
 8014296:	d048      	beq.n	801432a <_malloc_r+0xe6>
 8014298:	6823      	ldr	r3, [r4, #0]
 801429a:	4631      	mov	r1, r6
 801429c:	4638      	mov	r0, r7
 801429e:	eb04 0903 	add.w	r9, r4, r3
 80142a2:	f000 fb9b 	bl	80149dc <_sbrk_r>
 80142a6:	4581      	cmp	r9, r0
 80142a8:	d13f      	bne.n	801432a <_malloc_r+0xe6>
 80142aa:	6821      	ldr	r1, [r4, #0]
 80142ac:	1a6d      	subs	r5, r5, r1
 80142ae:	4629      	mov	r1, r5
 80142b0:	4638      	mov	r0, r7
 80142b2:	f7ff ffa7 	bl	8014204 <sbrk_aligned>
 80142b6:	3001      	adds	r0, #1
 80142b8:	d037      	beq.n	801432a <_malloc_r+0xe6>
 80142ba:	6823      	ldr	r3, [r4, #0]
 80142bc:	442b      	add	r3, r5
 80142be:	6023      	str	r3, [r4, #0]
 80142c0:	f8d8 3000 	ldr.w	r3, [r8]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d038      	beq.n	801433a <_malloc_r+0xf6>
 80142c8:	685a      	ldr	r2, [r3, #4]
 80142ca:	42a2      	cmp	r2, r4
 80142cc:	d12b      	bne.n	8014326 <_malloc_r+0xe2>
 80142ce:	2200      	movs	r2, #0
 80142d0:	605a      	str	r2, [r3, #4]
 80142d2:	e00f      	b.n	80142f4 <_malloc_r+0xb0>
 80142d4:	6822      	ldr	r2, [r4, #0]
 80142d6:	1b52      	subs	r2, r2, r5
 80142d8:	d41f      	bmi.n	801431a <_malloc_r+0xd6>
 80142da:	2a0b      	cmp	r2, #11
 80142dc:	d917      	bls.n	801430e <_malloc_r+0xca>
 80142de:	1961      	adds	r1, r4, r5
 80142e0:	42a3      	cmp	r3, r4
 80142e2:	6025      	str	r5, [r4, #0]
 80142e4:	bf18      	it	ne
 80142e6:	6059      	strne	r1, [r3, #4]
 80142e8:	6863      	ldr	r3, [r4, #4]
 80142ea:	bf08      	it	eq
 80142ec:	f8c8 1000 	streq.w	r1, [r8]
 80142f0:	5162      	str	r2, [r4, r5]
 80142f2:	604b      	str	r3, [r1, #4]
 80142f4:	4638      	mov	r0, r7
 80142f6:	f104 060b 	add.w	r6, r4, #11
 80142fa:	f000 f829 	bl	8014350 <__malloc_unlock>
 80142fe:	f026 0607 	bic.w	r6, r6, #7
 8014302:	1d23      	adds	r3, r4, #4
 8014304:	1af2      	subs	r2, r6, r3
 8014306:	d0ae      	beq.n	8014266 <_malloc_r+0x22>
 8014308:	1b9b      	subs	r3, r3, r6
 801430a:	50a3      	str	r3, [r4, r2]
 801430c:	e7ab      	b.n	8014266 <_malloc_r+0x22>
 801430e:	42a3      	cmp	r3, r4
 8014310:	6862      	ldr	r2, [r4, #4]
 8014312:	d1dd      	bne.n	80142d0 <_malloc_r+0x8c>
 8014314:	f8c8 2000 	str.w	r2, [r8]
 8014318:	e7ec      	b.n	80142f4 <_malloc_r+0xb0>
 801431a:	4623      	mov	r3, r4
 801431c:	6864      	ldr	r4, [r4, #4]
 801431e:	e7ac      	b.n	801427a <_malloc_r+0x36>
 8014320:	4634      	mov	r4, r6
 8014322:	6876      	ldr	r6, [r6, #4]
 8014324:	e7b4      	b.n	8014290 <_malloc_r+0x4c>
 8014326:	4613      	mov	r3, r2
 8014328:	e7cc      	b.n	80142c4 <_malloc_r+0x80>
 801432a:	230c      	movs	r3, #12
 801432c:	603b      	str	r3, [r7, #0]
 801432e:	4638      	mov	r0, r7
 8014330:	f000 f80e 	bl	8014350 <__malloc_unlock>
 8014334:	e797      	b.n	8014266 <_malloc_r+0x22>
 8014336:	6025      	str	r5, [r4, #0]
 8014338:	e7dc      	b.n	80142f4 <_malloc_r+0xb0>
 801433a:	605b      	str	r3, [r3, #4]
 801433c:	deff      	udf	#255	; 0xff
 801433e:	bf00      	nop
 8014340:	20012a28 	.word	0x20012a28

08014344 <__malloc_lock>:
 8014344:	4801      	ldr	r0, [pc, #4]	; (801434c <__malloc_lock+0x8>)
 8014346:	f000 bb96 	b.w	8014a76 <__retarget_lock_acquire_recursive>
 801434a:	bf00      	nop
 801434c:	20012b71 	.word	0x20012b71

08014350 <__malloc_unlock>:
 8014350:	4801      	ldr	r0, [pc, #4]	; (8014358 <__malloc_unlock+0x8>)
 8014352:	f000 bb91 	b.w	8014a78 <__retarget_lock_release_recursive>
 8014356:	bf00      	nop
 8014358:	20012b71 	.word	0x20012b71

0801435c <srand>:
 801435c:	b538      	push	{r3, r4, r5, lr}
 801435e:	4b10      	ldr	r3, [pc, #64]	; (80143a0 <srand+0x44>)
 8014360:	681d      	ldr	r5, [r3, #0]
 8014362:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014364:	4604      	mov	r4, r0
 8014366:	b9b3      	cbnz	r3, 8014396 <srand+0x3a>
 8014368:	2018      	movs	r0, #24
 801436a:	f7ff ff3b 	bl	80141e4 <malloc>
 801436e:	4602      	mov	r2, r0
 8014370:	6328      	str	r0, [r5, #48]	; 0x30
 8014372:	b920      	cbnz	r0, 801437e <srand+0x22>
 8014374:	4b0b      	ldr	r3, [pc, #44]	; (80143a4 <srand+0x48>)
 8014376:	480c      	ldr	r0, [pc, #48]	; (80143a8 <srand+0x4c>)
 8014378:	2146      	movs	r1, #70	; 0x46
 801437a:	f000 fb95 	bl	8014aa8 <__assert_func>
 801437e:	490b      	ldr	r1, [pc, #44]	; (80143ac <srand+0x50>)
 8014380:	4b0b      	ldr	r3, [pc, #44]	; (80143b0 <srand+0x54>)
 8014382:	e9c0 1300 	strd	r1, r3, [r0]
 8014386:	4b0b      	ldr	r3, [pc, #44]	; (80143b4 <srand+0x58>)
 8014388:	6083      	str	r3, [r0, #8]
 801438a:	230b      	movs	r3, #11
 801438c:	8183      	strh	r3, [r0, #12]
 801438e:	2100      	movs	r1, #0
 8014390:	2001      	movs	r0, #1
 8014392:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014396:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014398:	2200      	movs	r2, #0
 801439a:	611c      	str	r4, [r3, #16]
 801439c:	615a      	str	r2, [r3, #20]
 801439e:	bd38      	pop	{r3, r4, r5, pc}
 80143a0:	2000010c 	.word	0x2000010c
 80143a4:	08016564 	.word	0x08016564
 80143a8:	0801657b 	.word	0x0801657b
 80143ac:	abcd330e 	.word	0xabcd330e
 80143b0:	e66d1234 	.word	0xe66d1234
 80143b4:	0005deec 	.word	0x0005deec

080143b8 <rand>:
 80143b8:	4b16      	ldr	r3, [pc, #88]	; (8014414 <rand+0x5c>)
 80143ba:	b510      	push	{r4, lr}
 80143bc:	681c      	ldr	r4, [r3, #0]
 80143be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80143c0:	b9b3      	cbnz	r3, 80143f0 <rand+0x38>
 80143c2:	2018      	movs	r0, #24
 80143c4:	f7ff ff0e 	bl	80141e4 <malloc>
 80143c8:	4602      	mov	r2, r0
 80143ca:	6320      	str	r0, [r4, #48]	; 0x30
 80143cc:	b920      	cbnz	r0, 80143d8 <rand+0x20>
 80143ce:	4b12      	ldr	r3, [pc, #72]	; (8014418 <rand+0x60>)
 80143d0:	4812      	ldr	r0, [pc, #72]	; (801441c <rand+0x64>)
 80143d2:	2152      	movs	r1, #82	; 0x52
 80143d4:	f000 fb68 	bl	8014aa8 <__assert_func>
 80143d8:	4911      	ldr	r1, [pc, #68]	; (8014420 <rand+0x68>)
 80143da:	4b12      	ldr	r3, [pc, #72]	; (8014424 <rand+0x6c>)
 80143dc:	e9c0 1300 	strd	r1, r3, [r0]
 80143e0:	4b11      	ldr	r3, [pc, #68]	; (8014428 <rand+0x70>)
 80143e2:	6083      	str	r3, [r0, #8]
 80143e4:	230b      	movs	r3, #11
 80143e6:	8183      	strh	r3, [r0, #12]
 80143e8:	2100      	movs	r1, #0
 80143ea:	2001      	movs	r0, #1
 80143ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80143f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80143f2:	480e      	ldr	r0, [pc, #56]	; (801442c <rand+0x74>)
 80143f4:	690b      	ldr	r3, [r1, #16]
 80143f6:	694c      	ldr	r4, [r1, #20]
 80143f8:	4a0d      	ldr	r2, [pc, #52]	; (8014430 <rand+0x78>)
 80143fa:	4358      	muls	r0, r3
 80143fc:	fb02 0004 	mla	r0, r2, r4, r0
 8014400:	fba3 3202 	umull	r3, r2, r3, r2
 8014404:	3301      	adds	r3, #1
 8014406:	eb40 0002 	adc.w	r0, r0, r2
 801440a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801440e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014412:	bd10      	pop	{r4, pc}
 8014414:	2000010c 	.word	0x2000010c
 8014418:	08016564 	.word	0x08016564
 801441c:	0801657b 	.word	0x0801657b
 8014420:	abcd330e 	.word	0xabcd330e
 8014424:	e66d1234 	.word	0xe66d1234
 8014428:	0005deec 	.word	0x0005deec
 801442c:	5851f42d 	.word	0x5851f42d
 8014430:	4c957f2d 	.word	0x4c957f2d

08014434 <realloc>:
 8014434:	4b02      	ldr	r3, [pc, #8]	; (8014440 <realloc+0xc>)
 8014436:	460a      	mov	r2, r1
 8014438:	4601      	mov	r1, r0
 801443a:	6818      	ldr	r0, [r3, #0]
 801443c:	f000 b802 	b.w	8014444 <_realloc_r>
 8014440:	2000010c 	.word	0x2000010c

08014444 <_realloc_r>:
 8014444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014448:	4680      	mov	r8, r0
 801444a:	4614      	mov	r4, r2
 801444c:	460e      	mov	r6, r1
 801444e:	b921      	cbnz	r1, 801445a <_realloc_r+0x16>
 8014450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014454:	4611      	mov	r1, r2
 8014456:	f7ff bef5 	b.w	8014244 <_malloc_r>
 801445a:	b92a      	cbnz	r2, 8014468 <_realloc_r+0x24>
 801445c:	f000 fb4e 	bl	8014afc <_free_r>
 8014460:	4625      	mov	r5, r4
 8014462:	4628      	mov	r0, r5
 8014464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014468:	f000 fb94 	bl	8014b94 <_malloc_usable_size_r>
 801446c:	4284      	cmp	r4, r0
 801446e:	4607      	mov	r7, r0
 8014470:	d802      	bhi.n	8014478 <_realloc_r+0x34>
 8014472:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014476:	d812      	bhi.n	801449e <_realloc_r+0x5a>
 8014478:	4621      	mov	r1, r4
 801447a:	4640      	mov	r0, r8
 801447c:	f7ff fee2 	bl	8014244 <_malloc_r>
 8014480:	4605      	mov	r5, r0
 8014482:	2800      	cmp	r0, #0
 8014484:	d0ed      	beq.n	8014462 <_realloc_r+0x1e>
 8014486:	42bc      	cmp	r4, r7
 8014488:	4622      	mov	r2, r4
 801448a:	4631      	mov	r1, r6
 801448c:	bf28      	it	cs
 801448e:	463a      	movcs	r2, r7
 8014490:	f000 fafb 	bl	8014a8a <memcpy>
 8014494:	4631      	mov	r1, r6
 8014496:	4640      	mov	r0, r8
 8014498:	f000 fb30 	bl	8014afc <_free_r>
 801449c:	e7e1      	b.n	8014462 <_realloc_r+0x1e>
 801449e:	4635      	mov	r5, r6
 80144a0:	e7df      	b.n	8014462 <_realloc_r+0x1e>
	...

080144a4 <_strtoul_l.constprop.0>:
 80144a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144a8:	4f36      	ldr	r7, [pc, #216]	; (8014584 <_strtoul_l.constprop.0+0xe0>)
 80144aa:	4686      	mov	lr, r0
 80144ac:	460d      	mov	r5, r1
 80144ae:	4628      	mov	r0, r5
 80144b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144b4:	5d3e      	ldrb	r6, [r7, r4]
 80144b6:	f016 0608 	ands.w	r6, r6, #8
 80144ba:	d1f8      	bne.n	80144ae <_strtoul_l.constprop.0+0xa>
 80144bc:	2c2d      	cmp	r4, #45	; 0x2d
 80144be:	d130      	bne.n	8014522 <_strtoul_l.constprop.0+0x7e>
 80144c0:	782c      	ldrb	r4, [r5, #0]
 80144c2:	2601      	movs	r6, #1
 80144c4:	1c85      	adds	r5, r0, #2
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d057      	beq.n	801457a <_strtoul_l.constprop.0+0xd6>
 80144ca:	2b10      	cmp	r3, #16
 80144cc:	d109      	bne.n	80144e2 <_strtoul_l.constprop.0+0x3e>
 80144ce:	2c30      	cmp	r4, #48	; 0x30
 80144d0:	d107      	bne.n	80144e2 <_strtoul_l.constprop.0+0x3e>
 80144d2:	7828      	ldrb	r0, [r5, #0]
 80144d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80144d8:	2858      	cmp	r0, #88	; 0x58
 80144da:	d149      	bne.n	8014570 <_strtoul_l.constprop.0+0xcc>
 80144dc:	786c      	ldrb	r4, [r5, #1]
 80144de:	2310      	movs	r3, #16
 80144e0:	3502      	adds	r5, #2
 80144e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80144e6:	2700      	movs	r7, #0
 80144e8:	fbb8 f8f3 	udiv	r8, r8, r3
 80144ec:	fb03 f908 	mul.w	r9, r3, r8
 80144f0:	ea6f 0909 	mvn.w	r9, r9
 80144f4:	4638      	mov	r0, r7
 80144f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80144fa:	f1bc 0f09 	cmp.w	ip, #9
 80144fe:	d815      	bhi.n	801452c <_strtoul_l.constprop.0+0x88>
 8014500:	4664      	mov	r4, ip
 8014502:	42a3      	cmp	r3, r4
 8014504:	dd23      	ble.n	801454e <_strtoul_l.constprop.0+0xaa>
 8014506:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801450a:	d007      	beq.n	801451c <_strtoul_l.constprop.0+0x78>
 801450c:	4580      	cmp	r8, r0
 801450e:	d31b      	bcc.n	8014548 <_strtoul_l.constprop.0+0xa4>
 8014510:	d101      	bne.n	8014516 <_strtoul_l.constprop.0+0x72>
 8014512:	45a1      	cmp	r9, r4
 8014514:	db18      	blt.n	8014548 <_strtoul_l.constprop.0+0xa4>
 8014516:	fb00 4003 	mla	r0, r0, r3, r4
 801451a:	2701      	movs	r7, #1
 801451c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014520:	e7e9      	b.n	80144f6 <_strtoul_l.constprop.0+0x52>
 8014522:	2c2b      	cmp	r4, #43	; 0x2b
 8014524:	bf04      	itt	eq
 8014526:	782c      	ldrbeq	r4, [r5, #0]
 8014528:	1c85      	addeq	r5, r0, #2
 801452a:	e7cc      	b.n	80144c6 <_strtoul_l.constprop.0+0x22>
 801452c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014530:	f1bc 0f19 	cmp.w	ip, #25
 8014534:	d801      	bhi.n	801453a <_strtoul_l.constprop.0+0x96>
 8014536:	3c37      	subs	r4, #55	; 0x37
 8014538:	e7e3      	b.n	8014502 <_strtoul_l.constprop.0+0x5e>
 801453a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801453e:	f1bc 0f19 	cmp.w	ip, #25
 8014542:	d804      	bhi.n	801454e <_strtoul_l.constprop.0+0xaa>
 8014544:	3c57      	subs	r4, #87	; 0x57
 8014546:	e7dc      	b.n	8014502 <_strtoul_l.constprop.0+0x5e>
 8014548:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801454c:	e7e6      	b.n	801451c <_strtoul_l.constprop.0+0x78>
 801454e:	1c7b      	adds	r3, r7, #1
 8014550:	d106      	bne.n	8014560 <_strtoul_l.constprop.0+0xbc>
 8014552:	2322      	movs	r3, #34	; 0x22
 8014554:	f8ce 3000 	str.w	r3, [lr]
 8014558:	4638      	mov	r0, r7
 801455a:	b932      	cbnz	r2, 801456a <_strtoul_l.constprop.0+0xc6>
 801455c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014560:	b106      	cbz	r6, 8014564 <_strtoul_l.constprop.0+0xc0>
 8014562:	4240      	negs	r0, r0
 8014564:	2a00      	cmp	r2, #0
 8014566:	d0f9      	beq.n	801455c <_strtoul_l.constprop.0+0xb8>
 8014568:	b107      	cbz	r7, 801456c <_strtoul_l.constprop.0+0xc8>
 801456a:	1e69      	subs	r1, r5, #1
 801456c:	6011      	str	r1, [r2, #0]
 801456e:	e7f5      	b.n	801455c <_strtoul_l.constprop.0+0xb8>
 8014570:	2430      	movs	r4, #48	; 0x30
 8014572:	2b00      	cmp	r3, #0
 8014574:	d1b5      	bne.n	80144e2 <_strtoul_l.constprop.0+0x3e>
 8014576:	2308      	movs	r3, #8
 8014578:	e7b3      	b.n	80144e2 <_strtoul_l.constprop.0+0x3e>
 801457a:	2c30      	cmp	r4, #48	; 0x30
 801457c:	d0a9      	beq.n	80144d2 <_strtoul_l.constprop.0+0x2e>
 801457e:	230a      	movs	r3, #10
 8014580:	e7af      	b.n	80144e2 <_strtoul_l.constprop.0+0x3e>
 8014582:	bf00      	nop
 8014584:	080165d4 	.word	0x080165d4

08014588 <strtoul>:
 8014588:	4613      	mov	r3, r2
 801458a:	460a      	mov	r2, r1
 801458c:	4601      	mov	r1, r0
 801458e:	4802      	ldr	r0, [pc, #8]	; (8014598 <strtoul+0x10>)
 8014590:	6800      	ldr	r0, [r0, #0]
 8014592:	f7ff bf87 	b.w	80144a4 <_strtoul_l.constprop.0>
 8014596:	bf00      	nop
 8014598:	2000010c 	.word	0x2000010c

0801459c <std>:
 801459c:	2300      	movs	r3, #0
 801459e:	b510      	push	{r4, lr}
 80145a0:	4604      	mov	r4, r0
 80145a2:	e9c0 3300 	strd	r3, r3, [r0]
 80145a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145aa:	6083      	str	r3, [r0, #8]
 80145ac:	8181      	strh	r1, [r0, #12]
 80145ae:	6643      	str	r3, [r0, #100]	; 0x64
 80145b0:	81c2      	strh	r2, [r0, #14]
 80145b2:	6183      	str	r3, [r0, #24]
 80145b4:	4619      	mov	r1, r3
 80145b6:	2208      	movs	r2, #8
 80145b8:	305c      	adds	r0, #92	; 0x5c
 80145ba:	f000 f99d 	bl	80148f8 <memset>
 80145be:	4b0d      	ldr	r3, [pc, #52]	; (80145f4 <std+0x58>)
 80145c0:	6263      	str	r3, [r4, #36]	; 0x24
 80145c2:	4b0d      	ldr	r3, [pc, #52]	; (80145f8 <std+0x5c>)
 80145c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80145c6:	4b0d      	ldr	r3, [pc, #52]	; (80145fc <std+0x60>)
 80145c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80145ca:	4b0d      	ldr	r3, [pc, #52]	; (8014600 <std+0x64>)
 80145cc:	6323      	str	r3, [r4, #48]	; 0x30
 80145ce:	4b0d      	ldr	r3, [pc, #52]	; (8014604 <std+0x68>)
 80145d0:	6224      	str	r4, [r4, #32]
 80145d2:	429c      	cmp	r4, r3
 80145d4:	d006      	beq.n	80145e4 <std+0x48>
 80145d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80145da:	4294      	cmp	r4, r2
 80145dc:	d002      	beq.n	80145e4 <std+0x48>
 80145de:	33d0      	adds	r3, #208	; 0xd0
 80145e0:	429c      	cmp	r4, r3
 80145e2:	d105      	bne.n	80145f0 <std+0x54>
 80145e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80145e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145ec:	f000 ba42 	b.w	8014a74 <__retarget_lock_init_recursive>
 80145f0:	bd10      	pop	{r4, pc}
 80145f2:	bf00      	nop
 80145f4:	080147ad 	.word	0x080147ad
 80145f8:	080147cf 	.word	0x080147cf
 80145fc:	08014807 	.word	0x08014807
 8014600:	0801482b 	.word	0x0801482b
 8014604:	20012a30 	.word	0x20012a30

08014608 <stdio_exit_handler>:
 8014608:	4a02      	ldr	r2, [pc, #8]	; (8014614 <stdio_exit_handler+0xc>)
 801460a:	4903      	ldr	r1, [pc, #12]	; (8014618 <stdio_exit_handler+0x10>)
 801460c:	4803      	ldr	r0, [pc, #12]	; (801461c <stdio_exit_handler+0x14>)
 801460e:	f000 b869 	b.w	80146e4 <_fwalk_sglue>
 8014612:	bf00      	nop
 8014614:	200000b4 	.word	0x200000b4
 8014618:	08015509 	.word	0x08015509
 801461c:	200000c0 	.word	0x200000c0

08014620 <cleanup_stdio>:
 8014620:	6841      	ldr	r1, [r0, #4]
 8014622:	4b0c      	ldr	r3, [pc, #48]	; (8014654 <cleanup_stdio+0x34>)
 8014624:	4299      	cmp	r1, r3
 8014626:	b510      	push	{r4, lr}
 8014628:	4604      	mov	r4, r0
 801462a:	d001      	beq.n	8014630 <cleanup_stdio+0x10>
 801462c:	f000 ff6c 	bl	8015508 <_fflush_r>
 8014630:	68a1      	ldr	r1, [r4, #8]
 8014632:	4b09      	ldr	r3, [pc, #36]	; (8014658 <cleanup_stdio+0x38>)
 8014634:	4299      	cmp	r1, r3
 8014636:	d002      	beq.n	801463e <cleanup_stdio+0x1e>
 8014638:	4620      	mov	r0, r4
 801463a:	f000 ff65 	bl	8015508 <_fflush_r>
 801463e:	68e1      	ldr	r1, [r4, #12]
 8014640:	4b06      	ldr	r3, [pc, #24]	; (801465c <cleanup_stdio+0x3c>)
 8014642:	4299      	cmp	r1, r3
 8014644:	d004      	beq.n	8014650 <cleanup_stdio+0x30>
 8014646:	4620      	mov	r0, r4
 8014648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801464c:	f000 bf5c 	b.w	8015508 <_fflush_r>
 8014650:	bd10      	pop	{r4, pc}
 8014652:	bf00      	nop
 8014654:	20012a30 	.word	0x20012a30
 8014658:	20012a98 	.word	0x20012a98
 801465c:	20012b00 	.word	0x20012b00

08014660 <global_stdio_init.part.0>:
 8014660:	b510      	push	{r4, lr}
 8014662:	4b0b      	ldr	r3, [pc, #44]	; (8014690 <global_stdio_init.part.0+0x30>)
 8014664:	4c0b      	ldr	r4, [pc, #44]	; (8014694 <global_stdio_init.part.0+0x34>)
 8014666:	4a0c      	ldr	r2, [pc, #48]	; (8014698 <global_stdio_init.part.0+0x38>)
 8014668:	601a      	str	r2, [r3, #0]
 801466a:	4620      	mov	r0, r4
 801466c:	2200      	movs	r2, #0
 801466e:	2104      	movs	r1, #4
 8014670:	f7ff ff94 	bl	801459c <std>
 8014674:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014678:	2201      	movs	r2, #1
 801467a:	2109      	movs	r1, #9
 801467c:	f7ff ff8e 	bl	801459c <std>
 8014680:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014684:	2202      	movs	r2, #2
 8014686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801468a:	2112      	movs	r1, #18
 801468c:	f7ff bf86 	b.w	801459c <std>
 8014690:	20012b68 	.word	0x20012b68
 8014694:	20012a30 	.word	0x20012a30
 8014698:	08014609 	.word	0x08014609

0801469c <__sfp_lock_acquire>:
 801469c:	4801      	ldr	r0, [pc, #4]	; (80146a4 <__sfp_lock_acquire+0x8>)
 801469e:	f000 b9ea 	b.w	8014a76 <__retarget_lock_acquire_recursive>
 80146a2:	bf00      	nop
 80146a4:	20012b72 	.word	0x20012b72

080146a8 <__sfp_lock_release>:
 80146a8:	4801      	ldr	r0, [pc, #4]	; (80146b0 <__sfp_lock_release+0x8>)
 80146aa:	f000 b9e5 	b.w	8014a78 <__retarget_lock_release_recursive>
 80146ae:	bf00      	nop
 80146b0:	20012b72 	.word	0x20012b72

080146b4 <__sinit>:
 80146b4:	b510      	push	{r4, lr}
 80146b6:	4604      	mov	r4, r0
 80146b8:	f7ff fff0 	bl	801469c <__sfp_lock_acquire>
 80146bc:	6a23      	ldr	r3, [r4, #32]
 80146be:	b11b      	cbz	r3, 80146c8 <__sinit+0x14>
 80146c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146c4:	f7ff bff0 	b.w	80146a8 <__sfp_lock_release>
 80146c8:	4b04      	ldr	r3, [pc, #16]	; (80146dc <__sinit+0x28>)
 80146ca:	6223      	str	r3, [r4, #32]
 80146cc:	4b04      	ldr	r3, [pc, #16]	; (80146e0 <__sinit+0x2c>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d1f5      	bne.n	80146c0 <__sinit+0xc>
 80146d4:	f7ff ffc4 	bl	8014660 <global_stdio_init.part.0>
 80146d8:	e7f2      	b.n	80146c0 <__sinit+0xc>
 80146da:	bf00      	nop
 80146dc:	08014621 	.word	0x08014621
 80146e0:	20012b68 	.word	0x20012b68

080146e4 <_fwalk_sglue>:
 80146e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146e8:	4607      	mov	r7, r0
 80146ea:	4688      	mov	r8, r1
 80146ec:	4614      	mov	r4, r2
 80146ee:	2600      	movs	r6, #0
 80146f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80146f4:	f1b9 0901 	subs.w	r9, r9, #1
 80146f8:	d505      	bpl.n	8014706 <_fwalk_sglue+0x22>
 80146fa:	6824      	ldr	r4, [r4, #0]
 80146fc:	2c00      	cmp	r4, #0
 80146fe:	d1f7      	bne.n	80146f0 <_fwalk_sglue+0xc>
 8014700:	4630      	mov	r0, r6
 8014702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014706:	89ab      	ldrh	r3, [r5, #12]
 8014708:	2b01      	cmp	r3, #1
 801470a:	d907      	bls.n	801471c <_fwalk_sglue+0x38>
 801470c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014710:	3301      	adds	r3, #1
 8014712:	d003      	beq.n	801471c <_fwalk_sglue+0x38>
 8014714:	4629      	mov	r1, r5
 8014716:	4638      	mov	r0, r7
 8014718:	47c0      	blx	r8
 801471a:	4306      	orrs	r6, r0
 801471c:	3568      	adds	r5, #104	; 0x68
 801471e:	e7e9      	b.n	80146f4 <_fwalk_sglue+0x10>

08014720 <iprintf>:
 8014720:	b40f      	push	{r0, r1, r2, r3}
 8014722:	b507      	push	{r0, r1, r2, lr}
 8014724:	4906      	ldr	r1, [pc, #24]	; (8014740 <iprintf+0x20>)
 8014726:	ab04      	add	r3, sp, #16
 8014728:	6808      	ldr	r0, [r1, #0]
 801472a:	f853 2b04 	ldr.w	r2, [r3], #4
 801472e:	6881      	ldr	r1, [r0, #8]
 8014730:	9301      	str	r3, [sp, #4]
 8014732:	f000 fbb9 	bl	8014ea8 <_vfiprintf_r>
 8014736:	b003      	add	sp, #12
 8014738:	f85d eb04 	ldr.w	lr, [sp], #4
 801473c:	b004      	add	sp, #16
 801473e:	4770      	bx	lr
 8014740:	2000010c 	.word	0x2000010c

08014744 <sniprintf>:
 8014744:	b40c      	push	{r2, r3}
 8014746:	b530      	push	{r4, r5, lr}
 8014748:	4b17      	ldr	r3, [pc, #92]	; (80147a8 <sniprintf+0x64>)
 801474a:	1e0c      	subs	r4, r1, #0
 801474c:	681d      	ldr	r5, [r3, #0]
 801474e:	b09d      	sub	sp, #116	; 0x74
 8014750:	da08      	bge.n	8014764 <sniprintf+0x20>
 8014752:	238b      	movs	r3, #139	; 0x8b
 8014754:	602b      	str	r3, [r5, #0]
 8014756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801475a:	b01d      	add	sp, #116	; 0x74
 801475c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014760:	b002      	add	sp, #8
 8014762:	4770      	bx	lr
 8014764:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014768:	f8ad 3014 	strh.w	r3, [sp, #20]
 801476c:	bf14      	ite	ne
 801476e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014772:	4623      	moveq	r3, r4
 8014774:	9304      	str	r3, [sp, #16]
 8014776:	9307      	str	r3, [sp, #28]
 8014778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801477c:	9002      	str	r0, [sp, #8]
 801477e:	9006      	str	r0, [sp, #24]
 8014780:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014784:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014786:	ab21      	add	r3, sp, #132	; 0x84
 8014788:	a902      	add	r1, sp, #8
 801478a:	4628      	mov	r0, r5
 801478c:	9301      	str	r3, [sp, #4]
 801478e:	f000 fa63 	bl	8014c58 <_svfiprintf_r>
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	bfbc      	itt	lt
 8014796:	238b      	movlt	r3, #139	; 0x8b
 8014798:	602b      	strlt	r3, [r5, #0]
 801479a:	2c00      	cmp	r4, #0
 801479c:	d0dd      	beq.n	801475a <sniprintf+0x16>
 801479e:	9b02      	ldr	r3, [sp, #8]
 80147a0:	2200      	movs	r2, #0
 80147a2:	701a      	strb	r2, [r3, #0]
 80147a4:	e7d9      	b.n	801475a <sniprintf+0x16>
 80147a6:	bf00      	nop
 80147a8:	2000010c 	.word	0x2000010c

080147ac <__sread>:
 80147ac:	b510      	push	{r4, lr}
 80147ae:	460c      	mov	r4, r1
 80147b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147b4:	f000 f900 	bl	80149b8 <_read_r>
 80147b8:	2800      	cmp	r0, #0
 80147ba:	bfab      	itete	ge
 80147bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80147be:	89a3      	ldrhlt	r3, [r4, #12]
 80147c0:	181b      	addge	r3, r3, r0
 80147c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80147c6:	bfac      	ite	ge
 80147c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80147ca:	81a3      	strhlt	r3, [r4, #12]
 80147cc:	bd10      	pop	{r4, pc}

080147ce <__swrite>:
 80147ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d2:	461f      	mov	r7, r3
 80147d4:	898b      	ldrh	r3, [r1, #12]
 80147d6:	05db      	lsls	r3, r3, #23
 80147d8:	4605      	mov	r5, r0
 80147da:	460c      	mov	r4, r1
 80147dc:	4616      	mov	r6, r2
 80147de:	d505      	bpl.n	80147ec <__swrite+0x1e>
 80147e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147e4:	2302      	movs	r3, #2
 80147e6:	2200      	movs	r2, #0
 80147e8:	f000 f8d4 	bl	8014994 <_lseek_r>
 80147ec:	89a3      	ldrh	r3, [r4, #12]
 80147ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80147f6:	81a3      	strh	r3, [r4, #12]
 80147f8:	4632      	mov	r2, r6
 80147fa:	463b      	mov	r3, r7
 80147fc:	4628      	mov	r0, r5
 80147fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014802:	f000 b8fb 	b.w	80149fc <_write_r>

08014806 <__sseek>:
 8014806:	b510      	push	{r4, lr}
 8014808:	460c      	mov	r4, r1
 801480a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801480e:	f000 f8c1 	bl	8014994 <_lseek_r>
 8014812:	1c43      	adds	r3, r0, #1
 8014814:	89a3      	ldrh	r3, [r4, #12]
 8014816:	bf15      	itete	ne
 8014818:	6560      	strne	r0, [r4, #84]	; 0x54
 801481a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801481e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014822:	81a3      	strheq	r3, [r4, #12]
 8014824:	bf18      	it	ne
 8014826:	81a3      	strhne	r3, [r4, #12]
 8014828:	bd10      	pop	{r4, pc}

0801482a <__sclose>:
 801482a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801482e:	f000 b8a1 	b.w	8014974 <_close_r>

08014832 <_vsniprintf_r>:
 8014832:	b530      	push	{r4, r5, lr}
 8014834:	4614      	mov	r4, r2
 8014836:	2c00      	cmp	r4, #0
 8014838:	b09b      	sub	sp, #108	; 0x6c
 801483a:	4605      	mov	r5, r0
 801483c:	461a      	mov	r2, r3
 801483e:	da05      	bge.n	801484c <_vsniprintf_r+0x1a>
 8014840:	238b      	movs	r3, #139	; 0x8b
 8014842:	6003      	str	r3, [r0, #0]
 8014844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014848:	b01b      	add	sp, #108	; 0x6c
 801484a:	bd30      	pop	{r4, r5, pc}
 801484c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014850:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014854:	bf14      	ite	ne
 8014856:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801485a:	4623      	moveq	r3, r4
 801485c:	9302      	str	r3, [sp, #8]
 801485e:	9305      	str	r3, [sp, #20]
 8014860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014864:	9100      	str	r1, [sp, #0]
 8014866:	9104      	str	r1, [sp, #16]
 8014868:	f8ad 300e 	strh.w	r3, [sp, #14]
 801486c:	4669      	mov	r1, sp
 801486e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014870:	f000 f9f2 	bl	8014c58 <_svfiprintf_r>
 8014874:	1c43      	adds	r3, r0, #1
 8014876:	bfbc      	itt	lt
 8014878:	238b      	movlt	r3, #139	; 0x8b
 801487a:	602b      	strlt	r3, [r5, #0]
 801487c:	2c00      	cmp	r4, #0
 801487e:	d0e3      	beq.n	8014848 <_vsniprintf_r+0x16>
 8014880:	9b00      	ldr	r3, [sp, #0]
 8014882:	2200      	movs	r2, #0
 8014884:	701a      	strb	r2, [r3, #0]
 8014886:	e7df      	b.n	8014848 <_vsniprintf_r+0x16>

08014888 <vsniprintf>:
 8014888:	b507      	push	{r0, r1, r2, lr}
 801488a:	9300      	str	r3, [sp, #0]
 801488c:	4613      	mov	r3, r2
 801488e:	460a      	mov	r2, r1
 8014890:	4601      	mov	r1, r0
 8014892:	4803      	ldr	r0, [pc, #12]	; (80148a0 <vsniprintf+0x18>)
 8014894:	6800      	ldr	r0, [r0, #0]
 8014896:	f7ff ffcc 	bl	8014832 <_vsniprintf_r>
 801489a:	b003      	add	sp, #12
 801489c:	f85d fb04 	ldr.w	pc, [sp], #4
 80148a0:	2000010c 	.word	0x2000010c

080148a4 <memcmp>:
 80148a4:	b510      	push	{r4, lr}
 80148a6:	3901      	subs	r1, #1
 80148a8:	4402      	add	r2, r0
 80148aa:	4290      	cmp	r0, r2
 80148ac:	d101      	bne.n	80148b2 <memcmp+0xe>
 80148ae:	2000      	movs	r0, #0
 80148b0:	e005      	b.n	80148be <memcmp+0x1a>
 80148b2:	7803      	ldrb	r3, [r0, #0]
 80148b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80148b8:	42a3      	cmp	r3, r4
 80148ba:	d001      	beq.n	80148c0 <memcmp+0x1c>
 80148bc:	1b18      	subs	r0, r3, r4
 80148be:	bd10      	pop	{r4, pc}
 80148c0:	3001      	adds	r0, #1
 80148c2:	e7f2      	b.n	80148aa <memcmp+0x6>

080148c4 <memmove>:
 80148c4:	4288      	cmp	r0, r1
 80148c6:	b510      	push	{r4, lr}
 80148c8:	eb01 0402 	add.w	r4, r1, r2
 80148cc:	d902      	bls.n	80148d4 <memmove+0x10>
 80148ce:	4284      	cmp	r4, r0
 80148d0:	4623      	mov	r3, r4
 80148d2:	d807      	bhi.n	80148e4 <memmove+0x20>
 80148d4:	1e43      	subs	r3, r0, #1
 80148d6:	42a1      	cmp	r1, r4
 80148d8:	d008      	beq.n	80148ec <memmove+0x28>
 80148da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80148e2:	e7f8      	b.n	80148d6 <memmove+0x12>
 80148e4:	4402      	add	r2, r0
 80148e6:	4601      	mov	r1, r0
 80148e8:	428a      	cmp	r2, r1
 80148ea:	d100      	bne.n	80148ee <memmove+0x2a>
 80148ec:	bd10      	pop	{r4, pc}
 80148ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80148f6:	e7f7      	b.n	80148e8 <memmove+0x24>

080148f8 <memset>:
 80148f8:	4402      	add	r2, r0
 80148fa:	4603      	mov	r3, r0
 80148fc:	4293      	cmp	r3, r2
 80148fe:	d100      	bne.n	8014902 <memset+0xa>
 8014900:	4770      	bx	lr
 8014902:	f803 1b01 	strb.w	r1, [r3], #1
 8014906:	e7f9      	b.n	80148fc <memset+0x4>

08014908 <strchr>:
 8014908:	b2c9      	uxtb	r1, r1
 801490a:	4603      	mov	r3, r0
 801490c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014910:	b11a      	cbz	r2, 801491a <strchr+0x12>
 8014912:	428a      	cmp	r2, r1
 8014914:	d1f9      	bne.n	801490a <strchr+0x2>
 8014916:	4618      	mov	r0, r3
 8014918:	4770      	bx	lr
 801491a:	2900      	cmp	r1, #0
 801491c:	bf18      	it	ne
 801491e:	2300      	movne	r3, #0
 8014920:	e7f9      	b.n	8014916 <strchr+0xe>

08014922 <strncmp>:
 8014922:	b510      	push	{r4, lr}
 8014924:	b16a      	cbz	r2, 8014942 <strncmp+0x20>
 8014926:	3901      	subs	r1, #1
 8014928:	1884      	adds	r4, r0, r2
 801492a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801492e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014932:	429a      	cmp	r2, r3
 8014934:	d103      	bne.n	801493e <strncmp+0x1c>
 8014936:	42a0      	cmp	r0, r4
 8014938:	d001      	beq.n	801493e <strncmp+0x1c>
 801493a:	2a00      	cmp	r2, #0
 801493c:	d1f5      	bne.n	801492a <strncmp+0x8>
 801493e:	1ad0      	subs	r0, r2, r3
 8014940:	bd10      	pop	{r4, pc}
 8014942:	4610      	mov	r0, r2
 8014944:	e7fc      	b.n	8014940 <strncmp+0x1e>

08014946 <strstr>:
 8014946:	780a      	ldrb	r2, [r1, #0]
 8014948:	b570      	push	{r4, r5, r6, lr}
 801494a:	b96a      	cbnz	r2, 8014968 <strstr+0x22>
 801494c:	bd70      	pop	{r4, r5, r6, pc}
 801494e:	429a      	cmp	r2, r3
 8014950:	d109      	bne.n	8014966 <strstr+0x20>
 8014952:	460c      	mov	r4, r1
 8014954:	4605      	mov	r5, r0
 8014956:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801495a:	2b00      	cmp	r3, #0
 801495c:	d0f6      	beq.n	801494c <strstr+0x6>
 801495e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014962:	429e      	cmp	r6, r3
 8014964:	d0f7      	beq.n	8014956 <strstr+0x10>
 8014966:	3001      	adds	r0, #1
 8014968:	7803      	ldrb	r3, [r0, #0]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d1ef      	bne.n	801494e <strstr+0x8>
 801496e:	4618      	mov	r0, r3
 8014970:	e7ec      	b.n	801494c <strstr+0x6>
	...

08014974 <_close_r>:
 8014974:	b538      	push	{r3, r4, r5, lr}
 8014976:	4d06      	ldr	r5, [pc, #24]	; (8014990 <_close_r+0x1c>)
 8014978:	2300      	movs	r3, #0
 801497a:	4604      	mov	r4, r0
 801497c:	4608      	mov	r0, r1
 801497e:	602b      	str	r3, [r5, #0]
 8014980:	f7ec ff91 	bl	80018a6 <_close>
 8014984:	1c43      	adds	r3, r0, #1
 8014986:	d102      	bne.n	801498e <_close_r+0x1a>
 8014988:	682b      	ldr	r3, [r5, #0]
 801498a:	b103      	cbz	r3, 801498e <_close_r+0x1a>
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	bd38      	pop	{r3, r4, r5, pc}
 8014990:	20012b6c 	.word	0x20012b6c

08014994 <_lseek_r>:
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4d07      	ldr	r5, [pc, #28]	; (80149b4 <_lseek_r+0x20>)
 8014998:	4604      	mov	r4, r0
 801499a:	4608      	mov	r0, r1
 801499c:	4611      	mov	r1, r2
 801499e:	2200      	movs	r2, #0
 80149a0:	602a      	str	r2, [r5, #0]
 80149a2:	461a      	mov	r2, r3
 80149a4:	f7ec ffa6 	bl	80018f4 <_lseek>
 80149a8:	1c43      	adds	r3, r0, #1
 80149aa:	d102      	bne.n	80149b2 <_lseek_r+0x1e>
 80149ac:	682b      	ldr	r3, [r5, #0]
 80149ae:	b103      	cbz	r3, 80149b2 <_lseek_r+0x1e>
 80149b0:	6023      	str	r3, [r4, #0]
 80149b2:	bd38      	pop	{r3, r4, r5, pc}
 80149b4:	20012b6c 	.word	0x20012b6c

080149b8 <_read_r>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	4d07      	ldr	r5, [pc, #28]	; (80149d8 <_read_r+0x20>)
 80149bc:	4604      	mov	r4, r0
 80149be:	4608      	mov	r0, r1
 80149c0:	4611      	mov	r1, r2
 80149c2:	2200      	movs	r2, #0
 80149c4:	602a      	str	r2, [r5, #0]
 80149c6:	461a      	mov	r2, r3
 80149c8:	f7ec ff34 	bl	8001834 <_read>
 80149cc:	1c43      	adds	r3, r0, #1
 80149ce:	d102      	bne.n	80149d6 <_read_r+0x1e>
 80149d0:	682b      	ldr	r3, [r5, #0]
 80149d2:	b103      	cbz	r3, 80149d6 <_read_r+0x1e>
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	bd38      	pop	{r3, r4, r5, pc}
 80149d8:	20012b6c 	.word	0x20012b6c

080149dc <_sbrk_r>:
 80149dc:	b538      	push	{r3, r4, r5, lr}
 80149de:	4d06      	ldr	r5, [pc, #24]	; (80149f8 <_sbrk_r+0x1c>)
 80149e0:	2300      	movs	r3, #0
 80149e2:	4604      	mov	r4, r0
 80149e4:	4608      	mov	r0, r1
 80149e6:	602b      	str	r3, [r5, #0]
 80149e8:	f7ec ff92 	bl	8001910 <_sbrk>
 80149ec:	1c43      	adds	r3, r0, #1
 80149ee:	d102      	bne.n	80149f6 <_sbrk_r+0x1a>
 80149f0:	682b      	ldr	r3, [r5, #0]
 80149f2:	b103      	cbz	r3, 80149f6 <_sbrk_r+0x1a>
 80149f4:	6023      	str	r3, [r4, #0]
 80149f6:	bd38      	pop	{r3, r4, r5, pc}
 80149f8:	20012b6c 	.word	0x20012b6c

080149fc <_write_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	4d07      	ldr	r5, [pc, #28]	; (8014a1c <_write_r+0x20>)
 8014a00:	4604      	mov	r4, r0
 8014a02:	4608      	mov	r0, r1
 8014a04:	4611      	mov	r1, r2
 8014a06:	2200      	movs	r2, #0
 8014a08:	602a      	str	r2, [r5, #0]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	f7ec ff2f 	bl	800186e <_write>
 8014a10:	1c43      	adds	r3, r0, #1
 8014a12:	d102      	bne.n	8014a1a <_write_r+0x1e>
 8014a14:	682b      	ldr	r3, [r5, #0]
 8014a16:	b103      	cbz	r3, 8014a1a <_write_r+0x1e>
 8014a18:	6023      	str	r3, [r4, #0]
 8014a1a:	bd38      	pop	{r3, r4, r5, pc}
 8014a1c:	20012b6c 	.word	0x20012b6c

08014a20 <__errno>:
 8014a20:	4b01      	ldr	r3, [pc, #4]	; (8014a28 <__errno+0x8>)
 8014a22:	6818      	ldr	r0, [r3, #0]
 8014a24:	4770      	bx	lr
 8014a26:	bf00      	nop
 8014a28:	2000010c 	.word	0x2000010c

08014a2c <__libc_init_array>:
 8014a2c:	b570      	push	{r4, r5, r6, lr}
 8014a2e:	4d0d      	ldr	r5, [pc, #52]	; (8014a64 <__libc_init_array+0x38>)
 8014a30:	4c0d      	ldr	r4, [pc, #52]	; (8014a68 <__libc_init_array+0x3c>)
 8014a32:	1b64      	subs	r4, r4, r5
 8014a34:	10a4      	asrs	r4, r4, #2
 8014a36:	2600      	movs	r6, #0
 8014a38:	42a6      	cmp	r6, r4
 8014a3a:	d109      	bne.n	8014a50 <__libc_init_array+0x24>
 8014a3c:	4d0b      	ldr	r5, [pc, #44]	; (8014a6c <__libc_init_array+0x40>)
 8014a3e:	4c0c      	ldr	r4, [pc, #48]	; (8014a70 <__libc_init_array+0x44>)
 8014a40:	f000 ff02 	bl	8015848 <_init>
 8014a44:	1b64      	subs	r4, r4, r5
 8014a46:	10a4      	asrs	r4, r4, #2
 8014a48:	2600      	movs	r6, #0
 8014a4a:	42a6      	cmp	r6, r4
 8014a4c:	d105      	bne.n	8014a5a <__libc_init_array+0x2e>
 8014a4e:	bd70      	pop	{r4, r5, r6, pc}
 8014a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a54:	4798      	blx	r3
 8014a56:	3601      	adds	r6, #1
 8014a58:	e7ee      	b.n	8014a38 <__libc_init_array+0xc>
 8014a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a5e:	4798      	blx	r3
 8014a60:	3601      	adds	r6, #1
 8014a62:	e7f2      	b.n	8014a4a <__libc_init_array+0x1e>
 8014a64:	0801674c 	.word	0x0801674c
 8014a68:	0801674c 	.word	0x0801674c
 8014a6c:	0801674c 	.word	0x0801674c
 8014a70:	08016754 	.word	0x08016754

08014a74 <__retarget_lock_init_recursive>:
 8014a74:	4770      	bx	lr

08014a76 <__retarget_lock_acquire_recursive>:
 8014a76:	4770      	bx	lr

08014a78 <__retarget_lock_release_recursive>:
 8014a78:	4770      	bx	lr

08014a7a <strcpy>:
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a80:	f803 2b01 	strb.w	r2, [r3], #1
 8014a84:	2a00      	cmp	r2, #0
 8014a86:	d1f9      	bne.n	8014a7c <strcpy+0x2>
 8014a88:	4770      	bx	lr

08014a8a <memcpy>:
 8014a8a:	440a      	add	r2, r1
 8014a8c:	4291      	cmp	r1, r2
 8014a8e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014a92:	d100      	bne.n	8014a96 <memcpy+0xc>
 8014a94:	4770      	bx	lr
 8014a96:	b510      	push	{r4, lr}
 8014a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014aa0:	4291      	cmp	r1, r2
 8014aa2:	d1f9      	bne.n	8014a98 <memcpy+0xe>
 8014aa4:	bd10      	pop	{r4, pc}
	...

08014aa8 <__assert_func>:
 8014aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014aaa:	4614      	mov	r4, r2
 8014aac:	461a      	mov	r2, r3
 8014aae:	4b09      	ldr	r3, [pc, #36]	; (8014ad4 <__assert_func+0x2c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	4605      	mov	r5, r0
 8014ab4:	68d8      	ldr	r0, [r3, #12]
 8014ab6:	b14c      	cbz	r4, 8014acc <__assert_func+0x24>
 8014ab8:	4b07      	ldr	r3, [pc, #28]	; (8014ad8 <__assert_func+0x30>)
 8014aba:	9100      	str	r1, [sp, #0]
 8014abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ac0:	4906      	ldr	r1, [pc, #24]	; (8014adc <__assert_func+0x34>)
 8014ac2:	462b      	mov	r3, r5
 8014ac4:	f000 fd48 	bl	8015558 <fiprintf>
 8014ac8:	f000 fdee 	bl	80156a8 <abort>
 8014acc:	4b04      	ldr	r3, [pc, #16]	; (8014ae0 <__assert_func+0x38>)
 8014ace:	461c      	mov	r4, r3
 8014ad0:	e7f3      	b.n	8014aba <__assert_func+0x12>
 8014ad2:	bf00      	nop
 8014ad4:	2000010c 	.word	0x2000010c
 8014ad8:	080166d4 	.word	0x080166d4
 8014adc:	080166e1 	.word	0x080166e1
 8014ae0:	0801670f 	.word	0x0801670f

08014ae4 <__env_lock>:
 8014ae4:	4801      	ldr	r0, [pc, #4]	; (8014aec <__env_lock+0x8>)
 8014ae6:	f7ff bfc6 	b.w	8014a76 <__retarget_lock_acquire_recursive>
 8014aea:	bf00      	nop
 8014aec:	20012b70 	.word	0x20012b70

08014af0 <__env_unlock>:
 8014af0:	4801      	ldr	r0, [pc, #4]	; (8014af8 <__env_unlock+0x8>)
 8014af2:	f7ff bfc1 	b.w	8014a78 <__retarget_lock_release_recursive>
 8014af6:	bf00      	nop
 8014af8:	20012b70 	.word	0x20012b70

08014afc <_free_r>:
 8014afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014afe:	2900      	cmp	r1, #0
 8014b00:	d044      	beq.n	8014b8c <_free_r+0x90>
 8014b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b06:	9001      	str	r0, [sp, #4]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8014b0e:	bfb8      	it	lt
 8014b10:	18e4      	addlt	r4, r4, r3
 8014b12:	f7ff fc17 	bl	8014344 <__malloc_lock>
 8014b16:	4a1e      	ldr	r2, [pc, #120]	; (8014b90 <_free_r+0x94>)
 8014b18:	9801      	ldr	r0, [sp, #4]
 8014b1a:	6813      	ldr	r3, [r2, #0]
 8014b1c:	b933      	cbnz	r3, 8014b2c <_free_r+0x30>
 8014b1e:	6063      	str	r3, [r4, #4]
 8014b20:	6014      	str	r4, [r2, #0]
 8014b22:	b003      	add	sp, #12
 8014b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b28:	f7ff bc12 	b.w	8014350 <__malloc_unlock>
 8014b2c:	42a3      	cmp	r3, r4
 8014b2e:	d908      	bls.n	8014b42 <_free_r+0x46>
 8014b30:	6825      	ldr	r5, [r4, #0]
 8014b32:	1961      	adds	r1, r4, r5
 8014b34:	428b      	cmp	r3, r1
 8014b36:	bf01      	itttt	eq
 8014b38:	6819      	ldreq	r1, [r3, #0]
 8014b3a:	685b      	ldreq	r3, [r3, #4]
 8014b3c:	1949      	addeq	r1, r1, r5
 8014b3e:	6021      	streq	r1, [r4, #0]
 8014b40:	e7ed      	b.n	8014b1e <_free_r+0x22>
 8014b42:	461a      	mov	r2, r3
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	b10b      	cbz	r3, 8014b4c <_free_r+0x50>
 8014b48:	42a3      	cmp	r3, r4
 8014b4a:	d9fa      	bls.n	8014b42 <_free_r+0x46>
 8014b4c:	6811      	ldr	r1, [r2, #0]
 8014b4e:	1855      	adds	r5, r2, r1
 8014b50:	42a5      	cmp	r5, r4
 8014b52:	d10b      	bne.n	8014b6c <_free_r+0x70>
 8014b54:	6824      	ldr	r4, [r4, #0]
 8014b56:	4421      	add	r1, r4
 8014b58:	1854      	adds	r4, r2, r1
 8014b5a:	42a3      	cmp	r3, r4
 8014b5c:	6011      	str	r1, [r2, #0]
 8014b5e:	d1e0      	bne.n	8014b22 <_free_r+0x26>
 8014b60:	681c      	ldr	r4, [r3, #0]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	6053      	str	r3, [r2, #4]
 8014b66:	440c      	add	r4, r1
 8014b68:	6014      	str	r4, [r2, #0]
 8014b6a:	e7da      	b.n	8014b22 <_free_r+0x26>
 8014b6c:	d902      	bls.n	8014b74 <_free_r+0x78>
 8014b6e:	230c      	movs	r3, #12
 8014b70:	6003      	str	r3, [r0, #0]
 8014b72:	e7d6      	b.n	8014b22 <_free_r+0x26>
 8014b74:	6825      	ldr	r5, [r4, #0]
 8014b76:	1961      	adds	r1, r4, r5
 8014b78:	428b      	cmp	r3, r1
 8014b7a:	bf04      	itt	eq
 8014b7c:	6819      	ldreq	r1, [r3, #0]
 8014b7e:	685b      	ldreq	r3, [r3, #4]
 8014b80:	6063      	str	r3, [r4, #4]
 8014b82:	bf04      	itt	eq
 8014b84:	1949      	addeq	r1, r1, r5
 8014b86:	6021      	streq	r1, [r4, #0]
 8014b88:	6054      	str	r4, [r2, #4]
 8014b8a:	e7ca      	b.n	8014b22 <_free_r+0x26>
 8014b8c:	b003      	add	sp, #12
 8014b8e:	bd30      	pop	{r4, r5, pc}
 8014b90:	20012a28 	.word	0x20012a28

08014b94 <_malloc_usable_size_r>:
 8014b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b98:	1f18      	subs	r0, r3, #4
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	bfbc      	itt	lt
 8014b9e:	580b      	ldrlt	r3, [r1, r0]
 8014ba0:	18c0      	addlt	r0, r0, r3
 8014ba2:	4770      	bx	lr

08014ba4 <__ssputs_r>:
 8014ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ba8:	688e      	ldr	r6, [r1, #8]
 8014baa:	461f      	mov	r7, r3
 8014bac:	42be      	cmp	r6, r7
 8014bae:	680b      	ldr	r3, [r1, #0]
 8014bb0:	4682      	mov	sl, r0
 8014bb2:	460c      	mov	r4, r1
 8014bb4:	4690      	mov	r8, r2
 8014bb6:	d82c      	bhi.n	8014c12 <__ssputs_r+0x6e>
 8014bb8:	898a      	ldrh	r2, [r1, #12]
 8014bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014bbe:	d026      	beq.n	8014c0e <__ssputs_r+0x6a>
 8014bc0:	6965      	ldr	r5, [r4, #20]
 8014bc2:	6909      	ldr	r1, [r1, #16]
 8014bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bc8:	eba3 0901 	sub.w	r9, r3, r1
 8014bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014bd0:	1c7b      	adds	r3, r7, #1
 8014bd2:	444b      	add	r3, r9
 8014bd4:	106d      	asrs	r5, r5, #1
 8014bd6:	429d      	cmp	r5, r3
 8014bd8:	bf38      	it	cc
 8014bda:	461d      	movcc	r5, r3
 8014bdc:	0553      	lsls	r3, r2, #21
 8014bde:	d527      	bpl.n	8014c30 <__ssputs_r+0x8c>
 8014be0:	4629      	mov	r1, r5
 8014be2:	f7ff fb2f 	bl	8014244 <_malloc_r>
 8014be6:	4606      	mov	r6, r0
 8014be8:	b360      	cbz	r0, 8014c44 <__ssputs_r+0xa0>
 8014bea:	6921      	ldr	r1, [r4, #16]
 8014bec:	464a      	mov	r2, r9
 8014bee:	f7ff ff4c 	bl	8014a8a <memcpy>
 8014bf2:	89a3      	ldrh	r3, [r4, #12]
 8014bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bfc:	81a3      	strh	r3, [r4, #12]
 8014bfe:	6126      	str	r6, [r4, #16]
 8014c00:	6165      	str	r5, [r4, #20]
 8014c02:	444e      	add	r6, r9
 8014c04:	eba5 0509 	sub.w	r5, r5, r9
 8014c08:	6026      	str	r6, [r4, #0]
 8014c0a:	60a5      	str	r5, [r4, #8]
 8014c0c:	463e      	mov	r6, r7
 8014c0e:	42be      	cmp	r6, r7
 8014c10:	d900      	bls.n	8014c14 <__ssputs_r+0x70>
 8014c12:	463e      	mov	r6, r7
 8014c14:	6820      	ldr	r0, [r4, #0]
 8014c16:	4632      	mov	r2, r6
 8014c18:	4641      	mov	r1, r8
 8014c1a:	f7ff fe53 	bl	80148c4 <memmove>
 8014c1e:	68a3      	ldr	r3, [r4, #8]
 8014c20:	1b9b      	subs	r3, r3, r6
 8014c22:	60a3      	str	r3, [r4, #8]
 8014c24:	6823      	ldr	r3, [r4, #0]
 8014c26:	4433      	add	r3, r6
 8014c28:	6023      	str	r3, [r4, #0]
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c30:	462a      	mov	r2, r5
 8014c32:	f7ff fc07 	bl	8014444 <_realloc_r>
 8014c36:	4606      	mov	r6, r0
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	d1e0      	bne.n	8014bfe <__ssputs_r+0x5a>
 8014c3c:	6921      	ldr	r1, [r4, #16]
 8014c3e:	4650      	mov	r0, sl
 8014c40:	f7ff ff5c 	bl	8014afc <_free_r>
 8014c44:	230c      	movs	r3, #12
 8014c46:	f8ca 3000 	str.w	r3, [sl]
 8014c4a:	89a3      	ldrh	r3, [r4, #12]
 8014c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c50:	81a3      	strh	r3, [r4, #12]
 8014c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c56:	e7e9      	b.n	8014c2c <__ssputs_r+0x88>

08014c58 <_svfiprintf_r>:
 8014c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5c:	4698      	mov	r8, r3
 8014c5e:	898b      	ldrh	r3, [r1, #12]
 8014c60:	061b      	lsls	r3, r3, #24
 8014c62:	b09d      	sub	sp, #116	; 0x74
 8014c64:	4607      	mov	r7, r0
 8014c66:	460d      	mov	r5, r1
 8014c68:	4614      	mov	r4, r2
 8014c6a:	d50e      	bpl.n	8014c8a <_svfiprintf_r+0x32>
 8014c6c:	690b      	ldr	r3, [r1, #16]
 8014c6e:	b963      	cbnz	r3, 8014c8a <_svfiprintf_r+0x32>
 8014c70:	2140      	movs	r1, #64	; 0x40
 8014c72:	f7ff fae7 	bl	8014244 <_malloc_r>
 8014c76:	6028      	str	r0, [r5, #0]
 8014c78:	6128      	str	r0, [r5, #16]
 8014c7a:	b920      	cbnz	r0, 8014c86 <_svfiprintf_r+0x2e>
 8014c7c:	230c      	movs	r3, #12
 8014c7e:	603b      	str	r3, [r7, #0]
 8014c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c84:	e0d0      	b.n	8014e28 <_svfiprintf_r+0x1d0>
 8014c86:	2340      	movs	r3, #64	; 0x40
 8014c88:	616b      	str	r3, [r5, #20]
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c8e:	2320      	movs	r3, #32
 8014c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c98:	2330      	movs	r3, #48	; 0x30
 8014c9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014e40 <_svfiprintf_r+0x1e8>
 8014c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ca2:	f04f 0901 	mov.w	r9, #1
 8014ca6:	4623      	mov	r3, r4
 8014ca8:	469a      	mov	sl, r3
 8014caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cae:	b10a      	cbz	r2, 8014cb4 <_svfiprintf_r+0x5c>
 8014cb0:	2a25      	cmp	r2, #37	; 0x25
 8014cb2:	d1f9      	bne.n	8014ca8 <_svfiprintf_r+0x50>
 8014cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8014cb8:	d00b      	beq.n	8014cd2 <_svfiprintf_r+0x7a>
 8014cba:	465b      	mov	r3, fp
 8014cbc:	4622      	mov	r2, r4
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	4638      	mov	r0, r7
 8014cc2:	f7ff ff6f 	bl	8014ba4 <__ssputs_r>
 8014cc6:	3001      	adds	r0, #1
 8014cc8:	f000 80a9 	beq.w	8014e1e <_svfiprintf_r+0x1c6>
 8014ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cce:	445a      	add	r2, fp
 8014cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8014cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	f000 80a1 	beq.w	8014e1e <_svfiprintf_r+0x1c6>
 8014cdc:	2300      	movs	r3, #0
 8014cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ce6:	f10a 0a01 	add.w	sl, sl, #1
 8014cea:	9304      	str	r3, [sp, #16]
 8014cec:	9307      	str	r3, [sp, #28]
 8014cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8014cf4:	4654      	mov	r4, sl
 8014cf6:	2205      	movs	r2, #5
 8014cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cfc:	4850      	ldr	r0, [pc, #320]	; (8014e40 <_svfiprintf_r+0x1e8>)
 8014cfe:	f7eb fa87 	bl	8000210 <memchr>
 8014d02:	9a04      	ldr	r2, [sp, #16]
 8014d04:	b9d8      	cbnz	r0, 8014d3e <_svfiprintf_r+0xe6>
 8014d06:	06d0      	lsls	r0, r2, #27
 8014d08:	bf44      	itt	mi
 8014d0a:	2320      	movmi	r3, #32
 8014d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d10:	0711      	lsls	r1, r2, #28
 8014d12:	bf44      	itt	mi
 8014d14:	232b      	movmi	r3, #43	; 0x2b
 8014d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8014d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8014d20:	d015      	beq.n	8014d4e <_svfiprintf_r+0xf6>
 8014d22:	9a07      	ldr	r2, [sp, #28]
 8014d24:	4654      	mov	r4, sl
 8014d26:	2000      	movs	r0, #0
 8014d28:	f04f 0c0a 	mov.w	ip, #10
 8014d2c:	4621      	mov	r1, r4
 8014d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d32:	3b30      	subs	r3, #48	; 0x30
 8014d34:	2b09      	cmp	r3, #9
 8014d36:	d94d      	bls.n	8014dd4 <_svfiprintf_r+0x17c>
 8014d38:	b1b0      	cbz	r0, 8014d68 <_svfiprintf_r+0x110>
 8014d3a:	9207      	str	r2, [sp, #28]
 8014d3c:	e014      	b.n	8014d68 <_svfiprintf_r+0x110>
 8014d3e:	eba0 0308 	sub.w	r3, r0, r8
 8014d42:	fa09 f303 	lsl.w	r3, r9, r3
 8014d46:	4313      	orrs	r3, r2
 8014d48:	9304      	str	r3, [sp, #16]
 8014d4a:	46a2      	mov	sl, r4
 8014d4c:	e7d2      	b.n	8014cf4 <_svfiprintf_r+0x9c>
 8014d4e:	9b03      	ldr	r3, [sp, #12]
 8014d50:	1d19      	adds	r1, r3, #4
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	9103      	str	r1, [sp, #12]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	bfbb      	ittet	lt
 8014d5a:	425b      	neglt	r3, r3
 8014d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8014d60:	9307      	strge	r3, [sp, #28]
 8014d62:	9307      	strlt	r3, [sp, #28]
 8014d64:	bfb8      	it	lt
 8014d66:	9204      	strlt	r2, [sp, #16]
 8014d68:	7823      	ldrb	r3, [r4, #0]
 8014d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8014d6c:	d10c      	bne.n	8014d88 <_svfiprintf_r+0x130>
 8014d6e:	7863      	ldrb	r3, [r4, #1]
 8014d70:	2b2a      	cmp	r3, #42	; 0x2a
 8014d72:	d134      	bne.n	8014dde <_svfiprintf_r+0x186>
 8014d74:	9b03      	ldr	r3, [sp, #12]
 8014d76:	1d1a      	adds	r2, r3, #4
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	9203      	str	r2, [sp, #12]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	bfb8      	it	lt
 8014d80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014d84:	3402      	adds	r4, #2
 8014d86:	9305      	str	r3, [sp, #20]
 8014d88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014e50 <_svfiprintf_r+0x1f8>
 8014d8c:	7821      	ldrb	r1, [r4, #0]
 8014d8e:	2203      	movs	r2, #3
 8014d90:	4650      	mov	r0, sl
 8014d92:	f7eb fa3d 	bl	8000210 <memchr>
 8014d96:	b138      	cbz	r0, 8014da8 <_svfiprintf_r+0x150>
 8014d98:	9b04      	ldr	r3, [sp, #16]
 8014d9a:	eba0 000a 	sub.w	r0, r0, sl
 8014d9e:	2240      	movs	r2, #64	; 0x40
 8014da0:	4082      	lsls	r2, r0
 8014da2:	4313      	orrs	r3, r2
 8014da4:	3401      	adds	r4, #1
 8014da6:	9304      	str	r3, [sp, #16]
 8014da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dac:	4825      	ldr	r0, [pc, #148]	; (8014e44 <_svfiprintf_r+0x1ec>)
 8014dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014db2:	2206      	movs	r2, #6
 8014db4:	f7eb fa2c 	bl	8000210 <memchr>
 8014db8:	2800      	cmp	r0, #0
 8014dba:	d038      	beq.n	8014e2e <_svfiprintf_r+0x1d6>
 8014dbc:	4b22      	ldr	r3, [pc, #136]	; (8014e48 <_svfiprintf_r+0x1f0>)
 8014dbe:	bb1b      	cbnz	r3, 8014e08 <_svfiprintf_r+0x1b0>
 8014dc0:	9b03      	ldr	r3, [sp, #12]
 8014dc2:	3307      	adds	r3, #7
 8014dc4:	f023 0307 	bic.w	r3, r3, #7
 8014dc8:	3308      	adds	r3, #8
 8014dca:	9303      	str	r3, [sp, #12]
 8014dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dce:	4433      	add	r3, r6
 8014dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8014dd2:	e768      	b.n	8014ca6 <_svfiprintf_r+0x4e>
 8014dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014dd8:	460c      	mov	r4, r1
 8014dda:	2001      	movs	r0, #1
 8014ddc:	e7a6      	b.n	8014d2c <_svfiprintf_r+0xd4>
 8014dde:	2300      	movs	r3, #0
 8014de0:	3401      	adds	r4, #1
 8014de2:	9305      	str	r3, [sp, #20]
 8014de4:	4619      	mov	r1, r3
 8014de6:	f04f 0c0a 	mov.w	ip, #10
 8014dea:	4620      	mov	r0, r4
 8014dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014df0:	3a30      	subs	r2, #48	; 0x30
 8014df2:	2a09      	cmp	r2, #9
 8014df4:	d903      	bls.n	8014dfe <_svfiprintf_r+0x1a6>
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d0c6      	beq.n	8014d88 <_svfiprintf_r+0x130>
 8014dfa:	9105      	str	r1, [sp, #20]
 8014dfc:	e7c4      	b.n	8014d88 <_svfiprintf_r+0x130>
 8014dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e02:	4604      	mov	r4, r0
 8014e04:	2301      	movs	r3, #1
 8014e06:	e7f0      	b.n	8014dea <_svfiprintf_r+0x192>
 8014e08:	ab03      	add	r3, sp, #12
 8014e0a:	9300      	str	r3, [sp, #0]
 8014e0c:	462a      	mov	r2, r5
 8014e0e:	4b0f      	ldr	r3, [pc, #60]	; (8014e4c <_svfiprintf_r+0x1f4>)
 8014e10:	a904      	add	r1, sp, #16
 8014e12:	4638      	mov	r0, r7
 8014e14:	f3af 8000 	nop.w
 8014e18:	1c42      	adds	r2, r0, #1
 8014e1a:	4606      	mov	r6, r0
 8014e1c:	d1d6      	bne.n	8014dcc <_svfiprintf_r+0x174>
 8014e1e:	89ab      	ldrh	r3, [r5, #12]
 8014e20:	065b      	lsls	r3, r3, #25
 8014e22:	f53f af2d 	bmi.w	8014c80 <_svfiprintf_r+0x28>
 8014e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e28:	b01d      	add	sp, #116	; 0x74
 8014e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e2e:	ab03      	add	r3, sp, #12
 8014e30:	9300      	str	r3, [sp, #0]
 8014e32:	462a      	mov	r2, r5
 8014e34:	4b05      	ldr	r3, [pc, #20]	; (8014e4c <_svfiprintf_r+0x1f4>)
 8014e36:	a904      	add	r1, sp, #16
 8014e38:	4638      	mov	r0, r7
 8014e3a:	f000 f9bd 	bl	80151b8 <_printf_i>
 8014e3e:	e7eb      	b.n	8014e18 <_svfiprintf_r+0x1c0>
 8014e40:	08016710 	.word	0x08016710
 8014e44:	0801671a 	.word	0x0801671a
 8014e48:	00000000 	.word	0x00000000
 8014e4c:	08014ba5 	.word	0x08014ba5
 8014e50:	08016716 	.word	0x08016716

08014e54 <__sfputc_r>:
 8014e54:	6893      	ldr	r3, [r2, #8]
 8014e56:	3b01      	subs	r3, #1
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	b410      	push	{r4}
 8014e5c:	6093      	str	r3, [r2, #8]
 8014e5e:	da08      	bge.n	8014e72 <__sfputc_r+0x1e>
 8014e60:	6994      	ldr	r4, [r2, #24]
 8014e62:	42a3      	cmp	r3, r4
 8014e64:	db01      	blt.n	8014e6a <__sfputc_r+0x16>
 8014e66:	290a      	cmp	r1, #10
 8014e68:	d103      	bne.n	8014e72 <__sfputc_r+0x1e>
 8014e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e6e:	f000 bb85 	b.w	801557c <__swbuf_r>
 8014e72:	6813      	ldr	r3, [r2, #0]
 8014e74:	1c58      	adds	r0, r3, #1
 8014e76:	6010      	str	r0, [r2, #0]
 8014e78:	7019      	strb	r1, [r3, #0]
 8014e7a:	4608      	mov	r0, r1
 8014e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e80:	4770      	bx	lr

08014e82 <__sfputs_r>:
 8014e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e84:	4606      	mov	r6, r0
 8014e86:	460f      	mov	r7, r1
 8014e88:	4614      	mov	r4, r2
 8014e8a:	18d5      	adds	r5, r2, r3
 8014e8c:	42ac      	cmp	r4, r5
 8014e8e:	d101      	bne.n	8014e94 <__sfputs_r+0x12>
 8014e90:	2000      	movs	r0, #0
 8014e92:	e007      	b.n	8014ea4 <__sfputs_r+0x22>
 8014e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e98:	463a      	mov	r2, r7
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	f7ff ffda 	bl	8014e54 <__sfputc_r>
 8014ea0:	1c43      	adds	r3, r0, #1
 8014ea2:	d1f3      	bne.n	8014e8c <__sfputs_r+0xa>
 8014ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ea8 <_vfiprintf_r>:
 8014ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eac:	460d      	mov	r5, r1
 8014eae:	b09d      	sub	sp, #116	; 0x74
 8014eb0:	4614      	mov	r4, r2
 8014eb2:	4698      	mov	r8, r3
 8014eb4:	4606      	mov	r6, r0
 8014eb6:	b118      	cbz	r0, 8014ec0 <_vfiprintf_r+0x18>
 8014eb8:	6a03      	ldr	r3, [r0, #32]
 8014eba:	b90b      	cbnz	r3, 8014ec0 <_vfiprintf_r+0x18>
 8014ebc:	f7ff fbfa 	bl	80146b4 <__sinit>
 8014ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ec2:	07d9      	lsls	r1, r3, #31
 8014ec4:	d405      	bmi.n	8014ed2 <_vfiprintf_r+0x2a>
 8014ec6:	89ab      	ldrh	r3, [r5, #12]
 8014ec8:	059a      	lsls	r2, r3, #22
 8014eca:	d402      	bmi.n	8014ed2 <_vfiprintf_r+0x2a>
 8014ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ece:	f7ff fdd2 	bl	8014a76 <__retarget_lock_acquire_recursive>
 8014ed2:	89ab      	ldrh	r3, [r5, #12]
 8014ed4:	071b      	lsls	r3, r3, #28
 8014ed6:	d501      	bpl.n	8014edc <_vfiprintf_r+0x34>
 8014ed8:	692b      	ldr	r3, [r5, #16]
 8014eda:	b99b      	cbnz	r3, 8014f04 <_vfiprintf_r+0x5c>
 8014edc:	4629      	mov	r1, r5
 8014ede:	4630      	mov	r0, r6
 8014ee0:	f000 fb8a 	bl	80155f8 <__swsetup_r>
 8014ee4:	b170      	cbz	r0, 8014f04 <_vfiprintf_r+0x5c>
 8014ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ee8:	07dc      	lsls	r4, r3, #31
 8014eea:	d504      	bpl.n	8014ef6 <_vfiprintf_r+0x4e>
 8014eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ef0:	b01d      	add	sp, #116	; 0x74
 8014ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef6:	89ab      	ldrh	r3, [r5, #12]
 8014ef8:	0598      	lsls	r0, r3, #22
 8014efa:	d4f7      	bmi.n	8014eec <_vfiprintf_r+0x44>
 8014efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014efe:	f7ff fdbb 	bl	8014a78 <__retarget_lock_release_recursive>
 8014f02:	e7f3      	b.n	8014eec <_vfiprintf_r+0x44>
 8014f04:	2300      	movs	r3, #0
 8014f06:	9309      	str	r3, [sp, #36]	; 0x24
 8014f08:	2320      	movs	r3, #32
 8014f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f12:	2330      	movs	r3, #48	; 0x30
 8014f14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80150c8 <_vfiprintf_r+0x220>
 8014f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f1c:	f04f 0901 	mov.w	r9, #1
 8014f20:	4623      	mov	r3, r4
 8014f22:	469a      	mov	sl, r3
 8014f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f28:	b10a      	cbz	r2, 8014f2e <_vfiprintf_r+0x86>
 8014f2a:	2a25      	cmp	r2, #37	; 0x25
 8014f2c:	d1f9      	bne.n	8014f22 <_vfiprintf_r+0x7a>
 8014f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8014f32:	d00b      	beq.n	8014f4c <_vfiprintf_r+0xa4>
 8014f34:	465b      	mov	r3, fp
 8014f36:	4622      	mov	r2, r4
 8014f38:	4629      	mov	r1, r5
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	f7ff ffa1 	bl	8014e82 <__sfputs_r>
 8014f40:	3001      	adds	r0, #1
 8014f42:	f000 80a9 	beq.w	8015098 <_vfiprintf_r+0x1f0>
 8014f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f48:	445a      	add	r2, fp
 8014f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8014f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	f000 80a1 	beq.w	8015098 <_vfiprintf_r+0x1f0>
 8014f56:	2300      	movs	r3, #0
 8014f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f60:	f10a 0a01 	add.w	sl, sl, #1
 8014f64:	9304      	str	r3, [sp, #16]
 8014f66:	9307      	str	r3, [sp, #28]
 8014f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8014f6e:	4654      	mov	r4, sl
 8014f70:	2205      	movs	r2, #5
 8014f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f76:	4854      	ldr	r0, [pc, #336]	; (80150c8 <_vfiprintf_r+0x220>)
 8014f78:	f7eb f94a 	bl	8000210 <memchr>
 8014f7c:	9a04      	ldr	r2, [sp, #16]
 8014f7e:	b9d8      	cbnz	r0, 8014fb8 <_vfiprintf_r+0x110>
 8014f80:	06d1      	lsls	r1, r2, #27
 8014f82:	bf44      	itt	mi
 8014f84:	2320      	movmi	r3, #32
 8014f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f8a:	0713      	lsls	r3, r2, #28
 8014f8c:	bf44      	itt	mi
 8014f8e:	232b      	movmi	r3, #43	; 0x2b
 8014f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f94:	f89a 3000 	ldrb.w	r3, [sl]
 8014f98:	2b2a      	cmp	r3, #42	; 0x2a
 8014f9a:	d015      	beq.n	8014fc8 <_vfiprintf_r+0x120>
 8014f9c:	9a07      	ldr	r2, [sp, #28]
 8014f9e:	4654      	mov	r4, sl
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	f04f 0c0a 	mov.w	ip, #10
 8014fa6:	4621      	mov	r1, r4
 8014fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fac:	3b30      	subs	r3, #48	; 0x30
 8014fae:	2b09      	cmp	r3, #9
 8014fb0:	d94d      	bls.n	801504e <_vfiprintf_r+0x1a6>
 8014fb2:	b1b0      	cbz	r0, 8014fe2 <_vfiprintf_r+0x13a>
 8014fb4:	9207      	str	r2, [sp, #28]
 8014fb6:	e014      	b.n	8014fe2 <_vfiprintf_r+0x13a>
 8014fb8:	eba0 0308 	sub.w	r3, r0, r8
 8014fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8014fc0:	4313      	orrs	r3, r2
 8014fc2:	9304      	str	r3, [sp, #16]
 8014fc4:	46a2      	mov	sl, r4
 8014fc6:	e7d2      	b.n	8014f6e <_vfiprintf_r+0xc6>
 8014fc8:	9b03      	ldr	r3, [sp, #12]
 8014fca:	1d19      	adds	r1, r3, #4
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	9103      	str	r1, [sp, #12]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	bfbb      	ittet	lt
 8014fd4:	425b      	neglt	r3, r3
 8014fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8014fda:	9307      	strge	r3, [sp, #28]
 8014fdc:	9307      	strlt	r3, [sp, #28]
 8014fde:	bfb8      	it	lt
 8014fe0:	9204      	strlt	r2, [sp, #16]
 8014fe2:	7823      	ldrb	r3, [r4, #0]
 8014fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8014fe6:	d10c      	bne.n	8015002 <_vfiprintf_r+0x15a>
 8014fe8:	7863      	ldrb	r3, [r4, #1]
 8014fea:	2b2a      	cmp	r3, #42	; 0x2a
 8014fec:	d134      	bne.n	8015058 <_vfiprintf_r+0x1b0>
 8014fee:	9b03      	ldr	r3, [sp, #12]
 8014ff0:	1d1a      	adds	r2, r3, #4
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	9203      	str	r2, [sp, #12]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	bfb8      	it	lt
 8014ffa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014ffe:	3402      	adds	r4, #2
 8015000:	9305      	str	r3, [sp, #20]
 8015002:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80150d8 <_vfiprintf_r+0x230>
 8015006:	7821      	ldrb	r1, [r4, #0]
 8015008:	2203      	movs	r2, #3
 801500a:	4650      	mov	r0, sl
 801500c:	f7eb f900 	bl	8000210 <memchr>
 8015010:	b138      	cbz	r0, 8015022 <_vfiprintf_r+0x17a>
 8015012:	9b04      	ldr	r3, [sp, #16]
 8015014:	eba0 000a 	sub.w	r0, r0, sl
 8015018:	2240      	movs	r2, #64	; 0x40
 801501a:	4082      	lsls	r2, r0
 801501c:	4313      	orrs	r3, r2
 801501e:	3401      	adds	r4, #1
 8015020:	9304      	str	r3, [sp, #16]
 8015022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015026:	4829      	ldr	r0, [pc, #164]	; (80150cc <_vfiprintf_r+0x224>)
 8015028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801502c:	2206      	movs	r2, #6
 801502e:	f7eb f8ef 	bl	8000210 <memchr>
 8015032:	2800      	cmp	r0, #0
 8015034:	d03f      	beq.n	80150b6 <_vfiprintf_r+0x20e>
 8015036:	4b26      	ldr	r3, [pc, #152]	; (80150d0 <_vfiprintf_r+0x228>)
 8015038:	bb1b      	cbnz	r3, 8015082 <_vfiprintf_r+0x1da>
 801503a:	9b03      	ldr	r3, [sp, #12]
 801503c:	3307      	adds	r3, #7
 801503e:	f023 0307 	bic.w	r3, r3, #7
 8015042:	3308      	adds	r3, #8
 8015044:	9303      	str	r3, [sp, #12]
 8015046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015048:	443b      	add	r3, r7
 801504a:	9309      	str	r3, [sp, #36]	; 0x24
 801504c:	e768      	b.n	8014f20 <_vfiprintf_r+0x78>
 801504e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015052:	460c      	mov	r4, r1
 8015054:	2001      	movs	r0, #1
 8015056:	e7a6      	b.n	8014fa6 <_vfiprintf_r+0xfe>
 8015058:	2300      	movs	r3, #0
 801505a:	3401      	adds	r4, #1
 801505c:	9305      	str	r3, [sp, #20]
 801505e:	4619      	mov	r1, r3
 8015060:	f04f 0c0a 	mov.w	ip, #10
 8015064:	4620      	mov	r0, r4
 8015066:	f810 2b01 	ldrb.w	r2, [r0], #1
 801506a:	3a30      	subs	r2, #48	; 0x30
 801506c:	2a09      	cmp	r2, #9
 801506e:	d903      	bls.n	8015078 <_vfiprintf_r+0x1d0>
 8015070:	2b00      	cmp	r3, #0
 8015072:	d0c6      	beq.n	8015002 <_vfiprintf_r+0x15a>
 8015074:	9105      	str	r1, [sp, #20]
 8015076:	e7c4      	b.n	8015002 <_vfiprintf_r+0x15a>
 8015078:	fb0c 2101 	mla	r1, ip, r1, r2
 801507c:	4604      	mov	r4, r0
 801507e:	2301      	movs	r3, #1
 8015080:	e7f0      	b.n	8015064 <_vfiprintf_r+0x1bc>
 8015082:	ab03      	add	r3, sp, #12
 8015084:	9300      	str	r3, [sp, #0]
 8015086:	462a      	mov	r2, r5
 8015088:	4b12      	ldr	r3, [pc, #72]	; (80150d4 <_vfiprintf_r+0x22c>)
 801508a:	a904      	add	r1, sp, #16
 801508c:	4630      	mov	r0, r6
 801508e:	f3af 8000 	nop.w
 8015092:	4607      	mov	r7, r0
 8015094:	1c78      	adds	r0, r7, #1
 8015096:	d1d6      	bne.n	8015046 <_vfiprintf_r+0x19e>
 8015098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801509a:	07d9      	lsls	r1, r3, #31
 801509c:	d405      	bmi.n	80150aa <_vfiprintf_r+0x202>
 801509e:	89ab      	ldrh	r3, [r5, #12]
 80150a0:	059a      	lsls	r2, r3, #22
 80150a2:	d402      	bmi.n	80150aa <_vfiprintf_r+0x202>
 80150a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150a6:	f7ff fce7 	bl	8014a78 <__retarget_lock_release_recursive>
 80150aa:	89ab      	ldrh	r3, [r5, #12]
 80150ac:	065b      	lsls	r3, r3, #25
 80150ae:	f53f af1d 	bmi.w	8014eec <_vfiprintf_r+0x44>
 80150b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150b4:	e71c      	b.n	8014ef0 <_vfiprintf_r+0x48>
 80150b6:	ab03      	add	r3, sp, #12
 80150b8:	9300      	str	r3, [sp, #0]
 80150ba:	462a      	mov	r2, r5
 80150bc:	4b05      	ldr	r3, [pc, #20]	; (80150d4 <_vfiprintf_r+0x22c>)
 80150be:	a904      	add	r1, sp, #16
 80150c0:	4630      	mov	r0, r6
 80150c2:	f000 f879 	bl	80151b8 <_printf_i>
 80150c6:	e7e4      	b.n	8015092 <_vfiprintf_r+0x1ea>
 80150c8:	08016710 	.word	0x08016710
 80150cc:	0801671a 	.word	0x0801671a
 80150d0:	00000000 	.word	0x00000000
 80150d4:	08014e83 	.word	0x08014e83
 80150d8:	08016716 	.word	0x08016716

080150dc <_printf_common>:
 80150dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150e0:	4616      	mov	r6, r2
 80150e2:	4699      	mov	r9, r3
 80150e4:	688a      	ldr	r2, [r1, #8]
 80150e6:	690b      	ldr	r3, [r1, #16]
 80150e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80150ec:	4293      	cmp	r3, r2
 80150ee:	bfb8      	it	lt
 80150f0:	4613      	movlt	r3, r2
 80150f2:	6033      	str	r3, [r6, #0]
 80150f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80150f8:	4607      	mov	r7, r0
 80150fa:	460c      	mov	r4, r1
 80150fc:	b10a      	cbz	r2, 8015102 <_printf_common+0x26>
 80150fe:	3301      	adds	r3, #1
 8015100:	6033      	str	r3, [r6, #0]
 8015102:	6823      	ldr	r3, [r4, #0]
 8015104:	0699      	lsls	r1, r3, #26
 8015106:	bf42      	ittt	mi
 8015108:	6833      	ldrmi	r3, [r6, #0]
 801510a:	3302      	addmi	r3, #2
 801510c:	6033      	strmi	r3, [r6, #0]
 801510e:	6825      	ldr	r5, [r4, #0]
 8015110:	f015 0506 	ands.w	r5, r5, #6
 8015114:	d106      	bne.n	8015124 <_printf_common+0x48>
 8015116:	f104 0a19 	add.w	sl, r4, #25
 801511a:	68e3      	ldr	r3, [r4, #12]
 801511c:	6832      	ldr	r2, [r6, #0]
 801511e:	1a9b      	subs	r3, r3, r2
 8015120:	42ab      	cmp	r3, r5
 8015122:	dc26      	bgt.n	8015172 <_printf_common+0x96>
 8015124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015128:	1e13      	subs	r3, r2, #0
 801512a:	6822      	ldr	r2, [r4, #0]
 801512c:	bf18      	it	ne
 801512e:	2301      	movne	r3, #1
 8015130:	0692      	lsls	r2, r2, #26
 8015132:	d42b      	bmi.n	801518c <_printf_common+0xb0>
 8015134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015138:	4649      	mov	r1, r9
 801513a:	4638      	mov	r0, r7
 801513c:	47c0      	blx	r8
 801513e:	3001      	adds	r0, #1
 8015140:	d01e      	beq.n	8015180 <_printf_common+0xa4>
 8015142:	6823      	ldr	r3, [r4, #0]
 8015144:	6922      	ldr	r2, [r4, #16]
 8015146:	f003 0306 	and.w	r3, r3, #6
 801514a:	2b04      	cmp	r3, #4
 801514c:	bf02      	ittt	eq
 801514e:	68e5      	ldreq	r5, [r4, #12]
 8015150:	6833      	ldreq	r3, [r6, #0]
 8015152:	1aed      	subeq	r5, r5, r3
 8015154:	68a3      	ldr	r3, [r4, #8]
 8015156:	bf0c      	ite	eq
 8015158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801515c:	2500      	movne	r5, #0
 801515e:	4293      	cmp	r3, r2
 8015160:	bfc4      	itt	gt
 8015162:	1a9b      	subgt	r3, r3, r2
 8015164:	18ed      	addgt	r5, r5, r3
 8015166:	2600      	movs	r6, #0
 8015168:	341a      	adds	r4, #26
 801516a:	42b5      	cmp	r5, r6
 801516c:	d11a      	bne.n	80151a4 <_printf_common+0xc8>
 801516e:	2000      	movs	r0, #0
 8015170:	e008      	b.n	8015184 <_printf_common+0xa8>
 8015172:	2301      	movs	r3, #1
 8015174:	4652      	mov	r2, sl
 8015176:	4649      	mov	r1, r9
 8015178:	4638      	mov	r0, r7
 801517a:	47c0      	blx	r8
 801517c:	3001      	adds	r0, #1
 801517e:	d103      	bne.n	8015188 <_printf_common+0xac>
 8015180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015188:	3501      	adds	r5, #1
 801518a:	e7c6      	b.n	801511a <_printf_common+0x3e>
 801518c:	18e1      	adds	r1, r4, r3
 801518e:	1c5a      	adds	r2, r3, #1
 8015190:	2030      	movs	r0, #48	; 0x30
 8015192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015196:	4422      	add	r2, r4
 8015198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801519c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80151a0:	3302      	adds	r3, #2
 80151a2:	e7c7      	b.n	8015134 <_printf_common+0x58>
 80151a4:	2301      	movs	r3, #1
 80151a6:	4622      	mov	r2, r4
 80151a8:	4649      	mov	r1, r9
 80151aa:	4638      	mov	r0, r7
 80151ac:	47c0      	blx	r8
 80151ae:	3001      	adds	r0, #1
 80151b0:	d0e6      	beq.n	8015180 <_printf_common+0xa4>
 80151b2:	3601      	adds	r6, #1
 80151b4:	e7d9      	b.n	801516a <_printf_common+0x8e>
	...

080151b8 <_printf_i>:
 80151b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80151bc:	7e0f      	ldrb	r7, [r1, #24]
 80151be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80151c0:	2f78      	cmp	r7, #120	; 0x78
 80151c2:	4691      	mov	r9, r2
 80151c4:	4680      	mov	r8, r0
 80151c6:	460c      	mov	r4, r1
 80151c8:	469a      	mov	sl, r3
 80151ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80151ce:	d807      	bhi.n	80151e0 <_printf_i+0x28>
 80151d0:	2f62      	cmp	r7, #98	; 0x62
 80151d2:	d80a      	bhi.n	80151ea <_printf_i+0x32>
 80151d4:	2f00      	cmp	r7, #0
 80151d6:	f000 80d4 	beq.w	8015382 <_printf_i+0x1ca>
 80151da:	2f58      	cmp	r7, #88	; 0x58
 80151dc:	f000 80c0 	beq.w	8015360 <_printf_i+0x1a8>
 80151e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80151e8:	e03a      	b.n	8015260 <_printf_i+0xa8>
 80151ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80151ee:	2b15      	cmp	r3, #21
 80151f0:	d8f6      	bhi.n	80151e0 <_printf_i+0x28>
 80151f2:	a101      	add	r1, pc, #4	; (adr r1, 80151f8 <_printf_i+0x40>)
 80151f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80151f8:	08015251 	.word	0x08015251
 80151fc:	08015265 	.word	0x08015265
 8015200:	080151e1 	.word	0x080151e1
 8015204:	080151e1 	.word	0x080151e1
 8015208:	080151e1 	.word	0x080151e1
 801520c:	080151e1 	.word	0x080151e1
 8015210:	08015265 	.word	0x08015265
 8015214:	080151e1 	.word	0x080151e1
 8015218:	080151e1 	.word	0x080151e1
 801521c:	080151e1 	.word	0x080151e1
 8015220:	080151e1 	.word	0x080151e1
 8015224:	08015369 	.word	0x08015369
 8015228:	08015291 	.word	0x08015291
 801522c:	08015323 	.word	0x08015323
 8015230:	080151e1 	.word	0x080151e1
 8015234:	080151e1 	.word	0x080151e1
 8015238:	0801538b 	.word	0x0801538b
 801523c:	080151e1 	.word	0x080151e1
 8015240:	08015291 	.word	0x08015291
 8015244:	080151e1 	.word	0x080151e1
 8015248:	080151e1 	.word	0x080151e1
 801524c:	0801532b 	.word	0x0801532b
 8015250:	682b      	ldr	r3, [r5, #0]
 8015252:	1d1a      	adds	r2, r3, #4
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	602a      	str	r2, [r5, #0]
 8015258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801525c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015260:	2301      	movs	r3, #1
 8015262:	e09f      	b.n	80153a4 <_printf_i+0x1ec>
 8015264:	6820      	ldr	r0, [r4, #0]
 8015266:	682b      	ldr	r3, [r5, #0]
 8015268:	0607      	lsls	r7, r0, #24
 801526a:	f103 0104 	add.w	r1, r3, #4
 801526e:	6029      	str	r1, [r5, #0]
 8015270:	d501      	bpl.n	8015276 <_printf_i+0xbe>
 8015272:	681e      	ldr	r6, [r3, #0]
 8015274:	e003      	b.n	801527e <_printf_i+0xc6>
 8015276:	0646      	lsls	r6, r0, #25
 8015278:	d5fb      	bpl.n	8015272 <_printf_i+0xba>
 801527a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801527e:	2e00      	cmp	r6, #0
 8015280:	da03      	bge.n	801528a <_printf_i+0xd2>
 8015282:	232d      	movs	r3, #45	; 0x2d
 8015284:	4276      	negs	r6, r6
 8015286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801528a:	485a      	ldr	r0, [pc, #360]	; (80153f4 <_printf_i+0x23c>)
 801528c:	230a      	movs	r3, #10
 801528e:	e012      	b.n	80152b6 <_printf_i+0xfe>
 8015290:	682b      	ldr	r3, [r5, #0]
 8015292:	6820      	ldr	r0, [r4, #0]
 8015294:	1d19      	adds	r1, r3, #4
 8015296:	6029      	str	r1, [r5, #0]
 8015298:	0605      	lsls	r5, r0, #24
 801529a:	d501      	bpl.n	80152a0 <_printf_i+0xe8>
 801529c:	681e      	ldr	r6, [r3, #0]
 801529e:	e002      	b.n	80152a6 <_printf_i+0xee>
 80152a0:	0641      	lsls	r1, r0, #25
 80152a2:	d5fb      	bpl.n	801529c <_printf_i+0xe4>
 80152a4:	881e      	ldrh	r6, [r3, #0]
 80152a6:	4853      	ldr	r0, [pc, #332]	; (80153f4 <_printf_i+0x23c>)
 80152a8:	2f6f      	cmp	r7, #111	; 0x6f
 80152aa:	bf0c      	ite	eq
 80152ac:	2308      	moveq	r3, #8
 80152ae:	230a      	movne	r3, #10
 80152b0:	2100      	movs	r1, #0
 80152b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80152b6:	6865      	ldr	r5, [r4, #4]
 80152b8:	60a5      	str	r5, [r4, #8]
 80152ba:	2d00      	cmp	r5, #0
 80152bc:	bfa2      	ittt	ge
 80152be:	6821      	ldrge	r1, [r4, #0]
 80152c0:	f021 0104 	bicge.w	r1, r1, #4
 80152c4:	6021      	strge	r1, [r4, #0]
 80152c6:	b90e      	cbnz	r6, 80152cc <_printf_i+0x114>
 80152c8:	2d00      	cmp	r5, #0
 80152ca:	d04b      	beq.n	8015364 <_printf_i+0x1ac>
 80152cc:	4615      	mov	r5, r2
 80152ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80152d2:	fb03 6711 	mls	r7, r3, r1, r6
 80152d6:	5dc7      	ldrb	r7, [r0, r7]
 80152d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80152dc:	4637      	mov	r7, r6
 80152de:	42bb      	cmp	r3, r7
 80152e0:	460e      	mov	r6, r1
 80152e2:	d9f4      	bls.n	80152ce <_printf_i+0x116>
 80152e4:	2b08      	cmp	r3, #8
 80152e6:	d10b      	bne.n	8015300 <_printf_i+0x148>
 80152e8:	6823      	ldr	r3, [r4, #0]
 80152ea:	07de      	lsls	r6, r3, #31
 80152ec:	d508      	bpl.n	8015300 <_printf_i+0x148>
 80152ee:	6923      	ldr	r3, [r4, #16]
 80152f0:	6861      	ldr	r1, [r4, #4]
 80152f2:	4299      	cmp	r1, r3
 80152f4:	bfde      	ittt	le
 80152f6:	2330      	movle	r3, #48	; 0x30
 80152f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80152fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015300:	1b52      	subs	r2, r2, r5
 8015302:	6122      	str	r2, [r4, #16]
 8015304:	f8cd a000 	str.w	sl, [sp]
 8015308:	464b      	mov	r3, r9
 801530a:	aa03      	add	r2, sp, #12
 801530c:	4621      	mov	r1, r4
 801530e:	4640      	mov	r0, r8
 8015310:	f7ff fee4 	bl	80150dc <_printf_common>
 8015314:	3001      	adds	r0, #1
 8015316:	d14a      	bne.n	80153ae <_printf_i+0x1f6>
 8015318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801531c:	b004      	add	sp, #16
 801531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015322:	6823      	ldr	r3, [r4, #0]
 8015324:	f043 0320 	orr.w	r3, r3, #32
 8015328:	6023      	str	r3, [r4, #0]
 801532a:	4833      	ldr	r0, [pc, #204]	; (80153f8 <_printf_i+0x240>)
 801532c:	2778      	movs	r7, #120	; 0x78
 801532e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015332:	6823      	ldr	r3, [r4, #0]
 8015334:	6829      	ldr	r1, [r5, #0]
 8015336:	061f      	lsls	r7, r3, #24
 8015338:	f851 6b04 	ldr.w	r6, [r1], #4
 801533c:	d402      	bmi.n	8015344 <_printf_i+0x18c>
 801533e:	065f      	lsls	r7, r3, #25
 8015340:	bf48      	it	mi
 8015342:	b2b6      	uxthmi	r6, r6
 8015344:	07df      	lsls	r7, r3, #31
 8015346:	bf48      	it	mi
 8015348:	f043 0320 	orrmi.w	r3, r3, #32
 801534c:	6029      	str	r1, [r5, #0]
 801534e:	bf48      	it	mi
 8015350:	6023      	strmi	r3, [r4, #0]
 8015352:	b91e      	cbnz	r6, 801535c <_printf_i+0x1a4>
 8015354:	6823      	ldr	r3, [r4, #0]
 8015356:	f023 0320 	bic.w	r3, r3, #32
 801535a:	6023      	str	r3, [r4, #0]
 801535c:	2310      	movs	r3, #16
 801535e:	e7a7      	b.n	80152b0 <_printf_i+0xf8>
 8015360:	4824      	ldr	r0, [pc, #144]	; (80153f4 <_printf_i+0x23c>)
 8015362:	e7e4      	b.n	801532e <_printf_i+0x176>
 8015364:	4615      	mov	r5, r2
 8015366:	e7bd      	b.n	80152e4 <_printf_i+0x12c>
 8015368:	682b      	ldr	r3, [r5, #0]
 801536a:	6826      	ldr	r6, [r4, #0]
 801536c:	6961      	ldr	r1, [r4, #20]
 801536e:	1d18      	adds	r0, r3, #4
 8015370:	6028      	str	r0, [r5, #0]
 8015372:	0635      	lsls	r5, r6, #24
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	d501      	bpl.n	801537c <_printf_i+0x1c4>
 8015378:	6019      	str	r1, [r3, #0]
 801537a:	e002      	b.n	8015382 <_printf_i+0x1ca>
 801537c:	0670      	lsls	r0, r6, #25
 801537e:	d5fb      	bpl.n	8015378 <_printf_i+0x1c0>
 8015380:	8019      	strh	r1, [r3, #0]
 8015382:	2300      	movs	r3, #0
 8015384:	6123      	str	r3, [r4, #16]
 8015386:	4615      	mov	r5, r2
 8015388:	e7bc      	b.n	8015304 <_printf_i+0x14c>
 801538a:	682b      	ldr	r3, [r5, #0]
 801538c:	1d1a      	adds	r2, r3, #4
 801538e:	602a      	str	r2, [r5, #0]
 8015390:	681d      	ldr	r5, [r3, #0]
 8015392:	6862      	ldr	r2, [r4, #4]
 8015394:	2100      	movs	r1, #0
 8015396:	4628      	mov	r0, r5
 8015398:	f7ea ff3a 	bl	8000210 <memchr>
 801539c:	b108      	cbz	r0, 80153a2 <_printf_i+0x1ea>
 801539e:	1b40      	subs	r0, r0, r5
 80153a0:	6060      	str	r0, [r4, #4]
 80153a2:	6863      	ldr	r3, [r4, #4]
 80153a4:	6123      	str	r3, [r4, #16]
 80153a6:	2300      	movs	r3, #0
 80153a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153ac:	e7aa      	b.n	8015304 <_printf_i+0x14c>
 80153ae:	6923      	ldr	r3, [r4, #16]
 80153b0:	462a      	mov	r2, r5
 80153b2:	4649      	mov	r1, r9
 80153b4:	4640      	mov	r0, r8
 80153b6:	47d0      	blx	sl
 80153b8:	3001      	adds	r0, #1
 80153ba:	d0ad      	beq.n	8015318 <_printf_i+0x160>
 80153bc:	6823      	ldr	r3, [r4, #0]
 80153be:	079b      	lsls	r3, r3, #30
 80153c0:	d413      	bmi.n	80153ea <_printf_i+0x232>
 80153c2:	68e0      	ldr	r0, [r4, #12]
 80153c4:	9b03      	ldr	r3, [sp, #12]
 80153c6:	4298      	cmp	r0, r3
 80153c8:	bfb8      	it	lt
 80153ca:	4618      	movlt	r0, r3
 80153cc:	e7a6      	b.n	801531c <_printf_i+0x164>
 80153ce:	2301      	movs	r3, #1
 80153d0:	4632      	mov	r2, r6
 80153d2:	4649      	mov	r1, r9
 80153d4:	4640      	mov	r0, r8
 80153d6:	47d0      	blx	sl
 80153d8:	3001      	adds	r0, #1
 80153da:	d09d      	beq.n	8015318 <_printf_i+0x160>
 80153dc:	3501      	adds	r5, #1
 80153de:	68e3      	ldr	r3, [r4, #12]
 80153e0:	9903      	ldr	r1, [sp, #12]
 80153e2:	1a5b      	subs	r3, r3, r1
 80153e4:	42ab      	cmp	r3, r5
 80153e6:	dcf2      	bgt.n	80153ce <_printf_i+0x216>
 80153e8:	e7eb      	b.n	80153c2 <_printf_i+0x20a>
 80153ea:	2500      	movs	r5, #0
 80153ec:	f104 0619 	add.w	r6, r4, #25
 80153f0:	e7f5      	b.n	80153de <_printf_i+0x226>
 80153f2:	bf00      	nop
 80153f4:	08016721 	.word	0x08016721
 80153f8:	08016732 	.word	0x08016732

080153fc <__sflush_r>:
 80153fc:	898a      	ldrh	r2, [r1, #12]
 80153fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015402:	4605      	mov	r5, r0
 8015404:	0710      	lsls	r0, r2, #28
 8015406:	460c      	mov	r4, r1
 8015408:	d458      	bmi.n	80154bc <__sflush_r+0xc0>
 801540a:	684b      	ldr	r3, [r1, #4]
 801540c:	2b00      	cmp	r3, #0
 801540e:	dc05      	bgt.n	801541c <__sflush_r+0x20>
 8015410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015412:	2b00      	cmp	r3, #0
 8015414:	dc02      	bgt.n	801541c <__sflush_r+0x20>
 8015416:	2000      	movs	r0, #0
 8015418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801541c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801541e:	2e00      	cmp	r6, #0
 8015420:	d0f9      	beq.n	8015416 <__sflush_r+0x1a>
 8015422:	2300      	movs	r3, #0
 8015424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015428:	682f      	ldr	r7, [r5, #0]
 801542a:	6a21      	ldr	r1, [r4, #32]
 801542c:	602b      	str	r3, [r5, #0]
 801542e:	d032      	beq.n	8015496 <__sflush_r+0x9a>
 8015430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015432:	89a3      	ldrh	r3, [r4, #12]
 8015434:	075a      	lsls	r2, r3, #29
 8015436:	d505      	bpl.n	8015444 <__sflush_r+0x48>
 8015438:	6863      	ldr	r3, [r4, #4]
 801543a:	1ac0      	subs	r0, r0, r3
 801543c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801543e:	b10b      	cbz	r3, 8015444 <__sflush_r+0x48>
 8015440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015442:	1ac0      	subs	r0, r0, r3
 8015444:	2300      	movs	r3, #0
 8015446:	4602      	mov	r2, r0
 8015448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801544a:	6a21      	ldr	r1, [r4, #32]
 801544c:	4628      	mov	r0, r5
 801544e:	47b0      	blx	r6
 8015450:	1c43      	adds	r3, r0, #1
 8015452:	89a3      	ldrh	r3, [r4, #12]
 8015454:	d106      	bne.n	8015464 <__sflush_r+0x68>
 8015456:	6829      	ldr	r1, [r5, #0]
 8015458:	291d      	cmp	r1, #29
 801545a:	d82b      	bhi.n	80154b4 <__sflush_r+0xb8>
 801545c:	4a29      	ldr	r2, [pc, #164]	; (8015504 <__sflush_r+0x108>)
 801545e:	410a      	asrs	r2, r1
 8015460:	07d6      	lsls	r6, r2, #31
 8015462:	d427      	bmi.n	80154b4 <__sflush_r+0xb8>
 8015464:	2200      	movs	r2, #0
 8015466:	6062      	str	r2, [r4, #4]
 8015468:	04d9      	lsls	r1, r3, #19
 801546a:	6922      	ldr	r2, [r4, #16]
 801546c:	6022      	str	r2, [r4, #0]
 801546e:	d504      	bpl.n	801547a <__sflush_r+0x7e>
 8015470:	1c42      	adds	r2, r0, #1
 8015472:	d101      	bne.n	8015478 <__sflush_r+0x7c>
 8015474:	682b      	ldr	r3, [r5, #0]
 8015476:	b903      	cbnz	r3, 801547a <__sflush_r+0x7e>
 8015478:	6560      	str	r0, [r4, #84]	; 0x54
 801547a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801547c:	602f      	str	r7, [r5, #0]
 801547e:	2900      	cmp	r1, #0
 8015480:	d0c9      	beq.n	8015416 <__sflush_r+0x1a>
 8015482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015486:	4299      	cmp	r1, r3
 8015488:	d002      	beq.n	8015490 <__sflush_r+0x94>
 801548a:	4628      	mov	r0, r5
 801548c:	f7ff fb36 	bl	8014afc <_free_r>
 8015490:	2000      	movs	r0, #0
 8015492:	6360      	str	r0, [r4, #52]	; 0x34
 8015494:	e7c0      	b.n	8015418 <__sflush_r+0x1c>
 8015496:	2301      	movs	r3, #1
 8015498:	4628      	mov	r0, r5
 801549a:	47b0      	blx	r6
 801549c:	1c41      	adds	r1, r0, #1
 801549e:	d1c8      	bne.n	8015432 <__sflush_r+0x36>
 80154a0:	682b      	ldr	r3, [r5, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d0c5      	beq.n	8015432 <__sflush_r+0x36>
 80154a6:	2b1d      	cmp	r3, #29
 80154a8:	d001      	beq.n	80154ae <__sflush_r+0xb2>
 80154aa:	2b16      	cmp	r3, #22
 80154ac:	d101      	bne.n	80154b2 <__sflush_r+0xb6>
 80154ae:	602f      	str	r7, [r5, #0]
 80154b0:	e7b1      	b.n	8015416 <__sflush_r+0x1a>
 80154b2:	89a3      	ldrh	r3, [r4, #12]
 80154b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154b8:	81a3      	strh	r3, [r4, #12]
 80154ba:	e7ad      	b.n	8015418 <__sflush_r+0x1c>
 80154bc:	690f      	ldr	r7, [r1, #16]
 80154be:	2f00      	cmp	r7, #0
 80154c0:	d0a9      	beq.n	8015416 <__sflush_r+0x1a>
 80154c2:	0793      	lsls	r3, r2, #30
 80154c4:	680e      	ldr	r6, [r1, #0]
 80154c6:	bf08      	it	eq
 80154c8:	694b      	ldreq	r3, [r1, #20]
 80154ca:	600f      	str	r7, [r1, #0]
 80154cc:	bf18      	it	ne
 80154ce:	2300      	movne	r3, #0
 80154d0:	eba6 0807 	sub.w	r8, r6, r7
 80154d4:	608b      	str	r3, [r1, #8]
 80154d6:	f1b8 0f00 	cmp.w	r8, #0
 80154da:	dd9c      	ble.n	8015416 <__sflush_r+0x1a>
 80154dc:	6a21      	ldr	r1, [r4, #32]
 80154de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80154e0:	4643      	mov	r3, r8
 80154e2:	463a      	mov	r2, r7
 80154e4:	4628      	mov	r0, r5
 80154e6:	47b0      	blx	r6
 80154e8:	2800      	cmp	r0, #0
 80154ea:	dc06      	bgt.n	80154fa <__sflush_r+0xfe>
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154f2:	81a3      	strh	r3, [r4, #12]
 80154f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154f8:	e78e      	b.n	8015418 <__sflush_r+0x1c>
 80154fa:	4407      	add	r7, r0
 80154fc:	eba8 0800 	sub.w	r8, r8, r0
 8015500:	e7e9      	b.n	80154d6 <__sflush_r+0xda>
 8015502:	bf00      	nop
 8015504:	dfbffffe 	.word	0xdfbffffe

08015508 <_fflush_r>:
 8015508:	b538      	push	{r3, r4, r5, lr}
 801550a:	690b      	ldr	r3, [r1, #16]
 801550c:	4605      	mov	r5, r0
 801550e:	460c      	mov	r4, r1
 8015510:	b913      	cbnz	r3, 8015518 <_fflush_r+0x10>
 8015512:	2500      	movs	r5, #0
 8015514:	4628      	mov	r0, r5
 8015516:	bd38      	pop	{r3, r4, r5, pc}
 8015518:	b118      	cbz	r0, 8015522 <_fflush_r+0x1a>
 801551a:	6a03      	ldr	r3, [r0, #32]
 801551c:	b90b      	cbnz	r3, 8015522 <_fflush_r+0x1a>
 801551e:	f7ff f8c9 	bl	80146b4 <__sinit>
 8015522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d0f3      	beq.n	8015512 <_fflush_r+0xa>
 801552a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801552c:	07d0      	lsls	r0, r2, #31
 801552e:	d404      	bmi.n	801553a <_fflush_r+0x32>
 8015530:	0599      	lsls	r1, r3, #22
 8015532:	d402      	bmi.n	801553a <_fflush_r+0x32>
 8015534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015536:	f7ff fa9e 	bl	8014a76 <__retarget_lock_acquire_recursive>
 801553a:	4628      	mov	r0, r5
 801553c:	4621      	mov	r1, r4
 801553e:	f7ff ff5d 	bl	80153fc <__sflush_r>
 8015542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015544:	07da      	lsls	r2, r3, #31
 8015546:	4605      	mov	r5, r0
 8015548:	d4e4      	bmi.n	8015514 <_fflush_r+0xc>
 801554a:	89a3      	ldrh	r3, [r4, #12]
 801554c:	059b      	lsls	r3, r3, #22
 801554e:	d4e1      	bmi.n	8015514 <_fflush_r+0xc>
 8015550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015552:	f7ff fa91 	bl	8014a78 <__retarget_lock_release_recursive>
 8015556:	e7dd      	b.n	8015514 <_fflush_r+0xc>

08015558 <fiprintf>:
 8015558:	b40e      	push	{r1, r2, r3}
 801555a:	b503      	push	{r0, r1, lr}
 801555c:	4601      	mov	r1, r0
 801555e:	ab03      	add	r3, sp, #12
 8015560:	4805      	ldr	r0, [pc, #20]	; (8015578 <fiprintf+0x20>)
 8015562:	f853 2b04 	ldr.w	r2, [r3], #4
 8015566:	6800      	ldr	r0, [r0, #0]
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	f7ff fc9d 	bl	8014ea8 <_vfiprintf_r>
 801556e:	b002      	add	sp, #8
 8015570:	f85d eb04 	ldr.w	lr, [sp], #4
 8015574:	b003      	add	sp, #12
 8015576:	4770      	bx	lr
 8015578:	2000010c 	.word	0x2000010c

0801557c <__swbuf_r>:
 801557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801557e:	460e      	mov	r6, r1
 8015580:	4614      	mov	r4, r2
 8015582:	4605      	mov	r5, r0
 8015584:	b118      	cbz	r0, 801558e <__swbuf_r+0x12>
 8015586:	6a03      	ldr	r3, [r0, #32]
 8015588:	b90b      	cbnz	r3, 801558e <__swbuf_r+0x12>
 801558a:	f7ff f893 	bl	80146b4 <__sinit>
 801558e:	69a3      	ldr	r3, [r4, #24]
 8015590:	60a3      	str	r3, [r4, #8]
 8015592:	89a3      	ldrh	r3, [r4, #12]
 8015594:	071a      	lsls	r2, r3, #28
 8015596:	d525      	bpl.n	80155e4 <__swbuf_r+0x68>
 8015598:	6923      	ldr	r3, [r4, #16]
 801559a:	b31b      	cbz	r3, 80155e4 <__swbuf_r+0x68>
 801559c:	6823      	ldr	r3, [r4, #0]
 801559e:	6922      	ldr	r2, [r4, #16]
 80155a0:	1a98      	subs	r0, r3, r2
 80155a2:	6963      	ldr	r3, [r4, #20]
 80155a4:	b2f6      	uxtb	r6, r6
 80155a6:	4283      	cmp	r3, r0
 80155a8:	4637      	mov	r7, r6
 80155aa:	dc04      	bgt.n	80155b6 <__swbuf_r+0x3a>
 80155ac:	4621      	mov	r1, r4
 80155ae:	4628      	mov	r0, r5
 80155b0:	f7ff ffaa 	bl	8015508 <_fflush_r>
 80155b4:	b9e0      	cbnz	r0, 80155f0 <__swbuf_r+0x74>
 80155b6:	68a3      	ldr	r3, [r4, #8]
 80155b8:	3b01      	subs	r3, #1
 80155ba:	60a3      	str	r3, [r4, #8]
 80155bc:	6823      	ldr	r3, [r4, #0]
 80155be:	1c5a      	adds	r2, r3, #1
 80155c0:	6022      	str	r2, [r4, #0]
 80155c2:	701e      	strb	r6, [r3, #0]
 80155c4:	6962      	ldr	r2, [r4, #20]
 80155c6:	1c43      	adds	r3, r0, #1
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d004      	beq.n	80155d6 <__swbuf_r+0x5a>
 80155cc:	89a3      	ldrh	r3, [r4, #12]
 80155ce:	07db      	lsls	r3, r3, #31
 80155d0:	d506      	bpl.n	80155e0 <__swbuf_r+0x64>
 80155d2:	2e0a      	cmp	r6, #10
 80155d4:	d104      	bne.n	80155e0 <__swbuf_r+0x64>
 80155d6:	4621      	mov	r1, r4
 80155d8:	4628      	mov	r0, r5
 80155da:	f7ff ff95 	bl	8015508 <_fflush_r>
 80155de:	b938      	cbnz	r0, 80155f0 <__swbuf_r+0x74>
 80155e0:	4638      	mov	r0, r7
 80155e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155e4:	4621      	mov	r1, r4
 80155e6:	4628      	mov	r0, r5
 80155e8:	f000 f806 	bl	80155f8 <__swsetup_r>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	d0d5      	beq.n	801559c <__swbuf_r+0x20>
 80155f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80155f4:	e7f4      	b.n	80155e0 <__swbuf_r+0x64>
	...

080155f8 <__swsetup_r>:
 80155f8:	b538      	push	{r3, r4, r5, lr}
 80155fa:	4b2a      	ldr	r3, [pc, #168]	; (80156a4 <__swsetup_r+0xac>)
 80155fc:	4605      	mov	r5, r0
 80155fe:	6818      	ldr	r0, [r3, #0]
 8015600:	460c      	mov	r4, r1
 8015602:	b118      	cbz	r0, 801560c <__swsetup_r+0x14>
 8015604:	6a03      	ldr	r3, [r0, #32]
 8015606:	b90b      	cbnz	r3, 801560c <__swsetup_r+0x14>
 8015608:	f7ff f854 	bl	80146b4 <__sinit>
 801560c:	89a3      	ldrh	r3, [r4, #12]
 801560e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015612:	0718      	lsls	r0, r3, #28
 8015614:	d422      	bmi.n	801565c <__swsetup_r+0x64>
 8015616:	06d9      	lsls	r1, r3, #27
 8015618:	d407      	bmi.n	801562a <__swsetup_r+0x32>
 801561a:	2309      	movs	r3, #9
 801561c:	602b      	str	r3, [r5, #0]
 801561e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015622:	81a3      	strh	r3, [r4, #12]
 8015624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015628:	e034      	b.n	8015694 <__swsetup_r+0x9c>
 801562a:	0758      	lsls	r0, r3, #29
 801562c:	d512      	bpl.n	8015654 <__swsetup_r+0x5c>
 801562e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015630:	b141      	cbz	r1, 8015644 <__swsetup_r+0x4c>
 8015632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015636:	4299      	cmp	r1, r3
 8015638:	d002      	beq.n	8015640 <__swsetup_r+0x48>
 801563a:	4628      	mov	r0, r5
 801563c:	f7ff fa5e 	bl	8014afc <_free_r>
 8015640:	2300      	movs	r3, #0
 8015642:	6363      	str	r3, [r4, #52]	; 0x34
 8015644:	89a3      	ldrh	r3, [r4, #12]
 8015646:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801564a:	81a3      	strh	r3, [r4, #12]
 801564c:	2300      	movs	r3, #0
 801564e:	6063      	str	r3, [r4, #4]
 8015650:	6923      	ldr	r3, [r4, #16]
 8015652:	6023      	str	r3, [r4, #0]
 8015654:	89a3      	ldrh	r3, [r4, #12]
 8015656:	f043 0308 	orr.w	r3, r3, #8
 801565a:	81a3      	strh	r3, [r4, #12]
 801565c:	6923      	ldr	r3, [r4, #16]
 801565e:	b94b      	cbnz	r3, 8015674 <__swsetup_r+0x7c>
 8015660:	89a3      	ldrh	r3, [r4, #12]
 8015662:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801566a:	d003      	beq.n	8015674 <__swsetup_r+0x7c>
 801566c:	4621      	mov	r1, r4
 801566e:	4628      	mov	r0, r5
 8015670:	f000 f847 	bl	8015702 <__smakebuf_r>
 8015674:	89a0      	ldrh	r0, [r4, #12]
 8015676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801567a:	f010 0301 	ands.w	r3, r0, #1
 801567e:	d00a      	beq.n	8015696 <__swsetup_r+0x9e>
 8015680:	2300      	movs	r3, #0
 8015682:	60a3      	str	r3, [r4, #8]
 8015684:	6963      	ldr	r3, [r4, #20]
 8015686:	425b      	negs	r3, r3
 8015688:	61a3      	str	r3, [r4, #24]
 801568a:	6923      	ldr	r3, [r4, #16]
 801568c:	b943      	cbnz	r3, 80156a0 <__swsetup_r+0xa8>
 801568e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015692:	d1c4      	bne.n	801561e <__swsetup_r+0x26>
 8015694:	bd38      	pop	{r3, r4, r5, pc}
 8015696:	0781      	lsls	r1, r0, #30
 8015698:	bf58      	it	pl
 801569a:	6963      	ldrpl	r3, [r4, #20]
 801569c:	60a3      	str	r3, [r4, #8]
 801569e:	e7f4      	b.n	801568a <__swsetup_r+0x92>
 80156a0:	2000      	movs	r0, #0
 80156a2:	e7f7      	b.n	8015694 <__swsetup_r+0x9c>
 80156a4:	2000010c 	.word	0x2000010c

080156a8 <abort>:
 80156a8:	b508      	push	{r3, lr}
 80156aa:	2006      	movs	r0, #6
 80156ac:	f000 f88e 	bl	80157cc <raise>
 80156b0:	2001      	movs	r0, #1
 80156b2:	f7ec f8b5 	bl	8001820 <_exit>

080156b6 <__swhatbuf_r>:
 80156b6:	b570      	push	{r4, r5, r6, lr}
 80156b8:	460c      	mov	r4, r1
 80156ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156be:	2900      	cmp	r1, #0
 80156c0:	b096      	sub	sp, #88	; 0x58
 80156c2:	4615      	mov	r5, r2
 80156c4:	461e      	mov	r6, r3
 80156c6:	da0d      	bge.n	80156e4 <__swhatbuf_r+0x2e>
 80156c8:	89a3      	ldrh	r3, [r4, #12]
 80156ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80156ce:	f04f 0100 	mov.w	r1, #0
 80156d2:	bf0c      	ite	eq
 80156d4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80156d8:	2340      	movne	r3, #64	; 0x40
 80156da:	2000      	movs	r0, #0
 80156dc:	6031      	str	r1, [r6, #0]
 80156de:	602b      	str	r3, [r5, #0]
 80156e0:	b016      	add	sp, #88	; 0x58
 80156e2:	bd70      	pop	{r4, r5, r6, pc}
 80156e4:	466a      	mov	r2, sp
 80156e6:	f000 f879 	bl	80157dc <_fstat_r>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	dbec      	blt.n	80156c8 <__swhatbuf_r+0x12>
 80156ee:	9901      	ldr	r1, [sp, #4]
 80156f0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80156f4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80156f8:	4259      	negs	r1, r3
 80156fa:	4159      	adcs	r1, r3
 80156fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015700:	e7eb      	b.n	80156da <__swhatbuf_r+0x24>

08015702 <__smakebuf_r>:
 8015702:	898b      	ldrh	r3, [r1, #12]
 8015704:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015706:	079d      	lsls	r5, r3, #30
 8015708:	4606      	mov	r6, r0
 801570a:	460c      	mov	r4, r1
 801570c:	d507      	bpl.n	801571e <__smakebuf_r+0x1c>
 801570e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015712:	6023      	str	r3, [r4, #0]
 8015714:	6123      	str	r3, [r4, #16]
 8015716:	2301      	movs	r3, #1
 8015718:	6163      	str	r3, [r4, #20]
 801571a:	b002      	add	sp, #8
 801571c:	bd70      	pop	{r4, r5, r6, pc}
 801571e:	ab01      	add	r3, sp, #4
 8015720:	466a      	mov	r2, sp
 8015722:	f7ff ffc8 	bl	80156b6 <__swhatbuf_r>
 8015726:	9900      	ldr	r1, [sp, #0]
 8015728:	4605      	mov	r5, r0
 801572a:	4630      	mov	r0, r6
 801572c:	f7fe fd8a 	bl	8014244 <_malloc_r>
 8015730:	b948      	cbnz	r0, 8015746 <__smakebuf_r+0x44>
 8015732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015736:	059a      	lsls	r2, r3, #22
 8015738:	d4ef      	bmi.n	801571a <__smakebuf_r+0x18>
 801573a:	f023 0303 	bic.w	r3, r3, #3
 801573e:	f043 0302 	orr.w	r3, r3, #2
 8015742:	81a3      	strh	r3, [r4, #12]
 8015744:	e7e3      	b.n	801570e <__smakebuf_r+0xc>
 8015746:	89a3      	ldrh	r3, [r4, #12]
 8015748:	6020      	str	r0, [r4, #0]
 801574a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801574e:	81a3      	strh	r3, [r4, #12]
 8015750:	9b00      	ldr	r3, [sp, #0]
 8015752:	6163      	str	r3, [r4, #20]
 8015754:	9b01      	ldr	r3, [sp, #4]
 8015756:	6120      	str	r0, [r4, #16]
 8015758:	b15b      	cbz	r3, 8015772 <__smakebuf_r+0x70>
 801575a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801575e:	4630      	mov	r0, r6
 8015760:	f000 f84e 	bl	8015800 <_isatty_r>
 8015764:	b128      	cbz	r0, 8015772 <__smakebuf_r+0x70>
 8015766:	89a3      	ldrh	r3, [r4, #12]
 8015768:	f023 0303 	bic.w	r3, r3, #3
 801576c:	f043 0301 	orr.w	r3, r3, #1
 8015770:	81a3      	strh	r3, [r4, #12]
 8015772:	89a3      	ldrh	r3, [r4, #12]
 8015774:	431d      	orrs	r5, r3
 8015776:	81a5      	strh	r5, [r4, #12]
 8015778:	e7cf      	b.n	801571a <__smakebuf_r+0x18>

0801577a <_raise_r>:
 801577a:	291f      	cmp	r1, #31
 801577c:	b538      	push	{r3, r4, r5, lr}
 801577e:	4604      	mov	r4, r0
 8015780:	460d      	mov	r5, r1
 8015782:	d904      	bls.n	801578e <_raise_r+0x14>
 8015784:	2316      	movs	r3, #22
 8015786:	6003      	str	r3, [r0, #0]
 8015788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801578c:	bd38      	pop	{r3, r4, r5, pc}
 801578e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015790:	b112      	cbz	r2, 8015798 <_raise_r+0x1e>
 8015792:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015796:	b94b      	cbnz	r3, 80157ac <_raise_r+0x32>
 8015798:	4620      	mov	r0, r4
 801579a:	f000 f853 	bl	8015844 <_getpid_r>
 801579e:	462a      	mov	r2, r5
 80157a0:	4601      	mov	r1, r0
 80157a2:	4620      	mov	r0, r4
 80157a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157a8:	f000 b83a 	b.w	8015820 <_kill_r>
 80157ac:	2b01      	cmp	r3, #1
 80157ae:	d00a      	beq.n	80157c6 <_raise_r+0x4c>
 80157b0:	1c59      	adds	r1, r3, #1
 80157b2:	d103      	bne.n	80157bc <_raise_r+0x42>
 80157b4:	2316      	movs	r3, #22
 80157b6:	6003      	str	r3, [r0, #0]
 80157b8:	2001      	movs	r0, #1
 80157ba:	e7e7      	b.n	801578c <_raise_r+0x12>
 80157bc:	2400      	movs	r4, #0
 80157be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80157c2:	4628      	mov	r0, r5
 80157c4:	4798      	blx	r3
 80157c6:	2000      	movs	r0, #0
 80157c8:	e7e0      	b.n	801578c <_raise_r+0x12>
	...

080157cc <raise>:
 80157cc:	4b02      	ldr	r3, [pc, #8]	; (80157d8 <raise+0xc>)
 80157ce:	4601      	mov	r1, r0
 80157d0:	6818      	ldr	r0, [r3, #0]
 80157d2:	f7ff bfd2 	b.w	801577a <_raise_r>
 80157d6:	bf00      	nop
 80157d8:	2000010c 	.word	0x2000010c

080157dc <_fstat_r>:
 80157dc:	b538      	push	{r3, r4, r5, lr}
 80157de:	4d07      	ldr	r5, [pc, #28]	; (80157fc <_fstat_r+0x20>)
 80157e0:	2300      	movs	r3, #0
 80157e2:	4604      	mov	r4, r0
 80157e4:	4608      	mov	r0, r1
 80157e6:	4611      	mov	r1, r2
 80157e8:	602b      	str	r3, [r5, #0]
 80157ea:	f7ec f868 	bl	80018be <_fstat>
 80157ee:	1c43      	adds	r3, r0, #1
 80157f0:	d102      	bne.n	80157f8 <_fstat_r+0x1c>
 80157f2:	682b      	ldr	r3, [r5, #0]
 80157f4:	b103      	cbz	r3, 80157f8 <_fstat_r+0x1c>
 80157f6:	6023      	str	r3, [r4, #0]
 80157f8:	bd38      	pop	{r3, r4, r5, pc}
 80157fa:	bf00      	nop
 80157fc:	20012b6c 	.word	0x20012b6c

08015800 <_isatty_r>:
 8015800:	b538      	push	{r3, r4, r5, lr}
 8015802:	4d06      	ldr	r5, [pc, #24]	; (801581c <_isatty_r+0x1c>)
 8015804:	2300      	movs	r3, #0
 8015806:	4604      	mov	r4, r0
 8015808:	4608      	mov	r0, r1
 801580a:	602b      	str	r3, [r5, #0]
 801580c:	f7ec f867 	bl	80018de <_isatty>
 8015810:	1c43      	adds	r3, r0, #1
 8015812:	d102      	bne.n	801581a <_isatty_r+0x1a>
 8015814:	682b      	ldr	r3, [r5, #0]
 8015816:	b103      	cbz	r3, 801581a <_isatty_r+0x1a>
 8015818:	6023      	str	r3, [r4, #0]
 801581a:	bd38      	pop	{r3, r4, r5, pc}
 801581c:	20012b6c 	.word	0x20012b6c

08015820 <_kill_r>:
 8015820:	b538      	push	{r3, r4, r5, lr}
 8015822:	4d07      	ldr	r5, [pc, #28]	; (8015840 <_kill_r+0x20>)
 8015824:	2300      	movs	r3, #0
 8015826:	4604      	mov	r4, r0
 8015828:	4608      	mov	r0, r1
 801582a:	4611      	mov	r1, r2
 801582c:	602b      	str	r3, [r5, #0]
 801582e:	f7eb ffe7 	bl	8001800 <_kill>
 8015832:	1c43      	adds	r3, r0, #1
 8015834:	d102      	bne.n	801583c <_kill_r+0x1c>
 8015836:	682b      	ldr	r3, [r5, #0]
 8015838:	b103      	cbz	r3, 801583c <_kill_r+0x1c>
 801583a:	6023      	str	r3, [r4, #0]
 801583c:	bd38      	pop	{r3, r4, r5, pc}
 801583e:	bf00      	nop
 8015840:	20012b6c 	.word	0x20012b6c

08015844 <_getpid_r>:
 8015844:	f7eb bfd4 	b.w	80017f0 <_getpid>

08015848 <_init>:
 8015848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584a:	bf00      	nop
 801584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801584e:	bc08      	pop	{r3}
 8015850:	469e      	mov	lr, r3
 8015852:	4770      	bx	lr

08015854 <_fini>:
 8015854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015856:	bf00      	nop
 8015858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801585a:	bc08      	pop	{r3}
 801585c:	469e      	mov	lr, r3
 801585e:	4770      	bx	lr
